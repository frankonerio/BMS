
usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007544  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007708  08007708  00008708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007770  08007770  0000910c  2**0
                  CONTENTS
  4 .ARM          00000008  08007770  08007770  00008770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007778  08007778  0000910c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00008778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800777c  0800777c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08007780  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c04  2000010c  0800788c  0000910c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d10  0800788c  00009d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000910c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3bc  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb4  00000000  00000000  000174f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0001a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008be  00000000  00000000  0001ac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002353c  00000000  00000000  0001b546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe31  00000000  00000000  0003ea82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9a21  00000000  00000000  0004e8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001182d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f0c  00000000  00000000  00118318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0011b224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080076f0 	.word	0x080076f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	080076f0 	.word	0x080076f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 f951 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f817 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f881 	bl	8000608 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000506:	f006 fb37 	bl	8006b78 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 uint8_t buffer[] = "Hello World\r\n";
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <main+0x38>)
 800050c:	463c      	mov	r4, r7
 800050e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000510:	c407      	stmia	r4!, {r0, r1, r2}
 8000512:	8023      	strh	r3, [r4, #0]
	 CDC_Transmit_FS(buffer, sizeof(buffer));
 8000514:	463b      	mov	r3, r7
 8000516:	210e      	movs	r1, #14
 8000518:	4618      	mov	r0, r3
 800051a:	f006 fbeb 	bl	8006cf4 <CDC_Transmit_FS>
	 HAL_Delay(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000522:	f000 f9af 	bl	8000884 <HAL_Delay>
  {
 8000526:	bf00      	nop
 8000528:	e7ef      	b.n	800050a <main+0x16>
 800052a:	bf00      	nop
 800052c:	08007708 	.word	0x08007708

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 031c 	add.w	r3, r7, #28
 800053a:	2234      	movs	r2, #52	@ 0x34
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 f8aa 	bl	8007698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a28      	ldr	r2, [pc, #160]	@ (8000600 <SystemClock_Config+0xd0>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <SystemClock_Config+0xd4>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a4:	23a8      	movs	r3, #168	@ 0xa8
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fd13 	bl	8002fe4 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c4:	f000 f848 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 feb2 	bl	8002350 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f2:	f000 f831 	bl	8000658 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <MX_GPIO_Init+0x4c>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	6313      	str	r3, [r2, #48]	@ 0x30
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_GPIO_Init+0x4c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a08      	ldr	r2, [pc, #32]	@ (8000654 <MX_GPIO_Init+0x4c>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_GPIO_Init+0x4c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <Error_Handler+0x8>

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <HAL_MspInit+0x4c>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000672:	4a0f      	ldr	r2, [pc, #60]	@ (80006b0 <HAL_MspInit+0x4c>)
 8000674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000678:	6453      	str	r3, [r2, #68]	@ 0x44
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <HAL_MspInit+0x4c>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068e:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <HAL_MspInit+0x4c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	@ 0x40
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <NMI_Handler+0x4>

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <MemManage_Handler+0x4>

080006cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070a:	f000 f89b 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000718:	4802      	ldr	r0, [pc, #8]	@ (8000724 <OTG_FS_IRQHandler+0x10>)
 800071a:	f000 fcc8 	bl	80010ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000160c 	.word	0x2000160c

08000728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <SystemInit+0x20>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000732:	4a05      	ldr	r2, [pc, #20]	@ (8000748 <SystemInit+0x20>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000784 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000750:	f7ff ffea 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	@ (800078c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	@ (8000798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800077a:	f006 ff95 	bl	80076a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077e:	f7ff feb9 	bl	80004f4 <main>
  bx  lr    
 8000782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000790:	08007780 	.word	0x08007780
  ldr r2, =_sbss
 8000794:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000798:	20001d10 	.word	0x20001d10

0800079c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <HAL_Init+0x40>)
 80007aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_Init+0x40>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_Init+0x40>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_Init+0x40>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f94f 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	200f      	movs	r0, #15
 80007d0:	f000 f808 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff ff46 	bl	8000664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023c00 	.word	0x40023c00

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_InitTick+0x54>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_InitTick+0x58>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f967 	bl	8000ad6 <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e00e      	b.n	8000830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80a      	bhi.n	800082e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000820:	f000 f92f 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000824:	4a06      	ldr	r2, [pc, #24]	@ (8000840 <HAL_InitTick+0x5c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008
 8000840:	20000004 	.word	0x20000004

08000844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_IncTick+0x20>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_IncTick+0x24>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <HAL_IncTick+0x24>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008
 8000868:	20000128 	.word	0x20000128

0800086c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return uwTick;
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <HAL_GetTick+0x14>)
 8000872:	681b      	ldr	r3, [r3, #0]
}
 8000874:	4618      	mov	r0, r3
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000128 	.word	0x20000128

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff ffee 	bl	800086c <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800089c:	d005      	beq.n	80008aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_Delay+0x44>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008aa:	bf00      	nop
 80008ac:	f7ff ffde 	bl	800086c <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f7      	bhi.n	80008ac <HAL_Delay+0x28>
  {
  }
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4907      	ldr	r1, [pc, #28]	@ (8000968 <__NVIC_EnableIRQ+0x38>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	@ (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	@ 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff29 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff3e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff31 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa2 	bl	8000a28 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	@ 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
 8000b0a:	e165      	b.n	8000dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 8154 	bne.w	8000dd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d005      	beq.n	8000b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d130      	bne.n	8000ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4013      	ands	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b78:	2201      	movs	r2, #1
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	4013      	ands	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	091b      	lsrs	r3, r3, #4
 8000b8e:	f003 0201 	and.w	r2, r3, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d017      	beq.n	8000be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d123      	bne.n	8000c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	08da      	lsrs	r2, r3, #3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3208      	adds	r2, #8
 8000bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	691a      	ldr	r2, [r3, #16]
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	08da      	lsrs	r2, r3, #3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	69b9      	ldr	r1, [r7, #24]
 8000c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0203 	and.w	r2, r3, #3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80ae 	beq.w	8000dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000df0 <HAL_GPIO_Init+0x300>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	4a5c      	ldr	r2, [pc, #368]	@ (8000df0 <HAL_GPIO_Init+0x300>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c86:	4b5a      	ldr	r3, [pc, #360]	@ (8000df0 <HAL_GPIO_Init+0x300>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c92:	4a58      	ldr	r2, [pc, #352]	@ (8000df4 <HAL_GPIO_Init+0x304>)
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3302      	adds	r3, #2
 8000c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	220f      	movs	r2, #15
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8000df8 <HAL_GPIO_Init+0x308>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d025      	beq.n	8000d0a <HAL_GPIO_Init+0x21a>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8000dfc <HAL_GPIO_Init+0x30c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d01f      	beq.n	8000d06 <HAL_GPIO_Init+0x216>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d019      	beq.n	8000d02 <HAL_GPIO_Init+0x212>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000e04 <HAL_GPIO_Init+0x314>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0x20e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8000e08 <HAL_GPIO_Init+0x318>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d00d      	beq.n	8000cfa <HAL_GPIO_Init+0x20a>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4a      	ldr	r2, [pc, #296]	@ (8000e0c <HAL_GPIO_Init+0x31c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d007      	beq.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a49      	ldr	r2, [pc, #292]	@ (8000e10 <HAL_GPIO_Init+0x320>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d101      	bne.n	8000cf2 <HAL_GPIO_Init+0x202>
 8000cee:	2306      	movs	r3, #6
 8000cf0:	e00c      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	e00a      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	e008      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e006      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e004      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e002      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <HAL_GPIO_Init+0x21c>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	f002 0203 	and.w	r2, r2, #3
 8000d12:	0092      	lsls	r2, r2, #2
 8000d14:	4093      	lsls	r3, r2
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d1c:	4935      	ldr	r1, [pc, #212]	@ (8000df4 <HAL_GPIO_Init+0x304>)
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	089b      	lsrs	r3, r3, #2
 8000d22:	3302      	adds	r3, #2
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d4e:	4a31      	ldr	r2, [pc, #196]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d78:	4a26      	ldr	r2, [pc, #152]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d7e:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000da2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dcc:	4a11      	ldr	r2, [pc, #68]	@ (8000e14 <HAL_GPIO_Init+0x324>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	f67f ae96 	bls.w	8000b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020c00 	.word	0x40020c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40021400 	.word	0x40021400
 8000e10:	40021800 	.word	0x40021800
 8000e14:	40013c00 	.word	0x40013c00

08000e18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d101      	bne.n	8000e2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e108      	b.n	800103c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d106      	bne.n	8000e4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f006 f8af 	bl	8006fa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e58:	d102      	bne.n	8000e60 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fc72 	bl	800374e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7c1a      	ldrb	r2, [r3, #16]
 8000e72:	f88d 2000 	strb.w	r2, [sp]
 8000e76:	3304      	adds	r3, #4
 8000e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7a:	f002 fb51 	bl	8003520 <USB_CoreInit>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2202      	movs	r2, #2
 8000e88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e0d5      	b.n	800103c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fc6a 	bl	8003770 <USB_SetCurrentMode>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0c6      	b.n	800103c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e04a      	b.n	8000f4a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eb4:	7bfa      	ldrb	r2, [r7, #15]
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3315      	adds	r3, #21
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3314      	adds	r3, #20
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	b298      	uxth	r0, r3
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	332e      	adds	r3, #46	@ 0x2e
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3318      	adds	r3, #24
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	331c      	adds	r3, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	3320      	adds	r3, #32
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3324      	adds	r3, #36	@ 0x24
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3af      	bcc.n	8000eb4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e044      	b.n	8000fe4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	791b      	ldrb	r3, [r3, #4]
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3b5      	bcc.n	8000f5a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7c1a      	ldrb	r2, [r3, #16]
 8000ff6:	f88d 2000 	strb.w	r2, [sp]
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ffe:	f002 fc03 	bl	8003808 <USB_DevInit>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2202      	movs	r2, #2
 800100c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e013      	b.n	800103c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7b1b      	ldrb	r3, [r3, #12]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f001 f96c 	bl	8002308 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f003 fc3a 	bl	80048ae <USB_DevDisconnect>

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_PCD_Start+0x1c>
 800105c:	2302      	movs	r3, #2
 800105e:	e022      	b.n	80010a6 <HAL_PCD_Start+0x62>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d009      	beq.n	8001088 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001078:	2b01      	cmp	r3, #1
 800107a:	d105      	bne.n	8001088 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001080:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fb4d 	bl	800372c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f003 fbe8 	bl	800486c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b08d      	sub	sp, #52	@ 0x34
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fca6 	bl	8004a16 <USB_GetMode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f040 84b9 	bne.w	8001a44 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fc0a 	bl	80048f0 <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 84af 	beq.w	8001a42 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fbf7 	bl	80048f0 <USB_ReadInterrupts>
 8001102:	4603      	mov	r3, r0
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b02      	cmp	r3, #2
 800110a:	d107      	bne.n	800111c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f002 0202 	and.w	r2, r2, #2
 800111a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fbe5 	bl	80048f0 <USB_ReadInterrupts>
 8001126:	4603      	mov	r3, r0
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	2b10      	cmp	r3, #16
 800112e:	d161      	bne.n	80011f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699a      	ldr	r2, [r3, #24]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0210 	bic.w	r2, r2, #16
 800113e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f003 020f 	and.w	r2, r3, #15
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	3304      	adds	r3, #4
 800115e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	0c5b      	lsrs	r3, r3, #17
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	2b02      	cmp	r3, #2
 800116a:	d124      	bne.n	80011b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d035      	beq.n	80011e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	6a38      	ldr	r0, [r7, #32]
 800118c:	f003 fa1c 	bl	80045c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800119c:	441a      	add	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011ae:	441a      	add	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	e016      	b.n	80011e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	0c5b      	lsrs	r3, r3, #17
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d110      	bne.n	80011e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80011c8:	2208      	movs	r2, #8
 80011ca:	4619      	mov	r1, r3
 80011cc:	6a38      	ldr	r0, [r7, #32]
 80011ce:	f003 f9fb 	bl	80045c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011de:	441a      	add	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 fb79 	bl	80048f0 <USB_ReadInterrupts>
 80011fe:	4603      	mov	r3, r0
 8001200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001204:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001208:	f040 80a7 	bne.w	800135a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fb7e 	bl	8004916 <USB_ReadDevAllOutEpInterrupt>
 800121a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800121c:	e099      	b.n	8001352 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800121e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 808e 	beq.w	8001346 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fba2 	bl	800497e <USB_ReadDevOutEPInterrupt>
 800123a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00c      	beq.n	8001260 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	015a      	lsls	r2, r3, #5
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	4413      	add	r3, r2
 800124e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001252:	461a      	mov	r2, r3
 8001254:	2301      	movs	r3, #1
 8001256:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fece 	bl	8001ffc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00c      	beq.n	8001284 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	015a      	lsls	r2, r3, #5
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	4413      	add	r3, r2
 8001272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001276:	461a      	mov	r2, r3
 8001278:	2308      	movs	r3, #8
 800127a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800127c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 ffa4 	bl	80021cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	015a      	lsls	r2, r3, #5
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800129a:	461a      	mov	r2, r3
 800129c:	2310      	movs	r3, #16
 800129e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d030      	beq.n	800130c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012b2:	2b80      	cmp	r3, #128	@ 0x80
 80012b4:	d109      	bne.n	80012ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80012c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012cc:	4613      	mov	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	3304      	adds	r3, #4
 80012de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2200      	movs	r2, #0
 80012ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f005 ff73 	bl	80071e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001306:	461a      	mov	r2, r3
 8001308:	2302      	movs	r3, #2
 800130a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	015a      	lsls	r2, r3, #5
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4413      	add	r3, r2
 800131e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001322:	461a      	mov	r2, r3
 8001324:	2320      	movs	r3, #32
 8001326:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800133e:	461a      	mov	r2, r3
 8001340:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001344:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	3301      	adds	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800134c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	f47f af62 	bne.w	800121e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fac6 	bl	80048f0 <USB_ReadInterrupts>
 8001364:	4603      	mov	r3, r0
 8001366:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800136a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800136e:	f040 80db 	bne.w	8001528 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fae7 	bl	800494a <USB_ReadDevAllInEpInterrupt>
 800137c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001382:	e0cd      	b.n	8001520 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80c2 	beq.w	8001514 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fb0d 	bl	80049ba <USB_ReadDevInEPInterrupt>
 80013a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d057      	beq.n	800145c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	2201      	movs	r2, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69f9      	ldr	r1, [r7, #28]
 80013c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80013cc:	4013      	ands	r3, r2
 80013ce:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	015a      	lsls	r2, r3, #5
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013dc:	461a      	mov	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	799b      	ldrb	r3, [r3, #6]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d132      	bne.n	8001450 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	3320      	adds	r3, #32
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4403      	add	r3, r0
 800140a:	331c      	adds	r3, #28
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4419      	add	r1, r3
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4403      	add	r3, r0
 800141e:	3320      	adds	r3, #32
 8001420:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	2b00      	cmp	r3, #0
 8001426:	d113      	bne.n	8001450 <HAL_PCD_IRQHandler+0x3a2>
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3324      	adds	r3, #36	@ 0x24
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d108      	bne.n	8001450 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001448:	461a      	mov	r2, r3
 800144a:	2101      	movs	r1, #1
 800144c:	f003 fb14 	bl	8004a78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4619      	mov	r1, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f005 fe3d 	bl	80070d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d008      	beq.n	8001478 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
 800146e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001472:	461a      	mov	r2, r3
 8001474:	2308      	movs	r3, #8
 8001476:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800148e:	461a      	mov	r2, r3
 8001490:	2310      	movs	r3, #16
 8001492:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800149a:	2b00      	cmp	r3, #0
 800149c:	d008      	beq.n	80014b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	015a      	lsls	r2, r3, #5
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	4413      	add	r3, r2
 80014a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014aa:	461a      	mov	r2, r3
 80014ac:	2340      	movs	r3, #64	@ 0x40
 80014ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d023      	beq.n	8001502 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014bc:	6a38      	ldr	r0, [r7, #32]
 80014be:	f002 fb01 	bl	8003ac4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	3310      	adds	r3, #16
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	3304      	adds	r3, #4
 80014d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	78db      	ldrb	r3, [r3, #3]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d108      	bne.n	80014f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2200      	movs	r2, #0
 80014e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f005 fe8a 	bl	8007204 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014fc:	461a      	mov	r2, r3
 80014fe:	2302      	movs	r3, #2
 8001500:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800150c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fce8 	bl	8001ee4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	3301      	adds	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	f47f af2e 	bne.w	8001384 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f9df 	bl	80048f0 <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800153c:	d122      	bne.n	8001584 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001558:	2b01      	cmp	r3, #1
 800155a:	d108      	bne.n	800156e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001564:	2100      	movs	r1, #0
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f006 f804 	bl	8007574 <HAL_PCDEx_LPM_Callback>
 800156c:	e002      	b.n	8001574 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f005 fe28 	bl	80071c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 f9b1 	bl	80048f0 <USB_ReadInterrupts>
 800158e:	4603      	mov	r3, r0
 8001590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001598:	d112      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f005 fde4 	bl	8007178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80015be:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f993 	bl	80048f0 <USB_ReadInterrupts>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80015d4:	d121      	bne.n	800161a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80015e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d111      	bne.n	8001614 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	f003 020f 	and.w	r2, r3, #15
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800160a:	2101      	movs	r1, #1
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f005 ffb1 	bl	8007574 <HAL_PCDEx_LPM_Callback>
 8001612:	e002      	b.n	800161a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f005 fdaf 	bl	8007178 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f003 f966 	bl	80048f0 <USB_ReadInterrupts>
 8001624:	4603      	mov	r3, r0
 8001626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800162a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800162e:	f040 80b7 	bne.w	80017a0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2110      	movs	r1, #16
 800164c:	4618      	mov	r0, r3
 800164e:	f002 fa39 	bl	8003ac4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001656:	e046      	b.n	80016e6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001664:	461a      	mov	r2, r3
 8001666:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800166a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800167c:	0151      	lsls	r1, r2, #5
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	440a      	add	r2, r1
 8001682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001686:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800168a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800168c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001698:	461a      	mov	r2, r3
 800169a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800169e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b0:	0151      	lsls	r1, r2, #5
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	440a      	add	r2, r1
 80016b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	015a      	lsls	r2, r3, #5
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	4413      	add	r3, r2
 80016c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d0:	0151      	lsls	r1, r2, #5
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	440a      	add	r2, r1
 80016d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016de:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e2:	3301      	adds	r3, #1
 80016e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	461a      	mov	r2, r3
 80016ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d3b2      	bcc.n	8001658 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001700:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001704:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7bdb      	ldrb	r3, [r3, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800171e:	f043 030b 	orr.w	r3, r3, #11
 8001722:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001734:	f043 030b 	orr.w	r3, r3, #11
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	e015      	b.n	8001768 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800174a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800174e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001752:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001762:	f043 030b 	orr.w	r3, r3, #11
 8001766:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001776:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800177a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800178a:	461a      	mov	r2, r3
 800178c:	f003 f974 	bl	8004a78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800179e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 f8a3 	bl	80048f0 <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017b4:	d123      	bne.n	80017fe <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f939 	bl	8004a32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 f9f6 	bl	8003bb6 <USB_GetDevSpeed>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681c      	ldr	r4, [r3, #0]
 80017d6:	f000 fea1 	bl	800251c <HAL_RCC_GetHCLKFreq>
 80017da:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017e0:	461a      	mov	r2, r3
 80017e2:	4620      	mov	r0, r4
 80017e4:	f001 ff00 	bl	80035e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f005 fc9c 	bl	8007126 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80017fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f874 	bl	80048f0 <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b08      	cmp	r3, #8
 8001810:	d10a      	bne.n	8001828 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f005 fc79 	bl	800710a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f002 0208 	and.w	r2, r2, #8
 8001826:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f003 f85f 	bl	80048f0 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001838:	2b80      	cmp	r3, #128	@ 0x80
 800183a:	d123      	bne.n	8001884 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
 800184c:	e014      	b.n	8001878 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fb08 	bl	8001e82 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	791b      	ldrb	r3, [r3, #4]
 800187c:	461a      	mov	r2, r3
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	4293      	cmp	r3, r2
 8001882:	d3e4      	bcc.n	800184e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f003 f831 	bl	80048f0 <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001898:	d13c      	bne.n	8001914 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800189a:	2301      	movs	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
 800189e:	e02b      	b.n	80018f8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3318      	adds	r3, #24
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d115      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da12      	bge.n	80018f2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3317      	adds	r3, #23
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4619      	mov	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fac8 	bl	8001e82 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	3301      	adds	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	461a      	mov	r2, r3
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	4293      	cmp	r3, r2
 8001902:	d3cd      	bcc.n	80018a0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 ffe9 	bl	80048f0 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001928:	d156      	bne.n	80019d8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192a:	2301      	movs	r3, #1
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
 800192e:	e045      	b.n	80019bc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d12e      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001958:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800195a:	2b00      	cmp	r3, #0
 800195c:	da2b      	bge.n	80019b6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800196a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800196e:	429a      	cmp	r2, r3
 8001970:	d121      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10a      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b2:	6053      	str	r3, [r2, #4]
            break;
 80019b4:	e008      	b.n	80019c8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	3301      	adds	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	791b      	ldrb	r3, [r3, #4]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d3b3      	bcc.n	8001930 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80019d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 ff87 	bl	80048f0 <USB_ReadInterrupts>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ec:	d10a      	bne.n	8001a04 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f005 fc1a 	bl	8007228 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 ff71 	bl	80048f0 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d115      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f005 fc0a 	bl	8007244 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	e000      	b.n	8001a44 <HAL_PCD_IRQHandler+0x996>
      return;
 8001a42:	bf00      	nop
    }
  }
}
 8001a44:	3734      	adds	r7, #52	@ 0x34
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}

08001a4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_PCD_SetAddress+0x1a>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e012      	b.n	8001a8a <HAL_PCD_SetAddress+0x40>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fed0 	bl	8004820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	70fb      	strb	r3, [r7, #3]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	803b      	strh	r3, [r7, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001aac:	2300      	movs	r3, #0
 8001aae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	da0f      	bge.n	8001ad8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	f003 020f 	and.w	r2, r3, #15
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	705a      	strb	r2, [r3, #1]
 8001ad6:	e00f      	b.n	8001af8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 020f 	and.w	r2, r3, #15
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b04:	883a      	ldrh	r2, [r7, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b22:	78bb      	ldrb	r3, [r7, #2]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_PCD_EP_Open+0xaa>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_Open+0xc8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 f858 	bl	8003c00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001b58:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da0f      	bge.n	8001b96 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 020f 	and.w	r2, r3, #15
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	3310      	adds	r3, #16
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	705a      	strb	r2, [r3, #1]
 8001b94:	e00f      	b.n	8001bb6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_PCD_EP_Close+0x6e>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e00e      	b.n	8001bee <HAL_PCD_EP_Close+0x8c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 f896 	bl	8003d10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	460b      	mov	r3, r1
 8001c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2200      	movs	r2, #0
 8001c36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	799b      	ldrb	r3, [r3, #6]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	799b      	ldrb	r3, [r3, #6]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6979      	ldr	r1, [r7, #20]
 8001c5e:	f002 f933 	bl	8003ec8 <USB_EPStartXfer>

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3310      	adds	r3, #16
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	799b      	ldrb	r3, [r3, #6]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	799b      	ldrb	r3, [r3, #6]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	f002 f8e1 	bl	8003ec8 <USB_EPStartXfer>

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	7912      	ldrb	r2, [r2, #4]
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e04f      	b.n	8001dce <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da0f      	bge.n	8001d56 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 020f 	and.w	r2, r3, #15
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	3310      	adds	r3, #16
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	705a      	strb	r2, [r3, #1]
 8001d54:	e00d      	b.n	8001d72 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_PCD_EP_SetStall+0x82>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e01d      	b.n	8001dce <HAL_PCD_EP_SetStall+0xbe>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fc69 	bl	8004678 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7999      	ldrb	r1, [r3, #6]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f002 fe5a 	bl	8004a78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	7912      	ldrb	r2, [r2, #4]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e042      	b.n	8001e7a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da0f      	bge.n	8001e1c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	f003 020f 	and.w	r2, r3, #15
 8001e02:	4613      	mov	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	3310      	adds	r3, #16
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	3304      	adds	r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	705a      	strb	r2, [r3, #1]
 8001e1a:	e00f      	b.n	8001e3c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	f003 020f 	and.w	r2, r3, #15
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_EP_ClrStall+0x86>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e00e      	b.n	8001e7a <HAL_PCD_EP_ClrStall+0xa4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fc72 	bl	8004754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	da0c      	bge.n	8001eb0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	f003 020f 	and.w	r2, r3, #15
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3304      	adds	r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e00c      	b.n	8001eca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fa91 	bl	80043f8 <USB_EPStopXfer>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001eda:	7afb      	ldrb	r3, [r7, #11]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	3310      	adds	r3, #16
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	4413      	add	r3, r2
 8001f08:	3304      	adds	r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d901      	bls.n	8001f1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e06b      	b.n	8001ff4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d902      	bls.n	8001f38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f40:	e02a      	b.n	8001f98 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d902      	bls.n	8001f5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3303      	adds	r3, #3
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68d9      	ldr	r1, [r3, #12]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f002 fae6 	bl	800454c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	441a      	add	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	441a      	add	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d809      	bhi.n	8001fc2 <PCD_WriteEmptyTxFifo+0xde>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d203      	bcs.n	8001fc2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1bf      	bne.n	8001f42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d811      	bhi.n	8001ff2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001fee:	4013      	ands	r3, r2
 8001ff0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	333c      	adds	r3, #60	@ 0x3c
 8002014:	3304      	adds	r3, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	799b      	ldrb	r3, [r3, #6]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d17b      	bne.n	800212a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4a61      	ldr	r2, [pc, #388]	@ (80021c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	f240 80b9 	bls.w	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b3 	beq.w	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800205e:	461a      	mov	r2, r3
 8002060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002064:	6093      	str	r3, [r2, #8]
 8002066:	e0a7      	b.n	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0320 	and.w	r3, r3, #32
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800207e:	461a      	mov	r2, r3
 8002080:	2320      	movs	r3, #32
 8002082:	6093      	str	r3, [r2, #8]
 8002084:	e098      	b.n	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	f040 8093 	bne.w	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4a4b      	ldr	r2, [pc, #300]	@ (80021c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d90f      	bls.n	80020ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020b0:	461a      	mov	r2, r3
 80020b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020b6:	6093      	str	r3, [r2, #8]
 80020b8:	e07e      	b.n	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	0159      	lsls	r1, r3, #5
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	440b      	add	r3, r1
 80020dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	1ad2      	subs	r2, r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d114      	bne.n	800211c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d109      	bne.n	800210e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002104:	461a      	mov	r2, r3
 8002106:	2101      	movs	r1, #1
 8002108:	f002 fcb6 	bl	8004a78 <USB_EP0_OutStart>
 800210c:	e006      	b.n	800211c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	441a      	add	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f004 ffbc 	bl	80070a0 <HAL_PCD_DataOutStageCallback>
 8002128:	e046      	b.n	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d124      	bne.n	800217c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002148:	461a      	mov	r2, r3
 800214a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e032      	b.n	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	2320      	movs	r3, #32
 800216c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f004 ff93 	bl	80070a0 <HAL_PCD_DataOutStageCallback>
 800217a:	e01d      	b.n	80021b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d114      	bne.n	80021ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021a4:	461a      	mov	r2, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	f002 fc66 	bl	8004a78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f004 ff74 	bl	80070a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	4f54300a 	.word	0x4f54300a
 80021c8:	4f54310a 	.word	0x4f54310a

080021cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	333c      	adds	r3, #60	@ 0x3c
 80021e4:	3304      	adds	r3, #4
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <PCD_EP_OutSetupPacket_int+0x88>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d90e      	bls.n	8002220 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002218:	461a      	mov	r2, r3
 800221a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800221e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f004 ff2b 	bl	800707c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a0a      	ldr	r2, [pc, #40]	@ (8002254 <PCD_EP_OutSetupPacket_int+0x88>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d90c      	bls.n	8002248 <PCD_EP_OutSetupPacket_int+0x7c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	799b      	ldrb	r3, [r3, #6]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002240:	461a      	mov	r2, r3
 8002242:	2101      	movs	r1, #1
 8002244:	f002 fc18 	bl	8004a78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	4f54300a 	.word	0x4f54300a

08002258 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	4613      	mov	r3, r2
 8002266:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d107      	bne.n	8002286 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002276:	883b      	ldrh	r3, [r7, #0]
 8002278:	0419      	lsls	r1, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	430a      	orrs	r2, r1
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
 8002284:	e028      	b.n	80022d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	4413      	add	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e00d      	b.n	80022b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	3340      	adds	r3, #64	@ 0x40
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	4413      	add	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	3301      	adds	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3ec      	bcc.n	800229a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022c0:	883b      	ldrh	r3, [r7, #0]
 80022c2:	0418      	lsls	r0, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6819      	ldr	r1, [r3, #0]
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4302      	orrs	r2, r0
 80022d0:	3340      	adds	r3, #64	@ 0x40
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233a:	f043 0303 	orr.w	r3, r3, #3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0cc      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b68      	ldr	r3, [pc, #416]	@ (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d90c      	bls.n	800238c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b65      	ldr	r3, [pc, #404]	@ (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b63      	ldr	r3, [pc, #396]	@ (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0b8      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a4:	4b59      	ldr	r3, [pc, #356]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a58      	ldr	r2, [pc, #352]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023bc:	4b53      	ldr	r3, [pc, #332]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a52      	ldr	r2, [pc, #328]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b50      	ldr	r3, [pc, #320]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	494d      	ldr	r1, [pc, #308]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d044      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b47      	ldr	r3, [pc, #284]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d119      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e07f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240a:	2b03      	cmp	r3, #3
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b3f      	ldr	r3, [pc, #252]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e067      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4934      	ldr	r1, [pc, #208]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7fe fa14 	bl	800086c <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe fa10 	bl	800086c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e04f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d20c      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b22      	ldr	r3, [pc, #136]	@ (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e032      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4916      	ldr	r1, [pc, #88]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c2:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	490e      	ldr	r1, [pc, #56]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d6:	f000 fb57 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	490a      	ldr	r1, [pc, #40]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	5ccb      	ldrb	r3, [r1, r3]
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f974 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00
 800250c:	40023800 	.word	0x40023800
 8002510:	08007760 	.word	0x08007760
 8002514:	20000000 	.word	0x20000000
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b03      	ldr	r3, [pc, #12]	@ (8002530 <HAL_RCC_GetHCLKFreq+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	@ 0x30
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800256c:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800256e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002572:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	496c      	ldr	r1, [pc, #432]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800258a:	2301      	movs	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800259a:	4b64      	ldr	r3, [pc, #400]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	4960      	ldr	r1, [pc, #384]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80025b8:	2301      	movs	r3, #1
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c8:	4b58      	ldr	r3, [pc, #352]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4955      	ldr	r1, [pc, #340]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025e6:	d101      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80025f4:	2301      	movs	r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d017      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002604:	4b49      	ldr	r3, [pc, #292]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800260a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002612:	4946      	ldr	r1, [pc, #280]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002622:	d101      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002624:	2301      	movs	r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002630:	2301      	movs	r3, #1
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 808a 	beq.w	8002756 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b39      	ldr	r3, [pc, #228]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	4a38      	ldr	r2, [pc, #224]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002650:	6413      	str	r3, [r2, #64]	@ 0x40
 8002652:	4b36      	ldr	r3, [pc, #216]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800265e:	4b34      	ldr	r3, [pc, #208]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a33      	ldr	r2, [pc, #204]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800266a:	f7fe f8ff 	bl	800086c <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe f8fb 	bl	800086c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e278      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002684:	4b2a      	ldr	r3, [pc, #168]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002690:	4b26      	ldr	r3, [pc, #152]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002698:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02f      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a8:	6a3a      	ldr	r2, [r7, #32]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d028      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ae:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026be:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026ca:	4b18      	ldr	r3, [pc, #96]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d114      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe f8c9 	bl	800086c <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe f8c5 	bl	800086c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e240      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ee      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800270c:	d114      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800270e:	4b07      	ldr	r3, [pc, #28]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800271e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002722:	4902      	ldr	r1, [pc, #8]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]
 8002728:	e00c      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470e40 	.word	0x42470e40
 8002738:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a49      	ldr	r2, [pc, #292]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800273e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002742:	6093      	str	r3, [r2, #8]
 8002744:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002746:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	4944      	ldr	r1, [pc, #272]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002752:	4313      	orrs	r3, r2
 8002754:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002768:	4b3f      	ldr	r3, [pc, #252]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800276a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002778:	4b3a      	ldr	r3, [pc, #232]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800277a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800277e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002786:	4937      	ldr	r1, [pc, #220]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800279a:	4b32      	ldr	r3, [pc, #200]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800279c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a8:	492e      	ldr	r1, [pc, #184]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d011      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027bc:	4b29      	ldr	r3, [pc, #164]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	4926      	ldr	r1, [pc, #152]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027da:	d101      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80027dc:	2301      	movs	r3, #1
 80027de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	491a      	ldr	r1, [pc, #104]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d011      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002814:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281c:	4911      	ldr	r1, [pc, #68]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800282e:	2301      	movs	r3, #1
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d005      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002840:	f040 80ff 	bne.w	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800284a:	f7fe f80f 	bl	800086c <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002850:	e00e      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002852:	f7fe f80b 	bl	800086c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d907      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e188      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002864:	40023800 	.word	0x40023800
 8002868:	424711e0 	.word	0x424711e0
 800286c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002870:	4b7e      	ldr	r3, [pc, #504]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ea      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002898:	2b00      	cmp	r3, #0
 800289a:	d028      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d124      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028a4:	4b71      	ldr	r3, [pc, #452]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	3301      	adds	r3, #1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028bc:	0e1b      	lsrs	r3, r3, #24
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	071b      	lsls	r3, r3, #28
 80028e6:	4961      	ldr	r1, [pc, #388]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800290c:	2b00      	cmp	r3, #0
 800290e:	d035      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002918:	d130      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800291a:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800292c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800292e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002932:	0f1b      	lsrs	r3, r3, #28
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	019b      	lsls	r3, r3, #6
 8002944:	431a      	orrs	r2, r3
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	431a      	orrs	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	071b      	lsls	r3, r3, #28
 800295c:	4943      	ldr	r1, [pc, #268]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002964:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296a:	f023 021f 	bic.w	r2, r3, #31
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	493d      	ldr	r1, [pc, #244]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d029      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002990:	d124      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002992:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029a4:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029aa:	0f1b      	lsrs	r3, r3, #28
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	019b      	lsls	r3, r3, #6
 80029bc:	431a      	orrs	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	431a      	orrs	r2, r3
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	431a      	orrs	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	071b      	lsls	r3, r3, #28
 80029d4:	4925      	ldr	r1, [pc, #148]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d016      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	3b01      	subs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	071b      	lsls	r3, r3, #28
 8002a0e:	4917      	ldr	r1, [pc, #92]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a16:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fd ff26 	bl	800086c <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a24:	f7fd ff22 	bl	800086c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e09f      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 8095 	bne.w	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a50:	f7fd ff0c 	bl	800086c <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a56:	e00f      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a58:	f7fd ff08 	bl	800086c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d908      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e085      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	42470068 	.word	0x42470068
 8002a74:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a78:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a84:	d0e8      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02b      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d127      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002aae:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	019b      	lsls	r3, r3, #6
 8002aca:	431a      	orrs	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	4928      	ldr	r1, [pc, #160]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ae4:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	3b01      	subs	r3, #1
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	4922      	ldr	r1, [pc, #136]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01d      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b12:	d118      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b14:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	0e1b      	lsrs	r3, r3, #24
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	019b      	lsls	r3, r3, #6
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	4910      	ldr	r1, [pc, #64]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b46:	4b0f      	ldr	r3, [pc, #60]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7fd fe8e 	bl	800086c <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b54:	f7fd fe8a 	bl	800086c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e007      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b72:	d1ef      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3730      	adds	r7, #48	@ 0x30
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	42470070 	.word	0x42470070

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b0ae      	sub	sp, #184	@ 0xb8
 8002b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bae:	4bcb      	ldr	r3, [pc, #812]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	f200 8204 	bhi.w	8002fc4 <HAL_RCC_GetSysClockFreq+0x43c>
 8002bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002fc5 	.word	0x08002fc5
 8002bcc:	08002fc5 	.word	0x08002fc5
 8002bd0:	08002fc5 	.word	0x08002fc5
 8002bd4:	08002c01 	.word	0x08002c01
 8002bd8:	08002fc5 	.word	0x08002fc5
 8002bdc:	08002fc5 	.word	0x08002fc5
 8002be0:	08002fc5 	.word	0x08002fc5
 8002be4:	08002c09 	.word	0x08002c09
 8002be8:	08002fc5 	.word	0x08002fc5
 8002bec:	08002fc5 	.word	0x08002fc5
 8002bf0:	08002fc5 	.word	0x08002fc5
 8002bf4:	08002df9 	.word	0x08002df9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002bfe:	e1e5      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c00:	4bb7      	ldr	r3, [pc, #732]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c06:	e1e1      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c08:	4bb4      	ldr	r3, [pc, #720]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c14:	4bb1      	ldr	r3, [pc, #708]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d071      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c20:	4bae      	ldr	r3, [pc, #696]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c2c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c46:	4622      	mov	r2, r4
 8002c48:	462b      	mov	r3, r5
 8002c4a:	f04f 0000 	mov.w	r0, #0
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	0159      	lsls	r1, r3, #5
 8002c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c58:	0150      	lsls	r0, r2, #5
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4621      	mov	r1, r4
 8002c60:	1a51      	subs	r1, r2, r1
 8002c62:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c64:	4629      	mov	r1, r5
 8002c66:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c78:	4649      	mov	r1, r9
 8002c7a:	018b      	lsls	r3, r1, #6
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c82:	4641      	mov	r1, r8
 8002c84:	018a      	lsls	r2, r1, #6
 8002c86:	4641      	mov	r1, r8
 8002c88:	1a51      	subs	r1, r2, r1
 8002c8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	00cb      	lsls	r3, r1, #3
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002caa:	4641      	mov	r1, r8
 8002cac:	00ca      	lsls	r2, r1, #3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cba:	462b      	mov	r3, r5
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	eb42 0303 	adc.w	r3, r2, r3
 8002cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	028b      	lsls	r3, r1, #10
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cda:	4621      	mov	r1, r4
 8002cdc:	028a      	lsls	r2, r1, #10
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002cf4:	f7fd fa86 	bl	8000204 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d02:	e067      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d04:	4b75      	ldr	r3, [pc, #468]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d10:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d1e:	2300      	movs	r3, #0
 8002d20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d58:	4649      	mov	r1, r9
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4641      	mov	r1, r8
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4641      	mov	r1, r8
 8002d68:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d86:	4692      	mov	sl, r2
 8002d88:	469b      	mov	fp, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb1a 0303 	adds.w	r3, sl, r3
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb4b 0303 	adc.w	r3, fp, r3
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002da6:	4629      	mov	r1, r5
 8002da8:	028b      	lsls	r3, r1, #10
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db0:	4621      	mov	r1, r4
 8002db2:	028a      	lsls	r2, r1, #10
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dc0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002dc6:	f7fd fa1d 	bl	8000204 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd4:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	3301      	adds	r3, #1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002df6:	e0e9      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df8:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e04:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d069      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e10:	4b32      	ldr	r3, [pc, #200]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	2200      	movs	r2, #0
 8002e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e24:	2300      	movs	r3, #0
 8002e26:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	462b      	mov	r3, r5
 8002e30:	f04f 0000 	mov.w	r0, #0
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	0159      	lsls	r1, r3, #5
 8002e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e3e:	0150      	lsls	r0, r2, #5
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4621      	mov	r1, r4
 8002e46:	1a51      	subs	r1, r2, r1
 8002e48:	61b9      	str	r1, [r7, #24]
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e5e:	4659      	mov	r1, fp
 8002e60:	018b      	lsls	r3, r1, #6
 8002e62:	4651      	mov	r1, sl
 8002e64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e68:	4651      	mov	r1, sl
 8002e6a:	018a      	lsls	r2, r1, #6
 8002e6c:	4651      	mov	r1, sl
 8002e6e:	ebb2 0801 	subs.w	r8, r2, r1
 8002e72:	4659      	mov	r1, fp
 8002e74:	eb63 0901 	sbc.w	r9, r3, r1
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e8c:	4690      	mov	r8, r2
 8002e8e:	4699      	mov	r9, r3
 8002e90:	4623      	mov	r3, r4
 8002e92:	eb18 0303 	adds.w	r3, r8, r3
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	462b      	mov	r3, r5
 8002e9a:	eb49 0303 	adc.w	r3, r9, r3
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002eac:	4629      	mov	r1, r5
 8002eae:	028b      	lsls	r3, r1, #10
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	028a      	lsls	r2, r1, #10
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ec6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ec8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ecc:	f7fd f99a 	bl	8000204 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002eda:	e063      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x41c>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x454>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	2200      	movs	r2, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	4611      	mov	r1, r2
 8002ef0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002efa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002efe:	4642      	mov	r2, r8
 8002f00:	464b      	mov	r3, r9
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	0159      	lsls	r1, r3, #5
 8002f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f10:	0150      	lsls	r0, r2, #5
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4641      	mov	r1, r8
 8002f18:	1a51      	subs	r1, r2, r1
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	4649      	mov	r1, r9
 8002f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f30:	4659      	mov	r1, fp
 8002f32:	018b      	lsls	r3, r1, #6
 8002f34:	4651      	mov	r1, sl
 8002f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3a:	4651      	mov	r1, sl
 8002f3c:	018a      	lsls	r2, r1, #6
 8002f3e:	4651      	mov	r1, sl
 8002f40:	1a54      	subs	r4, r2, r1
 8002f42:	4659      	mov	r1, fp
 8002f44:	eb63 0501 	sbc.w	r5, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	00eb      	lsls	r3, r5, #3
 8002f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f56:	00e2      	lsls	r2, r4, #3
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	18e3      	adds	r3, r4, r3
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	464b      	mov	r3, r9
 8002f64:	eb45 0303 	adc.w	r3, r5, r3
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f76:	4629      	mov	r1, r5
 8002f78:	028b      	lsls	r3, r1, #10
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f80:	4621      	mov	r1, r4
 8002f82:	028a      	lsls	r2, r1, #10
 8002f84:	4610      	mov	r0, r2
 8002f86:	4619      	mov	r1, r3
 8002f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f96:	f7fd f935 	bl	8000204 <__aeabi_uldivmod>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x454>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	0f1b      	lsrs	r3, r3, #28
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002fb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fc2:	e003      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	37b8      	adds	r7, #184	@ 0xb8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400

08002fe4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e28d      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8083 	beq.w	800310a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003004:	4b94      	ldr	r3, [pc, #592]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b04      	cmp	r3, #4
 800300e:	d019      	beq.n	8003044 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003010:	4b91      	ldr	r3, [pc, #580]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003018:	2b08      	cmp	r3, #8
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003028:	d00c      	beq.n	8003044 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b8b      	ldr	r3, [pc, #556]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d112      	bne.n	800305c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b84      	ldr	r3, [pc, #528]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05b      	beq.n	8003108 <HAL_RCC_OscConfig+0x124>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d157      	bne.n	8003108 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e25a      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x90>
 8003066:	4b7c      	ldr	r3, [pc, #496]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7b      	ldr	r2, [pc, #492]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xcc>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0xb4>
 800307e:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a75      	ldr	r2, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a72      	ldr	r2, [pc, #456]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xcc>
 8003098:	4b6f      	ldr	r3, [pc, #444]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6e      	ldr	r2, [pc, #440]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b6c      	ldr	r3, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd fbd8 	bl	800086c <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fd fbd4 	bl	800086c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e21f      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xdc>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd fbc4 	bl	800086c <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fd fbc0 	bl	800086c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e20b      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x104>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d06f      	beq.n	80031f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003116:	4b50      	ldr	r3, [pc, #320]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d017      	beq.n	8003152 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003122:	4b4d      	ldr	r3, [pc, #308]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800312a:	2b08      	cmp	r3, #8
 800312c:	d105      	bne.n	800313a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800312e:	4b4a      	ldr	r3, [pc, #296]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b47      	ldr	r3, [pc, #284]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d11c      	bne.n	8003180 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b44      	ldr	r3, [pc, #272]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_RCC_OscConfig+0x186>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e1d3      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4937      	ldr	r1, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	e03a      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003188:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x278>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fd fb6d 	bl	800086c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003196:	f7fd fb69 	bl	800086c <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e1b4      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4925      	ldr	r1, [pc, #148]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	600b      	str	r3, [r1, #0]
 80031c8:	e015      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCC_OscConfig+0x278>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fd fb4c 	bl	800086c <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d8:	f7fd fb48 	bl	800086c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e193      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d036      	beq.n	8003270 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b15      	ldr	r3, [pc, #84]	@ (8003260 <HAL_RCC_OscConfig+0x27c>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd fb2c 	bl	800086c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7fd fb28 	bl	800086c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e173      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x274>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x234>
 8003236:	e01b      	b.n	8003270 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <HAL_RCC_OscConfig+0x27c>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fd fb15 	bl	800086c <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	e00e      	b.n	8003264 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003246:	f7fd fb11 	bl	800086c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e15c      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
 8003258:	40023800 	.word	0x40023800
 800325c:	42470000 	.word	0x42470000
 8003260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b8a      	ldr	r3, [pc, #552]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ea      	bne.n	8003246 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8097 	beq.w	80033ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003282:	4b83      	ldr	r3, [pc, #524]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10f      	bne.n	80032ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b7f      	ldr	r3, [pc, #508]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a7e      	ldr	r2, [pc, #504]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b7c      	ldr	r3, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b79      	ldr	r3, [pc, #484]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ba:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a75      	ldr	r2, [pc, #468]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fd fad1 	bl	800086c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fd facd 	bl	800086c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e118      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003494 <HAL_RCC_OscConfig+0x4b0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x31e>
 80032f4:	4b66      	ldr	r3, [pc, #408]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a65      	ldr	r2, [pc, #404]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e01c      	b.n	800333c <HAL_RCC_OscConfig+0x358>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x340>
 800330a:	4b61      	ldr	r3, [pc, #388]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a60      	ldr	r2, [pc, #384]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b5e      	ldr	r3, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a5d      	ldr	r2, [pc, #372]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x358>
 8003324:	4b5a      	ldr	r3, [pc, #360]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a59      	ldr	r2, [pc, #356]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003330:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003336:	f023 0304 	bic.w	r3, r3, #4
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d015      	beq.n	8003370 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fd fa92 	bl	800086c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fd fa8e 	bl	800086c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0d7      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	4b4b      	ldr	r3, [pc, #300]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0ee      	beq.n	800334c <HAL_RCC_OscConfig+0x368>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fd fa7c 	bl	800086c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fd fa78 	bl	800086c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0c1      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338e:	4b40      	ldr	r3, [pc, #256]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ee      	bne.n	8003378 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80ad 	beq.w	8003510 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033b6:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d060      	beq.n	8003484 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d145      	bne.n	8003456 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ca:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_RCC_OscConfig+0x4b4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fa4c 	bl	800086c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fa48 	bl	800086c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e093      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b29      	ldr	r3, [pc, #164]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	3b01      	subs	r3, #1
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	071b      	lsls	r3, r3, #28
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x4b4>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fd fa1d 	bl	800086c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fa19 	bl	800086c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e064      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x452>
 8003454:	e05c      	b.n	8003510 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <HAL_RCC_OscConfig+0x4b4>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fa06 	bl	800086c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fa02 	bl	800086c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e04d      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x480>
 8003482:	e045      	b.n	8003510 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e040      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
 8003498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800349c:	4b1f      	ldr	r3, [pc, #124]	@ (800351c <HAL_RCC_OscConfig+0x538>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d030      	beq.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d129      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d122      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d119      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d10f      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003520:	b084      	sub	sp, #16
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	f107 001c 	add.w	r0, r7, #28
 800352e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003532:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003536:	2b01      	cmp	r3, #1
 8003538:	d123      	bne.n	8003582 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800354e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003562:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003566:	2b01      	cmp	r3, #1
 8003568:	d105      	bne.n	8003576 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f001 fadc 	bl	8004b34 <USB_CoreReset>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e01b      	b.n	80035ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f001 fad0 	bl	8004b34 <USB_CoreReset>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003598:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80035ac:	e005      	b.n	80035ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035ba:	7fbb      	ldrb	r3, [r7, #30]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10b      	bne.n	80035d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f043 0206 	orr.w	r2, r3, #6
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035e4:	b004      	add	sp, #16
 80035e6:	4770      	bx	lr

080035e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d165      	bne.n	80036c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4a41      	ldr	r2, [pc, #260]	@ (8003704 <USB_SetTurnaroundTime+0x11c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d906      	bls.n	8003612 <USB_SetTurnaroundTime+0x2a>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4a40      	ldr	r2, [pc, #256]	@ (8003708 <USB_SetTurnaroundTime+0x120>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d202      	bcs.n	8003612 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800360c:	230f      	movs	r3, #15
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e062      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4a3c      	ldr	r2, [pc, #240]	@ (8003708 <USB_SetTurnaroundTime+0x120>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d306      	bcc.n	8003628 <USB_SetTurnaroundTime+0x40>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4a3b      	ldr	r2, [pc, #236]	@ (800370c <USB_SetTurnaroundTime+0x124>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d202      	bcs.n	8003628 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003622:	230e      	movs	r3, #14
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e057      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4a38      	ldr	r2, [pc, #224]	@ (800370c <USB_SetTurnaroundTime+0x124>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d306      	bcc.n	800363e <USB_SetTurnaroundTime+0x56>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4a37      	ldr	r2, [pc, #220]	@ (8003710 <USB_SetTurnaroundTime+0x128>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d202      	bcs.n	800363e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003638:	230d      	movs	r3, #13
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e04c      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <USB_SetTurnaroundTime+0x128>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d306      	bcc.n	8003654 <USB_SetTurnaroundTime+0x6c>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a32      	ldr	r2, [pc, #200]	@ (8003714 <USB_SetTurnaroundTime+0x12c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d802      	bhi.n	8003654 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800364e:	230c      	movs	r3, #12
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e041      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4a2f      	ldr	r2, [pc, #188]	@ (8003714 <USB_SetTurnaroundTime+0x12c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d906      	bls.n	800366a <USB_SetTurnaroundTime+0x82>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4a2e      	ldr	r2, [pc, #184]	@ (8003718 <USB_SetTurnaroundTime+0x130>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d802      	bhi.n	800366a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003664:	230b      	movs	r3, #11
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e036      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a2a      	ldr	r2, [pc, #168]	@ (8003718 <USB_SetTurnaroundTime+0x130>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d906      	bls.n	8003680 <USB_SetTurnaroundTime+0x98>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <USB_SetTurnaroundTime+0x134>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d802      	bhi.n	8003680 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800367a:	230a      	movs	r3, #10
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	e02b      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a26      	ldr	r2, [pc, #152]	@ (800371c <USB_SetTurnaroundTime+0x134>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d906      	bls.n	8003696 <USB_SetTurnaroundTime+0xae>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4a25      	ldr	r2, [pc, #148]	@ (8003720 <USB_SetTurnaroundTime+0x138>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d202      	bcs.n	8003696 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003690:	2309      	movs	r3, #9
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e020      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <USB_SetTurnaroundTime+0x138>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d306      	bcc.n	80036ac <USB_SetTurnaroundTime+0xc4>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4a20      	ldr	r2, [pc, #128]	@ (8003724 <USB_SetTurnaroundTime+0x13c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d802      	bhi.n	80036ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036a6:	2308      	movs	r3, #8
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e015      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003724 <USB_SetTurnaroundTime+0x13c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d906      	bls.n	80036c2 <USB_SetTurnaroundTime+0xda>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003728 <USB_SetTurnaroundTime+0x140>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d202      	bcs.n	80036c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80036bc:	2307      	movs	r3, #7
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e00a      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80036c2:	2306      	movs	r3, #6
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e007      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80036ce:	2309      	movs	r3, #9
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e001      	b.n	80036d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80036d4:	2309      	movs	r3, #9
 80036d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	00d8acbf 	.word	0x00d8acbf
 8003708:	00e4e1c0 	.word	0x00e4e1c0
 800370c:	00f42400 	.word	0x00f42400
 8003710:	01067380 	.word	0x01067380
 8003714:	011a499f 	.word	0x011a499f
 8003718:	01312cff 	.word	0x01312cff
 800371c:	014ca43f 	.word	0x014ca43f
 8003720:	016e3600 	.word	0x016e3600
 8003724:	01a6ab1f 	.word	0x01a6ab1f
 8003728:	01e84800 	.word	0x01e84800

0800372c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f023 0201 	bic.w	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d115      	bne.n	80037be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800379e:	200a      	movs	r0, #10
 80037a0:	f7fd f870 	bl	8000884 <HAL_Delay>
      ms += 10U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	330a      	adds	r3, #10
 80037a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f001 f933 	bl	8004a16 <USB_GetMode>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d01e      	beq.n	80037f4 <USB_SetCurrentMode+0x84>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80037ba:	d9f0      	bls.n	800379e <USB_SetCurrentMode+0x2e>
 80037bc:	e01a      	b.n	80037f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d115      	bne.n	80037f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f7fd f857 	bl	8000884 <HAL_Delay>
      ms += 10U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	330a      	adds	r3, #10
 80037da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f001 f91a 	bl	8004a16 <USB_GetMode>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <USB_SetCurrentMode+0x84>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80037ec:	d9f0      	bls.n	80037d0 <USB_SetCurrentMode+0x60>
 80037ee:	e001      	b.n	80037f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e005      	b.n	8003800 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80037f8:	d101      	bne.n	80037fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003808:	b084      	sub	sp, #16
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	e009      	b.n	800383c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	3340      	adds	r3, #64	@ 0x40
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	3301      	adds	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0e      	cmp	r3, #14
 8003840:	d9f2      	bls.n	8003828 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003842:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11c      	bne.n	8003884 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e005      	b.n	8003890 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800389c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d10d      	bne.n	80038c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038ac:	2100      	movs	r1, #0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f968 	bl	8003b84 <USB_SetDevSpeed>
 80038b4:	e008      	b.n	80038c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038b6:	2101      	movs	r1, #1
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f963 	bl	8003b84 <USB_SetDevSpeed>
 80038be:	e003      	b.n	80038c8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038c0:	2103      	movs	r1, #3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f95e 	bl	8003b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038c8:	2110      	movs	r1, #16
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8fa 	bl	8003ac4 <USB_FlushTxFifo>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f924 	bl	8003b28 <USB_FlushRxFifo>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f0:	461a      	mov	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038fc:	461a      	mov	r2, r3
 80038fe:	2300      	movs	r3, #0
 8003900:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003908:	461a      	mov	r2, r3
 800390a:	2300      	movs	r3, #0
 800390c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	e043      	b.n	800399c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003926:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800392a:	d118      	bne.n	800395e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800393e:	461a      	mov	r2, r3
 8003940:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e013      	b.n	8003970 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003954:	461a      	mov	r2, r3
 8003956:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e008      	b.n	8003970 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396a:	461a      	mov	r2, r3
 800396c:	2300      	movs	r3, #0
 800396e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800397c:	461a      	mov	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003994:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	3301      	adds	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039a0:	461a      	mov	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d3b5      	bcc.n	8003914 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e043      	b.n	8003a36 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039c4:	d118      	bne.n	80039f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e013      	b.n	8003a0a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ee:	461a      	mov	r2, r3
 80039f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e008      	b.n	8003a0a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	2300      	movs	r3, #0
 8003a08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a16:	461a      	mov	r2, r3
 8003a18:	2300      	movs	r3, #0
 8003a1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	3301      	adds	r3, #1
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d3b5      	bcc.n	80039ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f043 0210 	orr.w	r2, r3, #16
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <USB_DevInit+0x2b8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f043 0208 	orr.w	r2, r3, #8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d107      	bne.n	8003ab0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003abc:	b004      	add	sp, #16
 8003abe:	4770      	bx	lr
 8003ac0:	803c3800 	.word	0x803c3800

08003ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ade:	d901      	bls.n	8003ae4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e01b      	b.n	8003b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	daf2      	bge.n	8003ad2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	019b      	lsls	r3, r3, #6
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3301      	adds	r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b08:	d901      	bls.n	8003b0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e006      	b.n	8003b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d0f0      	beq.n	8003afc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b40:	d901      	bls.n	8003b46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e018      	b.n	8003b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	daf2      	bge.n	8003b34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2210      	movs	r2, #16
 8003b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b64:	d901      	bls.n	8003b6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e006      	b.n	8003b78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d0f0      	beq.n	8003b58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]
 8003bda:	e00a      	b.n	8003bf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d002      	beq.n	8003be8 <USB_GetDevSpeed+0x32>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b06      	cmp	r3, #6
 8003be6:	d102      	bne.n	8003bee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003be8:	2302      	movs	r3, #2
 8003bea:	75fb      	strb	r3, [r7, #23]
 8003bec:	e001      	b.n	8003bf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bee:	230f      	movs	r3, #15
 8003bf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	785b      	ldrb	r3, [r3, #1]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d13a      	bne.n	8003c92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d155      	bne.n	8003d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	791b      	ldrb	r3, [r3, #4]
 8003c6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	059b      	lsls	r3, r3, #22
 8003c76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	e036      	b.n	8003d00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	68f9      	ldr	r1, [r7, #12]
 8003cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11a      	bne.n	8003d00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	791b      	ldrb	r3, [r3, #4]
 8003ce4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	0151      	lsls	r1, r2, #5
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	440a      	add	r2, r1
 8003cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d161      	bne.n	8003df0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d42:	d11f      	bne.n	8003d84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003da4:	4013      	ands	r3, r2
 8003da6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	0159      	lsls	r1, r3, #5
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	440b      	add	r3, r1
 8003de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de6:	4619      	mov	r1, r3
 8003de8:	4b35      	ldr	r3, [pc, #212]	@ (8003ec0 <USB_DeactivateEndpoint+0x1b0>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
 8003dee:	e060      	b.n	8003eb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e06:	d11f      	bne.n	8003e48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	0151      	lsls	r1, r2, #5
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	2101      	movs	r1, #1
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	041b      	lsls	r3, r3, #16
 8003e60:	43db      	mvns	r3, r3
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e68:	4013      	ands	r3, r2
 8003e6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	43db      	mvns	r3, r3
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0159      	lsls	r1, r3, #5
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <USB_DeactivateEndpoint+0x1b4>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	ec337800 	.word	0xec337800
 8003ec4:	eff37800 	.word	0xeff37800

08003ec8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	@ 0x28
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	f040 817a 	bne.w	80041de <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d132      	bne.n	8003f58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	0151      	lsls	r1, r2, #5
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	440a      	add	r2, r1
 8003f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f50:	0cdb      	lsrs	r3, r3, #19
 8003f52:	04db      	lsls	r3, r3, #19
 8003f54:	6113      	str	r3, [r2, #16]
 8003f56:	e092      	b.n	800407e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f72:	0cdb      	lsrs	r3, r3, #19
 8003f74:	04db      	lsls	r3, r3, #19
 8003f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11a      	bne.n	8003fd8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d903      	bls.n	8003fb6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fd4:	6113      	str	r3, [r2, #16]
 8003fd6:	e01b      	b.n	8004010 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6919      	ldr	r1, [r3, #16]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	440b      	add	r3, r1
 8003ff0:	1e59      	subs	r1, r3, #1
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003ffc:	4ba2      	ldr	r3, [pc, #648]	@ (8004288 <USB_EPStartXfer+0x3c0>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	0148      	lsls	r0, r1, #5
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	4401      	add	r1, r0
 8004008:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800400c:	4313      	orrs	r3, r2
 800400e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004026:	69b9      	ldr	r1, [r7, #24]
 8004028:	0148      	lsls	r0, r1, #5
 800402a:	69f9      	ldr	r1, [r7, #28]
 800402c:	4401      	add	r1, r0
 800402e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004032:	4313      	orrs	r3, r2
 8004034:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	791b      	ldrb	r3, [r3, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d11f      	bne.n	800407e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004058:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800405c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	69fa      	ldr	r2, [r7, #28]
 8004072:	440a      	add	r2, r1
 8004074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004078:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800407c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d14b      	bne.n	800411c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	791b      	ldrb	r3, [r3, #4]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d128      	bne.n	80040fa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d110      	bne.n	80040da <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e00f      	b.n	80040fa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	0151      	lsls	r1, r2, #5
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	440a      	add	r2, r1
 8004110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004114:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e165      	b.n	80043e8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004136:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800413a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	791b      	ldrb	r3, [r3, #4]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d015      	beq.n	8004170 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 814d 	beq.w	80043e8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	2101      	movs	r1, #1
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	69f9      	ldr	r1, [r7, #28]
 8004166:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800416a:	4313      	orrs	r3, r2
 800416c:	634b      	str	r3, [r1, #52]	@ 0x34
 800416e:	e13b      	b.n	80043e8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d110      	bne.n	80041a2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	0151      	lsls	r1, r2, #5
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	440a      	add	r2, r1
 8004196:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800419a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e00f      	b.n	80041c2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	68d9      	ldr	r1, [r3, #12]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	b298      	uxth	r0, r3
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4603      	mov	r3, r0
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f9b8 	bl	800454c <USB_WritePacket>
 80041dc:	e104      	b.n	80043e8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041f8:	0cdb      	lsrs	r3, r3, #19
 80041fa:	04db      	lsls	r3, r3, #19
 80041fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004218:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800421c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004220:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d131      	bne.n	800428c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	0148      	lsls	r0, r1, #5
 800425a:	69f9      	ldr	r1, [r7, #28]
 800425c:	4401      	add	r1, r0
 800425e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004262:	4313      	orrs	r3, r2
 8004264:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	0151      	lsls	r1, r2, #5
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	440a      	add	r2, r1
 800427c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004280:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004284:	6113      	str	r3, [r2, #16]
 8004286:	e061      	b.n	800434c <USB_EPStartXfer+0x484>
 8004288:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d123      	bne.n	80042dc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	0148      	lsls	r0, r1, #5
 80042ae:	69f9      	ldr	r1, [r7, #28]
 80042b0:	4401      	add	r1, r0
 80042b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042d8:	6113      	str	r3, [r2, #16]
 80042da:	e037      	b.n	800434c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4413      	add	r3, r2
 80042e6:	1e5a      	subs	r2, r3, #1
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	8afa      	ldrh	r2, [r7, #22]
 80042f8:	fb03 f202 	mul.w	r2, r3, r2
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	8afb      	ldrh	r3, [r7, #22]
 8004310:	04d9      	lsls	r1, r3, #19
 8004312:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <USB_EPStartXfer+0x52c>)
 8004314:	400b      	ands	r3, r1
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	0148      	lsls	r0, r1, #5
 800431a:	69f9      	ldr	r1, [r7, #28]
 800431c:	4401      	add	r1, r0
 800431e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004322:	4313      	orrs	r3, r2
 8004324:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	0148      	lsls	r0, r1, #5
 8004340:	69f9      	ldr	r1, [r7, #28]
 8004342:	4401      	add	r1, r0
 8004344:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d10d      	bne.n	800436e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68d9      	ldr	r1, [r3, #12]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	460a      	mov	r2, r1
 800436c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	791b      	ldrb	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d128      	bne.n	80043c8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d110      	bne.n	80043a8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	440a      	add	r2, r1
 800439c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e00f      	b.n	80043c8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	1ff80000 	.word	0x1ff80000

080043f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d14a      	bne.n	80044ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800442a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800442e:	f040 8086 	bne.w	800453e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004450:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004454:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004474:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004478:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004486:	4293      	cmp	r3, r2
 8004488:	d902      	bls.n	8004490 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
          break;
 800448e:	e056      	b.n	800453e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044a8:	d0e7      	beq.n	800447a <USB_EPStopXfer+0x82>
 80044aa:	e048      	b.n	800453e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c4:	d13b      	bne.n	800453e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	440a      	add	r2, r1
 8004504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800450c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f242 7210 	movw	r2, #10000	@ 0x2710
 800451a:	4293      	cmp	r3, r2
 800451c:	d902      	bls.n	8004524 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
          break;
 8004522:	e00c      	b.n	800453e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800453c:	d0e7      	beq.n	800450e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	@ 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	460b      	mov	r3, r1
 800455c:	71fb      	strb	r3, [r7, #7]
 800455e:	4613      	mov	r3, r2
 8004560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800456a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d123      	bne.n	80045ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004572:	88bb      	ldrh	r3, [r7, #4]
 8004574:	3303      	adds	r3, #3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e018      	b.n	80045b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	031a      	lsls	r2, r3, #12
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800458c:	461a      	mov	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3e2      	bcc.n	8004580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3724      	adds	r7, #36	@ 0x24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b08b      	sub	sp, #44	@ 0x2c
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	e014      	b.n	800461e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	3301      	adds	r3, #1
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	3301      	adds	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	3301      	adds	r3, #1
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	3301      	adds	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	3301      	adds	r3, #1
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	6a3a      	ldr	r2, [r7, #32]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	429a      	cmp	r2, r3
 8004624:	d3e6      	bcc.n	80045f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004626:	8bfb      	ldrh	r3, [r7, #30]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01e      	beq.n	800466a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004636:	461a      	mov	r2, r3
 8004638:	f107 0310 	add.w	r3, r7, #16
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	b2da      	uxtb	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	701a      	strb	r2, [r3, #0]
      i++;
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	3301      	adds	r3, #1
 8004656:	623b      	str	r3, [r7, #32]
      pDest++;
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	3301      	adds	r3, #1
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800465e:	8bfb      	ldrh	r3, [r7, #30]
 8004660:	3b01      	subs	r3, #1
 8004662:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004664:	8bfb      	ldrh	r3, [r7, #30]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ea      	bne.n	8004640 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800466c:	4618      	mov	r0, r3
 800466e:	372c      	adds	r7, #44	@ 0x2c
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d12c      	bne.n	80046ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	db12      	blt.n	80046cc <USB_EPSetStall+0x54>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00f      	beq.n	80046cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e02b      	b.n	8004746 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db12      	blt.n	8004726 <USB_EPSetStall+0xae>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004720:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004724:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d128      	bne.n	80047c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800478a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800478e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d003      	beq.n	80047a0 <USB_EPClearStall+0x4c>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	791b      	ldrb	r3, [r3, #4]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d138      	bne.n	8004812 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e027      	b.n	8004812 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d003      	beq.n	80047f2 <USB_EPClearStall+0x9e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	791b      	ldrb	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d10f      	bne.n	8004812 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004810:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800483e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004842:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800489a:	f023 0302 	bic.w	r3, r3, #2
 800489e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048c8:	f023 0303 	bic.w	r3, r3, #3
 80048cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	0c1b      	lsrs	r3, r3, #16
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	b29b      	uxth	r3, r3
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049ac:	68bb      	ldr	r3, [r7, #8]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b087      	sub	sp, #28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a08:	68bb      	ldr	r3, [r7, #8]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	460b      	mov	r3, r1
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	333c      	adds	r3, #60	@ 0x3c
 8004a8e:	3304      	adds	r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <USB_EP0_OutStart+0xb8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d90a      	bls.n	8004ab2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aac:	d101      	bne.n	8004ab2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e037      	b.n	8004b22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004acc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ae0:	f043 0318 	orr.w	r3, r3, #24
 8004ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004af8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10f      	bne.n	8004b20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b1a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a

08004b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b4c:	d901      	bls.n	8004b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e01b      	b.n	8004b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	daf2      	bge.n	8004b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b76:	d901      	bls.n	8004b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d0f0      	beq.n	8004b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ba4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004ba8:	f002 fd32 	bl	8007610 <USBD_static_malloc>
 8004bac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	32b0      	adds	r2, #176	@ 0xb0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e0d4      	b.n	8004d72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004bc8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004bcc:	2100      	movs	r1, #0
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f002 fd62 	bl	8007698 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	32b0      	adds	r2, #176	@ 0xb0
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	32b0      	adds	r2, #176	@ 0xb0
 8004bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7c1b      	ldrb	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d138      	bne.n	8004c72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c00:	4b5e      	ldr	r3, [pc, #376]	@ (8004d7c <USBD_CDC_Init+0x1e4>)
 8004c02:	7819      	ldrb	r1, [r3, #0]
 8004c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c08:	2202      	movs	r2, #2
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f002 fb8f 	bl	800732e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c10:	4b5a      	ldr	r3, [pc, #360]	@ (8004d7c <USBD_CDC_Init+0x1e4>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	3324      	adds	r3, #36	@ 0x24
 8004c26:	2201      	movs	r2, #1
 8004c28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c2a:	4b55      	ldr	r3, [pc, #340]	@ (8004d80 <USBD_CDC_Init+0x1e8>)
 8004c2c:	7819      	ldrb	r1, [r3, #0]
 8004c2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c32:	2202      	movs	r2, #2
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f002 fb7a 	bl	800732e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c3a:	4b51      	ldr	r3, [pc, #324]	@ (8004d80 <USBD_CDC_Init+0x1e8>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c52:	2201      	movs	r2, #1
 8004c54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c56:	4b4b      	ldr	r3, [pc, #300]	@ (8004d84 <USBD_CDC_Init+0x1ec>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	3326      	adds	r3, #38	@ 0x26
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e035      	b.n	8004cde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c72:	4b42      	ldr	r3, [pc, #264]	@ (8004d7c <USBD_CDC_Init+0x1e4>)
 8004c74:	7819      	ldrb	r1, [r3, #0]
 8004c76:	2340      	movs	r3, #64	@ 0x40
 8004c78:	2202      	movs	r2, #2
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f002 fb57 	bl	800732e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c80:	4b3e      	ldr	r3, [pc, #248]	@ (8004d7c <USBD_CDC_Init+0x1e4>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f003 020f 	and.w	r2, r3, #15
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3324      	adds	r3, #36	@ 0x24
 8004c96:	2201      	movs	r2, #1
 8004c98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <USBD_CDC_Init+0x1e8>)
 8004c9c:	7819      	ldrb	r1, [r3, #0]
 8004c9e:	2340      	movs	r3, #64	@ 0x40
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f002 fb43 	bl	800732e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ca8:	4b35      	ldr	r3, [pc, #212]	@ (8004d80 <USBD_CDC_Init+0x1e8>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 020f 	and.w	r2, r3, #15
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8004d84 <USBD_CDC_Init+0x1ec>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	3326      	adds	r3, #38	@ 0x26
 8004cda:	2210      	movs	r2, #16
 8004cdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cde:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <USBD_CDC_Init+0x1ec>)
 8004ce0:	7819      	ldrb	r1, [r3, #0]
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f002 fb21 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cec:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <USBD_CDC_Init+0x1ec>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f003 020f 	and.w	r2, r3, #15
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3324      	adds	r3, #36	@ 0x24
 8004d02:	2201      	movs	r2, #1
 8004d04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	33b0      	adds	r3, #176	@ 0xb0
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e018      	b.n	8004d72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7c1b      	ldrb	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d48:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <USBD_CDC_Init+0x1e8>)
 8004d4a:	7819      	ldrb	r1, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f002 fbd8 	bl	800750c <USBD_LL_PrepareReceive>
 8004d5c:	e008      	b.n	8004d70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d5e:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <USBD_CDC_Init+0x1e8>)
 8004d60:	7819      	ldrb	r1, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d68:	2340      	movs	r3, #64	@ 0x40
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f002 fbce 	bl	800750c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000093 	.word	0x20000093
 8004d80:	20000094 	.word	0x20000094
 8004d84:	20000095 	.word	0x20000095

08004d88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d94:	4b3a      	ldr	r3, [pc, #232]	@ (8004e80 <USBD_CDC_DeInit+0xf8>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f002 faed 	bl	800737a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004da0:	4b37      	ldr	r3, [pc, #220]	@ (8004e80 <USBD_CDC_DeInit+0xf8>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 020f 	and.w	r2, r3, #15
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3324      	adds	r3, #36	@ 0x24
 8004db6:	2200      	movs	r2, #0
 8004db8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004dba:	4b32      	ldr	r3, [pc, #200]	@ (8004e84 <USBD_CDC_DeInit+0xfc>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f002 fada 	bl	800737a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004e84 <USBD_CDC_DeInit+0xfc>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004dde:	2200      	movs	r2, #0
 8004de0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004de2:	4b29      	ldr	r3, [pc, #164]	@ (8004e88 <USBD_CDC_DeInit+0x100>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f002 fac6 	bl	800737a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004dee:	4b26      	ldr	r3, [pc, #152]	@ (8004e88 <USBD_CDC_DeInit+0x100>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f003 020f 	and.w	r2, r3, #15
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	3324      	adds	r3, #36	@ 0x24
 8004e04:	2200      	movs	r2, #0
 8004e06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e08:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <USBD_CDC_DeInit+0x100>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3326      	adds	r3, #38	@ 0x26
 8004e1e:	2200      	movs	r2, #0
 8004e20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	32b0      	adds	r2, #176	@ 0xb0
 8004e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01f      	beq.n	8004e74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	33b0      	adds	r3, #176	@ 0xb0
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	32b0      	adds	r2, #176	@ 0xb0
 8004e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 fbe8 	bl	800762c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	32b0      	adds	r2, #176	@ 0xb0
 8004e66:	2100      	movs	r1, #0
 8004e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000093 	.word	0x20000093
 8004e84:	20000094 	.word	0x20000094
 8004e88:	20000095 	.word	0x20000095

08004e8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	32b0      	adds	r2, #176	@ 0xb0
 8004ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0bf      	b.n	800503c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d050      	beq.n	8004f6a <USBD_CDC_Setup+0xde>
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	f040 80af 	bne.w	800502c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	88db      	ldrh	r3, [r3, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03a      	beq.n	8004f4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	da1b      	bge.n	8004f18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	33b0      	adds	r3, #176	@ 0xb0
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004ef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	88d2      	ldrh	r2, [r2, #6]
 8004efc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	88db      	ldrh	r3, [r3, #6]
 8004f02:	2b07      	cmp	r3, #7
 8004f04:	bf28      	it	cs
 8004f06:	2307      	movcs	r3, #7
 8004f08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	89fa      	ldrh	r2, [r7, #14]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 fdb1 	bl	8006a78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f16:	e090      	b.n	800503a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	785a      	ldrb	r2, [r3, #1]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	88db      	ldrh	r3, [r3, #6]
 8004f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f28:	d803      	bhi.n	8004f32 <USBD_CDC_Setup+0xa6>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	88db      	ldrh	r3, [r3, #6]
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	e000      	b.n	8004f34 <USBD_CDC_Setup+0xa8>
 8004f32:	2240      	movs	r2, #64	@ 0x40
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8004f42:	461a      	mov	r2, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 fdc3 	bl	8006ad0 <USBD_CtlPrepareRx>
      break;
 8004f4a:	e076      	b.n	800503a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	33b0      	adds	r3, #176	@ 0xb0
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	7850      	ldrb	r0, [r2, #1]
 8004f62:	2200      	movs	r2, #0
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	4798      	blx	r3
      break;
 8004f68:	e067      	b.n	800503a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	785b      	ldrb	r3, [r3, #1]
 8004f6e:	2b0b      	cmp	r3, #11
 8004f70:	d851      	bhi.n	8005016 <USBD_CDC_Setup+0x18a>
 8004f72:	a201      	add	r2, pc, #4	@ (adr r2, 8004f78 <USBD_CDC_Setup+0xec>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08005025 	.word	0x08005025
 8004f80:	08005017 	.word	0x08005017
 8004f84:	08005017 	.word	0x08005017
 8004f88:	08005017 	.word	0x08005017
 8004f8c:	08005017 	.word	0x08005017
 8004f90:	08005017 	.word	0x08005017
 8004f94:	08005017 	.word	0x08005017
 8004f98:	08005017 	.word	0x08005017
 8004f9c:	08005017 	.word	0x08005017
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004ffd 	.word	0x08004ffd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d107      	bne.n	8004fc4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fb4:	f107 030a 	add.w	r3, r7, #10
 8004fb8:	2202      	movs	r2, #2
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 fd5b 	bl	8006a78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc2:	e032      	b.n	800502a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 fce5 	bl	8006996 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd0:	e02b      	b.n	800502a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d107      	bne.n	8004fee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fde:	f107 030d 	add.w	r3, r7, #13
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f001 fd46 	bl	8006a78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fec:	e01d      	b.n	800502a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f001 fcd0 	bl	8006996 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffa:	e016      	b.n	800502a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b03      	cmp	r3, #3
 8005006:	d00f      	beq.n	8005028 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 fcc3 	bl	8006996 <USBD_CtlError>
            ret = USBD_FAIL;
 8005010:	2303      	movs	r3, #3
 8005012:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005014:	e008      	b.n	8005028 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 fcbc 	bl	8006996 <USBD_CtlError>
          ret = USBD_FAIL;
 800501e:	2303      	movs	r3, #3
 8005020:	75fb      	strb	r3, [r7, #23]
          break;
 8005022:	e002      	b.n	800502a <USBD_CDC_Setup+0x19e>
          break;
 8005024:	bf00      	nop
 8005026:	e008      	b.n	800503a <USBD_CDC_Setup+0x1ae>
          break;
 8005028:	bf00      	nop
      }
      break;
 800502a:	e006      	b.n	800503a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fcb1 	bl	8006996 <USBD_CtlError>
      ret = USBD_FAIL;
 8005034:	2303      	movs	r3, #3
 8005036:	75fb      	strb	r3, [r7, #23]
      break;
 8005038:	bf00      	nop
  }

  return (uint8_t)ret;
 800503a:	7dfb      	ldrb	r3, [r7, #23]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005056:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	32b0      	adds	r2, #176	@ 0xb0
 8005062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800506a:	2303      	movs	r3, #3
 800506c:	e065      	b.n	800513a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	32b0      	adds	r2, #176	@ 0xb0
 8005078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3318      	adds	r3, #24
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02f      	beq.n	80050f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3318      	adds	r3, #24
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 010f 	and.w	r1, r3, #15
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	460b      	mov	r3, r1
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	440b      	add	r3, r1
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4403      	add	r3, r0
 80050c0:	331c      	adds	r3, #28
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d112      	bne.n	80050f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3318      	adds	r3, #24
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050ea:	78f9      	ldrb	r1, [r7, #3]
 80050ec:	2300      	movs	r3, #0
 80050ee:	2200      	movs	r2, #0
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f002 f9ea 	bl	80074ca <USBD_LL_Transmit>
 80050f6:	e01f      	b.n	8005138 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	33b0      	adds	r3, #176	@ 0xb0
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d010      	beq.n	8005138 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	33b0      	adds	r3, #176	@ 0xb0
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	32b0      	adds	r2, #176	@ 0xb0
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	32b0      	adds	r2, #176	@ 0xb0
 8005168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005170:	2303      	movs	r3, #3
 8005172:	e01a      	b.n	80051aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f002 f9e8 	bl	800754e <USBD_LL_GetRxDataSize>
 800517e:	4602      	mov	r2, r0
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	33b0      	adds	r3, #176	@ 0xb0
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80051a4:	4611      	mov	r1, r2
 80051a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	32b0      	adds	r2, #176	@ 0xb0
 80051c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e024      	b.n	800521e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	33b0      	adds	r3, #176	@ 0xb0
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d019      	beq.n	800521c <USBD_CDC_EP0_RxReady+0x6a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80051ee:	2bff      	cmp	r3, #255	@ 0xff
 80051f0:	d014      	beq.n	800521c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	33b0      	adds	r3, #176	@ 0xb0
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800520a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005212:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	22ff      	movs	r2, #255	@ 0xff
 8005218:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005230:	2182      	movs	r1, #130	@ 0x82
 8005232:	4818      	ldr	r0, [pc, #96]	@ (8005294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005234:	f000 fd4f 	bl	8005cd6 <USBD_GetEpDesc>
 8005238:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800523a:	2101      	movs	r1, #1
 800523c:	4815      	ldr	r0, [pc, #84]	@ (8005294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800523e:	f000 fd4a 	bl	8005cd6 <USBD_GetEpDesc>
 8005242:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005244:	2181      	movs	r1, #129	@ 0x81
 8005246:	4813      	ldr	r0, [pc, #76]	@ (8005294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005248:	f000 fd45 	bl	8005cd6 <USBD_GetEpDesc>
 800524c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2210      	movs	r2, #16
 8005258:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d006      	beq.n	800526e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2200      	movs	r2, #0
 8005264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005268:	711a      	strb	r2, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800527c:	711a      	strb	r2, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2243      	movs	r2, #67	@ 0x43
 8005286:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005288:	4b02      	ldr	r3, [pc, #8]	@ (8005294 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000050 	.word	0x20000050

08005298 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052a0:	2182      	movs	r1, #130	@ 0x82
 80052a2:	4818      	ldr	r0, [pc, #96]	@ (8005304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052a4:	f000 fd17 	bl	8005cd6 <USBD_GetEpDesc>
 80052a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052aa:	2101      	movs	r1, #1
 80052ac:	4815      	ldr	r0, [pc, #84]	@ (8005304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052ae:	f000 fd12 	bl	8005cd6 <USBD_GetEpDesc>
 80052b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052b4:	2181      	movs	r1, #129	@ 0x81
 80052b6:	4813      	ldr	r0, [pc, #76]	@ (8005304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052b8:	f000 fd0d 	bl	8005cd6 <USBD_GetEpDesc>
 80052bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2210      	movs	r2, #16
 80052c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2200      	movs	r2, #0
 80052d4:	711a      	strb	r2, [r3, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f042 0202 	orr.w	r2, r2, #2
 80052dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	711a      	strb	r2, [r3, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f042 0202 	orr.w	r2, r2, #2
 80052f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2243      	movs	r2, #67	@ 0x43
 80052f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052f8:	4b02      	ldr	r3, [pc, #8]	@ (8005304 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000050 	.word	0x20000050

08005308 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005310:	2182      	movs	r1, #130	@ 0x82
 8005312:	4818      	ldr	r0, [pc, #96]	@ (8005374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005314:	f000 fcdf 	bl	8005cd6 <USBD_GetEpDesc>
 8005318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800531a:	2101      	movs	r1, #1
 800531c:	4815      	ldr	r0, [pc, #84]	@ (8005374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800531e:	f000 fcda 	bl	8005cd6 <USBD_GetEpDesc>
 8005322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005324:	2181      	movs	r1, #129	@ 0x81
 8005326:	4813      	ldr	r0, [pc, #76]	@ (8005374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005328:	f000 fcd5 	bl	8005cd6 <USBD_GetEpDesc>
 800532c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2210      	movs	r2, #16
 8005338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d006      	beq.n	800534e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2200      	movs	r2, #0
 8005344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005348:	711a      	strb	r2, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d006      	beq.n	8005362 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800535c:	711a      	strb	r2, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2243      	movs	r2, #67	@ 0x43
 8005366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005368:	4b02      	ldr	r3, [pc, #8]	@ (8005374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000050 	.word	0x20000050

08005378 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	220a      	movs	r2, #10
 8005384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005386:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	2000000c 	.word	0x2000000c

08005398 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e009      	b.n	80053c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	33b0      	adds	r3, #176	@ 0xb0
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	32b0      	adds	r2, #176	@ 0xb0
 80053e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e008      	b.n	8005404 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	32b0      	adds	r2, #176	@ 0xb0
 8005424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005428:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005430:	2303      	movs	r3, #3
 8005432:	e004      	b.n	800543e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	32b0      	adds	r2, #176	@ 0xb0
 800545e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005462:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800546e:	2303      	movs	r3, #3
 8005470:	e025      	b.n	80054be <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11f      	bne.n	80054bc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2201      	movs	r2, #1
 8005480:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005484:	4b10      	ldr	r3, [pc, #64]	@ (80054c8 <USBD_CDC_TransmitPacket+0x7c>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4403      	add	r3, r0
 800549e:	3318      	adds	r3, #24
 80054a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80054a2:	4b09      	ldr	r3, [pc, #36]	@ (80054c8 <USBD_CDC_TransmitPacket+0x7c>)
 80054a4:	7819      	ldrb	r1, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f002 f809 	bl	80074ca <USBD_LL_Transmit>

    ret = USBD_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000093 	.word	0x20000093

080054cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	32b0      	adds	r2, #176	@ 0xb0
 80054de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	32b0      	adds	r2, #176	@ 0xb0
 80054ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e018      	b.n	800552c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7c1b      	ldrb	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <USBD_CDC_ReceivePacket+0x68>)
 8005504:	7819      	ldrb	r1, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800550c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 fffb 	bl	800750c <USBD_LL_PrepareReceive>
 8005516:	e008      	b.n	800552a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <USBD_CDC_ReceivePacket+0x68>)
 800551a:	7819      	ldrb	r1, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005522:	2340      	movs	r3, #64	@ 0x40
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 fff1 	bl	800750c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000094 	.word	0x20000094

08005538 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800554c:	2303      	movs	r3, #3
 800554e:	e01f      	b.n	8005590 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	79fa      	ldrb	r2, [r7, #7]
 8005582:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f001 fe6b 	bl	8007260 <USBD_LL_Init>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800558e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e025      	b.n	80055fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	32ae      	adds	r2, #174	@ 0xae
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00f      	beq.n	80055ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	32ae      	adds	r2, #174	@ 0xae
 80055d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	f107 020e 	add.w	r2, r7, #14
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	4602      	mov	r2, r0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 fe73 	bl	80072f8 <USBD_LL_Start>
 8005612:	4603      	mov	r3, r0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005624:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	460b      	mov	r3, r1
 800563c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	78fa      	ldrb	r2, [r7, #3]
 8005656:	4611      	mov	r1, r2
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	4611      	mov	r1, r2
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	4798      	blx	r3
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005690:	2303      	movs	r3, #3
 8005692:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 f936 	bl	8006922 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80056c4:	461a      	mov	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d01a      	beq.n	8005710 <USBD_LL_SetupStage+0x72>
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d822      	bhi.n	8005724 <USBD_LL_SetupStage+0x86>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <USBD_LL_SetupStage+0x4a>
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d00a      	beq.n	80056fc <USBD_LL_SetupStage+0x5e>
 80056e6:	e01d      	b.n	8005724 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fb63 	bl	8005dbc <USBD_StdDevReq>
 80056f6:	4603      	mov	r3, r0
 80056f8:	73fb      	strb	r3, [r7, #15]
      break;
 80056fa:	e020      	b.n	800573e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fbcb 	bl	8005ea0 <USBD_StdItfReq>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]
      break;
 800570e:	e016      	b.n	800573e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fc2d 	bl	8005f78 <USBD_StdEPReq>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]
      break;
 8005722:	e00c      	b.n	800573e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800572a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800572e:	b2db      	uxtb	r3, r3
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f001 fe40 	bl	80073b8 <USBD_LL_StallEP>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	bf00      	nop
  }

  return ret;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	460b      	mov	r3, r1
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800575a:	7afb      	ldrb	r3, [r7, #11]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d16e      	bne.n	800583e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005766:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800576e:	2b03      	cmp	r3, #3
 8005770:	f040 8098 	bne.w	80058a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d913      	bls.n	80057a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	1ad2      	subs	r2, r2, r3
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	4293      	cmp	r3, r2
 8005798:	bf28      	it	cs
 800579a:	4613      	movcs	r3, r2
 800579c:	461a      	mov	r2, r3
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f001 f9b2 	bl	8006b0a <USBD_CtlContinueRx>
 80057a6:	e07d      	b.n	80058a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d014      	beq.n	80057e0 <USBD_LL_DataOutStage+0x98>
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d81d      	bhi.n	80057f6 <USBD_LL_DataOutStage+0xae>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <USBD_LL_DataOutStage+0x7c>
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d003      	beq.n	80057ca <USBD_LL_DataOutStage+0x82>
 80057c2:	e018      	b.n	80057f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	75bb      	strb	r3, [r7, #22]
            break;
 80057c8:	e018      	b.n	80057fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fa64 	bl	8005ca2 <USBD_CoreFindIF>
 80057da:	4603      	mov	r3, r0
 80057dc:	75bb      	strb	r3, [r7, #22]
            break;
 80057de:	e00d      	b.n	80057fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4619      	mov	r1, r3
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fa66 	bl	8005cbc <USBD_CoreFindEP>
 80057f0:	4603      	mov	r3, r0
 80057f2:	75bb      	strb	r3, [r7, #22]
            break;
 80057f4:	e002      	b.n	80057fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	75bb      	strb	r3, [r7, #22]
            break;
 80057fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057fc:	7dbb      	ldrb	r3, [r7, #22]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d119      	bne.n	8005836 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b03      	cmp	r3, #3
 800580c:	d113      	bne.n	8005836 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800580e:	7dba      	ldrb	r2, [r7, #22]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	32ae      	adds	r2, #174	@ 0xae
 8005814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800581e:	7dba      	ldrb	r2, [r7, #22]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005826:	7dba      	ldrb	r2, [r7, #22]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	32ae      	adds	r2, #174	@ 0xae
 800582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f001 f978 	bl	8006b2c <USBD_CtlSendStatus>
 800583c:	e032      	b.n	80058a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800583e:	7afb      	ldrb	r3, [r7, #11]
 8005840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005844:	b2db      	uxtb	r3, r3
 8005846:	4619      	mov	r1, r3
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fa37 	bl	8005cbc <USBD_CoreFindEP>
 800584e:	4603      	mov	r3, r0
 8005850:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005852:	7dbb      	ldrb	r3, [r7, #22]
 8005854:	2bff      	cmp	r3, #255	@ 0xff
 8005856:	d025      	beq.n	80058a4 <USBD_LL_DataOutStage+0x15c>
 8005858:	7dbb      	ldrb	r3, [r7, #22]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d122      	bne.n	80058a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b03      	cmp	r3, #3
 8005868:	d117      	bne.n	800589a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800586a:	7dba      	ldrb	r2, [r7, #22]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	32ae      	adds	r2, #174	@ 0xae
 8005870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800587a:	7dba      	ldrb	r2, [r7, #22]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005882:	7dba      	ldrb	r2, [r7, #22]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	32ae      	adds	r2, #174	@ 0xae
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	7afa      	ldrb	r2, [r7, #11]
 8005890:	4611      	mov	r1, r2
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	4798      	blx	r3
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
 80058a2:	e000      	b.n	80058a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	460b      	mov	r3, r1
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d16f      	bne.n	80059a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3314      	adds	r3, #20
 80058c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d15a      	bne.n	8005988 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d914      	bls.n	8005908 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	461a      	mov	r2, r3
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f001 f8da 	bl	8006aae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058fa:	2300      	movs	r3, #0
 80058fc:	2200      	movs	r2, #0
 80058fe:	2100      	movs	r1, #0
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f001 fe03 	bl	800750c <USBD_LL_PrepareReceive>
 8005906:	e03f      	b.n	8005988 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	d11c      	bne.n	800594e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800591c:	429a      	cmp	r2, r3
 800591e:	d316      	bcc.n	800594e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800592a:	429a      	cmp	r2, r3
 800592c:	d20f      	bcs.n	800594e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f001 f8bb 	bl	8006aae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005940:	2300      	movs	r3, #0
 8005942:	2200      	movs	r2, #0
 8005944:	2100      	movs	r1, #0
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f001 fde0 	bl	800750c <USBD_LL_PrepareReceive>
 800594c:	e01c      	b.n	8005988 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b03      	cmp	r3, #3
 8005958:	d10f      	bne.n	800597a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800597a:	2180      	movs	r1, #128	@ 0x80
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f001 fd1b 	bl	80073b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f001 f8e5 	bl	8006b52 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d03a      	beq.n	8005a08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff fe42 	bl	800561c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80059a0:	e032      	b.n	8005a08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f985 	bl	8005cbc <USBD_CoreFindEP>
 80059b2:	4603      	mov	r3, r0
 80059b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
 80059b8:	2bff      	cmp	r3, #255	@ 0xff
 80059ba:	d025      	beq.n	8005a08 <USBD_LL_DataInStage+0x15a>
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d122      	bne.n	8005a08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d11c      	bne.n	8005a08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059ce:	7dfa      	ldrb	r2, [r7, #23]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	32ae      	adds	r2, #174	@ 0xae
 80059d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d014      	beq.n	8005a08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059de:	7dfa      	ldrb	r2, [r7, #23]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059e6:	7dfa      	ldrb	r2, [r7, #23]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	32ae      	adds	r2, #174	@ 0xae
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	7afa      	ldrb	r2, [r7, #11]
 80059f4:	4611      	mov	r1, r2
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	4798      	blx	r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059fe:	7dbb      	ldrb	r3, [r7, #22]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a04:	7dbb      	ldrb	r3, [r7, #22]
 8005a06:	e000      	b.n	8005a0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d014      	beq.n	8005a78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6852      	ldr	r2, [r2, #4]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	4611      	mov	r1, r2
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fc55 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2240      	movs	r2, #64	@ 0x40
 8005a90:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a94:	2340      	movs	r3, #64	@ 0x40
 8005a96:	2200      	movs	r2, #0
 8005a98:	2180      	movs	r1, #128	@ 0x80
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fc47 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2240      	movs	r2, #64	@ 0x40
 8005aaa:	621a      	str	r2, [r3, #32]

  return ret;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d006      	beq.n	8005af8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2204      	movs	r2, #4
 8005afc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d106      	bne.n	8005b30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d110      	bne.n	8005b74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	32ae      	adds	r2, #174	@ 0xae
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e01c      	b.n	8005bda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d115      	bne.n	8005bd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	32ae      	adds	r2, #174	@ 0xae
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	32ae      	adds	r2, #174	@ 0xae
 8005bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	32ae      	adds	r2, #174	@ 0xae
 8005bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e01c      	b.n	8005c3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d115      	bne.n	8005c3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	32ae      	adds	r2, #174	@ 0xae
 8005c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32ae      	adds	r2, #174	@ 0xae
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	78fa      	ldrb	r2, [r7, #3]
 8005c36:	4611      	mov	r1, r2
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00e      	beq.n	8005c98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6852      	ldr	r2, [r2, #4]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	4611      	mov	r1, r2
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c94:	2303      	movs	r3, #3
 8005c96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	885b      	ldrh	r3, [r3, #2]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	7812      	ldrb	r2, [r2, #0]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d91f      	bls.n	8005d3c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d02:	e013      	b.n	8005d2c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d04:	f107 030a 	add.w	r3, r7, #10
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6978      	ldr	r0, [r7, #20]
 8005d0c:	f000 f81b 	bl	8005d46 <USBD_GetNextDesc>
 8005d10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d108      	bne.n	8005d2c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	789b      	ldrb	r3, [r3, #2]
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d008      	beq.n	8005d3a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	885b      	ldrh	r3, [r3, #2]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	897b      	ldrh	r3, [r7, #10]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d8e5      	bhi.n	8005d04 <USBD_GetEpDesc+0x2e>
 8005d38:	e000      	b.n	8005d3c <USBD_GetEpDesc+0x66>
          break;
 8005d3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d3c:	693b      	ldr	r3, [r7, #16]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d70:	68fb      	ldr	r3, [r7, #12]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b087      	sub	sp, #28
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3301      	adds	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d9c:	8a3b      	ldrh	r3, [r7, #16]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	b21a      	sxth	r2, r3
 8005da2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	b21b      	sxth	r3, r3
 8005daa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005dac:	89fb      	ldrh	r3, [r7, #14]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d005      	beq.n	8005de2 <USBD_StdDevReq+0x26>
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d857      	bhi.n	8005e8a <USBD_StdDevReq+0xce>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00f      	beq.n	8005dfe <USBD_StdDevReq+0x42>
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d153      	bne.n	8005e8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	32ae      	adds	r2, #174	@ 0xae
 8005dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfc:	e04a      	b.n	8005e94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	785b      	ldrb	r3, [r3, #1]
 8005e02:	2b09      	cmp	r3, #9
 8005e04:	d83b      	bhi.n	8005e7e <USBD_StdDevReq+0xc2>
 8005e06:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <USBD_StdDevReq+0x50>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e61 	.word	0x08005e61
 8005e10:	08005e75 	.word	0x08005e75
 8005e14:	08005e7f 	.word	0x08005e7f
 8005e18:	08005e6b 	.word	0x08005e6b
 8005e1c:	08005e7f 	.word	0x08005e7f
 8005e20:	08005e3f 	.word	0x08005e3f
 8005e24:	08005e35 	.word	0x08005e35
 8005e28:	08005e7f 	.word	0x08005e7f
 8005e2c:	08005e57 	.word	0x08005e57
 8005e30:	08005e49 	.word	0x08005e49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa3c 	bl	80062b4 <USBD_GetDescriptor>
          break;
 8005e3c:	e024      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fbcb 	bl	80065dc <USBD_SetAddress>
          break;
 8005e46:	e01f      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fc0a 	bl	8006664 <USBD_SetConfig>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
          break;
 8005e54:	e018      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fcad 	bl	80067b8 <USBD_GetConfig>
          break;
 8005e5e:	e013      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fcde 	bl	8006824 <USBD_GetStatus>
          break;
 8005e68:	e00e      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fd0d 	bl	800688c <USBD_SetFeature>
          break;
 8005e72:	e009      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fd31 	bl	80068de <USBD_ClrFeature>
          break;
 8005e7c:	e004      	b.n	8005e88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fd88 	bl	8006996 <USBD_CtlError>
          break;
 8005e86:	bf00      	nop
      }
      break;
 8005e88:	e004      	b.n	8005e94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fd82 	bl	8006996 <USBD_CtlError>
      break;
 8005e92:	bf00      	nop
  }

  return ret;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop

08005ea0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005eb6:	2b40      	cmp	r3, #64	@ 0x40
 8005eb8:	d005      	beq.n	8005ec6 <USBD_StdItfReq+0x26>
 8005eba:	2b40      	cmp	r3, #64	@ 0x40
 8005ebc:	d852      	bhi.n	8005f64 <USBD_StdItfReq+0xc4>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <USBD_StdItfReq+0x26>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d14e      	bne.n	8005f64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d840      	bhi.n	8005f56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	889b      	ldrh	r3, [r3, #4]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d836      	bhi.n	8005f4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	889b      	ldrh	r3, [r3, #4]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fedb 	bl	8005ca2 <USBD_CoreFindIF>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	2bff      	cmp	r3, #255	@ 0xff
 8005ef4:	d01d      	beq.n	8005f32 <USBD_StdItfReq+0x92>
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11a      	bne.n	8005f32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005efc:	7bba      	ldrb	r2, [r7, #14]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	32ae      	adds	r2, #174	@ 0xae
 8005f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00f      	beq.n	8005f2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f0c:	7bba      	ldrb	r2, [r7, #14]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f14:	7bba      	ldrb	r2, [r7, #14]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32ae      	adds	r2, #174	@ 0xae
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f2a:	e004      	b.n	8005f36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f30:	e001      	b.n	8005f36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f32:	2303      	movs	r3, #3
 8005f34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d110      	bne.n	8005f60 <USBD_StdItfReq+0xc0>
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10d      	bne.n	8005f60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fdf1 	bl	8006b2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f4a:	e009      	b.n	8005f60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fd21 	bl	8006996 <USBD_CtlError>
          break;
 8005f54:	e004      	b.n	8005f60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fd1c 	bl	8006996 <USBD_CtlError>
          break;
 8005f5e:	e000      	b.n	8005f62 <USBD_StdItfReq+0xc2>
          break;
 8005f60:	bf00      	nop
      }
      break;
 8005f62:	e004      	b.n	8005f6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fd15 	bl	8006996 <USBD_CtlError>
      break;
 8005f6c:	bf00      	nop
  }

  return ret;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	889b      	ldrh	r3, [r3, #4]
 8005f8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f94:	2b40      	cmp	r3, #64	@ 0x40
 8005f96:	d007      	beq.n	8005fa8 <USBD_StdEPReq+0x30>
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	f200 817f 	bhi.w	800629c <USBD_StdEPReq+0x324>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d02a      	beq.n	8005ff8 <USBD_StdEPReq+0x80>
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	f040 817a 	bne.w	800629c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fa8:	7bbb      	ldrb	r3, [r7, #14]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fe85 	bl	8005cbc <USBD_CoreFindEP>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fb6:	7b7b      	ldrb	r3, [r7, #13]
 8005fb8:	2bff      	cmp	r3, #255	@ 0xff
 8005fba:	f000 8174 	beq.w	80062a6 <USBD_StdEPReq+0x32e>
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8170 	bne.w	80062a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005fc6:	7b7a      	ldrb	r2, [r7, #13]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fce:	7b7a      	ldrb	r2, [r7, #13]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	32ae      	adds	r2, #174	@ 0xae
 8005fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8163 	beq.w	80062a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fe0:	7b7a      	ldrb	r2, [r7, #13]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	32ae      	adds	r2, #174	@ 0xae
 8005fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ff6:	e156      	b.n	80062a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d008      	beq.n	8006012 <USBD_StdEPReq+0x9a>
 8006000:	2b03      	cmp	r3, #3
 8006002:	f300 8145 	bgt.w	8006290 <USBD_StdEPReq+0x318>
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 809b 	beq.w	8006142 <USBD_StdEPReq+0x1ca>
 800600c:	2b01      	cmp	r3, #1
 800600e:	d03c      	beq.n	800608a <USBD_StdEPReq+0x112>
 8006010:	e13e      	b.n	8006290 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d002      	beq.n	8006024 <USBD_StdEPReq+0xac>
 800601e:	2b03      	cmp	r3, #3
 8006020:	d016      	beq.n	8006050 <USBD_StdEPReq+0xd8>
 8006022:	e02c      	b.n	800607e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <USBD_StdEPReq+0xce>
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b80      	cmp	r3, #128	@ 0x80
 800602e:	d00a      	beq.n	8006046 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f9bf 	bl	80073b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800603a:	2180      	movs	r1, #128	@ 0x80
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f9bb 	bl	80073b8 <USBD_LL_StallEP>
 8006042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006044:	e020      	b.n	8006088 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fca4 	bl	8006996 <USBD_CtlError>
              break;
 800604e:	e01b      	b.n	8006088 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	885b      	ldrh	r3, [r3, #2]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10e      	bne.n	8006076 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <USBD_StdEPReq+0xfe>
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b80      	cmp	r3, #128	@ 0x80
 8006062:	d008      	beq.n	8006076 <USBD_StdEPReq+0xfe>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	88db      	ldrh	r3, [r3, #6]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f9a1 	bl	80073b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fd58 	bl	8006b2c <USBD_CtlSendStatus>

              break;
 800607c:	e004      	b.n	8006088 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc88 	bl	8006996 <USBD_CtlError>
              break;
 8006086:	bf00      	nop
          }
          break;
 8006088:	e107      	b.n	800629a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d002      	beq.n	800609c <USBD_StdEPReq+0x124>
 8006096:	2b03      	cmp	r3, #3
 8006098:	d016      	beq.n	80060c8 <USBD_StdEPReq+0x150>
 800609a:	e04b      	b.n	8006134 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00d      	beq.n	80060be <USBD_StdEPReq+0x146>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b80      	cmp	r3, #128	@ 0x80
 80060a6:	d00a      	beq.n	80060be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 f983 	bl	80073b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060b2:	2180      	movs	r1, #128	@ 0x80
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 f97f 	bl	80073b8 <USBD_LL_StallEP>
 80060ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060bc:	e040      	b.n	8006140 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fc68 	bl	8006996 <USBD_CtlError>
              break;
 80060c6:	e03b      	b.n	8006140 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	885b      	ldrh	r3, [r3, #2]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d136      	bne.n	800613e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 f989 	bl	80073f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fd21 	bl	8006b2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fde4 	bl	8005cbc <USBD_CoreFindEP>
 80060f4:	4603      	mov	r3, r0
 80060f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060f8:	7b7b      	ldrb	r3, [r7, #13]
 80060fa:	2bff      	cmp	r3, #255	@ 0xff
 80060fc:	d01f      	beq.n	800613e <USBD_StdEPReq+0x1c6>
 80060fe:	7b7b      	ldrb	r3, [r7, #13]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11c      	bne.n	800613e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006104:	7b7a      	ldrb	r2, [r7, #13]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800610c:	7b7a      	ldrb	r2, [r7, #13]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32ae      	adds	r2, #174	@ 0xae
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d010      	beq.n	800613e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800611c:	7b7a      	ldrb	r2, [r7, #13]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32ae      	adds	r2, #174	@ 0xae
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	4798      	blx	r3
 800612e:	4603      	mov	r3, r0
 8006130:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006132:	e004      	b.n	800613e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fc2d 	bl	8006996 <USBD_CtlError>
              break;
 800613c:	e000      	b.n	8006140 <USBD_StdEPReq+0x1c8>
              break;
 800613e:	bf00      	nop
          }
          break;
 8006140:	e0ab      	b.n	800629a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d002      	beq.n	8006154 <USBD_StdEPReq+0x1dc>
 800614e:	2b03      	cmp	r3, #3
 8006150:	d032      	beq.n	80061b8 <USBD_StdEPReq+0x240>
 8006152:	e097      	b.n	8006284 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <USBD_StdEPReq+0x1f2>
 800615a:	7bbb      	ldrb	r3, [r7, #14]
 800615c:	2b80      	cmp	r3, #128	@ 0x80
 800615e:	d004      	beq.n	800616a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fc17 	bl	8006996 <USBD_CtlError>
                break;
 8006168:	e091      	b.n	800628e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800616a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800616e:	2b00      	cmp	r3, #0
 8006170:	da0b      	bge.n	800618a <USBD_StdEPReq+0x212>
 8006172:	7bbb      	ldrb	r3, [r7, #14]
 8006174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	3310      	adds	r3, #16
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	3304      	adds	r3, #4
 8006188:	e00b      	b.n	80061a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800618a:	7bbb      	ldrb	r3, [r7, #14]
 800618c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4413      	add	r3, r2
 80061a0:	3304      	adds	r3, #4
 80061a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2202      	movs	r2, #2
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc61 	bl	8006a78 <USBD_CtlSendData>
              break;
 80061b6:	e06a      	b.n	800628e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da11      	bge.n	80061e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061c0:	7bbb      	ldrb	r3, [r7, #14]
 80061c2:	f003 020f 	and.w	r2, r3, #15
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	3324      	adds	r3, #36	@ 0x24
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d117      	bne.n	800620a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fbda 	bl	8006996 <USBD_CtlError>
                  break;
 80061e2:	e054      	b.n	800628e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fbc7 	bl	8006996 <USBD_CtlError>
                  break;
 8006208:	e041      	b.n	800628e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800620a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	da0b      	bge.n	800622a <USBD_StdEPReq+0x2b2>
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	3310      	adds	r3, #16
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	3304      	adds	r3, #4
 8006228:	e00b      	b.n	8006242 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800622a:	7bbb      	ldrb	r3, [r7, #14]
 800622c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006244:	7bbb      	ldrb	r3, [r7, #14]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <USBD_StdEPReq+0x2d8>
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	2b80      	cmp	r3, #128	@ 0x80
 800624e:	d103      	bne.n	8006258 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e00e      	b.n	8006276 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006258:	7bbb      	ldrb	r3, [r7, #14]
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 f8e9 	bl	8007434 <USBD_LL_IsStallEP>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e002      	b.n	8006276 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2202      	movs	r2, #2
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fbfb 	bl	8006a78 <USBD_CtlSendData>
              break;
 8006282:	e004      	b.n	800628e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fb85 	bl	8006996 <USBD_CtlError>
              break;
 800628c:	bf00      	nop
          }
          break;
 800628e:	e004      	b.n	800629a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fb7f 	bl	8006996 <USBD_CtlError>
          break;
 8006298:	bf00      	nop
      }
      break;
 800629a:	e005      	b.n	80062a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fb79 	bl	8006996 <USBD_CtlError>
      break;
 80062a4:	e000      	b.n	80062a8 <USBD_StdEPReq+0x330>
      break;
 80062a6:	bf00      	nop
  }

  return ret;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	885b      	ldrh	r3, [r3, #2]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2b0e      	cmp	r3, #14
 80062d6:	f200 8152 	bhi.w	800657e <USBD_GetDescriptor+0x2ca>
 80062da:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <USBD_GetDescriptor+0x2c>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006351 	.word	0x08006351
 80062e4:	08006369 	.word	0x08006369
 80062e8:	080063a9 	.word	0x080063a9
 80062ec:	0800657f 	.word	0x0800657f
 80062f0:	0800657f 	.word	0x0800657f
 80062f4:	0800651f 	.word	0x0800651f
 80062f8:	0800654b 	.word	0x0800654b
 80062fc:	0800657f 	.word	0x0800657f
 8006300:	0800657f 	.word	0x0800657f
 8006304:	0800657f 	.word	0x0800657f
 8006308:	0800657f 	.word	0x0800657f
 800630c:	0800657f 	.word	0x0800657f
 8006310:	0800657f 	.word	0x0800657f
 8006314:	0800657f 	.word	0x0800657f
 8006318:	0800631d 	.word	0x0800631d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	7c12      	ldrb	r2, [r2, #16]
 8006334:	f107 0108 	add.w	r1, r7, #8
 8006338:	4610      	mov	r0, r2
 800633a:	4798      	blx	r3
 800633c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800633e:	e126      	b.n	800658e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fb27 	bl	8006996 <USBD_CtlError>
        err++;
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	3301      	adds	r3, #1
 800634c:	72fb      	strb	r3, [r7, #11]
      break;
 800634e:	e11e      	b.n	800658e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	7c12      	ldrb	r2, [r2, #16]
 800635c:	f107 0108 	add.w	r1, r7, #8
 8006360:	4610      	mov	r0, r2
 8006362:	4798      	blx	r3
 8006364:	60f8      	str	r0, [r7, #12]
      break;
 8006366:	e112      	b.n	800658e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7c1b      	ldrb	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10d      	bne.n	800638c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	f107 0208 	add.w	r2, r7, #8
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
 8006380:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	2202      	movs	r2, #2
 8006388:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800638a:	e100      	b.n	800658e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	f107 0208 	add.w	r2, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	2202      	movs	r2, #2
 80063a4:	701a      	strb	r2, [r3, #0]
      break;
 80063a6:	e0f2      	b.n	800658e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	885b      	ldrh	r3, [r3, #2]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	f200 80ac 	bhi.w	800650c <USBD_GetDescriptor+0x258>
 80063b4:	a201      	add	r2, pc, #4	@ (adr r2, 80063bc <USBD_GetDescriptor+0x108>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063d5 	.word	0x080063d5
 80063c0:	08006409 	.word	0x08006409
 80063c4:	0800643d 	.word	0x0800643d
 80063c8:	08006471 	.word	0x08006471
 80063cc:	080064a5 	.word	0x080064a5
 80063d0:	080064d9 	.word	0x080064d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	7c12      	ldrb	r2, [r2, #16]
 80063ec:	f107 0108 	add.w	r1, r7, #8
 80063f0:	4610      	mov	r0, r2
 80063f2:	4798      	blx	r3
 80063f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063f6:	e091      	b.n	800651c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 facb 	bl	8006996 <USBD_CtlError>
            err++;
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	3301      	adds	r3, #1
 8006404:	72fb      	strb	r3, [r7, #11]
          break;
 8006406:	e089      	b.n	800651c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	7c12      	ldrb	r2, [r2, #16]
 8006420:	f107 0108 	add.w	r1, r7, #8
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
 8006428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800642a:	e077      	b.n	800651c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fab1 	bl	8006996 <USBD_CtlError>
            err++;
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	3301      	adds	r3, #1
 8006438:	72fb      	strb	r3, [r7, #11]
          break;
 800643a:	e06f      	b.n	800651c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	7c12      	ldrb	r2, [r2, #16]
 8006454:	f107 0108 	add.w	r1, r7, #8
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
 800645c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800645e:	e05d      	b.n	800651c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa97 	bl	8006996 <USBD_CtlError>
            err++;
 8006468:	7afb      	ldrb	r3, [r7, #11]
 800646a:	3301      	adds	r3, #1
 800646c:	72fb      	strb	r3, [r7, #11]
          break;
 800646e:	e055      	b.n	800651c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	7c12      	ldrb	r2, [r2, #16]
 8006488:	f107 0108 	add.w	r1, r7, #8
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
 8006490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006492:	e043      	b.n	800651c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa7d 	bl	8006996 <USBD_CtlError>
            err++;
 800649c:	7afb      	ldrb	r3, [r7, #11]
 800649e:	3301      	adds	r3, #1
 80064a0:	72fb      	strb	r3, [r7, #11]
          break;
 80064a2:	e03b      	b.n	800651c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7c12      	ldrb	r2, [r2, #16]
 80064bc:	f107 0108 	add.w	r1, r7, #8
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
 80064c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064c6:	e029      	b.n	800651c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fa63 	bl	8006996 <USBD_CtlError>
            err++;
 80064d0:	7afb      	ldrb	r3, [r7, #11]
 80064d2:	3301      	adds	r3, #1
 80064d4:	72fb      	strb	r3, [r7, #11]
          break;
 80064d6:	e021      	b.n	800651c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	7c12      	ldrb	r2, [r2, #16]
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064fa:	e00f      	b.n	800651c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa49 	bl	8006996 <USBD_CtlError>
            err++;
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	3301      	adds	r3, #1
 8006508:	72fb      	strb	r3, [r7, #11]
          break;
 800650a:	e007      	b.n	800651c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa41 	bl	8006996 <USBD_CtlError>
          err++;
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	3301      	adds	r3, #1
 8006518:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800651a:	bf00      	nop
      }
      break;
 800651c:	e037      	b.n	800658e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	7c1b      	ldrb	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800652c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800652e:	f107 0208 	add.w	r2, r7, #8
 8006532:	4610      	mov	r0, r2
 8006534:	4798      	blx	r3
 8006536:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006538:	e029      	b.n	800658e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fa2a 	bl	8006996 <USBD_CtlError>
        err++;
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	3301      	adds	r3, #1
 8006546:	72fb      	strb	r3, [r7, #11]
      break;
 8006548:	e021      	b.n	800658e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	7c1b      	ldrb	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10d      	bne.n	800656e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	f107 0208 	add.w	r2, r7, #8
 800655e:	4610      	mov	r0, r2
 8006560:	4798      	blx	r3
 8006562:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	2207      	movs	r2, #7
 800656a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800656c:	e00f      	b.n	800658e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa10 	bl	8006996 <USBD_CtlError>
        err++;
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	3301      	adds	r3, #1
 800657a:	72fb      	strb	r3, [r7, #11]
      break;
 800657c:	e007      	b.n	800658e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fa08 	bl	8006996 <USBD_CtlError>
      err++;
 8006586:	7afb      	ldrb	r3, [r7, #11]
 8006588:	3301      	adds	r3, #1
 800658a:	72fb      	strb	r3, [r7, #11]
      break;
 800658c:	bf00      	nop
  }

  if (err != 0U)
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d11e      	bne.n	80065d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	88db      	ldrh	r3, [r3, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d016      	beq.n	80065ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800659c:	893b      	ldrh	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00e      	beq.n	80065c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	88da      	ldrh	r2, [r3, #6]
 80065a6:	893b      	ldrh	r3, [r7, #8]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	bf28      	it	cs
 80065ac:	4613      	movcs	r3, r2
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065b2:	893b      	ldrh	r3, [r7, #8]
 80065b4:	461a      	mov	r2, r3
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa5d 	bl	8006a78 <USBD_CtlSendData>
 80065be:	e009      	b.n	80065d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9e7 	bl	8006996 <USBD_CtlError>
 80065c8:	e004      	b.n	80065d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 faae 	bl	8006b2c <USBD_CtlSendStatus>
 80065d0:	e000      	b.n	80065d4 <USBD_GetDescriptor+0x320>
    return;
 80065d2:	bf00      	nop
  }
}
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop

080065dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	889b      	ldrh	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d131      	bne.n	8006652 <USBD_SetAddress+0x76>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	88db      	ldrh	r3, [r3, #6]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d12d      	bne.n	8006652 <USBD_SetAddress+0x76>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80065fc:	d829      	bhi.n	8006652 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	885b      	ldrh	r3, [r3, #2]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006608:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b03      	cmp	r3, #3
 8006614:	d104      	bne.n	8006620 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f9bc 	bl	8006996 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	e01d      	b.n	800665c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7bfa      	ldrb	r2, [r7, #15]
 8006624:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 ff2d 	bl	800748c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa7a 	bl	8006b2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2202      	movs	r2, #2
 8006642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006646:	e009      	b.n	800665c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006650:	e004      	b.n	800665c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f99e 	bl	8006996 <USBD_CtlError>
  }
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	885b      	ldrh	r3, [r3, #2]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	4b4e      	ldr	r3, [pc, #312]	@ (80067b4 <USBD_SetConfig+0x150>)
 800667a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800667c:	4b4d      	ldr	r3, [pc, #308]	@ (80067b4 <USBD_SetConfig+0x150>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d905      	bls.n	8006690 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f985 	bl	8006996 <USBD_CtlError>
    return USBD_FAIL;
 800668c:	2303      	movs	r3, #3
 800668e:	e08c      	b.n	80067aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d002      	beq.n	80066a2 <USBD_SetConfig+0x3e>
 800669c:	2b03      	cmp	r3, #3
 800669e:	d029      	beq.n	80066f4 <USBD_SetConfig+0x90>
 80066a0:	e075      	b.n	800678e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066a2:	4b44      	ldr	r3, [pc, #272]	@ (80067b4 <USBD_SetConfig+0x150>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d020      	beq.n	80066ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80066aa:	4b42      	ldr	r3, [pc, #264]	@ (80067b4 <USBD_SetConfig+0x150>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066b4:	4b3f      	ldr	r3, [pc, #252]	@ (80067b4 <USBD_SetConfig+0x150>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fe ffb9 	bl	8005632 <USBD_SetClassConfig>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f962 	bl	8006996 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066da:	e065      	b.n	80067a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa25 	bl	8006b2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2203      	movs	r2, #3
 80066e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80066ea:	e05d      	b.n	80067a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fa1d 	bl	8006b2c <USBD_CtlSendStatus>
      break;
 80066f2:	e059      	b.n	80067a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066f4:	4b2f      	ldr	r3, [pc, #188]	@ (80067b4 <USBD_SetConfig+0x150>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d112      	bne.n	8006722 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006704:	4b2b      	ldr	r3, [pc, #172]	@ (80067b4 <USBD_SetConfig+0x150>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800670e:	4b29      	ldr	r3, [pc, #164]	@ (80067b4 <USBD_SetConfig+0x150>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	4619      	mov	r1, r3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fe ffa8 	bl	800566a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa06 	bl	8006b2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006720:	e042      	b.n	80067a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006722:	4b24      	ldr	r3, [pc, #144]	@ (80067b4 <USBD_SetConfig+0x150>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d02a      	beq.n	8006786 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7fe ff96 	bl	800566a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800673e:	4b1d      	ldr	r3, [pc, #116]	@ (80067b4 <USBD_SetConfig+0x150>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006748:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <USBD_SetConfig+0x150>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fe ff6f 	bl	8005632 <USBD_SetClassConfig>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00f      	beq.n	800677e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f918 	bl	8006996 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fe ff7b 	bl	800566a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800677c:	e014      	b.n	80067a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9d4 	bl	8006b2c <USBD_CtlSendStatus>
      break;
 8006784:	e010      	b.n	80067a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f9d0 	bl	8006b2c <USBD_CtlSendStatus>
      break;
 800678c:	e00c      	b.n	80067a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f900 	bl	8006996 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006796:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <USBD_SetConfig+0x150>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7fe ff64 	bl	800566a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80067a2:	2303      	movs	r3, #3
 80067a4:	73fb      	strb	r3, [r7, #15]
      break;
 80067a6:	bf00      	nop
  }

  return ret;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	2000012c 	.word	0x2000012c

080067b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d004      	beq.n	80067d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8e2 	bl	8006996 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067d2:	e023      	b.n	800681c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	dc02      	bgt.n	80067e6 <USBD_GetConfig+0x2e>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dc03      	bgt.n	80067ec <USBD_GetConfig+0x34>
 80067e4:	e015      	b.n	8006812 <USBD_GetConfig+0x5a>
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d00b      	beq.n	8006802 <USBD_GetConfig+0x4a>
 80067ea:	e012      	b.n	8006812 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3308      	adds	r3, #8
 80067f6:	2201      	movs	r2, #1
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f93c 	bl	8006a78 <USBD_CtlSendData>
        break;
 8006800:	e00c      	b.n	800681c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	2201      	movs	r2, #1
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f934 	bl	8006a78 <USBD_CtlSendData>
        break;
 8006810:	e004      	b.n	800681c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8be 	bl	8006996 <USBD_CtlError>
        break;
 800681a:	bf00      	nop
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006834:	b2db      	uxtb	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	2b02      	cmp	r3, #2
 800683a:	d81e      	bhi.n	800687a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	88db      	ldrh	r3, [r3, #6]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d004      	beq.n	800684e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8a5 	bl	8006996 <USBD_CtlError>
        break;
 800684c:	e01a      	b.n	8006884 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f043 0202 	orr.w	r2, r3, #2
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	330c      	adds	r3, #12
 800686e:	2202      	movs	r2, #2
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f900 	bl	8006a78 <USBD_CtlSendData>
      break;
 8006878:	e004      	b.n	8006884 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f88a 	bl	8006996 <USBD_CtlError>
      break;
 8006882:	bf00      	nop
  }
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d107      	bne.n	80068ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f940 	bl	8006b2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80068ac:	e013      	b.n	80068d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	885b      	ldrh	r3, [r3, #2]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d10b      	bne.n	80068ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	889b      	ldrh	r3, [r3, #4]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	b29b      	uxth	r3, r3
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f930 	bl	8006b2c <USBD_CtlSendStatus>
}
 80068cc:	e003      	b.n	80068d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f860 	bl	8006996 <USBD_CtlError>
}
 80068d6:	bf00      	nop
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d80b      	bhi.n	800690e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	885b      	ldrh	r3, [r3, #2]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10c      	bne.n	8006918 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f910 	bl	8006b2c <USBD_CtlSendStatus>
      }
      break;
 800690c:	e004      	b.n	8006918 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f840 	bl	8006996 <USBD_CtlError>
      break;
 8006916:	e000      	b.n	800691a <USBD_ClrFeature+0x3c>
      break;
 8006918:	bf00      	nop
  }
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	781a      	ldrb	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7ff fa16 	bl	8005d7e <SWAPBYTE>
 8006952:	4603      	mov	r3, r0
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff fa09 	bl	8005d7e <SWAPBYTE>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3301      	adds	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff f9fc 	bl	8005d7e <SWAPBYTE>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	80da      	strh	r2, [r3, #6]
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80069a0:	2180      	movs	r1, #128	@ 0x80
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fd08 	bl	80073b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80069a8:	2100      	movs	r1, #0
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fd04 	bl	80073b8 <USBD_LL_StallEP>
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d036      	beq.n	8006a3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80069d2:	6938      	ldr	r0, [r7, #16]
 80069d4:	f000 f836 	bl	8006a44 <USBD_GetLen>
 80069d8:	4603      	mov	r3, r0
 80069da:	3301      	adds	r3, #1
 80069dc:	b29b      	uxth	r3, r3
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	4413      	add	r3, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	7812      	ldrb	r2, [r2, #0]
 80069f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	3301      	adds	r3, #1
 80069f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	4413      	add	r3, r2
 80069fe:	2203      	movs	r2, #3
 8006a00:	701a      	strb	r2, [r3, #0]
  idx++;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	3301      	adds	r3, #1
 8006a06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006a08:	e013      	b.n	8006a32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4413      	add	r3, r2
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	7812      	ldrb	r2, [r2, #0]
 8006a14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	613b      	str	r3, [r7, #16]
    idx++;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4413      	add	r3, r2
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1e7      	bne.n	8006a0a <USBD_GetString+0x52>
 8006a3a:	e000      	b.n	8006a3e <USBD_GetString+0x86>
    return;
 8006a3c:	bf00      	nop
  }
}
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a54:	e005      	b.n	8006a62 <USBD_GetLen+0x1e>
  {
    len++;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f5      	bne.n	8006a56 <USBD_GetLen+0x12>
  }

  return len;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fd13 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fd02 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2203      	movs	r2, #3
 8006ae0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	2100      	movs	r1, #0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fd06 	bl	800750c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fcf5 	bl	800750c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2204      	movs	r2, #4
 8006b38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2100      	movs	r1, #0
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fcc1 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2205      	movs	r2, #5
 8006b5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b62:	2300      	movs	r3, #0
 8006b64:	2200      	movs	r2, #0
 8006b66:	2100      	movs	r1, #0
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fccf 	bl	800750c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4912      	ldr	r1, [pc, #72]	@ (8006bc8 <MX_USB_DEVICE_Init+0x50>)
 8006b80:	4812      	ldr	r0, [pc, #72]	@ (8006bcc <MX_USB_DEVICE_Init+0x54>)
 8006b82:	f7fe fcd9 	bl	8005538 <USBD_Init>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b8c:	f7f9 fd64 	bl	8000658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b90:	490f      	ldr	r1, [pc, #60]	@ (8006bd0 <MX_USB_DEVICE_Init+0x58>)
 8006b92:	480e      	ldr	r0, [pc, #56]	@ (8006bcc <MX_USB_DEVICE_Init+0x54>)
 8006b94:	f7fe fd00 	bl	8005598 <USBD_RegisterClass>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b9e:	f7f9 fd5b 	bl	8000658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006ba2:	490c      	ldr	r1, [pc, #48]	@ (8006bd4 <MX_USB_DEVICE_Init+0x5c>)
 8006ba4:	4809      	ldr	r0, [pc, #36]	@ (8006bcc <MX_USB_DEVICE_Init+0x54>)
 8006ba6:	f7fe fbf7 	bl	8005398 <USBD_CDC_RegisterInterface>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006bb0:	f7f9 fd52 	bl	8000658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bb4:	4805      	ldr	r0, [pc, #20]	@ (8006bcc <MX_USB_DEVICE_Init+0x54>)
 8006bb6:	f7fe fd25 	bl	8005604 <USBD_Start>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006bc0:	f7f9 fd4a 	bl	8000658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006bc4:	bf00      	nop
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	200000ac 	.word	0x200000ac
 8006bcc:	20000130 	.word	0x20000130
 8006bd0:	20000018 	.word	0x20000018
 8006bd4:	20000098 	.word	0x20000098

08006bd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4905      	ldr	r1, [pc, #20]	@ (8006bf4 <CDC_Init_FS+0x1c>)
 8006be0:	4805      	ldr	r0, [pc, #20]	@ (8006bf8 <CDC_Init_FS+0x20>)
 8006be2:	f7fe fbf3 	bl	80053cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006be6:	4905      	ldr	r1, [pc, #20]	@ (8006bfc <CDC_Init_FS+0x24>)
 8006be8:	4803      	ldr	r0, [pc, #12]	@ (8006bf8 <CDC_Init_FS+0x20>)
 8006bea:	f7fe fc11 	bl	8005410 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000c0c 	.word	0x20000c0c
 8006bf8:	20000130 	.word	0x20000130
 8006bfc:	2000040c 	.word	0x2000040c

08006c00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	2b23      	cmp	r3, #35	@ 0x23
 8006c24:	d84a      	bhi.n	8006cbc <CDC_Control_FS+0xac>
 8006c26:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <CDC_Control_FS+0x1c>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006cbd 	.word	0x08006cbd
 8006c30:	08006cbd 	.word	0x08006cbd
 8006c34:	08006cbd 	.word	0x08006cbd
 8006c38:	08006cbd 	.word	0x08006cbd
 8006c3c:	08006cbd 	.word	0x08006cbd
 8006c40:	08006cbd 	.word	0x08006cbd
 8006c44:	08006cbd 	.word	0x08006cbd
 8006c48:	08006cbd 	.word	0x08006cbd
 8006c4c:	08006cbd 	.word	0x08006cbd
 8006c50:	08006cbd 	.word	0x08006cbd
 8006c54:	08006cbd 	.word	0x08006cbd
 8006c58:	08006cbd 	.word	0x08006cbd
 8006c5c:	08006cbd 	.word	0x08006cbd
 8006c60:	08006cbd 	.word	0x08006cbd
 8006c64:	08006cbd 	.word	0x08006cbd
 8006c68:	08006cbd 	.word	0x08006cbd
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cbd 	.word	0x08006cbd
 8006c74:	08006cbd 	.word	0x08006cbd
 8006c78:	08006cbd 	.word	0x08006cbd
 8006c7c:	08006cbd 	.word	0x08006cbd
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006cbd 	.word	0x08006cbd
 8006c88:	08006cbd 	.word	0x08006cbd
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cbd 	.word	0x08006cbd
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cbd 	.word	0x08006cbd
 8006ca0:	08006cbd 	.word	0x08006cbd
 8006ca4:	08006cbd 	.word	0x08006cbd
 8006ca8:	08006cbd 	.word	0x08006cbd
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cbd 	.word	0x08006cbd
 8006cb4:	08006cbd 	.word	0x08006cbd
 8006cb8:	08006cbd 	.word	0x08006cbd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006cbc:	bf00      	nop
  }

  return (USBD_OK);
 8006cbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4805      	ldr	r0, [pc, #20]	@ (8006cf0 <CDC_Receive_FS+0x24>)
 8006cda:	f7fe fb99 	bl	8005410 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cde:	4804      	ldr	r0, [pc, #16]	@ (8006cf0 <CDC_Receive_FS+0x24>)
 8006ce0:	f7fe fbf4 	bl	80054cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006ce4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000130 	.word	0x20000130

08006cf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006d04:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <CDC_Transmit_FS+0x48>)
 8006d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e00b      	b.n	8006d32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006d1a:	887b      	ldrh	r3, [r7, #2]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4806      	ldr	r0, [pc, #24]	@ (8006d3c <CDC_Transmit_FS+0x48>)
 8006d22:	f7fe fb53 	bl	80053cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006d26:	4805      	ldr	r0, [pc, #20]	@ (8006d3c <CDC_Transmit_FS+0x48>)
 8006d28:	f7fe fb90 	bl	800544c <USBD_CDC_TransmitPacket>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000130 	.word	0x20000130

08006d40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	6039      	str	r1, [r7, #0]
 8006d6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2212      	movs	r2, #18
 8006d74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d76:	4b03      	ldr	r3, [pc, #12]	@ (8006d84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	200000cc 	.word	0x200000cc

08006d88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2204      	movs	r2, #4
 8006d98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d9a:	4b03      	ldr	r3, [pc, #12]	@ (8006da8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	200000ec 	.word	0x200000ec

08006dac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	4603      	mov	r3, r0
 8006db4:	6039      	str	r1, [r7, #0]
 8006db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	4907      	ldr	r1, [pc, #28]	@ (8006de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006dc2:	4808      	ldr	r0, [pc, #32]	@ (8006de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006dc4:	f7ff fdf8 	bl	80069b8 <USBD_GetString>
 8006dc8:	e004      	b.n	8006dd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4904      	ldr	r1, [pc, #16]	@ (8006de0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006dce:	4805      	ldr	r0, [pc, #20]	@ (8006de4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006dd0:	f7ff fdf2 	bl	80069b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006dd4:	4b02      	ldr	r3, [pc, #8]	@ (8006de0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	2000140c 	.word	0x2000140c
 8006de4:	08007718 	.word	0x08007718

08006de8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	4904      	ldr	r1, [pc, #16]	@ (8006e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006df8:	4804      	ldr	r0, [pc, #16]	@ (8006e0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dfa:	f7ff fddd 	bl	80069b8 <USBD_GetString>
  return USBD_StrDesc;
 8006dfe:	4b02      	ldr	r3, [pc, #8]	@ (8006e08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	2000140c 	.word	0x2000140c
 8006e0c:	08007730 	.word	0x08007730

08006e10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	221a      	movs	r2, #26
 8006e20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e22:	f000 f855 	bl	8006ed0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e26:	4b02      	ldr	r3, [pc, #8]	@ (8006e30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	200000f0 	.word	0x200000f0

08006e34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d105      	bne.n	8006e52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	4907      	ldr	r1, [pc, #28]	@ (8006e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e4a:	4808      	ldr	r0, [pc, #32]	@ (8006e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e4c:	f7ff fdb4 	bl	80069b8 <USBD_GetString>
 8006e50:	e004      	b.n	8006e5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	4904      	ldr	r1, [pc, #16]	@ (8006e68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e56:	4805      	ldr	r0, [pc, #20]	@ (8006e6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e58:	f7ff fdae 	bl	80069b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e5c:	4b02      	ldr	r3, [pc, #8]	@ (8006e68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000140c 	.word	0x2000140c
 8006e6c:	08007744 	.word	0x08007744

08006e70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	6039      	str	r1, [r7, #0]
 8006e7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d105      	bne.n	8006e8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	4907      	ldr	r1, [pc, #28]	@ (8006ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e86:	4808      	ldr	r0, [pc, #32]	@ (8006ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e88:	f7ff fd96 	bl	80069b8 <USBD_GetString>
 8006e8c:	e004      	b.n	8006e98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4904      	ldr	r1, [pc, #16]	@ (8006ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e92:	4805      	ldr	r0, [pc, #20]	@ (8006ea8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e94:	f7ff fd90 	bl	80069b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e98:	4b02      	ldr	r3, [pc, #8]	@ (8006ea4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000140c 	.word	0x2000140c
 8006ea8:	08007750 	.word	0x08007750

08006eac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	220c      	movs	r2, #12
 8006ebc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006ebe:	4b03      	ldr	r3, [pc, #12]	@ (8006ecc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200000e0 	.word	0x200000e0

08006ed0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f14 <Get_SerialNum+0x44>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006edc:	4b0e      	ldr	r3, [pc, #56]	@ (8006f18 <Get_SerialNum+0x48>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8006f1c <Get_SerialNum+0x4c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	4909      	ldr	r1, [pc, #36]	@ (8006f20 <Get_SerialNum+0x50>)
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f814 	bl	8006f28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f00:	2204      	movs	r2, #4
 8006f02:	4908      	ldr	r1, [pc, #32]	@ (8006f24 <Get_SerialNum+0x54>)
 8006f04:	68b8      	ldr	r0, [r7, #8]
 8006f06:	f000 f80f 	bl	8006f28 <IntToUnicode>
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	1fff7a10 	.word	0x1fff7a10
 8006f18:	1fff7a14 	.word	0x1fff7a14
 8006f1c:	1fff7a18 	.word	0x1fff7a18
 8006f20:	200000f2 	.word	0x200000f2
 8006f24:	20000102 	.word	0x20000102

08006f28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]
 8006f3e:	e027      	b.n	8006f90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	0f1b      	lsrs	r3, r3, #28
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d80b      	bhi.n	8006f60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	0f1b      	lsrs	r3, r3, #28
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4619      	mov	r1, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	440b      	add	r3, r1
 8006f58:	3230      	adds	r2, #48	@ 0x30
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e00a      	b.n	8006f76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	0f1b      	lsrs	r3, r3, #28
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	440b      	add	r3, r1
 8006f70:	3237      	adds	r2, #55	@ 0x37
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	3301      	adds	r3, #1
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	75fb      	strb	r3, [r7, #23]
 8006f90:	7dfa      	ldrb	r2, [r7, #23]
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3d3      	bcc.n	8006f40 <IntToUnicode+0x18>
  }
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b0a0      	sub	sp, #128	@ 0x80
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
 8006fba:	609a      	str	r2, [r3, #8]
 8006fbc:	60da      	str	r2, [r3, #12]
 8006fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fc0:	f107 0310 	add.w	r3, r7, #16
 8006fc4:	225c      	movs	r2, #92	@ 0x5c
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fb65 	bl	8007698 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd6:	d149      	bne.n	800706c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fdc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fe2:	f107 0310 	add.w	r3, r7, #16
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fb faa4 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8006ff2:	f7f9 fb31 	bl	8000658 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 8007000:	f043 0301 	orr.w	r3, r3, #1
 8007004:	6313      	str	r3, [r2, #48]	@ 0x30
 8007006:	4b1b      	ldr	r3, [pc, #108]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007012:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007016:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007018:	2302      	movs	r3, #2
 800701a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701c:	2300      	movs	r3, #0
 800701e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007020:	2303      	movs	r3, #3
 8007022:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007024:	230a      	movs	r3, #10
 8007026:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007028:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800702c:	4619      	mov	r1, r3
 800702e:	4812      	ldr	r0, [pc, #72]	@ (8007078 <HAL_PCD_MspInit+0xd0>)
 8007030:	f7f9 fd5e 	bl	8000af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007034:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 8007036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007038:	4a0e      	ldr	r2, [pc, #56]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 800703a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007040:	2300      	movs	r3, #0
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 8007046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007048:	4a0a      	ldr	r2, [pc, #40]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 800704a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800704e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007050:	4b08      	ldr	r3, [pc, #32]	@ (8007074 <HAL_PCD_MspInit+0xcc>)
 8007052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800705c:	2200      	movs	r2, #0
 800705e:	2100      	movs	r1, #0
 8007060:	2043      	movs	r0, #67	@ 0x43
 8007062:	f7f9 fd0e 	bl	8000a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007066:	2043      	movs	r0, #67	@ 0x43
 8007068:	f7f9 fd27 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800706c:	bf00      	nop
 800706e:	3780      	adds	r7, #128	@ 0x80
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	40023800 	.word	0x40023800
 8007078:	40020000 	.word	0x40020000

0800707c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7fe fb03 	bl	800569e <USBD_LL_SetupStage>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	4619      	mov	r1, r3
 80070ca:	f7fe fb3d 	bl	8005748 <USBD_LL_DataOutStage>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	6879      	ldr	r1, [r7, #4]
 80070ec:	4613      	mov	r3, r2
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	4413      	add	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	3320      	adds	r3, #32
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	4619      	mov	r1, r3
 80070fe:	f7fe fbd6 	bl	80058ae <USBD_LL_DataInStage>
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007118:	4618      	mov	r0, r3
 800711a:	f7fe fd10 	bl	8005b3e <USBD_LL_SOF>
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800712e:	2301      	movs	r3, #1
 8007130:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	79db      	ldrb	r3, [r3, #7]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e008      	b.n	8007152 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	79db      	ldrb	r3, [r3, #7]
 8007144:	2b02      	cmp	r3, #2
 8007146:	d102      	bne.n	800714e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
 800714c:	e001      	b.n	8007152 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800714e:	f7f9 fa83 	bl	8000658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007158:	7bfa      	ldrb	r2, [r7, #15]
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fcaa 	bl	8005ab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fc52 	bl	8005a12 <USBD_LL_Reset>
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fca5 	bl	8005ad6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7adb      	ldrb	r3, [r3, #11]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071ac:	4b04      	ldr	r3, [pc, #16]	@ (80071c0 <HAL_PCD_SuspendCallback+0x48>)
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	4a03      	ldr	r2, [pc, #12]	@ (80071c0 <HAL_PCD_SuspendCallback+0x48>)
 80071b2:	f043 0306 	orr.w	r3, r3, #6
 80071b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	e000ed00 	.word	0xe000ed00

080071c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fc9b 	bl	8005b0e <USBD_LL_Resume>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fcf3 	bl	8005be2 <USBD_LL_IsoOUTIncomplete>
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fcaf 	bl	8005b7e <USBD_LL_IsoINIncomplete>
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fd05 	bl	8005c46 <USBD_LL_DevConnected>
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fd02 	bl	8005c5c <USBD_LL_DevDisconnected>
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d13c      	bne.n	80072ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007270:	4a20      	ldr	r2, [pc, #128]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a1e      	ldr	r2, [pc, #120]	@ (80072f4 <USBD_LL_Init+0x94>)
 800727c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007280:	4b1c      	ldr	r3, [pc, #112]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007282:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007286:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <USBD_LL_Init+0x94>)
 800728a:	2206      	movs	r2, #6
 800728c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800728e:	4b19      	ldr	r3, [pc, #100]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007290:	2202      	movs	r2, #2
 8007292:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007296:	2200      	movs	r2, #0
 8007298:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800729a:	4b16      	ldr	r3, [pc, #88]	@ (80072f4 <USBD_LL_Init+0x94>)
 800729c:	2202      	movs	r2, #2
 800729e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072a0:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072ac:	4b11      	ldr	r3, [pc, #68]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072b2:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072be:	480d      	ldr	r0, [pc, #52]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072c0:	f7f9 fdaa 	bl	8000e18 <HAL_PCD_Init>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072ca:	f7f9 f9c5 	bl	8000658 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072ce:	2180      	movs	r1, #128	@ 0x80
 80072d0:	4808      	ldr	r0, [pc, #32]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072d2:	f7fb f808 	bl	80022e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072d6:	2240      	movs	r2, #64	@ 0x40
 80072d8:	2100      	movs	r1, #0
 80072da:	4806      	ldr	r0, [pc, #24]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072dc:	f7fa ffbc 	bl	8002258 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072e0:	2280      	movs	r2, #128	@ 0x80
 80072e2:	2101      	movs	r1, #1
 80072e4:	4803      	ldr	r0, [pc, #12]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072e6:	f7fa ffb7 	bl	8002258 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	2000160c 	.word	0x2000160c

080072f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800730e:	4618      	mov	r0, r3
 8007310:	f7f9 fe98 	bl	8001044 <HAL_PCD_Start>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f990 	bl	8007640 <USBD_Get_USB_Status>
 8007320:	4603      	mov	r3, r0
 8007322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007324:	7bbb      	ldrb	r3, [r7, #14]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	4608      	mov	r0, r1
 8007338:	4611      	mov	r1, r2
 800733a:	461a      	mov	r2, r3
 800733c:	4603      	mov	r3, r0
 800733e:	70fb      	strb	r3, [r7, #3]
 8007340:	460b      	mov	r3, r1
 8007342:	70bb      	strb	r3, [r7, #2]
 8007344:	4613      	mov	r3, r2
 8007346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007356:	78bb      	ldrb	r3, [r7, #2]
 8007358:	883a      	ldrh	r2, [r7, #0]
 800735a:	78f9      	ldrb	r1, [r7, #3]
 800735c:	f7fa fb99 	bl	8001a92 <HAL_PCD_EP_Open>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f96a 	bl	8007640 <USBD_Get_USB_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7fa fbe2 	bl	8001b62 <HAL_PCD_EP_Close>
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f94b 	bl	8007640 <USBD_Get_USB_Status>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fa fc9a 	bl	8001d10 <HAL_PCD_EP_SetStall>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f92c 	bl	8007640 <USBD_Get_USB_Status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f7fa fcde 	bl	8001dd6 <HAL_PCD_EP_ClrStall>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f90d 	bl	8007640 <USBD_Get_USB_Status>
 8007426:	4603      	mov	r3, r0
 8007428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800742a:	7bbb      	ldrb	r3, [r7, #14]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800744c:	2b00      	cmp	r3, #0
 800744e:	da0b      	bge.n	8007468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	4613      	mov	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	3316      	adds	r3, #22
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	e00b      	b.n	8007480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800747e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fa facd 	bl	8001a4a <HAL_PCD_SetAddress>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f8c2 	bl	8007640 <USBD_Get_USB_Status>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	460b      	mov	r3, r1
 80074d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074e8:	7af9      	ldrb	r1, [r7, #11]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	f7fa fbd5 	bl	8001c9c <HAL_PCD_EP_Transmit>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f8a1 	bl	8007640 <USBD_Get_USB_Status>
 80074fe:	4603      	mov	r3, r0
 8007500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007502:	7dbb      	ldrb	r3, [r7, #22]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	460b      	mov	r3, r1
 800751a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800752a:	7af9      	ldrb	r1, [r7, #11]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	f7fa fb61 	bl	8001bf6 <HAL_PCD_EP_Receive>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f880 	bl	8007640 <USBD_Get_USB_Status>
 8007540:	4603      	mov	r3, r0
 8007542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007544:	7dbb      	ldrb	r3, [r7, #22]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	4611      	mov	r1, r2
 8007564:	4618      	mov	r0, r3
 8007566:	f7fa fb81 	bl	8001c6c <HAL_PCD_EP_GetRxCount>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_PCDEx_LPM_Callback+0x18>
 8007586:	2b01      	cmp	r3, #1
 8007588:	d01f      	beq.n	80075ca <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800758a:	e03b      	b.n	8007604 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	7adb      	ldrb	r3, [r3, #11]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007594:	f7f8 ffcc 	bl	8000530 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007598:	4b1c      	ldr	r3, [pc, #112]	@ (800760c <HAL_PCDEx_LPM_Callback+0x98>)
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <HAL_PCDEx_LPM_Callback+0x98>)
 800759e:	f023 0306 	bic.w	r3, r3, #6
 80075a2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe faa3 	bl	8005b0e <USBD_LL_Resume>
    break;
 80075c8:	e01c      	b.n	8007604 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fe fa74 	bl	8005ad6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7adb      	ldrb	r3, [r3, #11]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075f6:	4b05      	ldr	r3, [pc, #20]	@ (800760c <HAL_PCDEx_LPM_Callback+0x98>)
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	4a04      	ldr	r2, [pc, #16]	@ (800760c <HAL_PCDEx_LPM_Callback+0x98>)
 80075fc:	f043 0306 	orr.w	r3, r3, #6
 8007600:	6113      	str	r3, [r2, #16]
    break;
 8007602:	bf00      	nop
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007618:	4b03      	ldr	r3, [pc, #12]	@ (8007628 <USBD_static_malloc+0x18>)
}
 800761a:	4618      	mov	r0, r3
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20001af0 	.word	0x20001af0

0800762c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	2b03      	cmp	r3, #3
 8007652:	d817      	bhi.n	8007684 <USBD_Get_USB_Status+0x44>
 8007654:	a201      	add	r2, pc, #4	@ (adr r2, 800765c <USBD_Get_USB_Status+0x1c>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	0800766d 	.word	0x0800766d
 8007660:	08007673 	.word	0x08007673
 8007664:	08007679 	.word	0x08007679
 8007668:	0800767f 	.word	0x0800767f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73fb      	strb	r3, [r7, #15]
    break;
 8007670:	e00b      	b.n	800768a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	73fb      	strb	r3, [r7, #15]
    break;
 8007676:	e008      	b.n	800768a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007678:	2301      	movs	r3, #1
 800767a:	73fb      	strb	r3, [r7, #15]
    break;
 800767c:	e005      	b.n	800768a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800767e:	2303      	movs	r3, #3
 8007680:	73fb      	strb	r3, [r7, #15]
    break;
 8007682:	e002      	b.n	800768a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	73fb      	strb	r3, [r7, #15]
    break;
 8007688:	bf00      	nop
  }
  return usb_status;
 800768a:	7bfb      	ldrb	r3, [r7, #15]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <memset>:
 8007698:	4402      	add	r2, r0
 800769a:	4603      	mov	r3, r0
 800769c:	4293      	cmp	r3, r2
 800769e:	d100      	bne.n	80076a2 <memset+0xa>
 80076a0:	4770      	bx	lr
 80076a2:	f803 1b01 	strb.w	r1, [r3], #1
 80076a6:	e7f9      	b.n	800769c <memset+0x4>

080076a8 <__libc_init_array>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	4d0d      	ldr	r5, [pc, #52]	@ (80076e0 <__libc_init_array+0x38>)
 80076ac:	4c0d      	ldr	r4, [pc, #52]	@ (80076e4 <__libc_init_array+0x3c>)
 80076ae:	1b64      	subs	r4, r4, r5
 80076b0:	10a4      	asrs	r4, r4, #2
 80076b2:	2600      	movs	r6, #0
 80076b4:	42a6      	cmp	r6, r4
 80076b6:	d109      	bne.n	80076cc <__libc_init_array+0x24>
 80076b8:	4d0b      	ldr	r5, [pc, #44]	@ (80076e8 <__libc_init_array+0x40>)
 80076ba:	4c0c      	ldr	r4, [pc, #48]	@ (80076ec <__libc_init_array+0x44>)
 80076bc:	f000 f818 	bl	80076f0 <_init>
 80076c0:	1b64      	subs	r4, r4, r5
 80076c2:	10a4      	asrs	r4, r4, #2
 80076c4:	2600      	movs	r6, #0
 80076c6:	42a6      	cmp	r6, r4
 80076c8:	d105      	bne.n	80076d6 <__libc_init_array+0x2e>
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d0:	4798      	blx	r3
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7ee      	b.n	80076b4 <__libc_init_array+0xc>
 80076d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076da:	4798      	blx	r3
 80076dc:	3601      	adds	r6, #1
 80076de:	e7f2      	b.n	80076c6 <__libc_init_array+0x1e>
 80076e0:	08007778 	.word	0x08007778
 80076e4:	08007778 	.word	0x08007778
 80076e8:	08007778 	.word	0x08007778
 80076ec:	0800777c 	.word	0x0800777c

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
