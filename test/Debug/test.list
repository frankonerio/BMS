
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000821c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080083e4  080083e4  000093e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008410  08008410  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008410  08008410  00009410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008418  08008418  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008418  08008418  00009418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800841c  0800841c  0000941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008420  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  2000000c  0800842c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  0800842c  0000a698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014db0  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5b  00000000  00000000  0001edec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00021d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f38  00000000  00000000  000230e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e6f  00000000  00000000  00024018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187ca  00000000  00000000  00046e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d788c  00000000  00000000  0005f651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136edd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005610  00000000  00000000  00136f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0013c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080083cc 	.word	0x080083cc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080083cc 	.word	0x080083cc

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__gedf2>:
 80007d4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007d8:	e006      	b.n	80007e8 <__cmpdf2+0x4>
 80007da:	bf00      	nop

080007dc <__ledf2>:
 80007dc:	f04f 0c01 	mov.w	ip, #1
 80007e0:	e002      	b.n	80007e8 <__cmpdf2+0x4>
 80007e2:	bf00      	nop

080007e4 <__cmpdf2>:
 80007e4:	f04f 0c01 	mov.w	ip, #1
 80007e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007fe:	d01b      	beq.n	8000838 <__cmpdf2+0x54>
 8000800:	b001      	add	sp, #4
 8000802:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000806:	bf0c      	ite	eq
 8000808:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800080c:	ea91 0f03 	teqne	r1, r3
 8000810:	bf02      	ittt	eq
 8000812:	ea90 0f02 	teqeq	r0, r2
 8000816:	2000      	moveq	r0, #0
 8000818:	4770      	bxeq	lr
 800081a:	f110 0f00 	cmn.w	r0, #0
 800081e:	ea91 0f03 	teq	r1, r3
 8000822:	bf58      	it	pl
 8000824:	4299      	cmppl	r1, r3
 8000826:	bf08      	it	eq
 8000828:	4290      	cmpeq	r0, r2
 800082a:	bf2c      	ite	cs
 800082c:	17d8      	asrcs	r0, r3, #31
 800082e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000832:	f040 0001 	orr.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800083c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000840:	d102      	bne.n	8000848 <__cmpdf2+0x64>
 8000842:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000846:	d107      	bne.n	8000858 <__cmpdf2+0x74>
 8000848:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d1d6      	bne.n	8000800 <__cmpdf2+0x1c>
 8000852:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000856:	d0d3      	beq.n	8000800 <__cmpdf2+0x1c>
 8000858:	f85d 0b04 	ldr.w	r0, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop

08000860 <__aeabi_cdrcmple>:
 8000860:	4684      	mov	ip, r0
 8000862:	4610      	mov	r0, r2
 8000864:	4662      	mov	r2, ip
 8000866:	468c      	mov	ip, r1
 8000868:	4619      	mov	r1, r3
 800086a:	4663      	mov	r3, ip
 800086c:	e000      	b.n	8000870 <__aeabi_cdcmpeq>
 800086e:	bf00      	nop

08000870 <__aeabi_cdcmpeq>:
 8000870:	b501      	push	{r0, lr}
 8000872:	f7ff ffb7 	bl	80007e4 <__cmpdf2>
 8000876:	2800      	cmp	r0, #0
 8000878:	bf48      	it	mi
 800087a:	f110 0f00 	cmnmi.w	r0, #0
 800087e:	bd01      	pop	{r0, pc}

08000880 <__aeabi_dcmpeq>:
 8000880:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000884:	f7ff fff4 	bl	8000870 <__aeabi_cdcmpeq>
 8000888:	bf0c      	ite	eq
 800088a:	2001      	moveq	r0, #1
 800088c:	2000      	movne	r0, #0
 800088e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000892:	bf00      	nop

08000894 <__aeabi_dcmplt>:
 8000894:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000898:	f7ff ffea 	bl	8000870 <__aeabi_cdcmpeq>
 800089c:	bf34      	ite	cc
 800089e:	2001      	movcc	r0, #1
 80008a0:	2000      	movcs	r0, #0
 80008a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a6:	bf00      	nop

080008a8 <__aeabi_dcmple>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff ffe0 	bl	8000870 <__aeabi_cdcmpeq>
 80008b0:	bf94      	ite	ls
 80008b2:	2001      	movls	r0, #1
 80008b4:	2000      	movhi	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmpge>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffce 	bl	8000860 <__aeabi_cdrcmple>
 80008c4:	bf94      	ite	ls
 80008c6:	2001      	movls	r0, #1
 80008c8:	2000      	movhi	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmpgt>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffc4 	bl	8000860 <__aeabi_cdrcmple>
 80008d8:	bf34      	ite	cc
 80008da:	2001      	movcc	r0, #1
 80008dc:	2000      	movcs	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_d2f>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008ec:	bf24      	itt	cs
 80008ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008f6:	d90d      	bls.n	8000914 <__aeabi_d2f+0x30>
 80008f8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000900:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000904:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000908:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800090c:	bf08      	it	eq
 800090e:	f020 0001 	biceq.w	r0, r0, #1
 8000912:	4770      	bx	lr
 8000914:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000918:	d121      	bne.n	800095e <__aeabi_d2f+0x7a>
 800091a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800091e:	bfbc      	itt	lt
 8000920:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000924:	4770      	bxlt	lr
 8000926:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800092e:	f1c2 0218 	rsb	r2, r2, #24
 8000932:	f1c2 0c20 	rsb	ip, r2, #32
 8000936:	fa10 f30c 	lsls.w	r3, r0, ip
 800093a:	fa20 f002 	lsr.w	r0, r0, r2
 800093e:	bf18      	it	ne
 8000940:	f040 0001 	orrne.w	r0, r0, #1
 8000944:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000948:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800094c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000950:	ea40 000c 	orr.w	r0, r0, ip
 8000954:	fa23 f302 	lsr.w	r3, r3, r2
 8000958:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800095c:	e7cc      	b.n	80008f8 <__aeabi_d2f+0x14>
 800095e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000962:	d107      	bne.n	8000974 <__aeabi_d2f+0x90>
 8000964:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000968:	bf1e      	ittt	ne
 800096a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800096e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000972:	4770      	bxne	lr
 8000974:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000978:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800097c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_uldivmod>:
 8000984:	b953      	cbnz	r3, 800099c <__aeabi_uldivmod+0x18>
 8000986:	b94a      	cbnz	r2, 800099c <__aeabi_uldivmod+0x18>
 8000988:	2900      	cmp	r1, #0
 800098a:	bf08      	it	eq
 800098c:	2800      	cmpeq	r0, #0
 800098e:	bf1c      	itt	ne
 8000990:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000994:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000998:	f000 b96a 	b.w	8000c70 <__aeabi_idiv0>
 800099c:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a4:	f000 f806 	bl	80009b4 <__udivmoddi4>
 80009a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009b0:	b004      	add	sp, #16
 80009b2:	4770      	bx	lr

080009b4 <__udivmoddi4>:
 80009b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b8:	9d08      	ldr	r5, [sp, #32]
 80009ba:	460c      	mov	r4, r1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d14e      	bne.n	8000a5e <__udivmoddi4+0xaa>
 80009c0:	4694      	mov	ip, r2
 80009c2:	458c      	cmp	ip, r1
 80009c4:	4686      	mov	lr, r0
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	d962      	bls.n	8000a92 <__udivmoddi4+0xde>
 80009cc:	b14a      	cbz	r2, 80009e2 <__udivmoddi4+0x2e>
 80009ce:	f1c2 0320 	rsb	r3, r2, #32
 80009d2:	4091      	lsls	r1, r2
 80009d4:	fa20 f303 	lsr.w	r3, r0, r3
 80009d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009dc:	4319      	orrs	r1, r3
 80009de:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e6:	fa1f f68c 	uxth.w	r6, ip
 80009ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f2:	fb07 1114 	mls	r1, r7, r4, r1
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb04 f106 	mul.w	r1, r4, r6
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d90a      	bls.n	8000a18 <__udivmoddi4+0x64>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a0a:	f080 8112 	bcs.w	8000c32 <__udivmoddi4+0x27e>
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	f240 810f 	bls.w	8000c32 <__udivmoddi4+0x27e>
 8000a14:	3c02      	subs	r4, #2
 8000a16:	4463      	add	r3, ip
 8000a18:	1a59      	subs	r1, r3, r1
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a22:	fb07 1110 	mls	r1, r7, r0, r1
 8000a26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a2a:	fb00 f606 	mul.w	r6, r0, r6
 8000a2e:	429e      	cmp	r6, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x94>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a3a:	f080 80fc 	bcs.w	8000c36 <__udivmoddi4+0x282>
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	f240 80f9 	bls.w	8000c36 <__udivmoddi4+0x282>
 8000a44:	4463      	add	r3, ip
 8000a46:	3802      	subs	r0, #2
 8000a48:	1b9b      	subs	r3, r3, r6
 8000a4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a4e:	2100      	movs	r1, #0
 8000a50:	b11d      	cbz	r5, 8000a5a <__udivmoddi4+0xa6>
 8000a52:	40d3      	lsrs	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	e9c5 3200 	strd	r3, r2, [r5]
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d905      	bls.n	8000a6e <__udivmoddi4+0xba>
 8000a62:	b10d      	cbz	r5, 8000a68 <__udivmoddi4+0xb4>
 8000a64:	e9c5 0100 	strd	r0, r1, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	e7f5      	b.n	8000a5a <__udivmoddi4+0xa6>
 8000a6e:	fab3 f183 	clz	r1, r3
 8000a72:	2900      	cmp	r1, #0
 8000a74:	d146      	bne.n	8000b04 <__udivmoddi4+0x150>
 8000a76:	42a3      	cmp	r3, r4
 8000a78:	d302      	bcc.n	8000a80 <__udivmoddi4+0xcc>
 8000a7a:	4290      	cmp	r0, r2
 8000a7c:	f0c0 80f0 	bcc.w	8000c60 <__udivmoddi4+0x2ac>
 8000a80:	1a86      	subs	r6, r0, r2
 8000a82:	eb64 0303 	sbc.w	r3, r4, r3
 8000a86:	2001      	movs	r0, #1
 8000a88:	2d00      	cmp	r5, #0
 8000a8a:	d0e6      	beq.n	8000a5a <__udivmoddi4+0xa6>
 8000a8c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a90:	e7e3      	b.n	8000a5a <__udivmoddi4+0xa6>
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	f040 8090 	bne.w	8000bb8 <__udivmoddi4+0x204>
 8000a98:	eba1 040c 	sub.w	r4, r1, ip
 8000a9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa0:	fa1f f78c 	uxth.w	r7, ip
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aaa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aae:	fb08 4416 	mls	r4, r8, r6, r4
 8000ab2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ab6:	fb07 f006 	mul.w	r0, r7, r6
 8000aba:	4298      	cmp	r0, r3
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0x11c>
 8000abe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x11a>
 8000ac8:	4298      	cmp	r0, r3
 8000aca:	f200 80cd 	bhi.w	8000c68 <__udivmoddi4+0x2b4>
 8000ace:	4626      	mov	r6, r4
 8000ad0:	1a1c      	subs	r4, r3, r0
 8000ad2:	fa1f f38e 	uxth.w	r3, lr
 8000ad6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ada:	fb08 4410 	mls	r4, r8, r0, r4
 8000ade:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ae2:	fb00 f707 	mul.w	r7, r0, r7
 8000ae6:	429f      	cmp	r7, r3
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x148>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000af2:	d202      	bcs.n	8000afa <__udivmoddi4+0x146>
 8000af4:	429f      	cmp	r7, r3
 8000af6:	f200 80b0 	bhi.w	8000c5a <__udivmoddi4+0x2a6>
 8000afa:	4620      	mov	r0, r4
 8000afc:	1bdb      	subs	r3, r3, r7
 8000afe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b02:	e7a5      	b.n	8000a50 <__udivmoddi4+0x9c>
 8000b04:	f1c1 0620 	rsb	r6, r1, #32
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b0e:	431f      	orrs	r7, r3
 8000b10:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b14:	fa04 f301 	lsl.w	r3, r4, r1
 8000b18:	ea43 030c 	orr.w	r3, r3, ip
 8000b1c:	40f4      	lsrs	r4, r6
 8000b1e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b22:	0c38      	lsrs	r0, r7, #16
 8000b24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b28:	fbb4 fef0 	udiv	lr, r4, r0
 8000b2c:	fa1f fc87 	uxth.w	ip, r7
 8000b30:	fb00 441e 	mls	r4, r0, lr, r4
 8000b34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b38:	fb0e f90c 	mul.w	r9, lr, ip
 8000b3c:	45a1      	cmp	r9, r4
 8000b3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b42:	d90a      	bls.n	8000b5a <__udivmoddi4+0x1a6>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b4a:	f080 8084 	bcs.w	8000c56 <__udivmoddi4+0x2a2>
 8000b4e:	45a1      	cmp	r9, r4
 8000b50:	f240 8081 	bls.w	8000c56 <__udivmoddi4+0x2a2>
 8000b54:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b58:	443c      	add	r4, r7
 8000b5a:	eba4 0409 	sub.w	r4, r4, r9
 8000b5e:	fa1f f983 	uxth.w	r9, r3
 8000b62:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b66:	fb00 4413 	mls	r4, r0, r3, r4
 8000b6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b6e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b72:	45a4      	cmp	ip, r4
 8000b74:	d907      	bls.n	8000b86 <__udivmoddi4+0x1d2>
 8000b76:	193c      	adds	r4, r7, r4
 8000b78:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b7c:	d267      	bcs.n	8000c4e <__udivmoddi4+0x29a>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0x29a>
 8000b82:	3b02      	subs	r3, #2
 8000b84:	443c      	add	r4, r7
 8000b86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b8a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b8e:	eba4 040c 	sub.w	r4, r4, ip
 8000b92:	429c      	cmp	r4, r3
 8000b94:	46ce      	mov	lr, r9
 8000b96:	469c      	mov	ip, r3
 8000b98:	d351      	bcc.n	8000c3e <__udivmoddi4+0x28a>
 8000b9a:	d04e      	beq.n	8000c3a <__udivmoddi4+0x286>
 8000b9c:	b155      	cbz	r5, 8000bb4 <__udivmoddi4+0x200>
 8000b9e:	ebb8 030e 	subs.w	r3, r8, lr
 8000ba2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ba6:	fa04 f606 	lsl.w	r6, r4, r6
 8000baa:	40cb      	lsrs	r3, r1
 8000bac:	431e      	orrs	r6, r3
 8000bae:	40cc      	lsrs	r4, r1
 8000bb0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	e750      	b.n	8000a5a <__udivmoddi4+0xa6>
 8000bb8:	f1c2 0320 	rsb	r3, r2, #32
 8000bbc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	430c      	orrs	r4, r1
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd4:	fa1f f78c 	uxth.w	r7, ip
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3110 	mls	r1, r8, r0, r3
 8000be0:	0c23      	lsrs	r3, r4, #16
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	fb00 f107 	mul.w	r1, r0, r7
 8000bea:	4299      	cmp	r1, r3
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x24c>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000bf6:	d22c      	bcs.n	8000c52 <__udivmoddi4+0x29e>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d92a      	bls.n	8000c52 <__udivmoddi4+0x29e>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c08:	fb08 3311 	mls	r3, r8, r1, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb01 f307 	mul.w	r3, r1, r7
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x276>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c20:	d213      	bcs.n	8000c4a <__udivmoddi4+0x296>
 8000c22:	42a3      	cmp	r3, r4
 8000c24:	d911      	bls.n	8000c4a <__udivmoddi4+0x296>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4464      	add	r4, ip
 8000c2a:	1ae4      	subs	r4, r4, r3
 8000c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c30:	e739      	b.n	8000aa6 <__udivmoddi4+0xf2>
 8000c32:	4604      	mov	r4, r0
 8000c34:	e6f0      	b.n	8000a18 <__udivmoddi4+0x64>
 8000c36:	4608      	mov	r0, r1
 8000c38:	e706      	b.n	8000a48 <__udivmoddi4+0x94>
 8000c3a:	45c8      	cmp	r8, r9
 8000c3c:	d2ae      	bcs.n	8000b9c <__udivmoddi4+0x1e8>
 8000c3e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c42:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c46:	3801      	subs	r0, #1
 8000c48:	e7a8      	b.n	8000b9c <__udivmoddi4+0x1e8>
 8000c4a:	4631      	mov	r1, r6
 8000c4c:	e7ed      	b.n	8000c2a <__udivmoddi4+0x276>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	e799      	b.n	8000b86 <__udivmoddi4+0x1d2>
 8000c52:	4630      	mov	r0, r6
 8000c54:	e7d4      	b.n	8000c00 <__udivmoddi4+0x24c>
 8000c56:	46d6      	mov	lr, sl
 8000c58:	e77f      	b.n	8000b5a <__udivmoddi4+0x1a6>
 8000c5a:	4463      	add	r3, ip
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	e74d      	b.n	8000afc <__udivmoddi4+0x148>
 8000c60:	4606      	mov	r6, r0
 8000c62:	4623      	mov	r3, r4
 8000c64:	4608      	mov	r0, r1
 8000c66:	e70f      	b.n	8000a88 <__udivmoddi4+0xd4>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	e730      	b.n	8000ad0 <__udivmoddi4+0x11c>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_idiv0>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <delayUS>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void delayUS(uint32_t us) {   // Sets the delay in microseconds.
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim10,0);  // set the counter value a 0
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <delayUS+0x2c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10) < us);  // wait for the counter to reach the us input in the parameter
 8000c84:	bf00      	nop
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <delayUS+0x2c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d8f9      	bhi.n	8000c86 <delayUS+0x12>
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	200000a4 	.word	0x200000a4

08000ca4 <Checksum>:
    }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
	unsigned char i;
	unsigned char checksum = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73bb      	strb	r3, [r7, #14]

	for(i=0; i<len; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e009      	b.n	8000cce <Checksum+0x2a>
		checksum += ptr[i];
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781a      	ldrb	r2, [r3, #0]
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	73bb      	strb	r3, [r7, #14]
	for(i=0; i<len; i++)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	7bfa      	ldrb	r2, [r7, #15]
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3f1      	bcc.n	8000cba <Checksum+0x16>

	checksum = 0xff & ~checksum;
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	73bb      	strb	r3, [r7, #14]

	return(checksum);
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <I2C_WriteReg>:
	}
	return(crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af04      	add	r7, sp, #16
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_Buffer [MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d30 <I2C_WriteReg+0x44>)
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d04:	c303      	stmia	r3!, {r0, r1}
 8000d06:	801a      	strh	r2, [r3, #0]
			j = j + 1;
		}
		HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
	}
#else
	HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d14:	9102      	str	r1, [sp, #8]
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <I2C_WriteReg+0x48>)
 8000d22:	f001 fe93 	bl	8002a4c <HAL_I2C_Mem_Write>
#endif
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	080083e4 	.word	0x080083e4
 8000d34:	20000050 	.word	0x20000050

08000d38 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af04      	add	r7, sp, #16
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
	unsigned int RX_CRC_Fail = 0;  // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
	uint8_t RX_Buffer [MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <I2C_ReadReg+0x48>)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d54:	c303      	stmia	r3!, {r0, r1}
 8000d56:	801a      	strh	r2, [r3, #0]
			j = j + 1;
		}
		CopyArray(RX_Buffer, reg_data, crc_count);
	}
#else
	HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d64:	9102      	str	r1, [sp, #8]
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <I2C_ReadReg+0x4c>)
 8000d72:	f001 ff65 	bl	8002c40 <HAL_I2C_Mem_Read>
#endif
	return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	080083e4 	.word	0x080083e4
 8000d84:	20000050 	.word	0x20000050

08000d88 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	80fb      	strh	r3, [r7, #6]
 8000d94:	4613      	mov	r3, r2
 8000d96:	717b      	strb	r3, [r7, #5]
	uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000d98:	2300      	movs	r3, #0
 8000d9a:	82bb      	strh	r3, [r7, #20]
	uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000d9c:	4a62      	ldr	r2, [pc, #392]	@ (8000f28 <BQ769x2_SetRegister+0x1a0>)
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da6:	6018      	str	r0, [r3, #0]
 8000da8:	3304      	adds	r3, #4
 8000daa:	8019      	strh	r1, [r3, #0]

	//TX_RegData in little endian format
	TX_RegData[0] = reg_addr & 0xff;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	733b      	strb	r3, [r7, #12]
	TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	737b      	strb	r3, [r7, #13]
	TX_RegData[2] = reg_data & 0xff; //1st byte of data
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	73bb      	strb	r3, [r7, #14]

	switch(datalen)
 8000dc2:	797b      	ldrb	r3, [r7, #5]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d07d      	beq.n	8000ec4 <BQ769x2_SetRegister+0x13c>
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	f300 80a8 	bgt.w	8000f1e <BQ769x2_SetRegister+0x196>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d002      	beq.n	8000dd8 <BQ769x2_SetRegister+0x50>
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d039      	beq.n	8000e4a <BQ769x2_SetRegister+0xc2>
			TX_Buffer[1] = 0x08; //combined length of register address and data
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
			delayUS(2000);
			break;
    }
}
 8000dd6:	e0a2      	b.n	8000f1e <BQ769x2_SetRegister+0x196>
      		I2C_WriteReg(0x3E, TX_RegData, 3);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4619      	mov	r1, r3
 8000de0:	203e      	movs	r0, #62	@ 0x3e
 8000de2:	f7ff ff83 	bl	8000cec <I2C_WriteReg>
			delayUS(2000);
 8000de6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dea:	f7ff ff43 	bl	8000c74 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 3);
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2103      	movs	r1, #3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff55 	bl	8000ca4 <Checksum>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x05; //combined length of register address and data
 8000dfe:	2305      	movs	r3, #5
 8000e00:	757b      	strb	r3, [r7, #21]
			uint8_t statusLow = 0xFF;
 8000e02:	23ff      	movs	r3, #255	@ 0xff
 8000e04:	72fb      	strb	r3, [r7, #11]
			    uint8_t statusHigh = 0xFF;
 8000e06:	23ff      	movs	r3, #255	@ 0xff
 8000e08:	72bb      	strb	r3, [r7, #10]
			        I2C_ReadReg(0x3E, &statusLow, 1);
 8000e0a:	f107 030b 	add.w	r3, r7, #11
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	203e      	movs	r0, #62	@ 0x3e
 8000e14:	f7ff ff90 	bl	8000d38 <I2C_ReadReg>
			        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000e18:	f107 030a 	add.w	r3, r7, #10
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	203f      	movs	r0, #63	@ 0x3f
 8000e22:	f7ff ff89 	bl	8000d38 <I2C_ReadReg>
			    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000e26:	7afb      	ldrb	r3, [r7, #11]
 8000e28:	2bff      	cmp	r3, #255	@ 0xff
 8000e2a:	d102      	bne.n	8000e32 <BQ769x2_SetRegister+0xaa>
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	2bff      	cmp	r3, #255	@ 0xff
 8000e30:	d0eb      	beq.n	8000e0a <BQ769x2_SetRegister+0x82>
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2202      	movs	r2, #2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	2060      	movs	r0, #96	@ 0x60
 8000e3c:	f7ff ff56 	bl	8000cec <I2C_WriteReg>
			delayUS(2000);
 8000e40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e44:	f7ff ff16 	bl	8000c74 <delayUS>
			break;
 8000e48:	e069      	b.n	8000f1e <BQ769x2_SetRegister+0x196>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	73fb      	strb	r3, [r7, #15]
			I2C_WriteReg(0x3E, TX_RegData, 4);
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2204      	movs	r2, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	203e      	movs	r0, #62	@ 0x3e
 8000e5c:	f7ff ff46 	bl	8000cec <I2C_WriteReg>
			delayUS(2000);
 8000e60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e64:	f7ff ff06 	bl	8000c74 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff18 	bl	8000ca4 <Checksum>
 8000e74:	4603      	mov	r3, r0
 8000e76:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x06; //combined length of register address and data
 8000e78:	2306      	movs	r3, #6
 8000e7a:	757b      	strb	r3, [r7, #21]
			statusLow = 0xFF;
 8000e7c:	23ff      	movs	r3, #255	@ 0xff
 8000e7e:	72fb      	strb	r3, [r7, #11]
			statusHigh = 0xFF;
 8000e80:	23ff      	movs	r3, #255	@ 0xff
 8000e82:	72bb      	strb	r3, [r7, #10]
			        I2C_ReadReg(0x3E, &statusLow, 1);
 8000e84:	f107 030b 	add.w	r3, r7, #11
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	203e      	movs	r0, #62	@ 0x3e
 8000e8e:	f7ff ff53 	bl	8000d38 <I2C_ReadReg>
			        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000e92:	f107 030a 	add.w	r3, r7, #10
 8000e96:	2201      	movs	r2, #1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	203f      	movs	r0, #63	@ 0x3f
 8000e9c:	f7ff ff4c 	bl	8000d38 <I2C_ReadReg>
			    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000ea0:	7afb      	ldrb	r3, [r7, #11]
 8000ea2:	2bff      	cmp	r3, #255	@ 0xff
 8000ea4:	d102      	bne.n	8000eac <BQ769x2_SetRegister+0x124>
 8000ea6:	7abb      	ldrb	r3, [r7, #10]
 8000ea8:	2bff      	cmp	r3, #255	@ 0xff
 8000eaa:	d0eb      	beq.n	8000e84 <BQ769x2_SetRegister+0xfc>
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2060      	movs	r0, #96	@ 0x60
 8000eb6:	f7ff ff19 	bl	8000cec <I2C_WriteReg>
			delayUS(2000);
 8000eba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ebe:	f7ff fed9 	bl	8000c74 <delayUS>
			break;
 8000ec2:	e02c      	b.n	8000f1e <BQ769x2_SetRegister+0x196>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	73fb      	strb	r3, [r7, #15]
			TX_RegData[4] = (reg_data >> 16) & 0xff;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	743b      	strb	r3, [r7, #16]
			TX_RegData[5] = (reg_data >> 24) & 0xff;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	0e1b      	lsrs	r3, r3, #24
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	747b      	strb	r3, [r7, #17]
			I2C_WriteReg(0x3E, TX_RegData, 6);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2206      	movs	r2, #6
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	203e      	movs	r0, #62	@ 0x3e
 8000ee6:	f7ff ff01 	bl	8000cec <I2C_WriteReg>
			delayUS(2000);
 8000eea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eee:	f7ff fec1 	bl	8000c74 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 6);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2106      	movs	r1, #6
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fed3 	bl	8000ca4 <Checksum>
 8000efe:	4603      	mov	r3, r0
 8000f00:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x08; //combined length of register address and data
 8000f02:	2308      	movs	r3, #8
 8000f04:	757b      	strb	r3, [r7, #21]
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2060      	movs	r0, #96	@ 0x60
 8000f10:	f7ff feec 	bl	8000cec <I2C_WriteReg>
			delayUS(2000);
 8000f14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f18:	f7ff feac 	bl	8000c74 <delayUS>
			break;
 8000f1c:	bf00      	nop
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	080083f0 	.word	0x080083f0

08000f2c <BQ769x2_ReadRegister>:

uint16_t BQ769x2_ReadRegister(uint16_t reg_addr) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
    uint8_t TX_RegAddr[2] = {0};  // Array to hold the register address
 8000f36:	2300      	movs	r3, #0
 8000f38:	82bb      	strh	r3, [r7, #20]
    uint8_t RX_Buffer[2] = {0};   // Array to hold the received data
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	823b      	strh	r3, [r7, #16]

    // Populate the TX_RegAddr array with the register address
    TX_RegAddr[0] = reg_addr & 0xFF;          // Lower byte of register address
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	753b      	strb	r3, [r7, #20]
    TX_RegAddr[1] = (reg_addr >> 8) & 0xFF;   // Upper byte of register address
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	757b      	strb	r3, [r7, #21]

    // Write the register address to the 0x3E register
    I2C_WriteReg(0x3E, TX_RegAddr, 2);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2202      	movs	r2, #2
 8000f54:	4619      	mov	r1, r3
 8000f56:	203e      	movs	r0, #62	@ 0x3e
 8000f58:	f7ff fec8 	bl	8000cec <I2C_WriteReg>
    delayUS(2000);  // Delay to allow time for the write to complete
 8000f5c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f60:	f7ff fe88 	bl	8000c74 <delayUS>

    // Poll the 0x3E register until it no longer returns 0xFF
    uint8_t statusLow = 0xFF;
 8000f64:	23ff      	movs	r3, #255	@ 0xff
 8000f66:	73fb      	strb	r3, [r7, #15]
    uint8_t statusHigh = 0xFF;
 8000f68:	23ff      	movs	r3, #255	@ 0xff
 8000f6a:	73bb      	strb	r3, [r7, #14]
    do {
        I2C_ReadReg(0x3E, &statusLow, 1);
 8000f6c:	f107 030f 	add.w	r3, r7, #15
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	203e      	movs	r0, #62	@ 0x3e
 8000f76:	f7ff fedf 	bl	8000d38 <I2C_ReadReg>
        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000f7a:	f107 030e 	add.w	r3, r7, #14
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	203f      	movs	r0, #63	@ 0x3f
 8000f84:	f7ff fed8 	bl	8000d38 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2bff      	cmp	r3, #255	@ 0xff
 8000f8c:	d102      	bne.n	8000f94 <BQ769x2_ReadRegister+0x68>
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d0eb      	beq.n	8000f6c <BQ769x2_ReadRegister+0x40>

    //HAL_Delay(200);
    // Read the data from the buffer starting at 0x40
    I2C_ReadReg(0x40, RX_Buffer, 2);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2202      	movs	r2, #2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2040      	movs	r0, #64	@ 0x40
 8000f9e:	f7ff fecb 	bl	8000d38 <I2C_ReadReg>

    // Combine the received bytes into a single 16-bit value
    RX_data[0] = RX_Buffer[0];
 8000fa2:	7c3a      	ldrb	r2, [r7, #16]
 8000fa4:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <BQ769x2_ReadRegister+0x9c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
    RX_data[1] = RX_Buffer[1];
 8000fa8:	7c7a      	ldrb	r2, [r7, #17]
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <BQ769x2_ReadRegister+0x9c>)
 8000fac:	705a      	strb	r2, [r3, #1]
    uint16_t reg_data = (RX_Buffer[1] << 8) | RX_Buffer[0];
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	7c3b      	ldrb	r3, [r7, #16]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	82fb      	strh	r3, [r7, #22]

    return reg_data;
 8000fbe:	8afb      	ldrh	r3, [r7, #22]

}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000ec 	.word	0x200000ec

08000fcc <CommandSubcommands>:
    I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) //For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{	//For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]

	uint8_t TX_Reg[2] = {0x00, 0x00};
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	81bb      	strh	r3, [r7, #12]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	733b      	strb	r3, [r7, #12]
	TX_Reg[1] = (command >> 8) & 0xff;
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	737b      	strb	r3, [r7, #13]

	I2C_WriteReg(0x3E,TX_Reg,2);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2202      	movs	r2, #2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	203e      	movs	r0, #62	@ 0x3e
 8000ff4:	f7ff fe7a 	bl	8000cec <I2C_WriteReg>
	delayUS(2000);
 8000ff8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ffc:	f7ff fe3a 	bl	8000c74 <delayUS>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Subcommands>:

void Subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	80bb      	strh	r3, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	70fb      	strb	r3, [r7, #3]
	//security keys and Manu_data writes dont work with this function (reading these commands works)
	//max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
	uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
	uint8_t TX_Buffer[2] = {0x00, 0x00};
 800101e:	2300      	movs	r3, #0
 8001020:	823b      	strh	r3, [r7, #16]
	uint8_t lowByte;
	uint8_t highByte;


	I2C_ReadReg(0x3E, &lowByte, 1);
 8001022:	f107 030f 	add.w	r3, r7, #15
 8001026:	2201      	movs	r2, #1
 8001028:	4619      	mov	r1, r3
 800102a:	203e      	movs	r0, #62	@ 0x3e
 800102c:	f7ff fe84 	bl	8000d38 <I2C_ReadReg>
	I2C_ReadReg(0x3F, &highByte, 1);
 8001030:	f107 030e 	add.w	r3, r7, #14
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	203f      	movs	r0, #63	@ 0x3f
 800103a:	f7ff fe7d 	bl	8000d38 <I2C_ReadReg>
	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	753b      	strb	r3, [r7, #20]
	TX_Reg[1] = (command >> 8) & 0xff;
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	757b      	strb	r3, [r7, #21]

	if (type == R) {//read
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d120      	bne.n	8001096 <Subcommands+0x8e>
		I2C_WriteReg(0x3E,TX_Reg,2);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2202      	movs	r2, #2
 800105a:	4619      	mov	r1, r3
 800105c:	203e      	movs	r0, #62	@ 0x3e
 800105e:	f7ff fe45 	bl	8000cec <I2C_WriteReg>
		do{
			I2C_ReadReg(0x3E, &lowByte, 1);
 8001062:	f107 030f 	add.w	r3, r7, #15
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	203e      	movs	r0, #62	@ 0x3e
 800106c:	f7ff fe64 	bl	8000d38 <I2C_ReadReg>
			I2C_ReadReg(0x3F, &highByte, 1);
 8001070:	f107 030e 	add.w	r3, r7, #14
 8001074:	2201      	movs	r2, #1
 8001076:	4619      	mov	r1, r3
 8001078:	203f      	movs	r0, #63	@ 0x3f
 800107a:	f7ff fe5d 	bl	8000d38 <I2C_ReadReg>
		} while (lowByte == 0xFF &&  highByte == 0xFF);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d102      	bne.n	800108a <Subcommands+0x82>
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	2bff      	cmp	r3, #255	@ 0xff
 8001088:	d0eb      	beq.n	8001062 <Subcommands+0x5a>

		//delayUS(100000);

		I2C_ReadReg(0x40, RX_32Byte, 32); //RX_32Byte is a global variable
 800108a:	2220      	movs	r2, #32
 800108c:	492d      	ldr	r1, [pc, #180]	@ (8001144 <Subcommands+0x13c>)
 800108e:	2040      	movs	r0, #64	@ 0x40
 8001090:	f7ff fe52 	bl	8000d38 <I2C_ReadReg>
		TX_Buffer[0] = Checksum(TX_Reg, 4);
		TX_Buffer[1] = 0x06; //combined length of registers address and data
		I2C_WriteReg(0x60, TX_Buffer, 2);
		delayUS(1000);
	}
}
 8001094:	e051      	b.n	800113a <Subcommands+0x132>
	else if (type == W) {
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d123      	bne.n	80010e4 <Subcommands+0xdc>
		TX_Reg[2] = data & 0xff;
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	75bb      	strb	r3, [r7, #22]
		I2C_WriteReg(0x3E,TX_Reg,3);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2203      	movs	r2, #3
 80010a8:	4619      	mov	r1, r3
 80010aa:	203e      	movs	r0, #62	@ 0x3e
 80010ac:	f7ff fe1e 	bl	8000cec <I2C_WriteReg>
		delayUS(1000);
 80010b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b4:	f7ff fdde 	bl	8000c74 <delayUS>
		TX_Buffer[0] = Checksum(TX_Reg, 3);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2103      	movs	r1, #3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fdf0 	bl	8000ca4 <Checksum>
 80010c4:	4603      	mov	r3, r0
 80010c6:	743b      	strb	r3, [r7, #16]
		TX_Buffer[1] = 0x05; //combined length of registers address and data
 80010c8:	2305      	movs	r3, #5
 80010ca:	747b      	strb	r3, [r7, #17]
		I2C_WriteReg(0x60, TX_Buffer, 2);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	2202      	movs	r2, #2
 80010d2:	4619      	mov	r1, r3
 80010d4:	2060      	movs	r0, #96	@ 0x60
 80010d6:	f7ff fe09 	bl	8000cec <I2C_WriteReg>
		delayUS(1000);
 80010da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010de:	f7ff fdc9 	bl	8000c74 <delayUS>
}
 80010e2:	e02a      	b.n	800113a <Subcommands+0x132>
	else if (type == W2){ //write data with 2 bytes
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d127      	bne.n	800113a <Subcommands+0x132>
		TX_Reg[2] = data & 0xff;
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	75bb      	strb	r3, [r7, #22]
		TX_Reg[3] = (data >> 8) & 0xff;
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	75fb      	strb	r3, [r7, #23]
		I2C_WriteReg(0x3E,TX_Reg,4);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	2204      	movs	r2, #4
 8001100:	4619      	mov	r1, r3
 8001102:	203e      	movs	r0, #62	@ 0x3e
 8001104:	f7ff fdf2 	bl	8000cec <I2C_WriteReg>
		delayUS(1000);
 8001108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110c:	f7ff fdb2 	bl	8000c74 <delayUS>
		TX_Buffer[0] = Checksum(TX_Reg, 4);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2104      	movs	r1, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fdc4 	bl	8000ca4 <Checksum>
 800111c:	4603      	mov	r3, r0
 800111e:	743b      	strb	r3, [r7, #16]
		TX_Buffer[1] = 0x06; //combined length of registers address and data
 8001120:	2306      	movs	r3, #6
 8001122:	747b      	strb	r3, [r7, #17]
		I2C_WriteReg(0x60, TX_Buffer, 2);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2202      	movs	r2, #2
 800112a:	4619      	mov	r1, r3
 800112c:	2060      	movs	r0, #96	@ 0x60
 800112e:	f7ff fddd 	bl	8000cec <I2C_WriteReg>
		delayUS(1000);
 8001132:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001136:	f7ff fd9d 	bl	8000c74 <delayUS>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000f0 	.word	0x200000f0

08001148 <DirectCommands>:

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{	//type: R = read, W = write
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	460b      	mov	r3, r1
 8001154:	80bb      	strh	r3, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_data[2] = {0x00, 0x00};
 800115a:	2300      	movs	r3, #0
 800115c:	81bb      	strh	r3, [r7, #12]

	//little endian format
	TX_data[0] = data & 0xff;
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	733b      	strb	r3, [r7, #12]
	TX_data[1] = (data >> 8) & 0xff;
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	737b      	strb	r3, [r7, #13]

	if (type == R) {//Read
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d109      	bne.n	8001188 <DirectCommands+0x40>
		I2C_ReadReg(command, RX_data, 2); //RX_data is a global variable
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2202      	movs	r2, #2
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <DirectCommands+0x64>)
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fddc 	bl	8000d38 <I2C_ReadReg>
		delayUS(2000);
 8001180:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001184:	f7ff fd76 	bl	8000c74 <delayUS>
	}
	if (type == W) {//write
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10a      	bne.n	80011a4 <DirectCommands+0x5c>
    //Control_status, alarm_status, alarm_enable all 2 bytes long
		I2C_WriteReg(command,TX_data,2);
 800118e:	f107 010c 	add.w	r1, r7, #12
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2202      	movs	r2, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fda8 	bl	8000cec <I2C_WriteReg>
		delayUS(2000);
 800119c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011a0:	f7ff fd68 	bl	8000c74 <delayUS>
	}
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000ec 	.word	0x200000ec

080011b0 <BQ769x2_Init>:

void BQ769x2_Init() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	// Configures all parameters in device RAM

	  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
	  // See TRM for full description of CONFIG_UPDATE mode
	  CommandSubcommands(SET_CFGUPDATE);
 80011b4:	2090      	movs	r0, #144	@ 0x90
 80011b6:	f7ff ff09 	bl	8000fcc <CommandSubcommands>
	  // a full description of the register and the bits will pop up on the screen.

	  // 'Power Config' - 0x9234 = 0x2D80
	  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
	  // Set wake speed bits to 00 for best performance
	  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 80011ba:	2202      	movs	r2, #2
 80011bc:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 80011c0:	f249 2034 	movw	r0, #37428	@ 0x9234
 80011c4:	f7ff fde0 	bl	8000d88 <BQ769x2_SetRegister>

	  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
	  BQ769x2_SetRegister(REG0Config, 0x01, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2101      	movs	r1, #1
 80011cc:	f249 2037 	movw	r0, #37431	@ 0x9237
 80011d0:	f7ff fdda 	bl	8000d88 <BQ769x2_SetRegister>

	  // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
	  BQ769x2_SetRegister(REG12Config, 0xDD, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	21dd      	movs	r1, #221	@ 0xdd
 80011d8:	f249 2036 	movw	r0, #37430	@ 0x9236
 80011dc:	f7ff fdd4 	bl	8000d88 <BQ769x2_SetRegister>
	  //BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

	  // Set up ALERT Pin - 0x92FC = 0x2A
	  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
	  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
	  BQ769x2_SetRegister(ALERTPinConfig, 0xAA, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	21aa      	movs	r1, #170	@ 0xaa
 80011e4:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 80011e8:	f7ff fdce 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
	  // BQ769x2_SetRegister(TS1Config, 0x07, 1);
	  BQ769x2_SetRegister(TS1Config, 0x07, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2107      	movs	r1, #7
 80011f0:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 80011f4:	f7ff fdc8 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set TS3 to measure FET Temperature - 0x92FF = 0x0F
	  BQ769x2_SetRegister(TS3Config, 0x07, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2107      	movs	r1, #7
 80011fc:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8001200:	f7ff fdc2 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
	  BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);  // No thermistor installed on EVM HDQ pin, so set to 0x00
 8001204:	2201      	movs	r2, #1
 8001206:	2100      	movs	r1, #0
 8001208:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 800120c:	f7ff fdbc 	bl	8000d88 <BQ769x2_SetRegister>

	  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
	  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8001210:	2202      	movs	r2, #2
 8001212:	f248 011f 	movw	r1, #32799	@ 0x801f
 8001216:	f249 3004 	movw	r0, #37636	@ 0x9304
 800121a:	f7ff fdb5 	bl	8000d88 <BQ769x2_SetRegister>

	  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
	  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
	  // COV (over-voltage), CUV (under-voltage)
	  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	21bc      	movs	r1, #188	@ 0xbc
 8001222:	f249 2061 	movw	r0, #37473	@ 0x9261
 8001226:	f7ff fdaf 	bl	8000d88 <BQ769x2_SetRegister>

	  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
	  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
	  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
	  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 800122a:	2201      	movs	r2, #1
 800122c:	21f7      	movs	r1, #247	@ 0xf7
 800122e:	f249 2062 	movw	r0, #37474	@ 0x9262
 8001232:	f7ff fda9 	bl	8000d88 <BQ769x2_SetRegister>

	  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
	  BQ769x2_SetRegister(DefaultAlarmMask, 0xFFFF, 2);
 8001236:	2202      	movs	r2, #2
 8001238:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800123c:	f249 206d 	movw	r0, #37485	@ 0x926d
 8001240:	f7ff fda2 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
	  // CUV Threshold is this value multiplied by 50.6mV

	  //BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
	  BQ769x2_SetRegister(CUVThreshold, 0x14, 1);
 8001244:	2201      	movs	r2, #1
 8001246:	2114      	movs	r1, #20
 8001248:	f249 2075 	movw	r0, #37493	@ 0x9275
 800124c:	f7ff fd9c 	bl	8000d88 <BQ769x2_SetRegister>

	  //BQ769x2_SetRegister(CUVThreshold, 0x31, 1);

	  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
	  // COV Threshold is this value multiplied by 50.6mV
	  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	2155      	movs	r1, #85	@ 0x55
 8001254:	f249 2078 	movw	r0, #37496	@ 0x9278
 8001258:	f7ff fd96 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
	  BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	2105      	movs	r1, #5
 8001260:	f249 2080 	movw	r0, #37504	@ 0x9280
 8001264:	f7ff fd90 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
	  BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	210a      	movs	r1, #10
 800126c:	f249 2082 	movw	r0, #37506	@ 0x9282
 8001270:	f7ff fd8a 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
	  BQ769x2_SetRegister(SCDThreshold, 0x01, 1);
 8001274:	2201      	movs	r2, #1
 8001276:	2101      	movs	r1, #1
 8001278:	f249 2086 	movw	r0, #37510	@ 0x9286
 800127c:	f7ff fd84 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
	  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	2103      	movs	r1, #3
 8001284:	f249 2087 	movw	r0, #37511	@ 0x9287
 8001288:	f7ff fd7e 	bl	8000d88 <BQ769x2_SetRegister>

	  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
	  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
	  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 800128c:	2201      	movs	r2, #1
 800128e:	2101      	movs	r1, #1
 8001290:	f249 2095 	movw	r0, #37525	@ 0x9295
 8001294:	f7ff fd78 	bl	8000d88 <BQ769x2_SetRegister>


	  BQ769x2_SetRegister(MfgStatusInit, 0x0050, 2);
 8001298:	2202      	movs	r2, #2
 800129a:	2150      	movs	r1, #80	@ 0x50
 800129c:	f249 3043 	movw	r0, #37699	@ 0x9343
 80012a0:	f7ff fd72 	bl	8000d88 <BQ769x2_SetRegister>


	  BQ769x2_SetRegister(FETOptions,0x3F ,1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	213f      	movs	r1, #63	@ 0x3f
 80012a8:	f249 3008 	movw	r0, #37640	@ 0x9308
 80012ac:	f7ff fd6c 	bl	8000d88 <BQ769x2_SetRegister>

	  // Exit CONFIGUPDATE mode  - Subcommand 0x0092

	  //Subcommands(FET_CONTROL, 0x03, W);

	  CommandSubcommands(EXIT_CFGUPDATE);
 80012b0:	2092      	movs	r0, #146	@ 0x92
 80012b2:	f7ff fe8b 	bl	8000fcc <CommandSubcommands>

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************


// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	// Read this register to find out why the ALERT pin was asserted
	DirectCommands(AlarmStatus, 0x00, R);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2062      	movs	r0, #98	@ 0x62
 80012c6:	f7ff ff3f 	bl	8001148 <DirectCommands>
	return (RX_data[1]*256 + RX_data[0]);
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <BQ769x2_ReadAlarmStatus+0x24>)
 80012cc:	785b      	ldrb	r3, [r3, #1]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <BQ769x2_ReadAlarmStatus+0x24>)
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000ec 	.word	0x200000ec

080012e4 <BQ769x2_ReadSafetyStatus>:

void BQ769x2_ReadSafetyStatus() { //good example functions
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	// Read Safety Status A/B/C and find which bits are set
	// This shows which primary protections have been triggered
	DirectCommands(SafetyStatusA, 0x00, R);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff ff2b 	bl	8001148 <DirectCommands>
	value_SafetyStatusA = (RX_data[1]*256 + RX_data[0]);
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <BQ769x2_ReadSafetyStatus+0xb0>)
 80012f8:	701a      	strb	r2, [r3, #0]
	//Example Fault Flags
	UV_Fault = ((0x4 & RX_data[0])>>2);
 80012fa:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <BQ769x2_ReadSafetyStatus+0xb4>)
 800130a:	701a      	strb	r2, [r3, #0]
	OV_Fault = ((0x8 & RX_data[0])>>3);
 800130c:	4b20      	ldr	r3, [pc, #128]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <BQ769x2_ReadSafetyStatus+0xb8>)
 800131c:	701a      	strb	r2, [r3, #0]
	SCD_Fault = ((0x8 & RX_data[1])>>3);
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	08db      	lsrs	r3, r3, #3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <BQ769x2_ReadSafetyStatus+0xbc>)
 800132e:	701a      	strb	r2, [r3, #0]
	OCD_Fault = ((0x2 & RX_data[1])>>1);
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <BQ769x2_ReadSafetyStatus+0xc0>)
 8001340:	701a      	strb	r2, [r3, #0]
	DirectCommands(SafetyStatusB, 0x00, R);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2005      	movs	r0, #5
 8001348:	f7ff fefe 	bl	8001148 <DirectCommands>
	value_SafetyStatusB = (RX_data[1]*256 + RX_data[0]);
 800134c:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <BQ769x2_ReadSafetyStatus+0xc4>)
 8001352:	701a      	strb	r2, [r3, #0]
	DirectCommands(SafetyStatusC, 0x00, R);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2007      	movs	r0, #7
 800135a:	f7ff fef5 	bl	8001148 <DirectCommands>
	value_SafetyStatusC = (RX_data[1]*256 + RX_data[0]);
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <BQ769x2_ReadSafetyStatus+0xac>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <BQ769x2_ReadSafetyStatus+0xc8>)
 8001364:	701a      	strb	r2, [r3, #0]
	if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1) {
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <BQ769x2_ReadSafetyStatus+0xb0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <BQ769x2_ReadSafetyStatus+0xc4>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4413      	add	r3, r2
 8001372:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <BQ769x2_ReadSafetyStatus+0xc8>)
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	4413      	add	r3, r2
 8001378:	2b01      	cmp	r3, #1
 800137a:	dd03      	ble.n	8001384 <BQ769x2_ReadSafetyStatus+0xa0>
		ProtectionsTriggered = 1; }
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <BQ769x2_ReadSafetyStatus+0xcc>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
	else {
		ProtectionsTriggered = 0; }
}
 8001382:	e002      	b.n	800138a <BQ769x2_ReadSafetyStatus+0xa6>
		ProtectionsTriggered = 0; }
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <BQ769x2_ReadSafetyStatus+0xcc>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000ec 	.word	0x200000ec
 8001394:	20000146 	.word	0x20000146
 8001398:	20000149 	.word	0x20000149
 800139c:	2000014a 	.word	0x2000014a
 80013a0:	2000014b 	.word	0x2000014b
 80013a4:	2000014c 	.word	0x2000014c
 80013a8:	20000147 	.word	0x20000147
 80013ac:	20000148 	.word	0x20000148
 80013b0:	2000014d 	.word	0x2000014d

080013b4 <BQ769x2_ReadVoltage>:
// ********************************* BQ769x2 Measurement Commands   *****************************************


uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	//RX_data is global var
	DirectCommands(command, 0x00, R);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff febf 	bl	8001148 <DirectCommands>
	if(command >= Cell1Voltage && command <= Cell16Voltage) {//Cells 1 through 16 (0x14 to 0x32)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b13      	cmp	r3, #19
 80013ce:	d90b      	bls.n	80013e8 <BQ769x2_ReadVoltage+0x34>
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b32      	cmp	r3, #50	@ 0x32
 80013d4:	d808      	bhi.n	80013e8 <BQ769x2_ReadVoltage+0x34>
		return (RX_data[1]*256 + RX_data[0]); //voltage is reported in mV
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <BQ769x2_ReadVoltage+0x54>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <BQ769x2_ReadVoltage+0x54>)
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	e00b      	b.n	8001400 <BQ769x2_ReadVoltage+0x4c>
	}
	else {//stack, Pack, LD
		return 10 * (RX_data[1]*256 + RX_data[0]); //voltage is reported in 0.01V units
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <BQ769x2_ReadVoltage+0x54>)
 80013ea:	785b      	ldrb	r3, [r3, #1]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <BQ769x2_ReadVoltage+0x54>)
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	b29b      	uxth	r3, r3
	}

}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000ec 	.word	0x200000ec

0800140c <BQ769x2_ReadAllVoltages>:
	value_PFStatusC = (RX_data[1]*256 + RX_data[0]);
}

void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  int cellvoltageholder = Cell1Voltage; //Cell1Voltage is 0x14
 8001412:	2314      	movs	r3, #20
 8001414:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	e010      	b.n	800143e <BQ769x2_ReadAllVoltages+0x32>
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ffc7 	bl	80013b4 <BQ769x2_ReadVoltage>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <BQ769x2_ReadAllVoltages+0x6c>)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3302      	adds	r3, #2
 8001436:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	ddeb      	ble.n	800141c <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 8001444:	2034      	movs	r0, #52	@ 0x34
 8001446:	f7ff ffb5 	bl	80013b4 <BQ769x2_ReadVoltage>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <BQ769x2_ReadAllVoltages+0x70>)
 8001450:	801a      	strh	r2, [r3, #0]
  Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 8001452:	2036      	movs	r0, #54	@ 0x36
 8001454:	f7ff ffae 	bl	80013b4 <BQ769x2_ReadVoltage>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <BQ769x2_ReadAllVoltages+0x74>)
 800145e:	801a      	strh	r2, [r3, #0]
  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 8001460:	2038      	movs	r0, #56	@ 0x38
 8001462:	f7ff ffa7 	bl	80013b4 <BQ769x2_ReadVoltage>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <BQ769x2_ReadAllVoltages+0x78>)
 800146c:	801a      	strh	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000110 	.word	0x20000110
 800147c:	2000013c 	.word	0x2000013c
 8001480:	2000013e 	.word	0x2000013e
 8001484:	20000140 	.word	0x20000140

08001488 <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	DirectCommands(CC2Current, 0x00, R);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	203a      	movs	r0, #58	@ 0x3a
 8001492:	f7ff fe59 	bl	8001148 <DirectCommands>
	return (RX_data[1]*256 + RX_data[0]);  // current is reported in mA
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <BQ769x2_ReadCurrent+0x24>)
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b29b      	uxth	r3, r3
 800149e:	4a03      	ldr	r2, [pc, #12]	@ (80014ac <BQ769x2_ReadCurrent+0x24>)
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	b29b      	uxth	r3, r3
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000ec 	.word	0x200000ec

080014b0 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	DirectCommands(command, 0x00, R);
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fe41 	bl	8001148 <DirectCommands>
	//RX_data is a global var
	return (0.1 * (float)(RX_data[1]*256 + RX_data[0])) - 273.15;  // converts from 0.1K to Celcius
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <BQ769x2_ReadTemperature+0x80>)
 80014c8:	785b      	ldrb	r3, [r3, #1]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <BQ769x2_ReadTemperature+0x80>)
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014da:	ee17 0a90 	vmov	r0, s15
 80014de:	f7ff f921 	bl	8000724 <__aeabi_f2d>
 80014e2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001520 <BQ769x2_ReadTemperature+0x70>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7fe fe8e 	bl	8000208 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	a30c      	add	r3, pc, #48	@ (adr r3, 8001528 <BQ769x2_ReadTemperature+0x78>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffb3 	bl	8000464 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff f9ed 	bl	80008e4 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w
 8001520:	9999999a 	.word	0x9999999a
 8001524:	3fb99999 	.word	0x3fb99999
 8001528:	66666666 	.word	0x66666666
 800152c:	40711266 	.word	0x40711266
 8001530:	200000ec 	.word	0x200000ec

08001534 <BQ769x2_ReadPassQ>:

float BQ769x2_ReadPassQ(){ // Read Accumulated Charge and Time from DASTATUS6
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

		Subcommands(DASTATUS6, 0x00, R);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2076      	movs	r0, #118	@ 0x76
 8001540:	f7ff fd62 	bl	8001008 <Subcommands>

		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 8001544:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	061a      	lsls	r2, r3, #24
 800154a:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	041b      	lsls	r3, r3, #16
 8001550:	431a      	orrs	r2, r3
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 8001554:	785b      	ldrb	r3, [r3, #1]
 8001556:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 8001558:	4313      	orrs	r3, r2
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 800155a:	4a27      	ldr	r2, [pc, #156]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 800155c:	7812      	ldrb	r2, [r2, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	461a      	mov	r2, r3
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <BQ769x2_ReadPassQ+0xc8>)
 8001564:	601a      	str	r2, [r3, #0]
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 8001568:	79db      	ldrb	r3, [r3, #7]
 800156a:	061a      	lsls	r2, r3, #24
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 800157a:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 800157c:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 800157e:	7912      	ldrb	r2, [r2, #4]
 8001580:	4313      	orrs	r3, r2
 8001582:	461a      	mov	r2, r3
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 8001584:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <BQ769x2_ReadPassQ+0xcc>)
 8001586:	601a      	str	r2, [r3, #0]
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 800158a:	7adb      	ldrb	r3, [r3, #11]
 800158c:	061a      	lsls	r2, r3, #24
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 8001590:	7a9b      	ldrb	r3, [r3, #10]
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 8001596:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 8001598:	7a5b      	ldrb	r3, [r3, #9]
 800159a:	021b      	lsls	r3, r3, #8
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 800159c:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 800159e:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <BQ769x2_ReadPassQ+0xc4>)
 80015a0:	7a12      	ldrb	r2, [r2, #8]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	461a      	mov	r2, r3
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <BQ769x2_ReadPassQ+0xd0>)
 80015a8:	601a      	str	r2, [r3, #0]
//	    else{
//	    	charge = AccumulatedCharge_Int;
//	    }

	    //charge = 0xFFFFFFFF - AccumulatedCharge_Int;
	    float totalAccumulatedCharge_mAh = (float)AccumulatedCharge_Int + ((float)AccumulatedCharge_Frac / FRAC_DIVISOR);
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <BQ769x2_ReadPassQ+0xc8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <BQ769x2_ReadPassQ+0xcc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015c2:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8001608 <BQ769x2_ReadPassQ+0xd4>
 80015c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ce:	edc7 7a01 	vstr	s15, [r7, #4]
	    float totalAccumulatedCharge_Ah = totalAccumulatedCharge_mAh / 1000.0f;
 80015d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015d6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800160c <BQ769x2_ReadPassQ+0xd8>
 80015da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015de:	edc7 7a00 	vstr	s15, [r7]

	    coulumbs = totalAccumulatedCharge_mAh;
 80015e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <BQ769x2_ReadPassQ+0xdc>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6013      	str	r3, [r2, #0]
	    return totalAccumulatedCharge_Ah;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	ee07 3a90 	vmov	s15, r3
}
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000f0 	.word	0x200000f0
 80015fc:	20000150 	.word	0x20000150
 8001600:	20000154 	.word	0x20000154
 8001604:	20000158 	.word	0x20000158
 8001608:	4f800000 	.word	0x4f800000
 800160c:	447a0000 	.word	0x447a0000
 8001610:	20000160 	.word	0x20000160

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	@ 0x40
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fdab 	bl	8002174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f9e9 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 faa5 	bl	8001b70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001626:	f000 fa51 	bl	8001acc <MX_I2C1_Init>
  MX_TIM10_Init();
 800162a:	f000 fa7d 	bl	8001b28 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
//  uint16_t eeprom_address = 0x0010;
//  uint8_t eeprom_data = EEPROM_ReadByte(eeprom_address);
  HAL_TIM_Base_Start(&htim10);
 800162e:	48cb      	ldr	r0, [pc, #812]	@ (800195c <main+0x348>)
 8001630:	f003 ffb4 	bl	800559c <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_SET);  // RST_SHUT pin set low
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800163a:	48c9      	ldr	r0, [pc, #804]	@ (8001960 <main+0x34c>)
 800163c:	f001 f88e 	bl	800275c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001640:	200a      	movs	r0, #10
 8001642:	f000 fdd9 	bl	80021f8 <HAL_Delay>
  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_RESET);  // RST_SHUT pin set low
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164c:	48c4      	ldr	r0, [pc, #784]	@ (8001960 <main+0x34c>)
 800164e:	f001 f885 	bl	800275c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001652:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001656:	f000 fdcf 	bl	80021f8 <HAL_Delay>
//  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_SET);  // RST_SHUT pin set low
  HAL_GPIO_WritePin(DFETOFF_GPIO_Port, DFETOFF_Pin, GPIO_PIN_SET);  // DFETOFF pin (BOTHOFF) set low
 800165a:	2201      	movs	r2, #1
 800165c:	2101      	movs	r1, #1
 800165e:	48c0      	ldr	r0, [pc, #768]	@ (8001960 <main+0x34c>)
 8001660:	f001 f87c 	bl	800275c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CFETOFF_GPIO_Port, CFETOFF_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2102      	movs	r1, #2
 8001668:	48bd      	ldr	r0, [pc, #756]	@ (8001960 <main+0x34c>)
 800166a:	f001 f877 	bl	800275c <HAL_GPIO_WritePin>
  delayUS(10000);
 800166e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001672:	f7ff faff 	bl	8000c74 <delayUS>
  alarm = BQ769x2_ReadAlarmStatus();
 8001676:	f7ff fe21 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4bb9      	ldr	r3, [pc, #740]	@ (8001964 <main+0x350>)
 8001680:	801a      	strh	r2, [r3, #0]
  	//CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
  	//delayUS(60000);
  	CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
 8001682:	2012      	movs	r0, #18
 8001684:	f7ff fca2 	bl	8000fcc <CommandSubcommands>
  	delayUS(60000);
 8001688:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800168c:	f7ff faf2 	bl	8000c74 <delayUS>
  	BQ769x2_Init();  // Configure all of the BQ769x2 register settings
 8001690:	f7ff fd8e 	bl	80011b0 <BQ769x2_Init>
  	delayUS(12000);
 8001694:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8001698:	f7ff faec 	bl	8000c74 <delayUS>
  	CommandSubcommands(RESET_PASSQ);
 800169c:	2082      	movs	r0, #130	@ 0x82
 800169e:	f7ff fc95 	bl	8000fcc <CommandSubcommands>
  	//CommandSubcommands(DSG_PDSG_OFF);
  	alarm = BQ769x2_ReadAlarmStatus();
 80016a2:	f7ff fe0b 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4bae      	ldr	r3, [pc, #696]	@ (8001964 <main+0x350>)
 80016ac:	801a      	strh	r2, [r3, #0]
  	 DirectCommands(SafetyStatusA, 0x00, R);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2003      	movs	r0, #3
 80016b4:	f7ff fd48 	bl	8001148 <DirectCommands>
  		  DirectCommands(SafetyStatusB, 0x00, R);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2005      	movs	r0, #5
 80016be:	f7ff fd43 	bl	8001148 <DirectCommands>
  		  DirectCommands(SafetyStatusC, 0x00, R);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2007      	movs	r0, #7
 80016c8:	f7ff fd3e 	bl	8001148 <DirectCommands>
  		  DirectCommands(SafetyAlertA, 0x00, R);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2002      	movs	r0, #2
 80016d2:	f7ff fd39 	bl	8001148 <DirectCommands>
  		  DirectCommands(SafetyAlertB, 0x00, R);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2004      	movs	r0, #4
 80016dc:	f7ff fd34 	bl	8001148 <DirectCommands>
  		  DirectCommands(SafetyAlertC, 0x00, R);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2006      	movs	r0, #6
 80016e6:	f7ff fd2f 	bl	8001148 <DirectCommands>
//  	delayUS(12000);
//
//  	CommandSubcommands(EXIT_CFGUPDATE);
//  	CommandSubcommands(FET_ENABLE); // Enable the CHG and DSG FETs
//  	delayUS(12000);
  	CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 80016ea:	209a      	movs	r0, #154	@ 0x9a
 80016ec:	f7ff fc6e 	bl	8000fcc <CommandSubcommands>
  									   // demonstrate full-speed measurements in Normal mode.

  	delayUS(60000); delayUS(60000); delayUS(60000); delayUS(60000);  //wait to start measurements after FETs close
 80016f0:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80016f4:	f7ff fabe 	bl	8000c74 <delayUS>
 80016f8:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80016fc:	f7ff faba 	bl	8000c74 <delayUS>
 8001700:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001704:	f7ff fab6 	bl	8000c74 <delayUS>
 8001708:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800170c:	f7ff fab2 	bl	8000c74 <delayUS>

  	uint16_t manuStatus = BQ769x2_ReadRegister(MANUFACTURINGSTATUS);
 8001710:	2057      	movs	r0, #87	@ 0x57
 8001712:	f7ff fc0b 	bl	8000f2c <BQ769x2_ReadRegister>
 8001716:	4603      	mov	r3, r0
 8001718:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  	uint16_t manuInit = BQ769x2_ReadRegister(MfgStatusInit);
 800171a:	f249 3043 	movw	r0, #37699	@ 0x9343
 800171e:	f7ff fc05 	bl	8000f2c <BQ769x2_ReadRegister>
 8001722:	4603      	mov	r3, r0
 8001724:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  	uint16_t manuData = BQ769x2_ReadRegister(MANU_DATA);
 8001726:	2070      	movs	r0, #112	@ 0x70
 8001728:	f7ff fc00 	bl	8000f2c <BQ769x2_ReadRegister>
 800172c:	4603      	mov	r3, r0
 800172e:	877b      	strh	r3, [r7, #58]	@ 0x3a
  	uint16_t FET_options = BQ769x2_ReadRegister(FETOptions);
 8001730:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001734:	f7ff fbfa 	bl	8000f2c <BQ769x2_ReadRegister>
 8001738:	4603      	mov	r3, r0
 800173a:	873b      	strh	r3, [r7, #56]	@ 0x38
  	uint16_t DA_config = BQ769x2_ReadRegister(DAConfiguration);
 800173c:	f249 3003 	movw	r0, #37635	@ 0x9303
 8001740:	f7ff fbf4 	bl	8000f2c <BQ769x2_ReadRegister>
 8001744:	4603      	mov	r3, r0
 8001746:	86fb      	strh	r3, [r7, #54]	@ 0x36
  	alarm = BQ769x2_ReadAlarmStatus();
 8001748:	f7ff fdb8 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b84      	ldr	r3, [pc, #528]	@ (8001964 <main+0x350>)
 8001752:	801a      	strh	r2, [r3, #0]
////	CommandSubcommands(DSGTEST);
//	CommandSubcommands(SET_CFGUPDATE);

//	 uint16_t addr = BQ769x2_ReadRegister(I2CAddress);

  	BQ769x2_ReadAllVoltages();
 8001754:	f7ff fe5a 	bl	800140c <BQ769x2_ReadAllVoltages>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DirectCommands(SafetyStatusA, 0x00, R);
 8001758:	2200      	movs	r2, #0
 800175a:	2100      	movs	r1, #0
 800175c:	2003      	movs	r0, #3
 800175e:	f7ff fcf3 	bl	8001148 <DirectCommands>
	  DirectCommands(SafetyStatusB, 0x00, R);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2005      	movs	r0, #5
 8001768:	f7ff fcee 	bl	8001148 <DirectCommands>
	  DirectCommands(SafetyStatusC, 0x00, R);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2007      	movs	r0, #7
 8001772:	f7ff fce9 	bl	8001148 <DirectCommands>
	  DirectCommands(SafetyAlertA, 0x00, R);
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fce4 	bl	8001148 <DirectCommands>
	  DirectCommands(SafetyAlertB, 0x00, R);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	2004      	movs	r0, #4
 8001786:	f7ff fcdf 	bl	8001148 <DirectCommands>
	  DirectCommands(SafetyAlertC, 0x00, R);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2006      	movs	r0, #6
 8001790:	f7ff fcda 	bl	8001148 <DirectCommands>

	 //Subcommands(CB_ACTIVE_CELLS, 0x4000, W2);
	 //Subcommands(CB_ACTIVE_CELLS, 0x0000, R);

	  Subcommands(CBSTATUS1, 0x00, R);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2085      	movs	r0, #133	@ 0x85
 800179a:	f7ff fc35 	bl	8001008 <Subcommands>
	  Subcommands(CBSTATUS2, 0x00, R);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2086      	movs	r0, #134	@ 0x86
 80017a4:	f7ff fc30 	bl	8001008 <Subcommands>
	  Subcommands(CBSTATUS3, 0x00, R);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2087      	movs	r0, #135	@ 0x87
 80017ae:	f7ff fc2b 	bl	8001008 <Subcommands>

	  BQ769x2_ReadAllVoltages();
 80017b2:	f7ff fe2b 	bl	800140c <BQ769x2_ReadAllVoltages>
	  uint16_t stackVoltage = BQ769x2_ReadVoltage(StackVoltage);
 80017b6:	2034      	movs	r0, #52	@ 0x34
 80017b8:	f7ff fdfc 	bl	80013b4 <BQ769x2_ReadVoltage>
 80017bc:	4603      	mov	r3, r0
 80017be:	86bb      	strh	r3, [r7, #52]	@ 0x34
	  uint16_t packVoltage = BQ769x2_ReadVoltage(Pack_Voltage);
 80017c0:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <main+0x354>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fdf4 	bl	80013b4 <BQ769x2_ReadVoltage>
 80017cc:	4603      	mov	r3, r0
 80017ce:	867b      	strh	r3, [r7, #50]	@ 0x32
	  float ts1_temperature = BQ769x2_ReadTemperature(TS1Temperature);
 80017d0:	2070      	movs	r0, #112	@ 0x70
 80017d2:	f7ff fe6d 	bl	80014b0 <BQ769x2_ReadTemperature>
 80017d6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	  float ts2_temperature = BQ769x2_ReadTemperature(TS2Temperature);
 80017da:	2072      	movs	r0, #114	@ 0x72
 80017dc:	f7ff fe68 	bl	80014b0 <BQ769x2_ReadTemperature>
 80017e0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	  float ts3_temperature = BQ769x2_ReadTemperature(TS3Temperature);
 80017e4:	2074      	movs	r0, #116	@ 0x74
 80017e6:	f7ff fe63 	bl	80014b0 <BQ769x2_ReadTemperature>
 80017ea:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	  uint16_t current = BQ769x2_ReadCurrent();
 80017ee:	f7ff fe4b 	bl	8001488 <BQ769x2_ReadCurrent>
 80017f2:	4603      	mov	r3, r0
 80017f4:	847b      	strh	r3, [r7, #34]	@ 0x22
	  //float coulumbs = BQ769x2_ReadPassQ();


	  uint16_t cell1 = CellVoltage[0];
 80017f6:	4b5d      	ldr	r3, [pc, #372]	@ (800196c <main+0x358>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	843b      	strh	r3, [r7, #32]
	  uint16_t cell2 = CellVoltage[1];
 80017fc:	4b5b      	ldr	r3, [pc, #364]	@ (800196c <main+0x358>)
 80017fe:	885b      	ldrh	r3, [r3, #2]
 8001800:	83fb      	strh	r3, [r7, #30]
	  uint16_t cell3 = CellVoltage[2];
 8001802:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <main+0x358>)
 8001804:	889b      	ldrh	r3, [r3, #4]
 8001806:	83bb      	strh	r3, [r7, #28]
	  uint16_t cell4 = CellVoltage[3];
 8001808:	4b58      	ldr	r3, [pc, #352]	@ (800196c <main+0x358>)
 800180a:	88db      	ldrh	r3, [r3, #6]
 800180c:	837b      	strh	r3, [r7, #26]
	  uint16_t cell5 = CellVoltage[4];
 800180e:	4b57      	ldr	r3, [pc, #348]	@ (800196c <main+0x358>)
 8001810:	891b      	ldrh	r3, [r3, #8]
 8001812:	833b      	strh	r3, [r7, #24]
	  uint16_t cell6 = CellVoltage[5];
 8001814:	4b55      	ldr	r3, [pc, #340]	@ (800196c <main+0x358>)
 8001816:	895b      	ldrh	r3, [r3, #10]
 8001818:	82fb      	strh	r3, [r7, #22]
	  uint16_t cell16 = CellVoltage[15];
 800181a:	4b54      	ldr	r3, [pc, #336]	@ (800196c <main+0x358>)
 800181c:	8bdb      	ldrh	r3, [r3, #30]
 800181e:	82bb      	strh	r3, [r7, #20]

	  //get_initial_soc();
	 // while(1){

	 // }
	  	  float soc = soc_k_update_get(coulumbs);
 8001820:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <main+0x35c>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182a:	ee17 3a90 	vmov	r3, s15
 800182e:	b21b      	sxth	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fa55 	bl	8001ce0 <soc_k_update_get>
 8001836:	4603      	mov	r3, r0
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001840:	edc7 7a04 	vstr	s15, [r7, #16]
	  	  BQ769x2_ReadPassQ();
 8001844:	f7ff fe76 	bl	8001534 <BQ769x2_ReadPassQ>

	  	alarm = BQ769x2_ReadAlarmStatus();
 8001848:	f7ff fd38 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	4b44      	ldr	r3, [pc, #272]	@ (8001964 <main+0x350>)
 8001852:	801a      	strh	r2, [r3, #0]
	  	CommandSubcommands(ALERT_HI);
 8001854:	f642 0012 	movw	r0, #10258	@ 0x2812
 8001858:	f7ff fbb8 	bl	8000fcc <CommandSubcommands>

	  	DirectCommands(FETStatus, 0x00, R);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	207f      	movs	r0, #127	@ 0x7f
 8001862:	f7ff fc71 	bl	8001148 <DirectCommands>
	  	uint8_t status9 = RX_data[0];
 8001866:	4b43      	ldr	r3, [pc, #268]	@ (8001974 <main+0x360>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	73fb      	strb	r3, [r7, #15]
	  	uint8_t status10 = RX_data[1];
 800186c:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <main+0x360>)
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	73bb      	strb	r3, [r7, #14]

		DirectCommands(CCGain, 0x00, R);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	20a8      	movs	r0, #168	@ 0xa8
 8001878:	f7ff fc66 	bl	8001148 <DirectCommands>
		  	uint8_t reg0 = RX_data[0];
 800187c:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <main+0x360>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	737b      	strb	r3, [r7, #13]
		  	uint8_t reg1 = RX_data[1];
 8001882:	4b3c      	ldr	r3, [pc, #240]	@ (8001974 <main+0x360>)
 8001884:	785b      	ldrb	r3, [r3, #1]
 8001886:	733b      	strb	r3, [r7, #12]

//	  	CommandSubcommands(ALERT_LO);
//	  		status1 = RX_data[0];
//	  		status2 = RX_data[1];
		  	BQ769x2_ReadSafetyStatus();
 8001888:	f7ff fd2c 	bl	80012e4 <BQ769x2_ReadSafetyStatus>
		AlarmBits = BQ769x2_ReadAlarmStatus();
 800188c:	f7ff fd16 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <main+0x364>)
 8001896:	801a      	strh	r2, [r3, #0]
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(ALERT_PIN_2_GPIO_Port,ALERT_PIN_2_Pin);
 8001898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800189c:	4830      	ldr	r0, [pc, #192]	@ (8001960 <main+0x34c>)
 800189e:	f000 ff45 	bl	800272c <HAL_GPIO_ReadPin>
 80018a2:	4603      	mov	r3, r0
 80018a4:	72fb      	strb	r3, [r7, #11]
		if (AlarmBits & 0x80) {  // Check if FULLSCAN is complete. If set, new measurements are available
 80018a6:	4b34      	ldr	r3, [pc, #208]	@ (8001978 <main+0x364>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d027      	beq.n	8001902 <main+0x2ee>
    		BQ769x2_ReadAllVoltages();
 80018b2:	f7ff fdab 	bl	800140c <BQ769x2_ReadAllVoltages>
    		Pack_Current = BQ769x2_ReadCurrent();
 80018b6:	f7ff fde7 	bl	8001488 <BQ769x2_ReadCurrent>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461a      	mov	r2, r3
 80018be:	4b2f      	ldr	r3, [pc, #188]	@ (800197c <main+0x368>)
 80018c0:	801a      	strh	r2, [r3, #0]
    		Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 80018c2:	2070      	movs	r0, #112	@ 0x70
 80018c4:	f7ff fdf4 	bl	80014b0 <BQ769x2_ReadTemperature>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001980 <main+0x36c>)
 80018ce:	edc3 7a00 	vstr	s15, [r3]
    		Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 80018d2:	2074      	movs	r0, #116	@ 0x74
 80018d4:	f7ff fdec 	bl	80014b0 <BQ769x2_ReadTemperature>
 80018d8:	eef0 7a40 	vmov.f32	s15, s0
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <main+0x36c>)
 80018de:	edc3 7a01 	vstr	s15, [r3, #4]
			DirectCommands(AlarmStatus, 0x0080, W);  // Clear the FULLSCAN bit
 80018e2:	2201      	movs	r2, #1
 80018e4:	2180      	movs	r1, #128	@ 0x80
 80018e6:	2062      	movs	r0, #98	@ 0x62
 80018e8:	f7ff fc2e 	bl	8001148 <DirectCommands>
			alarm = BQ769x2_ReadAlarmStatus();
 80018ec:	f7ff fce6 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <main+0x350>)
 80018f6:	801a      	strh	r2, [r3, #0]
			//Subcommands(CB_ACTIVE_CELLS, 0x0004, W2);
			//Subcommands(CB_ACTIVE_CELLS, 0x8000, W2);
			Subcommands(CB_ACTIVE_CELLS, 0x0000, R);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2083      	movs	r0, #131	@ 0x83
 80018fe:	f7ff fb83 	bl	8001008 <Subcommands>
		}


		if (AlarmBits & 0xC000) {  // If Safety Status bits are showing in AlarmStatus register
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <main+0x364>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03c      	beq.n	8001988 <main+0x374>
			BQ769x2_ReadSafetyStatus(); // Read the Safety Status registers to find which protections have triggered
 800190e:	f7ff fce9 	bl	80012e4 <BQ769x2_ReadSafetyStatus>
			if (ProtectionsTriggered & 1) {
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <main+0x370>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <main+0x31c>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800191e:	2201      	movs	r2, #1
 8001920:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001924:	480e      	ldr	r0, [pc, #56]	@ (8001960 <main+0x34c>)
 8001926:	f000 ff19 	bl	800275c <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800192a:	2064      	movs	r0, #100	@ 0x64
 800192c:	f000 fc64 	bl	80021f8 <HAL_Delay>
				}
				DirectCommands(AlarmStatus, 0xF800, W); // Clear the Safety Status Alarm bits.
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001936:	2062      	movs	r0, #98	@ 0x62
 8001938:	f7ff fc06 	bl	8001148 <DirectCommands>
				CommandSubcommands(DSG_PDSG_OFF);
 800193c:	2093      	movs	r0, #147	@ 0x93
 800193e:	f7ff fb45 	bl	8000fcc <CommandSubcommands>
				alarm = BQ769x2_ReadAlarmStatus();
 8001942:	f7ff fcbb 	bl	80012bc <BQ769x2_ReadAlarmStatus>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <main+0x350>)
 800194c:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <main+0x34c>)
 8001956:	f000 ff01 	bl	800275c <HAL_GPIO_WritePin>
 800195a:	e01d      	b.n	8001998 <main+0x384>
 800195c:	200000a4 	.word	0x200000a4
 8001960:	40020800 	.word	0x40020800
 8001964:	2000015c 	.word	0x2000015c
 8001968:	2000013e 	.word	0x2000013e
 800196c:	20000110 	.word	0x20000110
 8001970:	20000160 	.word	0x20000160
 8001974:	200000ec 	.word	0x200000ec
 8001978:	20000144 	.word	0x20000144
 800197c:	20000142 	.word	0x20000142
 8001980:	20000130 	.word	0x20000130
 8001984:	2000014d 	.word	0x2000014d
			}
		else
		{
			//CommandSubcommands(ALL_FETS_ON);
			if (ProtectionsTriggered & 1) {
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <main+0x3d0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <main+0x384>
				BQ769x2_ReadSafetyStatus();
 8001994:	f7ff fca6 	bl	80012e4 <BQ769x2_ReadSafetyStatus>

				//CommandSubcommands(ALL_FETS_ON);
			} // Turn off the LED if Safety Status has cleared which means the protection condition is no longer present
		}

		buttonState = HAL_GPIO_ReadPin(ALERT_PIN_2_GPIO_Port,ALERT_PIN_2_Pin);
 8001998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199c:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <main+0x3d4>)
 800199e:	f000 fec5 	bl	800272c <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	72fb      	strb	r3, [r7, #11]
//			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//			HAL_Delay(100);
		} else {
		    // Button is not pressed
		}
		DirectCommands(AlarmEnable, 0x00, R);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2066      	movs	r0, #102	@ 0x66
 80019ac:	f7ff fbcc 	bl	8001148 <DirectCommands>
		uint8_t alarmEnable = RX_data[0];
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <main+0x3d8>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	72bb      	strb	r3, [r7, #10]
		uint8_t alarmEnable1 = RX_data[1];
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <main+0x3d8>)
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	727b      	strb	r3, [r7, #9]

		DirectCommands(AlarmStatus, 0x00, R);
 80019bc:	2200      	movs	r2, #0
 80019be:	2100      	movs	r1, #0
 80019c0:	2062      	movs	r0, #98	@ 0x62
 80019c2:	f7ff fbc1 	bl	8001148 <DirectCommands>
		uint8_t alarmstatus = RX_data[0];
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <main+0x3d8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	723b      	strb	r3, [r7, #8]
		uint8_t alarmStatus1 = RX_data[1];
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <main+0x3d8>)
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	71fb      	strb	r3, [r7, #7]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019d2:	2101      	movs	r1, #1
 80019d4:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <main+0x3dc>)
 80019d6:	f000 feda 	bl	800278e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80019da:	2064      	movs	r0, #100	@ 0x64
 80019dc:	f000 fc0c 	bl	80021f8 <HAL_Delay>
  {
 80019e0:	e6ba      	b.n	8001758 <main+0x144>
 80019e2:	bf00      	nop
 80019e4:	2000014d 	.word	0x2000014d
 80019e8:	40020800 	.word	0x40020800
 80019ec:	200000ec 	.word	0x200000ec
 80019f0:	40020400 	.word	0x40020400

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b094      	sub	sp, #80	@ 0x50
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	2234      	movs	r2, #52	@ 0x34
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f006 fc28 	bl	8008258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <SystemClock_Config+0xd0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <SystemClock_Config+0xd0>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a28:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <SystemClock_Config+0xd0>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a34:	2300      	movs	r3, #0
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <SystemClock_Config+0xd4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <SystemClock_Config+0xd4>)
 8001a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <SystemClock_Config+0xd4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a58:	2310      	movs	r3, #16
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a60:	2300      	movs	r3, #0
 8001a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a64:	2308      	movs	r3, #8
 8001a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 164;
 8001a68:	23a4      	movs	r3, #164	@ 0xa4
 8001a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f003 fa9f 	bl	8004fc0 <HAL_RCC_OscConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a88:	f000 f924 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a90:	2302      	movs	r3, #2
 8001a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a98:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f002 ff22 	bl	80048f4 <HAL_RCC_ClockConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ab6:	f000 f90d 	bl	8001cd4 <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3750      	adds	r7, #80	@ 0x50
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ad2:	4a13      	ldr	r2, [pc, #76]	@ (8001b20 <MX_I2C1_Init+0x54>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ad8:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <MX_I2C1_Init+0x58>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001aea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b08:	4804      	ldr	r0, [pc, #16]	@ (8001b1c <MX_I2C1_Init+0x50>)
 8001b0a:	f000 fe5b 	bl	80027c4 <HAL_I2C_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b14:	f000 f8de 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000050 	.word	0x20000050
 8001b20:	40005400 	.word	0x40005400
 8001b24:	000186a0 	.word	0x000186a0

08001b28 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <MX_TIM10_Init+0x44>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001b32:	4b0d      	ldr	r3, [pc, #52]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_TIM10_Init+0x40>)
 8001b54:	f003 fcd2 	bl	80054fc <HAL_TIM_Base_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001b5e:	f000 f8b9 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200000a4 	.word	0x200000a4
 8001b6c:	40014400 	.word	0x40014400

08001b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b46      	ldr	r3, [pc, #280]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a45      	ldr	r2, [pc, #276]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a37      	ldr	r2, [pc, #220]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a30      	ldr	r2, [pc, #192]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <MX_GPIO_Init+0x134>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DFETOFF_Pin|CFETOFF_Pin|PC7_Pin|RST_SHUT_Pin
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f640 2183 	movw	r1, #2691	@ 0xa83
 8001bfc:	482a      	ldr	r0, [pc, #168]	@ (8001ca8 <MX_GPIO_Init+0x138>)
 8001bfe:	f000 fdad 	bl	800275c <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2103      	movs	r1, #3
 8001c06:	4829      	ldr	r0, [pc, #164]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001c08:	f000 fda8 	bl	800275c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ALERT_PIN_2_Pin */
  GPIO_InitStruct.Pin = ALERT_PIN_2_Pin;
 8001c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c16:	2302      	movs	r3, #2
 8001c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_PIN_2_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4821      	ldr	r0, [pc, #132]	@ (8001ca8 <MX_GPIO_Init+0x138>)
 8001c22:	f000 fbef 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFETOFF_Pin PC7_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DFETOFF_Pin|PC7_Pin|BUZZER_Pin;
 8001c26:	f640 0381 	movw	r3, #2177	@ 0x881
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	481a      	ldr	r0, [pc, #104]	@ (8001ca8 <MX_GPIO_Init+0x138>)
 8001c40:	f000 fbe0 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : CFETOFF_Pin RST_SHUT_Pin */
  GPIO_InitStruct.Pin = CFETOFF_Pin|RST_SHUT_Pin;
 8001c44:	f240 2302 	movw	r3, #514	@ 0x202
 8001c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <MX_GPIO_Init+0x138>)
 8001c5e:	f000 fbd1 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0314 	add.w	r3, r7, #20
 8001c76:	4619      	mov	r1, r3
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001c7a:	f000 fbc3 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <MX_GPIO_Init+0x13c>)
 8001c96:	f000 fbb5 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	@ 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020400 	.word	0x40020400

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc2:	f000 fa79 	bl	80021b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001000 	.word	0x40001000

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <Error_Handler+0x8>

08001ce0 <soc_k_update_get>:
    soc_coulomb_count_init.coulomb_count = 0;
    //printf("Updated: dod before calculated as: %.2f%%\n", soc_coulomb_count_init.dod);
}

uint16_t soc_k_update_get(int16_t coulombs_count)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]

    // Calculate the delta DOD based on the given coulombs_count and the rated capacity
    soc_coulomb_count_init.delta_dod = (float)coulombs_count / (float)soc_coulomb_count_init.Q_rated * 100.0f;
 8001cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cf6:	4b56      	ldr	r3, [pc, #344]	@ (8001e50 <soc_k_update_get+0x170>)
 8001cf8:	8c1b      	ldrh	r3, [r3, #32]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d06:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001e54 <soc_k_update_get+0x174>
 8001d0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0e:	4b50      	ldr	r3, [pc, #320]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d10:	edc3 7a03 	vstr	s15, [r3, #12]
    // Update SOC based on the coulombs_count
    if (coulombs_count > 0)
 8001d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	dd20      	ble.n	8001d5e <soc_k_update_get+0x7e>
    {
        // Positive coulombs_count indicates charging, which increases SOC
        soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.charge_efficiency * soc_coulomb_count_init.delta_dod;
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d22:	4b4b      	ldr	r3, [pc, #300]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d24:	edd3 6a04 	vldr	s13, [r3, #16]
 8001d28:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d38:	edc3 7a07 	vstr	s15, [r3, #28]
        soc_coulomb_count_init.dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8001d3c:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d44:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d48:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	4b3e      	ldr	r3, [pc, #248]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d58:	edc3 7a02 	vstr	s15, [r3, #8]
 8001d5c:	e01f      	b.n	8001d9e <soc_k_update_get+0xbe>
    }
    else
    {
        // Negative coulombs_count indicates discharging, which decreases SOC
        soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d60:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d64:	4b3a      	ldr	r3, [pc, #232]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d66:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d6a:	4b39      	ldr	r3, [pc, #228]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d7a:	edc3 7a07 	vstr	s15, [r3, #28]
        soc_coulomb_count_init.dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8001d7e:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d80:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d84:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d86:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d8a:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <soc_k_update_get+0x170>)
 8001d9a:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    // Calculate the updated SOC
    soc_coulomb_count_init.soc = soc_coulomb_count_init.soh - soc_coulomb_count_init.cummulative_dod;
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <soc_k_update_get+0x170>)
 8001da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001da4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <soc_k_update_get+0x170>)
 8001da6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <soc_k_update_get+0x170>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
    soc_coulomb_count_init.soc = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.soc));
 8001db4:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <soc_k_update_get+0x170>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001e54 <soc_k_update_get+0x174>
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	f006 fac9 	bl	8008358 <fminf>
 8001dc6:	ee10 3a10 	vmov	r3, s0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fcaa 	bl	8000724 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001e48 <soc_k_update_get+0x168>
 8001dd8:	ec43 2b10 	vmov	d0, r2, r3
 8001ddc:	f006 fa68 	bl	80082b0 <fmax>
 8001de0:	ec53 2b10 	vmov	r2, r3, d0
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fd7c 	bl	80008e4 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <soc_k_update_get+0x170>)
 8001df0:	6013      	str	r3, [r2, #0]
    soc_coulomb_count_init.dod = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.dod));
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <soc_k_update_get+0x170>)
 8001df4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001df8:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001e54 <soc_k_update_get+0x174>
 8001dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001e00:	f006 faaa 	bl	8008358 <fminf>
 8001e04:	ee10 3a10 	vmov	r3, s0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fc8b 	bl	8000724 <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8001e48 <soc_k_update_get+0x168>
 8001e16:	ec43 2b10 	vmov	d0, r2, r3
 8001e1a:	f006 fa49 	bl	80082b0 <fmax>
 8001e1e:	ec53 2b10 	vmov	r2, r3, d0
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fd5d 	bl	80008e4 <__aeabi_d2f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <soc_k_update_get+0x170>)
 8001e2e:	6093      	str	r3, [r2, #8]
    //printf("Updated: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);
    //printf("Updated: dod calculated as: %.2f%%\n", soc_coulomb_count_init.dod);

    return (uint16_t)soc_coulomb_count_init.soc; // Return the updated SOC as an integer
 8001e30:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <soc_k_update_get+0x170>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3a:	ee17 3a90 	vmov	r3, s15
 8001e3e:	b29b      	uxth	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
	...
 8001e50:	20000028 	.word	0x20000028
 8001e54:	42c80000 	.word	0x42c80000

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a08      	ldr	r2, [pc, #32]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_MspInit+0x4c>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800

08001ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <HAL_I2C_MspInit+0x84>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12c      	bne.n	8001f24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_I2C_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a17      	ldr	r2, [pc, #92]	@ (8001f30 <HAL_I2C_MspInit+0x88>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_I2C_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ee6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eec:	2312      	movs	r3, #18
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	480c      	ldr	r0, [pc, #48]	@ (8001f34 <HAL_I2C_MspInit+0x8c>)
 8001f04:	f000 fa7e 	bl	8002404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_I2C_MspInit+0x88>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	4a07      	ldr	r2, [pc, #28]	@ (8001f30 <HAL_I2C_MspInit+0x88>)
 8001f12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_I2C_MspInit+0x88>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	@ 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400

08001f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	@ (8001f74 <HAL_TIM_Base_MspInit+0x3c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10d      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_TIM_Base_MspInit+0x40>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_TIM_Base_MspInit+0x40>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <HAL_TIM_Base_MspInit+0x40>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40014400 	.word	0x40014400
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	@ 0x38
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <HAL_InitTick+0xe4>)
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <HAL_InitTick+0xe4>)
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9c:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <HAL_InitTick+0xe4>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa8:	f107 0210 	add.w	r2, r7, #16
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fda4 	bl	8004b00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fc2:	f002 fd89 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8001fc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001fc8:	e004      	b.n	8001fd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fca:	f002 fd85 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd6:	4a23      	ldr	r2, [pc, #140]	@ (8002064 <HAL_InitTick+0xe8>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9b      	lsrs	r3, r3, #18
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_InitTick+0xec>)
 8001fe4:	4a21      	ldr	r2, [pc, #132]	@ (800206c <HAL_InitTick+0xf0>)
 8001fe6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8002068 <HAL_InitTick+0xec>)
 8001fea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8002068 <HAL_InitTick+0xec>)
 8001ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <HAL_InitTick+0xec>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_InitTick+0xec>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_InitTick+0xec>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002008:	4817      	ldr	r0, [pc, #92]	@ (8002068 <HAL_InitTick+0xec>)
 800200a:	f003 fa77 	bl	80054fc <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002014:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11b      	bne.n	8002054 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800201c:	4812      	ldr	r0, [pc, #72]	@ (8002068 <HAL_InitTick+0xec>)
 800201e:	f003 fb25 	bl	800566c <HAL_TIM_Base_Start_IT>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002028:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800202c:	2b00      	cmp	r3, #0
 800202e:	d111      	bne.n	8002054 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002030:	2036      	movs	r0, #54	@ 0x36
 8002032:	f000 f9d9 	bl	80023e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b0f      	cmp	r3, #15
 800203a:	d808      	bhi.n	800204e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800203c:	2200      	movs	r2, #0
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	2036      	movs	r0, #54	@ 0x36
 8002042:	f000 f9b5 	bl	80023b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_InitTick+0xf4>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e002      	b.n	8002054 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002054:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002058:	4618      	mov	r0, r3
 800205a:	3738      	adds	r7, #56	@ 0x38
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	431bde83 	.word	0x431bde83
 8002068:	20000164 	.word	0x20000164
 800206c:	40001000 	.word	0x40001000
 8002070:	20000004 	.word	0x20000004

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002078:	bf00      	nop
 800207a:	e7fd      	b.n	8002078 <NMI_Handler+0x4>

0800207c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <MemManage_Handler+0x4>

0800208c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <UsageFault_Handler+0x4>

0800209c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <TIM6_DAC_IRQHandler+0x10>)
 80020da:	f003 fb37 	bl	800574c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000164 	.word	0x20000164

080020e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <OTG_FS_IRQHandler+0x10>)
 80020ee:	f001 fb8d 	bl	800380c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200001b4 	.word	0x200001b4

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <SystemInit+0x20>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	4a05      	ldr	r2, [pc, #20]	@ (800211c <SystemInit+0x20>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002158 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002124:	f7ff ffea 	bl	80020fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800212a:	490d      	ldr	r1, [pc, #52]	@ (8002160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002140:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800214e:	f006 f88b 	bl	8008268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002152:	f7ff fa5f 	bl	8001614 <main>
  bx  lr    
 8002156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002164:	08008420 	.word	0x08008420
  ldr r2, =_sbss
 8002168:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800216c:	20000698 	.word	0x20000698

08002170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC_IRQHandler>
	...

08002174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	@ (80021b4 <HAL_Init+0x40>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <HAL_Init+0x40>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800218e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	@ (80021b4 <HAL_Init+0x40>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f8fc 	bl	800239a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f7ff feea 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fe56 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008
 80021dc:	200001ac 	.word	0x200001ac

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	200001ac 	.word	0x200001ac

080021f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002200:	f7ff ffee 	bl	80021e0 <HAL_GetTick>
 8002204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002210:	d005      	beq.n	800221e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <HAL_Delay+0x44>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221e:	bf00      	nop
 8002220:	f7ff ffde 	bl	80021e0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	429a      	cmp	r2, r3
 800222e:	d8f7      	bhi.n	8002220 <HAL_Delay+0x28>
  {
  }
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	@ (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	@ (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	@ (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	@ 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff4c 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c2:	f7ff ff61 	bl	8002288 <__NVIC_GetPriorityGrouping>
 80023c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	6978      	ldr	r0, [r7, #20]
 80023ce:	f7ff ffb1 	bl	8002334 <NVIC_EncodePriority>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff80 	bl	80022e0 <__NVIC_SetPriority>
}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff54 	bl	80022a4 <__NVIC_EnableIRQ>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e165      	b.n	80026ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8154 	bne.w	80026e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80ae 	beq.w	80026e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b5d      	ldr	r3, [pc, #372]	@ (8002704 <HAL_GPIO_Init+0x300>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <HAL_GPIO_Init+0x300>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b5a      	ldr	r3, [pc, #360]	@ (8002704 <HAL_GPIO_Init+0x300>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4f      	ldr	r2, [pc, #316]	@ (800270c <HAL_GPIO_Init+0x308>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002710 <HAL_GPIO_Init+0x30c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4d      	ldr	r2, [pc, #308]	@ (8002714 <HAL_GPIO_Init+0x310>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002718 <HAL_GPIO_Init+0x314>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4b      	ldr	r2, [pc, #300]	@ (800271c <HAL_GPIO_Init+0x318>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x20a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002720 <HAL_GPIO_Init+0x31c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x206>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a49      	ldr	r2, [pc, #292]	@ (8002724 <HAL_GPIO_Init+0x320>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x202>
 8002602:	2306      	movs	r3, #6
 8002604:	e00c      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002606:	2307      	movs	r3, #7
 8002608:	e00a      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800260a:	2305      	movs	r3, #5
 800260c:	e008      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800260e:	2304      	movs	r3, #4
 8002610:	e006      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002612:	2303      	movs	r3, #3
 8002614:	e004      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 8002616:	2302      	movs	r3, #2
 8002618:	e002      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_GPIO_Init+0x21c>
 800261e:	2300      	movs	r3, #0
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	f002 0203 	and.w	r2, r2, #3
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	4093      	lsls	r3, r2
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002630:	4935      	ldr	r1, [pc, #212]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263e:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <HAL_GPIO_Init+0x324>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002662:	4a31      	ldr	r2, [pc, #196]	@ (8002728 <HAL_GPIO_Init+0x324>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002668:	4b2f      	ldr	r3, [pc, #188]	@ (8002728 <HAL_GPIO_Init+0x324>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800268c:	4a26      	ldr	r2, [pc, #152]	@ (8002728 <HAL_GPIO_Init+0x324>)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002692:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_GPIO_Init+0x324>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e0:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <HAL_GPIO_Init+0x324>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3301      	adds	r3, #1
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2b0f      	cmp	r3, #15
 80026f0:	f67f ae96 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40023800 	.word	0x40023800
 8002708:	40013800 	.word	0x40013800
 800270c:	40020000 	.word	0x40020000
 8002710:	40020400 	.word	0x40020400
 8002714:	40020800 	.word	0x40020800
 8002718:	40020c00 	.word	0x40020c00
 800271c:	40021000 	.word	0x40021000
 8002720:	40021400 	.word	0x40021400
 8002724:	40021800 	.word	0x40021800
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e001      	b.n	800274e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800276c:	787b      	ldrb	r3, [r7, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002778:	e003      	b.n	8002782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277a:	887b      	ldrh	r3, [r7, #2]
 800277c:	041a      	lsls	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	619a      	str	r2, [r3, #24]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	041a      	lsls	r2, r3, #16
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	887b      	ldrh	r3, [r7, #2]
 80027ae:	400b      	ands	r3, r1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e12b      	b.n	8002a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fb5c 	bl	8001ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	@ 0x24
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002828:	f002 f956 	bl	8004ad8 <HAL_RCC_GetPCLK1Freq>
 800282c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4a81      	ldr	r2, [pc, #516]	@ (8002a38 <HAL_I2C_Init+0x274>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d807      	bhi.n	8002848 <HAL_I2C_Init+0x84>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a80      	ldr	r2, [pc, #512]	@ (8002a3c <HAL_I2C_Init+0x278>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e006      	b.n	8002856 <HAL_I2C_Init+0x92>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a40 <HAL_I2C_Init+0x27c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	bf94      	ite	ls
 8002850:	2301      	movls	r3, #1
 8002852:	2300      	movhi	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0e7      	b.n	8002a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a78      	ldr	r2, [pc, #480]	@ (8002a44 <HAL_I2C_Init+0x280>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a38 <HAL_I2C_Init+0x274>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d802      	bhi.n	8002898 <HAL_I2C_Init+0xd4>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3301      	adds	r3, #1
 8002896:	e009      	b.n	80028ac <HAL_I2C_Init+0xe8>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	4a69      	ldr	r2, [pc, #420]	@ (8002a48 <HAL_I2C_Init+0x284>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	3301      	adds	r3, #1
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	495c      	ldr	r1, [pc, #368]	@ (8002a38 <HAL_I2C_Init+0x274>)
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d819      	bhi.n	8002900 <HAL_I2C_Init+0x13c>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e59      	subs	r1, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028da:	1c59      	adds	r1, r3, #1
 80028dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028e0:	400b      	ands	r3, r1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_I2C_Init+0x138>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e59      	subs	r1, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	e051      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e04f      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <HAL_I2C_Init+0x168>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e012      	b.n	8002952 <HAL_I2C_Init+0x18e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x196>
 8002956:	2301      	movs	r3, #1
 8002958:	e022      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10e      	bne.n	8002980 <HAL_I2C_Init+0x1bc>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e58      	subs	r0, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	440b      	add	r3, r1
 8002970:	fbb0 f3f3 	udiv	r3, r0, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297e:	e00f      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e58      	subs	r0, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	6809      	ldr	r1, [r1, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6911      	ldr	r1, [r2, #16]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68d2      	ldr	r2, [r2, #12]
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	000186a0 	.word	0x000186a0
 8002a3c:	001e847f 	.word	0x001e847f
 8002a40:	003d08ff 	.word	0x003d08ff
 8002a44:	431bde83 	.word	0x431bde83
 8002a48:	10624dd3 	.word	0x10624dd3

08002a4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	813b      	strh	r3, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a66:	f7ff fbbb 	bl	80021e0 <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	f040 80d9 	bne.w	8002c2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2319      	movs	r3, #25
 8002a80:	2201      	movs	r2, #1
 8002a82:	496d      	ldr	r1, [pc, #436]	@ (8002c38 <HAL_I2C_Mem_Write+0x1ec>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc8b 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a90:	2302      	movs	r3, #2
 8002a92:	e0cc      	b.n	8002c2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2C_Mem_Write+0x56>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e0c5      	b.n	8002c2e <HAL_I2C_Mem_Write+0x1e2>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d007      	beq.n	8002ac8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2221      	movs	r2, #33	@ 0x21
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2240      	movs	r2, #64	@ 0x40
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a3a      	ldr	r2, [r7, #32]
 8002af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a4d      	ldr	r2, [pc, #308]	@ (8002c3c <HAL_I2C_Mem_Write+0x1f0>)
 8002b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b0a:	88f8      	ldrh	r0, [r7, #6]
 8002b0c:	893a      	ldrh	r2, [r7, #8]
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4603      	mov	r3, r0
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fac2 	bl	80030a4 <I2C_RequestMemoryWrite>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d052      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e081      	b.n	8002c2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fd50 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06b      	b.n	8002c2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d11b      	bne.n	8002bcc <HAL_I2C_Mem_Write+0x180>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d017      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1aa      	bne.n	8002b2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fd43 	bl	8003664 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d107      	bne.n	8002bfc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e016      	b.n	8002c2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	00100002 	.word	0x00100002
 8002c3c:	ffff0000 	.word	0xffff0000

08002c40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08c      	sub	sp, #48	@ 0x30
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	817b      	strh	r3, [r7, #10]
 8002c52:	460b      	mov	r3, r1
 8002c54:	813b      	strh	r3, [r7, #8]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c5a:	f7ff fac1 	bl	80021e0 <HAL_GetTick>
 8002c5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	f040 8214 	bne.w	8003096 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2319      	movs	r3, #25
 8002c74:	2201      	movs	r2, #1
 8002c76:	497b      	ldr	r1, [pc, #492]	@ (8002e64 <HAL_I2C_Mem_Read+0x224>)
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fb91 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	e207      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Mem_Read+0x56>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e200      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d007      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2222      	movs	r2, #34	@ 0x22
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2240      	movs	r2, #64	@ 0x40
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e68 <HAL_I2C_Mem_Read+0x228>)
 8002cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfe:	88f8      	ldrh	r0, [r7, #6]
 8002d00:	893a      	ldrh	r2, [r7, #8]
 8002d02:	8979      	ldrh	r1, [r7, #10]
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa5e 	bl	80031d0 <I2C_RequestMemoryRead>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e1bc      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d113      	bne.n	8002d4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e190      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d11b      	bne.n	8002d8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e170      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d11b      	bne.n	8002dce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	e150      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002de4:	e144      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	f200 80f1 	bhi.w	8002fd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d123      	bne.n	8002e40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fc79 	bl	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e145      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e3e:	e117      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d14e      	bne.n	8002ee6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4906      	ldr	r1, [pc, #24]	@ (8002e6c <HAL_I2C_Mem_Read+0x22c>)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 faa4 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e11a      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
 8002e62:	bf00      	nop
 8002e64:	00100002 	.word	0x00100002
 8002e68:	ffff0000 	.word	0xffff0000
 8002e6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ee4:	e0c4      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eec:	2200      	movs	r2, #0
 8002eee:	496c      	ldr	r1, [pc, #432]	@ (80030a0 <HAL_I2C_Mem_Read+0x460>)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fa55 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0cb      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4955      	ldr	r1, [pc, #340]	@ (80030a0 <HAL_I2C_Mem_Read+0x460>)
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fa27 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e09d      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fd0:	e04e      	b.n	8003070 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fb8c 	bl	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e058      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d124      	bne.n	8003070 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b03      	cmp	r3, #3
 800302c:	d107      	bne.n	800303e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800303c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f aeb6 	bne.w	8002de6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3728      	adds	r7, #40	@ 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00010004 	.word	0x00010004

080030a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f960 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f4:	d103      	bne.n	80030fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e05f      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003102:	897b      	ldrh	r3, [r7, #10]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	492d      	ldr	r1, [pc, #180]	@ (80031cc <I2C_RequestMemoryWrite+0x128>)
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f9bb 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e04c      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fa46 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00d      	beq.n	800316a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	2b04      	cmp	r3, #4
 8003154:	d107      	bne.n	8003166 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02b      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	e021      	b.n	80031c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800317c:	893b      	ldrh	r3, [r7, #8]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b29b      	uxth	r3, r3
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	6a39      	ldr	r1, [r7, #32]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fa20 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d107      	bne.n	80031b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e005      	b.n	80031c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	00010002 	.word	0x00010002

080031d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	460b      	mov	r3, r1
 80031e4:	813b      	strh	r3, [r7, #8]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2200      	movs	r2, #0
 8003212:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8c2 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003230:	d103      	bne.n	800323a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0aa      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800324c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	4952      	ldr	r1, [pc, #328]	@ (800339c <I2C_RequestMemoryRead+0x1cc>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f91d 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e097      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f9a8 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e076      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e021      	b.n	80032fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f982 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e050      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f967 	bl	80035d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	2b04      	cmp	r3, #4
 8003312:	d107      	bne.n	8003324 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e035      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	2200      	movs	r2, #0
 8003340:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f82b 	bl	80033a0 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800335e:	d103      	bne.n	8003368 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e013      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	4906      	ldr	r1, [pc, #24]	@ (800339c <I2C_RequestMemoryRead+0x1cc>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f886 	bl	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00010002 	.word	0x00010002

080033a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b0:	e048      	b.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b8:	d044      	beq.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7fe ff11 	bl	80021e0 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d139      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	e00c      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e023      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	0c1b      	lsrs	r3, r3, #16
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10d      	bne.n	800346a <I2C_WaitOnFlagUntilTimeout+0xca>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	43da      	mvns	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	e00c      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	43da      	mvns	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d093      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a2:	e071      	b.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d123      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e067      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003502:	d041      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fe6c 	bl	80021e0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d136      	bne.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10c      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e00b      	b.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e021      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d10c      	bne.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	43da      	mvns	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e00b      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af6d 	bne.w	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	e034      	b.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f8e3 	bl	80037ae <I2C_IsAcknowledgeFailed>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e034      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035f8:	d028      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7fe fdf1 	bl	80021e0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	d302      	bcc.n	8003610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d11d      	bne.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d016      	beq.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e007      	b.n	800365c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d1c3      	bne.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003670:	e034      	b.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f89b 	bl	80037ae <I2C_IsAcknowledgeFailed>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e034      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003688:	d028      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fe fda9 	bl	80021e0 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d11d      	bne.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d016      	beq.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	f043 0220 	orr.w	r2, r3, #32
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d1c3      	bne.n	8003672 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003700:	e049      	b.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	d119      	bne.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0210 	mvn.w	r2, #16
 8003718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e030      	b.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fd4c 	bl	80021e0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11d      	bne.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b40      	cmp	r3, #64	@ 0x40
 8003766:	d016      	beq.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	d1ae      	bne.n	8003702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d11b      	bne.n	80037fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0204 	orr.w	r2, r3, #4
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b08d      	sub	sp, #52	@ 0x34
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f003 f84f 	bl	80068c6 <USB_GetMode>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 84b9 	bne.w	80041a2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f002 ffb3 	bl	80067a0 <USB_ReadInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 84af 	beq.w	80041a0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f002 ffa0 	bl	80067a0 <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d107      	bne.n	800387a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f002 0202 	and.w	r2, r2, #2
 8003878:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f002 ff8e 	bl	80067a0 <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b10      	cmp	r3, #16
 800388c:	d161      	bne.n	8003952 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0210 	bic.w	r2, r2, #16
 800389c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 020f 	and.w	r2, r3, #15
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	3304      	adds	r3, #4
 80038bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	0c5b      	lsrs	r3, r3, #17
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d124      	bne.n	8003914 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d035      	beq.n	8003942 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6a38      	ldr	r0, [r7, #32]
 80038ea:	f002 fe07 	bl	80064fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fa:	441a      	add	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800390c:	441a      	add	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	615a      	str	r2, [r3, #20]
 8003912:	e016      	b.n	8003942 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	0c5b      	lsrs	r3, r3, #17
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	2b06      	cmp	r3, #6
 800391e:	d110      	bne.n	8003942 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003926:	2208      	movs	r2, #8
 8003928:	4619      	mov	r1, r3
 800392a:	6a38      	ldr	r0, [r7, #32]
 800392c:	f002 fde6 	bl	80064fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800393c:	441a      	add	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0210 	orr.w	r2, r2, #16
 8003950:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f002 ff22 	bl	80067a0 <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003962:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003966:	f040 80a7 	bne.w	8003ab8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f002 ff27 	bl	80067c6 <USB_ReadDevAllOutEpInterrupt>
 8003978:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800397a:	e099      	b.n	8003ab0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 808e 	beq.w	8003aa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f002 ff4b 	bl	800682e <USB_ReadDevOutEPInterrupt>
 8003998:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b0:	461a      	mov	r2, r3
 80039b2:	2301      	movs	r3, #1
 80039b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fe6d 	bl	8004698 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2308      	movs	r3, #8
 80039d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 ff43 	bl	8004868 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	2310      	movs	r3, #16
 80039fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d030      	beq.n	8003a6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a10:	2b80      	cmp	r3, #128	@ 0x80
 8003a12:	d109      	bne.n	8003a28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	78db      	ldrb	r3, [r3, #3]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d108      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f004 fa54 	bl	8007f00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	2302      	movs	r3, #2
 8003a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a80:	461a      	mov	r2, r3
 8003a82:	2320      	movs	r3, #32
 8003a84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f47f af62 	bne.w	800397c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 fe6f 	bl	80067a0 <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003acc:	f040 80db 	bne.w	8003c86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f002 fe90 	bl	80067fa <USB_ReadDevAllInEpInterrupt>
 8003ada:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003ae0:	e0cd      	b.n	8003c7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80c2 	beq.w	8003c72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f002 feb6 	bl	800686a <USB_ReadDevInEPInterrupt>
 8003afe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d057      	beq.n	8003bba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	2201      	movs	r2, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	799b      	ldrb	r3, [r3, #6]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d132      	bne.n	8003bae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3320      	adds	r3, #32
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4403      	add	r3, r0
 8003b68:	331c      	adds	r3, #28
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4419      	add	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4403      	add	r3, r0
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d113      	bne.n	8003bae <HAL_PCD_IRQHandler+0x3a2>
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3324      	adds	r3, #36	@ 0x24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d108      	bne.n	8003bae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	2101      	movs	r1, #1
 8003baa:	f002 febd 	bl	8006928 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f004 f91f 	bl	8007df8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bec:	461a      	mov	r2, r3
 8003bee:	2310      	movs	r3, #16
 8003bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2340      	movs	r3, #64	@ 0x40
 8003c0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d023      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c1a:	6a38      	ldr	r0, [r7, #32]
 8003c1c:	f002 f810 	bl	8005c40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	3310      	adds	r3, #16
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	78db      	ldrb	r3, [r3, #3]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d108      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f004 f96b 	bl	8007f24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fc86 	bl	800457e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	3301      	adds	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f47f af2e 	bne.w	8003ae2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f002 fd88 	bl	80067a0 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c9a:	d122      	bne.n	8003ce2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d108      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f004 fa4d 	bl	8008164 <HAL_PCDEx_LPM_Callback>
 8003cca:	e002      	b.n	8003cd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f004 f909 	bl	8007ee4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695a      	ldr	r2, [r3, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f002 fd5a 	bl	80067a0 <USB_ReadInterrupts>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf6:	d112      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f004 f8c5 	bl	8007e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d1c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 fd3c 	bl	80067a0 <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d32:	d121      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003d42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d111      	bne.n	8003d72 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	f003 020f 	and.w	r2, r3, #15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d68:	2101      	movs	r1, #1
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f004 f9fa 	bl	8008164 <HAL_PCDEx_LPM_Callback>
 8003d70:	e002      	b.n	8003d78 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f004 f890 	bl	8007e98 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 fd0f 	bl	80067a0 <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8c:	f040 80b7 	bne.w	8003efe <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2110      	movs	r1, #16
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 ff48 	bl	8005c40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db0:	2300      	movs	r3, #0
 8003db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db4:	e046      	b.n	8003e44 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	69fa      	ldr	r2, [r7, #28]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003de4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	69fa      	ldr	r2, [r7, #28]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003e3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e40:	3301      	adds	r3, #1
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d3b2      	bcc.n	8003db6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e5e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	7bdb      	ldrb	r3, [r3, #15]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d016      	beq.n	8003e9a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e7c:	f043 030b 	orr.w	r3, r3, #11
 8003e80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e92:	f043 030b 	orr.w	r3, r3, #11
 8003e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e98:	e015      	b.n	8003ec6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ea8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003eac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003eb0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec0:	f043 030b 	orr.w	r3, r3, #11
 8003ec4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ed4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003ed8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f002 fd1d 	bl	8006928 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f002 fc4c 	bl	80067a0 <USB_ReadInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f12:	d123      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 fce2 	bl	80068e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 febe 	bl	8005ca4 <USB_GetDevSpeed>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681c      	ldr	r4, [r3, #0]
 8003f34:	f000 fdc4 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8003f38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4620      	mov	r0, r4
 8003f42:	f001 fddb 	bl	8005afc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f003 ff7e 	bl	8007e48 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 fc1d 	bl	80067a0 <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d10a      	bne.n	8003f86 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f003 ff5b 	bl	8007e2c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f002 0208 	and.w	r2, r2, #8
 8003f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fc08 	bl	80067a0 <USB_ReadInterrupts>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b80      	cmp	r3, #128	@ 0x80
 8003f98:	d123      	bne.n	8003fe2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003faa:	e014      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d105      	bne.n	8003fd0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 faa6 	bl	800451c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	791b      	ldrb	r3, [r3, #4]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d3e4      	bcc.n	8003fac <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f002 fbda 	bl	80067a0 <USB_ReadInterrupts>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff6:	d13c      	bne.n	8004072 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffc:	e02b      	b.n	8004056 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3318      	adds	r3, #24
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d115      	bne.n	8004050 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004024:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004026:	2b00      	cmp	r3, #0
 8004028:	da12      	bge.n	8004050 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3317      	adds	r3, #23
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa66 	bl	800451c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	3301      	adds	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	791b      	ldrb	r3, [r3, #4]
 800405a:	461a      	mov	r2, r3
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	4293      	cmp	r3, r2
 8004060:	d3cd      	bcc.n	8003ffe <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f002 fb92 	bl	80067a0 <USB_ReadInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004086:	d156      	bne.n	8004136 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004088:	2301      	movs	r3, #1
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
 800408c:	e045      	b.n	800411a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d12e      	bne.n	8004114 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da2b      	bge.n	8004114 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80040c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d121      	bne.n	8004114 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800410c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004110:	6053      	str	r3, [r2, #4]
            break;
 8004112:	e008      	b.n	8004126 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	3301      	adds	r3, #1
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	791b      	ldrb	r3, [r3, #4]
 800411e:	461a      	mov	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	4293      	cmp	r3, r2
 8004124:	d3b3      	bcc.n	800408e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f002 fb30 	bl	80067a0 <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414a:	d10a      	bne.n	8004162 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f003 fefb 	bl	8007f48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f002 fb1a 	bl	80067a0 <USB_ReadInterrupts>
 800416c:	4603      	mov	r3, r0
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d115      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f003 feeb 	bl	8007f64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e000      	b.n	80041a2 <HAL_PCD_IRQHandler+0x996>
      return;
 80041a0:	bf00      	nop
    }
  }
}
 80041a2:	3734      	adds	r7, #52	@ 0x34
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd90      	pop	{r4, r7, pc}

080041a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_PCD_SetAddress+0x1a>
 80041be:	2302      	movs	r3, #2
 80041c0:	e012      	b.n	80041e8 <HAL_PCD_SetAddress+0x40>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f002 fabb 	bl	8006754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	4608      	mov	r0, r1
 80041fa:	4611      	mov	r1, r2
 80041fc:	461a      	mov	r2, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	70fb      	strb	r3, [r7, #3]
 8004202:	460b      	mov	r3, r1
 8004204:	803b      	strh	r3, [r7, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800420e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	da0f      	bge.n	8004236 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	f003 020f 	and.w	r2, r3, #15
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	3310      	adds	r3, #16
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	705a      	strb	r2, [r3, #1]
 8004234:	e00f      	b.n	8004256 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004262:	883a      	ldrh	r2, [r7, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	78ba      	ldrb	r2, [r7, #2]
 800426c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004280:	78bb      	ldrb	r3, [r7, #2]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d102      	bne.n	800428c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_PCD_EP_Open+0xaa>
 8004296:	2302      	movs	r3, #2
 8004298:	e00e      	b.n	80042b8 <HAL_PCD_EP_Open+0xc8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fd20 	bl	8005cee <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80042b6:	7afb      	ldrb	r3, [r7, #11]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	3304      	adds	r3, #4
 80042e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2200      	movs	r2, #0
 8004300:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	b2da      	uxtb	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	799b      	ldrb	r3, [r3, #6]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	799b      	ldrb	r3, [r3, #6]
 8004324:	461a      	mov	r2, r3
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	f001 fd68 	bl	8005dfc <USB_EPStartXfer>

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	460b      	mov	r3, r1
 8004344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	f003 020f 	and.w	r2, r3, #15
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	3310      	adds	r3, #16
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	3304      	adds	r3, #4
 800435c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2201      	movs	r2, #1
 8004374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	b2da      	uxtb	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	799b      	ldrb	r3, [r3, #6]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d102      	bne.n	8004390 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	799b      	ldrb	r3, [r3, #6]
 8004398:	461a      	mov	r2, r3
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	f001 fd2e 	bl	8005dfc <USB_EPStartXfer>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	7912      	ldrb	r2, [r2, #4]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e04f      	b.n	8004468 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da0f      	bge.n	80043f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	3310      	adds	r3, #16
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4413      	add	r3, r2
 80043e4:	3304      	adds	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	705a      	strb	r2, [r3, #1]
 80043ee:	e00d      	b.n	800440c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	3304      	adds	r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_PCD_EP_SetStall+0x82>
 8004428:	2302      	movs	r3, #2
 800442a:	e01d      	b.n	8004468 <HAL_PCD_EP_SetStall+0xbe>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	4618      	mov	r0, r3
 800443c:	f002 f8b6 	bl	80065ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	2b00      	cmp	r3, #0
 8004448:	d109      	bne.n	800445e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	7999      	ldrb	r1, [r3, #6]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004458:	461a      	mov	r2, r3
 800445a:	f002 fa65 	bl	8006928 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	7912      	ldrb	r2, [r2, #4]
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e042      	b.n	8004514 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800448e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da0f      	bge.n	80044b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	f003 020f 	and.w	r2, r3, #15
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	3310      	adds	r3, #16
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	3304      	adds	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	705a      	strb	r2, [r3, #1]
 80044b4:	e00f      	b.n	80044d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	3304      	adds	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_PCD_EP_ClrStall+0x86>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e00e      	b.n	8004514 <HAL_PCD_EP_ClrStall+0xa4>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	4618      	mov	r0, r3
 8004506:	f002 f8bf 	bl	8006688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452c:	2b00      	cmp	r3, #0
 800452e:	da0c      	bge.n	800454a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 020f 	and.w	r2, r3, #15
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	3310      	adds	r3, #16
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	3304      	adds	r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e00c      	b.n	8004564 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 020f 	and.w	r2, r3, #15
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fede 	bl	800632c <USB_EPStopXfer>
 8004570:	4603      	mov	r3, r0
 8004572:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004574:	7afb      	ldrb	r3, [r7, #11]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b08a      	sub	sp, #40	@ 0x28
 8004582:	af02      	add	r7, sp, #8
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	3310      	adds	r3, #16
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	4413      	add	r3, r2
 80045a2:	3304      	adds	r3, #4
 80045a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d901      	bls.n	80045b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06b      	b.n	800468e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d902      	bls.n	80045d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3303      	adds	r3, #3
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045da:	e02a      	b.n	8004632 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d902      	bls.n	80045f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	3303      	adds	r3, #3
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	b2da      	uxtb	r2, r3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	4603      	mov	r3, r0
 8004614:	6978      	ldr	r0, [r7, #20]
 8004616:	f001 ff33 	bl	8006480 <USB_WritePacket>

    ep->xfer_buff  += len;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	441a      	add	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	429a      	cmp	r2, r3
 8004646:	d809      	bhi.n	800465c <PCD_WriteEmptyTxFifo+0xde>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004650:	429a      	cmp	r2, r3
 8004652:	d203      	bcs.n	800465c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1bf      	bne.n	80045dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	d811      	bhi.n	800468c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	2201      	movs	r2, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800467c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	43db      	mvns	r3, r3
 8004682:	6939      	ldr	r1, [r7, #16]
 8004684:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004688:	4013      	ands	r3, r2
 800468a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	333c      	adds	r3, #60	@ 0x3c
 80046b0:	3304      	adds	r3, #4
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	799b      	ldrb	r3, [r3, #6]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d17b      	bne.n	80047c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0308 	and.w	r3, r3, #8
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4a61      	ldr	r2, [pc, #388]	@ (8004860 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	f240 80b9 	bls.w	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80b3 	beq.w	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fa:	461a      	mov	r2, r3
 80046fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004700:	6093      	str	r3, [r2, #8]
 8004702:	e0a7      	b.n	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471a:	461a      	mov	r2, r3
 800471c:	2320      	movs	r3, #32
 800471e:	6093      	str	r3, [r2, #8]
 8004720:	e098      	b.n	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 8093 	bne.w	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	4a4b      	ldr	r2, [pc, #300]	@ (8004860 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90f      	bls.n	8004756 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004752:	6093      	str	r3, [r2, #8]
 8004754:	e07e      	b.n	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	3304      	adds	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	0159      	lsls	r1, r3, #5
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	440b      	add	r3, r1
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d114      	bne.n	80047b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047a0:	461a      	mov	r2, r3
 80047a2:	2101      	movs	r1, #1
 80047a4:	f002 f8c0 	bl	8006928 <USB_EP0_OutStart>
 80047a8:	e006      	b.n	80047b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	441a      	add	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f003 faff 	bl	8007dc2 <HAL_PCD_DataOutStageCallback>
 80047c4:	e046      	b.n	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	4a26      	ldr	r2, [pc, #152]	@ (8004864 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d124      	bne.n	8004818 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	e032      	b.n	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	2320      	movs	r3, #32
 8004808:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f003 fad6 	bl	8007dc2 <HAL_PCD_DataOutStageCallback>
 8004816:	e01d      	b.n	8004854 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d114      	bne.n	8004848 <PCD_EP_OutXfrComplete_int+0x1b0>
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d108      	bne.n	8004848 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004840:	461a      	mov	r2, r3
 8004842:	2100      	movs	r1, #0
 8004844:	f002 f870 	bl	8006928 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f003 fab7 	bl	8007dc2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	4f54300a 	.word	0x4f54300a
 8004864:	4f54310a 	.word	0x4f54310a

08004868 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	333c      	adds	r3, #60	@ 0x3c
 8004880:	3304      	adds	r3, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d90e      	bls.n	80048bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048b4:	461a      	mov	r2, r3
 80048b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f003 fa6e 	bl	8007d9e <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	@ (80048f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d90c      	bls.n	80048e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	799b      	ldrb	r3, [r3, #6]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d108      	bne.n	80048e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048dc:	461a      	mov	r2, r3
 80048de:	2101      	movs	r1, #1
 80048e0:	f002 f822 	bl	8006928 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	4f54300a 	.word	0x4f54300a

080048f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0cc      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004908:	4b68      	ldr	r3, [pc, #416]	@ (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d90c      	bls.n	8004930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b65      	ldr	r3, [pc, #404]	@ (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b63      	ldr	r3, [pc, #396]	@ (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0b8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d020      	beq.n	800497e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4b59      	ldr	r3, [pc, #356]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a58      	ldr	r2, [pc, #352]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004960:	4b53      	ldr	r3, [pc, #332]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a52      	ldr	r2, [pc, #328]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800496a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800496c:	4b50      	ldr	r3, [pc, #320]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	494d      	ldr	r1, [pc, #308]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d044      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b47      	ldr	r3, [pc, #284]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d119      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e07f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e067      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d2:	4b37      	ldr	r3, [pc, #220]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 0203 	bic.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4934      	ldr	r1, [pc, #208]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e4:	f7fd fbfc 	bl	80021e0 <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ec:	f7fd fbf8 	bl	80021e0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e04f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 020c 	and.w	r2, r3, #12
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d1eb      	bne.n	80049ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a14:	4b25      	ldr	r3, [pc, #148]	@ (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20c      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e032      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b19      	ldr	r3, [pc, #100]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4916      	ldr	r1, [pc, #88]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a66:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	490e      	ldr	r1, [pc, #56]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a7a:	f000 f873 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	490a      	ldr	r1, [pc, #40]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	5ccb      	ldrb	r3, [r1, r3]
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	4a09      	ldr	r2, [pc, #36]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a96:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fd fa6e 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	080083f8 	.word	0x080083f8
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	20000004 	.word	0x20000004

08004ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000000 	.word	0x20000000

08004ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004adc:	f7ff fff0 	bl	8004ac0 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	@ (8004afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40023800 	.word	0x40023800
 8004afc:	08008408 	.word	0x08008408

08004b00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b10:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b28:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b34:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <HAL_RCC_GetClockConfig+0x5c>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	08db      	lsrs	r3, r3, #3
 8004b3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b42:	4b07      	ldr	r3, [pc, #28]	@ (8004b60 <HAL_RCC_GetClockConfig+0x60>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 020f 	and.w	r2, r3, #15
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40023c00 	.word	0x40023c00

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b68:	b0ae      	sub	sp, #184	@ 0xb8
 8004b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b8a:	4bcb      	ldr	r3, [pc, #812]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	f200 8204 	bhi.w	8004fa0 <HAL_RCC_GetSysClockFreq+0x43c>
 8004b98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bd5 	.word	0x08004bd5
 8004ba4:	08004fa1 	.word	0x08004fa1
 8004ba8:	08004fa1 	.word	0x08004fa1
 8004bac:	08004fa1 	.word	0x08004fa1
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004fa1 	.word	0x08004fa1
 8004bb8:	08004fa1 	.word	0x08004fa1
 8004bbc:	08004fa1 	.word	0x08004fa1
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004fa1 	.word	0x08004fa1
 8004bc8:	08004fa1 	.word	0x08004fa1
 8004bcc:	08004fa1 	.word	0x08004fa1
 8004bd0:	08004dd5 	.word	0x08004dd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4bb9      	ldr	r3, [pc, #740]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x358>)
 8004bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004bda:	e1e5      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bdc:	4bb7      	ldr	r3, [pc, #732]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x358>)
 8004bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004be2:	e1e1      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be4:	4bb4      	ldr	r3, [pc, #720]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf0:	4bb1      	ldr	r3, [pc, #708]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d071      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfc:	4bae      	ldr	r3, [pc, #696]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c08:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	f04f 0000 	mov.w	r0, #0
 8004c2a:	f04f 0100 	mov.w	r1, #0
 8004c2e:	0159      	lsls	r1, r3, #5
 8004c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c34:	0150      	lsls	r0, r2, #5
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	1a51      	subs	r1, r2, r1
 8004c3e:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c40:	4629      	mov	r1, r5
 8004c42:	eb63 0301 	sbc.w	r3, r3, r1
 8004c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c54:	4649      	mov	r1, r9
 8004c56:	018b      	lsls	r3, r1, #6
 8004c58:	4641      	mov	r1, r8
 8004c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c5e:	4641      	mov	r1, r8
 8004c60:	018a      	lsls	r2, r1, #6
 8004c62:	4641      	mov	r1, r8
 8004c64:	1a51      	subs	r1, r2, r1
 8004c66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c68:	4649      	mov	r1, r9
 8004c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4641      	mov	r1, r8
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4641      	mov	r1, r8
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4622      	mov	r2, r4
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c96:	462b      	mov	r3, r5
 8004c98:	460a      	mov	r2, r1
 8004c9a:	eb42 0303 	adc.w	r3, r2, r3
 8004c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cac:	4629      	mov	r1, r5
 8004cae:	028b      	lsls	r3, r1, #10
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	028a      	lsls	r2, r1, #10
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ccc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004cd0:	f7fb fe58 	bl	8000984 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4613      	mov	r3, r2
 8004cda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cde:	e067      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce0:	4b75      	ldr	r3, [pc, #468]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cfe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	f04f 0000 	mov.w	r0, #0
 8004d0a:	f04f 0100 	mov.w	r1, #0
 8004d0e:	0159      	lsls	r1, r3, #5
 8004d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d14:	0150      	lsls	r0, r2, #5
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	1a51      	subs	r1, r2, r1
 8004d1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d20:	4629      	mov	r1, r5
 8004d22:	eb63 0301 	sbc.w	r3, r3, r1
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d34:	4649      	mov	r1, r9
 8004d36:	018b      	lsls	r3, r1, #6
 8004d38:	4641      	mov	r1, r8
 8004d3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d3e:	4641      	mov	r1, r8
 8004d40:	018a      	lsls	r2, r1, #6
 8004d42:	4641      	mov	r1, r8
 8004d44:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d48:	4649      	mov	r1, r9
 8004d4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d62:	4692      	mov	sl, r2
 8004d64:	469b      	mov	fp, r3
 8004d66:	4623      	mov	r3, r4
 8004d68:	eb1a 0303 	adds.w	r3, sl, r3
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	462b      	mov	r3, r5
 8004d70:	eb4b 0303 	adc.w	r3, fp, r3
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d82:	4629      	mov	r1, r5
 8004d84:	028b      	lsls	r3, r1, #10
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	028a      	lsls	r2, r1, #10
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d98:	2200      	movs	r2, #0
 8004d9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d9c:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004da2:	f7fb fdef 	bl	8000984 <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4613      	mov	r3, r2
 8004dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db0:	4b41      	ldr	r3, [pc, #260]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004dd2:	e0e9      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd4:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de0:	4b35      	ldr	r3, [pc, #212]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d069      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dec:	4b32      	ldr	r3, [pc, #200]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	099b      	lsrs	r3, r3, #6
 8004df2:	2200      	movs	r2, #0
 8004df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004df6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e00:	2300      	movs	r3, #0
 8004e02:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e08:	4622      	mov	r2, r4
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	f04f 0000 	mov.w	r0, #0
 8004e10:	f04f 0100 	mov.w	r1, #0
 8004e14:	0159      	lsls	r1, r3, #5
 8004e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e1a:	0150      	lsls	r0, r2, #5
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4621      	mov	r1, r4
 8004e22:	1a51      	subs	r1, r2, r1
 8004e24:	61b9      	str	r1, [r7, #24]
 8004e26:	4629      	mov	r1, r5
 8004e28:	eb63 0301 	sbc.w	r3, r3, r1
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	f04f 0300 	mov.w	r3, #0
 8004e36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	018b      	lsls	r3, r1, #6
 8004e3e:	4651      	mov	r1, sl
 8004e40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e44:	4651      	mov	r1, sl
 8004e46:	018a      	lsls	r2, r1, #6
 8004e48:	4651      	mov	r1, sl
 8004e4a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e4e:	4659      	mov	r1, fp
 8004e50:	eb63 0901 	sbc.w	r9, r3, r1
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e68:	4690      	mov	r8, r2
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	4623      	mov	r3, r4
 8004e6e:	eb18 0303 	adds.w	r3, r8, r3
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	462b      	mov	r3, r5
 8004e76:	eb49 0303 	adc.w	r3, r9, r3
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e88:	4629      	mov	r1, r5
 8004e8a:	028b      	lsls	r3, r1, #10
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e92:	4621      	mov	r1, r4
 8004e94:	028a      	lsls	r2, r1, #10
 8004e96:	4610      	mov	r0, r2
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ea2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004ea4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ea8:	f7fb fd6c 	bl	8000984 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eb6:	e063      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x41c>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x454>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	099b      	lsrs	r3, r3, #6
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	4611      	mov	r1, r2
 8004ecc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ed6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	f04f 0000 	mov.w	r0, #0
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	0159      	lsls	r1, r3, #5
 8004ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eec:	0150      	lsls	r0, r2, #5
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	1a51      	subs	r1, r2, r1
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	4649      	mov	r1, r9
 8004efa:	eb63 0301 	sbc.w	r3, r3, r1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	018b      	lsls	r3, r1, #6
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f16:	4651      	mov	r1, sl
 8004f18:	018a      	lsls	r2, r1, #6
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	1a54      	subs	r4, r2, r1
 8004f1e:	4659      	mov	r1, fp
 8004f20:	eb63 0501 	sbc.w	r5, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	00eb      	lsls	r3, r5, #3
 8004f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f32:	00e2      	lsls	r2, r4, #3
 8004f34:	4614      	mov	r4, r2
 8004f36:	461d      	mov	r5, r3
 8004f38:	4643      	mov	r3, r8
 8004f3a:	18e3      	adds	r3, r4, r3
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	464b      	mov	r3, r9
 8004f40:	eb45 0303 	adc.w	r3, r5, r3
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f52:	4629      	mov	r1, r5
 8004f54:	028b      	lsls	r3, r1, #10
 8004f56:	4621      	mov	r1, r4
 8004f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	028a      	lsls	r2, r1, #10
 8004f60:	4610      	mov	r0, r2
 8004f62:	4619      	mov	r1, r3
 8004f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f68:	2200      	movs	r2, #0
 8004f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f72:	f7fb fd07 	bl	8000984 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f80:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <HAL_RCC_GetSysClockFreq+0x454>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	0f1b      	lsrs	r3, r3, #28
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f9e:	e003      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x458>)
 8004fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	37b8      	adds	r7, #184	@ 0xb8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	00f42400 	.word	0x00f42400

08004fc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e28d      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8083 	beq.w	80050e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fe0:	4b94      	ldr	r3, [pc, #592]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d019      	beq.n	8005020 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fec:	4b91      	ldr	r3, [pc, #580]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005004:	d00c      	beq.n	8005020 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005006:	4b8b      	ldr	r3, [pc, #556]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d112      	bne.n	8005038 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005012:	4b88      	ldr	r3, [pc, #544]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800501a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501e:	d10b      	bne.n	8005038 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005020:	4b84      	ldr	r3, [pc, #528]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05b      	beq.n	80050e4 <HAL_RCC_OscConfig+0x124>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d157      	bne.n	80050e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e25a      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005040:	d106      	bne.n	8005050 <HAL_RCC_OscConfig+0x90>
 8005042:	4b7c      	ldr	r3, [pc, #496]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7b      	ldr	r2, [pc, #492]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e01d      	b.n	800508c <HAL_RCC_OscConfig+0xcc>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005058:	d10c      	bne.n	8005074 <HAL_RCC_OscConfig+0xb4>
 800505a:	4b76      	ldr	r3, [pc, #472]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a75      	ldr	r2, [pc, #468]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	4b73      	ldr	r3, [pc, #460]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a72      	ldr	r2, [pc, #456]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e00b      	b.n	800508c <HAL_RCC_OscConfig+0xcc>
 8005074:	4b6f      	ldr	r3, [pc, #444]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a6e      	ldr	r2, [pc, #440]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 800507a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b6c      	ldr	r3, [pc, #432]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6b      	ldr	r2, [pc, #428]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800508a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d013      	beq.n	80050bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd f8a4 	bl	80021e0 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800509c:	f7fd f8a0 	bl	80021e0 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b64      	cmp	r3, #100	@ 0x64
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e21f      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	4b61      	ldr	r3, [pc, #388]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0xdc>
 80050ba:	e014      	b.n	80050e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd f890 	bl	80021e0 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c4:	f7fd f88c 	bl	80021e0 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	@ 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e20b      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	4b57      	ldr	r3, [pc, #348]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x104>
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d06f      	beq.n	80051d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050f2:	4b50      	ldr	r3, [pc, #320]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 030c 	and.w	r3, r3, #12
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d017      	beq.n	800512e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050fe:	4b4d      	ldr	r3, [pc, #308]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005106:	2b08      	cmp	r3, #8
 8005108:	d105      	bne.n	8005116 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800510a:	4b4a      	ldr	r3, [pc, #296]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005116:	4b47      	ldr	r3, [pc, #284]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800511e:	2b0c      	cmp	r3, #12
 8005120:	d11c      	bne.n	800515c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005122:	4b44      	ldr	r3, [pc, #272]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d116      	bne.n	800515c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	4b41      	ldr	r3, [pc, #260]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_RCC_OscConfig+0x186>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1d3      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005146:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4937      	ldr	r1, [pc, #220]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005156:	4313      	orrs	r3, r2
 8005158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	e03a      	b.n	80051d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005164:	4b34      	ldr	r3, [pc, #208]	@ (8005238 <HAL_RCC_OscConfig+0x278>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7fd f839 	bl	80021e0 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005172:	f7fd f835 	bl	80021e0 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e1b4      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005184:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005190:	4b28      	ldr	r3, [pc, #160]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4925      	ldr	r1, [pc, #148]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]
 80051a4:	e015      	b.n	80051d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a6:	4b24      	ldr	r3, [pc, #144]	@ (8005238 <HAL_RCC_OscConfig+0x278>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fd f818 	bl	80021e0 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b4:	f7fd f814 	bl	80021e0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e193      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d036      	beq.n	800524c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d016      	beq.n	8005214 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <HAL_RCC_OscConfig+0x27c>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fc fff8 	bl	80021e0 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fc fff4 	bl	80021e0 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e173      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <HAL_RCC_OscConfig+0x274>)
 8005208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x234>
 8005212:	e01b      	b.n	800524c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_RCC_OscConfig+0x27c>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fc ffe1 	bl	80021e0 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005220:	e00e      	b.n	8005240 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005222:	f7fc ffdd 	bl	80021e0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d907      	bls.n	8005240 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e15c      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
 8005234:	40023800 	.word	0x40023800
 8005238:	42470000 	.word	0x42470000
 800523c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005240:	4b8a      	ldr	r3, [pc, #552]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1ea      	bne.n	8005222 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8097 	beq.w	8005388 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525e:	4b83      	ldr	r3, [pc, #524]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60bb      	str	r3, [r7, #8]
 800526e:	4b7f      	ldr	r3, [pc, #508]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	4a7e      	ldr	r2, [pc, #504]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005278:	6413      	str	r3, [r2, #64]	@ 0x40
 800527a:	4b7c      	ldr	r3, [pc, #496]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b79      	ldr	r3, [pc, #484]	@ (8005470 <HAL_RCC_OscConfig+0x4b0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <HAL_RCC_OscConfig+0x4b0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a75      	ldr	r2, [pc, #468]	@ (8005470 <HAL_RCC_OscConfig+0x4b0>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fc ff9d 	bl	80021e0 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fc ff99 	bl	80021e0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e118      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005470 <HAL_RCC_OscConfig+0x4b0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d106      	bne.n	80052de <HAL_RCC_OscConfig+0x31e>
 80052d0:	4b66      	ldr	r3, [pc, #408]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	4a65      	ldr	r2, [pc, #404]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6713      	str	r3, [r2, #112]	@ 0x70
 80052dc:	e01c      	b.n	8005318 <HAL_RCC_OscConfig+0x358>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	d10c      	bne.n	8005300 <HAL_RCC_OscConfig+0x340>
 80052e6:	4b61      	ldr	r3, [pc, #388]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	4a60      	ldr	r2, [pc, #384]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80052ec:	f043 0304 	orr.w	r3, r3, #4
 80052f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f2:	4b5e      	ldr	r3, [pc, #376]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	4a5d      	ldr	r2, [pc, #372]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fe:	e00b      	b.n	8005318 <HAL_RCC_OscConfig+0x358>
 8005300:	4b5a      	ldr	r3, [pc, #360]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005304:	4a59      	ldr	r2, [pc, #356]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	6713      	str	r3, [r2, #112]	@ 0x70
 800530c:	4b57      	ldr	r3, [pc, #348]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	4a56      	ldr	r2, [pc, #344]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005312:	f023 0304 	bic.w	r3, r3, #4
 8005316:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d015      	beq.n	800534c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fc ff5e 	bl	80021e0 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005326:	e00a      	b.n	800533e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fc ff5a 	bl	80021e0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e0d7      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	4b4b      	ldr	r3, [pc, #300]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0ee      	beq.n	8005328 <HAL_RCC_OscConfig+0x368>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fc ff48 	bl	80021e0 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005352:	e00a      	b.n	800536a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005354:	f7fc ff44 	bl	80021e0 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e0c1      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536a:	4b40      	ldr	r3, [pc, #256]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1ee      	bne.n	8005354 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d105      	bne.n	8005388 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800537c:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	4a3a      	ldr	r2, [pc, #232]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005386:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80ad 	beq.w	80054ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005392:	4b36      	ldr	r3, [pc, #216]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b08      	cmp	r3, #8
 800539c:	d060      	beq.n	8005460 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d145      	bne.n	8005432 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a6:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <HAL_RCC_OscConfig+0x4b4>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fc ff18 	bl	80021e0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b4:	f7fc ff14 	bl	80021e0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e093      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c6:	4b29      	ldr	r3, [pc, #164]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	3b01      	subs	r3, #1
 80053ec:	041b      	lsls	r3, r3, #16
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	071b      	lsls	r3, r3, #28
 80053fe:	491b      	ldr	r1, [pc, #108]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005400:	4313      	orrs	r3, r2
 8005402:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <HAL_RCC_OscConfig+0x4b4>)
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7fc fee9 	bl	80021e0 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005412:	f7fc fee5 	bl	80021e0 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e064      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x452>
 8005430:	e05c      	b.n	80054ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <HAL_RCC_OscConfig+0x4b4>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc fed2 	bl	80021e0 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005440:	f7fc fece 	bl	80021e0 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e04d      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <HAL_RCC_OscConfig+0x4ac>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x480>
 800545e:	e045      	b.n	80054ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e040      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
 800546c:	40023800 	.word	0x40023800
 8005470:	40007000 	.word	0x40007000
 8005474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005478:	4b1f      	ldr	r3, [pc, #124]	@ (80054f8 <HAL_RCC_OscConfig+0x538>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d030      	beq.n	80054e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005490:	429a      	cmp	r2, r3
 8005492:	d129      	bne.n	80054e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d122      	bne.n	80054e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d119      	bne.n	80054e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	3b01      	subs	r3, #1
 80054c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d10f      	bne.n	80054e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e041      	b.n	8005592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fc fd08 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f000 fa1e 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e046      	b.n	8005642 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a23      	ldr	r2, [pc, #140]	@ (8005650 <HAL_TIM_Base_Start+0xb4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	d01d      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <HAL_TIM_Base_Start+0xb8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1e      	ldr	r2, [pc, #120]	@ (8005658 <HAL_TIM_Base_Start+0xbc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <HAL_TIM_Base_Start+0xc0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005660 <HAL_TIM_Base_Start+0xc4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a19      	ldr	r2, [pc, #100]	@ (8005664 <HAL_TIM_Base_Start+0xc8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIM_Base_Start+0x70>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	@ (8005668 <HAL_TIM_Base_Start+0xcc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b06      	cmp	r3, #6
 800561c:	d010      	beq.n	8005640 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0201 	orr.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562e:	e007      	b.n	8005640 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40010400 	.word	0x40010400
 8005664:	40014000 	.word	0x40014000
 8005668:	40001800 	.word	0x40001800

0800566c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d001      	beq.n	8005684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e04e      	b.n	8005722 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a23      	ldr	r2, [pc, #140]	@ (8005730 <HAL_TIM_Base_Start_IT+0xc4>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d022      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ae:	d01d      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005734 <HAL_TIM_Base_Start_IT+0xc8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1e      	ldr	r2, [pc, #120]	@ (8005738 <HAL_TIM_Base_Start_IT+0xcc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d013      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1c      	ldr	r2, [pc, #112]	@ (800573c <HAL_TIM_Base_Start_IT+0xd0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005740 <HAL_TIM_Base_Start_IT+0xd4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	@ (8005744 <HAL_TIM_Base_Start_IT+0xd8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x80>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a18      	ldr	r2, [pc, #96]	@ (8005748 <HAL_TIM_Base_Start_IT+0xdc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d111      	bne.n	8005710 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b06      	cmp	r3, #6
 80056fc:	d010      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	e007      	b.n	8005720 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40010400 	.word	0x40010400
 8005744:	40014000 	.word	0x40014000
 8005748:	40001800 	.word	0x40001800

0800574c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d020      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0202 	mvn.w	r2, #2
 8005780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f8d2 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f8c4 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8d5 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0304 	and.w	r3, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d020      	beq.n	80057fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01b      	beq.n	80057fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0204 	mvn.w	r2, #4
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2202      	movs	r2, #2
 80057d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8ac 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f89e 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8af 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d020      	beq.n	8005848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0208 	mvn.w	r2, #8
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2204      	movs	r2, #4
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f886 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f878 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f889 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d020      	beq.n	8005894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0210 	mvn.w	r2, #16
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2208      	movs	r2, #8
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f860 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f852 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f863 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00c      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0201 	mvn.w	r2, #1
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fc f9fc 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f906 	bl	8005ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f834 	bl	8005968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d007      	beq.n	8005924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0220 	mvn.w	r2, #32
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8d8 	bl	8005ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a46      	ldr	r2, [pc, #280]	@ (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599a:	d00f      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a43      	ldr	r2, [pc, #268]	@ (8005aac <TIM_Base_SetConfig+0x130>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a42      	ldr	r2, [pc, #264]	@ (8005ab0 <TIM_Base_SetConfig+0x134>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a41      	ldr	r2, [pc, #260]	@ (8005ab4 <TIM_Base_SetConfig+0x138>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a40      	ldr	r2, [pc, #256]	@ (8005ab8 <TIM_Base_SetConfig+0x13c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d108      	bne.n	80059ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a35      	ldr	r2, [pc, #212]	@ (8005aa8 <TIM_Base_SetConfig+0x12c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d02b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059dc:	d027      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a32      	ldr	r2, [pc, #200]	@ (8005aac <TIM_Base_SetConfig+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d023      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a31      	ldr	r2, [pc, #196]	@ (8005ab0 <TIM_Base_SetConfig+0x134>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01f      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a30      	ldr	r2, [pc, #192]	@ (8005ab4 <TIM_Base_SetConfig+0x138>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ab8 <TIM_Base_SetConfig+0x13c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d017      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2e      	ldr	r2, [pc, #184]	@ (8005abc <TIM_Base_SetConfig+0x140>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac0 <TIM_Base_SetConfig+0x144>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac4 <TIM_Base_SetConfig+0x148>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a2b      	ldr	r2, [pc, #172]	@ (8005ac8 <TIM_Base_SetConfig+0x14c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2a      	ldr	r2, [pc, #168]	@ (8005acc <TIM_Base_SetConfig+0x150>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a29      	ldr	r2, [pc, #164]	@ (8005ad0 <TIM_Base_SetConfig+0x154>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d108      	bne.n	8005a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a10      	ldr	r2, [pc, #64]	@ (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <TIM_Base_SetConfig+0x13c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d103      	bne.n	8005a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f023 0201 	bic.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	611a      	str	r2, [r3, #16]
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40010400 	.word	0x40010400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	40001800 	.word	0x40001800
 8005acc:	40001c00 	.word	0x40001c00
 8005ad0:	40002000 	.word	0x40002000

08005ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d165      	bne.n	8005bdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4a41      	ldr	r2, [pc, #260]	@ (8005c18 <USB_SetTurnaroundTime+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d906      	bls.n	8005b26 <USB_SetTurnaroundTime+0x2a>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	@ (8005c1c <USB_SetTurnaroundTime+0x120>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d202      	bcs.n	8005b26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b20:	230f      	movs	r3, #15
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e062      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	@ (8005c1c <USB_SetTurnaroundTime+0x120>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d306      	bcc.n	8005b3c <USB_SetTurnaroundTime+0x40>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4a3b      	ldr	r2, [pc, #236]	@ (8005c20 <USB_SetTurnaroundTime+0x124>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d202      	bcs.n	8005b3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b36:	230e      	movs	r3, #14
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e057      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4a38      	ldr	r2, [pc, #224]	@ (8005c20 <USB_SetTurnaroundTime+0x124>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d306      	bcc.n	8005b52 <USB_SetTurnaroundTime+0x56>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4a37      	ldr	r2, [pc, #220]	@ (8005c24 <USB_SetTurnaroundTime+0x128>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d202      	bcs.n	8005b52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b4c:	230d      	movs	r3, #13
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e04c      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4a33      	ldr	r2, [pc, #204]	@ (8005c24 <USB_SetTurnaroundTime+0x128>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d306      	bcc.n	8005b68 <USB_SetTurnaroundTime+0x6c>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4a32      	ldr	r2, [pc, #200]	@ (8005c28 <USB_SetTurnaroundTime+0x12c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d802      	bhi.n	8005b68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b62:	230c      	movs	r3, #12
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e041      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c28 <USB_SetTurnaroundTime+0x12c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d906      	bls.n	8005b7e <USB_SetTurnaroundTime+0x82>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4a2e      	ldr	r2, [pc, #184]	@ (8005c2c <USB_SetTurnaroundTime+0x130>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d802      	bhi.n	8005b7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b78:	230b      	movs	r3, #11
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e036      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4a2a      	ldr	r2, [pc, #168]	@ (8005c2c <USB_SetTurnaroundTime+0x130>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d906      	bls.n	8005b94 <USB_SetTurnaroundTime+0x98>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4a29      	ldr	r2, [pc, #164]	@ (8005c30 <USB_SetTurnaroundTime+0x134>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d802      	bhi.n	8005b94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b8e:	230a      	movs	r3, #10
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e02b      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4a26      	ldr	r2, [pc, #152]	@ (8005c30 <USB_SetTurnaroundTime+0x134>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d906      	bls.n	8005baa <USB_SetTurnaroundTime+0xae>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4a25      	ldr	r2, [pc, #148]	@ (8005c34 <USB_SetTurnaroundTime+0x138>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d202      	bcs.n	8005baa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ba4:	2309      	movs	r3, #9
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e020      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4a21      	ldr	r2, [pc, #132]	@ (8005c34 <USB_SetTurnaroundTime+0x138>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d306      	bcc.n	8005bc0 <USB_SetTurnaroundTime+0xc4>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4a20      	ldr	r2, [pc, #128]	@ (8005c38 <USB_SetTurnaroundTime+0x13c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d802      	bhi.n	8005bc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bba:	2308      	movs	r3, #8
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e015      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <USB_SetTurnaroundTime+0x13c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d906      	bls.n	8005bd6 <USB_SetTurnaroundTime+0xda>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4a1c      	ldr	r2, [pc, #112]	@ (8005c3c <USB_SetTurnaroundTime+0x140>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d202      	bcs.n	8005bd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e00a      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005bd6:	2306      	movs	r3, #6
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e007      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005be2:	2309      	movs	r3, #9
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e001      	b.n	8005bec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005be8:	2309      	movs	r3, #9
 8005bea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	029b      	lsls	r3, r3, #10
 8005c00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	00d8acbf 	.word	0x00d8acbf
 8005c1c:	00e4e1c0 	.word	0x00e4e1c0
 8005c20:	00f42400 	.word	0x00f42400
 8005c24:	01067380 	.word	0x01067380
 8005c28:	011a499f 	.word	0x011a499f
 8005c2c:	01312cff 	.word	0x01312cff
 8005c30:	014ca43f 	.word	0x014ca43f
 8005c34:	016e3600 	.word	0x016e3600
 8005c38:	01a6ab1f 	.word	0x01a6ab1f
 8005c3c:	01e84800 	.word	0x01e84800

08005c40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c5a:	d901      	bls.n	8005c60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e01b      	b.n	8005c98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	daf2      	bge.n	8005c4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	019b      	lsls	r3, r3, #6
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c84:	d901      	bls.n	8005c8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e006      	b.n	8005c98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d0f0      	beq.n	8005c78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0306 	and.w	r3, r3, #6
 8005cbc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]
 8005cc8:	e00a      	b.n	8005ce0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d002      	beq.n	8005cd6 <USB_GetDevSpeed+0x32>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d102      	bne.n	8005cdc <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	75fb      	strb	r3, [r7, #23]
 8005cda:	e001      	b.n	8005ce0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005cdc:	230f      	movs	r3, #15
 8005cde:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d13a      	bne.n	8005d80 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d155      	bne.n	8005dee <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	791b      	ldrb	r3, [r3, #4]
 8005d5c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d5e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	059b      	lsls	r3, r3, #22
 8005d64:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d66:	4313      	orrs	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e036      	b.n	8005dee <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f303 	lsl.w	r3, r1, r3
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	68f9      	ldr	r1, [r7, #12]
 8005d9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d11a      	bne.n	8005dee <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	791b      	ldrb	r3, [r3, #4]
 8005dd2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dec:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08a      	sub	sp, #40	@ 0x28
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	f040 817a 	bne.w	8006112 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d132      	bne.n	8005e8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e84:	0cdb      	lsrs	r3, r3, #19
 8005e86:	04db      	lsls	r3, r3, #19
 8005e88:	6113      	str	r3, [r2, #16]
 8005e8a:	e092      	b.n	8005fb2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea6:	0cdb      	lsrs	r3, r3, #19
 8005ea8:	04db      	lsls	r3, r3, #19
 8005eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005eca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ece:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11a      	bne.n	8005f0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d903      	bls.n	8005eea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f08:	6113      	str	r3, [r2, #16]
 8005f0a:	e01b      	b.n	8005f44 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6919      	ldr	r1, [r3, #16]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	440b      	add	r3, r1
 8005f24:	1e59      	subs	r1, r3, #1
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f2e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f30:	4ba2      	ldr	r3, [pc, #648]	@ (80061bc <USB_EPStartXfer+0x3c0>)
 8005f32:	400b      	ands	r3, r1
 8005f34:	69b9      	ldr	r1, [r7, #24]
 8005f36:	0148      	lsls	r0, r1, #5
 8005f38:	69f9      	ldr	r1, [r7, #28]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f40:	4313      	orrs	r3, r2
 8005f42:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f5a:	69b9      	ldr	r1, [r7, #24]
 8005f5c:	0148      	lsls	r0, r1, #5
 8005f5e:	69f9      	ldr	r1, [r7, #28]
 8005f60:	4401      	add	r1, r0
 8005f62:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f66:	4313      	orrs	r3, r2
 8005f68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	791b      	ldrb	r3, [r3, #4]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d11f      	bne.n	8005fb2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f8c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005f90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d14b      	bne.n	8006050 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d128      	bne.n	800602e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d110      	bne.n	800600e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006006:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	e00f      	b.n	800602e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800602c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	440a      	add	r2, r1
 8006044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006048:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e165      	b.n	800631c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800606a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800606e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d015      	beq.n	80060a4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 814d 	beq.w	800631c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	2101      	movs	r1, #1
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	69f9      	ldr	r1, [r7, #28]
 800609a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800609e:	4313      	orrs	r3, r2
 80060a0:	634b      	str	r3, [r1, #52]	@ 0x34
 80060a2:	e13b      	b.n	800631c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d110      	bne.n	80060d6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e00f      	b.n	80060f6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	68d9      	ldr	r1, [r3, #12]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	b298      	uxth	r0, r3
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	4603      	mov	r3, r0
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f9b8 	bl	8006480 <USB_WritePacket>
 8006110:	e104      	b.n	800631c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	0151      	lsls	r1, r2, #5
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	440a      	add	r2, r1
 8006128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800612c:	0cdb      	lsrs	r3, r3, #19
 800612e:	04db      	lsls	r3, r3, #19
 8006130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800614c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006150:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006154:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d131      	bne.n	80061c0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618a:	69b9      	ldr	r1, [r7, #24]
 800618c:	0148      	lsls	r0, r1, #5
 800618e:	69f9      	ldr	r1, [r7, #28]
 8006190:	4401      	add	r1, r0
 8006192:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006196:	4313      	orrs	r3, r2
 8006198:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061b8:	6113      	str	r3, [r2, #16]
 80061ba:	e061      	b.n	8006280 <USB_EPStartXfer+0x484>
 80061bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d123      	bne.n	8006210 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061de:	69b9      	ldr	r1, [r7, #24]
 80061e0:	0148      	lsls	r0, r1, #5
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	4401      	add	r1, r0
 80061e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006208:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800620c:	6113      	str	r3, [r2, #16]
 800620e:	e037      	b.n	8006280 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4413      	add	r3, r2
 800621a:	1e5a      	subs	r2, r3, #1
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	8afa      	ldrh	r2, [r7, #22]
 800622c:	fb03 f202 	mul.w	r2, r3, r2
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	8afb      	ldrh	r3, [r7, #22]
 8006244:	04d9      	lsls	r1, r3, #19
 8006246:	4b38      	ldr	r3, [pc, #224]	@ (8006328 <USB_EPStartXfer+0x52c>)
 8006248:	400b      	ands	r3, r1
 800624a:	69b9      	ldr	r1, [r7, #24]
 800624c:	0148      	lsls	r0, r1, #5
 800624e:	69f9      	ldr	r1, [r7, #28]
 8006250:	4401      	add	r1, r0
 8006252:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006256:	4313      	orrs	r3, r2
 8006258:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006270:	69b9      	ldr	r1, [r7, #24]
 8006272:	0148      	lsls	r0, r1, #5
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	4401      	add	r1, r0
 8006278:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800627c:	4313      	orrs	r3, r2
 800627e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10d      	bne.n	80062a2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	68d9      	ldr	r1, [r3, #12]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629e:	460a      	mov	r2, r1
 80062a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d128      	bne.n	80062fc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d110      	bne.n	80062dc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e00f      	b.n	80062fc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006316:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800631a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3720      	adds	r7, #32
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	1ff80000 	.word	0x1ff80000

0800632c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d14a      	bne.n	80063e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800635e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006362:	f040 8086 	bne.w	8006472 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006384:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006388:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d902      	bls.n	80063c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
          break;
 80063c2:	e056      	b.n	8006472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063dc:	d0e7      	beq.n	80063ae <USB_EPStopXfer+0x82>
 80063de:	e048      	b.n	8006472 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063f8:	d13b      	bne.n	8006472 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	440a      	add	r2, r1
 8006414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006418:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800641c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	0151      	lsls	r1, r2, #5
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	440a      	add	r2, r1
 8006438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800643c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006440:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800644e:	4293      	cmp	r3, r2
 8006450:	d902      	bls.n	8006458 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
          break;
 8006456:	e00c      	b.n	8006472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800646c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006470:	d0e7      	beq.n	8006442 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
}
 8006474:	4618      	mov	r0, r3
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006480:	b480      	push	{r7}
 8006482:	b089      	sub	sp, #36	@ 0x24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	460b      	mov	r3, r1
 8006490:	71fb      	strb	r3, [r7, #7]
 8006492:	4613      	mov	r3, r2
 8006494:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800649e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d123      	bne.n	80064ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	3303      	adds	r3, #3
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e018      	b.n	80064e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	031a      	lsls	r2, r3, #12
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064c0:	461a      	mov	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	3301      	adds	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61bb      	str	r3, [r7, #24]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d3e2      	bcc.n	80064b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3724      	adds	r7, #36	@ 0x24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b08b      	sub	sp, #44	@ 0x2c
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	4613      	mov	r3, r2
 8006508:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	089b      	lsrs	r3, r3, #2
 8006516:	b29b      	uxth	r3, r3
 8006518:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	f003 0303 	and.w	r3, r3, #3
 8006520:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	e014      	b.n	8006552 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006532:	601a      	str	r2, [r3, #0]
    pDest++;
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	3301      	adds	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	3301      	adds	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	3301      	adds	r3, #1
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	3301      	adds	r3, #1
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	3301      	adds	r3, #1
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	6a3a      	ldr	r2, [r7, #32]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	429a      	cmp	r2, r3
 8006558:	d3e6      	bcc.n	8006528 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800655a:	8bfb      	ldrh	r3, [r7, #30]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01e      	beq.n	800659e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800656a:	461a      	mov	r2, r3
 800656c:	f107 0310 	add.w	r3, r7, #16
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	701a      	strb	r2, [r3, #0]
      i++;
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	3301      	adds	r3, #1
 800658a:	623b      	str	r3, [r7, #32]
      pDest++;
 800658c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658e:	3301      	adds	r3, #1
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006592:	8bfb      	ldrh	r3, [r7, #30]
 8006594:	3b01      	subs	r3, #1
 8006596:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006598:	8bfb      	ldrh	r3, [r7, #30]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ea      	bne.n	8006574 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	372c      	adds	r7, #44	@ 0x2c
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d12c      	bne.n	8006622 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	db12      	blt.n	8006600 <USB_EPSetStall+0x54>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00f      	beq.n	8006600 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	e02b      	b.n	800667a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db12      	blt.n	800665a <USB_EPSetStall+0xae>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00f      	beq.n	800665a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006658:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	440a      	add	r2, r1
 8006670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006678:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d128      	bne.n	80066f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	791b      	ldrb	r3, [r3, #4]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d003      	beq.n	80066d4 <USB_EPClearStall+0x4c>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	791b      	ldrb	r3, [r3, #4]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d138      	bne.n	8006746 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	e027      	b.n	8006746 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006710:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	2b03      	cmp	r3, #3
 800671c:	d003      	beq.n	8006726 <USB_EPClearStall+0x9e>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	791b      	ldrb	r3, [r3, #4]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d10f      	bne.n	8006746 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006744:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006772:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006776:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006788:	68f9      	ldr	r1, [r7, #12]
 800678a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4013      	ands	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b085      	sub	sp, #20
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0c1b      	lsrs	r3, r3, #16
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4013      	ands	r3, r2
 800681c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	b29b      	uxth	r3, r3
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800685c:	68bb      	ldr	r3, [r7, #8]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800686a:	b480      	push	{r7}
 800686c:	b087      	sub	sp, #28
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800688a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	fa22 f303 	lsr.w	r3, r2, r3
 800689a:	01db      	lsls	r3, r3, #7
 800689c:	b2db      	uxtb	r3, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068a4:	78fb      	ldrb	r3, [r7, #3]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4013      	ands	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068b8:	68bb      	ldr	r3, [r7, #8]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0301 	and.w	r3, r3, #1
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006900:	f023 0307 	bic.w	r3, r3, #7
 8006904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	460b      	mov	r3, r1
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	333c      	adds	r3, #60	@ 0x3c
 800693e:	3304      	adds	r3, #4
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4a26      	ldr	r2, [pc, #152]	@ (80069e0 <USB_EP0_OutStart+0xb8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d90a      	bls.n	8006962 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800695c:	d101      	bne.n	8006962 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e037      	b.n	80069d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006968:	461a      	mov	r2, r3
 800696a:	2300      	movs	r3, #0
 800696c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800697c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006990:	f043 0318 	orr.w	r3, r3, #24
 8006994:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80069a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10f      	bne.n	80069d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80069ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	4f54300a 	.word	0x4f54300a

080069e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4798      	blx	r3
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 f8e2 	bl	8007c42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d01a      	beq.n	8006ad8 <USBD_LL_SetupStage+0x72>
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d822      	bhi.n	8006aec <USBD_LL_SetupStage+0x86>
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <USBD_LL_SetupStage+0x4a>
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d00a      	beq.n	8006ac4 <USBD_LL_SetupStage+0x5e>
 8006aae:	e01d      	b.n	8006aec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fb0f 	bl	80070dc <USBD_StdDevReq>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac2:	e020      	b.n	8006b06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb77 	bl	80071c0 <USBD_StdItfReq>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad6:	e016      	b.n	8006b06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fbd9 	bl	8007298 <USBD_StdEPReq>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aea:	e00c      	b.n	8006b06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006af2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fa66 	bl	8007fcc <USBD_LL_StallEP>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
      break;
 8006b04:	bf00      	nop
  }

  return ret;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d16e      	bne.n	8006c06 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	f040 8098 	bne.w	8006c6c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d913      	bls.n	8006b70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	1ad2      	subs	r2, r2, r3
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	bf28      	it	cs
 8006b62:	4613      	movcs	r3, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f001 f8e1 	bl	8007d30 <USBD_CtlContinueRx>
 8006b6e:	e07d      	b.n	8006c6c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d014      	beq.n	8006ba8 <USBD_LL_DataOutStage+0x98>
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d81d      	bhi.n	8006bbe <USBD_LL_DataOutStage+0xae>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <USBD_LL_DataOutStage+0x7c>
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d003      	beq.n	8006b92 <USBD_LL_DataOutStage+0x82>
 8006b8a:	e018      	b.n	8006bbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b90:	e018      	b.n	8006bc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fa64 	bl	800706a <USBD_CoreFindIF>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ba6:	e00d      	b.n	8006bc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fa66 	bl	8007084 <USBD_CoreFindEP>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75bb      	strb	r3, [r7, #22]
            break;
 8006bbc:	e002      	b.n	8006bc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75bb      	strb	r3, [r7, #22]
            break;
 8006bc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bc4:	7dbb      	ldrb	r3, [r7, #22]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d119      	bne.n	8006bfe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d113      	bne.n	8006bfe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006bd6:	7dba      	ldrb	r2, [r7, #22]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	32ae      	adds	r2, #174	@ 0xae
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006be6:	7dba      	ldrb	r2, [r7, #22]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bee:	7dba      	ldrb	r2, [r7, #22]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	32ae      	adds	r2, #174	@ 0xae
 8006bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f001 f8a7 	bl	8007d52 <USBD_CtlSendStatus>
 8006c04:	e032      	b.n	8006c6c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fa37 	bl	8007084 <USBD_CoreFindEP>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c1a:	7dbb      	ldrb	r3, [r7, #22]
 8006c1c:	2bff      	cmp	r3, #255	@ 0xff
 8006c1e:	d025      	beq.n	8006c6c <USBD_LL_DataOutStage+0x15c>
 8006c20:	7dbb      	ldrb	r3, [r7, #22]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d122      	bne.n	8006c6c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d117      	bne.n	8006c62 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c32:	7dba      	ldrb	r2, [r7, #22]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	32ae      	adds	r2, #174	@ 0xae
 8006c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00f      	beq.n	8006c62 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c42:	7dba      	ldrb	r2, [r7, #22]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c4a:	7dba      	ldrb	r2, [r7, #22]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	32ae      	adds	r2, #174	@ 0xae
 8006c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	7afa      	ldrb	r2, [r7, #11]
 8006c58:	4611      	mov	r1, r2
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	4798      	blx	r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c62:	7dfb      	ldrb	r3, [r7, #23]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	e000      	b.n	8006c6e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b086      	sub	sp, #24
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	607a      	str	r2, [r7, #4]
 8006c82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d16f      	bne.n	8006d6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d15a      	bne.n	8006d50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d914      	bls.n	8006cd0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f001 f826 	bl	8007d0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f001 fa29 	bl	8008120 <USBD_LL_PrepareReceive>
 8006cce:	e03f      	b.n	8006d50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d11c      	bne.n	8006d16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d316      	bcc.n	8006d16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d20f      	bcs.n	8006d16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f001 f807 	bl	8007d0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 fa06 	bl	8008120 <USBD_LL_PrepareReceive>
 8006d14:	e01c      	b.n	8006d50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d10f      	bne.n	8006d42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d42:	2180      	movs	r1, #128	@ 0x80
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f001 f941 	bl	8007fcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f001 f814 	bl	8007d78 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d03a      	beq.n	8006dd0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff fe42 	bl	80069e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d68:	e032      	b.n	8006dd0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	4619      	mov	r1, r3
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f985 	bl	8007084 <USBD_CoreFindEP>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2bff      	cmp	r3, #255	@ 0xff
 8006d82:	d025      	beq.n	8006dd0 <USBD_LL_DataInStage+0x15a>
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d122      	bne.n	8006dd0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d11c      	bne.n	8006dd0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d96:	7dfa      	ldrb	r2, [r7, #23]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	32ae      	adds	r2, #174	@ 0xae
 8006d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d014      	beq.n	8006dd0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006da6:	7dfa      	ldrb	r2, [r7, #23]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dae:	7dfa      	ldrb	r2, [r7, #23]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	32ae      	adds	r2, #174	@ 0xae
 8006db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	7afa      	ldrb	r2, [r7, #11]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	4798      	blx	r3
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006dc6:	7dbb      	ldrb	r3, [r7, #22]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	e000      	b.n	8006dd2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b084      	sub	sp, #16
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d014      	beq.n	8006e40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6852      	ldr	r2, [r2, #4]
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	4611      	mov	r1, r2
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e40:	2340      	movs	r3, #64	@ 0x40
 8006e42:	2200      	movs	r2, #0
 8006e44:	2100      	movs	r1, #0
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f89a 	bl	8007f80 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2240      	movs	r2, #64	@ 0x40
 8006e58:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e5c:	2340      	movs	r3, #64	@ 0x40
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2180      	movs	r1, #128	@ 0x80
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f88c 	bl	8007f80 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2240      	movs	r2, #64	@ 0x40
 8006e72:	621a      	str	r2, [r3, #32]

  return ret;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	78fa      	ldrb	r2, [r7, #3]
 8006e8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d006      	beq.n	8006ec0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d106      	bne.n	8006ef8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d110      	bne.n	8006f3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b082      	sub	sp, #8
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	32ae      	adds	r2, #174	@ 0xae
 8006f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e01c      	b.n	8006fa2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d115      	bne.n	8006fa0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	32ae      	adds	r2, #174	@ 0xae
 8006f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32ae      	adds	r2, #174	@ 0xae
 8006f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	78fa      	ldrb	r2, [r7, #3]
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	32ae      	adds	r2, #174	@ 0xae
 8006fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e01c      	b.n	8007006 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d115      	bne.n	8007004 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	32ae      	adds	r2, #174	@ 0xae
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	@ 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	4611      	mov	r1, r2
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6852      	ldr	r2, [r2, #4]
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	4611      	mov	r1, r2
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007060:	7bfb      	ldrb	r3, [r7, #15]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	460b      	mov	r3, r1
 8007074:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007076:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007090:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800709e:	b480      	push	{r7}
 80070a0:	b087      	sub	sp, #28
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3301      	adds	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070bc:	8a3b      	ldrh	r3, [r7, #16]
 80070be:	021b      	lsls	r3, r3, #8
 80070c0:	b21a      	sxth	r2, r3
 80070c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b21b      	sxth	r3, r3
 80070ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070cc:	89fb      	ldrh	r3, [r7, #14]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070f2:	2b40      	cmp	r3, #64	@ 0x40
 80070f4:	d005      	beq.n	8007102 <USBD_StdDevReq+0x26>
 80070f6:	2b40      	cmp	r3, #64	@ 0x40
 80070f8:	d857      	bhi.n	80071aa <USBD_StdDevReq+0xce>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00f      	beq.n	800711e <USBD_StdDevReq+0x42>
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d153      	bne.n	80071aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	32ae      	adds	r2, #174	@ 0xae
 800710c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]
      break;
 800711c:	e04a      	b.n	80071b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	2b09      	cmp	r3, #9
 8007124:	d83b      	bhi.n	800719e <USBD_StdDevReq+0xc2>
 8007126:	a201      	add	r2, pc, #4	@ (adr r2, 800712c <USBD_StdDevReq+0x50>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007181 	.word	0x08007181
 8007130:	08007195 	.word	0x08007195
 8007134:	0800719f 	.word	0x0800719f
 8007138:	0800718b 	.word	0x0800718b
 800713c:	0800719f 	.word	0x0800719f
 8007140:	0800715f 	.word	0x0800715f
 8007144:	08007155 	.word	0x08007155
 8007148:	0800719f 	.word	0x0800719f
 800714c:	08007177 	.word	0x08007177
 8007150:	08007169 	.word	0x08007169
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa3c 	bl	80075d4 <USBD_GetDescriptor>
          break;
 800715c:	e024      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fbcb 	bl	80078fc <USBD_SetAddress>
          break;
 8007166:	e01f      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fc0a 	bl	8007984 <USBD_SetConfig>
 8007170:	4603      	mov	r3, r0
 8007172:	73fb      	strb	r3, [r7, #15]
          break;
 8007174:	e018      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fcad 	bl	8007ad8 <USBD_GetConfig>
          break;
 800717e:	e013      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fcde 	bl	8007b44 <USBD_GetStatus>
          break;
 8007188:	e00e      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fd0d 	bl	8007bac <USBD_SetFeature>
          break;
 8007192:	e009      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fd31 	bl	8007bfe <USBD_ClrFeature>
          break;
 800719c:	e004      	b.n	80071a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd88 	bl	8007cb6 <USBD_CtlError>
          break;
 80071a6:	bf00      	nop
      }
      break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fd82 	bl	8007cb6 <USBD_CtlError>
      break;
 80071b2:	bf00      	nop
  }

  return ret;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop

080071c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071d6:	2b40      	cmp	r3, #64	@ 0x40
 80071d8:	d005      	beq.n	80071e6 <USBD_StdItfReq+0x26>
 80071da:	2b40      	cmp	r3, #64	@ 0x40
 80071dc:	d852      	bhi.n	8007284 <USBD_StdItfReq+0xc4>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <USBD_StdItfReq+0x26>
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d14e      	bne.n	8007284 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d840      	bhi.n	8007276 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	889b      	ldrh	r3, [r3, #4]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d836      	bhi.n	800726c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	889b      	ldrh	r3, [r3, #4]
 8007202:	b2db      	uxtb	r3, r3
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff ff2f 	bl	800706a <USBD_CoreFindIF>
 800720c:	4603      	mov	r3, r0
 800720e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2bff      	cmp	r3, #255	@ 0xff
 8007214:	d01d      	beq.n	8007252 <USBD_StdItfReq+0x92>
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11a      	bne.n	8007252 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800721c:	7bba      	ldrb	r2, [r7, #14]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	32ae      	adds	r2, #174	@ 0xae
 8007222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00f      	beq.n	800724c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800722c:	7bba      	ldrb	r2, [r7, #14]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007234:	7bba      	ldrb	r2, [r7, #14]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32ae      	adds	r2, #174	@ 0xae
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	4798      	blx	r3
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800724a:	e004      	b.n	8007256 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007250:	e001      	b.n	8007256 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007252:	2303      	movs	r3, #3
 8007254:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	88db      	ldrh	r3, [r3, #6]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d110      	bne.n	8007280 <USBD_StdItfReq+0xc0>
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10d      	bne.n	8007280 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fd74 	bl	8007d52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800726a:	e009      	b.n	8007280 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fd21 	bl	8007cb6 <USBD_CtlError>
          break;
 8007274:	e004      	b.n	8007280 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fd1c 	bl	8007cb6 <USBD_CtlError>
          break;
 800727e:	e000      	b.n	8007282 <USBD_StdItfReq+0xc2>
          break;
 8007280:	bf00      	nop
      }
      break;
 8007282:	e004      	b.n	800728e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fd15 	bl	8007cb6 <USBD_CtlError>
      break;
 800728c:	bf00      	nop
  }

  return ret;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	889b      	ldrh	r3, [r3, #4]
 80072aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072b4:	2b40      	cmp	r3, #64	@ 0x40
 80072b6:	d007      	beq.n	80072c8 <USBD_StdEPReq+0x30>
 80072b8:	2b40      	cmp	r3, #64	@ 0x40
 80072ba:	f200 817f 	bhi.w	80075bc <USBD_StdEPReq+0x324>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02a      	beq.n	8007318 <USBD_StdEPReq+0x80>
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	f040 817a 	bne.w	80075bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff fed9 	bl	8007084 <USBD_CoreFindEP>
 80072d2:	4603      	mov	r3, r0
 80072d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d6:	7b7b      	ldrb	r3, [r7, #13]
 80072d8:	2bff      	cmp	r3, #255	@ 0xff
 80072da:	f000 8174 	beq.w	80075c6 <USBD_StdEPReq+0x32e>
 80072de:	7b7b      	ldrb	r3, [r7, #13]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f040 8170 	bne.w	80075c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072e6:	7b7a      	ldrb	r2, [r7, #13]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072ee:	7b7a      	ldrb	r2, [r7, #13]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	32ae      	adds	r2, #174	@ 0xae
 80072f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8163 	beq.w	80075c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007300:	7b7a      	ldrb	r2, [r7, #13]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32ae      	adds	r2, #174	@ 0xae
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007316:	e156      	b.n	80075c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	785b      	ldrb	r3, [r3, #1]
 800731c:	2b03      	cmp	r3, #3
 800731e:	d008      	beq.n	8007332 <USBD_StdEPReq+0x9a>
 8007320:	2b03      	cmp	r3, #3
 8007322:	f300 8145 	bgt.w	80075b0 <USBD_StdEPReq+0x318>
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 809b 	beq.w	8007462 <USBD_StdEPReq+0x1ca>
 800732c:	2b01      	cmp	r3, #1
 800732e:	d03c      	beq.n	80073aa <USBD_StdEPReq+0x112>
 8007330:	e13e      	b.n	80075b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d002      	beq.n	8007344 <USBD_StdEPReq+0xac>
 800733e:	2b03      	cmp	r3, #3
 8007340:	d016      	beq.n	8007370 <USBD_StdEPReq+0xd8>
 8007342:	e02c      	b.n	800739e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00d      	beq.n	8007366 <USBD_StdEPReq+0xce>
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b80      	cmp	r3, #128	@ 0x80
 800734e:	d00a      	beq.n	8007366 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fe39 	bl	8007fcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800735a:	2180      	movs	r1, #128	@ 0x80
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fe35 	bl	8007fcc <USBD_LL_StallEP>
 8007362:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007364:	e020      	b.n	80073a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fca4 	bl	8007cb6 <USBD_CtlError>
              break;
 800736e:	e01b      	b.n	80073a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	885b      	ldrh	r3, [r3, #2]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10e      	bne.n	8007396 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <USBD_StdEPReq+0xfe>
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b80      	cmp	r3, #128	@ 0x80
 8007382:	d008      	beq.n	8007396 <USBD_StdEPReq+0xfe>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	88db      	ldrh	r3, [r3, #6]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fe1b 	bl	8007fcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fcdb 	bl	8007d52 <USBD_CtlSendStatus>

              break;
 800739c:	e004      	b.n	80073a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fc88 	bl	8007cb6 <USBD_CtlError>
              break;
 80073a6:	bf00      	nop
          }
          break;
 80073a8:	e107      	b.n	80075ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d002      	beq.n	80073bc <USBD_StdEPReq+0x124>
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d016      	beq.n	80073e8 <USBD_StdEPReq+0x150>
 80073ba:	e04b      	b.n	8007454 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00d      	beq.n	80073de <USBD_StdEPReq+0x146>
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b80      	cmp	r3, #128	@ 0x80
 80073c6:	d00a      	beq.n	80073de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fdfd 	bl	8007fcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d2:	2180      	movs	r1, #128	@ 0x80
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fdf9 	bl	8007fcc <USBD_LL_StallEP>
 80073da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073dc:	e040      	b.n	8007460 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc68 	bl	8007cb6 <USBD_CtlError>
              break;
 80073e6:	e03b      	b.n	8007460 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	885b      	ldrh	r3, [r3, #2]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d136      	bne.n	800745e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fe03 	bl	800800a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fca4 	bl	8007d52 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fe38 	bl	8007084 <USBD_CoreFindEP>
 8007414:	4603      	mov	r3, r0
 8007416:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007418:	7b7b      	ldrb	r3, [r7, #13]
 800741a:	2bff      	cmp	r3, #255	@ 0xff
 800741c:	d01f      	beq.n	800745e <USBD_StdEPReq+0x1c6>
 800741e:	7b7b      	ldrb	r3, [r7, #13]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11c      	bne.n	800745e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007424:	7b7a      	ldrb	r2, [r7, #13]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800742c:	7b7a      	ldrb	r2, [r7, #13]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32ae      	adds	r2, #174	@ 0xae
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800743c:	7b7a      	ldrb	r2, [r7, #13]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32ae      	adds	r2, #174	@ 0xae
 8007442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007452:	e004      	b.n	800745e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fc2d 	bl	8007cb6 <USBD_CtlError>
              break;
 800745c:	e000      	b.n	8007460 <USBD_StdEPReq+0x1c8>
              break;
 800745e:	bf00      	nop
          }
          break;
 8007460:	e0ab      	b.n	80075ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d002      	beq.n	8007474 <USBD_StdEPReq+0x1dc>
 800746e:	2b03      	cmp	r3, #3
 8007470:	d032      	beq.n	80074d8 <USBD_StdEPReq+0x240>
 8007472:	e097      	b.n	80075a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d007      	beq.n	800748a <USBD_StdEPReq+0x1f2>
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b80      	cmp	r3, #128	@ 0x80
 800747e:	d004      	beq.n	800748a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fc17 	bl	8007cb6 <USBD_CtlError>
                break;
 8007488:	e091      	b.n	80075ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748e:	2b00      	cmp	r3, #0
 8007490:	da0b      	bge.n	80074aa <USBD_StdEPReq+0x212>
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	3310      	adds	r3, #16
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	e00b      	b.n	80074c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	3304      	adds	r3, #4
 80074c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2202      	movs	r2, #2
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fc01 	bl	8007cd8 <USBD_CtlSendData>
              break;
 80074d6:	e06a      	b.n	80075ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	da11      	bge.n	8007504 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	3324      	adds	r3, #36	@ 0x24
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d117      	bne.n	800752a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fbda 	bl	8007cb6 <USBD_CtlError>
                  break;
 8007502:	e054      	b.n	80075ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	f003 020f 	and.w	r2, r3, #15
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fbc7 	bl	8007cb6 <USBD_CtlError>
                  break;
 8007528:	e041      	b.n	80075ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800752a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da0b      	bge.n	800754a <USBD_StdEPReq+0x2b2>
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	3310      	adds	r3, #16
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	e00b      	b.n	8007562 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4413      	add	r3, r2
 8007560:	3304      	adds	r3, #4
 8007562:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007564:	7bbb      	ldrb	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <USBD_StdEPReq+0x2d8>
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b80      	cmp	r3, #128	@ 0x80
 800756e:	d103      	bne.n	8007578 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e00e      	b.n	8007596 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fd63 	bl	8008048 <USBD_LL_IsStallEP>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e002      	b.n	8007596 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2202      	movs	r2, #2
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb9b 	bl	8007cd8 <USBD_CtlSendData>
              break;
 80075a2:	e004      	b.n	80075ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb85 	bl	8007cb6 <USBD_CtlError>
              break;
 80075ac:	bf00      	nop
          }
          break;
 80075ae:	e004      	b.n	80075ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb7f 	bl	8007cb6 <USBD_CtlError>
          break;
 80075b8:	bf00      	nop
      }
      break;
 80075ba:	e005      	b.n	80075c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fb79 	bl	8007cb6 <USBD_CtlError>
      break;
 80075c4:	e000      	b.n	80075c8 <USBD_StdEPReq+0x330>
      break;
 80075c6:	bf00      	nop
  }

  return ret;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	885b      	ldrh	r3, [r3, #2]
 80075ee:	0a1b      	lsrs	r3, r3, #8
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2b0e      	cmp	r3, #14
 80075f6:	f200 8152 	bhi.w	800789e <USBD_GetDescriptor+0x2ca>
 80075fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <USBD_GetDescriptor+0x2c>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007671 	.word	0x08007671
 8007604:	08007689 	.word	0x08007689
 8007608:	080076c9 	.word	0x080076c9
 800760c:	0800789f 	.word	0x0800789f
 8007610:	0800789f 	.word	0x0800789f
 8007614:	0800783f 	.word	0x0800783f
 8007618:	0800786b 	.word	0x0800786b
 800761c:	0800789f 	.word	0x0800789f
 8007620:	0800789f 	.word	0x0800789f
 8007624:	0800789f 	.word	0x0800789f
 8007628:	0800789f 	.word	0x0800789f
 800762c:	0800789f 	.word	0x0800789f
 8007630:	0800789f 	.word	0x0800789f
 8007634:	0800789f 	.word	0x0800789f
 8007638:	0800763d 	.word	0x0800763d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800765e:	e126      	b.n	80078ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb27 	bl	8007cb6 <USBD_CtlError>
        err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
      break;
 800766e:	e11e      	b.n	80078ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
      break;
 8007686:	e112      	b.n	80078ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	7c1b      	ldrb	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10d      	bne.n	80076ac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	f107 0208 	add.w	r2, r7, #8
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3301      	adds	r3, #1
 80076a6:	2202      	movs	r2, #2
 80076a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076aa:	e100      	b.n	80078ae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	f107 0208 	add.w	r2, r7, #8
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	2202      	movs	r2, #2
 80076c4:	701a      	strb	r2, [r3, #0]
      break;
 80076c6:	e0f2      	b.n	80078ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	885b      	ldrh	r3, [r3, #2]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	f200 80ac 	bhi.w	800782c <USBD_GetDescriptor+0x258>
 80076d4:	a201      	add	r2, pc, #4	@ (adr r2, 80076dc <USBD_GetDescriptor+0x108>)
 80076d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076da:	bf00      	nop
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	08007729 	.word	0x08007729
 80076e4:	0800775d 	.word	0x0800775d
 80076e8:	08007791 	.word	0x08007791
 80076ec:	080077c5 	.word	0x080077c5
 80076f0:	080077f9 	.word	0x080077f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	7c12      	ldrb	r2, [r2, #16]
 800770c:	f107 0108 	add.w	r1, r7, #8
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007716:	e091      	b.n	800783c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 facb 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
          break;
 8007726:	e089      	b.n	800783c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774a:	e077      	b.n	800783c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fab1 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
          break;
 800775a:	e06f      	b.n	800783c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777e:	e05d      	b.n	800783c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa97 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
          break;
 800778e:	e055      	b.n	800783c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7c12      	ldrb	r2, [r2, #16]
 80077a8:	f107 0108 	add.w	r1, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b2:	e043      	b.n	800783c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa7d 	bl	8007cb6 <USBD_CtlError>
            err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
          break;
 80077c2:	e03b      	b.n	800783c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e6:	e029      	b.n	800783c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa63 	bl	8007cb6 <USBD_CtlError>
            err++;
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	3301      	adds	r3, #1
 80077f4:	72fb      	strb	r3, [r7, #11]
          break;
 80077f6:	e021      	b.n	800783c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7c12      	ldrb	r2, [r2, #16]
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781a:	e00f      	b.n	800783c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa49 	bl	8007cb6 <USBD_CtlError>
            err++;
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	3301      	adds	r3, #1
 8007828:	72fb      	strb	r3, [r7, #11]
          break;
 800782a:	e007      	b.n	800783c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa41 	bl	8007cb6 <USBD_CtlError>
          err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800783a:	bf00      	nop
      }
      break;
 800783c:	e037      	b.n	80078ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7c1b      	ldrb	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	4610      	mov	r0, r2
 8007854:	4798      	blx	r3
 8007856:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007858:	e029      	b.n	80078ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa2a 	bl	8007cb6 <USBD_CtlError>
        err++;
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	3301      	adds	r3, #1
 8007866:	72fb      	strb	r3, [r7, #11]
      break;
 8007868:	e021      	b.n	80078ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	7c1b      	ldrb	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10d      	bne.n	800788e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800787a:	f107 0208 	add.w	r2, r7, #8
 800787e:	4610      	mov	r0, r2
 8007880:	4798      	blx	r3
 8007882:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3301      	adds	r3, #1
 8007888:	2207      	movs	r2, #7
 800788a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800788c:	e00f      	b.n	80078ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fa10 	bl	8007cb6 <USBD_CtlError>
        err++;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	3301      	adds	r3, #1
 800789a:	72fb      	strb	r3, [r7, #11]
      break;
 800789c:	e007      	b.n	80078ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fa08 	bl	8007cb6 <USBD_CtlError>
      err++;
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	3301      	adds	r3, #1
 80078aa:	72fb      	strb	r3, [r7, #11]
      break;
 80078ac:	bf00      	nop
  }

  if (err != 0U)
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11e      	bne.n	80078f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	88db      	ldrh	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d016      	beq.n	80078ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078bc:	893b      	ldrh	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	88da      	ldrh	r2, [r3, #6]
 80078c6:	893b      	ldrh	r3, [r7, #8]
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bf28      	it	cs
 80078cc:	4613      	movcs	r3, r2
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078d2:	893b      	ldrh	r3, [r7, #8]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9fd 	bl	8007cd8 <USBD_CtlSendData>
 80078de:	e009      	b.n	80078f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9e7 	bl	8007cb6 <USBD_CtlError>
 80078e8:	e004      	b.n	80078f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa31 	bl	8007d52 <USBD_CtlSendStatus>
 80078f0:	e000      	b.n	80078f4 <USBD_GetDescriptor+0x320>
    return;
 80078f2:	bf00      	nop
  }
}
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop

080078fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	889b      	ldrh	r3, [r3, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d131      	bne.n	8007972 <USBD_SetAddress+0x76>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d12d      	bne.n	8007972 <USBD_SetAddress+0x76>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	885b      	ldrh	r3, [r3, #2]
 800791a:	2b7f      	cmp	r3, #127	@ 0x7f
 800791c:	d829      	bhi.n	8007972 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	885b      	ldrh	r3, [r3, #2]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007928:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b03      	cmp	r3, #3
 8007934:	d104      	bne.n	8007940 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9bc 	bl	8007cb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793e:	e01d      	b.n	800797c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7bfa      	ldrb	r2, [r7, #15]
 8007944:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fba7 	bl	80080a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f9fd 	bl	8007d52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007966:	e009      	b.n	800797c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	e004      	b.n	800797c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007972:	6839      	ldr	r1, [r7, #0]
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f99e 	bl	8007cb6 <USBD_CtlError>
  }
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	885b      	ldrh	r3, [r3, #2]
 8007996:	b2da      	uxtb	r2, r3
 8007998:	4b4e      	ldr	r3, [pc, #312]	@ (8007ad4 <USBD_SetConfig+0x150>)
 800799a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800799c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad4 <USBD_SetConfig+0x150>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d905      	bls.n	80079b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f985 	bl	8007cb6 <USBD_CtlError>
    return USBD_FAIL;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e08c      	b.n	8007aca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d002      	beq.n	80079c2 <USBD_SetConfig+0x3e>
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d029      	beq.n	8007a14 <USBD_SetConfig+0x90>
 80079c0:	e075      	b.n	8007aae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079c2:	4b44      	ldr	r3, [pc, #272]	@ (8007ad4 <USBD_SetConfig+0x150>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d020      	beq.n	8007a0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079ca:	4b42      	ldr	r3, [pc, #264]	@ (8007ad4 <USBD_SetConfig+0x150>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079d4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ad4 <USBD_SetConfig+0x150>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff f80d 	bl	80069fa <USBD_SetClassConfig>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f962 	bl	8007cb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079fa:	e065      	b.n	8007ac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9a8 	bl	8007d52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2203      	movs	r2, #3
 8007a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a0a:	e05d      	b.n	8007ac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f9a0 	bl	8007d52 <USBD_CtlSendStatus>
      break;
 8007a12:	e059      	b.n	8007ac8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a14:	4b2f      	ldr	r3, [pc, #188]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d112      	bne.n	8007a42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a24:	4b2b      	ldr	r3, [pc, #172]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a2e:	4b29      	ldr	r3, [pc, #164]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7fe fffc 	bl	8006a32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f989 	bl	8007d52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a40:	e042      	b.n	8007ac8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a42:	4b24      	ldr	r3, [pc, #144]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d02a      	beq.n	8007aa6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fe ffea 	bl	8006a32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a68:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fe ffc3 	bl	80069fa <USBD_SetClassConfig>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f918 	bl	8007cb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fe ffcf 	bl	8006a32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a9c:	e014      	b.n	8007ac8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f957 	bl	8007d52 <USBD_CtlSendStatus>
      break;
 8007aa4:	e010      	b.n	8007ac8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f953 	bl	8007d52 <USBD_CtlSendStatus>
      break;
 8007aac:	e00c      	b.n	8007ac8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f900 	bl	8007cb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ab6:	4b07      	ldr	r3, [pc, #28]	@ (8007ad4 <USBD_SetConfig+0x150>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fe ffb8 	bl	8006a32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200001b0 	.word	0x200001b0

08007ad8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	88db      	ldrh	r3, [r3, #6]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d004      	beq.n	8007af4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8e2 	bl	8007cb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007af2:	e023      	b.n	8007b3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	dc02      	bgt.n	8007b06 <USBD_GetConfig+0x2e>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dc03      	bgt.n	8007b0c <USBD_GetConfig+0x34>
 8007b04:	e015      	b.n	8007b32 <USBD_GetConfig+0x5a>
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d00b      	beq.n	8007b22 <USBD_GetConfig+0x4a>
 8007b0a:	e012      	b.n	8007b32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3308      	adds	r3, #8
 8007b16:	2201      	movs	r2, #1
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8dc 	bl	8007cd8 <USBD_CtlSendData>
        break;
 8007b20:	e00c      	b.n	8007b3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3304      	adds	r3, #4
 8007b26:	2201      	movs	r2, #1
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8d4 	bl	8007cd8 <USBD_CtlSendData>
        break;
 8007b30:	e004      	b.n	8007b3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f8be 	bl	8007cb6 <USBD_CtlError>
        break;
 8007b3a:	bf00      	nop
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d81e      	bhi.n	8007b9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d004      	beq.n	8007b6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f8a5 	bl	8007cb6 <USBD_CtlError>
        break;
 8007b6c:	e01a      	b.n	8007ba4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d005      	beq.n	8007b8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	2202      	movs	r2, #2
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8a0 	bl	8007cd8 <USBD_CtlSendData>
      break;
 8007b98:	e004      	b.n	8007ba4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f88a 	bl	8007cb6 <USBD_CtlError>
      break;
 8007ba2:	bf00      	nop
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d107      	bne.n	8007bce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8c3 	bl	8007d52 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bcc:	e013      	b.n	8007bf6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d10b      	bne.n	8007bee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	889b      	ldrh	r3, [r3, #4]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8b3 	bl	8007d52 <USBD_CtlSendStatus>
}
 8007bec:	e003      	b.n	8007bf6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f860 	bl	8007cb6 <USBD_CtlError>
}
 8007bf6:	bf00      	nop
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	3b01      	subs	r3, #1
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d80b      	bhi.n	8007c2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d10c      	bne.n	8007c38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f893 	bl	8007d52 <USBD_CtlSendStatus>
      }
      break;
 8007c2c:	e004      	b.n	8007c38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f840 	bl	8007cb6 <USBD_CtlError>
      break;
 8007c36:	e000      	b.n	8007c3a <USBD_ClrFeature+0x3c>
      break;
 8007c38:	bf00      	nop
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	781a      	ldrb	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	781a      	ldrb	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f7ff fa16 	bl	800709e <SWAPBYTE>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7ff fa09 	bl	800709e <SWAPBYTE>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff f9fc 	bl	800709e <SWAPBYTE>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	80da      	strh	r2, [r3, #6]
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cc0:	2180      	movs	r1, #128	@ 0x80
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f982 	bl	8007fcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f97e 	bl	8007fcc <USBD_LL_StallEP>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f9ed 	bl	80080de <USBD_LL_Transmit>

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	2100      	movs	r1, #0
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f9dc 	bl	80080de <USBD_LL_Transmit>

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	2100      	movs	r1, #0
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f9ec 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d62:	2300      	movs	r3, #0
 8007d64:	2200      	movs	r2, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f9b8 	bl	80080de <USBD_LL_Transmit>

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2205      	movs	r2, #5
 8007d84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9c6 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fe fe56 	bl	8006a66 <USBD_LL_SetupStage>
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	4619      	mov	r1, r3
 8007dec:	f7fe fe90 	bl	8006b10 <USBD_LL_DataOutStage>
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	00db      	lsls	r3, r3, #3
 8007e12:	4413      	add	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	3320      	adds	r3, #32
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	f7fe ff29 	bl	8006c76 <USBD_LL_DataInStage>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff f863 	bl	8006f06 <USBD_LL_SOF>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	79db      	ldrb	r3, [r3, #7]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	e008      	b.n	8007e74 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	79db      	ldrb	r3, [r3, #7]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d102      	bne.n	8007e70 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	73fb      	strb	r3, [r7, #15]
 8007e6e:	e001      	b.n	8007e74 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e70:	f7f9 ff30 	bl	8001cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e7a:	7bfa      	ldrb	r2, [r7, #15]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fffd 	bl	8006e7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe ffa5 	bl	8006dda <USBD_LL_Reset>
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fff9 	bl	8006e9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ebe:	f043 0301 	orr.w	r3, r3, #1
 8007ec2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	7adb      	ldrb	r3, [r3, #11]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ecc:	4b04      	ldr	r3, [pc, #16]	@ (8007ee0 <HAL_PCD_SuspendCallback+0x48>)
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	4a03      	ldr	r2, [pc, #12]	@ (8007ee0 <HAL_PCD_SuspendCallback+0x48>)
 8007ed2:	f043 0306 	orr.w	r3, r3, #6
 8007ed6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	e000ed00 	.word	0xe000ed00

08007ee4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe ffef 	bl	8006ed6 <USBD_LL_Resume>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff f847 	bl	8006faa <USBD_LL_IsoOUTIncomplete>
}
 8007f1c:	bf00      	nop
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff f803 	bl	8006f46 <USBD_LL_IsoINIncomplete>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff f859 	bl	800700e <USBD_LL_DevConnected>
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff f856 	bl	8007024 <USBD_LL_DevDisconnected>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	4608      	mov	r0, r1
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	70fb      	strb	r3, [r7, #3]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70bb      	strb	r3, [r7, #2]
 8007f96:	4613      	mov	r3, r2
 8007f98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fa8:	78bb      	ldrb	r3, [r7, #2]
 8007faa:	883a      	ldrh	r2, [r7, #0]
 8007fac:	78f9      	ldrb	r1, [r7, #3]
 8007fae:	f7fc f91f 	bl	80041f0 <HAL_PCD_EP_Open>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f921 	bl	8008200 <USBD_Get_USB_Status>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fc f9dd 	bl	80043aa <HAL_PCD_EP_SetStall>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f902 	bl	8008200 <USBD_Get_USB_Status>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008000:	7bbb      	ldrb	r3, [r7, #14]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008024:	78fa      	ldrb	r2, [r7, #3]
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f7fc fa21 	bl	8004470 <HAL_PCD_EP_ClrStall>
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 f8e3 	bl	8008200 <USBD_Get_USB_Status>
 800803a:	4603      	mov	r3, r0
 800803c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800805a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800805c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008060:	2b00      	cmp	r3, #0
 8008062:	da0b      	bge.n	800807c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	3316      	adds	r3, #22
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	e00b      	b.n	8008094 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008082:	68f9      	ldr	r1, [r7, #12]
 8008084:	4613      	mov	r3, r2
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008092:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fc f872 	bl	80041a8 <HAL_PCD_SetAddress>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 f898 	bl	8008200 <USBD_Get_USB_Status>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b086      	sub	sp, #24
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	460b      	mov	r3, r1
 80080ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80080fc:	7af9      	ldrb	r1, [r7, #11]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f7fc f918 	bl	8004336 <HAL_PCD_EP_Transmit>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f877 	bl	8008200 <USBD_Get_USB_Status>
 8008112:	4603      	mov	r3, r0
 8008114:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008116:	7dbb      	ldrb	r3, [r7, #22]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	460b      	mov	r3, r1
 800812e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800813e:	7af9      	ldrb	r1, [r7, #11]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	f7fc f8bc 	bl	80042c0 <HAL_PCD_EP_Receive>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f856 	bl	8008200 <USBD_Get_USB_Status>
 8008154:	4603      	mov	r3, r0
 8008156:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008158:	7dbb      	ldrb	r3, [r7, #22]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <HAL_PCDEx_LPM_Callback+0x18>
 8008176:	2b01      	cmp	r3, #1
 8008178:	d01f      	beq.n	80081ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800817a:	e03b      	b.n	80081f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7adb      	ldrb	r3, [r3, #11]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008184:	f7f9 fc36 	bl	80019f4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008188:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <HAL_PCDEx_LPM_Callback+0x98>)
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	4a1b      	ldr	r2, [pc, #108]	@ (80081fc <HAL_PCDEx_LPM_Callback+0x98>)
 800818e:	f023 0306 	bic.w	r3, r3, #6
 8008192:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6812      	ldr	r2, [r2, #0]
 80081a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081a6:	f023 0301 	bic.w	r3, r3, #1
 80081aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fe8f 	bl	8006ed6 <USBD_LL_Resume>
    break;
 80081b8:	e01c      	b.n	80081f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081cc:	f043 0301 	orr.w	r3, r3, #1
 80081d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fe60 	bl	8006e9e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	7adb      	ldrb	r3, [r3, #11]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081e6:	4b05      	ldr	r3, [pc, #20]	@ (80081fc <HAL_PCDEx_LPM_Callback+0x98>)
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	4a04      	ldr	r2, [pc, #16]	@ (80081fc <HAL_PCDEx_LPM_Callback+0x98>)
 80081ec:	f043 0306 	orr.w	r3, r3, #6
 80081f0:	6113      	str	r3, [r2, #16]
    break;
 80081f2:	bf00      	nop
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	e000ed00 	.word	0xe000ed00

08008200 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800820e:	79fb      	ldrb	r3, [r7, #7]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d817      	bhi.n	8008244 <USBD_Get_USB_Status+0x44>
 8008214:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <USBD_Get_USB_Status+0x1c>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	0800822d 	.word	0x0800822d
 8008220:	08008233 	.word	0x08008233
 8008224:	08008239 	.word	0x08008239
 8008228:	0800823f 	.word	0x0800823f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
    break;
 8008230:	e00b      	b.n	800824a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008232:	2303      	movs	r3, #3
 8008234:	73fb      	strb	r3, [r7, #15]
    break;
 8008236:	e008      	b.n	800824a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	e005      	b.n	800824a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	73fb      	strb	r3, [r7, #15]
    break;
 8008242:	e002      	b.n	800824a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	73fb      	strb	r3, [r7, #15]
    break;
 8008248:	bf00      	nop
  }
  return usb_status;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <memset>:
 8008258:	4402      	add	r2, r0
 800825a:	4603      	mov	r3, r0
 800825c:	4293      	cmp	r3, r2
 800825e:	d100      	bne.n	8008262 <memset+0xa>
 8008260:	4770      	bx	lr
 8008262:	f803 1b01 	strb.w	r1, [r3], #1
 8008266:	e7f9      	b.n	800825c <memset+0x4>

08008268 <__libc_init_array>:
 8008268:	b570      	push	{r4, r5, r6, lr}
 800826a:	4d0d      	ldr	r5, [pc, #52]	@ (80082a0 <__libc_init_array+0x38>)
 800826c:	4c0d      	ldr	r4, [pc, #52]	@ (80082a4 <__libc_init_array+0x3c>)
 800826e:	1b64      	subs	r4, r4, r5
 8008270:	10a4      	asrs	r4, r4, #2
 8008272:	2600      	movs	r6, #0
 8008274:	42a6      	cmp	r6, r4
 8008276:	d109      	bne.n	800828c <__libc_init_array+0x24>
 8008278:	4d0b      	ldr	r5, [pc, #44]	@ (80082a8 <__libc_init_array+0x40>)
 800827a:	4c0c      	ldr	r4, [pc, #48]	@ (80082ac <__libc_init_array+0x44>)
 800827c:	f000 f8a6 	bl	80083cc <_init>
 8008280:	1b64      	subs	r4, r4, r5
 8008282:	10a4      	asrs	r4, r4, #2
 8008284:	2600      	movs	r6, #0
 8008286:	42a6      	cmp	r6, r4
 8008288:	d105      	bne.n	8008296 <__libc_init_array+0x2e>
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008290:	4798      	blx	r3
 8008292:	3601      	adds	r6, #1
 8008294:	e7ee      	b.n	8008274 <__libc_init_array+0xc>
 8008296:	f855 3b04 	ldr.w	r3, [r5], #4
 800829a:	4798      	blx	r3
 800829c:	3601      	adds	r6, #1
 800829e:	e7f2      	b.n	8008286 <__libc_init_array+0x1e>
 80082a0:	08008418 	.word	0x08008418
 80082a4:	08008418 	.word	0x08008418
 80082a8:	08008418 	.word	0x08008418
 80082ac:	0800841c 	.word	0x0800841c

080082b0 <fmax>:
 80082b0:	b508      	push	{r3, lr}
 80082b2:	ed2d 8b04 	vpush	{d8-d9}
 80082b6:	eeb0 8a40 	vmov.f32	s16, s0
 80082ba:	eef0 8a60 	vmov.f32	s17, s1
 80082be:	eeb0 9a41 	vmov.f32	s18, s2
 80082c2:	eef0 9a61 	vmov.f32	s19, s3
 80082c6:	f000 f81d 	bl	8008304 <__fpclassifyd>
 80082ca:	b950      	cbnz	r0, 80082e2 <fmax+0x32>
 80082cc:	eeb0 8a49 	vmov.f32	s16, s18
 80082d0:	eef0 8a69 	vmov.f32	s17, s19
 80082d4:	eeb0 0a48 	vmov.f32	s0, s16
 80082d8:	eef0 0a68 	vmov.f32	s1, s17
 80082dc:	ecbd 8b04 	vpop	{d8-d9}
 80082e0:	bd08      	pop	{r3, pc}
 80082e2:	eeb0 0a49 	vmov.f32	s0, s18
 80082e6:	eef0 0a69 	vmov.f32	s1, s19
 80082ea:	f000 f80b 	bl	8008304 <__fpclassifyd>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d0f0      	beq.n	80082d4 <fmax+0x24>
 80082f2:	ec53 2b19 	vmov	r2, r3, d9
 80082f6:	ec51 0b18 	vmov	r0, r1, d8
 80082fa:	f7f8 fae9 	bl	80008d0 <__aeabi_dcmpgt>
 80082fe:	2800      	cmp	r0, #0
 8008300:	d0e4      	beq.n	80082cc <fmax+0x1c>
 8008302:	e7e7      	b.n	80082d4 <fmax+0x24>

08008304 <__fpclassifyd>:
 8008304:	ec51 0b10 	vmov	r0, r1, d0
 8008308:	b510      	push	{r4, lr}
 800830a:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800830e:	460b      	mov	r3, r1
 8008310:	d019      	beq.n	8008346 <__fpclassifyd+0x42>
 8008312:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8008316:	490e      	ldr	r1, [pc, #56]	@ (8008350 <__fpclassifyd+0x4c>)
 8008318:	428a      	cmp	r2, r1
 800831a:	d90e      	bls.n	800833a <__fpclassifyd+0x36>
 800831c:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8008320:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8008324:	428a      	cmp	r2, r1
 8008326:	d908      	bls.n	800833a <__fpclassifyd+0x36>
 8008328:	4a0a      	ldr	r2, [pc, #40]	@ (8008354 <__fpclassifyd+0x50>)
 800832a:	4213      	tst	r3, r2
 800832c:	d007      	beq.n	800833e <__fpclassifyd+0x3a>
 800832e:	4294      	cmp	r4, r2
 8008330:	d107      	bne.n	8008342 <__fpclassifyd+0x3e>
 8008332:	fab0 f080 	clz	r0, r0
 8008336:	0940      	lsrs	r0, r0, #5
 8008338:	bd10      	pop	{r4, pc}
 800833a:	2004      	movs	r0, #4
 800833c:	e7fc      	b.n	8008338 <__fpclassifyd+0x34>
 800833e:	2003      	movs	r0, #3
 8008340:	e7fa      	b.n	8008338 <__fpclassifyd+0x34>
 8008342:	2000      	movs	r0, #0
 8008344:	e7f8      	b.n	8008338 <__fpclassifyd+0x34>
 8008346:	2800      	cmp	r0, #0
 8008348:	d1ee      	bne.n	8008328 <__fpclassifyd+0x24>
 800834a:	2002      	movs	r0, #2
 800834c:	e7f4      	b.n	8008338 <__fpclassifyd+0x34>
 800834e:	bf00      	nop
 8008350:	7fdfffff 	.word	0x7fdfffff
 8008354:	7ff00000 	.word	0x7ff00000

08008358 <fminf>:
 8008358:	b508      	push	{r3, lr}
 800835a:	ed2d 8b02 	vpush	{d8}
 800835e:	eeb0 8a40 	vmov.f32	s16, s0
 8008362:	eef0 8a60 	vmov.f32	s17, s1
 8008366:	f000 f815 	bl	8008394 <__fpclassifyf>
 800836a:	b930      	cbnz	r0, 800837a <fminf+0x22>
 800836c:	eeb0 8a68 	vmov.f32	s16, s17
 8008370:	eeb0 0a48 	vmov.f32	s0, s16
 8008374:	ecbd 8b02 	vpop	{d8}
 8008378:	bd08      	pop	{r3, pc}
 800837a:	eeb0 0a68 	vmov.f32	s0, s17
 800837e:	f000 f809 	bl	8008394 <__fpclassifyf>
 8008382:	2800      	cmp	r0, #0
 8008384:	d0f4      	beq.n	8008370 <fminf+0x18>
 8008386:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800838a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838e:	d5ed      	bpl.n	800836c <fminf+0x14>
 8008390:	e7ee      	b.n	8008370 <fminf+0x18>
	...

08008394 <__fpclassifyf>:
 8008394:	ee10 3a10 	vmov	r3, s0
 8008398:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800839c:	d00d      	beq.n	80083ba <__fpclassifyf+0x26>
 800839e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80083a2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80083a6:	d30a      	bcc.n	80083be <__fpclassifyf+0x2a>
 80083a8:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <__fpclassifyf+0x34>)
 80083aa:	1e42      	subs	r2, r0, #1
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d908      	bls.n	80083c2 <__fpclassifyf+0x2e>
 80083b0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80083b4:	4258      	negs	r0, r3
 80083b6:	4158      	adcs	r0, r3
 80083b8:	4770      	bx	lr
 80083ba:	2002      	movs	r0, #2
 80083bc:	4770      	bx	lr
 80083be:	2004      	movs	r0, #4
 80083c0:	4770      	bx	lr
 80083c2:	2003      	movs	r0, #3
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	007ffffe 	.word	0x007ffffe

080083cc <_init>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr

080083d8 <_fini>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr
