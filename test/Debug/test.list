
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c8  080073c8  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  080073c8  080073c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d0  080073d0  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d0  080073d0  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080073d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000000c  080073e4  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  080073e4  00009624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001494d  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db0  00000000  00000000  0001d989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00020740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f09  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e2  00000000  00000000  000229a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018021  00000000  00000000  00045383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d775f  00000000  00000000  0005d3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134b03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c4  00000000  00000000  00134b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00139e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007384 	.word	0x08007384

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08007384 	.word	0x08007384

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <delayUS>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void delayUS(uint32_t us) {   // Sets the delay in microseconds.
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim10,0);  // set the counter value a 0
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <delayUS+0x2c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10) < us);  // wait for the counter to reach the us input in the parameter
 8000504:	bf00      	nop
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <delayUS+0x2c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d8f9      	bhi.n	8000506 <delayUS+0x12>
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	2000007c 	.word	0x2000007c

08000524 <Checksum>:
    }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
	unsigned char i;
	unsigned char checksum = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	73bb      	strb	r3, [r7, #14]

	for(i=0; i<len; i++)
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e009      	b.n	800054e <Checksum+0x2a>
		checksum += ptr[i];
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	4413      	add	r3, r2
 8000540:	781a      	ldrb	r2, [r3, #0]
 8000542:	7bbb      	ldrb	r3, [r7, #14]
 8000544:	4413      	add	r3, r2
 8000546:	73bb      	strb	r3, [r7, #14]
	for(i=0; i<len; i++)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	3301      	adds	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	7bfa      	ldrb	r2, [r7, #15]
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	429a      	cmp	r2, r3
 8000554:	d3f1      	bcc.n	800053a <Checksum+0x16>

	checksum = 0xff & ~checksum;
 8000556:	7bbb      	ldrb	r3, [r7, #14]
 8000558:	43db      	mvns	r3, r3
 800055a:	73bb      	strb	r3, [r7, #14]

	return(checksum);
 800055c:	7bbb      	ldrb	r3, [r7, #14]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <I2C_WriteReg>:
	}
	return(crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af04      	add	r7, sp, #16
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_Buffer [MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800057c:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <I2C_WriteReg+0x44>)
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	ca07      	ldmia	r2, {r0, r1, r2}
 8000584:	c303      	stmia	r3!, {r0, r1}
 8000586:	801a      	strh	r2, [r3, #0]
			j = j + 1;
		}
		HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
	}
#else
	HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	b29a      	uxth	r2, r3
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	b29b      	uxth	r3, r3
 8000590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000594:	9102      	str	r1, [sp, #8]
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2301      	movs	r3, #1
 800059e:	2110      	movs	r1, #16
 80005a0:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <I2C_WriteReg+0x48>)
 80005a2:	f001 fabd 	bl	8001b20 <HAL_I2C_Mem_Write>
#endif
}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	0800739c 	.word	0x0800739c
 80005b4:	20000028 	.word	0x20000028

080005b8 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	@ 0x28
 80005bc:	af04      	add	r7, sp, #16
 80005be:	4603      	mov	r3, r0
 80005c0:	6039      	str	r1, [r7, #0]
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	4613      	mov	r3, r2
 80005c6:	71bb      	strb	r3, [r7, #6]
	unsigned int RX_CRC_Fail = 0;  // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
	uint8_t RX_Buffer [MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80005cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <I2C_ReadReg+0x48>)
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005d4:	c303      	stmia	r3!, {r0, r1}
 80005d6:	801a      	strh	r2, [r3, #0]
			j = j + 1;
		}
		CopyArray(RX_Buffer, reg_data, crc_count);
	}
#else
	HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005e4:	9102      	str	r1, [sp, #8]
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <I2C_ReadReg+0x4c>)
 80005f2:	f001 fb8f 	bl	8001d14 <HAL_I2C_Mem_Read>
#endif
	return 0;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	0800739c 	.word	0x0800739c
 8000604:	20000028 	.word	0x20000028

08000608 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	717b      	strb	r3, [r7, #5]
	uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000618:	2300      	movs	r3, #0
 800061a:	82bb      	strh	r3, [r7, #20]
	uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800061c:	4a62      	ldr	r2, [pc, #392]	@ (80007a8 <BQ769x2_SetRegister+0x1a0>)
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000626:	6018      	str	r0, [r3, #0]
 8000628:	3304      	adds	r3, #4
 800062a:	8019      	strh	r1, [r3, #0]

	//TX_RegData in little endian format
	TX_RegData[0] = reg_addr & 0xff;
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	733b      	strb	r3, [r7, #12]
	TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	b29b      	uxth	r3, r3
 8000638:	b2db      	uxtb	r3, r3
 800063a:	737b      	strb	r3, [r7, #13]
	TX_RegData[2] = reg_data & 0xff; //1st byte of data
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	73bb      	strb	r3, [r7, #14]

	switch(datalen)
 8000642:	797b      	ldrb	r3, [r7, #5]
 8000644:	2b04      	cmp	r3, #4
 8000646:	d07d      	beq.n	8000744 <BQ769x2_SetRegister+0x13c>
 8000648:	2b04      	cmp	r3, #4
 800064a:	f300 80a8 	bgt.w	800079e <BQ769x2_SetRegister+0x196>
 800064e:	2b01      	cmp	r3, #1
 8000650:	d002      	beq.n	8000658 <BQ769x2_SetRegister+0x50>
 8000652:	2b02      	cmp	r3, #2
 8000654:	d039      	beq.n	80006ca <BQ769x2_SetRegister+0xc2>
			TX_Buffer[1] = 0x08; //combined length of register address and data
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
			delayUS(2000);
			break;
    }
}
 8000656:	e0a2      	b.n	800079e <BQ769x2_SetRegister+0x196>
      		I2C_WriteReg(0x3E, TX_RegData, 3);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2203      	movs	r2, #3
 800065e:	4619      	mov	r1, r3
 8000660:	203e      	movs	r0, #62	@ 0x3e
 8000662:	f7ff ff83 	bl	800056c <I2C_WriteReg>
			delayUS(2000);
 8000666:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800066a:	f7ff ff43 	bl	80004f4 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 3);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2103      	movs	r1, #3
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff55 	bl	8000524 <Checksum>
 800067a:	4603      	mov	r3, r0
 800067c:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x05; //combined length of register address and data
 800067e:	2305      	movs	r3, #5
 8000680:	757b      	strb	r3, [r7, #21]
			uint8_t statusLow = 0xFF;
 8000682:	23ff      	movs	r3, #255	@ 0xff
 8000684:	72fb      	strb	r3, [r7, #11]
			    uint8_t statusHigh = 0xFF;
 8000686:	23ff      	movs	r3, #255	@ 0xff
 8000688:	72bb      	strb	r3, [r7, #10]
			        I2C_ReadReg(0x3E, &statusLow, 1);
 800068a:	f107 030b 	add.w	r3, r7, #11
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	203e      	movs	r0, #62	@ 0x3e
 8000694:	f7ff ff90 	bl	80005b8 <I2C_ReadReg>
			        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000698:	f107 030a 	add.w	r3, r7, #10
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	203f      	movs	r0, #63	@ 0x3f
 80006a2:	f7ff ff89 	bl	80005b8 <I2C_ReadReg>
			    } while (statusLow == 0xFF && statusHigh == 0xFF);
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	2bff      	cmp	r3, #255	@ 0xff
 80006aa:	d102      	bne.n	80006b2 <BQ769x2_SetRegister+0xaa>
 80006ac:	7abb      	ldrb	r3, [r7, #10]
 80006ae:	2bff      	cmp	r3, #255	@ 0xff
 80006b0:	d0eb      	beq.n	800068a <BQ769x2_SetRegister+0x82>
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2202      	movs	r2, #2
 80006b8:	4619      	mov	r1, r3
 80006ba:	2060      	movs	r0, #96	@ 0x60
 80006bc:	f7ff ff56 	bl	800056c <I2C_WriteReg>
			delayUS(2000);
 80006c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c4:	f7ff ff16 	bl	80004f4 <delayUS>
			break;
 80006c8:	e069      	b.n	800079e <BQ769x2_SetRegister+0x196>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
			I2C_WriteReg(0x3E, TX_RegData, 4);
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2204      	movs	r2, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	203e      	movs	r0, #62	@ 0x3e
 80006dc:	f7ff ff46 	bl	800056c <I2C_WriteReg>
			delayUS(2000);
 80006e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006e4:	f7ff ff06 	bl	80004f4 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 4);
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2104      	movs	r1, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff18 	bl	8000524 <Checksum>
 80006f4:	4603      	mov	r3, r0
 80006f6:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x06; //combined length of register address and data
 80006f8:	2306      	movs	r3, #6
 80006fa:	757b      	strb	r3, [r7, #21]
			statusLow = 0xFF;
 80006fc:	23ff      	movs	r3, #255	@ 0xff
 80006fe:	72fb      	strb	r3, [r7, #11]
			statusHigh = 0xFF;
 8000700:	23ff      	movs	r3, #255	@ 0xff
 8000702:	72bb      	strb	r3, [r7, #10]
			        I2C_ReadReg(0x3E, &statusLow, 1);
 8000704:	f107 030b 	add.w	r3, r7, #11
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	203e      	movs	r0, #62	@ 0x3e
 800070e:	f7ff ff53 	bl	80005b8 <I2C_ReadReg>
			        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000712:	f107 030a 	add.w	r3, r7, #10
 8000716:	2201      	movs	r2, #1
 8000718:	4619      	mov	r1, r3
 800071a:	203f      	movs	r0, #63	@ 0x3f
 800071c:	f7ff ff4c 	bl	80005b8 <I2C_ReadReg>
			    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000720:	7afb      	ldrb	r3, [r7, #11]
 8000722:	2bff      	cmp	r3, #255	@ 0xff
 8000724:	d102      	bne.n	800072c <BQ769x2_SetRegister+0x124>
 8000726:	7abb      	ldrb	r3, [r7, #10]
 8000728:	2bff      	cmp	r3, #255	@ 0xff
 800072a:	d0eb      	beq.n	8000704 <BQ769x2_SetRegister+0xfc>
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2202      	movs	r2, #2
 8000732:	4619      	mov	r1, r3
 8000734:	2060      	movs	r0, #96	@ 0x60
 8000736:	f7ff ff19 	bl	800056c <I2C_WriteReg>
			delayUS(2000);
 800073a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800073e:	f7ff fed9 	bl	80004f4 <delayUS>
			break;
 8000742:	e02c      	b.n	800079e <BQ769x2_SetRegister+0x196>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b2db      	uxtb	r3, r3
 800074a:	73fb      	strb	r3, [r7, #15]
			TX_RegData[4] = (reg_data >> 16) & 0xff;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	0c1b      	lsrs	r3, r3, #16
 8000750:	b2db      	uxtb	r3, r3
 8000752:	743b      	strb	r3, [r7, #16]
			TX_RegData[5] = (reg_data >> 24) & 0xff;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	0e1b      	lsrs	r3, r3, #24
 8000758:	b2db      	uxtb	r3, r3
 800075a:	747b      	strb	r3, [r7, #17]
			I2C_WriteReg(0x3E, TX_RegData, 6);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2206      	movs	r2, #6
 8000762:	4619      	mov	r1, r3
 8000764:	203e      	movs	r0, #62	@ 0x3e
 8000766:	f7ff ff01 	bl	800056c <I2C_WriteReg>
			delayUS(2000);
 800076a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800076e:	f7ff fec1 	bl	80004f4 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 6);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2106      	movs	r1, #6
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fed3 	bl	8000524 <Checksum>
 800077e:	4603      	mov	r3, r0
 8000780:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x08; //combined length of register address and data
 8000782:	2308      	movs	r3, #8
 8000784:	757b      	strb	r3, [r7, #21]
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2202      	movs	r2, #2
 800078c:	4619      	mov	r1, r3
 800078e:	2060      	movs	r0, #96	@ 0x60
 8000790:	f7ff feec 	bl	800056c <I2C_WriteReg>
			delayUS(2000);
 8000794:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000798:	f7ff feac 	bl	80004f4 <delayUS>
			break;
 800079c:	bf00      	nop
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	080073a8 	.word	0x080073a8

080007ac <BQ769x2_ReadRegister>:

uint16_t BQ769x2_ReadRegister(uint16_t reg_addr) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
    uint8_t TX_RegAddr[2] = {0};  // Array to hold the register address
 80007b6:	2300      	movs	r3, #0
 80007b8:	82bb      	strh	r3, [r7, #20]
    uint8_t RX_Buffer[2] = {0};   // Array to hold the received data
 80007ba:	2300      	movs	r3, #0
 80007bc:	823b      	strh	r3, [r7, #16]

    // Populate the TX_RegAddr array with the register address
    TX_RegAddr[0] = reg_addr & 0xFF;          // Lower byte of register address
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	753b      	strb	r3, [r7, #20]
    TX_RegAddr[1] = (reg_addr >> 8) & 0xFF;   // Upper byte of register address
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	757b      	strb	r3, [r7, #21]

    // Write the register address to the 0x3E register
    I2C_WriteReg(0x3E, TX_RegAddr, 2);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2202      	movs	r2, #2
 80007d4:	4619      	mov	r1, r3
 80007d6:	203e      	movs	r0, #62	@ 0x3e
 80007d8:	f7ff fec8 	bl	800056c <I2C_WriteReg>
    delayUS(2000);  // Delay to allow time for the write to complete
 80007dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e0:	f7ff fe88 	bl	80004f4 <delayUS>

    // Poll the 0x3E register until it no longer returns 0xFF
    uint8_t statusLow = 0xFF;
 80007e4:	23ff      	movs	r3, #255	@ 0xff
 80007e6:	73fb      	strb	r3, [r7, #15]
    uint8_t statusHigh = 0xFF;
 80007e8:	23ff      	movs	r3, #255	@ 0xff
 80007ea:	73bb      	strb	r3, [r7, #14]
    do {
        I2C_ReadReg(0x3E, &statusLow, 1);
 80007ec:	f107 030f 	add.w	r3, r7, #15
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	203e      	movs	r0, #62	@ 0x3e
 80007f6:	f7ff fedf 	bl	80005b8 <I2C_ReadReg>
        I2C_ReadReg(0x3F, &statusHigh, 1);
 80007fa:	f107 030e 	add.w	r3, r7, #14
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	203f      	movs	r0, #63	@ 0x3f
 8000804:	f7ff fed8 	bl	80005b8 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2bff      	cmp	r3, #255	@ 0xff
 800080c:	d102      	bne.n	8000814 <BQ769x2_ReadRegister+0x68>
 800080e:	7bbb      	ldrb	r3, [r7, #14]
 8000810:	2bff      	cmp	r3, #255	@ 0xff
 8000812:	d0eb      	beq.n	80007ec <BQ769x2_ReadRegister+0x40>

    //HAL_Delay(200);
    // Read the data from the buffer starting at 0x40
    I2C_ReadReg(0x40, RX_Buffer, 2);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2202      	movs	r2, #2
 800081a:	4619      	mov	r1, r3
 800081c:	2040      	movs	r0, #64	@ 0x40
 800081e:	f7ff fecb 	bl	80005b8 <I2C_ReadReg>

    // Combine the received bytes into a single 16-bit value
    RX_data[0] = RX_Buffer[0];
 8000822:	7c3a      	ldrb	r2, [r7, #16]
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <BQ769x2_ReadRegister+0x9c>)
 8000826:	701a      	strb	r2, [r3, #0]
    RX_data[1] = RX_Buffer[1];
 8000828:	7c7a      	ldrb	r2, [r7, #17]
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <BQ769x2_ReadRegister+0x9c>)
 800082c:	705a      	strb	r2, [r3, #1]
    uint16_t reg_data = (RX_Buffer[1] << 8) | RX_Buffer[0];
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	b21a      	sxth	r2, r3
 8000834:	7c3b      	ldrb	r3, [r7, #16]
 8000836:	b21b      	sxth	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b21b      	sxth	r3, r3
 800083c:	82fb      	strh	r3, [r7, #22]

    return reg_data;
 800083e:	8afb      	ldrh	r3, [r7, #22]

}
 8000840:	4618      	mov	r0, r3
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000c4 	.word	0x200000c4

0800084c <CommandSubcommands>:
    I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) //For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{	//For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]

	uint8_t TX_Reg[2] = {0x00, 0x00};
 8000856:	2300      	movs	r3, #0
 8000858:	81bb      	strh	r3, [r7, #12]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	733b      	strb	r3, [r7, #12]
	TX_Reg[1] = (command >> 8) & 0xff;
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	b29b      	uxth	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	737b      	strb	r3, [r7, #13]

	I2C_WriteReg(0x3E,TX_Reg,2);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2202      	movs	r2, #2
 8000870:	4619      	mov	r1, r3
 8000872:	203e      	movs	r0, #62	@ 0x3e
 8000874:	f7ff fe7a 	bl	800056c <I2C_WriteReg>
	delayUS(2000);
 8000878:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800087c:	f7ff fe3a 	bl	80004f4 <delayUS>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <DirectCommands>:
	}
}

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{	//type: R = read, W = write
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	460b      	mov	r3, r1
 8000894:	80bb      	strh	r3, [r7, #4]
 8000896:	4613      	mov	r3, r2
 8000898:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_data[2] = {0x00, 0x00};
 800089a:	2300      	movs	r3, #0
 800089c:	81bb      	strh	r3, [r7, #12]

	//little endian format
	TX_data[0] = data & 0xff;
 800089e:	88bb      	ldrh	r3, [r7, #4]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	733b      	strb	r3, [r7, #12]
	TX_data[1] = (data >> 8) & 0xff;
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	737b      	strb	r3, [r7, #13]

	if (type == R) {//Read
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d109      	bne.n	80008c8 <DirectCommands+0x40>
		I2C_ReadReg(command, RX_data, 2); //RX_data is a global variable
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2202      	movs	r2, #2
 80008b8:	490c      	ldr	r1, [pc, #48]	@ (80008ec <DirectCommands+0x64>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe7c 	bl	80005b8 <I2C_ReadReg>
		delayUS(2000);
 80008c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008c4:	f7ff fe16 	bl	80004f4 <delayUS>
	}
	if (type == W) {//write
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10a      	bne.n	80008e4 <DirectCommands+0x5c>
    //Control_status, alarm_status, alarm_enable all 2 bytes long
		I2C_WriteReg(command,TX_data,2);
 80008ce:	f107 010c 	add.w	r1, r7, #12
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2202      	movs	r2, #2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe48 	bl	800056c <I2C_WriteReg>
		delayUS(2000);
 80008dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008e0:	f7ff fe08 	bl	80004f4 <delayUS>
	}
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000c4 	.word	0x200000c4

080008f0 <BQ769x2_Init>:

void BQ769x2_Init() {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	// Configures all parameters in device RAM

	  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
	  // See TRM for full description of CONFIG_UPDATE mode
	  CommandSubcommands(SET_CFGUPDATE);
 80008f4:	2090      	movs	r0, #144	@ 0x90
 80008f6:	f7ff ffa9 	bl	800084c <CommandSubcommands>
	  // a full description of the register and the bits will pop up on the screen.

	  // 'Power Config' - 0x9234 = 0x2D80
	  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
	  // Set wake speed bits to 00 for best performance
	  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 80008fa:	2202      	movs	r2, #2
 80008fc:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8000900:	f249 2034 	movw	r0, #37428	@ 0x9234
 8000904:	f7ff fe80 	bl	8000608 <BQ769x2_SetRegister>

	  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
	  BQ769x2_SetRegister(REG0Config, 0x01, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	2101      	movs	r1, #1
 800090c:	f249 2037 	movw	r0, #37431	@ 0x9237
 8000910:	f7ff fe7a 	bl	8000608 <BQ769x2_SetRegister>

	  // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
	  BQ769x2_SetRegister(REG12Config, 0xDD, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	21dd      	movs	r1, #221	@ 0xdd
 8000918:	f249 2036 	movw	r0, #37430	@ 0x9236
 800091c:	f7ff fe74 	bl	8000608 <BQ769x2_SetRegister>
	  //BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

	  // Set up ALERT Pin - 0x92FC = 0x2A
	  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
	  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
	  BQ769x2_SetRegister(ALERTPinConfig, 0xAA, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	21aa      	movs	r1, #170	@ 0xaa
 8000924:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 8000928:	f7ff fe6e 	bl	8000608 <BQ769x2_SetRegister>

	  // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
	  // BQ769x2_SetRegister(TS1Config, 0x07, 1);
	  BQ769x2_SetRegister(TS1Config, 0x07, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2107      	movs	r1, #7
 8000930:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 8000934:	f7ff fe68 	bl	8000608 <BQ769x2_SetRegister>

	  // Set TS3 to measure FET Temperature - 0x92FF = 0x0F
	  BQ769x2_SetRegister(TS3Config, 0x07, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	2107      	movs	r1, #7
 800093c:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8000940:	f7ff fe62 	bl	8000608 <BQ769x2_SetRegister>

	  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
	  BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);  // No thermistor installed on EVM HDQ pin, so set to 0x00
 8000944:	2201      	movs	r2, #1
 8000946:	2100      	movs	r1, #0
 8000948:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 800094c:	f7ff fe5c 	bl	8000608 <BQ769x2_SetRegister>

	  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
	  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8000950:	2202      	movs	r2, #2
 8000952:	f248 011f 	movw	r1, #32799	@ 0x801f
 8000956:	f249 3004 	movw	r0, #37636	@ 0x9304
 800095a:	f7ff fe55 	bl	8000608 <BQ769x2_SetRegister>

	  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
	  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
	  // COV (over-voltage), CUV (under-voltage)
	  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	21bc      	movs	r1, #188	@ 0xbc
 8000962:	f249 2061 	movw	r0, #37473	@ 0x9261
 8000966:	f7ff fe4f 	bl	8000608 <BQ769x2_SetRegister>

	  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
	  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
	  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
	  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	21f7      	movs	r1, #247	@ 0xf7
 800096e:	f249 2062 	movw	r0, #37474	@ 0x9262
 8000972:	f7ff fe49 	bl	8000608 <BQ769x2_SetRegister>

	  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
	  BQ769x2_SetRegister(DefaultAlarmMask, 0xFFFF, 2);
 8000976:	2202      	movs	r2, #2
 8000978:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800097c:	f249 206d 	movw	r0, #37485	@ 0x926d
 8000980:	f7ff fe42 	bl	8000608 <BQ769x2_SetRegister>

	  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
	  // CUV Threshold is this value multiplied by 50.6mV

	  //BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
	  BQ769x2_SetRegister(CUVThreshold, 0x14, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	2114      	movs	r1, #20
 8000988:	f249 2075 	movw	r0, #37493	@ 0x9275
 800098c:	f7ff fe3c 	bl	8000608 <BQ769x2_SetRegister>

	  //BQ769x2_SetRegister(CUVThreshold, 0x31, 1);

	  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
	  // COV Threshold is this value multiplied by 50.6mV
	  BQ769x2_SetRegister(COVThreshold, 0x60, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	2160      	movs	r1, #96	@ 0x60
 8000994:	f249 2078 	movw	r0, #37496	@ 0x9278
 8000998:	f7ff fe36 	bl	8000608 <BQ769x2_SetRegister>

	  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
	  BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	2105      	movs	r1, #5
 80009a0:	f249 2080 	movw	r0, #37504	@ 0x9280
 80009a4:	f7ff fe30 	bl	8000608 <BQ769x2_SetRegister>

	  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
	  BQ769x2_SetRegister(OCD1Threshold, 0x03, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2103      	movs	r1, #3
 80009ac:	f249 2082 	movw	r0, #37506	@ 0x9282
 80009b0:	f7ff fe2a 	bl	8000608 <BQ769x2_SetRegister>

	  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
	  BQ769x2_SetRegister(SCDThreshold, 0x01, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2101      	movs	r1, #1
 80009b8:	f249 2086 	movw	r0, #37510	@ 0x9286
 80009bc:	f7ff fe24 	bl	8000608 <BQ769x2_SetRegister>

	  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
	  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2103      	movs	r1, #3
 80009c4:	f249 2087 	movw	r0, #37511	@ 0x9287
 80009c8:	f7ff fe1e 	bl	8000608 <BQ769x2_SetRegister>

	  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
	  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
	  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	f249 2095 	movw	r0, #37525	@ 0x9295
 80009d4:	f7ff fe18 	bl	8000608 <BQ769x2_SetRegister>


	  BQ769x2_SetRegister(MfgStatusInit, 0x0050, 2);
 80009d8:	2202      	movs	r2, #2
 80009da:	2150      	movs	r1, #80	@ 0x50
 80009dc:	f249 3043 	movw	r0, #37699	@ 0x9343
 80009e0:	f7ff fe12 	bl	8000608 <BQ769x2_SetRegister>


	  BQ769x2_SetRegister(FETOptions,0x3F ,1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	213f      	movs	r1, #63	@ 0x3f
 80009e8:	f249 3008 	movw	r0, #37640	@ 0x9308
 80009ec:	f7ff fe0c 	bl	8000608 <BQ769x2_SetRegister>



	  BQ769x2_SetRegister(BalancingConfiguration, 0x03, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2103      	movs	r1, #3
 80009f4:	f249 3035 	movw	r0, #37685	@ 0x9335
 80009f8:	f7ff fe06 	bl	8000608 <BQ769x2_SetRegister>

	  BQ769x2_SetRegister(CellBalanceMaxCells, 0x02, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2102      	movs	r1, #2
 8000a00:	f249 303a 	movw	r0, #37690	@ 0x933a
 8000a04:	f7ff fe00 	bl	8000608 <BQ769x2_SetRegister>

	  //BQ769x2_SetRegister(CellBalanceInterval, (uint8_t)(200), 1);
	  BQ769x2_SetRegister(DAConfiguration, 0x05, 1); //set user Amps to 1mA
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2105      	movs	r1, #5
 8000a0c:	f249 3003 	movw	r0, #37635	@ 0x9303
 8000a10:	f7ff fdfa 	bl	8000608 <BQ769x2_SetRegister>

	  BQ769x2_SetRegister(PredischargeStopDelta, 0x64, 1); //set pre-discharge delta to 2500mV
 8000a14:	2201      	movs	r2, #1
 8000a16:	2164      	movs	r1, #100	@ 0x64
 8000a18:	f249 300f 	movw	r0, #37647	@ 0x930f
 8000a1c:	f7ff fdf4 	bl	8000608 <BQ769x2_SetRegister>

	  //BQ769x2_SetRegister(PredischargeTimeout , 0x64, 1); //set pre-discharge delta to 2500mV

	  // Exit CONFIGUPDATE mode  - Subcommand 0x0092
	  CommandSubcommands(EXIT_CFGUPDATE);
 8000a20:	2092      	movs	r0, #146	@ 0x92
 8000a22:	f7ff ff13 	bl	800084c <CommandSubcommands>

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************


// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus() {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	// Read this register to find out why the ALERT pin was asserted
	DirectCommands(AlarmStatus, 0x00, R);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2062      	movs	r0, #98	@ 0x62
 8000a36:	f7ff ff27 	bl	8000888 <DirectCommands>
	return (RX_data[1]*256 + RX_data[0]);
 8000a3a:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <BQ769x2_ReadAlarmStatus+0x24>)
 8000a3c:	785b      	ldrb	r3, [r3, #1]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4a03      	ldr	r2, [pc, #12]	@ (8000a50 <BQ769x2_ReadAlarmStatus+0x24>)
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	b29b      	uxth	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000c4 	.word	0x200000c4

08000a54 <BQ769x2_ReadVoltage>:
// ********************************* BQ769x2 Measurement Commands   *****************************************


uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	//RX_data is global var
	DirectCommands(command, 0x00, R);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff0f 	bl	8000888 <DirectCommands>
	if(command >= Cell1Voltage && command <= Cell16Voltage) {//Cells 1 through 16 (0x14 to 0x32)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b13      	cmp	r3, #19
 8000a6e:	d90b      	bls.n	8000a88 <BQ769x2_ReadVoltage+0x34>
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b32      	cmp	r3, #50	@ 0x32
 8000a74:	d808      	bhi.n	8000a88 <BQ769x2_ReadVoltage+0x34>
		return (RX_data[1]*256 + RX_data[0]); //voltage is reported in mV
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <BQ769x2_ReadVoltage+0x54>)
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <BQ769x2_ReadVoltage+0x54>)
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	e00b      	b.n	8000aa0 <BQ769x2_ReadVoltage+0x4c>
	}
	else {//stack, Pack, LD
		return 10 * (RX_data[1]*256 + RX_data[0]); //voltage is reported in 0.01V units
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <BQ769x2_ReadVoltage+0x54>)
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <BQ769x2_ReadVoltage+0x54>)
 8000a90:	7812      	ldrb	r2, [r2, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	0092      	lsls	r2, r2, #2
 8000a9a:	4413      	add	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	b29b      	uxth	r3, r3
	}

}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200000c4 	.word	0x200000c4

08000aac <BQ769x2_ReadAllVoltages>:
	value_PFStatusC = (RX_data[1]*256 + RX_data[0]);
}

void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  int cellvoltageholder = Cell1Voltage; //Cell1Voltage is 0x14
 8000ab2:	2314      	movs	r3, #20
 8000ab4:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	e010      	b.n	8000ade <BQ769x2_ReadAllVoltages+0x32>
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ffc7 	bl	8000a54 <BQ769x2_ReadVoltage>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <BQ769x2_ReadAllVoltages+0x6c>)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	ddeb      	ble.n	8000abc <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 8000ae4:	2034      	movs	r0, #52	@ 0x34
 8000ae6:	f7ff ffb5 	bl	8000a54 <BQ769x2_ReadVoltage>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <BQ769x2_ReadAllVoltages+0x70>)
 8000af0:	801a      	strh	r2, [r3, #0]
  Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 8000af2:	2036      	movs	r0, #54	@ 0x36
 8000af4:	f7ff ffae 	bl	8000a54 <BQ769x2_ReadVoltage>
 8000af8:	4603      	mov	r3, r0
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <BQ769x2_ReadAllVoltages+0x74>)
 8000afe:	801a      	strh	r2, [r3, #0]
  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 8000b00:	2038      	movs	r0, #56	@ 0x38
 8000b02:	f7ff ffa7 	bl	8000a54 <BQ769x2_ReadVoltage>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <BQ769x2_ReadAllVoltages+0x78>)
 8000b0c:	801a      	strh	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000c8 	.word	0x200000c8
 8000b1c:	200000e8 	.word	0x200000e8
 8000b20:	200000ea 	.word	0x200000ea
 8000b24:	200000ec 	.word	0x200000ec

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2e:	f000 fbbd 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b32:	f000 f8b7 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b36:	f000 f973 	bl	8000e20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b3a:	f000 f91f 	bl	8000d7c <MX_I2C1_Init>
  MX_TIM10_Init();
 8000b3e:	f000 f94b 	bl	8000dd8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
//  uint16_t eeprom_address = 0x0010;
//  uint8_t eeprom_data = EEPROM_ReadByte(eeprom_address);
  HAL_TIM_Base_Start(&htim10);
 8000b42:	4854      	ldr	r0, [pc, #336]	@ (8000c94 <main+0x16c>)
 8000b44:	f003 fd94 	bl	8004670 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_SET);  // RST_SHUT pin set low
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b4e:	4852      	ldr	r0, [pc, #328]	@ (8000c98 <main+0x170>)
 8000b50:	f000 fe88 	bl	8001864 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000b54:	200a      	movs	r0, #10
 8000b56:	f000 fbeb 	bl	8001330 <HAL_Delay>
  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_RESET);  // RST_SHUT pin set low
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b60:	484d      	ldr	r0, [pc, #308]	@ (8000c98 <main+0x170>)
 8000b62:	f000 fe7f 	bl	8001864 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b6a:	f000 fbe1 	bl	8001330 <HAL_Delay>
//  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_SET);  // RST_SHUT pin set low
  HAL_GPIO_WritePin(DFETOFF_GPIO_Port, DFETOFF_Pin, GPIO_PIN_SET);  // DFETOFF pin (BOTHOFF) set low
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2101      	movs	r1, #1
 8000b72:	4849      	ldr	r0, [pc, #292]	@ (8000c98 <main+0x170>)
 8000b74:	f000 fe76 	bl	8001864 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CFETOFF_GPIO_Port, CFETOFF_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4846      	ldr	r0, [pc, #280]	@ (8000c98 <main+0x170>)
 8000b7e:	f000 fe71 	bl	8001864 <HAL_GPIO_WritePin>
  delayUS(10000);
 8000b82:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000b86:	f7ff fcb5 	bl	80004f4 <delayUS>
  alarm = BQ769x2_ReadAlarmStatus();
 8000b8a:	f7ff ff4f 	bl	8000a2c <BQ769x2_ReadAlarmStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b42      	ldr	r3, [pc, #264]	@ (8000c9c <main+0x174>)
 8000b94:	801a      	strh	r2, [r3, #0]
  	//CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
  	//delayUS(60000);
  	CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
 8000b96:	2012      	movs	r0, #18
 8000b98:	f7ff fe58 	bl	800084c <CommandSubcommands>
  	delayUS(60000);
 8000b9c:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000ba0:	f7ff fca8 	bl	80004f4 <delayUS>
  	BQ769x2_Init();  // Configure all of the BQ769x2 register settings
 8000ba4:	f7ff fea4 	bl	80008f0 <BQ769x2_Init>
  	delayUS(12000);
 8000ba8:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8000bac:	f7ff fca2 	bl	80004f4 <delayUS>
  	CommandSubcommands(RESET_PASSQ);
 8000bb0:	2082      	movs	r0, #130	@ 0x82
 8000bb2:	f7ff fe4b 	bl	800084c <CommandSubcommands>
  	CommandSubcommands(DSG_PDSG_OFF);
 8000bb6:	2093      	movs	r0, #147	@ 0x93
 8000bb8:	f7ff fe48 	bl	800084c <CommandSubcommands>
  	alarm = BQ769x2_ReadAlarmStatus();
 8000bbc:	f7ff ff36 	bl	8000a2c <BQ769x2_ReadAlarmStatus>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <main+0x174>)
 8000bc6:	801a      	strh	r2, [r3, #0]
  	 DirectCommands(SafetyStatusA, 0x00, R);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f7ff fe5b 	bl	8000888 <DirectCommands>
  		  DirectCommands(SafetyStatusB, 0x00, R);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f7ff fe56 	bl	8000888 <DirectCommands>
  		  DirectCommands(SafetyStatusC, 0x00, R);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2007      	movs	r0, #7
 8000be2:	f7ff fe51 	bl	8000888 <DirectCommands>
  		  DirectCommands(SafetyAlertA, 0x00, R);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2002      	movs	r0, #2
 8000bec:	f7ff fe4c 	bl	8000888 <DirectCommands>
  		  DirectCommands(SafetyAlertB, 0x00, R);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2004      	movs	r0, #4
 8000bf6:	f7ff fe47 	bl	8000888 <DirectCommands>
  		  DirectCommands(SafetyAlertC, 0x00, R);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f7ff fe42 	bl	8000888 <DirectCommands>
//  	delayUS(12000);
//
//  	CommandSubcommands(EXIT_CFGUPDATE);
//  	CommandSubcommands(FET_ENABLE); // Enable the CHG and DSG FETs
//  	delayUS(12000);
  	CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 8000c04:	209a      	movs	r0, #154	@ 0x9a
 8000c06:	f7ff fe21 	bl	800084c <CommandSubcommands>
  									   // demonstrate full-speed measurements in Normal mode.

  	delayUS(60000); delayUS(60000); delayUS(60000); delayUS(60000);  //wait to start measurements after FETs close
 8000c0a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000c0e:	f7ff fc71 	bl	80004f4 <delayUS>
 8000c12:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000c16:	f7ff fc6d 	bl	80004f4 <delayUS>
 8000c1a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000c1e:	f7ff fc69 	bl	80004f4 <delayUS>
 8000c22:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000c26:	f7ff fc65 	bl	80004f4 <delayUS>

  	uint16_t manuStatus = BQ769x2_ReadRegister(MANUFACTURINGSTATUS);
 8000c2a:	2057      	movs	r0, #87	@ 0x57
 8000c2c:	f7ff fdbe 	bl	80007ac <BQ769x2_ReadRegister>
 8000c30:	4603      	mov	r3, r0
 8000c32:	81fb      	strh	r3, [r7, #14]
  	uint16_t manuInit = BQ769x2_ReadRegister(MfgStatusInit);
 8000c34:	f249 3043 	movw	r0, #37699	@ 0x9343
 8000c38:	f7ff fdb8 	bl	80007ac <BQ769x2_ReadRegister>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	81bb      	strh	r3, [r7, #12]
  	uint16_t manuData = BQ769x2_ReadRegister(MANU_DATA);
 8000c40:	2070      	movs	r0, #112	@ 0x70
 8000c42:	f7ff fdb3 	bl	80007ac <BQ769x2_ReadRegister>
 8000c46:	4603      	mov	r3, r0
 8000c48:	817b      	strh	r3, [r7, #10]
  	uint16_t FET_options = BQ769x2_ReadRegister(FETOptions);
 8000c4a:	f249 3008 	movw	r0, #37640	@ 0x9308
 8000c4e:	f7ff fdad 	bl	80007ac <BQ769x2_ReadRegister>
 8000c52:	4603      	mov	r3, r0
 8000c54:	813b      	strh	r3, [r7, #8]
  	uint16_t DA_config = BQ769x2_ReadRegister(DAConfiguration);
 8000c56:	f249 3003 	movw	r0, #37635	@ 0x9303
 8000c5a:	f7ff fda7 	bl	80007ac <BQ769x2_ReadRegister>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
  	alarm = BQ769x2_ReadAlarmStatus();
 8000c62:	f7ff fee3 	bl	8000a2c <BQ769x2_ReadAlarmStatus>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <main+0x174>)
 8000c6c:	801a      	strh	r2, [r3, #0]
//  	CommandSubcommands(DSGTEST);

  	//Subcommands(CB_ACTIVE_CELLS, 0x0001, W2);
  	//Subcommands(CB_ACTIVE_CELLS, 0x0000, R);

  	CommandSubcommands(PDSGTEST);
 8000c6e:	201c      	movs	r0, #28
 8000c70:	f7ff fdec 	bl	800084c <CommandSubcommands>
  	CommandSubcommands(PCHGTEST);
 8000c74:	201e      	movs	r0, #30
 8000c76:	f7ff fde9 	bl	800084c <CommandSubcommands>
////	CommandSubcommands(DSGTEST);
//	CommandSubcommands(SET_CFGUPDATE);

//	 uint16_t addr = BQ769x2_ReadRegister(I2CAddress);

  	BQ769x2_ReadAllVoltages();
 8000c7a:	f7ff ff17 	bl	8000aac <BQ769x2_ReadAllVoltages>

  	while(1){

  		if(LD_Voltage > 4){
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <main+0x178>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d9fb      	bls.n	8000c7e <main+0x156>
  		  		CommandSubcommands(ALL_FETS_ON);
 8000c86:	2096      	movs	r0, #150	@ 0x96
 8000c88:	f7ff fde0 	bl	800084c <CommandSubcommands>
  		  	BQ769x2_ReadAllVoltages();
 8000c8c:	f7ff ff0e 	bl	8000aac <BQ769x2_ReadAllVoltages>
  		if(LD_Voltage > 4){
 8000c90:	e7f5      	b.n	8000c7e <main+0x156>
 8000c92:	bf00      	nop
 8000c94:	2000007c 	.word	0x2000007c
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	200000ee 	.word	0x200000ee
 8000ca0:	200000ec 	.word	0x200000ec

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	@ 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2234      	movs	r2, #52	@ 0x34
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f006 fb3a 	bl	800732c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <SystemClock_Config+0xd0>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd0:	4a28      	ldr	r2, [pc, #160]	@ (8000d74 <SystemClock_Config+0xd0>)
 8000cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd8:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <SystemClock_Config+0xd0>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <SystemClock_Config+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a22      	ldr	r2, [pc, #136]	@ (8000d78 <SystemClock_Config+0xd4>)
 8000cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <SystemClock_Config+0xd4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d14:	2308      	movs	r3, #8
 8000d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 164;
 8000d18:	23a4      	movs	r3, #164	@ 0xa4
 8000d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 f9b1 	bl	8004094 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d38:	f000 f924 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d40:	2302      	movs	r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2105      	movs	r1, #5
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fe34 	bl	80039c8 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d66:	f000 f90d 	bl	8000f84 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	@ 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d82:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <MX_I2C1_Init+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d88:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_I2C1_Init+0x58>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000dba:	f000 fd6d 	bl	8001898 <HAL_I2C_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc4:	f000 f8de 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000028 	.word	0x20000028
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	000186a0 	.word	0x000186a0

08000dd8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000dde:	4a0f      	ldr	r2, [pc, #60]	@ (8000e1c <MX_TIM10_Init+0x44>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_TIM10_Init+0x40>)
 8000e04:	f003 fbe4 	bl	80045d0 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e0e:	f000 f8b9 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2000007c 	.word	0x2000007c
 8000e1c:	40014400 	.word	0x40014400

08000e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b46      	ldr	r3, [pc, #280]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a45      	ldr	r2, [pc, #276]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b3f      	ldr	r3, [pc, #252]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b3c      	ldr	r3, [pc, #240]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a37      	ldr	r2, [pc, #220]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b35      	ldr	r3, [pc, #212]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a30      	ldr	r2, [pc, #192]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f54 <MX_GPIO_Init+0x134>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DFETOFF_Pin|CFETOFF_Pin|PC7_Pin|RST_SHUT_Pin
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f640 2183 	movw	r1, #2691	@ 0xa83
 8000eac:	482a      	ldr	r0, [pc, #168]	@ (8000f58 <MX_GPIO_Init+0x138>)
 8000eae:	f000 fcd9 	bl	8001864 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	4829      	ldr	r0, [pc, #164]	@ (8000f5c <MX_GPIO_Init+0x13c>)
 8000eb8:	f000 fcd4 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ALERT_PIN_2_Pin */
  GPIO_InitStruct.Pin = ALERT_PIN_2_Pin;
 8000ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_PIN_2_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4821      	ldr	r0, [pc, #132]	@ (8000f58 <MX_GPIO_Init+0x138>)
 8000ed2:	f000 fb33 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFETOFF_Pin PC7_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DFETOFF_Pin|PC7_Pin|BUZZER_Pin;
 8000ed6:	f640 0381 	movw	r3, #2177	@ 0x881
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	481a      	ldr	r0, [pc, #104]	@ (8000f58 <MX_GPIO_Init+0x138>)
 8000ef0:	f000 fb24 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : CFETOFF_Pin RST_SHUT_Pin */
  GPIO_InitStruct.Pin = CFETOFF_Pin|RST_SHUT_Pin;
 8000ef4:	f240 2302 	movw	r3, #514	@ 0x202
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <MX_GPIO_Init+0x138>)
 8000f0e:	f000 fb15 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f12:	2301      	movs	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <MX_GPIO_Init+0x13c>)
 8000f2a:	f000 fb07 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_GPIO_Init+0x13c>)
 8000f46:	f000 faf9 	bl	800153c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f72:	f000 f9bd 	bl	80012f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40001000 	.word	0x40001000

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <Error_Handler+0x8>

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_I2C_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12c      	bne.n	800105c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001024:	2312      	movs	r3, #18
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001030:	2304      	movs	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	480c      	ldr	r0, [pc, #48]	@ (800106c <HAL_I2C_MspInit+0x8c>)
 800103c:	f000 fa7e 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_I2C_MspInit+0x88>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	@ 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_TIM_Base_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_TIM_Base_MspInit+0x40>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <HAL_TIM_Base_MspInit+0x40>)
 800108c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001090:	6453      	str	r3, [r2, #68]	@ 0x44
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <HAL_TIM_Base_MspInit+0x40>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40014400 	.word	0x40014400
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	@ 0x38
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <HAL_InitTick+0xe4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	4a32      	ldr	r2, [pc, #200]	@ (8001198 <HAL_InitTick+0xe4>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <HAL_InitTick+0xe4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e0:	f107 0210 	add.w	r2, r7, #16
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fd72 	bl	8003bd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010fa:	f002 fd57 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 80010fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8001100:	e004      	b.n	800110c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001102:	f002 fd53 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8001106:	4603      	mov	r3, r0
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800110c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110e:	4a23      	ldr	r2, [pc, #140]	@ (800119c <HAL_InitTick+0xe8>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	0c9b      	lsrs	r3, r3, #18
 8001116:	3b01      	subs	r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <HAL_InitTick+0xec>)
 800111c:	4a21      	ldr	r2, [pc, #132]	@ (80011a4 <HAL_InitTick+0xf0>)
 800111e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <HAL_InitTick+0xec>)
 8001122:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001126:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001128:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <HAL_InitTick+0xec>)
 800112a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800112c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <HAL_InitTick+0xec>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <HAL_InitTick+0xec>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_InitTick+0xec>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001140:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <HAL_InitTick+0xec>)
 8001142:	f003 fa45 	bl	80045d0 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800114c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001150:	2b00      	cmp	r3, #0
 8001152:	d11b      	bne.n	800118c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001154:	4812      	ldr	r0, [pc, #72]	@ (80011a0 <HAL_InitTick+0xec>)
 8001156:	f003 faf3 	bl	8004740 <HAL_TIM_Base_Start_IT>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001160:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001164:	2b00      	cmp	r3, #0
 8001166:	d111      	bne.n	800118c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001168:	2036      	movs	r0, #54	@ 0x36
 800116a:	f000 f9d9 	bl	8001520 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d808      	bhi.n	8001186 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2036      	movs	r0, #54	@ 0x36
 800117a:	f000 f9b5 	bl	80014e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_InitTick+0xf4>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e002      	b.n	800118c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800118c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001190:	4618      	mov	r0, r3
 8001192:	3738      	adds	r7, #56	@ 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	431bde83 	.word	0x431bde83
 80011a0:	200000f0 	.word	0x200000f0
 80011a4:	40001000 	.word	0x40001000
 80011a8:	20000004 	.word	0x20000004

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM6_DAC_IRQHandler+0x10>)
 8001212:	f003 fb05 	bl	8004820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000f0 	.word	0x200000f0

08001220 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <OTG_FS_IRQHandler+0x10>)
 8001226:	f001 fb5b 	bl	80028e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000140 	.word	0x20000140

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800125c:	f7ff ffea 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001286:	f006 f859 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fc4d 	bl	8000b28 <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800129c:	080073d8 	.word	0x080073d8
  ldr r2, =_sbss
 80012a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012a4:	20000624 	.word	0x20000624

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	@ (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	@ (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 f8fc 	bl	80014d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f7ff feea 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff fe56 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000138 	.word	0x20000138

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	@ (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000138 	.word	0x20000138

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	@ (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	@ (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	@ (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ff4c 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fa:	f7ff ff61 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 80014fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6978      	ldr	r0, [r7, #20]
 8001506:	f7ff ffb1 	bl	800146c <NVIC_EncodePriority>
 800150a:	4602      	mov	r2, r0
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff80 	bl	8001418 <__NVIC_SetPriority>
}
 8001518:	bf00      	nop
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff54 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	@ 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e165      	b.n	8001824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8154 	bne.w	800181e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80ae 	beq.w	800181e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b5d      	ldr	r3, [pc, #372]	@ (800183c <HAL_GPIO_Init+0x300>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	4a5c      	ldr	r2, [pc, #368]	@ (800183c <HAL_GPIO_Init+0x300>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d2:	4b5a      	ldr	r3, [pc, #360]	@ (800183c <HAL_GPIO_Init+0x300>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a58      	ldr	r2, [pc, #352]	@ (8001840 <HAL_GPIO_Init+0x304>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	@ (8001844 <HAL_GPIO_Init+0x308>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d025      	beq.n	8001756 <HAL_GPIO_Init+0x21a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	@ (8001848 <HAL_GPIO_Init+0x30c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d01f      	beq.n	8001752 <HAL_GPIO_Init+0x216>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	@ (800184c <HAL_GPIO_Init+0x310>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d019      	beq.n	800174e <HAL_GPIO_Init+0x212>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	@ (8001850 <HAL_GPIO_Init+0x314>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d013      	beq.n	800174a <HAL_GPIO_Init+0x20e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	@ (8001854 <HAL_GPIO_Init+0x318>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00d      	beq.n	8001746 <HAL_GPIO_Init+0x20a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	@ (8001858 <HAL_GPIO_Init+0x31c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <HAL_GPIO_Init+0x206>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a49      	ldr	r2, [pc, #292]	@ (800185c <HAL_GPIO_Init+0x320>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_GPIO_Init+0x202>
 800173a:	2306      	movs	r3, #6
 800173c:	e00c      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 800173e:	2307      	movs	r3, #7
 8001740:	e00a      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001742:	2305      	movs	r3, #5
 8001744:	e008      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001746:	2304      	movs	r3, #4
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 800174a:	2303      	movs	r3, #3
 800174c:	e004      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 800174e:	2302      	movs	r3, #2
 8001750:	e002      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_GPIO_Init+0x21c>
 8001756:	2300      	movs	r3, #0
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f002 0203 	and.w	r2, r2, #3
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	4093      	lsls	r3, r2
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001768:	4935      	ldr	r1, [pc, #212]	@ (8001840 <HAL_GPIO_Init+0x304>)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <HAL_GPIO_Init+0x324>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a31      	ldr	r2, [pc, #196]	@ (8001860 <HAL_GPIO_Init+0x324>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <HAL_GPIO_Init+0x324>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a26      	ldr	r2, [pc, #152]	@ (8001860 <HAL_GPIO_Init+0x324>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ca:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_GPIO_Init+0x324>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_GPIO_Init+0x324>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <HAL_GPIO_Init+0x324>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001818:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <HAL_GPIO_Init+0x324>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3301      	adds	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b0f      	cmp	r3, #15
 8001828:	f67f ae96 	bls.w	8001558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40013800 	.word	0x40013800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40021400 	.word	0x40021400
 800185c:	40021800 	.word	0x40021800
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e12b      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fb8e 	bl	8000fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	@ 0x24
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f002 f956 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a81      	ldr	r2, [pc, #516]	@ (8001b0c <HAL_I2C_Init+0x274>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d807      	bhi.n	800191c <HAL_I2C_Init+0x84>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a80      	ldr	r2, [pc, #512]	@ (8001b10 <HAL_I2C_Init+0x278>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e006      	b.n	800192a <HAL_I2C_Init+0x92>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b14 <HAL_I2C_Init+0x27c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	bf94      	ite	ls
 8001924:	2301      	movls	r3, #1
 8001926:	2300      	movhi	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0e7      	b.n	8001b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a78      	ldr	r2, [pc, #480]	@ (8001b18 <HAL_I2C_Init+0x280>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a6a      	ldr	r2, [pc, #424]	@ (8001b0c <HAL_I2C_Init+0x274>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d802      	bhi.n	800196c <HAL_I2C_Init+0xd4>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	e009      	b.n	8001980 <HAL_I2C_Init+0xe8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a69      	ldr	r2, [pc, #420]	@ (8001b1c <HAL_I2C_Init+0x284>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001992:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	495c      	ldr	r1, [pc, #368]	@ (8001b0c <HAL_I2C_Init+0x274>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d819      	bhi.n	80019d4 <HAL_I2C_Init+0x13c>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e59      	subs	r1, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ae:	1c59      	adds	r1, r3, #1
 80019b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019b4:	400b      	ands	r3, r1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00a      	beq.n	80019d0 <HAL_I2C_Init+0x138>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e59      	subs	r1, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c8:	3301      	adds	r3, #1
 80019ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ce:	e051      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e04f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_I2C_Init+0x168>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e012      	b.n	8001a26 <HAL_I2C_Init+0x18e>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Init+0x196>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e022      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <HAL_I2C_Init+0x1bc>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e58      	subs	r0, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	440b      	add	r3, r1
 8001a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a52:	e00f      	b.n	8001a74 <HAL_I2C_Init+0x1dc>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1e58      	subs	r0, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	0099      	lsls	r1, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001aa2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6911      	ldr	r1, [r2, #16]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68d2      	ldr	r2, [r2, #12]
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	000186a0 	.word	0x000186a0
 8001b10:	001e847f 	.word	0x001e847f
 8001b14:	003d08ff 	.word	0x003d08ff
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	817b      	strh	r3, [r7, #10]
 8001b32:	460b      	mov	r3, r1
 8001b34:	813b      	strh	r3, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b3a:	f7ff fbed 	bl	8001318 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	f040 80d9 	bne.w	8001d00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2319      	movs	r3, #25
 8001b54:	2201      	movs	r2, #1
 8001b56:	496d      	ldr	r1, [pc, #436]	@ (8001d0c <HAL_I2C_Mem_Write+0x1ec>)
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fc8b 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0cc      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_I2C_Mem_Write+0x56>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0c5      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d007      	beq.n	8001b9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001baa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2221      	movs	r2, #33	@ 0x21
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2240      	movs	r2, #64	@ 0x40
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a3a      	ldr	r2, [r7, #32]
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a4d      	ldr	r2, [pc, #308]	@ (8001d10 <HAL_I2C_Mem_Write+0x1f0>)
 8001bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bde:	88f8      	ldrh	r0, [r7, #6]
 8001be0:	893a      	ldrh	r2, [r7, #8]
 8001be2:	8979      	ldrh	r1, [r7, #10]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	4603      	mov	r3, r0
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fac2 	bl	8002178 <I2C_RequestMemoryWrite>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d052      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e081      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fd50 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d107      	bne.n	8001c26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d11b      	bne.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d017      	beq.n	8001ca0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1aa      	bne.n	8001bfe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fd43 	bl	8002738 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d107      	bne.n	8001cd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e016      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e000      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d00:	2302      	movs	r3, #2
  }
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	00100002 	.word	0x00100002
 8001d10:	ffff0000 	.word	0xffff0000

08001d14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	@ 0x30
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	817b      	strh	r3, [r7, #10]
 8001d26:	460b      	mov	r3, r1
 8001d28:	813b      	strh	r3, [r7, #8]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d2e:	f7ff faf3 	bl	8001318 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	f040 8214 	bne.w	800216a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2319      	movs	r3, #25
 8001d48:	2201      	movs	r2, #1
 8001d4a:	497b      	ldr	r1, [pc, #492]	@ (8001f38 <HAL_I2C_Mem_Read+0x224>)
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fb91 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e207      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x56>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e200      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d007      	beq.n	8001d90 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2222      	movs	r2, #34	@ 0x22
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2240      	movs	r2, #64	@ 0x40
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4a5b      	ldr	r2, [pc, #364]	@ (8001f3c <HAL_I2C_Mem_Read+0x228>)
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dd2:	88f8      	ldrh	r0, [r7, #6]
 8001dd4:	893a      	ldrh	r2, [r7, #8]
 8001dd6:	8979      	ldrh	r1, [r7, #10]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	4603      	mov	r3, r0
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 fa5e 	bl	80022a4 <I2C_RequestMemoryRead>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1bc      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e190      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d11b      	bne.n	8001e62 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e170      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d11b      	bne.n	8001ea2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	e150      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001eb8:	e144      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	f200 80f1 	bhi.w	80020a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d123      	bne.n	8001f14 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ece:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fc79 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e145      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f12:	e117      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d14e      	bne.n	8001fba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f22:	2200      	movs	r2, #0
 8001f24:	4906      	ldr	r1, [pc, #24]	@ (8001f40 <HAL_I2C_Mem_Read+0x22c>)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 faa4 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d008      	beq.n	8001f44 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e11a      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
 8001f36:	bf00      	nop
 8001f38:	00100002 	.word	0x00100002
 8001f3c:	ffff0000 	.word	0xffff0000
 8001f40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fb8:	e0c4      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	496c      	ldr	r1, [pc, #432]	@ (8002174 <HAL_I2C_Mem_Read+0x460>)
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fa55 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0cb      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201c:	2200      	movs	r2, #0
 800201e:	4955      	ldr	r1, [pc, #340]	@ (8002174 <HAL_I2C_Mem_Read+0x460>)
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa27 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e09d      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020a4:	e04e      	b.n	8002144 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fb8c 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e058      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d124      	bne.n	8002144 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002110:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	f47f aeb6 	bne.w	8001eba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
  }
}
 800216c:	4618      	mov	r0, r3
 800216e:	3728      	adds	r7, #40	@ 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	00010004 	.word	0x00010004

08002178 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f960 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c8:	d103      	bne.n	80021d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e05f      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	492d      	ldr	r1, [pc, #180]	@ (80022a0 <I2C_RequestMemoryWrite+0x128>)
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f9bb 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e04c      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fa46 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	2b04      	cmp	r3, #4
 8002228:	d107      	bne.n	800223a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e02b      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002244:	893b      	ldrh	r3, [r7, #8]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	e021      	b.n	8002294 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	0a1b      	lsrs	r3, r3, #8
 8002254:	b29b      	uxth	r3, r3
 8002256:	b2da      	uxtb	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	6a39      	ldr	r1, [r7, #32]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fa20 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e005      	b.n	8002296 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800228a:	893b      	ldrh	r3, [r7, #8]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00010002 	.word	0x00010002

080022a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	460b      	mov	r3, r1
 80022b8:	813b      	strh	r3, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f8c2 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002304:	d103      	bne.n	800230e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800230c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0aa      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002320:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	4952      	ldr	r1, [pc, #328]	@ (8002470 <I2C_RequestMemoryRead+0x1cc>)
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f91d 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e097      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800234e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f9a8 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002374:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e076      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002380:	893b      	ldrh	r3, [r7, #8]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e021      	b.n	80023d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800238c:	893b      	ldrh	r3, [r7, #8]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b2da      	uxtb	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f982 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d107      	bne.n	80023c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e050      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023c6:	893b      	ldrh	r3, [r7, #8]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f967 	bl	80026a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e035      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800240a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	2200      	movs	r2, #0
 8002414:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f000 f82b 	bl	8002474 <I2C_WaitOnFlagUntilTimeout>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00d      	beq.n	8002440 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002432:	d103      	bne.n	800243c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e013      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002440:	897b      	ldrh	r3, [r7, #10]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	6a3a      	ldr	r2, [r7, #32]
 8002454:	4906      	ldr	r1, [pc, #24]	@ (8002470 <I2C_RequestMemoryRead+0x1cc>)
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f886 	bl	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	00010002 	.word	0x00010002

08002474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002484:	e048      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800248c:	d044      	beq.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe ff43 	bl	8001318 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d139      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	0c1b      	lsrs	r3, r3, #16
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d10d      	bne.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	43da      	mvns	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	e00c      	b.n	80024e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	43da      	mvns	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d116      	bne.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e023      	b.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10d      	bne.n	800253e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	43da      	mvns	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	e00c      	b.n	8002558 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	429a      	cmp	r2, r3
 800255c:	d093      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002576:	e071      	b.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d123      	bne.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f043 0204 	orr.w	r2, r3, #4
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e067      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025d6:	d041      	beq.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d8:	f7fe fe9e 	bl	8001318 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d136      	bne.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e00b      	b.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	43da      	mvns	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e021      	b.n	80026a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10c      	bne.n	8002680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e00b      	b.n	8002698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af6d 	bne.w	8002578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f8e3 	bl	8002882 <I2C_IsAcknowledgeFailed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e034      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026cc:	d028      	beq.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7fe fe23 	bl	8001318 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11d      	bne.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b80      	cmp	r3, #128	@ 0x80
 80026f0:	d016      	beq.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f043 0220 	orr.w	r2, r3, #32
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e007      	b.n	8002730 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b80      	cmp	r3, #128	@ 0x80
 800272c:	d1c3      	bne.n	80026b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002744:	e034      	b.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f89b 	bl	8002882 <I2C_IsAcknowledgeFailed>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800275c:	d028      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fddb 	bl	8001318 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11d      	bne.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d016      	beq.n	80027b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d1c3      	bne.n	8002746 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d4:	e049      	b.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d119      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e030      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe fd7e 	bl	8001318 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002838:	2b40      	cmp	r3, #64	@ 0x40
 800283a:	d016      	beq.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b40      	cmp	r3, #64	@ 0x40
 8002876:	d1ae      	bne.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002898:	d11b      	bne.n	80028d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b08d      	sub	sp, #52	@ 0x34
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 f84f 	bl	800599a <USB_GetMode>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 84b9 	bne.w	8003276 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 ffb3 	bl	8005874 <USB_ReadInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 84af 	beq.w	8003274 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f002 ffa0 	bl	8005874 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d107      	bne.n	800294e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 0202 	and.w	r2, r2, #2
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f002 ff8e 	bl	8005874 <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b10      	cmp	r3, #16
 8002960:	d161      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0210 	bic.w	r2, r2, #16
 8002970:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	0c5b      	lsrs	r3, r3, #17
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	2b02      	cmp	r3, #2
 800299c:	d124      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d035      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	6a38      	ldr	r0, [r7, #32]
 80029be:	f002 fe07 	bl	80055d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ce:	441a      	add	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e0:	441a      	add	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	615a      	str	r2, [r3, #20]
 80029e6:	e016      	b.n	8002a16 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	0c5b      	lsrs	r3, r3, #17
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d110      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029fa:	2208      	movs	r2, #8
 80029fc:	4619      	mov	r1, r3
 80029fe:	6a38      	ldr	r0, [r7, #32]
 8002a00:	f002 fde6 	bl	80055d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a10:	441a      	add	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699a      	ldr	r2, [r3, #24]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0210 	orr.w	r2, r2, #16
 8002a24:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 ff22 	bl	8005874 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a36:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a3a:	f040 80a7 	bne.w	8002b8c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 ff27 	bl	800589a <USB_ReadDevAllOutEpInterrupt>
 8002a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a4e:	e099      	b.n	8002b84 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 808e 	beq.w	8002b78 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 ff4b 	bl	8005902 <USB_ReadDevOutEPInterrupt>
 8002a6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a84:	461a      	mov	r2, r3
 8002a86:	2301      	movs	r3, #1
 8002a88:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fe6d 	bl	800376c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2308      	movs	r3, #8
 8002aac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 ff43 	bl	800393c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	2310      	movs	r3, #16
 8002ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d030      	beq.n	8002b3e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae4:	2b80      	cmp	r3, #128	@ 0x80
 8002ae6:	d109      	bne.n	8002afc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002afa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	78db      	ldrb	r3, [r3, #3]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d108      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4619      	mov	r1, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f004 fa54 	bl	8006fd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b54:	461a      	mov	r2, r3
 8002b56:	2320      	movs	r3, #32
 8002b58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b70:	461a      	mov	r2, r3
 8002b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b76:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f af62 	bne.w	8002a50 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 fe6f 	bl	8005874 <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ba0:	f040 80db 	bne.w	8002d5a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fe90 	bl	80058ce <USB_ReadDevAllInEpInterrupt>
 8002bae:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002bb4:	e0cd      	b.n	8002d52 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80c2 	beq.w	8002d46 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 feb6 	bl	800593e <USB_ReadDevInEPInterrupt>
 8002bd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d057      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	2201      	movs	r2, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69f9      	ldr	r1, [r7, #28]
 8002bfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bfe:	4013      	ands	r3, r2
 8002c00:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2301      	movs	r3, #1
 8002c12:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	799b      	ldrb	r3, [r3, #6]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d132      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3320      	adds	r3, #32
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4403      	add	r3, r0
 8002c3c:	331c      	adds	r3, #28
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4419      	add	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4403      	add	r3, r0
 8002c50:	3320      	adds	r3, #32
 8002c52:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d113      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x3a2>
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3324      	adds	r3, #36	@ 0x24
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	f002 febd 	bl	80059fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	4619      	mov	r1, r3
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f004 f91f 	bl	8006ecc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	015a      	lsls	r2, r3, #5
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2340      	movs	r3, #64	@ 0x40
 8002ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cee:	6a38      	ldr	r0, [r7, #32]
 8002cf0:	f002 f810 	bl	8004d14 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	3310      	adds	r3, #16
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	3304      	adds	r3, #4
 8002d06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	78db      	ldrb	r3, [r3, #3]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f004 f96b 	bl	8006ff8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2302      	movs	r3, #2
 8002d32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fc86 	bl	8003652 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	3301      	adds	r3, #1
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f af2e 	bne.w	8002bb6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fd88 	bl	8005874 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d6e:	d122      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d96:	2100      	movs	r1, #0
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f004 fa4d 	bl	8007238 <HAL_PCDEx_LPM_Callback>
 8002d9e:	e002      	b.n	8002da6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f004 f909 	bl	8006fb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fd5a 	bl	8005874 <USB_ReadInterrupts>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dca:	d112      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f004 f8c5 	bl	8006f6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002df0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fd3c 	bl	8005874 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e06:	d121      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002e16:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d111      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f004 f9fa 	bl	8007238 <HAL_PCDEx_LPM_Callback>
 8002e44:	e002      	b.n	8002e4c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f004 f890 	bl	8006f6c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fd0f 	bl	8005874 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e60:	f040 80b7 	bne.w	8002fd2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2110      	movs	r1, #16
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 ff48 	bl	8004d14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e88:	e046      	b.n	8002f18 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e96:	461a      	mov	r2, r3
 8002e98:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eae:	0151      	lsls	r1, r2, #5
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	440a      	add	r2, r1
 8002eb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002eb8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ebc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ed0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002eec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ef0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f10:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	3301      	adds	r3, #1
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	791b      	ldrb	r3, [r3, #4]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d3b2      	bcc.n	8002e8a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f32:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002f36:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7bdb      	ldrb	r3, [r3, #15]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d016      	beq.n	8002f6e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f50:	f043 030b 	orr.w	r3, r3, #11
 8002f54:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f66:	f043 030b 	orr.w	r3, r3, #11
 8002f6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6c:	e015      	b.n	8002f9a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f80:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f84:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f94:	f043 030b 	orr.w	r3, r3, #11
 8002f98:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fa8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002fac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f002 fd1d 	bl	80059fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002fd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 fc4c 	bl	8005874 <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fe6:	d123      	bne.n	8003030 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fce2 	bl	80059b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 febe 	bl	8004d78 <USB_GetDevSpeed>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681c      	ldr	r4, [r3, #0]
 8003008:	f000 fdc4 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 800300c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003012:	461a      	mov	r2, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f001 fddb 	bl	8004bd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f003 ff7e 	bl	8006f1c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fc1d 	bl	8005874 <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d10a      	bne.n	800305a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f003 ff5b 	bl	8006f00 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f002 0208 	and.w	r2, r2, #8
 8003058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fc08 	bl	8005874 <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b80      	cmp	r3, #128	@ 0x80
 800306c:	d123      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800307a:	2301      	movs	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
 800307e:	e014      	b.n	80030aa <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 faa6 	bl	80035f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	3301      	adds	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	461a      	mov	r2, r3
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d3e4      	bcc.n	8003080 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 fbda 	bl	8005874 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030ca:	d13c      	bne.n	8003146 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030cc:	2301      	movs	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d0:	e02b      	b.n	800312a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3318      	adds	r3, #24
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d115      	bne.n	8003124 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da12      	bge.n	8003124 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3317      	adds	r3, #23
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa66 	bl	80035f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	3301      	adds	r3, #1
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	791b      	ldrb	r3, [r3, #4]
 800312e:	461a      	mov	r2, r3
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	4293      	cmp	r3, r2
 8003134:	d3cd      	bcc.n	80030d2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fb92 	bl	8005874 <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800315a:	d156      	bne.n	800320a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800315c:	2301      	movs	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003160:	e045      	b.n	80031ee <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d12e      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800318a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	da2b      	bge.n	80031e8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800319c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d121      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a8:	4613      	mov	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031e4:	6053      	str	r3, [r2, #4]
            break;
 80031e6:	e008      	b.n	80031fa <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	3301      	adds	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	791b      	ldrb	r3, [r3, #4]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d3b3      	bcc.n	8003162 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fb30 	bl	8005874 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800321e:	d10a      	bne.n	8003236 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f003 fefb 	bl	800701c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003234:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f002 fb1a 	bl	8005874 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d115      	bne.n	8003276 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f003 feeb 	bl	8007038 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e000      	b.n	8003276 <HAL_PCD_IRQHandler+0x996>
      return;
 8003274:	bf00      	nop
    }
  }
}
 8003276:	3734      	adds	r7, #52	@ 0x34
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}

0800327c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_PCD_SetAddress+0x1a>
 8003292:	2302      	movs	r3, #2
 8003294:	e012      	b.n	80032bc <HAL_PCD_SetAddress+0x40>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fabb 	bl	8005828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4603      	mov	r3, r0
 80032d4:	70fb      	strb	r3, [r7, #3]
 80032d6:	460b      	mov	r3, r1
 80032d8:	803b      	strh	r3, [r7, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da0f      	bge.n	800330a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	3310      	adds	r3, #16
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	3304      	adds	r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	705a      	strb	r2, [r3, #1]
 8003308:	e00f      	b.n	800332a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	3304      	adds	r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003336:	883a      	ldrh	r2, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	78ba      	ldrb	r2, [r7, #2]
 8003340:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	785b      	ldrb	r3, [r3, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003354:	78bb      	ldrb	r3, [r7, #2]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d102      	bne.n	8003360 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_PCD_EP_Open+0xaa>
 800336a:	2302      	movs	r3, #2
 800336c:	e00e      	b.n	800338c <HAL_PCD_EP_Open+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	4618      	mov	r0, r3
 800337e:	f001 fd20 	bl	8004dc2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800338a:	7afb      	ldrb	r3, [r7, #11]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	7afb      	ldrb	r3, [r7, #11]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033d6:	7afb      	ldrb	r3, [r7, #11]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	799b      	ldrb	r3, [r3, #6]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	799b      	ldrb	r3, [r3, #6]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6979      	ldr	r1, [r7, #20]
 80033fc:	f001 fd68 	bl	8004ed0 <USB_EPStartXfer>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	460b      	mov	r3, r1
 8003418:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341a:	7afb      	ldrb	r3, [r7, #11]
 800341c:	f003 020f 	and.w	r2, r3, #15
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	3310      	adds	r3, #16
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2201      	movs	r2, #1
 8003448:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	799b      	ldrb	r3, [r3, #6]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	799b      	ldrb	r3, [r3, #6]
 800346c:	461a      	mov	r2, r3
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	f001 fd2e 	bl	8004ed0 <USB_EPStartXfer>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	7912      	ldrb	r2, [r2, #4]
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e04f      	b.n	800353c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800349c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da0f      	bge.n	80034c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3310      	adds	r3, #16
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
 80034c2:	e00d      	b.n	80034e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	3304      	adds	r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_PCD_EP_SetStall+0x82>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e01d      	b.n	800353c <HAL_PCD_EP_SetStall+0xbe>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68f9      	ldr	r1, [r7, #12]
 800350e:	4618      	mov	r0, r3
 8003510:	f002 f8b6 	bl	8005680 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7999      	ldrb	r1, [r3, #6]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800352c:	461a      	mov	r2, r3
 800352e:	f002 fa65 	bl	80059fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	7912      	ldrb	r2, [r2, #4]
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e042      	b.n	80035e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003566:	2b00      	cmp	r3, #0
 8003568:	da0f      	bge.n	800358a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	3310      	adds	r3, #16
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	3304      	adds	r3, #4
 8003580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	705a      	strb	r2, [r3, #1]
 8003588:	e00f      	b.n	80035aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	4413      	add	r3, r2
 80035a0:	3304      	adds	r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_PCD_EP_ClrStall+0x86>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e00e      	b.n	80035e8 <HAL_PCD_EP_ClrStall+0xa4>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 f8bf 	bl	800575c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003600:	2b00      	cmp	r3, #0
 8003602:	da0c      	bge.n	800361e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	f003 020f 	and.w	r2, r3, #15
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	3310      	adds	r3, #16
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	3304      	adds	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e00c      	b.n	8003638 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68f9      	ldr	r1, [r7, #12]
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fede 	bl	8005400 <USB_EPStopXfer>
 8003644:	4603      	mov	r3, r0
 8003646:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003648:	7afb      	ldrb	r3, [r7, #11]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b08a      	sub	sp, #40	@ 0x28
 8003656:	af02      	add	r7, sp, #8
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	3310      	adds	r3, #16
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d901      	bls.n	800368a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06b      	b.n	8003762 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	d902      	bls.n	80036a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3303      	adds	r3, #3
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ae:	e02a      	b.n	8003706 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d902      	bls.n	80036cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3303      	adds	r3, #3
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68d9      	ldr	r1, [r3, #12]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4603      	mov	r3, r0
 80036e8:	6978      	ldr	r0, [r7, #20]
 80036ea:	f001 ff33 	bl	8005554 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	441a      	add	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	429a      	cmp	r2, r3
 800371a:	d809      	bhi.n	8003730 <PCD_WriteEmptyTxFifo+0xde>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003724:	429a      	cmp	r2, r3
 8003726:	d203      	bcs.n	8003730 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1bf      	bne.n	80036b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	d811      	bhi.n	8003760 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	2201      	movs	r2, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	43db      	mvns	r3, r3
 8003756:	6939      	ldr	r1, [r7, #16]
 8003758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800375c:	4013      	ands	r3, r2
 800375e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	333c      	adds	r3, #60	@ 0x3c
 8003784:	3304      	adds	r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	799b      	ldrb	r3, [r3, #6]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d17b      	bne.n	800389a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4a61      	ldr	r2, [pc, #388]	@ (8003934 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	f240 80b9 	bls.w	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80b3 	beq.w	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ce:	461a      	mov	r2, r3
 80037d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	e0a7      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ee:	461a      	mov	r2, r3
 80037f0:	2320      	movs	r3, #32
 80037f2:	6093      	str	r3, [r2, #8]
 80037f4:	e098      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f040 8093 	bne.w	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4a4b      	ldr	r2, [pc, #300]	@ (8003934 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d90f      	bls.n	800382a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	e07e      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	3304      	adds	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1a      	ldr	r2, [r3, #32]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	0159      	lsls	r1, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	440b      	add	r3, r1
 800384c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d114      	bne.n	800388c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003874:	461a      	mov	r2, r3
 8003876:	2101      	movs	r1, #1
 8003878:	f002 f8c0 	bl	80059fc <USB_EP0_OutStart>
 800387c:	e006      	b.n	800388c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	441a      	add	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f003 faff 	bl	8006e96 <HAL_PCD_DataOutStageCallback>
 8003898:	e046      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	4a26      	ldr	r2, [pc, #152]	@ (8003938 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d124      	bne.n	80038ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	e032      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	2320      	movs	r3, #32
 80038dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f003 fad6 	bl	8006e96 <HAL_PCD_DataOutStageCallback>
 80038ea:	e01d      	b.n	8003928 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d114      	bne.n	800391c <PCD_EP_OutXfrComplete_int+0x1b0>
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003914:	461a      	mov	r2, r3
 8003916:	2100      	movs	r1, #0
 8003918:	f002 f870 	bl	80059fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	4619      	mov	r1, r3
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f003 fab7 	bl	8006e96 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3720      	adds	r7, #32
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	4f54300a 	.word	0x4f54300a
 8003938:	4f54310a 	.word	0x4f54310a

0800393c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	333c      	adds	r3, #60	@ 0x3c
 8003954:	3304      	adds	r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a15      	ldr	r2, [pc, #84]	@ (80039c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d90e      	bls.n	8003990 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003988:	461a      	mov	r2, r3
 800398a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f003 fa6e 	bl	8006e72 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d90c      	bls.n	80039b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	799b      	ldrb	r3, [r3, #6]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d108      	bne.n	80039b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039b0:	461a      	mov	r2, r3
 80039b2:	2101      	movs	r1, #1
 80039b4:	f002 f822 	bl	80059fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	4f54300a 	.word	0x4f54300a

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0cc      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b68      	ldr	r3, [pc, #416]	@ (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d90c      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b65      	ldr	r3, [pc, #404]	@ (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b63      	ldr	r3, [pc, #396]	@ (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0b8      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d020      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a1c:	4b59      	ldr	r3, [pc, #356]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a58      	ldr	r2, [pc, #352]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a34:	4b53      	ldr	r3, [pc, #332]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a52      	ldr	r2, [pc, #328]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a40:	4b50      	ldr	r3, [pc, #320]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	494d      	ldr	r1, [pc, #308]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d044      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	4b47      	ldr	r3, [pc, #284]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e07f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b3f      	ldr	r3, [pc, #252]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3b      	ldr	r3, [pc, #236]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e067      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b37      	ldr	r3, [pc, #220]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4934      	ldr	r1, [pc, #208]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fc2e 	bl	8001318 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fd fc2a 	bl	8001318 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e04f      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d20c      	bcs.n	8003b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b22      	ldr	r3, [pc, #136]	@ (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b20      	ldr	r3, [pc, #128]	@ (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e032      	b.n	8003b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4916      	ldr	r1, [pc, #88]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b3a:	4b12      	ldr	r3, [pc, #72]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	490e      	ldr	r1, [pc, #56]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b4e:	f000 f873 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003b52:	4602      	mov	r2, r0
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	490a      	ldr	r1, [pc, #40]	@ (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	5ccb      	ldrb	r3, [r1, r3]
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b6a:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd faa0 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023c00 	.word	0x40023c00
 8003b84:	40023800 	.word	0x40023800
 8003b88:	080073b0 	.word	0x080073b0
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	20000004 	.word	0x20000004

08003b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b98:	4b03      	ldr	r3, [pc, #12]	@ (8003ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4903      	ldr	r1, [pc, #12]	@ (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	080073c0 	.word	0x080073c0

08003bd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	220f      	movs	r2, #15
 8003be2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be4:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0203 	and.w	r2, r3, #3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c08:	4b09      	ldr	r3, [pc, #36]	@ (8003c30 <HAL_RCC_GetClockConfig+0x5c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c16:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <HAL_RCC_GetClockConfig+0x60>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	601a      	str	r2, [r3, #0]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40023c00 	.word	0x40023c00

08003c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b0ae      	sub	sp, #184	@ 0xb8
 8003c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5e:	4bcb      	ldr	r3, [pc, #812]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	f200 8204 	bhi.w	8004074 <HAL_RCC_GetSysClockFreq+0x43c>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08004075 	.word	0x08004075
 8003c7c:	08004075 	.word	0x08004075
 8003c80:	08004075 	.word	0x08004075
 8003c84:	08003cb1 	.word	0x08003cb1
 8003c88:	08004075 	.word	0x08004075
 8003c8c:	08004075 	.word	0x08004075
 8003c90:	08004075 	.word	0x08004075
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08004075 	.word	0x08004075
 8003c9c:	08004075 	.word	0x08004075
 8003ca0:	08004075 	.word	0x08004075
 8003ca4:	08003ea9 	.word	0x08003ea9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4bb9      	ldr	r3, [pc, #740]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x358>)
 8003caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003cae:	e1e5      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cb0:	4bb7      	ldr	r3, [pc, #732]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cb6:	e1e1      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb8:	4bb4      	ldr	r3, [pc, #720]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cc4:	4bb1      	ldr	r3, [pc, #708]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d071      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd0:	4bae      	ldr	r3, [pc, #696]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cdc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	0159      	lsls	r1, r3, #5
 8003d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d08:	0150      	lsls	r0, r2, #5
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4621      	mov	r1, r4
 8003d10:	1a51      	subs	r1, r2, r1
 8003d12:	6439      	str	r1, [r7, #64]	@ 0x40
 8003d14:	4629      	mov	r1, r5
 8003d16:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003d28:	4649      	mov	r1, r9
 8003d2a:	018b      	lsls	r3, r1, #6
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d32:	4641      	mov	r1, r8
 8003d34:	018a      	lsls	r2, r1, #6
 8003d36:	4641      	mov	r1, r8
 8003d38:	1a51      	subs	r1, r2, r1
 8003d3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003d50:	4649      	mov	r1, r9
 8003d52:	00cb      	lsls	r3, r1, #3
 8003d54:	4641      	mov	r1, r8
 8003d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	00ca      	lsls	r2, r1, #3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	4622      	mov	r2, r4
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	460a      	mov	r2, r1
 8003d6e:	eb42 0303 	adc.w	r3, r2, r3
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d80:	4629      	mov	r1, r5
 8003d82:	028b      	lsls	r3, r1, #10
 8003d84:	4621      	mov	r1, r4
 8003d86:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	028a      	lsls	r2, r1, #10
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003da0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003da4:	f7fc fa2e 	bl	8000204 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003db2:	e067      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db4:	4b75      	ldr	r3, [pc, #468]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dc0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dce:	2300      	movs	r3, #0
 8003dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dd2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	462b      	mov	r3, r5
 8003dda:	f04f 0000 	mov.w	r0, #0
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	0159      	lsls	r1, r3, #5
 8003de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de8:	0150      	lsls	r0, r2, #5
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4621      	mov	r1, r4
 8003df0:	1a51      	subs	r1, r2, r1
 8003df2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003df4:	4629      	mov	r1, r5
 8003df6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003e08:	4649      	mov	r1, r9
 8003e0a:	018b      	lsls	r3, r1, #6
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e12:	4641      	mov	r1, r8
 8003e14:	018a      	lsls	r2, r1, #6
 8003e16:	4641      	mov	r1, r8
 8003e18:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e2e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e36:	4692      	mov	sl, r2
 8003e38:	469b      	mov	fp, r3
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	eb1a 0303 	adds.w	r3, sl, r3
 8003e40:	623b      	str	r3, [r7, #32]
 8003e42:	462b      	mov	r3, r5
 8003e44:	eb4b 0303 	adc.w	r3, fp, r3
 8003e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e56:	4629      	mov	r1, r5
 8003e58:	028b      	lsls	r3, r1, #10
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e60:	4621      	mov	r1, r4
 8003e62:	028a      	lsls	r2, r1, #10
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e70:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e76:	f7fc f9c5 	bl	8000204 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4613      	mov	r3, r2
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e84:	4b41      	ldr	r3, [pc, #260]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ea6:	e0e9      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea8:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb4:	4b35      	ldr	r3, [pc, #212]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d069      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec0:	4b32      	ldr	r3, [pc, #200]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ecc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ed8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003edc:	4622      	mov	r2, r4
 8003ede:	462b      	mov	r3, r5
 8003ee0:	f04f 0000 	mov.w	r0, #0
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	0159      	lsls	r1, r3, #5
 8003eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eee:	0150      	lsls	r0, r2, #5
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	1a51      	subs	r1, r2, r1
 8003ef8:	61b9      	str	r1, [r7, #24]
 8003efa:	4629      	mov	r1, r5
 8003efc:	eb63 0301 	sbc.w	r3, r3, r1
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f0e:	4659      	mov	r1, fp
 8003f10:	018b      	lsls	r3, r1, #6
 8003f12:	4651      	mov	r1, sl
 8003f14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f18:	4651      	mov	r1, sl
 8003f1a:	018a      	lsls	r2, r1, #6
 8003f1c:	4651      	mov	r1, sl
 8003f1e:	ebb2 0801 	subs.w	r8, r2, r1
 8003f22:	4659      	mov	r1, fp
 8003f24:	eb63 0901 	sbc.w	r9, r3, r1
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3c:	4690      	mov	r8, r2
 8003f3e:	4699      	mov	r9, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	eb18 0303 	adds.w	r3, r8, r3
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	462b      	mov	r3, r5
 8003f4a:	eb49 0303 	adc.w	r3, r9, r3
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	028b      	lsls	r3, r1, #10
 8003f60:	4621      	mov	r1, r4
 8003f62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f66:	4621      	mov	r1, r4
 8003f68:	028a      	lsls	r2, r1, #10
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f72:	2200      	movs	r2, #0
 8003f74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f76:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003f78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f7c:	f7fc f942 	bl	8000204 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f8a:	e063      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x41c>
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4b3d      	ldr	r3, [pc, #244]	@ (800408c <HAL_RCC_GetSysClockFreq+0x454>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003faa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003fae:	4642      	mov	r2, r8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	0159      	lsls	r1, r3, #5
 8003fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc0:	0150      	lsls	r0, r2, #5
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	1a51      	subs	r1, r2, r1
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	4649      	mov	r1, r9
 8003fce:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	018b      	lsls	r3, r1, #6
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fea:	4651      	mov	r1, sl
 8003fec:	018a      	lsls	r2, r1, #6
 8003fee:	4651      	mov	r1, sl
 8003ff0:	1a54      	subs	r4, r2, r1
 8003ff2:	4659      	mov	r1, fp
 8003ff4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	00eb      	lsls	r3, r5, #3
 8004002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004006:	00e2      	lsls	r2, r4, #3
 8004008:	4614      	mov	r4, r2
 800400a:	461d      	mov	r5, r3
 800400c:	4643      	mov	r3, r8
 800400e:	18e3      	adds	r3, r4, r3
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	464b      	mov	r3, r9
 8004014:	eb45 0303 	adc.w	r3, r5, r3
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004026:	4629      	mov	r1, r5
 8004028:	028b      	lsls	r3, r1, #10
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004030:	4621      	mov	r1, r4
 8004032:	028a      	lsls	r2, r1, #10
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800403c:	2200      	movs	r2, #0
 800403e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004040:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004042:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004046:	f7fc f8dd 	bl	8000204 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4613      	mov	r3, r2
 8004050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004054:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <HAL_RCC_GetSysClockFreq+0x454>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0f1b      	lsrs	r3, r3, #28
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004072:	e003      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x458>)
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800407a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004080:	4618      	mov	r0, r3
 8004082:	37b8      	adds	r7, #184	@ 0xb8
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408a:	bf00      	nop
 800408c:	40023800 	.word	0x40023800
 8004090:	00f42400 	.word	0x00f42400

08004094 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e28d      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8083 	beq.w	80041ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040b4:	4b94      	ldr	r3, [pc, #592]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d019      	beq.n	80040f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040c0:	4b91      	ldr	r3, [pc, #580]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040cc:	4b8e      	ldr	r3, [pc, #568]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b8b      	ldr	r3, [pc, #556]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d112      	bne.n	800410c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e6:	4b88      	ldr	r3, [pc, #544]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b84      	ldr	r3, [pc, #528]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x124>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e25a      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x90>
 8004116:	4b7c      	ldr	r3, [pc, #496]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7b      	ldr	r2, [pc, #492]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xcc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0xb4>
 800412e:	4b76      	ldr	r3, [pc, #472]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a75      	ldr	r2, [pc, #468]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b73      	ldr	r3, [pc, #460]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a72      	ldr	r2, [pc, #456]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xcc>
 8004148:	4b6f      	ldr	r3, [pc, #444]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6e      	ldr	r2, [pc, #440]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd f8d6 	bl	8001318 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7fd f8d2 	bl	8001318 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	@ 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e21f      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xdc>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd f8c2 	bl	8001318 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7fd f8be 	bl	8001318 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e20b      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b57      	ldr	r3, [pc, #348]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x104>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d06f      	beq.n	80042a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041c6:	4b50      	ldr	r3, [pc, #320]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041de:	4b4a      	ldr	r3, [pc, #296]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f6:	4b44      	ldr	r3, [pc, #272]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b41      	ldr	r3, [pc, #260]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x186>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1d3      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3b      	ldr	r3, [pc, #236]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4937      	ldr	r1, [pc, #220]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCC_OscConfig+0x278>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd f86b 	bl	8001318 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004246:	f7fd f867 	bl	8001318 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1b4      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2b      	ldr	r3, [pc, #172]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b28      	ldr	r3, [pc, #160]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4925      	ldr	r1, [pc, #148]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b24      	ldr	r3, [pc, #144]	@ (800430c <HAL_RCC_OscConfig+0x278>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fd f84a 	bl	8001318 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004288:	f7fd f846 	bl	8001318 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e193      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1b      	ldr	r3, [pc, #108]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d036      	beq.n	8004320 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b15      	ldr	r3, [pc, #84]	@ (8004310 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fd f82a 	bl	8001318 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fd f826 	bl	8001318 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e173      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_RCC_OscConfig+0x274>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x234>
 80042e6:	e01b      	b.n	8004320 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e8:	4b09      	ldr	r3, [pc, #36]	@ (8004310 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fd f813 	bl	8001318 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e00e      	b.n	8004314 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fd f80f 	bl	8001318 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d907      	bls.n	8004314 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e15c      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
 8004308:	40023800 	.word	0x40023800
 800430c:	42470000 	.word	0x42470000
 8004310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	4b8a      	ldr	r3, [pc, #552]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ea      	bne.n	80042f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8097 	beq.w	800445c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004332:	4b83      	ldr	r3, [pc, #524]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	4b7f      	ldr	r3, [pc, #508]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	4a7e      	ldr	r2, [pc, #504]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	@ 0x40
 800434e:	4b7c      	ldr	r3, [pc, #496]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	4b79      	ldr	r3, [pc, #484]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436a:	4b76      	ldr	r3, [pc, #472]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a75      	ldr	r2, [pc, #468]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004376:	f7fc ffcf 	bl	8001318 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fc ffcb 	bl	8001318 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e118      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	4b6c      	ldr	r3, [pc, #432]	@ (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x31e>
 80043a4:	4b66      	ldr	r3, [pc, #408]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a8:	4a65      	ldr	r2, [pc, #404]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x358>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x340>
 80043ba:	4b61      	ldr	r3, [pc, #388]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043be:	4a60      	ldr	r2, [pc, #384]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0x358>
 80043d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d8:	4a59      	ldr	r2, [pc, #356]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e0:	4b57      	ldr	r3, [pc, #348]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e4:	4a56      	ldr	r2, [pc, #344]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fc ff90 	bl	8001318 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fc ff8c 	bl	8001318 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0d7      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	4b4b      	ldr	r3, [pc, #300]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ee      	beq.n	80043fc <HAL_RCC_OscConfig+0x368>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fc ff7a 	bl	8001318 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fc ff76 	bl	8001318 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0c1      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443e:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ee      	bne.n	8004428 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004450:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	4a3a      	ldr	r2, [pc, #232]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80ad 	beq.w	80045c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004466:	4b36      	ldr	r3, [pc, #216]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d060      	beq.n	8004534 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d145      	bne.n	8004506 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b33      	ldr	r3, [pc, #204]	@ (8004548 <HAL_RCC_OscConfig+0x4b4>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fc ff4a 	bl	8001318 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fc ff46 	bl	8001318 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e093      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d0:	071b      	lsls	r3, r3, #28
 80044d2:	491b      	ldr	r1, [pc, #108]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_RCC_OscConfig+0x4b4>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fc ff1b 	bl	8001318 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fc ff17 	bl	8001318 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e064      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x452>
 8004504:	e05c      	b.n	80045c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	@ (8004548 <HAL_RCC_OscConfig+0x4b4>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fc ff04 	bl	8001318 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fc ff00 	bl	8001318 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04d      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x480>
 8004532:	e045      	b.n	80045c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e040      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <HAL_RCC_OscConfig+0x538>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d129      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d122      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d119      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d10f      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fd3a 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fa1e 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e046      	b.n	8004716 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a23      	ldr	r2, [pc, #140]	@ (8004724 <HAL_TIM_Base_Start+0xb4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d022      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a2:	d01d      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <HAL_TIM_Base_Start+0xb8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d018      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <HAL_TIM_Base_Start+0xbc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004730 <HAL_TIM_Base_Start+0xc0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00e      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <HAL_TIM_Base_Start+0xc4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a19      	ldr	r2, [pc, #100]	@ (8004738 <HAL_TIM_Base_Start+0xc8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIM_Base_Start+0x70>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_TIM_Base_Start+0xcc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d111      	bne.n	8004704 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b06      	cmp	r3, #6
 80046f0:	d010      	beq.n	8004714 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	e007      	b.n	8004714 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40010400 	.word	0x40010400
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800

08004740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d001      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e04e      	b.n	80047f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a23      	ldr	r2, [pc, #140]	@ (8004804 <HAL_TIM_Base_Start_IT+0xc4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d022      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004782:	d01d      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <HAL_TIM_Base_Start_IT+0xc8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d018      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_TIM_Base_Start_IT+0xcc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_TIM_Base_Start_IT+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00e      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <HAL_TIM_Base_Start_IT+0xd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d009      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a19      	ldr	r2, [pc, #100]	@ (8004818 <HAL_TIM_Base_Start_IT+0xd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_TIM_Base_Start_IT+0x80>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_TIM_Base_Start_IT+0xdc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d010      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	e007      	b.n	80047f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40001800 	.word	0x40001800

08004820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0202 	mvn.w	r2, #2
 8004854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8d2 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8c4 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8d5 	bl	8004a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0204 	mvn.w	r2, #4
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8ac 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f89e 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8af 	bl	8004a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f886 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f878 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f889 	bl	8004a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f860 	bl	8004a14 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f852 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f863 	bl	8004a28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc faea 	bl	8000f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f906 	bl	8004bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00c      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f834 	bl	8004a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0220 	mvn.w	r2, #32
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8d8 	bl	8004ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a46      	ldr	r2, [pc, #280]	@ (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6e:	d00f      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a43      	ldr	r2, [pc, #268]	@ (8004b80 <TIM_Base_SetConfig+0x130>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00b      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a42      	ldr	r2, [pc, #264]	@ (8004b84 <TIM_Base_SetConfig+0x134>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d007      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a41      	ldr	r2, [pc, #260]	@ (8004b88 <TIM_Base_SetConfig+0x138>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a40      	ldr	r2, [pc, #256]	@ (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d108      	bne.n	8004aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	@ (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab0:	d027      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a32      	ldr	r2, [pc, #200]	@ (8004b80 <TIM_Base_SetConfig+0x130>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d023      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a31      	ldr	r2, [pc, #196]	@ (8004b84 <TIM_Base_SetConfig+0x134>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d01f      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a30      	ldr	r2, [pc, #192]	@ (8004b88 <TIM_Base_SetConfig+0x138>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2f      	ldr	r2, [pc, #188]	@ (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d017      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8004b90 <TIM_Base_SetConfig+0x140>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2d      	ldr	r2, [pc, #180]	@ (8004b94 <TIM_Base_SetConfig+0x144>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b98 <TIM_Base_SetConfig+0x148>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	@ (8004b9c <TIM_Base_SetConfig+0x14c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba0 <TIM_Base_SetConfig+0x150>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a29      	ldr	r2, [pc, #164]	@ (8004ba4 <TIM_Base_SetConfig+0x154>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a10      	ldr	r2, [pc, #64]	@ (8004b7c <TIM_Base_SetConfig+0x12c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_Base_SetConfig+0xf8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <TIM_Base_SetConfig+0x13c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d103      	bne.n	8004b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d105      	bne.n	8004b6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f023 0201 	bic.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800
 8004b88:	40000c00 	.word	0x40000c00
 8004b8c:	40010400 	.word	0x40010400
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800
 8004b9c:	40001800 	.word	0x40001800
 8004ba0:	40001c00 	.word	0x40001c00
 8004ba4:	40002000 	.word	0x40002000

08004ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d165      	bne.n	8004cb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4a41      	ldr	r2, [pc, #260]	@ (8004cec <USB_SetTurnaroundTime+0x11c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d906      	bls.n	8004bfa <USB_SetTurnaroundTime+0x2a>
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4a40      	ldr	r2, [pc, #256]	@ (8004cf0 <USB_SetTurnaroundTime+0x120>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d202      	bcs.n	8004bfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bf4:	230f      	movs	r3, #15
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e062      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf0 <USB_SetTurnaroundTime+0x120>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d306      	bcc.n	8004c10 <USB_SetTurnaroundTime+0x40>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a3b      	ldr	r2, [pc, #236]	@ (8004cf4 <USB_SetTurnaroundTime+0x124>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d202      	bcs.n	8004c10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c0a:	230e      	movs	r3, #14
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e057      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4a38      	ldr	r2, [pc, #224]	@ (8004cf4 <USB_SetTurnaroundTime+0x124>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d306      	bcc.n	8004c26 <USB_SetTurnaroundTime+0x56>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4a37      	ldr	r2, [pc, #220]	@ (8004cf8 <USB_SetTurnaroundTime+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d202      	bcs.n	8004c26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c20:	230d      	movs	r3, #13
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	e04c      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4a33      	ldr	r2, [pc, #204]	@ (8004cf8 <USB_SetTurnaroundTime+0x128>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d306      	bcc.n	8004c3c <USB_SetTurnaroundTime+0x6c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4a32      	ldr	r2, [pc, #200]	@ (8004cfc <USB_SetTurnaroundTime+0x12c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d802      	bhi.n	8004c3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c36:	230c      	movs	r3, #12
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e041      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cfc <USB_SetTurnaroundTime+0x12c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d906      	bls.n	8004c52 <USB_SetTurnaroundTime+0x82>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4a2e      	ldr	r2, [pc, #184]	@ (8004d00 <USB_SetTurnaroundTime+0x130>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d802      	bhi.n	8004c52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c4c:	230b      	movs	r3, #11
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	e036      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4a2a      	ldr	r2, [pc, #168]	@ (8004d00 <USB_SetTurnaroundTime+0x130>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d906      	bls.n	8004c68 <USB_SetTurnaroundTime+0x98>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4a29      	ldr	r2, [pc, #164]	@ (8004d04 <USB_SetTurnaroundTime+0x134>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d802      	bhi.n	8004c68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c62:	230a      	movs	r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e02b      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a26      	ldr	r2, [pc, #152]	@ (8004d04 <USB_SetTurnaroundTime+0x134>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d906      	bls.n	8004c7e <USB_SetTurnaroundTime+0xae>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4a25      	ldr	r2, [pc, #148]	@ (8004d08 <USB_SetTurnaroundTime+0x138>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d202      	bcs.n	8004c7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c78:	2309      	movs	r3, #9
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	e020      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <USB_SetTurnaroundTime+0x138>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d306      	bcc.n	8004c94 <USB_SetTurnaroundTime+0xc4>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4a20      	ldr	r2, [pc, #128]	@ (8004d0c <USB_SetTurnaroundTime+0x13c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d802      	bhi.n	8004c94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c8e:	2308      	movs	r3, #8
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e015      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4a1d      	ldr	r2, [pc, #116]	@ (8004d0c <USB_SetTurnaroundTime+0x13c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d906      	bls.n	8004caa <USB_SetTurnaroundTime+0xda>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d10 <USB_SetTurnaroundTime+0x140>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d202      	bcs.n	8004caa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e00a      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004caa:	2306      	movs	r3, #6
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e007      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d102      	bne.n	8004cbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004cb6:	2309      	movs	r3, #9
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	e001      	b.n	8004cc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004cbc:	2309      	movs	r3, #9
 8004cbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	00d8acbf 	.word	0x00d8acbf
 8004cf0:	00e4e1c0 	.word	0x00e4e1c0
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	01067380 	.word	0x01067380
 8004cfc:	011a499f 	.word	0x011a499f
 8004d00:	01312cff 	.word	0x01312cff
 8004d04:	014ca43f 	.word	0x014ca43f
 8004d08:	016e3600 	.word	0x016e3600
 8004d0c:	01a6ab1f 	.word	0x01a6ab1f
 8004d10:	01e84800 	.word	0x01e84800

08004d14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d2e:	d901      	bls.n	8004d34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e01b      	b.n	8004d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	daf2      	bge.n	8004d22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	019b      	lsls	r3, r3, #6
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d58:	d901      	bls.n	8004d5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e006      	b.n	8004d6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d0f0      	beq.n	8004d4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0306 	and.w	r3, r3, #6
 8004d90:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]
 8004d9c:	e00a      	b.n	8004db4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d002      	beq.n	8004daa <USB_GetDevSpeed+0x32>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d102      	bne.n	8004db0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004daa:	2302      	movs	r3, #2
 8004dac:	75fb      	strb	r3, [r7, #23]
 8004dae:	e001      	b.n	8004db4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004db0:	230f      	movs	r3, #15
 8004db2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b085      	sub	sp, #20
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d13a      	bne.n	8004e54 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de4:	69da      	ldr	r2, [r3, #28]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	2101      	movs	r1, #1
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d155      	bne.n	8004ec2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	791b      	ldrb	r3, [r3, #4]
 8004e30:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e32:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	059b      	lsls	r3, r3, #22
 8004e38:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e036      	b.n	8004ec2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6a:	041b      	lsls	r3, r3, #16
 8004e6c:	68f9      	ldr	r1, [r7, #12]
 8004e6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11a      	bne.n	8004ec2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	791b      	ldrb	r3, [r3, #4]
 8004ea6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ec0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	@ 0x28
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	f040 817a 	bne.w	80051e6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d132      	bne.n	8004f60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f14:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f18:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f58:	0cdb      	lsrs	r3, r3, #19
 8004f5a:	04db      	lsls	r3, r3, #19
 8004f5c:	6113      	str	r3, [r2, #16]
 8004f5e:	e092      	b.n	8005086 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f7a:	0cdb      	lsrs	r3, r3, #19
 8004f7c:	04db      	lsls	r3, r3, #19
 8004f7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fa2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d11a      	bne.n	8004fe0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	0151      	lsls	r1, r2, #5
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	440a      	add	r2, r1
 8004fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fdc:	6113      	str	r3, [r2, #16]
 8004fde:	e01b      	b.n	8005018 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6919      	ldr	r1, [r3, #16]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	440b      	add	r3, r1
 8004ff8:	1e59      	subs	r1, r3, #1
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005002:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005004:	4ba2      	ldr	r3, [pc, #648]	@ (8005290 <USB_EPStartXfer+0x3c0>)
 8005006:	400b      	ands	r3, r1
 8005008:	69b9      	ldr	r1, [r7, #24]
 800500a:	0148      	lsls	r0, r1, #5
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	4401      	add	r1, r0
 8005010:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502e:	69b9      	ldr	r1, [r7, #24]
 8005030:	0148      	lsls	r0, r1, #5
 8005032:	69f9      	ldr	r1, [r7, #28]
 8005034:	4401      	add	r1, r0
 8005036:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	791b      	ldrb	r3, [r3, #4]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d11f      	bne.n	8005086 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005060:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005064:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005080:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005084:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d14b      	bne.n	8005124 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a0:	461a      	mov	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	791b      	ldrb	r3, [r3, #4]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d128      	bne.n	8005102 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d110      	bne.n	80050e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	0151      	lsls	r1, r2, #5
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	440a      	add	r2, r1
 80050d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	e00f      	b.n	8005102 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	0151      	lsls	r1, r2, #5
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	440a      	add	r2, r1
 80050f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	440a      	add	r2, r1
 8005118:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800511c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e165      	b.n	80053f0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800513e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005142:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	791b      	ldrb	r3, [r3, #4]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d015      	beq.n	8005178 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 814d 	beq.w	80053f0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	69f9      	ldr	r1, [r7, #28]
 800516e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005172:	4313      	orrs	r3, r2
 8005174:	634b      	str	r3, [r1, #52]	@ 0x34
 8005176:	e13b      	b.n	80053f0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d110      	bne.n	80051aa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e00f      	b.n	80051ca <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68d9      	ldr	r1, [r3, #12]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	781a      	ldrb	r2, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	b298      	uxth	r0, r3
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4603      	mov	r3, r0
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f9b8 	bl	8005554 <USB_WritePacket>
 80051e4:	e104      	b.n	80053f0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	69fa      	ldr	r2, [r7, #28]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005200:	0cdb      	lsrs	r3, r3, #19
 8005202:	04db      	lsls	r3, r3, #19
 8005204:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005220:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005224:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005228:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d131      	bne.n	8005294 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	0148      	lsls	r0, r1, #5
 8005262:	69f9      	ldr	r1, [r7, #28]
 8005264:	4401      	add	r1, r0
 8005266:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800526a:	4313      	orrs	r3, r2
 800526c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005288:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800528c:	6113      	str	r3, [r2, #16]
 800528e:	e061      	b.n	8005354 <USB_EPStartXfer+0x484>
 8005290:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d123      	bne.n	80052e4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	0148      	lsls	r0, r1, #5
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	4401      	add	r1, r0
 80052ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052e0:	6113      	str	r3, [r2, #16]
 80052e2:	e037      	b.n	8005354 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4413      	add	r3, r2
 80052ee:	1e5a      	subs	r2, r3, #1
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	8afa      	ldrh	r2, [r7, #22]
 8005300:	fb03 f202 	mul.w	r2, r3, r2
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	8afb      	ldrh	r3, [r7, #22]
 8005318:	04d9      	lsls	r1, r3, #19
 800531a:	4b38      	ldr	r3, [pc, #224]	@ (80053fc <USB_EPStartXfer+0x52c>)
 800531c:	400b      	ands	r3, r1
 800531e:	69b9      	ldr	r1, [r7, #24]
 8005320:	0148      	lsls	r0, r1, #5
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	4401      	add	r1, r0
 8005326:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800532a:	4313      	orrs	r3, r2
 800532c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005344:	69b9      	ldr	r1, [r7, #24]
 8005346:	0148      	lsls	r0, r1, #5
 8005348:	69f9      	ldr	r1, [r7, #28]
 800534a:	4401      	add	r1, r0
 800534c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005350:	4313      	orrs	r3, r2
 8005352:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10d      	bne.n	8005376 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d009      	beq.n	8005376 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68d9      	ldr	r1, [r3, #12]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005372:	460a      	mov	r2, r1
 8005374:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	791b      	ldrb	r3, [r3, #4]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d128      	bne.n	80053d0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d110      	bne.n	80053b0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	e00f      	b.n	80053d0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	1ff80000 	.word	0x1ff80000

08005400 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d14a      	bne.n	80054b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005432:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005436:	f040 8086 	bne.w	8005546 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005458:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800545c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800547c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005480:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800548e:	4293      	cmp	r3, r2
 8005490:	d902      	bls.n	8005498 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
          break;
 8005496:	e056      	b.n	8005546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054b0:	d0e7      	beq.n	8005482 <USB_EPStopXfer+0x82>
 80054b2:	e048      	b.n	8005546 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054cc:	d13b      	bne.n	8005546 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005522:	4293      	cmp	r3, r2
 8005524:	d902      	bls.n	800552c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	75fb      	strb	r3, [r7, #23]
          break;
 800552a:	e00c      	b.n	8005546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005544:	d0e7      	beq.n	8005516 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	@ 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4611      	mov	r1, r2
 8005560:	461a      	mov	r2, r3
 8005562:	460b      	mov	r3, r1
 8005564:	71fb      	strb	r3, [r7, #7]
 8005566:	4613      	mov	r3, r2
 8005568:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d123      	bne.n	80055c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800557a:	88bb      	ldrh	r3, [r7, #4]
 800557c:	3303      	adds	r3, #3
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e018      	b.n	80055ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	031a      	lsls	r2, r3, #12
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005594:	461a      	mov	r2, r3
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3301      	adds	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3e2      	bcc.n	8005588 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3724      	adds	r7, #36	@ 0x24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b08b      	sub	sp, #44	@ 0x2c
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	e014      	b.n	8005626 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	601a      	str	r2, [r3, #0]
    pDest++;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	3301      	adds	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	3301      	adds	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005616:	3301      	adds	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	3301      	adds	r3, #1
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	3301      	adds	r3, #1
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3e6      	bcc.n	80055fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800562e:	8bfb      	ldrh	r3, [r7, #30]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01e      	beq.n	8005672 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800563e:	461a      	mov	r2, r3
 8005640:	f107 0310 	add.w	r3, r7, #16
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	701a      	strb	r2, [r3, #0]
      i++;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	3301      	adds	r3, #1
 800565e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	3301      	adds	r3, #1
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005666:	8bfb      	ldrh	r3, [r7, #30]
 8005668:	3b01      	subs	r3, #1
 800566a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800566c:	8bfb      	ldrh	r3, [r7, #30]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ea      	bne.n	8005648 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005674:	4618      	mov	r0, r3
 8005676:	372c      	adds	r7, #44	@ 0x2c
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d12c      	bne.n	80056f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db12      	blt.n	80056d4 <USB_EPSetStall+0x54>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00f      	beq.n	80056d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e02b      	b.n	800574e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db12      	blt.n	800572e <USB_EPSetStall+0xae>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00f      	beq.n	800572e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005728:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800572c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005748:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800574c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d128      	bne.n	80057ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005792:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005796:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d003      	beq.n	80057a8 <USB_EPClearStall+0x4c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	791b      	ldrb	r3, [r3, #4]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d138      	bne.n	800581a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e027      	b.n	800581a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d003      	beq.n	80057fa <USB_EPClearStall+0x9e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	791b      	ldrb	r3, [r3, #4]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d10f      	bne.n	800581a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005818:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005846:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800584a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4013      	ands	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800588c:	68fb      	ldr	r3, [r7, #12]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	0c1b      	lsrs	r3, r3, #16
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ea:	69db      	ldr	r3, [r3, #28]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	4013      	ands	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	b29b      	uxth	r3, r3
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005902:	b480      	push	{r7}
 8005904:	b085      	sub	sp, #20
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005930:	68bb      	ldr	r3, [r7, #8]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005960:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	fa22 f303 	lsr.w	r3, r2, r3
 800596e:	01db      	lsls	r3, r3, #7
 8005970:	b2db      	uxtb	r3, r3
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4013      	ands	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800598c:	68bb      	ldr	r3, [r7, #8]
}
 800598e:	4618      	mov	r0, r3
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f003 0301 	and.w	r3, r3, #1
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80059d4:	f023 0307 	bic.w	r3, r3, #7
 80059d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	460b      	mov	r3, r1
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	333c      	adds	r3, #60	@ 0x3c
 8005a12:	3304      	adds	r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4a26      	ldr	r2, [pc, #152]	@ (8005ab4 <USB_EP0_OutStart+0xb8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d90a      	bls.n	8005a36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a30:	d101      	bne.n	8005a36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e037      	b.n	8005aa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a64:	f043 0318 	orr.w	r3, r3, #24
 8005a68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005a7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10f      	bne.n	8005aa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005aa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	4f54300a 	.word	0x4f54300a

08005ab8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ac0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	4611      	mov	r1, r2
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	4611      	mov	r1, r2
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 f8e2 	bl	8006d16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d01a      	beq.n	8005bac <USBD_LL_SetupStage+0x72>
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d822      	bhi.n	8005bc0 <USBD_LL_SetupStage+0x86>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <USBD_LL_SetupStage+0x4a>
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d00a      	beq.n	8005b98 <USBD_LL_SetupStage+0x5e>
 8005b82:	e01d      	b.n	8005bc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb0f 	bl	80061b0 <USBD_StdDevReq>
 8005b92:	4603      	mov	r3, r0
 8005b94:	73fb      	strb	r3, [r7, #15]
      break;
 8005b96:	e020      	b.n	8005bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb77 	bl	8006294 <USBD_StdItfReq>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8005baa:	e016      	b.n	8005bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fbd9 	bl	800636c <USBD_StdEPReq>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbe:	e00c      	b.n	8005bda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005bc6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fa66 	bl	80070a0 <USBD_LL_StallEP>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	bf00      	nop
  }

  return ret;
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	460b      	mov	r3, r1
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d16e      	bne.n	8005cda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005c02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	f040 8098 	bne.w	8005d40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d913      	bls.n	8005c44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	1ad2      	subs	r2, r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	4293      	cmp	r3, r2
 8005c34:	bf28      	it	cs
 8005c36:	4613      	movcs	r3, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f001 f8e1 	bl	8006e04 <USBD_CtlContinueRx>
 8005c42:	e07d      	b.n	8005d40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d014      	beq.n	8005c7c <USBD_LL_DataOutStage+0x98>
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d81d      	bhi.n	8005c92 <USBD_LL_DataOutStage+0xae>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <USBD_LL_DataOutStage+0x7c>
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d003      	beq.n	8005c66 <USBD_LL_DataOutStage+0x82>
 8005c5e:	e018      	b.n	8005c92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	75bb      	strb	r3, [r7, #22]
            break;
 8005c64:	e018      	b.n	8005c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fa64 	bl	800613e <USBD_CoreFindIF>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75bb      	strb	r3, [r7, #22]
            break;
 8005c7a:	e00d      	b.n	8005c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa66 	bl	8006158 <USBD_CoreFindEP>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005c90:	e002      	b.n	8005c98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75bb      	strb	r3, [r7, #22]
            break;
 8005c96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005c98:	7dbb      	ldrb	r3, [r7, #22]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d119      	bne.n	8005cd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d113      	bne.n	8005cd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005caa:	7dba      	ldrb	r2, [r7, #22]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	32ae      	adds	r2, #174	@ 0xae
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005cba:	7dba      	ldrb	r2, [r7, #22]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005cc2:	7dba      	ldrb	r2, [r7, #22]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	32ae      	adds	r2, #174	@ 0xae
 8005cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f001 f8a7 	bl	8006e26 <USBD_CtlSendStatus>
 8005cd8:	e032      	b.n	8005d40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fa37 	bl	8006158 <USBD_CoreFindEP>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cee:	7dbb      	ldrb	r3, [r7, #22]
 8005cf0:	2bff      	cmp	r3, #255	@ 0xff
 8005cf2:	d025      	beq.n	8005d40 <USBD_LL_DataOutStage+0x15c>
 8005cf4:	7dbb      	ldrb	r3, [r7, #22]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d122      	bne.n	8005d40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d117      	bne.n	8005d36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d06:	7dba      	ldrb	r2, [r7, #22]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	32ae      	adds	r2, #174	@ 0xae
 8005d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00f      	beq.n	8005d36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d16:	7dba      	ldrb	r2, [r7, #22]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d1e:	7dba      	ldrb	r2, [r7, #22]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	32ae      	adds	r2, #174	@ 0xae
 8005d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	7afa      	ldrb	r2, [r7, #11]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
 8005d3e:	e000      	b.n	8005d42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b086      	sub	sp, #24
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	460b      	mov	r3, r1
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d58:	7afb      	ldrb	r3, [r7, #11]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d16f      	bne.n	8005e3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3314      	adds	r3, #20
 8005d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d15a      	bne.n	8005e24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d914      	bls.n	8005da4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	1ad2      	subs	r2, r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 f826 	bl	8006de2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 fa29 	bl	80071f4 <USBD_LL_PrepareReceive>
 8005da2:	e03f      	b.n	8005e24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d11c      	bne.n	8005dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d316      	bcc.n	8005dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d20f      	bcs.n	8005dea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2100      	movs	r1, #0
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f001 f807 	bl	8006de2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 fa06 	bl	80071f4 <USBD_LL_PrepareReceive>
 8005de8:	e01c      	b.n	8005e24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d10f      	bne.n	8005e16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e16:	2180      	movs	r1, #128	@ 0x80
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 f941 	bl	80070a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 f814 	bl	8006e4c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d03a      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff fe42 	bl	8005ab8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005e3c:	e032      	b.n	8005ea4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	4619      	mov	r1, r3
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f985 	bl	8006158 <USBD_CoreFindEP>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	2bff      	cmp	r3, #255	@ 0xff
 8005e56:	d025      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d122      	bne.n	8005ea4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d11c      	bne.n	8005ea4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005e6a:	7dfa      	ldrb	r2, [r7, #23]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	32ae      	adds	r2, #174	@ 0xae
 8005e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d014      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005e7a:	7dfa      	ldrb	r2, [r7, #23]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005e82:	7dfa      	ldrb	r2, [r7, #23]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	32ae      	adds	r2, #174	@ 0xae
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	7afa      	ldrb	r2, [r7, #11]
 8005e90:	4611      	mov	r1, r2
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	4798      	blx	r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005e9a:	7dbb      	ldrb	r3, [r7, #22]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ea0:	7dbb      	ldrb	r3, [r7, #22]
 8005ea2:	e000      	b.n	8005ea6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00e      	beq.n	8005f14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6852      	ldr	r2, [r2, #4]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	4611      	mov	r1, r2
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f14:	2340      	movs	r3, #64	@ 0x40
 8005f16:	2200      	movs	r2, #0
 8005f18:	2100      	movs	r1, #0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f89a 	bl	8007054 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2240      	movs	r2, #64	@ 0x40
 8005f2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f30:	2340      	movs	r3, #64	@ 0x40
 8005f32:	2200      	movs	r2, #0
 8005f34:	2180      	movs	r1, #128	@ 0x80
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f88c 	bl	8007054 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2240      	movs	r2, #64	@ 0x40
 8005f46:	621a      	str	r2, [r3, #32]

  return ret;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d006      	beq.n	8005f94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2204      	movs	r2, #4
 8005f98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d106      	bne.n	8005fcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d110      	bne.n	8006010 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	32ae      	adds	r2, #174	@ 0xae
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006038:	2303      	movs	r3, #3
 800603a:	e01c      	b.n	8006076 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b03      	cmp	r3, #3
 8006046:	d115      	bne.n	8006074 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32ae      	adds	r2, #174	@ 0xae
 8006052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32ae      	adds	r2, #174	@ 0xae
 8006066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	4611      	mov	r1, r2
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	460b      	mov	r3, r1
 8006088:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	32ae      	adds	r2, #174	@ 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	e01c      	b.n	80060da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d115      	bne.n	80060d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32ae      	adds	r2, #174	@ 0xae
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32ae      	adds	r2, #174	@ 0xae
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	4611      	mov	r1, r2
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6852      	ldr	r2, [r2, #4]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	4611      	mov	r1, r2
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800614a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006164:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr

08006172 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006172:	b480      	push	{r7}
 8006174:	b087      	sub	sp, #28
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	3301      	adds	r3, #1
 8006188:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006190:	8a3b      	ldrh	r3, [r7, #16]
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	b21a      	sxth	r2, r3
 8006196:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800619a:	4313      	orrs	r3, r2
 800619c:	b21b      	sxth	r3, r3
 800619e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061a0:	89fb      	ldrh	r3, [r7, #14]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061c6:	2b40      	cmp	r3, #64	@ 0x40
 80061c8:	d005      	beq.n	80061d6 <USBD_StdDevReq+0x26>
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d857      	bhi.n	800627e <USBD_StdDevReq+0xce>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00f      	beq.n	80061f2 <USBD_StdDevReq+0x42>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d153      	bne.n	800627e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32ae      	adds	r2, #174	@ 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
      break;
 80061f0:	e04a      	b.n	8006288 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b09      	cmp	r3, #9
 80061f8:	d83b      	bhi.n	8006272 <USBD_StdDevReq+0xc2>
 80061fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <USBD_StdDevReq+0x50>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006255 	.word	0x08006255
 8006204:	08006269 	.word	0x08006269
 8006208:	08006273 	.word	0x08006273
 800620c:	0800625f 	.word	0x0800625f
 8006210:	08006273 	.word	0x08006273
 8006214:	08006233 	.word	0x08006233
 8006218:	08006229 	.word	0x08006229
 800621c:	08006273 	.word	0x08006273
 8006220:	0800624b 	.word	0x0800624b
 8006224:	0800623d 	.word	0x0800623d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa3c 	bl	80066a8 <USBD_GetDescriptor>
          break;
 8006230:	e024      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fbcb 	bl	80069d0 <USBD_SetAddress>
          break;
 800623a:	e01f      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fc0a 	bl	8006a58 <USBD_SetConfig>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
          break;
 8006248:	e018      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fcad 	bl	8006bac <USBD_GetConfig>
          break;
 8006252:	e013      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fcde 	bl	8006c18 <USBD_GetStatus>
          break;
 800625c:	e00e      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fd0d 	bl	8006c80 <USBD_SetFeature>
          break;
 8006266:	e009      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fd31 	bl	8006cd2 <USBD_ClrFeature>
          break;
 8006270:	e004      	b.n	800627c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fd88 	bl	8006d8a <USBD_CtlError>
          break;
 800627a:	bf00      	nop
      }
      break;
 800627c:	e004      	b.n	8006288 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fd82 	bl	8006d8a <USBD_CtlError>
      break;
 8006286:	bf00      	nop
  }

  return ret;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062aa:	2b40      	cmp	r3, #64	@ 0x40
 80062ac:	d005      	beq.n	80062ba <USBD_StdItfReq+0x26>
 80062ae:	2b40      	cmp	r3, #64	@ 0x40
 80062b0:	d852      	bhi.n	8006358 <USBD_StdItfReq+0xc4>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <USBD_StdItfReq+0x26>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d14e      	bne.n	8006358 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d840      	bhi.n	800634a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	889b      	ldrh	r3, [r3, #4]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d836      	bhi.n	8006340 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	889b      	ldrh	r3, [r3, #4]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff2f 	bl	800613e <USBD_CoreFindIF>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2bff      	cmp	r3, #255	@ 0xff
 80062e8:	d01d      	beq.n	8006326 <USBD_StdItfReq+0x92>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062f0:	7bba      	ldrb	r2, [r7, #14]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32ae      	adds	r2, #174	@ 0xae
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00f      	beq.n	8006320 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006300:	7bba      	ldrb	r2, [r7, #14]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006308:	7bba      	ldrb	r2, [r7, #14]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32ae      	adds	r2, #174	@ 0xae
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800631e:	e004      	b.n	800632a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006324:	e001      	b.n	800632a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006326:	2303      	movs	r3, #3
 8006328:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	88db      	ldrh	r3, [r3, #6]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d110      	bne.n	8006354 <USBD_StdItfReq+0xc0>
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10d      	bne.n	8006354 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fd74 	bl	8006e26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800633e:	e009      	b.n	8006354 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fd21 	bl	8006d8a <USBD_CtlError>
          break;
 8006348:	e004      	b.n	8006354 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fd1c 	bl	8006d8a <USBD_CtlError>
          break;
 8006352:	e000      	b.n	8006356 <USBD_StdItfReq+0xc2>
          break;
 8006354:	bf00      	nop
      }
      break;
 8006356:	e004      	b.n	8006362 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fd15 	bl	8006d8a <USBD_CtlError>
      break;
 8006360:	bf00      	nop
  }

  return ret;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	889b      	ldrh	r3, [r3, #4]
 800637e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006388:	2b40      	cmp	r3, #64	@ 0x40
 800638a:	d007      	beq.n	800639c <USBD_StdEPReq+0x30>
 800638c:	2b40      	cmp	r3, #64	@ 0x40
 800638e:	f200 817f 	bhi.w	8006690 <USBD_StdEPReq+0x324>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02a      	beq.n	80063ec <USBD_StdEPReq+0x80>
 8006396:	2b20      	cmp	r3, #32
 8006398:	f040 817a 	bne.w	8006690 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fed9 	bl	8006158 <USBD_CoreFindEP>
 80063a6:	4603      	mov	r3, r0
 80063a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063aa:	7b7b      	ldrb	r3, [r7, #13]
 80063ac:	2bff      	cmp	r3, #255	@ 0xff
 80063ae:	f000 8174 	beq.w	800669a <USBD_StdEPReq+0x32e>
 80063b2:	7b7b      	ldrb	r3, [r7, #13]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8170 	bne.w	800669a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063ba:	7b7a      	ldrb	r2, [r7, #13]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063c2:	7b7a      	ldrb	r2, [r7, #13]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32ae      	adds	r2, #174	@ 0xae
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8163 	beq.w	800669a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063d4:	7b7a      	ldrb	r2, [r7, #13]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	32ae      	adds	r2, #174	@ 0xae
 80063da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ea:	e156      	b.n	800669a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d008      	beq.n	8006406 <USBD_StdEPReq+0x9a>
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	f300 8145 	bgt.w	8006684 <USBD_StdEPReq+0x318>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 809b 	beq.w	8006536 <USBD_StdEPReq+0x1ca>
 8006400:	2b01      	cmp	r3, #1
 8006402:	d03c      	beq.n	800647e <USBD_StdEPReq+0x112>
 8006404:	e13e      	b.n	8006684 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d002      	beq.n	8006418 <USBD_StdEPReq+0xac>
 8006412:	2b03      	cmp	r3, #3
 8006414:	d016      	beq.n	8006444 <USBD_StdEPReq+0xd8>
 8006416:	e02c      	b.n	8006472 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <USBD_StdEPReq+0xce>
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b80      	cmp	r3, #128	@ 0x80
 8006422:	d00a      	beq.n	800643a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fe39 	bl	80070a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800642e:	2180      	movs	r1, #128	@ 0x80
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fe35 	bl	80070a0 <USBD_LL_StallEP>
 8006436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006438:	e020      	b.n	800647c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fca4 	bl	8006d8a <USBD_CtlError>
              break;
 8006442:	e01b      	b.n	800647c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	885b      	ldrh	r3, [r3, #2]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10e      	bne.n	800646a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <USBD_StdEPReq+0xfe>
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b80      	cmp	r3, #128	@ 0x80
 8006456:	d008      	beq.n	800646a <USBD_StdEPReq+0xfe>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	88db      	ldrh	r3, [r3, #6]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fe1b 	bl	80070a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fcdb 	bl	8006e26 <USBD_CtlSendStatus>

              break;
 8006470:	e004      	b.n	800647c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc88 	bl	8006d8a <USBD_CtlError>
              break;
 800647a:	bf00      	nop
          }
          break;
 800647c:	e107      	b.n	800668e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d002      	beq.n	8006490 <USBD_StdEPReq+0x124>
 800648a:	2b03      	cmp	r3, #3
 800648c:	d016      	beq.n	80064bc <USBD_StdEPReq+0x150>
 800648e:	e04b      	b.n	8006528 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00d      	beq.n	80064b2 <USBD_StdEPReq+0x146>
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	2b80      	cmp	r3, #128	@ 0x80
 800649a:	d00a      	beq.n	80064b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fdfd 	bl	80070a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064a6:	2180      	movs	r1, #128	@ 0x80
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fdf9 	bl	80070a0 <USBD_LL_StallEP>
 80064ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064b0:	e040      	b.n	8006534 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc68 	bl	8006d8a <USBD_CtlError>
              break;
 80064ba:	e03b      	b.n	8006534 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	885b      	ldrh	r3, [r3, #2]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d136      	bne.n	8006532 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fe03 	bl	80070de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fca4 	bl	8006e26 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fe38 	bl	8006158 <USBD_CoreFindEP>
 80064e8:	4603      	mov	r3, r0
 80064ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ec:	7b7b      	ldrb	r3, [r7, #13]
 80064ee:	2bff      	cmp	r3, #255	@ 0xff
 80064f0:	d01f      	beq.n	8006532 <USBD_StdEPReq+0x1c6>
 80064f2:	7b7b      	ldrb	r3, [r7, #13]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11c      	bne.n	8006532 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064f8:	7b7a      	ldrb	r2, [r7, #13]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006500:	7b7a      	ldrb	r2, [r7, #13]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	32ae      	adds	r2, #174	@ 0xae
 8006506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006510:	7b7a      	ldrb	r2, [r7, #13]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32ae      	adds	r2, #174	@ 0xae
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006526:	e004      	b.n	8006532 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fc2d 	bl	8006d8a <USBD_CtlError>
              break;
 8006530:	e000      	b.n	8006534 <USBD_StdEPReq+0x1c8>
              break;
 8006532:	bf00      	nop
          }
          break;
 8006534:	e0ab      	b.n	800668e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d002      	beq.n	8006548 <USBD_StdEPReq+0x1dc>
 8006542:	2b03      	cmp	r3, #3
 8006544:	d032      	beq.n	80065ac <USBD_StdEPReq+0x240>
 8006546:	e097      	b.n	8006678 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <USBD_StdEPReq+0x1f2>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b80      	cmp	r3, #128	@ 0x80
 8006552:	d004      	beq.n	800655e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fc17 	bl	8006d8a <USBD_CtlError>
                break;
 800655c:	e091      	b.n	8006682 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006562:	2b00      	cmp	r3, #0
 8006564:	da0b      	bge.n	800657e <USBD_StdEPReq+0x212>
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	3310      	adds	r3, #16
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	e00b      	b.n	8006596 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	3304      	adds	r3, #4
 8006596:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2202      	movs	r2, #2
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc01 	bl	8006dac <USBD_CtlSendData>
              break;
 80065aa:	e06a      	b.n	8006682 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da11      	bge.n	80065d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3324      	adds	r3, #36	@ 0x24
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d117      	bne.n	80065fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fbda 	bl	8006d8a <USBD_CtlError>
                  break;
 80065d6:	e054      	b.n	8006682 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fbc7 	bl	8006d8a <USBD_CtlError>
                  break;
 80065fc:	e041      	b.n	8006682 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006602:	2b00      	cmp	r3, #0
 8006604:	da0b      	bge.n	800661e <USBD_StdEPReq+0x2b2>
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	3310      	adds	r3, #16
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4413      	add	r3, r2
 800661a:	3304      	adds	r3, #4
 800661c:	e00b      	b.n	8006636 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	3304      	adds	r3, #4
 8006636:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USBD_StdEPReq+0x2d8>
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b80      	cmp	r3, #128	@ 0x80
 8006642:	d103      	bne.n	800664c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e00e      	b.n	800666a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fd63 	bl	800711c <USBD_LL_IsStallEP>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e002      	b.n	800666a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2202      	movs	r2, #2
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb9b 	bl	8006dac <USBD_CtlSendData>
              break;
 8006676:	e004      	b.n	8006682 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb85 	bl	8006d8a <USBD_CtlError>
              break;
 8006680:	bf00      	nop
          }
          break;
 8006682:	e004      	b.n	800668e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fb7f 	bl	8006d8a <USBD_CtlError>
          break;
 800668c:	bf00      	nop
      }
      break;
 800668e:	e005      	b.n	800669c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fb79 	bl	8006d8a <USBD_CtlError>
      break;
 8006698:	e000      	b.n	800669c <USBD_StdEPReq+0x330>
      break;
 800669a:	bf00      	nop
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b0e      	cmp	r3, #14
 80066ca:	f200 8152 	bhi.w	8006972 <USBD_GetDescriptor+0x2ca>
 80066ce:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <USBD_GetDescriptor+0x2c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	08006745 	.word	0x08006745
 80066d8:	0800675d 	.word	0x0800675d
 80066dc:	0800679d 	.word	0x0800679d
 80066e0:	08006973 	.word	0x08006973
 80066e4:	08006973 	.word	0x08006973
 80066e8:	08006913 	.word	0x08006913
 80066ec:	0800693f 	.word	0x0800693f
 80066f0:	08006973 	.word	0x08006973
 80066f4:	08006973 	.word	0x08006973
 80066f8:	08006973 	.word	0x08006973
 80066fc:	08006973 	.word	0x08006973
 8006700:	08006973 	.word	0x08006973
 8006704:	08006973 	.word	0x08006973
 8006708:	08006973 	.word	0x08006973
 800670c:	08006711 	.word	0x08006711
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006732:	e126      	b.n	8006982 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fb27 	bl	8006d8a <USBD_CtlError>
        err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
      break;
 8006742:	e11e      	b.n	8006982 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
      break;
 800675a:	e112      	b.n	8006982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7c1b      	ldrb	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10d      	bne.n	8006780 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	f107 0208 	add.w	r2, r7, #8
 8006770:	4610      	mov	r0, r2
 8006772:	4798      	blx	r3
 8006774:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3301      	adds	r3, #1
 800677a:	2202      	movs	r2, #2
 800677c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800677e:	e100      	b.n	8006982 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	f107 0208 	add.w	r2, r7, #8
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3301      	adds	r3, #1
 8006796:	2202      	movs	r2, #2
 8006798:	701a      	strb	r2, [r3, #0]
      break;
 800679a:	e0f2      	b.n	8006982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	885b      	ldrh	r3, [r3, #2]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	f200 80ac 	bhi.w	8006900 <USBD_GetDescriptor+0x258>
 80067a8:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <USBD_GetDescriptor+0x108>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	08006831 	.word	0x08006831
 80067bc:	08006865 	.word	0x08006865
 80067c0:	08006899 	.word	0x08006899
 80067c4:	080068cd 	.word	0x080068cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	7c12      	ldrb	r2, [r2, #16]
 80067e0:	f107 0108 	add.w	r1, r7, #8
 80067e4:	4610      	mov	r0, r2
 80067e6:	4798      	blx	r3
 80067e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ea:	e091      	b.n	8006910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 facb 	bl	8006d8a <USBD_CtlError>
            err++;
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	3301      	adds	r3, #1
 80067f8:	72fb      	strb	r3, [r7, #11]
          break;
 80067fa:	e089      	b.n	8006910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	7c12      	ldrb	r2, [r2, #16]
 8006814:	f107 0108 	add.w	r1, r7, #8
 8006818:	4610      	mov	r0, r2
 800681a:	4798      	blx	r3
 800681c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800681e:	e077      	b.n	8006910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fab1 	bl	8006d8a <USBD_CtlError>
            err++;
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	3301      	adds	r3, #1
 800682c:	72fb      	strb	r3, [r7, #11]
          break;
 800682e:	e06f      	b.n	8006910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00b      	beq.n	8006854 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	7c12      	ldrb	r2, [r2, #16]
 8006848:	f107 0108 	add.w	r1, r7, #8
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006852:	e05d      	b.n	8006910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fa97 	bl	8006d8a <USBD_CtlError>
            err++;
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	3301      	adds	r3, #1
 8006860:	72fb      	strb	r3, [r7, #11]
          break;
 8006862:	e055      	b.n	8006910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	7c12      	ldrb	r2, [r2, #16]
 800687c:	f107 0108 	add.w	r1, r7, #8
 8006880:	4610      	mov	r0, r2
 8006882:	4798      	blx	r3
 8006884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006886:	e043      	b.n	8006910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa7d 	bl	8006d8a <USBD_CtlError>
            err++;
 8006890:	7afb      	ldrb	r3, [r7, #11]
 8006892:	3301      	adds	r3, #1
 8006894:	72fb      	strb	r3, [r7, #11]
          break;
 8006896:	e03b      	b.n	8006910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	7c12      	ldrb	r2, [r2, #16]
 80068b0:	f107 0108 	add.w	r1, r7, #8
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
 80068b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ba:	e029      	b.n	8006910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa63 	bl	8006d8a <USBD_CtlError>
            err++;
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	3301      	adds	r3, #1
 80068c8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ca:	e021      	b.n	8006910 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	7c12      	ldrb	r2, [r2, #16]
 80068e4:	f107 0108 	add.w	r1, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ee:	e00f      	b.n	8006910 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa49 	bl	8006d8a <USBD_CtlError>
            err++;
 80068f8:	7afb      	ldrb	r3, [r7, #11]
 80068fa:	3301      	adds	r3, #1
 80068fc:	72fb      	strb	r3, [r7, #11]
          break;
 80068fe:	e007      	b.n	8006910 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fa41 	bl	8006d8a <USBD_CtlError>
          err++;
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	3301      	adds	r3, #1
 800690c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800690e:	bf00      	nop
      }
      break;
 8006910:	e037      	b.n	8006982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7c1b      	ldrb	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006922:	f107 0208 	add.w	r2, r7, #8
 8006926:	4610      	mov	r0, r2
 8006928:	4798      	blx	r3
 800692a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800692c:	e029      	b.n	8006982 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fa2a 	bl	8006d8a <USBD_CtlError>
        err++;
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	3301      	adds	r3, #1
 800693a:	72fb      	strb	r3, [r7, #11]
      break;
 800693c:	e021      	b.n	8006982 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	7c1b      	ldrb	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800694c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694e:	f107 0208 	add.w	r2, r7, #8
 8006952:	4610      	mov	r0, r2
 8006954:	4798      	blx	r3
 8006956:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3301      	adds	r3, #1
 800695c:	2207      	movs	r2, #7
 800695e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006960:	e00f      	b.n	8006982 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa10 	bl	8006d8a <USBD_CtlError>
        err++;
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	3301      	adds	r3, #1
 800696e:	72fb      	strb	r3, [r7, #11]
      break;
 8006970:	e007      	b.n	8006982 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa08 	bl	8006d8a <USBD_CtlError>
      err++;
 800697a:	7afb      	ldrb	r3, [r7, #11]
 800697c:	3301      	adds	r3, #1
 800697e:	72fb      	strb	r3, [r7, #11]
      break;
 8006980:	bf00      	nop
  }

  if (err != 0U)
 8006982:	7afb      	ldrb	r3, [r7, #11]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11e      	bne.n	80069c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	88db      	ldrh	r3, [r3, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d016      	beq.n	80069be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006990:	893b      	ldrh	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00e      	beq.n	80069b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88da      	ldrh	r2, [r3, #6]
 800699a:	893b      	ldrh	r3, [r7, #8]
 800699c:	4293      	cmp	r3, r2
 800699e:	bf28      	it	cs
 80069a0:	4613      	movcs	r3, r2
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80069a6:	893b      	ldrh	r3, [r7, #8]
 80069a8:	461a      	mov	r2, r3
 80069aa:	68f9      	ldr	r1, [r7, #12]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f9fd 	bl	8006dac <USBD_CtlSendData>
 80069b2:	e009      	b.n	80069c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9e7 	bl	8006d8a <USBD_CtlError>
 80069bc:	e004      	b.n	80069c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa31 	bl	8006e26 <USBD_CtlSendStatus>
 80069c4:	e000      	b.n	80069c8 <USBD_GetDescriptor+0x320>
    return;
 80069c6:	bf00      	nop
  }
}
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop

080069d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	889b      	ldrh	r3, [r3, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d131      	bne.n	8006a46 <USBD_SetAddress+0x76>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d12d      	bne.n	8006a46 <USBD_SetAddress+0x76>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	885b      	ldrh	r3, [r3, #2]
 80069ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80069f0:	d829      	bhi.n	8006a46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	885b      	ldrh	r3, [r3, #2]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d104      	bne.n	8006a14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f9bc 	bl	8006d8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a12:	e01d      	b.n	8006a50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7bfa      	ldrb	r2, [r7, #15]
 8006a18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fba7 	bl	8007174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f9fd 	bl	8006e26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a3a:	e009      	b.n	8006a50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a44:	e004      	b.n	8006a50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f99e 	bl	8006d8a <USBD_CtlError>
  }
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	885b      	ldrh	r3, [r3, #2]
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006a6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a70:	4b4d      	ldr	r3, [pc, #308]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d905      	bls.n	8006a84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f985 	bl	8006d8a <USBD_CtlError>
    return USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e08c      	b.n	8006b9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d002      	beq.n	8006a96 <USBD_SetConfig+0x3e>
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d029      	beq.n	8006ae8 <USBD_SetConfig+0x90>
 8006a94:	e075      	b.n	8006b82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a96:	4b44      	ldr	r3, [pc, #272]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d020      	beq.n	8006ae0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a9e:	4b42      	ldr	r3, [pc, #264]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff f80d 	bl	8005ace <USBD_SetClassConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f962 	bl	8006d8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ace:	e065      	b.n	8006b9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9a8 	bl	8006e26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006ade:	e05d      	b.n	8006b9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9a0 	bl	8006e26 <USBD_CtlSendStatus>
      break;
 8006ae6:	e059      	b.n	8006b9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d112      	bne.n	8006b16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006af8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b02:	4b29      	ldr	r3, [pc, #164]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7fe fffc 	bl	8005b06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f989 	bl	8006e26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b14:	e042      	b.n	8006b9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b16:	4b24      	ldr	r3, [pc, #144]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d02a      	beq.n	8006b7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7fe ffea 	bl	8005b06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006b32:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fe ffc3 	bl	8005ace <USBD_SetClassConfig>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00f      	beq.n	8006b72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f918 	bl	8006d8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fe ffcf 	bl	8005b06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006b70:	e014      	b.n	8006b9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f957 	bl	8006e26 <USBD_CtlSendStatus>
      break;
 8006b78:	e010      	b.n	8006b9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f953 	bl	8006e26 <USBD_CtlSendStatus>
      break;
 8006b80:	e00c      	b.n	8006b9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f900 	bl	8006d8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <USBD_SetConfig+0x150>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fe ffb8 	bl	8005b06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b96:	2303      	movs	r3, #3
 8006b98:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9a:	bf00      	nop
  }

  return ret;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	2000013c 	.word	0x2000013c

08006bac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	88db      	ldrh	r3, [r3, #6]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d004      	beq.n	8006bc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f8e2 	bl	8006d8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006bc6:	e023      	b.n	8006c10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	dc02      	bgt.n	8006bda <USBD_GetConfig+0x2e>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dc03      	bgt.n	8006be0 <USBD_GetConfig+0x34>
 8006bd8:	e015      	b.n	8006c06 <USBD_GetConfig+0x5a>
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d00b      	beq.n	8006bf6 <USBD_GetConfig+0x4a>
 8006bde:	e012      	b.n	8006c06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3308      	adds	r3, #8
 8006bea:	2201      	movs	r2, #1
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f8dc 	bl	8006dac <USBD_CtlSendData>
        break;
 8006bf4:	e00c      	b.n	8006c10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8d4 	bl	8006dac <USBD_CtlSendData>
        break;
 8006c04:	e004      	b.n	8006c10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f8be 	bl	8006d8a <USBD_CtlError>
        break;
 8006c0e:	bf00      	nop
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d81e      	bhi.n	8006c6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	88db      	ldrh	r3, [r3, #6]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d004      	beq.n	8006c42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8a5 	bl	8006d8a <USBD_CtlError>
        break;
 8006c40:	e01a      	b.n	8006c78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f043 0202 	orr.w	r2, r3, #2
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	330c      	adds	r3, #12
 8006c62:	2202      	movs	r2, #2
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8a0 	bl	8006dac <USBD_CtlSendData>
      break;
 8006c6c:	e004      	b.n	8006c78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f88a 	bl	8006d8a <USBD_CtlError>
      break;
 8006c76:	bf00      	nop
  }
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	885b      	ldrh	r3, [r3, #2]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d107      	bne.n	8006ca2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8c3 	bl	8006e26 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ca0:	e013      	b.n	8006cca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	885b      	ldrh	r3, [r3, #2]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d10b      	bne.n	8006cc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	889b      	ldrh	r3, [r3, #4]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8b3 	bl	8006e26 <USBD_CtlSendStatus>
}
 8006cc0:	e003      	b.n	8006cca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f860 	bl	8006d8a <USBD_CtlError>
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d80b      	bhi.n	8006d02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	885b      	ldrh	r3, [r3, #2]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d10c      	bne.n	8006d0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f893 	bl	8006e26 <USBD_CtlSendStatus>
      }
      break;
 8006d00:	e004      	b.n	8006d0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f840 	bl	8006d8a <USBD_CtlError>
      break;
 8006d0a:	e000      	b.n	8006d0e <USBD_ClrFeature+0x3c>
      break;
 8006d0c:	bf00      	nop
  }
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fa16 	bl	8006172 <SWAPBYTE>
 8006d46:	4603      	mov	r3, r0
 8006d48:	461a      	mov	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff fa09 	bl	8006172 <SWAPBYTE>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7ff f9fc 	bl	8006172 <SWAPBYTE>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	80da      	strh	r2, [r3, #6]
}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d94:	2180      	movs	r1, #128	@ 0x80
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f982 	bl	80070a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f97e 	bl	80070a0 <USBD_LL_StallEP>
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f9ed 	bl	80071b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	2100      	movs	r1, #0
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f9dc 	bl	80071b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	2100      	movs	r1, #0
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f9ec 	bl	80071f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2204      	movs	r2, #4
 8006e32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e36:	2300      	movs	r3, #0
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f9b8 	bl	80071b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2205      	movs	r2, #5
 8006e58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9c6 	bl	80071f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe fe56 	bl	8005b3a <USBD_LL_SetupStage>
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f7fe fe90 	bl	8005be4 <USBD_LL_DataOutStage>
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3320      	adds	r3, #32
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f7fe ff29 	bl	8005d4a <USBD_LL_DataInStage>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff f863 	bl	8005fda <USBD_LL_SOF>
}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	79db      	ldrb	r3, [r3, #7]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
 8006f34:	e008      	b.n	8006f48 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	79db      	ldrb	r3, [r3, #7]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d102      	bne.n	8006f44 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
 8006f42:	e001      	b.n	8006f48 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006f44:	f7fa f81e 	bl	8000f84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f4e:	7bfa      	ldrb	r2, [r7, #15]
 8006f50:	4611      	mov	r1, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fffd 	bl	8005f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe ffa5 	bl	8005eae <USBD_LL_Reset>
}
 8006f64:	bf00      	nop
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fff9 	bl	8005f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7adb      	ldrb	r3, [r3, #11]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fa0:	4b04      	ldr	r3, [pc, #16]	@ (8006fb4 <HAL_PCD_SuspendCallback+0x48>)
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	4a03      	ldr	r2, [pc, #12]	@ (8006fb4 <HAL_PCD_SuspendCallback+0x48>)
 8006fa6:	f043 0306 	orr.w	r3, r3, #6
 8006faa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	e000ed00 	.word	0xe000ed00

08006fb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe ffef 	bl	8005faa <USBD_LL_Resume>
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff f847 	bl	800607e <USBD_LL_IsoOUTIncomplete>
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff f803 	bl	800601a <USBD_LL_IsoINIncomplete>
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff f859 	bl	80060e2 <USBD_LL_DevConnected>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff f856 	bl	80060f8 <USBD_LL_DevDisconnected>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	461a      	mov	r2, r3
 8007062:	4603      	mov	r3, r0
 8007064:	70fb      	strb	r3, [r7, #3]
 8007066:	460b      	mov	r3, r1
 8007068:	70bb      	strb	r3, [r7, #2]
 800706a:	4613      	mov	r3, r2
 800706c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800707c:	78bb      	ldrb	r3, [r7, #2]
 800707e:	883a      	ldrh	r2, [r7, #0]
 8007080:	78f9      	ldrb	r1, [r7, #3]
 8007082:	f7fc f91f 	bl	80032c4 <HAL_PCD_EP_Open>
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 f921 	bl	80072d4 <USBD_Get_USB_Status>
 8007092:	4603      	mov	r3, r0
 8007094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007096:	7bbb      	ldrb	r3, [r7, #14]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fc f9dd 	bl	800347e <HAL_PCD_EP_SetStall>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f902 	bl	80072d4 <USBD_Get_USB_Status>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	4611      	mov	r1, r2
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fc fa21 	bl	8003544 <HAL_PCD_EP_ClrStall>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f8e3 	bl	80072d4 <USBD_Get_USB_Status>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007112:	7bbb      	ldrb	r3, [r7, #14]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800712e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007134:	2b00      	cmp	r3, #0
 8007136:	da0b      	bge.n	8007150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	3316      	adds	r3, #22
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	e00b      	b.n	8007168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007156:	68f9      	ldr	r1, [r7, #12]
 8007158:	4613      	mov	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007166:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	4611      	mov	r1, r2
 8007192:	4618      	mov	r0, r3
 8007194:	f7fc f872 	bl	800327c <HAL_PCD_SetAddress>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800719c:	7bfb      	ldrb	r3, [r7, #15]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f898 	bl	80072d4 <USBD_Get_USB_Status>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b086      	sub	sp, #24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	460b      	mov	r3, r1
 80071c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80071d0:	7af9      	ldrb	r1, [r7, #11]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	f7fc f918 	bl	800340a <HAL_PCD_EP_Transmit>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 f877 	bl	80072d4 <USBD_Get_USB_Status>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	460b      	mov	r3, r1
 8007202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007208:	2300      	movs	r3, #0
 800720a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007212:	7af9      	ldrb	r1, [r7, #11]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	f7fc f8bc 	bl	8003394 <HAL_PCD_EP_Receive>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f856 	bl	80072d4 <USBD_Get_USB_Status>
 8007228:	4603      	mov	r3, r0
 800722a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800722c:	7dbb      	ldrb	r3, [r7, #22]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007244:	78fb      	ldrb	r3, [r7, #3]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_PCDEx_LPM_Callback+0x18>
 800724a:	2b01      	cmp	r3, #1
 800724c:	d01f      	beq.n	800728e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800724e:	e03b      	b.n	80072c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7adb      	ldrb	r3, [r3, #11]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007258:	f7f9 fd24 	bl	8000ca4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800725c:	4b1c      	ldr	r3, [pc, #112]	@ (80072d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	4a1b      	ldr	r2, [pc, #108]	@ (80072d0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007262:	f023 0306 	bic.w	r3, r3, #6
 8007266:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe fe8f 	bl	8005faa <USBD_LL_Resume>
    break;
 800728c:	e01c      	b.n	80072c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6812      	ldr	r2, [r2, #0]
 800729c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fe60 	bl	8005f72 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	7adb      	ldrb	r3, [r3, #11]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d005      	beq.n	80072c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072ba:	4b05      	ldr	r3, [pc, #20]	@ (80072d0 <HAL_PCDEx_LPM_Callback+0x98>)
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	4a04      	ldr	r2, [pc, #16]	@ (80072d0 <HAL_PCDEx_LPM_Callback+0x98>)
 80072c0:	f043 0306 	orr.w	r3, r3, #6
 80072c4:	6113      	str	r3, [r2, #16]
    break;
 80072c6:	bf00      	nop
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed00 	.word	0xe000ed00

080072d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	2b03      	cmp	r3, #3
 80072e6:	d817      	bhi.n	8007318 <USBD_Get_USB_Status+0x44>
 80072e8:	a201      	add	r2, pc, #4	@ (adr r2, 80072f0 <USBD_Get_USB_Status+0x1c>)
 80072ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ee:	bf00      	nop
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007307 	.word	0x08007307
 80072f8:	0800730d 	.word	0x0800730d
 80072fc:	08007313 	.word	0x08007313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
    break;
 8007304:	e00b      	b.n	800731e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	73fb      	strb	r3, [r7, #15]
    break;
 800730a:	e008      	b.n	800731e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
    break;
 8007310:	e005      	b.n	800731e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	73fb      	strb	r3, [r7, #15]
    break;
 8007316:	e002      	b.n	800731e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	73fb      	strb	r3, [r7, #15]
    break;
 800731c:	bf00      	nop
  }
  return usb_status;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <memset>:
 800732c:	4402      	add	r2, r0
 800732e:	4603      	mov	r3, r0
 8007330:	4293      	cmp	r3, r2
 8007332:	d100      	bne.n	8007336 <memset+0xa>
 8007334:	4770      	bx	lr
 8007336:	f803 1b01 	strb.w	r1, [r3], #1
 800733a:	e7f9      	b.n	8007330 <memset+0x4>

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	@ (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	@ (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	@ (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	@ (8007380 <__libc_init_array+0x44>)
 8007350:	f000 f818 	bl	8007384 <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	080073d0 	.word	0x080073d0
 8007378:	080073d0 	.word	0x080073d0
 800737c:	080073d0 	.word	0x080073d0
 8007380:	080073d4 	.word	0x080073d4

08007384 <_init>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	bf00      	nop
 8007388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738a:	bc08      	pop	{r3}
 800738c:	469e      	mov	lr, r3
 800738e:	4770      	bx	lr

08007390 <_fini>:
 8007390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007392:	bf00      	nop
 8007394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007396:	bc08      	pop	{r3}
 8007398:	469e      	mov	lr, r3
 800739a:	4770      	bx	lr
