
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004524  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080046ec  080046ec  000056ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004720  08004720  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004728  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08004734  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004734  00006154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d41c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc2  00000000  00000000  00013458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00015220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aae  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002278a  00000000  00000000  00016a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b1e  00000000  00000000  000391f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d308e  00000000  00000000  00049d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cd9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  0011cde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00120894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080046d4 	.word	0x080046d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080046d4 	.word	0x080046d4

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2f>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007dc:	bf24      	itt	cs
 80007de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007e6:	d90d      	bls.n	8000804 <__aeabi_d2f+0x30>
 80007e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007fc:	bf08      	it	eq
 80007fe:	f020 0001 	biceq.w	r0, r0, #1
 8000802:	4770      	bx	lr
 8000804:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000808:	d121      	bne.n	800084e <__aeabi_d2f+0x7a>
 800080a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800080e:	bfbc      	itt	lt
 8000810:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000814:	4770      	bxlt	lr
 8000816:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800081a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800081e:	f1c2 0218 	rsb	r2, r2, #24
 8000822:	f1c2 0c20 	rsb	ip, r2, #32
 8000826:	fa10 f30c 	lsls.w	r3, r0, ip
 800082a:	fa20 f002 	lsr.w	r0, r0, r2
 800082e:	bf18      	it	ne
 8000830:	f040 0001 	orrne.w	r0, r0, #1
 8000834:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000838:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800083c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000840:	ea40 000c 	orr.w	r0, r0, ip
 8000844:	fa23 f302 	lsr.w	r3, r3, r2
 8000848:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800084c:	e7cc      	b.n	80007e8 <__aeabi_d2f+0x14>
 800084e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000852:	d107      	bne.n	8000864 <__aeabi_d2f+0x90>
 8000854:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000858:	bf1e      	ittt	ne
 800085a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800085e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000862:	4770      	bxne	lr
 8000864:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000868:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800086c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000884:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000888:	f000 b96a 	b.w	8000b60 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	9d08      	ldr	r5, [sp, #32]
 80008aa:	460c      	mov	r4, r1
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d14e      	bne.n	800094e <__udivmoddi4+0xaa>
 80008b0:	4694      	mov	ip, r2
 80008b2:	458c      	cmp	ip, r1
 80008b4:	4686      	mov	lr, r0
 80008b6:	fab2 f282 	clz	r2, r2
 80008ba:	d962      	bls.n	8000982 <__udivmoddi4+0xde>
 80008bc:	b14a      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008be:	f1c2 0320 	rsb	r3, r2, #32
 80008c2:	4091      	lsls	r1, r2
 80008c4:	fa20 f303 	lsr.w	r3, r0, r3
 80008c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008cc:	4319      	orrs	r1, r3
 80008ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f f68c 	uxth.w	r6, ip
 80008da:	fbb1 f4f7 	udiv	r4, r1, r7
 80008de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008e2:	fb07 1114 	mls	r1, r7, r4, r1
 80008e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ea:	fb04 f106 	mul.w	r1, r4, r6
 80008ee:	4299      	cmp	r1, r3
 80008f0:	d90a      	bls.n	8000908 <__udivmoddi4+0x64>
 80008f2:	eb1c 0303 	adds.w	r3, ip, r3
 80008f6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80008fa:	f080 8112 	bcs.w	8000b22 <__udivmoddi4+0x27e>
 80008fe:	4299      	cmp	r1, r3
 8000900:	f240 810f 	bls.w	8000b22 <__udivmoddi4+0x27e>
 8000904:	3c02      	subs	r4, #2
 8000906:	4463      	add	r3, ip
 8000908:	1a59      	subs	r1, r3, r1
 800090a:	fa1f f38e 	uxth.w	r3, lr
 800090e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000912:	fb07 1110 	mls	r1, r7, r0, r1
 8000916:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800091a:	fb00 f606 	mul.w	r6, r0, r6
 800091e:	429e      	cmp	r6, r3
 8000920:	d90a      	bls.n	8000938 <__udivmoddi4+0x94>
 8000922:	eb1c 0303 	adds.w	r3, ip, r3
 8000926:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800092a:	f080 80fc 	bcs.w	8000b26 <__udivmoddi4+0x282>
 800092e:	429e      	cmp	r6, r3
 8000930:	f240 80f9 	bls.w	8000b26 <__udivmoddi4+0x282>
 8000934:	4463      	add	r3, ip
 8000936:	3802      	subs	r0, #2
 8000938:	1b9b      	subs	r3, r3, r6
 800093a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800093e:	2100      	movs	r1, #0
 8000940:	b11d      	cbz	r5, 800094a <__udivmoddi4+0xa6>
 8000942:	40d3      	lsrs	r3, r2
 8000944:	2200      	movs	r2, #0
 8000946:	e9c5 3200 	strd	r3, r2, [r5]
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	428b      	cmp	r3, r1
 8000950:	d905      	bls.n	800095e <__udivmoddi4+0xba>
 8000952:	b10d      	cbz	r5, 8000958 <__udivmoddi4+0xb4>
 8000954:	e9c5 0100 	strd	r0, r1, [r5]
 8000958:	2100      	movs	r1, #0
 800095a:	4608      	mov	r0, r1
 800095c:	e7f5      	b.n	800094a <__udivmoddi4+0xa6>
 800095e:	fab3 f183 	clz	r1, r3
 8000962:	2900      	cmp	r1, #0
 8000964:	d146      	bne.n	80009f4 <__udivmoddi4+0x150>
 8000966:	42a3      	cmp	r3, r4
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xcc>
 800096a:	4290      	cmp	r0, r2
 800096c:	f0c0 80f0 	bcc.w	8000b50 <__udivmoddi4+0x2ac>
 8000970:	1a86      	subs	r6, r0, r2
 8000972:	eb64 0303 	sbc.w	r3, r4, r3
 8000976:	2001      	movs	r0, #1
 8000978:	2d00      	cmp	r5, #0
 800097a:	d0e6      	beq.n	800094a <__udivmoddi4+0xa6>
 800097c:	e9c5 6300 	strd	r6, r3, [r5]
 8000980:	e7e3      	b.n	800094a <__udivmoddi4+0xa6>
 8000982:	2a00      	cmp	r2, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x204>
 8000988:	eba1 040c 	sub.w	r4, r1, ip
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	2101      	movs	r1, #1
 8000996:	fbb4 f6f8 	udiv	r6, r4, r8
 800099a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800099e:	fb08 4416 	mls	r4, r8, r6, r4
 80009a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009a6:	fb07 f006 	mul.w	r0, r7, r6
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x11c>
 80009ae:	eb1c 0303 	adds.w	r3, ip, r3
 80009b2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0x11a>
 80009b8:	4298      	cmp	r0, r3
 80009ba:	f200 80cd 	bhi.w	8000b58 <__udivmoddi4+0x2b4>
 80009be:	4626      	mov	r6, r4
 80009c0:	1a1c      	subs	r4, r3, r0
 80009c2:	fa1f f38e 	uxth.w	r3, lr
 80009c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80009ca:	fb08 4410 	mls	r4, r8, r0, r4
 80009ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009d2:	fb00 f707 	mul.w	r7, r0, r7
 80009d6:	429f      	cmp	r7, r3
 80009d8:	d908      	bls.n	80009ec <__udivmoddi4+0x148>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009e2:	d202      	bcs.n	80009ea <__udivmoddi4+0x146>
 80009e4:	429f      	cmp	r7, r3
 80009e6:	f200 80b0 	bhi.w	8000b4a <__udivmoddi4+0x2a6>
 80009ea:	4620      	mov	r0, r4
 80009ec:	1bdb      	subs	r3, r3, r7
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	e7a5      	b.n	8000940 <__udivmoddi4+0x9c>
 80009f4:	f1c1 0620 	rsb	r6, r1, #32
 80009f8:	408b      	lsls	r3, r1
 80009fa:	fa22 f706 	lsr.w	r7, r2, r6
 80009fe:	431f      	orrs	r7, r3
 8000a00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a04:	fa04 f301 	lsl.w	r3, r4, r1
 8000a08:	ea43 030c 	orr.w	r3, r3, ip
 8000a0c:	40f4      	lsrs	r4, r6
 8000a0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a12:	0c38      	lsrs	r0, r7, #16
 8000a14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a18:	fbb4 fef0 	udiv	lr, r4, r0
 8000a1c:	fa1f fc87 	uxth.w	ip, r7
 8000a20:	fb00 441e 	mls	r4, r0, lr, r4
 8000a24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a28:	fb0e f90c 	mul.w	r9, lr, ip
 8000a2c:	45a1      	cmp	r9, r4
 8000a2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x1a6>
 8000a34:	193c      	adds	r4, r7, r4
 8000a36:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a3a:	f080 8084 	bcs.w	8000b46 <__udivmoddi4+0x2a2>
 8000a3e:	45a1      	cmp	r9, r4
 8000a40:	f240 8081 	bls.w	8000b46 <__udivmoddi4+0x2a2>
 8000a44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a48:	443c      	add	r4, r7
 8000a4a:	eba4 0409 	sub.w	r4, r4, r9
 8000a4e:	fa1f f983 	uxth.w	r9, r3
 8000a52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a56:	fb00 4413 	mls	r4, r0, r3, r4
 8000a5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a62:	45a4      	cmp	ip, r4
 8000a64:	d907      	bls.n	8000a76 <__udivmoddi4+0x1d2>
 8000a66:	193c      	adds	r4, r7, r4
 8000a68:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a6c:	d267      	bcs.n	8000b3e <__udivmoddi4+0x29a>
 8000a6e:	45a4      	cmp	ip, r4
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0x29a>
 8000a72:	3b02      	subs	r3, #2
 8000a74:	443c      	add	r4, r7
 8000a76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a7e:	eba4 040c 	sub.w	r4, r4, ip
 8000a82:	429c      	cmp	r4, r3
 8000a84:	46ce      	mov	lr, r9
 8000a86:	469c      	mov	ip, r3
 8000a88:	d351      	bcc.n	8000b2e <__udivmoddi4+0x28a>
 8000a8a:	d04e      	beq.n	8000b2a <__udivmoddi4+0x286>
 8000a8c:	b155      	cbz	r5, 8000aa4 <__udivmoddi4+0x200>
 8000a8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a92:	eb64 040c 	sbc.w	r4, r4, ip
 8000a96:	fa04 f606 	lsl.w	r6, r4, r6
 8000a9a:	40cb      	lsrs	r3, r1
 8000a9c:	431e      	orrs	r6, r3
 8000a9e:	40cc      	lsrs	r4, r1
 8000aa0:	e9c5 6400 	strd	r6, r4, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e750      	b.n	800094a <__udivmoddi4+0xa6>
 8000aa8:	f1c2 0320 	rsb	r3, r2, #32
 8000aac:	fa20 f103 	lsr.w	r1, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	430c      	orrs	r4, r1
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac4:	fa1f f78c 	uxth.w	r7, ip
 8000ac8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000acc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ad0:	0c23      	lsrs	r3, r4, #16
 8000ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad6:	fb00 f107 	mul.w	r1, r0, r7
 8000ada:	4299      	cmp	r1, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x24c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ae6:	d22c      	bcs.n	8000b42 <__udivmoddi4+0x29e>
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	d92a      	bls.n	8000b42 <__udivmoddi4+0x29e>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000af8:	fb08 3311 	mls	r3, r8, r1, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb01 f307 	mul.w	r3, r1, r7
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x276>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b10:	d213      	bcs.n	8000b3a <__udivmoddi4+0x296>
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	d911      	bls.n	8000b3a <__udivmoddi4+0x296>
 8000b16:	3902      	subs	r1, #2
 8000b18:	4464      	add	r4, ip
 8000b1a:	1ae4      	subs	r4, r4, r3
 8000b1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b20:	e739      	b.n	8000996 <__udivmoddi4+0xf2>
 8000b22:	4604      	mov	r4, r0
 8000b24:	e6f0      	b.n	8000908 <__udivmoddi4+0x64>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e706      	b.n	8000938 <__udivmoddi4+0x94>
 8000b2a:	45c8      	cmp	r8, r9
 8000b2c:	d2ae      	bcs.n	8000a8c <__udivmoddi4+0x1e8>
 8000b2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7a8      	b.n	8000a8c <__udivmoddi4+0x1e8>
 8000b3a:	4631      	mov	r1, r6
 8000b3c:	e7ed      	b.n	8000b1a <__udivmoddi4+0x276>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e799      	b.n	8000a76 <__udivmoddi4+0x1d2>
 8000b42:	4630      	mov	r0, r6
 8000b44:	e7d4      	b.n	8000af0 <__udivmoddi4+0x24c>
 8000b46:	46d6      	mov	lr, sl
 8000b48:	e77f      	b.n	8000a4a <__udivmoddi4+0x1a6>
 8000b4a:	4463      	add	r3, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	e74d      	b.n	80009ec <__udivmoddi4+0x148>
 8000b50:	4606      	mov	r6, r0
 8000b52:	4623      	mov	r3, r4
 8000b54:	4608      	mov	r0, r1
 8000b56:	e70f      	b.n	8000978 <__udivmoddi4+0xd4>
 8000b58:	3e02      	subs	r6, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	e730      	b.n	80009c0 <__udivmoddi4+0x11c>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <delayUS>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void delayUS(uint32_t us) {   // Sets the delay in microseconds.
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim10,0);  // set the counter value a 0
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <delayUS+0x2c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim10) < us);  // wait for the counter to reach the us input in the parameter
 8000b74:	bf00      	nop
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <delayUS+0x2c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d8f9      	bhi.n	8000b76 <delayUS+0x12>
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	2000007c 	.word	0x2000007c

08000b94 <CopyArray>:

void CopyArray(uint8_t *source, uint8_t *dest, uint8_t count)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t copyIndex = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	75fb      	strb	r3, [r7, #23]
    for (copyIndex = 0; copyIndex < count; copyIndex++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	e00a      	b.n	8000bc2 <CopyArray+0x2e>
    {
        dest[copyIndex] = source[copyIndex];
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	441a      	add	r2, r3
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	440b      	add	r3, r1
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	701a      	strb	r2, [r3, #0]
    for (copyIndex = 0; copyIndex < count; copyIndex++)
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	75fb      	strb	r3, [r7, #23]
 8000bc2:	7dfa      	ldrb	r2, [r7, #23]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3f0      	bcc.n	8000bac <CopyArray+0x18>
    }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <Checksum>:

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
	unsigned char i;
	unsigned char checksum = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]

	for(i=0; i<len; i++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	e009      	b.n	8000c02 <Checksum+0x2a>
		checksum += ptr[i];
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	73bb      	strb	r3, [r7, #14]
	for(i=0; i<len; i++)
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	7bfa      	ldrb	r2, [r7, #15]
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3f1      	bcc.n	8000bee <Checksum+0x16>

	checksum = 0xff & ~checksum;
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	73bb      	strb	r3, [r7, #14]

	return(checksum);
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <CRC8>:

unsigned char CRC8(unsigned char *ptr, unsigned char len)
//Calculates CRC8 for passed bytes. Used in i2c read and write functions
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	70fb      	strb	r3, [r7, #3]
	unsigned char i;
	unsigned char crc=0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73bb      	strb	r3, [r7, #14]
	while(len--!=0)
 8000c2e:	e029      	b.n	8000c84 <CRC8+0x66>
	{
		for(i=0x80; i!=0; i/=2)
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e020      	b.n	8000c78 <CRC8+0x5a>
		{
			if((crc & 0x80) != 0)
 8000c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	da09      	bge.n	8000c52 <CRC8+0x34>
			{
				crc *= 2;
 8000c3e:	7bbb      	ldrb	r3, [r7, #14]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	73bb      	strb	r3, [r7, #14]
				crc ^= 0x107;
 8000c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c48:	f083 0307 	eor.w	r3, r3, #7
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	73bb      	strb	r3, [r7, #14]
 8000c50:	e002      	b.n	8000c58 <CRC8+0x3a>
			}
			else
				crc *= 2;
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	73bb      	strb	r3, [r7, #14]

			if((*ptr & i)!=0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <CRC8+0x54>
				crc ^= 0x107;
 8000c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c6a:	f083 0307 	eor.w	r3, r3, #7
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	73bb      	strb	r3, [r7, #14]
		for(i=0x80; i!=0; i/=2)
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	085b      	lsrs	r3, r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1db      	bne.n	8000c36 <CRC8+0x18>
		}
		ptr++;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3301      	adds	r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
	while(len--!=0)
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	1e5a      	subs	r2, r3, #1
 8000c88:	70fa      	strb	r2, [r7, #3]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1d0      	bne.n	8000c30 <CRC8+0x12>
	}
	return(crc);
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <I2C_WriteReg>:

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08e      	sub	sp, #56	@ 0x38
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_Buffer [MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000cac:	4a2f      	ldr	r2, [pc, #188]	@ (8000d6c <I2C_WriteReg+0xd0>)
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb4:	c303      	stmia	r3!, {r0, r1}
 8000cb6:	801a      	strh	r2, [r3, #0]
#if CRC_Mode
	{
		uint8_t crc_count = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	77fb      	strb	r3, [r7, #31]
		crc_count = count * 2;
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	77fb      	strb	r3, [r7, #31]
		uint8_t crc1stByteBuffer [3] = {0x10, reg_addr, reg_data[0]};
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	743b      	strb	r3, [r7, #16]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	747b      	strb	r3, [r7, #17]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	74bb      	strb	r3, [r7, #18]
		unsigned int j;
		unsigned int i;
		uint8_t temp_crc_buffer [3];

		TX_Buffer[0] = reg_data[0];
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	753b      	strb	r3, [r7, #20]
		TX_Buffer[1] = CRC8(crc1stByteBuffer,3);
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	2103      	movs	r1, #3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff9e 	bl	8000c1e <CRC8>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	757b      	strb	r3, [r7, #21]

		j = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
		for(i=1; i<count; i++)
 8000cea:	2301      	movs	r3, #1
 8000cec:	623b      	str	r3, [r7, #32]
 8000cee:	e025      	b.n	8000d3c <I2C_WriteReg+0xa0>
		{
			TX_Buffer[j] = reg_data[i];
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	7819      	ldrb	r1, [r3, #0]
 8000cf8:	f107 0214 	add.w	r2, r7, #20
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfe:	4413      	add	r3, r2
 8000d00:	460a      	mov	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	3301      	adds	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
			temp_crc_buffer[0] = reg_data[i];
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	4413      	add	r3, r2
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	733b      	strb	r3, [r7, #12]
			TX_Buffer[j] = CRC8(temp_crc_buffer,1);
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff7f 	bl	8000c1e <CRC8>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4619      	mov	r1, r3
 8000d24:	f107 0214 	add.w	r2, r7, #20
 8000d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
			j = j + 1;
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d32:	3301      	adds	r3, #1
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
		for(i=1; i<count; i++)
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	6a3a      	ldr	r2, [r7, #32]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d3d5      	bcc.n	8000cf0 <I2C_WriteReg+0x54>
		}
		HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7ffb      	ldrb	r3, [r7, #31]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d50:	9102      	str	r1, [sp, #8]
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <I2C_WriteReg+0xd4>)
 8000d60:	f001 fca8 	bl	80026b4 <HAL_I2C_Mem_Write>
	}
#else
	HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
#endif
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	@ 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	080046ec 	.word	0x080046ec
 8000d70:	20000028 	.word	0x20000028

08000d74 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b092      	sub	sp, #72	@ 0x48
 8000d78:	af04      	add	r7, sp, #16
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]
	unsigned int RX_CRC_Fail = 0;  // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8000d84:	2300      	movs	r3, #0
 8000d86:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t RX_Buffer [MAX_BUFFER_SIZE] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000d88:	4a43      	ldr	r2, [pc, #268]	@ (8000e98 <I2C_ReadReg+0x124>)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d90:	c303      	stmia	r3!, {r0, r1}
 8000d92:	801a      	strh	r2, [r3, #0]
#if CRC_Mode
	{
		uint8_t crc_count = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		uint8_t ReceiveBuffer [10] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e98 <I2C_ReadReg+0x124>)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da2:	c303      	stmia	r3!, {r0, r1}
 8000da4:	801a      	strh	r2, [r3, #0]
		crc_count = count * 2;
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		unsigned int j;
		unsigned int i;
		unsigned char CRCc = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		uint8_t temp_crc_buffer [3];

		HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, ReceiveBuffer, crc_count, 1000);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dc2:	9102      	str	r1, [sp, #8]
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	4832      	ldr	r0, [pc, #200]	@ (8000e9c <I2C_ReadReg+0x128>)
 8000dd2:	f001 fd69 	bl	80028a8 <HAL_I2C_Mem_Read>
		uint8_t crc1stByteBuffer [4] = {0x10, reg_addr, 0x11, ReceiveBuffer[0]};
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	733b      	strb	r3, [r7, #12]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	737b      	strb	r3, [r7, #13]
 8000dde:	2311      	movs	r3, #17
 8000de0:	73bb      	strb	r3, [r7, #14]
 8000de2:	7d3b      	ldrb	r3, [r7, #20]
 8000de4:	73fb      	strb	r3, [r7, #15]
		CRCc = CRC8(crc1stByteBuffer,4);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2104      	movs	r1, #4
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff16 	bl	8000c1e <CRC8>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		if (CRCc != ReceiveBuffer[1])
 8000df8:	7d7b      	ldrb	r3, [r7, #21]
 8000dfa:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d002      	beq.n	8000e08 <I2C_ReadReg+0x94>
		{
			RX_CRC_Fail += 1;
 8000e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e04:	3301      	adds	r3, #1
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		RX_Buffer[0] = ReceiveBuffer[0];
 8000e08:	7d3b      	ldrb	r3, [r7, #20]
 8000e0a:	f887 3020 	strb.w	r3, [r7, #32]

		j = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	633b      	str	r3, [r7, #48]	@ 0x30
		for (i=1; i<count; i++)
 8000e12:	2301      	movs	r3, #1
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e16:	e02e      	b.n	8000e76 <I2C_ReadReg+0x102>
		{
			RX_Buffer[i] = ReceiveBuffer[j];
 8000e18:	f107 0214 	add.w	r2, r7, #20
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e1e:	4413      	add	r3, r2
 8000e20:	7819      	ldrb	r1, [r3, #0]
 8000e22:	f107 0220 	add.w	r2, r7, #32
 8000e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e28:	4413      	add	r3, r2
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
			temp_crc_buffer[0] = ReceiveBuffer[j];
 8000e2e:	f107 0214 	add.w	r2, r7, #20
 8000e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	743b      	strb	r3, [r7, #16]
			j = j + 1;
 8000e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
			CRCc = CRC8(temp_crc_buffer,1);
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2101      	movs	r1, #1
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fee9 	bl	8000c1e <CRC8>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
			if (CRCc != ReceiveBuffer[j])
 8000e52:	f107 0214 	add.w	r2, r7, #20
 8000e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d002      	beq.n	8000e6a <I2C_ReadReg+0xf6>
				RX_CRC_Fail += 1;
 8000e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e66:	3301      	adds	r3, #1
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
			j = j + 1;
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	633b      	str	r3, [r7, #48]	@ 0x30
		for (i=1; i<count; i++)
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e72:	3301      	adds	r3, #1
 8000e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3cc      	bcc.n	8000e18 <I2C_ReadReg+0xa4>
		}
		CopyArray(RX_Buffer, reg_data, crc_count);
 8000e7e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fe83 	bl	8000b94 <CopyArray>
	}
#else
	HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
#endif
	return 0;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3738      	adds	r7, #56	@ 0x38
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	080046ec 	.word	0x080046ec
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	80fb      	strh	r3, [r7, #6]
 8000eac:	4613      	mov	r3, r2
 8000eae:	717b      	strb	r3, [r7, #5]
	uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	82bb      	strh	r3, [r7, #20]
	uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000eb4:	4a62      	ldr	r2, [pc, #392]	@ (8001040 <BQ769x2_SetRegister+0x1a0>)
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ebe:	6018      	str	r0, [r3, #0]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	8019      	strh	r1, [r3, #0]

	//TX_RegData in little endian format
	TX_RegData[0] = reg_addr & 0xff;
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	733b      	strb	r3, [r7, #12]
	TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	737b      	strb	r3, [r7, #13]
	TX_RegData[2] = reg_data & 0xff; //1st byte of data
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	73bb      	strb	r3, [r7, #14]

	switch(datalen)
 8000eda:	797b      	ldrb	r3, [r7, #5]
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d07d      	beq.n	8000fdc <BQ769x2_SetRegister+0x13c>
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	f300 80a8 	bgt.w	8001036 <BQ769x2_SetRegister+0x196>
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d002      	beq.n	8000ef0 <BQ769x2_SetRegister+0x50>
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d039      	beq.n	8000f62 <BQ769x2_SetRegister+0xc2>
			TX_Buffer[1] = 0x08; //combined length of register address and data
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
			delayUS(2000);
			break;
    }
}
 8000eee:	e0a2      	b.n	8001036 <BQ769x2_SetRegister+0x196>
      		I2C_WriteReg(0x3E, TX_RegData, 3);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	203e      	movs	r0, #62	@ 0x3e
 8000efa:	f7ff fecf 	bl	8000c9c <I2C_WriteReg>
			delayUS(2000);
 8000efe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f02:	f7ff fe2f 	bl	8000b64 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 3);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe63 	bl	8000bd8 <Checksum>
 8000f12:	4603      	mov	r3, r0
 8000f14:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x05; //combined length of register address and data
 8000f16:	2305      	movs	r3, #5
 8000f18:	757b      	strb	r3, [r7, #21]
			uint8_t statusLow = 0xFF;
 8000f1a:	23ff      	movs	r3, #255	@ 0xff
 8000f1c:	72fb      	strb	r3, [r7, #11]
			    uint8_t statusHigh = 0xFF;
 8000f1e:	23ff      	movs	r3, #255	@ 0xff
 8000f20:	72bb      	strb	r3, [r7, #10]
			        I2C_ReadReg(0x3E, &statusLow, 1);
 8000f22:	f107 030b 	add.w	r3, r7, #11
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	203e      	movs	r0, #62	@ 0x3e
 8000f2c:	f7ff ff22 	bl	8000d74 <I2C_ReadReg>
			        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000f30:	f107 030a 	add.w	r3, r7, #10
 8000f34:	2201      	movs	r2, #1
 8000f36:	4619      	mov	r1, r3
 8000f38:	203f      	movs	r0, #63	@ 0x3f
 8000f3a:	f7ff ff1b 	bl	8000d74 <I2C_ReadReg>
			    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	2bff      	cmp	r3, #255	@ 0xff
 8000f42:	d102      	bne.n	8000f4a <BQ769x2_SetRegister+0xaa>
 8000f44:	7abb      	ldrb	r3, [r7, #10]
 8000f46:	2bff      	cmp	r3, #255	@ 0xff
 8000f48:	d0eb      	beq.n	8000f22 <BQ769x2_SetRegister+0x82>
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4619      	mov	r1, r3
 8000f52:	2060      	movs	r0, #96	@ 0x60
 8000f54:	f7ff fea2 	bl	8000c9c <I2C_WriteReg>
			delayUS(2000);
 8000f58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f5c:	f7ff fe02 	bl	8000b64 <delayUS>
			break;
 8000f60:	e069      	b.n	8001036 <BQ769x2_SetRegister+0x196>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	73fb      	strb	r3, [r7, #15]
			I2C_WriteReg(0x3E, TX_RegData, 4);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2204      	movs	r2, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	203e      	movs	r0, #62	@ 0x3e
 8000f74:	f7ff fe92 	bl	8000c9c <I2C_WriteReg>
			delayUS(2000);
 8000f78:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f7c:	f7ff fdf2 	bl	8000b64 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2104      	movs	r1, #4
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fe26 	bl	8000bd8 <Checksum>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x06; //combined length of register address and data
 8000f90:	2306      	movs	r3, #6
 8000f92:	757b      	strb	r3, [r7, #21]
			statusLow = 0xFF;
 8000f94:	23ff      	movs	r3, #255	@ 0xff
 8000f96:	72fb      	strb	r3, [r7, #11]
			statusHigh = 0xFF;
 8000f98:	23ff      	movs	r3, #255	@ 0xff
 8000f9a:	72bb      	strb	r3, [r7, #10]
			        I2C_ReadReg(0x3E, &statusLow, 1);
 8000f9c:	f107 030b 	add.w	r3, r7, #11
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	203e      	movs	r0, #62	@ 0x3e
 8000fa6:	f7ff fee5 	bl	8000d74 <I2C_ReadReg>
			        I2C_ReadReg(0x3F, &statusHigh, 1);
 8000faa:	f107 030a 	add.w	r3, r7, #10
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	203f      	movs	r0, #63	@ 0x3f
 8000fb4:	f7ff fede 	bl	8000d74 <I2C_ReadReg>
			    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	2bff      	cmp	r3, #255	@ 0xff
 8000fbc:	d102      	bne.n	8000fc4 <BQ769x2_SetRegister+0x124>
 8000fbe:	7abb      	ldrb	r3, [r7, #10]
 8000fc0:	2bff      	cmp	r3, #255	@ 0xff
 8000fc2:	d0eb      	beq.n	8000f9c <BQ769x2_SetRegister+0xfc>
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2060      	movs	r0, #96	@ 0x60
 8000fce:	f7ff fe65 	bl	8000c9c <I2C_WriteReg>
			delayUS(2000);
 8000fd2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fd6:	f7ff fdc5 	bl	8000b64 <delayUS>
			break;
 8000fda:	e02c      	b.n	8001036 <BQ769x2_SetRegister+0x196>
			TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]
			TX_RegData[4] = (reg_data >> 16) & 0xff;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	743b      	strb	r3, [r7, #16]
			TX_RegData[5] = (reg_data >> 24) & 0xff;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	0e1b      	lsrs	r3, r3, #24
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	747b      	strb	r3, [r7, #17]
			I2C_WriteReg(0x3E, TX_RegData, 6);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2206      	movs	r2, #6
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	203e      	movs	r0, #62	@ 0x3e
 8000ffe:	f7ff fe4d 	bl	8000c9c <I2C_WriteReg>
			delayUS(2000);
 8001002:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001006:	f7ff fdad 	bl	8000b64 <delayUS>
			TX_Buffer[0] = Checksum(TX_RegData, 6);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2106      	movs	r1, #6
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fde1 	bl	8000bd8 <Checksum>
 8001016:	4603      	mov	r3, r0
 8001018:	753b      	strb	r3, [r7, #20]
			TX_Buffer[1] = 0x08; //combined length of register address and data
 800101a:	2308      	movs	r3, #8
 800101c:	757b      	strb	r3, [r7, #21]
      		I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2202      	movs	r2, #2
 8001024:	4619      	mov	r1, r3
 8001026:	2060      	movs	r0, #96	@ 0x60
 8001028:	f7ff fe38 	bl	8000c9c <I2C_WriteReg>
			delayUS(2000);
 800102c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001030:	f7ff fd98 	bl	8000b64 <delayUS>
			break;
 8001034:	bf00      	nop
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	080046f8 	.word	0x080046f8

08001044 <BQ769x2_ReadRegister>:

uint16_t BQ769x2_ReadRegister(uint16_t reg_addr) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
    uint8_t TX_RegAddr[2] = {0};  // Array to hold the register address
 800104e:	2300      	movs	r3, #0
 8001050:	82bb      	strh	r3, [r7, #20]
    uint8_t RX_Buffer[2] = {0};   // Array to hold the received data
 8001052:	2300      	movs	r3, #0
 8001054:	823b      	strh	r3, [r7, #16]

    // Populate the TX_RegAddr array with the register address
    TX_RegAddr[0] = reg_addr & 0xFF;          // Lower byte of register address
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	753b      	strb	r3, [r7, #20]
    TX_RegAddr[1] = (reg_addr >> 8) & 0xFF;   // Upper byte of register address
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	757b      	strb	r3, [r7, #21]

    // Write the register address to the 0x3E register
    I2C_WriteReg(0x3E, TX_RegAddr, 2);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2202      	movs	r2, #2
 800106c:	4619      	mov	r1, r3
 800106e:	203e      	movs	r0, #62	@ 0x3e
 8001070:	f7ff fe14 	bl	8000c9c <I2C_WriteReg>
    delayUS(2000);  // Delay to allow time for the write to complete
 8001074:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001078:	f7ff fd74 	bl	8000b64 <delayUS>

    // Poll the 0x3E register until it no longer returns 0xFF
    uint8_t statusLow = 0xFF;
 800107c:	23ff      	movs	r3, #255	@ 0xff
 800107e:	73fb      	strb	r3, [r7, #15]
    uint8_t statusHigh = 0xFF;
 8001080:	23ff      	movs	r3, #255	@ 0xff
 8001082:	73bb      	strb	r3, [r7, #14]
    do {
        I2C_ReadReg(0x3E, &statusLow, 1);
 8001084:	f107 030f 	add.w	r3, r7, #15
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	203e      	movs	r0, #62	@ 0x3e
 800108e:	f7ff fe71 	bl	8000d74 <I2C_ReadReg>
        I2C_ReadReg(0x3F, &statusHigh, 1);
 8001092:	f107 030e 	add.w	r3, r7, #14
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	203f      	movs	r0, #63	@ 0x3f
 800109c:	f7ff fe6a 	bl	8000d74 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2bff      	cmp	r3, #255	@ 0xff
 80010a4:	d102      	bne.n	80010ac <BQ769x2_ReadRegister+0x68>
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d0eb      	beq.n	8001084 <BQ769x2_ReadRegister+0x40>

    //HAL_Delay(200);
    // Read the data from the buffer starting at 0x40
    I2C_ReadReg(0x40, RX_Buffer, 2);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2202      	movs	r2, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	2040      	movs	r0, #64	@ 0x40
 80010b6:	f7ff fe5d 	bl	8000d74 <I2C_ReadReg>

    // Combine the received bytes into a single 16-bit value
    RX_data[0] = RX_Buffer[0];
 80010ba:	7c3a      	ldrb	r2, [r7, #16]
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <BQ769x2_ReadRegister+0x9c>)
 80010be:	701a      	strb	r2, [r3, #0]
    RX_data[1] = RX_Buffer[1];
 80010c0:	7c7a      	ldrb	r2, [r7, #17]
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <BQ769x2_ReadRegister+0x9c>)
 80010c4:	705a      	strb	r2, [r3, #1]
    uint16_t reg_data = (RX_Buffer[1] << 8) | RX_Buffer[0];
 80010c6:	7c7b      	ldrb	r3, [r7, #17]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	82fb      	strh	r3, [r7, #22]

    return reg_data;
 80010d6:	8afb      	ldrh	r3, [r7, #22]

}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000c4 	.word	0x200000c4

080010e4 <CommandSubcommands>:
    I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) //For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{	//For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]

	uint8_t TX_Reg[2] = {0x00, 0x00};
 80010ee:	2300      	movs	r3, #0
 80010f0:	81bb      	strh	r3, [r7, #12]

	//TX_Reg in little endian format
	TX_Reg[0] = command & 0xff;
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	733b      	strb	r3, [r7, #12]
	TX_Reg[1] = (command >> 8) & 0xff;
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	737b      	strb	r3, [r7, #13]

	I2C_WriteReg(0x3E,TX_Reg,2);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2202      	movs	r2, #2
 8001108:	4619      	mov	r1, r3
 800110a:	203e      	movs	r0, #62	@ 0x3e
 800110c:	f7ff fdc6 	bl	8000c9c <I2C_WriteReg>
	delayUS(2000);
 8001110:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001114:	f7ff fd26 	bl	8000b64 <delayUS>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <DirectCommands>:
	}
}

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{	//type: R = read, W = write
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	460b      	mov	r3, r1
 800112c:	80bb      	strh	r3, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	71bb      	strb	r3, [r7, #6]
	uint8_t TX_data[2] = {0x00, 0x00};
 8001132:	2300      	movs	r3, #0
 8001134:	81bb      	strh	r3, [r7, #12]

	//little endian format
	TX_data[0] = data & 0xff;
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	733b      	strb	r3, [r7, #12]
	TX_data[1] = (data >> 8) & 0xff;
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	b29b      	uxth	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	737b      	strb	r3, [r7, #13]

	if (type == R) {//Read
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <DirectCommands+0x40>
		I2C_ReadReg(command, RX_data, 2); //RX_data is a global variable
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2202      	movs	r2, #2
 8001150:	490c      	ldr	r1, [pc, #48]	@ (8001184 <DirectCommands+0x64>)
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fe0e 	bl	8000d74 <I2C_ReadReg>
		delayUS(2000);
 8001158:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800115c:	f7ff fd02 	bl	8000b64 <delayUS>
	}
	if (type == W) {//write
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d10a      	bne.n	800117c <DirectCommands+0x5c>
    //Control_status, alarm_status, alarm_enable all 2 bytes long
		I2C_WriteReg(command,TX_data,2);
 8001166:	f107 010c 	add.w	r1, r7, #12
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2202      	movs	r2, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fd94 	bl	8000c9c <I2C_WriteReg>
		delayUS(2000);
 8001174:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001178:	f7ff fcf4 	bl	8000b64 <delayUS>
	}
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000c4 	.word	0x200000c4

08001188 <BQ769x2_Init>:

void BQ769x2_Init() {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	// Configures all parameters in device RAM

	  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
	  // See TRM for full description of CONFIG_UPDATE mode
	  CommandSubcommands(SET_CFGUPDATE);
 800118c:	2090      	movs	r0, #144	@ 0x90
 800118e:	f7ff ffa9 	bl	80010e4 <CommandSubcommands>
	  // a full description of the register and the bits will pop up on the screen.

	  // 'Power Config' - 0x9234 = 0x2D80
	  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
	  // Set wake speed bits to 00 for best performance
	  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 8001192:	2202      	movs	r2, #2
 8001194:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8001198:	f249 2034 	movw	r0, #37428	@ 0x9234
 800119c:	f7ff fe80 	bl	8000ea0 <BQ769x2_SetRegister>

	  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
	  BQ769x2_SetRegister(REG0Config, 0x01, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	f249 2037 	movw	r0, #37431	@ 0x9237
 80011a8:	f7ff fe7a 	bl	8000ea0 <BQ769x2_SetRegister>

	  // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
	  BQ769x2_SetRegister(REG12Config, 0xDD, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	21dd      	movs	r1, #221	@ 0xdd
 80011b0:	f249 2036 	movw	r0, #37430	@ 0x9236
 80011b4:	f7ff fe74 	bl	8000ea0 <BQ769x2_SetRegister>
	  //BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

	  // Set up ALERT Pin - 0x92FC = 0x2A
	  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
	  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
	  BQ769x2_SetRegister(ALERTPinConfig, 0x2A, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	212a      	movs	r1, #42	@ 0x2a
 80011bc:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 80011c0:	f7ff fe6e 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
	  // BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);  // No thermistor installed on EVM HDQ pin, so set to 0x00

	  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
	  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 80011c4:	2202      	movs	r2, #2
 80011c6:	f248 011f 	movw	r1, #32799	@ 0x801f
 80011ca:	f249 3004 	movw	r0, #37636	@ 0x9304
 80011ce:	f7ff fe67 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
	  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
	  // COV (over-voltage), CUV (under-voltage)
	  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	21bc      	movs	r1, #188	@ 0xbc
 80011d6:	f249 2061 	movw	r0, #37473	@ 0x9261
 80011da:	f7ff fe61 	bl	8000ea0 <BQ769x2_SetRegister>
	  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
	  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
	  //BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);

	  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
	  BQ769x2_SetRegister(DefaultAlarmMask, 0xF882, 2);
 80011de:	2202      	movs	r2, #2
 80011e0:	f64f 0182 	movw	r1, #63618	@ 0xf882
 80011e4:	f249 206d 	movw	r0, #37485	@ 0x926d
 80011e8:	f7ff fe5a 	bl	8000ea0 <BQ769x2_SetRegister>
	  // CUV Threshold is this value multiplied by 50.6mV

	  // BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
	  //BQ769x2_SetRegister(CUVThreshold, 0x14, 1);

	  BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2131      	movs	r1, #49	@ 0x31
 80011f0:	f249 2075 	movw	r0, #37493	@ 0x9275
 80011f4:	f7ff fe54 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
	  // COV Threshold is this value multiplied by 50.6mV
	  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2155      	movs	r1, #85	@ 0x55
 80011fc:	f249 2078 	movw	r0, #37496	@ 0x9278
 8001200:	f7ff fe4e 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
	  BQ769x2_SetRegister(OCCThreshold, 0x02, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2102      	movs	r1, #2
 8001208:	f249 2080 	movw	r0, #37504	@ 0x9280
 800120c:	f7ff fe48 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
	  BQ769x2_SetRegister(OCD1Threshold, 0x03, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	2103      	movs	r1, #3
 8001214:	f249 2082 	movw	r0, #37506	@ 0x9282
 8001218:	f7ff fe42 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
	  BQ769x2_SetRegister(SCDThreshold, 0x01, 1);
 800121c:	2201      	movs	r2, #1
 800121e:	2101      	movs	r1, #1
 8001220:	f249 2086 	movw	r0, #37510	@ 0x9286
 8001224:	f7ff fe3c 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
	  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	2103      	movs	r1, #3
 800122c:	f249 2087 	movw	r0, #37511	@ 0x9287
 8001230:	f7ff fe36 	bl	8000ea0 <BQ769x2_SetRegister>

	  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
	  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
	  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2101      	movs	r1, #1
 8001238:	f249 2095 	movw	r0, #37525	@ 0x9295
 800123c:	f7ff fe30 	bl	8000ea0 <BQ769x2_SetRegister>


	  BQ769x2_SetRegister(MfgStatusInit, 0x0050, 2);
 8001240:	2202      	movs	r2, #2
 8001242:	2150      	movs	r1, #80	@ 0x50
 8001244:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001248:	f7ff fe2a 	bl	8000ea0 <BQ769x2_SetRegister>


	  BQ769x2_SetRegister(FETOptions,0x3F ,1);
 800124c:	2201      	movs	r2, #1
 800124e:	213f      	movs	r1, #63	@ 0x3f
 8001250:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001254:	f7ff fe24 	bl	8000ea0 <BQ769x2_SetRegister>

	  BQ769x2_SetRegister(TS1Config, 0x0B, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	210b      	movs	r1, #11
 800125c:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 8001260:	f7ff fe1e 	bl	8000ea0 <BQ769x2_SetRegister>
	  // Exit CONFIGUPDATE mode  - Subcommand 0x0092
	  CommandSubcommands(EXIT_CFGUPDATE);
 8001264:	2092      	movs	r0, #146	@ 0x92
 8001266:	f7ff ff3d 	bl	80010e4 <CommandSubcommands>

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************


// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	// Read this register to find out why the ALERT pin was asserted
	DirectCommands(AlarmStatus, 0x00, R);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2062      	movs	r0, #98	@ 0x62
 800127a:	f7ff ff51 	bl	8001120 <DirectCommands>
	return (RX_data[1]*256 + RX_data[0]);
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <BQ769x2_ReadAlarmStatus+0x24>)
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b29b      	uxth	r3, r3
 8001286:	4a03      	ldr	r2, [pc, #12]	@ (8001294 <BQ769x2_ReadAlarmStatus+0x24>)
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000c4 	.word	0x200000c4

08001298 <BQ769x2_ReadSafetyStatus>:

void BQ769x2_ReadSafetyStatus() { //good example functions
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	// Read Safety Status A/B/C and find which bits are set
	// This shows which primary protections have been triggered
	DirectCommands(SafetyStatusA, 0x00, R);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2003      	movs	r0, #3
 80012a2:	f7ff ff3d 	bl	8001120 <DirectCommands>
	value_SafetyStatusA = (RX_data[1]*256 + RX_data[0]);
 80012a6:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <BQ769x2_ReadSafetyStatus+0xb0>)
 80012ac:	701a      	strb	r2, [r3, #0]
	//Example Fault Flags
	UV_Fault = ((0x4 & RX_data[0])>>2);
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <BQ769x2_ReadSafetyStatus+0xb4>)
 80012be:	701a      	strb	r2, [r3, #0]
	OV_Fault = ((0x8 & RX_data[0])>>3);
 80012c0:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <BQ769x2_ReadSafetyStatus+0xb8>)
 80012d0:	701a      	strb	r2, [r3, #0]
	SCD_Fault = ((0x8 & RX_data[1])>>3);
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 80012d4:	785b      	ldrb	r3, [r3, #1]
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <BQ769x2_ReadSafetyStatus+0xbc>)
 80012e2:	701a      	strb	r2, [r3, #0]
	OCD_Fault = ((0x2 & RX_data[1])>>1);
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <BQ769x2_ReadSafetyStatus+0xc0>)
 80012f4:	701a      	strb	r2, [r3, #0]
	DirectCommands(SafetyStatusB, 0x00, R);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2005      	movs	r0, #5
 80012fc:	f7ff ff10 	bl	8001120 <DirectCommands>
	value_SafetyStatusB = (RX_data[1]*256 + RX_data[0]);
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	4b15      	ldr	r3, [pc, #84]	@ (800135c <BQ769x2_ReadSafetyStatus+0xc4>)
 8001306:	701a      	strb	r2, [r3, #0]
	DirectCommands(SafetyStatusC, 0x00, R);
 8001308:	2200      	movs	r2, #0
 800130a:	2100      	movs	r1, #0
 800130c:	2007      	movs	r0, #7
 800130e:	f7ff ff07 	bl	8001120 <DirectCommands>
	value_SafetyStatusC = (RX_data[1]*256 + RX_data[0]);
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <BQ769x2_ReadSafetyStatus+0xac>)
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <BQ769x2_ReadSafetyStatus+0xc8>)
 8001318:	701a      	strb	r2, [r3, #0]
	if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1) {
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <BQ769x2_ReadSafetyStatus+0xb0>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <BQ769x2_ReadSafetyStatus+0xc4>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4413      	add	r3, r2
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <BQ769x2_ReadSafetyStatus+0xc8>)
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	4413      	add	r3, r2
 800132c:	2b01      	cmp	r3, #1
 800132e:	dd03      	ble.n	8001338 <BQ769x2_ReadSafetyStatus+0xa0>
		ProtectionsTriggered = 1; }
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <BQ769x2_ReadSafetyStatus+0xcc>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
	else {
		ProtectionsTriggered = 0; }
}
 8001336:	e002      	b.n	800133e <BQ769x2_ReadSafetyStatus+0xa6>
		ProtectionsTriggered = 0; }
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <BQ769x2_ReadSafetyStatus+0xcc>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000c4 	.word	0x200000c4
 8001348:	200000fe 	.word	0x200000fe
 800134c:	20000101 	.word	0x20000101
 8001350:	20000102 	.word	0x20000102
 8001354:	20000103 	.word	0x20000103
 8001358:	20000104 	.word	0x20000104
 800135c:	200000ff 	.word	0x200000ff
 8001360:	20000100 	.word	0x20000100
 8001364:	20000105 	.word	0x20000105

08001368 <BQ769x2_ReadVoltage>:
// ********************************* BQ769x2 Measurement Commands   *****************************************


uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	//RX_data is global var
	DirectCommands(command, 0x00, R);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fed1 	bl	8001120 <DirectCommands>
	if(command >= Cell1Voltage && command <= Cell16Voltage) {//Cells 1 through 16 (0x14 to 0x32)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b13      	cmp	r3, #19
 8001382:	d90b      	bls.n	800139c <BQ769x2_ReadVoltage+0x34>
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b32      	cmp	r3, #50	@ 0x32
 8001388:	d808      	bhi.n	800139c <BQ769x2_ReadVoltage+0x34>
		return (RX_data[1]*256 + RX_data[0]); //voltage is reported in mV
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <BQ769x2_ReadVoltage+0x54>)
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	b29b      	uxth	r3, r3
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <BQ769x2_ReadVoltage+0x54>)
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	4413      	add	r3, r2
 8001398:	b29b      	uxth	r3, r3
 800139a:	e00b      	b.n	80013b4 <BQ769x2_ReadVoltage+0x4c>
	}
	else {//stack, Pack, LD
		return 10 * (RX_data[1]*256 + RX_data[0]); //voltage is reported in 0.01V units
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <BQ769x2_ReadVoltage+0x54>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <BQ769x2_ReadVoltage+0x54>)
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	b29b      	uxth	r3, r3
	}

}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200000c4 	.word	0x200000c4

080013c0 <BQ769x2_ReadAllVoltages>:
void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  int cellvoltageholder = Cell1Voltage; //Cell1Voltage is 0x14
 80013c6:	2314      	movs	r3, #20
 80013c8:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	e010      	b.n	80013f2 <BQ769x2_ReadAllVoltages+0x32>
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ffc7 	bl	8001368 <BQ769x2_ReadVoltage>
 80013da:	4603      	mov	r3, r0
 80013dc:	4619      	mov	r1, r3
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <BQ769x2_ReadAllVoltages+0x6c>)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3302      	adds	r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++){//Reads all cell voltages
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	ddeb      	ble.n	80013d0 <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 80013f8:	2034      	movs	r0, #52	@ 0x34
 80013fa:	f7ff ffb5 	bl	8001368 <BQ769x2_ReadVoltage>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <BQ769x2_ReadAllVoltages+0x70>)
 8001404:	801a      	strh	r2, [r3, #0]
  Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 8001406:	2036      	movs	r0, #54	@ 0x36
 8001408:	f7ff ffae 	bl	8001368 <BQ769x2_ReadVoltage>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <BQ769x2_ReadAllVoltages+0x74>)
 8001412:	801a      	strh	r2, [r3, #0]
  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 8001414:	2038      	movs	r0, #56	@ 0x38
 8001416:	f7ff ffa7 	bl	8001368 <BQ769x2_ReadVoltage>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <BQ769x2_ReadAllVoltages+0x78>)
 8001420:	801a      	strh	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200000c8 	.word	0x200000c8
 8001430:	200000f4 	.word	0x200000f4
 8001434:	200000f6 	.word	0x200000f6
 8001438:	200000f8 	.word	0x200000f8

0800143c <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	DirectCommands(CC2Current, 0x00, R);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	203a      	movs	r0, #58	@ 0x3a
 8001446:	f7ff fe6b 	bl	8001120 <DirectCommands>
	return (RX_data[1]*256 + RX_data[0]);  // current is reported in mA
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <BQ769x2_ReadCurrent+0x24>)
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <BQ769x2_ReadCurrent+0x24>)
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4413      	add	r3, r2
 8001458:	b29b      	uxth	r3, r3
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000c4 	.word	0x200000c4
 8001464:	00000000 	.word	0x00000000

08001468 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	DirectCommands(command, 0x00, R);
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fe51 	bl	8001120 <DirectCommands>
	//RX_data is a global var
	return (0.1 * (float)(RX_data[1]*256 + RX_data[0])) - 273.15;  // converts from 0.1K to Celcius
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <BQ769x2_ReadTemperature+0x80>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4a18      	ldr	r2, [pc, #96]	@ (80014e8 <BQ769x2_ReadTemperature+0x80>)
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	4413      	add	r3, r2
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee17 0a90 	vmov	r0, s15
 8001496:	f7ff f945 	bl	8000724 <__aeabi_f2d>
 800149a:	a30f      	add	r3, pc, #60	@ (adr r3, 80014d8 <BQ769x2_ReadTemperature+0x70>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7fe feb2 	bl	8000208 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	a30c      	add	r3, pc, #48	@ (adr r3, 80014e0 <BQ769x2_ReadTemperature+0x78>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7fe ffd7 	bl	8000464 <__aeabi_dsub>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff f989 	bl	80007d4 <__aeabi_d2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	ee07 3a90 	vmov	s15, r3
}
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	9999999a 	.word	0x9999999a
 80014dc:	3fb99999 	.word	0x3fb99999
 80014e0:	66666666 	.word	0x66666666
 80014e4:	40711266 	.word	0x40711266
 80014e8:	200000c4 	.word	0x200000c4

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f000 fc73 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f977 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 fa33 	bl	8001964 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014fe:	f000 f9df 	bl	80018c0 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001502:	f000 fa0b 	bl	800191c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
//  uint16_t eeprom_address = 0x0010;
//  uint8_t eeprom_data = EEPROM_ReadByte(eeprom_address);
  HAL_TIM_Base_Start(&htim10);
 8001506:	48ad      	ldr	r0, [pc, #692]	@ (80017bc <main+0x2d0>)
 8001508:	f002 fe08 	bl	800411c <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_SET);  // RST_SHUT pin set low
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001512:	48ab      	ldr	r0, [pc, #684]	@ (80017c0 <main+0x2d4>)
 8001514:	f000 ff56 	bl	80023c4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f000 fca1 	bl	8001e60 <HAL_Delay>
  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_RESET);  // RST_SHUT pin set low
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001524:	48a6      	ldr	r0, [pc, #664]	@ (80017c0 <main+0x2d4>)
 8001526:	f000 ff4d 	bl	80023c4 <HAL_GPIO_WritePin>

//  HAL_GPIO_WritePin(RST_SHUT_GPIO_Port, RST_SHUT_Pin, GPIO_PIN_SET);  // RST_SHUT pin set low
  HAL_GPIO_WritePin(DFETOFF_GPIO_Port, DFETOFF_Pin, GPIO_PIN_SET);  // DFETOFF pin (BOTHOFF) set low
 800152a:	2201      	movs	r2, #1
 800152c:	2101      	movs	r1, #1
 800152e:	48a4      	ldr	r0, [pc, #656]	@ (80017c0 <main+0x2d4>)
 8001530:	f000 ff48 	bl	80023c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CFETOFF_GPIO_Port, CFETOFF_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	2102      	movs	r1, #2
 8001538:	48a1      	ldr	r0, [pc, #644]	@ (80017c0 <main+0x2d4>)
 800153a:	f000 ff43 	bl	80023c4 <HAL_GPIO_WritePin>
  delayUS(10000);
 800153e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001542:	f7ff fb0f 	bl	8000b64 <delayUS>
  alarm = BQ769x2_ReadAlarmStatus();
 8001546:	f7ff fe93 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b9d      	ldr	r3, [pc, #628]	@ (80017c4 <main+0x2d8>)
 8001550:	801a      	strh	r2, [r3, #0]
  	//CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
  	//delayUS(60000);
  	CommandSubcommands(BQ769x2_RESET);  // Resets the BQ769x2 registers
 8001552:	2012      	movs	r0, #18
 8001554:	f7ff fdc6 	bl	80010e4 <CommandSubcommands>
  	delayUS(60000);
 8001558:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800155c:	f7ff fb02 	bl	8000b64 <delayUS>
  	BQ769x2_Init();  // Configure all of the BQ769x2 register settings
 8001560:	f7ff fe12 	bl	8001188 <BQ769x2_Init>
  	delayUS(12000);
 8001564:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
 8001568:	f7ff fafc 	bl	8000b64 <delayUS>
  	alarm = BQ769x2_ReadAlarmStatus();
 800156c:	f7ff fe80 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b93      	ldr	r3, [pc, #588]	@ (80017c4 <main+0x2d8>)
 8001576:	801a      	strh	r2, [r3, #0]
//  	delayUS(12000);
//
//  	CommandSubcommands(EXIT_CFGUPDATE);
//  	CommandSubcommands(FET_ENABLE); // Enable the CHG and DSG FETs
//  	delayUS(12000);
  	CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 8001578:	209a      	movs	r0, #154	@ 0x9a
 800157a:	f7ff fdb3 	bl	80010e4 <CommandSubcommands>
  									   // demonstrate full-speed measurements in Normal mode.

  	delayUS(60000); delayUS(60000); delayUS(60000); delayUS(60000);  //wait to start measurements after FETs close
 800157e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001582:	f7ff faef 	bl	8000b64 <delayUS>
 8001586:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800158a:	f7ff faeb 	bl	8000b64 <delayUS>
 800158e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001592:	f7ff fae7 	bl	8000b64 <delayUS>
 8001596:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800159a:	f7ff fae3 	bl	8000b64 <delayUS>

  	uint16_t manuStatus = BQ769x2_ReadRegister(MANUFACTURINGSTATUS);
 800159e:	2057      	movs	r0, #87	@ 0x57
 80015a0:	f7ff fd50 	bl	8001044 <BQ769x2_ReadRegister>
 80015a4:	4603      	mov	r3, r0
 80015a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  	uint16_t manuInit = BQ769x2_ReadRegister(MfgStatusInit);
 80015a8:	f249 3043 	movw	r0, #37699	@ 0x9343
 80015ac:	f7ff fd4a 	bl	8001044 <BQ769x2_ReadRegister>
 80015b0:	4603      	mov	r3, r0
 80015b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  	uint16_t manuData = BQ769x2_ReadRegister(MANU_DATA);
 80015b4:	2070      	movs	r0, #112	@ 0x70
 80015b6:	f7ff fd45 	bl	8001044 <BQ769x2_ReadRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	847b      	strh	r3, [r7, #34]	@ 0x22
  	uint16_t FET_options = BQ769x2_ReadRegister(FETOptions);
 80015be:	f249 3008 	movw	r0, #37640	@ 0x9308
 80015c2:	f7ff fd3f 	bl	8001044 <BQ769x2_ReadRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	843b      	strh	r3, [r7, #32]
  	alarm = BQ769x2_ReadAlarmStatus();
 80015ca:	f7ff fe51 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <main+0x2d8>)
 80015d4:	801a      	strh	r2, [r3, #0]

  	CommandSubcommands(ALL_FETS_ON);
 80015d6:	2096      	movs	r0, #150	@ 0x96
 80015d8:	f7ff fd84 	bl	80010e4 <CommandSubcommands>
  	CommandSubcommands(ALERT_HI);
 80015dc:	f642 0012 	movw	r0, #10258	@ 0x2812
 80015e0:	f7ff fd80 	bl	80010e4 <CommandSubcommands>
  	CommandSubcommands(CHG_PCHG_OFF);
 80015e4:	2094      	movs	r0, #148	@ 0x94
 80015e6:	f7ff fd7d 	bl	80010e4 <CommandSubcommands>
  	CommandSubcommands(DSG_PDSG_OFF);
 80015ea:	2093      	movs	r0, #147	@ 0x93
 80015ec:	f7ff fd7a 	bl	80010e4 <CommandSubcommands>
  	CommandSubcommands(ALL_FETS_ON);
 80015f0:	2096      	movs	r0, #150	@ 0x96
 80015f2:	f7ff fd77 	bl	80010e4 <CommandSubcommands>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BQ769x2_ReadAllVoltages();
 80015f6:	f7ff fee3 	bl	80013c0 <BQ769x2_ReadAllVoltages>
	  uint16_t stackVoltage = BQ769x2_ReadVoltage(StackVoltage);
 80015fa:	2034      	movs	r0, #52	@ 0x34
 80015fc:	f7ff feb4 	bl	8001368 <BQ769x2_ReadVoltage>
 8001600:	4603      	mov	r3, r0
 8001602:	83fb      	strh	r3, [r7, #30]
	  uint16_t packVoltage = BQ769x2_ReadVoltage(Pack_Voltage);
 8001604:	4b70      	ldr	r3, [pc, #448]	@ (80017c8 <main+0x2dc>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff feac 	bl	8001368 <BQ769x2_ReadVoltage>
 8001610:	4603      	mov	r3, r0
 8001612:	83bb      	strh	r3, [r7, #28]
	  float ts1_temperature = BQ769x2_ReadTemperature(TS1Temperature);
 8001614:	2070      	movs	r0, #112	@ 0x70
 8001616:	f7ff ff27 	bl	8001468 <BQ769x2_ReadTemperature>
 800161a:	ed87 0a06 	vstr	s0, [r7, #24]

	  uint16_t cell1 = CellVoltage[0];
 800161e:	4b6b      	ldr	r3, [pc, #428]	@ (80017cc <main+0x2e0>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	82fb      	strh	r3, [r7, #22]
	  uint16_t cell2 = CellVoltage[1];
 8001624:	4b69      	ldr	r3, [pc, #420]	@ (80017cc <main+0x2e0>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	82bb      	strh	r3, [r7, #20]
	  uint16_t cell3 = CellVoltage[2];
 800162a:	4b68      	ldr	r3, [pc, #416]	@ (80017cc <main+0x2e0>)
 800162c:	889b      	ldrh	r3, [r3, #4]
 800162e:	827b      	strh	r3, [r7, #18]
	  uint16_t cell4 = CellVoltage[3];
 8001630:	4b66      	ldr	r3, [pc, #408]	@ (80017cc <main+0x2e0>)
 8001632:	88db      	ldrh	r3, [r3, #6]
 8001634:	823b      	strh	r3, [r7, #16]
	  uint16_t cell5 = CellVoltage[4];
 8001636:	4b65      	ldr	r3, [pc, #404]	@ (80017cc <main+0x2e0>)
 8001638:	891b      	ldrh	r3, [r3, #8]
 800163a:	81fb      	strh	r3, [r7, #14]
	  uint16_t cell6 = CellVoltage[5];
 800163c:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <main+0x2e0>)
 800163e:	895b      	ldrh	r3, [r3, #10]
 8001640:	81bb      	strh	r3, [r7, #12]
	  uint16_t cell16 = CellVoltage[15];
 8001642:	4b62      	ldr	r3, [pc, #392]	@ (80017cc <main+0x2e0>)
 8001644:	8bdb      	ldrh	r3, [r3, #30]
 8001646:	817b      	strh	r3, [r7, #10]


	  	alarm = BQ769x2_ReadAlarmStatus();
 8001648:	f7ff fe12 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	4b5c      	ldr	r3, [pc, #368]	@ (80017c4 <main+0x2d8>)
 8001652:	801a      	strh	r2, [r3, #0]
	  	CommandSubcommands(ALERT_HI);
 8001654:	f642 0012 	movw	r0, #10258	@ 0x2812
 8001658:	f7ff fd44 	bl	80010e4 <CommandSubcommands>

	  	DirectCommands(FETStatus, 0x00, R);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	207f      	movs	r0, #127	@ 0x7f
 8001662:	f7ff fd5d 	bl	8001120 <DirectCommands>
	  	uint8_t status1 = RX_data[0];
 8001666:	4b5a      	ldr	r3, [pc, #360]	@ (80017d0 <main+0x2e4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	727b      	strb	r3, [r7, #9]
	  	uint8_t status2 = RX_data[1];
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <main+0x2e4>)
 800166e:	785b      	ldrb	r3, [r3, #1]
 8001670:	723b      	strb	r3, [r7, #8]

		DirectCommands(CCGain, 0x00, R);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	20a8      	movs	r0, #168	@ 0xa8
 8001678:	f7ff fd52 	bl	8001120 <DirectCommands>
		  	uint8_t reg0 = RX_data[0];
 800167c:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <main+0x2e4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	71fb      	strb	r3, [r7, #7]
		  	uint8_t reg1 = RX_data[1];
 8001682:	4b53      	ldr	r3, [pc, #332]	@ (80017d0 <main+0x2e4>)
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	71bb      	strb	r3, [r7, #6]

	  	CommandSubcommands(ALERT_LO);
 8001688:	f642 0002 	movw	r0, #10242	@ 0x2802
 800168c:	f7ff fd2a 	bl	80010e4 <CommandSubcommands>
	  		status1 = RX_data[0];
 8001690:	4b4f      	ldr	r3, [pc, #316]	@ (80017d0 <main+0x2e4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	727b      	strb	r3, [r7, #9]
	  		status2 = RX_data[1];
 8001696:	4b4e      	ldr	r3, [pc, #312]	@ (80017d0 <main+0x2e4>)
 8001698:	785b      	ldrb	r3, [r3, #1]
 800169a:	723b      	strb	r3, [r7, #8]

		AlarmBits = BQ769x2_ReadAlarmStatus();
 800169c:	f7ff fde8 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b4b      	ldr	r3, [pc, #300]	@ (80017d4 <main+0x2e8>)
 80016a6:	801a      	strh	r2, [r3, #0]
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(ALERT_PIN_2_GPIO_Port,ALERT_PIN_2_Pin);
 80016a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ac:	4844      	ldr	r0, [pc, #272]	@ (80017c0 <main+0x2d4>)
 80016ae:	f000 fe71 	bl	8002394 <HAL_GPIO_ReadPin>
 80016b2:	4603      	mov	r3, r0
 80016b4:	717b      	strb	r3, [r7, #5]
		if (AlarmBits & 0x80) {  // Check if FULLSCAN is complete. If set, new measurements are available
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <main+0x2e8>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d022      	beq.n	8001708 <main+0x21c>
    		BQ769x2_ReadAllVoltages();
 80016c2:	f7ff fe7d 	bl	80013c0 <BQ769x2_ReadAllVoltages>
    		Pack_Current = BQ769x2_ReadCurrent();
 80016c6:	f7ff feb9 	bl	800143c <BQ769x2_ReadCurrent>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <main+0x2ec>)
 80016d0:	801a      	strh	r2, [r3, #0]
    		Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 80016d2:	2070      	movs	r0, #112	@ 0x70
 80016d4:	f7ff fec8 	bl	8001468 <BQ769x2_ReadTemperature>
 80016d8:	eef0 7a40 	vmov.f32	s15, s0
 80016dc:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <main+0x2f0>)
 80016de:	edc3 7a00 	vstr	s15, [r3]
    		Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 80016e2:	2074      	movs	r0, #116	@ 0x74
 80016e4:	f7ff fec0 	bl	8001468 <BQ769x2_ReadTemperature>
 80016e8:	eef0 7a40 	vmov.f32	s15, s0
 80016ec:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <main+0x2f0>)
 80016ee:	edc3 7a01 	vstr	s15, [r3, #4]
			DirectCommands(AlarmStatus, 0x0080, W);  // Clear the FULLSCAN bit
 80016f2:	2201      	movs	r2, #1
 80016f4:	2180      	movs	r1, #128	@ 0x80
 80016f6:	2062      	movs	r0, #98	@ 0x62
 80016f8:	f7ff fd12 	bl	8001120 <DirectCommands>
			alarm = BQ769x2_ReadAlarmStatus();
 80016fc:	f7ff fdb8 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <main+0x2d8>)
 8001706:	801a      	strh	r2, [r3, #0]
		}


		if (AlarmBits & 0xC000) {  // If Safety Status bits are showing in AlarmStatus register
 8001708:	4b32      	ldr	r3, [pc, #200]	@ (80017d4 <main+0x2e8>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d026      	beq.n	8001762 <main+0x276>
			BQ769x2_ReadSafetyStatus(); // Read the Safety Status registers to find which protections have triggered
 8001714:	f7ff fdc0 	bl	8001298 <BQ769x2_ReadSafetyStatus>
			if (ProtectionsTriggered & 1) {
 8001718:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <main+0x2f4>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <main+0x24a>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800172a:	4825      	ldr	r0, [pc, #148]	@ (80017c0 <main+0x2d4>)
 800172c:	f000 fe4a 	bl	80023c4 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8001730:	2064      	movs	r0, #100	@ 0x64
 8001732:	f000 fb95 	bl	8001e60 <HAL_Delay>
				}
				DirectCommands(AlarmStatus, 0xF800, W); // Clear the Safety Status Alarm bits.
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 800173c:	2062      	movs	r0, #98	@ 0x62
 800173e:	f7ff fcef 	bl	8001120 <DirectCommands>
				CommandSubcommands(DSG_PDSG_OFF);
 8001742:	2093      	movs	r0, #147	@ 0x93
 8001744:	f7ff fcce 	bl	80010e4 <CommandSubcommands>
				alarm = BQ769x2_ReadAlarmStatus();
 8001748:	f7ff fd92 	bl	8001270 <BQ769x2_ReadAlarmStatus>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <main+0x2d8>)
 8001752:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175a:	4819      	ldr	r0, [pc, #100]	@ (80017c0 <main+0x2d4>)
 800175c:	f000 fe32 	bl	80023c4 <HAL_GPIO_WritePin>
 8001760:	e007      	b.n	8001772 <main+0x286>
			}
		else
		{
			//CommandSubcommands(ALL_FETS_ON);
			if (ProtectionsTriggered & 1) {
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <main+0x2f4>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <main+0x286>
				BQ769x2_ReadSafetyStatus();
 800176e:	f7ff fd93 	bl	8001298 <BQ769x2_ReadSafetyStatus>

				//CommandSubcommands(ALL_FETS_ON);
			} // Turn off the LED if Safety Status has cleared which means the protection condition is no longer present
		}

		buttonState = HAL_GPIO_ReadPin(ALERT_PIN_2_GPIO_Port,ALERT_PIN_2_Pin);
 8001772:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001776:	4812      	ldr	r0, [pc, #72]	@ (80017c0 <main+0x2d4>)
 8001778:	f000 fe0c 	bl	8002394 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	717b      	strb	r3, [r7, #5]
//			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//			HAL_Delay(100);
		} else {
		    // Button is not pressed
		}
		DirectCommands(AlarmEnable, 0x00, R);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	2066      	movs	r0, #102	@ 0x66
 8001786:	f7ff fccb 	bl	8001120 <DirectCommands>
		uint8_t alarmEnable = RX_data[0];
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <main+0x2e4>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	713b      	strb	r3, [r7, #4]
		uint8_t alarmEnable1 = RX_data[1];
 8001790:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <main+0x2e4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	70fb      	strb	r3, [r7, #3]

		DirectCommands(AlarmStatus, 0x00, R);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2062      	movs	r0, #98	@ 0x62
 800179c:	f7ff fcc0 	bl	8001120 <DirectCommands>
		uint8_t alarmstatus = RX_data[0];
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <main+0x2e4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	70bb      	strb	r3, [r7, #2]
		uint8_t alarmStatus1 = RX_data[1];
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <main+0x2e4>)
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	707b      	strb	r3, [r7, #1]

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80017ac:	2101      	movs	r1, #1
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <main+0x2f8>)
 80017b0:	f000 fe21 	bl	80023f6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80017b4:	2064      	movs	r0, #100	@ 0x64
 80017b6:	f000 fb53 	bl	8001e60 <HAL_Delay>
  {
 80017ba:	e71c      	b.n	80015f6 <main+0x10a>
 80017bc:	2000007c 	.word	0x2000007c
 80017c0:	40020800 	.word	0x40020800
 80017c4:	20000106 	.word	0x20000106
 80017c8:	200000f6 	.word	0x200000f6
 80017cc:	200000c8 	.word	0x200000c8
 80017d0:	200000c4 	.word	0x200000c4
 80017d4:	200000fc 	.word	0x200000fc
 80017d8:	200000fa 	.word	0x200000fa
 80017dc:	200000e8 	.word	0x200000e8
 80017e0:	20000105 	.word	0x20000105
 80017e4:	40020400 	.word	0x40020400

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	2234      	movs	r2, #52	@ 0x34
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 ff40 	bl	800467c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <SystemClock_Config+0xd0>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <SystemClock_Config+0xd4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <SystemClock_Config+0xd4>)
 8001832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <SystemClock_Config+0xd4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001858:	2308      	movs	r3, #8
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 164;
 800185c:	23a4      	movs	r3, #164	@ 0xa4
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001864:	2302      	movs	r3, #2
 8001866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001868:	2302      	movs	r3, #2
 800186a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	4618      	mov	r0, r3
 8001872:	f002 f965 	bl	8003b40 <HAL_RCC_OscConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800187c:	f000 f924 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001880:	230f      	movs	r3, #15
 8001882:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001884:	2302      	movs	r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	2105      	movs	r1, #5
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fde8 	bl	8003474 <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018aa:	f000 f90d 	bl	8001ac8 <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	@ (8001914 <MX_I2C1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <MX_I2C1_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <MX_I2C1_Init+0x50>)
 80018fe:	f000 fd95 	bl	800242c <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 f8de 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000028 	.word	0x20000028
 8001914:	40005400 	.word	0x40005400
 8001918:	000186a0 	.word	0x000186a0

0800191c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_TIM10_Init+0x40>)
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <MX_TIM10_Init+0x44>)
 8001924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <MX_TIM10_Init+0x40>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <MX_TIM10_Init+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_TIM10_Init+0x40>)
 8001934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001938:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <MX_TIM10_Init+0x40>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_TIM10_Init+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_TIM10_Init+0x40>)
 8001948:	f002 fb98 	bl	800407c <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001952:	f000 f8b9 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000007c 	.word	0x2000007c
 8001960:	40014400 	.word	0x40014400

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b46      	ldr	r3, [pc, #280]	@ (8001a98 <MX_GPIO_Init+0x134>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a45      	ldr	r2, [pc, #276]	@ (8001a98 <MX_GPIO_Init+0x134>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <MX_GPIO_Init+0x134>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <MX_GPIO_Init+0x134>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a37      	ldr	r2, [pc, #220]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b31      	ldr	r3, [pc, #196]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a30      	ldr	r2, [pc, #192]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b2e      	ldr	r3, [pc, #184]	@ (8001a98 <MX_GPIO_Init+0x134>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DFETOFF_Pin|CFETOFF_Pin|PC7_Pin|RST_SHUT_Pin
 80019ea:	2200      	movs	r2, #0
 80019ec:	f640 2183 	movw	r1, #2691	@ 0xa83
 80019f0:	482a      	ldr	r0, [pc, #168]	@ (8001a9c <MX_GPIO_Init+0x138>)
 80019f2:	f000 fce7 	bl	80023c4 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2103      	movs	r1, #3
 80019fa:	4829      	ldr	r0, [pc, #164]	@ (8001aa0 <MX_GPIO_Init+0x13c>)
 80019fc:	f000 fce2 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ALERT_PIN_2_Pin */
  GPIO_InitStruct.Pin = ALERT_PIN_2_Pin;
 8001a00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT_PIN_2_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4821      	ldr	r0, [pc, #132]	@ (8001a9c <MX_GPIO_Init+0x138>)
 8001a16:	f000 fb29 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFETOFF_Pin PC7_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DFETOFF_Pin|PC7_Pin|BUZZER_Pin;
 8001a1a:	f640 0381 	movw	r3, #2177	@ 0x881
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	481a      	ldr	r0, [pc, #104]	@ (8001a9c <MX_GPIO_Init+0x138>)
 8001a34:	f000 fb1a 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : CFETOFF_Pin RST_SHUT_Pin */
  GPIO_InitStruct.Pin = CFETOFF_Pin|RST_SHUT_Pin;
 8001a38:	f240 2302 	movw	r3, #514	@ 0x202
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <MX_GPIO_Init+0x138>)
 8001a52:	f000 fb0b 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <MX_GPIO_Init+0x13c>)
 8001a6e:	f000 fafd 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8001a72:	2302      	movs	r3, #2
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <MX_GPIO_Init+0x13c>)
 8001a8a:	f000 faef 	bl	800206c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	@ 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ab6:	f000 f9b3 	bl	8001e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40001000 	.word	0x40001000

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <Error_Handler+0x8>

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12c      	bne.n	8001ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b74:	2304      	movs	r3, #4
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <HAL_I2C_MspInit+0x8c>)
 8001b80:	f000 fa74 	bl	800206c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10d      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a09      	ldr	r2, [pc, #36]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40014400 	.word	0x40014400
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	@ 0x38
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <HAL_InitTick+0xe4>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <HAL_InitTick+0xe4>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c18:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <HAL_InitTick+0xe4>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c24:	f107 0210 	add.w	r2, r7, #16
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fd26 	bl	8003680 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c3e:	f001 fd0b 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8001c42:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c44:	e004      	b.n	8001c50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c46:	f001 fd07 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c52:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <HAL_InitTick+0xe8>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_InitTick+0xf0>)
 8001c62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c84:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c86:	f002 f9f9 	bl	800407c <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11b      	bne.n	8001cd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c98:	4812      	ldr	r0, [pc, #72]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c9a:	f002 faa7 	bl	80041ec <HAL_TIM_Base_Start_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cac:	2036      	movs	r0, #54	@ 0x36
 8001cae:	f000 f9cf 	bl	8002050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d808      	bhi.n	8001cca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	2036      	movs	r0, #54	@ 0x36
 8001cbe:	f000 f9ab 	bl	8002018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <HAL_InitTick+0xf4>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e002      	b.n	8001cd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3738      	adds	r7, #56	@ 0x38
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	20000108 	.word	0x20000108
 8001ce8:	40001000 	.word	0x40001000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <MemManage_Handler+0x4>

08001d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <TIM6_DAC_IRQHandler+0x10>)
 8001d56:	f002 fab9 	bl	80042cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000108 	.word	0x20000108

08001d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d8c:	f7ff ffea 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f002 fc69 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7ff fb97 	bl	80014ec <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dcc:	08004728 	.word	0x08004728
  ldr r2, =_sbss
 8001dd0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dd4:	20000154 	.word	0x20000154

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f8fc 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f7ff fef4 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fe60 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000150 	.word	0x20000150

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000150 	.word	0x20000150

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff4c 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202a:	f7ff ff61 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 800202e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7ff ffb1 	bl	8001f9c <NVIC_EncodePriority>
 800203a:	4602      	mov	r2, r0
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff80 	bl	8001f48 <__NVIC_SetPriority>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff54 	bl	8001f0c <__NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e165      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8154 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d005      	beq.n	80020be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d130      	bne.n	8002120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d017      	beq.n	800215c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ae 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_GPIO_Init+0x300>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	4a5c      	ldr	r2, [pc, #368]	@ (800236c <HAL_GPIO_Init+0x300>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002200:	6453      	str	r3, [r2, #68]	@ 0x44
 8002202:	4b5a      	ldr	r3, [pc, #360]	@ (800236c <HAL_GPIO_Init+0x300>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_GPIO_Init+0x304>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4f      	ldr	r2, [pc, #316]	@ (8002374 <HAL_GPIO_Init+0x308>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4e      	ldr	r2, [pc, #312]	@ (8002378 <HAL_GPIO_Init+0x30c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4d      	ldr	r2, [pc, #308]	@ (800237c <HAL_GPIO_Init+0x310>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4c      	ldr	r2, [pc, #304]	@ (8002380 <HAL_GPIO_Init+0x314>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4b      	ldr	r2, [pc, #300]	@ (8002384 <HAL_GPIO_Init+0x318>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x20a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4a      	ldr	r2, [pc, #296]	@ (8002388 <HAL_GPIO_Init+0x31c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x206>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a49      	ldr	r2, [pc, #292]	@ (800238c <HAL_GPIO_Init+0x320>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x202>
 800226a:	2306      	movs	r3, #6
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800226e:	2307      	movs	r3, #7
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_GPIO_Init+0x304>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a31      	ldr	r2, [pc, #196]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a26      	ldr	r2, [pc, #152]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_GPIO_Init+0x324>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1c      	ldr	r2, [pc, #112]	@ (8002390 <HAL_GPIO_Init+0x324>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <HAL_GPIO_Init+0x324>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a11      	ldr	r2, [pc, #68]	@ (8002390 <HAL_GPIO_Init+0x324>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae96 	bls.w	8002088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40021400 	.word	0x40021400
 800238c:	40021800 	.word	0x40021800
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002408:	887a      	ldrh	r2, [r7, #2]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	041a      	lsls	r2, r3, #16
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43d9      	mvns	r1, r3
 8002414:	887b      	ldrh	r3, [r7, #2]
 8002416:	400b      	ands	r3, r1
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	619a      	str	r2, [r3, #24]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e12b      	b.n	8002696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff fb66 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	@ 0x24
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800247e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800248e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002490:	f001 f8e2 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a81      	ldr	r2, [pc, #516]	@ (80026a0 <HAL_I2C_Init+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d807      	bhi.n	80024b0 <HAL_I2C_Init+0x84>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a80      	ldr	r2, [pc, #512]	@ (80026a4 <HAL_I2C_Init+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e006      	b.n	80024be <HAL_I2C_Init+0x92>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a7d      	ldr	r2, [pc, #500]	@ (80026a8 <HAL_I2C_Init+0x27c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0e7      	b.n	8002696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a78      	ldr	r2, [pc, #480]	@ (80026ac <HAL_I2C_Init+0x280>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a6a      	ldr	r2, [pc, #424]	@ (80026a0 <HAL_I2C_Init+0x274>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <HAL_I2C_Init+0xd4>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	e009      	b.n	8002514 <HAL_I2C_Init+0xe8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	4a69      	ldr	r2, [pc, #420]	@ (80026b0 <HAL_I2C_Init+0x284>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	3301      	adds	r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002526:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	495c      	ldr	r1, [pc, #368]	@ (80026a0 <HAL_I2C_Init+0x274>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d819      	bhi.n	8002568 <HAL_I2C_Init+0x13c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e59      	subs	r1, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_I2C_Init+0x138>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e59      	subs	r1, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	e051      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e04f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <HAL_I2C_Init+0x168>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e012      	b.n	80025ba <HAL_I2C_Init+0x18e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Init+0x196>
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_I2C_Init+0x1bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e58      	subs	r0, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	440b      	add	r3, r1
 80025d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002636:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6911      	ldr	r1, [r2, #16]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	000186a0 	.word	0x000186a0
 80026a4:	001e847f 	.word	0x001e847f
 80026a8:	003d08ff 	.word	0x003d08ff
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	4608      	mov	r0, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	817b      	strh	r3, [r7, #10]
 80026c6:	460b      	mov	r3, r1
 80026c8:	813b      	strh	r3, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ce:	f7ff fbbb 	bl	8001e48 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b20      	cmp	r3, #32
 80026de:	f040 80d9 	bne.w	8002894 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2319      	movs	r3, #25
 80026e8:	2201      	movs	r2, #1
 80026ea:	496d      	ldr	r1, [pc, #436]	@ (80028a0 <HAL_I2C_Mem_Write+0x1ec>)
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fc8b 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0cc      	b.n	8002896 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002702:	2b01      	cmp	r3, #1
 8002704:	d101      	bne.n	800270a <HAL_I2C_Mem_Write+0x56>
 8002706:	2302      	movs	r3, #2
 8002708:	e0c5      	b.n	8002896 <HAL_I2C_Mem_Write+0x1e2>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d007      	beq.n	8002730 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800273e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2221      	movs	r2, #33	@ 0x21
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2240      	movs	r2, #64	@ 0x40
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a3a      	ldr	r2, [r7, #32]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002760:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a4d      	ldr	r2, [pc, #308]	@ (80028a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002772:	88f8      	ldrh	r0, [r7, #6]
 8002774:	893a      	ldrh	r2, [r7, #8]
 8002776:	8979      	ldrh	r1, [r7, #10]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	4603      	mov	r3, r0
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fac2 	bl	8002d0c <I2C_RequestMemoryWrite>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d052      	beq.n	8002834 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e081      	b.n	8002896 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fd50 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00d      	beq.n	80027be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d107      	bne.n	80027ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06b      	b.n	8002896 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d11b      	bne.n	8002834 <HAL_I2C_Mem_Write+0x180>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d017      	beq.n	8002834 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1aa      	bne.n	8002792 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fd43 	bl	80032cc <I2C_WaitOnBTFFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	2b04      	cmp	r3, #4
 8002852:	d107      	bne.n	8002864 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002862:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e016      	b.n	8002896 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e000      	b.n	8002896 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002894:	2302      	movs	r3, #2
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	00100002 	.word	0x00100002
 80028a4:	ffff0000 	.word	0xffff0000

080028a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	@ 0x30
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	4608      	mov	r0, r1
 80028b2:	4611      	mov	r1, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	817b      	strh	r3, [r7, #10]
 80028ba:	460b      	mov	r3, r1
 80028bc:	813b      	strh	r3, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028c2:	f7ff fac1 	bl	8001e48 <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	f040 8214 	bne.w	8002cfe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	2319      	movs	r3, #25
 80028dc:	2201      	movs	r2, #1
 80028de:	497b      	ldr	r1, [pc, #492]	@ (8002acc <HAL_I2C_Mem_Read+0x224>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fb91 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
 80028ee:	e207      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_I2C_Mem_Read+0x56>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e200      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d007      	beq.n	8002924 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002932:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2222      	movs	r2, #34	@ 0x22
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2240      	movs	r2, #64	@ 0x40
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800294e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002954:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad0 <HAL_I2C_Mem_Read+0x228>)
 8002964:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002966:	88f8      	ldrh	r0, [r7, #6]
 8002968:	893a      	ldrh	r2, [r7, #8]
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	4603      	mov	r3, r0
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fa5e 	bl	8002e38 <I2C_RequestMemoryRead>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1bc      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	d113      	bne.n	80029b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e190      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d11b      	bne.n	80029f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e170      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d11b      	bne.n	8002a36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	e150      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	617b      	str	r3, [r7, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a4c:	e144      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	f200 80f1 	bhi.w	8002c3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d123      	bne.n	8002aa8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fc79 	bl	800335c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e145      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa6:	e117      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d14e      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4906      	ldr	r1, [pc, #24]	@ (8002ad4 <HAL_I2C_Mem_Read+0x22c>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 faa4 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e11a      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000
 8002ad4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b4c:	e0c4      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b54:	2200      	movs	r2, #0
 8002b56:	496c      	ldr	r1, [pc, #432]	@ (8002d08 <HAL_I2C_Mem_Read+0x460>)
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fa55 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0cb      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4955      	ldr	r1, [pc, #340]	@ (8002d08 <HAL_I2C_Mem_Read+0x460>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fa27 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e09d      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c38:	e04e      	b.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fb8c 	bl	800335c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e058      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d124      	bne.n	8002cd8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d107      	bne.n	8002ca6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f47f aeb6 	bne.w	8002a4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002cfe:	2302      	movs	r3, #2
  }
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3728      	adds	r7, #40	@ 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	00010004 	.word	0x00010004

08002d0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	817b      	strh	r3, [r7, #10]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	813b      	strh	r3, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f960 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00d      	beq.n	8002d6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d5c:	d103      	bne.n	8002d66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e05f      	b.n	8002e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	6a3a      	ldr	r2, [r7, #32]
 8002d7e:	492d      	ldr	r1, [pc, #180]	@ (8002e34 <I2C_RequestMemoryWrite+0x128>)
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f9bb 	bl	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e04c      	b.n	8002e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da8:	6a39      	ldr	r1, [r7, #32]
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fa46 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d107      	bne.n	8002dce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e02b      	b.n	8002e2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd8:	893b      	ldrh	r3, [r7, #8]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]
 8002de2:	e021      	b.n	8002e28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df4:	6a39      	ldr	r1, [r7, #32]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa20 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d107      	bne.n	8002e1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e005      	b.n	8002e2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e1e:	893b      	ldrh	r3, [r7, #8]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	00010002 	.word	0x00010002

08002e38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	817b      	strh	r3, [r7, #10]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	813b      	strh	r3, [r7, #8]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8c2 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e98:	d103      	bne.n	8002ea2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0aa      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea6:	897b      	ldrh	r3, [r7, #10]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	4952      	ldr	r1, [pc, #328]	@ (8003004 <I2C_RequestMemoryRead+0x1cc>)
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f91d 	bl	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e097      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee4:	6a39      	ldr	r1, [r7, #32]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f9a8 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00d      	beq.n	8002f0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d107      	bne.n	8002f0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e076      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f14:	893b      	ldrh	r3, [r7, #8]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	e021      	b.n	8002f64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f20:	893b      	ldrh	r3, [r7, #8]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f982 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d107      	bne.n	8002f56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e050      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f5a:	893b      	ldrh	r3, [r7, #8]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	6a39      	ldr	r1, [r7, #32]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f967 	bl	800323c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d107      	bne.n	8002f8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e035      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f82b 	bl	8003008 <I2C_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc6:	d103      	bne.n	8002fd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e013      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	6a3a      	ldr	r2, [r7, #32]
 8002fe8:	4906      	ldr	r1, [pc, #24]	@ (8003004 <I2C_RequestMemoryRead+0x1cc>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f886 	bl	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	00010002 	.word	0x00010002

08003008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003018:	e048      	b.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003020:	d044      	beq.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe ff11 	bl	8001e48 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d139      	bne.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d10d      	bne.n	800305e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	43da      	mvns	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4013      	ands	r3, r2
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	e00c      	b.n	8003078 <I2C_WaitOnFlagUntilTimeout+0x70>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	43da      	mvns	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	429a      	cmp	r2, r3
 800307c:	d116      	bne.n	80030ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e023      	b.n	80030f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10d      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	43da      	mvns	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	e00c      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	43da      	mvns	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4013      	ands	r3, r2
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d093      	beq.n	800301a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800310a:	e071      	b.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311a:	d123      	bne.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e067      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800316a:	d041      	beq.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316c:	f7fe fe6c 	bl	8001e48 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d136      	bne.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d10c      	bne.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	43da      	mvns	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4013      	ands	r3, r2
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	e00b      	b.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e021      	b.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d10c      	bne.n	8003214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	43da      	mvns	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e00b      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4013      	ands	r3, r2
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	f47f af6d 	bne.w	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003248:	e034      	b.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f8e3 	bl	8003416 <I2C_IsAcknowledgeFailed>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e034      	b.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003260:	d028      	beq.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fe fdf1 	bl	8001e48 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d11d      	bne.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003282:	2b80      	cmp	r3, #128	@ 0x80
 8003284:	d016      	beq.n	80032b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b80      	cmp	r3, #128	@ 0x80
 80032c0:	d1c3      	bne.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d8:	e034      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f89b 	bl	8003416 <I2C_IsAcknowledgeFailed>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e034      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032f0:	d028      	beq.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe fda9 	bl	8001e48 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d11d      	bne.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b04      	cmp	r3, #4
 8003314:	d016      	beq.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e007      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d1c3      	bne.n	80032da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003368:	e049      	b.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b10      	cmp	r3, #16
 8003376:	d119      	bne.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0210 	mvn.w	r2, #16
 8003380:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e030      	b.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fe fd4c 	bl	8001e48 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d11d      	bne.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d016      	beq.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e007      	b.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b40      	cmp	r3, #64	@ 0x40
 800340a:	d1ae      	bne.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800342c:	d11b      	bne.n	8003466 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003436:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f043 0204 	orr.w	r2, r3, #4
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cc      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b68      	ldr	r3, [pc, #416]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90c      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b65      	ldr	r3, [pc, #404]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b3f      	ldr	r3, [pc, #252]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e067      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b37      	ldr	r3, [pc, #220]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4934      	ldr	r1, [pc, #208]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7fe fc70 	bl	8001e48 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe fc6c 	bl	8001e48 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2b      	ldr	r3, [pc, #172]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20c      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b22      	ldr	r3, [pc, #136]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f873 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe faec 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	08004700 	.word	0x08004700
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	@ (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08004710 	.word	0x08004710

08003680 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	220f      	movs	r2, #15
 800368e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800369c:	4b0f      	ldr	r3, [pc, #60]	@ (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036a8:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036b4:	4b09      	ldr	r3, [pc, #36]	@ (80036dc <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	08db      	lsrs	r3, r3, #3
 80036ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036c2:	4b07      	ldr	r3, [pc, #28]	@ (80036e0 <HAL_RCC_GetClockConfig+0x60>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b0ae      	sub	sp, #184	@ 0xb8
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370a:	4bcb      	ldr	r3, [pc, #812]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b0c      	cmp	r3, #12
 8003714:	f200 8204 	bhi.w	8003b20 <HAL_RCC_GetSysClockFreq+0x43c>
 8003718:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_RCC_GetSysClockFreq+0x3c>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003755 	.word	0x08003755
 8003724:	08003b21 	.word	0x08003b21
 8003728:	08003b21 	.word	0x08003b21
 800372c:	08003b21 	.word	0x08003b21
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003b21 	.word	0x08003b21
 8003738:	08003b21 	.word	0x08003b21
 800373c:	08003b21 	.word	0x08003b21
 8003740:	08003765 	.word	0x08003765
 8003744:	08003b21 	.word	0x08003b21
 8003748:	08003b21 	.word	0x08003b21
 800374c:	08003b21 	.word	0x08003b21
 8003750:	08003955 	.word	0x08003955
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4bb9      	ldr	r3, [pc, #740]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x358>)
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800375a:	e1e5      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375c:	4bb7      	ldr	r3, [pc, #732]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x358>)
 800375e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003762:	e1e1      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4bb4      	ldr	r3, [pc, #720]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800376c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003770:	4bb1      	ldr	r3, [pc, #708]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d071      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377c:	4bae      	ldr	r3, [pc, #696]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003788:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800379e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f04f 0000 	mov.w	r0, #0
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	0159      	lsls	r1, r3, #5
 80037b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b4:	0150      	lsls	r0, r2, #5
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4621      	mov	r1, r4
 80037bc:	1a51      	subs	r1, r2, r1
 80037be:	6439      	str	r1, [r7, #64]	@ 0x40
 80037c0:	4629      	mov	r1, r5
 80037c2:	eb63 0301 	sbc.w	r3, r3, r1
 80037c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80037d4:	4649      	mov	r1, r9
 80037d6:	018b      	lsls	r3, r1, #6
 80037d8:	4641      	mov	r1, r8
 80037da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037de:	4641      	mov	r1, r8
 80037e0:	018a      	lsls	r2, r1, #6
 80037e2:	4641      	mov	r1, r8
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037e8:	4649      	mov	r1, r9
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80037fc:	4649      	mov	r1, r9
 80037fe:	00cb      	lsls	r3, r1, #3
 8003800:	4641      	mov	r1, r8
 8003802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003806:	4641      	mov	r1, r8
 8003808:	00ca      	lsls	r2, r1, #3
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	4603      	mov	r3, r0
 8003810:	4622      	mov	r2, r4
 8003812:	189b      	adds	r3, r3, r2
 8003814:	633b      	str	r3, [r7, #48]	@ 0x30
 8003816:	462b      	mov	r3, r5
 8003818:	460a      	mov	r2, r1
 800381a:	eb42 0303 	adc.w	r3, r2, r3
 800381e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800382c:	4629      	mov	r1, r5
 800382e:	028b      	lsls	r3, r1, #10
 8003830:	4621      	mov	r1, r4
 8003832:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003836:	4621      	mov	r1, r4
 8003838:	028a      	lsls	r2, r1, #10
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800384c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003850:	f7fd f810 	bl	8000874 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800385e:	e067      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800386c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003878:	67bb      	str	r3, [r7, #120]	@ 0x78
 800387a:	2300      	movs	r3, #0
 800387c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800387e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0159      	lsls	r1, r3, #5
 8003890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003894:	0150      	lsls	r0, r2, #5
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4621      	mov	r1, r4
 800389c:	1a51      	subs	r1, r2, r1
 800389e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038a0:	4629      	mov	r1, r5
 80038a2:	eb63 0301 	sbc.w	r3, r3, r1
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80038b4:	4649      	mov	r1, r9
 80038b6:	018b      	lsls	r3, r1, #6
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038be:	4641      	mov	r1, r8
 80038c0:	018a      	lsls	r2, r1, #6
 80038c2:	4641      	mov	r1, r8
 80038c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c8:	4649      	mov	r1, r9
 80038ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e2:	4692      	mov	sl, r2
 80038e4:	469b      	mov	fp, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb1a 0303 	adds.w	r3, sl, r3
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	462b      	mov	r3, r5
 80038f0:	eb4b 0303 	adc.w	r3, fp, r3
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003902:	4629      	mov	r1, r5
 8003904:	028b      	lsls	r3, r1, #10
 8003906:	4621      	mov	r1, r4
 8003908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800390c:	4621      	mov	r1, r4
 800390e:	028a      	lsls	r2, r1, #10
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003918:	2200      	movs	r2, #0
 800391a:	673b      	str	r3, [r7, #112]	@ 0x70
 800391c:	677a      	str	r2, [r7, #116]	@ 0x74
 800391e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003922:	f7fc ffa7 	bl	8000874 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4613      	mov	r3, r2
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003930:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003952:	e0e9      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b38      	ldr	r3, [pc, #224]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4b35      	ldr	r3, [pc, #212]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d069      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4b32      	ldr	r3, [pc, #200]	@ (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003980:	2300      	movs	r3, #0
 8003982:	667b      	str	r3, [r7, #100]	@ 0x64
 8003984:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4621      	mov	r1, r4
 80039a2:	1a51      	subs	r1, r2, r1
 80039a4:	61b9      	str	r1, [r7, #24]
 80039a6:	4629      	mov	r1, r5
 80039a8:	eb63 0301 	sbc.w	r3, r3, r1
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039ba:	4659      	mov	r1, fp
 80039bc:	018b      	lsls	r3, r1, #6
 80039be:	4651      	mov	r1, sl
 80039c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c4:	4651      	mov	r1, sl
 80039c6:	018a      	lsls	r2, r1, #6
 80039c8:	4651      	mov	r1, sl
 80039ca:	ebb2 0801 	subs.w	r8, r2, r1
 80039ce:	4659      	mov	r1, fp
 80039d0:	eb63 0901 	sbc.w	r9, r3, r1
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e8:	4690      	mov	r8, r2
 80039ea:	4699      	mov	r9, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	eb18 0303 	adds.w	r3, r8, r3
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	462b      	mov	r3, r5
 80039f6:	eb49 0303 	adc.w	r3, r9, r3
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a08:	4629      	mov	r1, r5
 8003a0a:	028b      	lsls	r3, r1, #10
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a12:	4621      	mov	r1, r4
 8003a14:	028a      	lsls	r2, r1, #10
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a1e:	2200      	movs	r2, #0
 8003a20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a22:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a28:	f7fc ff24 	bl	8000874 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a36:	e063      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x41c>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a40:	4b3d      	ldr	r3, [pc, #244]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x454>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	2200      	movs	r2, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a50:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a52:	2300      	movs	r3, #0
 8003a54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003a5a:	4642      	mov	r2, r8
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	f04f 0000 	mov.w	r0, #0
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	0159      	lsls	r1, r3, #5
 8003a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a6c:	0150      	lsls	r0, r2, #5
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4641      	mov	r1, r8
 8003a74:	1a51      	subs	r1, r2, r1
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	4649      	mov	r1, r9
 8003a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	018b      	lsls	r3, r1, #6
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a96:	4651      	mov	r1, sl
 8003a98:	018a      	lsls	r2, r1, #6
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	1a54      	subs	r4, r2, r1
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	eb63 0501 	sbc.w	r5, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	00eb      	lsls	r3, r5, #3
 8003aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab2:	00e2      	lsls	r2, r4, #3
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	4643      	mov	r3, r8
 8003aba:	18e3      	adds	r3, r4, r3
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	464b      	mov	r3, r9
 8003ac0:	eb45 0303 	adc.w	r3, r5, r3
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	028b      	lsls	r3, r1, #10
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003adc:	4621      	mov	r1, r4
 8003ade:	028a      	lsls	r2, r1, #10
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ae8:	2200      	movs	r2, #0
 8003aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003aee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003af2:	f7fc febf 	bl	8000874 <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4613      	mov	r3, r2
 8003afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b00:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x454>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	0f1b      	lsrs	r3, r3, #28
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8003b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b1e:	e003      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	37b8      	adds	r7, #184	@ 0xb8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	00f42400 	.word	0x00f42400

08003b40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e28d      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8083 	beq.w	8003c66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b60:	4b94      	ldr	r3, [pc, #592]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b6c:	4b91      	ldr	r3, [pc, #580]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b78:	4b8e      	ldr	r3, [pc, #568]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b84:	d00c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4b8b      	ldr	r3, [pc, #556]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d112      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b92:	4b88      	ldr	r3, [pc, #544]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	4b84      	ldr	r3, [pc, #528]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05b      	beq.n	8003c64 <HAL_RCC_OscConfig+0x124>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d157      	bne.n	8003c64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e25a      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x90>
 8003bc2:	4b7c      	ldr	r3, [pc, #496]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a7b      	ldr	r2, [pc, #492]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xcc>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xb4>
 8003bda:	4b76      	ldr	r3, [pc, #472]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a75      	ldr	r2, [pc, #468]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b73      	ldr	r3, [pc, #460]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a72      	ldr	r2, [pc, #456]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xcc>
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b6c      	ldr	r3, [pc, #432]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a6b      	ldr	r2, [pc, #428]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fe f918 	bl	8001e48 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe f914 	bl	8001e48 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	@ 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e21f      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b61      	ldr	r3, [pc, #388]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xdc>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe f904 	bl	8001e48 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe f900 	bl	8001e48 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e20b      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	4b57      	ldr	r3, [pc, #348]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x104>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d06f      	beq.n	8003d52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c72:	4b50      	ldr	r3, [pc, #320]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d017      	beq.n	8003cae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b47      	ldr	r3, [pc, #284]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9e:	2b0c      	cmp	r3, #12
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b44      	ldr	r3, [pc, #272]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x186>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1d3      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4937      	ldr	r1, [pc, #220]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b34      	ldr	r3, [pc, #208]	@ (8003db8 <HAL_RCC_OscConfig+0x278>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe f8ad 	bl	8001e48 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fe f8a9 	bl	8001e48 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1b4      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b28      	ldr	r3, [pc, #160]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4925      	ldr	r1, [pc, #148]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCC_OscConfig+0x278>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe f88c 	bl	8001e48 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fe f888 	bl	8001e48 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e193      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d036      	beq.n	8003dcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fe f86c 	bl	8001e48 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fe f868 	bl	8001e48 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e173      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_OscConfig+0x274>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x234>
 8003d92:	e01b      	b.n	8003dcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fe f855 	bl	8001e48 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fe f851 	bl	8001e48 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d907      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e15c      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470000 	.word	0x42470000
 8003dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	4b8a      	ldr	r3, [pc, #552]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ea      	bne.n	8003da2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dde:	4b83      	ldr	r3, [pc, #524]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b7f      	ldr	r3, [pc, #508]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b79      	ldr	r3, [pc, #484]	@ (8003ff0 <HAL_RCC_OscConfig+0x4b0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b76      	ldr	r3, [pc, #472]	@ (8003ff0 <HAL_RCC_OscConfig+0x4b0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a75      	ldr	r2, [pc, #468]	@ (8003ff0 <HAL_RCC_OscConfig+0x4b0>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fe f811 	bl	8001e48 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fe f80d 	bl	8001e48 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e118      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <HAL_RCC_OscConfig+0x4b0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x31e>
 8003e50:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	4a65      	ldr	r2, [pc, #404]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x358>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x340>
 8003e66:	4b61      	ldr	r3, [pc, #388]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a60      	ldr	r2, [pc, #384]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b5e      	ldr	r3, [pc, #376]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a5d      	ldr	r2, [pc, #372]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x358>
 8003e80:	4b5a      	ldr	r3, [pc, #360]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	4a59      	ldr	r2, [pc, #356]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8c:	4b57      	ldr	r3, [pc, #348]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e90:	4a56      	ldr	r2, [pc, #344]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd ffd2 	bl	8001e48 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd ffce 	bl	8001e48 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0d7      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x368>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fd ffbc 	bl	8001e48 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fd ffb8 	bl	8001e48 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0c1      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	4b40      	ldr	r3, [pc, #256]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	4a3a      	ldr	r2, [pc, #232]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80ad 	beq.w	800406c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f12:	4b36      	ldr	r3, [pc, #216]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d060      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d145      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b33      	ldr	r3, [pc, #204]	@ (8003ff4 <HAL_RCC_OscConfig+0x4b4>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ff8c 	bl	8001e48 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd ff88 	bl	8001e48 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e093      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b29      	ldr	r3, [pc, #164]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	071b      	lsls	r3, r3, #28
 8003f7e:	491b      	ldr	r1, [pc, #108]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x4b4>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fd ff5d 	bl	8001e48 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd ff59 	bl	8001e48 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e064      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x452>
 8003fb0:	e05c      	b.n	800406c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <HAL_RCC_OscConfig+0x4b4>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd ff46 	bl	8001e48 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fd ff42 	bl	8001e48 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04d      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <HAL_RCC_OscConfig+0x4ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x480>
 8003fde:	e045      	b.n	800406c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e040      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <HAL_RCC_OscConfig+0x538>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d030      	beq.n	8004068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d129      	bne.n	8004068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d122      	bne.n	8004068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800402e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	4293      	cmp	r3, r2
 8004032:	d119      	bne.n	8004068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d10f      	bne.n	8004068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d107      	bne.n	8004068 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800

0800407c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e041      	b.n	8004112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd fd86 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f000 fa1e 	bl	80044fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d001      	beq.n	8004134 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e046      	b.n	80041c2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a23      	ldr	r2, [pc, #140]	@ (80041d0 <HAL_TIM_Base_Start+0xb4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414e:	d01d      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <HAL_TIM_Base_Start+0xb8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1e      	ldr	r2, [pc, #120]	@ (80041d8 <HAL_TIM_Base_Start+0xbc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1c      	ldr	r2, [pc, #112]	@ (80041dc <HAL_TIM_Base_Start+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <HAL_TIM_Base_Start+0xc4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a19      	ldr	r2, [pc, #100]	@ (80041e4 <HAL_TIM_Base_Start+0xc8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_Base_Start+0x70>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <HAL_TIM_Base_Start+0xcc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d010      	beq.n	80041c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e007      	b.n	80041c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40000800 	.word	0x40000800
 80041dc:	40000c00 	.word	0x40000c00
 80041e0:	40010400 	.word	0x40010400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40001800 	.word	0x40001800

080041ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d001      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04e      	b.n	80042a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a23      	ldr	r2, [pc, #140]	@ (80042b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d022      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422e:	d01d      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1f      	ldr	r2, [pc, #124]	@ (80042b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d013      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1c      	ldr	r2, [pc, #112]	@ (80042bc <HAL_TIM_Base_Start_IT+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00e      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1b      	ldr	r2, [pc, #108]	@ (80042c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d009      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a19      	ldr	r2, [pc, #100]	@ (80042c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d004      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x80>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a18      	ldr	r2, [pc, #96]	@ (80042c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d111      	bne.n	8004290 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b06      	cmp	r3, #6
 800427c:	d010      	beq.n	80042a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	e007      	b.n	80042a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40000c00 	.word	0x40000c00
 80042c0:	40010400 	.word	0x40010400
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40001800 	.word	0x40001800

080042cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d020      	beq.n	8004330 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01b      	beq.n	8004330 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0202 	mvn.w	r2, #2
 8004300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8d2 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8c4 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f8d5 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0204 	mvn.w	r2, #4
 800434c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8ac 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f89e 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8af 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0208 	mvn.w	r2, #8
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2204      	movs	r2, #4
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f886 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f878 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f889 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0210 	mvn.w	r2, #16
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2208      	movs	r2, #8
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f860 	bl	80044c0 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f852 	bl	80044ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f863 	bl	80044d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0201 	mvn.w	r2, #1
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fd fb36 	bl	8001aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f906 	bl	8004668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f834 	bl	80044e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00c      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0220 	mvn.w	r2, #32
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8d8 	bl	8004654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a46      	ldr	r2, [pc, #280]	@ (8004628 <TIM_Base_SetConfig+0x12c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451a:	d00f      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a43      	ldr	r2, [pc, #268]	@ (800462c <TIM_Base_SetConfig+0x130>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a42      	ldr	r2, [pc, #264]	@ (8004630 <TIM_Base_SetConfig+0x134>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a41      	ldr	r2, [pc, #260]	@ (8004634 <TIM_Base_SetConfig+0x138>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a40      	ldr	r2, [pc, #256]	@ (8004638 <TIM_Base_SetConfig+0x13c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a35      	ldr	r2, [pc, #212]	@ (8004628 <TIM_Base_SetConfig+0x12c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d02b      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455c:	d027      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a32      	ldr	r2, [pc, #200]	@ (800462c <TIM_Base_SetConfig+0x130>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d023      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a31      	ldr	r2, [pc, #196]	@ (8004630 <TIM_Base_SetConfig+0x134>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d01f      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a30      	ldr	r2, [pc, #192]	@ (8004634 <TIM_Base_SetConfig+0x138>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01b      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a2f      	ldr	r2, [pc, #188]	@ (8004638 <TIM_Base_SetConfig+0x13c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d017      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2e      	ldr	r2, [pc, #184]	@ (800463c <TIM_Base_SetConfig+0x140>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2d      	ldr	r2, [pc, #180]	@ (8004640 <TIM_Base_SetConfig+0x144>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2c      	ldr	r2, [pc, #176]	@ (8004644 <TIM_Base_SetConfig+0x148>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2b      	ldr	r2, [pc, #172]	@ (8004648 <TIM_Base_SetConfig+0x14c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	@ (800464c <TIM_Base_SetConfig+0x150>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a29      	ldr	r2, [pc, #164]	@ (8004650 <TIM_Base_SetConfig+0x154>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d108      	bne.n	80045c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <TIM_Base_SetConfig+0x12c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0xf8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a12      	ldr	r2, [pc, #72]	@ (8004638 <TIM_Base_SetConfig+0x13c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]
  }
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40010400 	.word	0x40010400
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800
 8004648:	40001800 	.word	0x40001800
 800464c:	40001c00 	.word	0x40001c00
 8004650:	40002000 	.word	0x40002000

08004654 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <memset>:
 800467c:	4402      	add	r2, r0
 800467e:	4603      	mov	r3, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	d100      	bne.n	8004686 <memset+0xa>
 8004684:	4770      	bx	lr
 8004686:	f803 1b01 	strb.w	r1, [r3], #1
 800468a:	e7f9      	b.n	8004680 <memset+0x4>

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4d0d      	ldr	r5, [pc, #52]	@ (80046c4 <__libc_init_array+0x38>)
 8004690:	4c0d      	ldr	r4, [pc, #52]	@ (80046c8 <__libc_init_array+0x3c>)
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2600      	movs	r6, #0
 8004698:	42a6      	cmp	r6, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	4d0b      	ldr	r5, [pc, #44]	@ (80046cc <__libc_init_array+0x40>)
 800469e:	4c0c      	ldr	r4, [pc, #48]	@ (80046d0 <__libc_init_array+0x44>)
 80046a0:	f000 f818 	bl	80046d4 <_init>
 80046a4:	1b64      	subs	r4, r4, r5
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	2600      	movs	r6, #0
 80046aa:	42a6      	cmp	r6, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b4:	4798      	blx	r3
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80046be:	4798      	blx	r3
 80046c0:	3601      	adds	r6, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	08004720 	.word	0x08004720
 80046c8:	08004720 	.word	0x08004720
 80046cc:	08004720 	.word	0x08004720
 80046d0:	08004724 	.word	0x08004724

080046d4 <_init>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	bf00      	nop
 80046d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046da:	bc08      	pop	{r3}
 80046dc:	469e      	mov	lr, r3
 80046de:	4770      	bx	lr

080046e0 <_fini>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	bf00      	nop
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr
