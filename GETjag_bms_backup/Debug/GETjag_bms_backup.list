
GETjag_bms_backup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dddc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800dfac  0800dfac  0000efac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e53c  0800e53c  00010110  2**0
                  CONTENTS
  4 .ARM          00000008  0800e53c  0800e53c  0000f53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e544  0800e544  00010110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e544  0800e544  0000f544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e548  0800e548  0000f548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800e54c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a78  20000110  0800e65c  00010110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014b88  0800e65c  00010b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002118b  00000000  00000000  00010140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ba3  00000000  00000000  000312cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  00035e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001895  00000000  00000000  00037de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000861f  00000000  00000000  00039675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251f7  00000000  00000000  00041c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed735  00000000  00000000  00066e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001545c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f88  00000000  00000000  00154604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0015d58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800df94 	.word	0x0800df94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	0800df94 	.word	0x0800df94

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013464 	.word	0x20013464

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_dmul>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000376:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800037a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800037e:	bf1d      	ittte	ne
 8000380:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000384:	ea94 0f0c 	teqne	r4, ip
 8000388:	ea95 0f0c 	teqne	r5, ip
 800038c:	f000 f8de 	bleq	800054c <__aeabi_dmul+0x1dc>
 8000390:	442c      	add	r4, r5
 8000392:	ea81 0603 	eor.w	r6, r1, r3
 8000396:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800039a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800039e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80003a2:	bf18      	it	ne
 80003a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80003a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003b0:	d038      	beq.n	8000424 <__aeabi_dmul+0xb4>
 80003b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80003b6:	f04f 0500 	mov.w	r5, #0
 80003ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80003c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003c6:	f04f 0600 	mov.w	r6, #0
 80003ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003ce:	f09c 0f00 	teq	ip, #0
 80003d2:	bf18      	it	ne
 80003d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80003d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80003dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80003e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80003e4:	d204      	bcs.n	80003f0 <__aeabi_dmul+0x80>
 80003e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003ea:	416d      	adcs	r5, r5
 80003ec:	eb46 0606 	adc.w	r6, r6, r6
 80003f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000400:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000404:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000408:	bf88      	it	hi
 800040a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800040e:	d81e      	bhi.n	800044e <__aeabi_dmul+0xde>
 8000410:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000414:	bf08      	it	eq
 8000416:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800041a:	f150 0000 	adcs.w	r0, r0, #0
 800041e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000428:	ea46 0101 	orr.w	r1, r6, r1
 800042c:	ea40 0002 	orr.w	r0, r0, r2
 8000430:	ea81 0103 	eor.w	r1, r1, r3
 8000434:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000438:	bfc2      	ittt	gt
 800043a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800043e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000442:	bd70      	popgt	{r4, r5, r6, pc}
 8000444:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000448:	f04f 0e00 	mov.w	lr, #0
 800044c:	3c01      	subs	r4, #1
 800044e:	f300 80ab 	bgt.w	80005a8 <__aeabi_dmul+0x238>
 8000452:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000456:	bfde      	ittt	le
 8000458:	2000      	movle	r0, #0
 800045a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800045e:	bd70      	pople	{r4, r5, r6, pc}
 8000460:	f1c4 0400 	rsb	r4, r4, #0
 8000464:	3c20      	subs	r4, #32
 8000466:	da35      	bge.n	80004d4 <__aeabi_dmul+0x164>
 8000468:	340c      	adds	r4, #12
 800046a:	dc1b      	bgt.n	80004a4 <__aeabi_dmul+0x134>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0520 	rsb	r5, r4, #32
 8000474:	fa00 f305 	lsl.w	r3, r0, r5
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f205 	lsl.w	r2, r1, r5
 8000480:	ea40 0002 	orr.w	r0, r0, r2
 8000484:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000488:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800048c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000490:	fa21 f604 	lsr.w	r6, r1, r4
 8000494:	eb42 0106 	adc.w	r1, r2, r6
 8000498:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800049c:	bf08      	it	eq
 800049e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f1c4 040c 	rsb	r4, r4, #12
 80004a8:	f1c4 0520 	rsb	r5, r4, #32
 80004ac:	fa00 f304 	lsl.w	r3, r0, r4
 80004b0:	fa20 f005 	lsr.w	r0, r0, r5
 80004b4:	fa01 f204 	lsl.w	r2, r1, r4
 80004b8:	ea40 0002 	orr.w	r0, r0, r2
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004c4:	f141 0100 	adc.w	r1, r1, #0
 80004c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004cc:	bf08      	it	eq
 80004ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f1c4 0520 	rsb	r5, r4, #32
 80004d8:	fa00 f205 	lsl.w	r2, r0, r5
 80004dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80004e0:	fa20 f304 	lsr.w	r3, r0, r4
 80004e4:	fa01 f205 	lsl.w	r2, r1, r5
 80004e8:	ea43 0302 	orr.w	r3, r3, r2
 80004ec:	fa21 f004 	lsr.w	r0, r1, r4
 80004f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	fa21 f204 	lsr.w	r2, r1, r4
 80004f8:	ea20 0002 	bic.w	r0, r0, r2
 80004fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000504:	bf08      	it	eq
 8000506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	f094 0f00 	teq	r4, #0
 8000510:	d10f      	bne.n	8000532 <__aeabi_dmul+0x1c2>
 8000512:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000516:	0040      	lsls	r0, r0, #1
 8000518:	eb41 0101 	adc.w	r1, r1, r1
 800051c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000520:	bf08      	it	eq
 8000522:	3c01      	subeq	r4, #1
 8000524:	d0f7      	beq.n	8000516 <__aeabi_dmul+0x1a6>
 8000526:	ea41 0106 	orr.w	r1, r1, r6
 800052a:	f095 0f00 	teq	r5, #0
 800052e:	bf18      	it	ne
 8000530:	4770      	bxne	lr
 8000532:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000536:	0052      	lsls	r2, r2, #1
 8000538:	eb43 0303 	adc.w	r3, r3, r3
 800053c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000540:	bf08      	it	eq
 8000542:	3d01      	subeq	r5, #1
 8000544:	d0f7      	beq.n	8000536 <__aeabi_dmul+0x1c6>
 8000546:	ea43 0306 	orr.w	r3, r3, r6
 800054a:	4770      	bx	lr
 800054c:	ea94 0f0c 	teq	r4, ip
 8000550:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000554:	bf18      	it	ne
 8000556:	ea95 0f0c 	teqne	r5, ip
 800055a:	d00c      	beq.n	8000576 <__aeabi_dmul+0x206>
 800055c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000560:	bf18      	it	ne
 8000562:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000566:	d1d1      	bne.n	800050c <__aeabi_dmul+0x19c>
 8000568:	ea81 0103 	eor.w	r1, r1, r3
 800056c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000570:	f04f 0000 	mov.w	r0, #0
 8000574:	bd70      	pop	{r4, r5, r6, pc}
 8000576:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800057a:	bf06      	itte	eq
 800057c:	4610      	moveq	r0, r2
 800057e:	4619      	moveq	r1, r3
 8000580:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000584:	d019      	beq.n	80005ba <__aeabi_dmul+0x24a>
 8000586:	ea94 0f0c 	teq	r4, ip
 800058a:	d102      	bne.n	8000592 <__aeabi_dmul+0x222>
 800058c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000590:	d113      	bne.n	80005ba <__aeabi_dmul+0x24a>
 8000592:	ea95 0f0c 	teq	r5, ip
 8000596:	d105      	bne.n	80005a4 <__aeabi_dmul+0x234>
 8000598:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800059c:	bf1c      	itt	ne
 800059e:	4610      	movne	r0, r2
 80005a0:	4619      	movne	r1, r3
 80005a2:	d10a      	bne.n	80005ba <__aeabi_dmul+0x24a>
 80005a4:	ea81 0103 	eor.w	r1, r1, r3
 80005a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80005ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd70      	pop	{r4, r5, r6, pc}
 80005ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80005c2:	bd70      	pop	{r4, r5, r6, pc}

080005c4 <__aeabi_drsub>:
 80005c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e002      	b.n	80005d0 <__adddf3>
 80005ca:	bf00      	nop

080005cc <__aeabi_dsub>:
 80005cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080005d0 <__adddf3>:
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	bf1f      	itttt	ne
 80005e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005f6:	f000 80e2 	beq.w	80007be <__adddf3+0x1ee>
 80005fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000602:	bfb8      	it	lt
 8000604:	426d      	neglt	r5, r5
 8000606:	dd0c      	ble.n	8000622 <__adddf3+0x52>
 8000608:	442c      	add	r4, r5
 800060a:	ea80 0202 	eor.w	r2, r0, r2
 800060e:	ea81 0303 	eor.w	r3, r1, r3
 8000612:	ea82 0000 	eor.w	r0, r2, r0
 8000616:	ea83 0101 	eor.w	r1, r3, r1
 800061a:	ea80 0202 	eor.w	r2, r0, r2
 800061e:	ea81 0303 	eor.w	r3, r1, r3
 8000622:	2d36      	cmp	r5, #54	@ 0x36
 8000624:	bf88      	it	hi
 8000626:	bd30      	pophi	{r4, r5, pc}
 8000628:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800062c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000630:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000634:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000638:	d002      	beq.n	8000640 <__adddf3+0x70>
 800063a:	4240      	negs	r0, r0
 800063c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000640:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000644:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000648:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800064c:	d002      	beq.n	8000654 <__adddf3+0x84>
 800064e:	4252      	negs	r2, r2
 8000650:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000654:	ea94 0f05 	teq	r4, r5
 8000658:	f000 80a7 	beq.w	80007aa <__adddf3+0x1da>
 800065c:	f1a4 0401 	sub.w	r4, r4, #1
 8000660:	f1d5 0e20 	rsbs	lr, r5, #32
 8000664:	db0d      	blt.n	8000682 <__adddf3+0xb2>
 8000666:	fa02 fc0e 	lsl.w	ip, r2, lr
 800066a:	fa22 f205 	lsr.w	r2, r2, r5
 800066e:	1880      	adds	r0, r0, r2
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	fa03 f20e 	lsl.w	r2, r3, lr
 8000678:	1880      	adds	r0, r0, r2
 800067a:	fa43 f305 	asr.w	r3, r3, r5
 800067e:	4159      	adcs	r1, r3
 8000680:	e00e      	b.n	80006a0 <__adddf3+0xd0>
 8000682:	f1a5 0520 	sub.w	r5, r5, #32
 8000686:	f10e 0e20 	add.w	lr, lr, #32
 800068a:	2a01      	cmp	r2, #1
 800068c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000690:	bf28      	it	cs
 8000692:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000696:	fa43 f305 	asr.w	r3, r3, r5
 800069a:	18c0      	adds	r0, r0, r3
 800069c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	d507      	bpl.n	80006b6 <__adddf3+0xe6>
 80006a6:	f04f 0e00 	mov.w	lr, #0
 80006aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80006ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80006ba:	d31b      	bcc.n	80006f4 <__adddf3+0x124>
 80006bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80006c0:	d30c      	bcc.n	80006dc <__adddf3+0x10c>
 80006c2:	0849      	lsrs	r1, r1, #1
 80006c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006cc:	f104 0401 	add.w	r4, r4, #1
 80006d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80006d8:	f080 809a 	bcs.w	8000810 <__adddf3+0x240>
 80006dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	ea41 0105 	orr.w	r1, r1, r5
 80006f2:	bd30      	pop	{r4, r5, pc}
 80006f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006f8:	4140      	adcs	r0, r0
 80006fa:	eb41 0101 	adc.w	r1, r1, r1
 80006fe:	3c01      	subs	r4, #1
 8000700:	bf28      	it	cs
 8000702:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000706:	d2e9      	bcs.n	80006dc <__adddf3+0x10c>
 8000708:	f091 0f00 	teq	r1, #0
 800070c:	bf04      	itt	eq
 800070e:	4601      	moveq	r1, r0
 8000710:	2000      	moveq	r0, #0
 8000712:	fab1 f381 	clz	r3, r1
 8000716:	bf08      	it	eq
 8000718:	3320      	addeq	r3, #32
 800071a:	f1a3 030b 	sub.w	r3, r3, #11
 800071e:	f1b3 0220 	subs.w	r2, r3, #32
 8000722:	da0c      	bge.n	800073e <__adddf3+0x16e>
 8000724:	320c      	adds	r2, #12
 8000726:	dd08      	ble.n	800073a <__adddf3+0x16a>
 8000728:	f102 0c14 	add.w	ip, r2, #20
 800072c:	f1c2 020c 	rsb	r2, r2, #12
 8000730:	fa01 f00c 	lsl.w	r0, r1, ip
 8000734:	fa21 f102 	lsr.w	r1, r1, r2
 8000738:	e00c      	b.n	8000754 <__adddf3+0x184>
 800073a:	f102 0214 	add.w	r2, r2, #20
 800073e:	bfd8      	it	le
 8000740:	f1c2 0c20 	rsble	ip, r2, #32
 8000744:	fa01 f102 	lsl.w	r1, r1, r2
 8000748:	fa20 fc0c 	lsr.w	ip, r0, ip
 800074c:	bfdc      	itt	le
 800074e:	ea41 010c 	orrle.w	r1, r1, ip
 8000752:	4090      	lslle	r0, r2
 8000754:	1ae4      	subs	r4, r4, r3
 8000756:	bfa2      	ittt	ge
 8000758:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800075c:	4329      	orrge	r1, r5
 800075e:	bd30      	popge	{r4, r5, pc}
 8000760:	ea6f 0404 	mvn.w	r4, r4
 8000764:	3c1f      	subs	r4, #31
 8000766:	da1c      	bge.n	80007a2 <__adddf3+0x1d2>
 8000768:	340c      	adds	r4, #12
 800076a:	dc0e      	bgt.n	800078a <__adddf3+0x1ba>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0220 	rsb	r2, r4, #32
 8000774:	fa20 f004 	lsr.w	r0, r0, r4
 8000778:	fa01 f302 	lsl.w	r3, r1, r2
 800077c:	ea40 0003 	orr.w	r0, r0, r3
 8000780:	fa21 f304 	lsr.w	r3, r1, r4
 8000784:	ea45 0103 	orr.w	r1, r5, r3
 8000788:	bd30      	pop	{r4, r5, pc}
 800078a:	f1c4 040c 	rsb	r4, r4, #12
 800078e:	f1c4 0220 	rsb	r2, r4, #32
 8000792:	fa20 f002 	lsr.w	r0, r0, r2
 8000796:	fa01 f304 	lsl.w	r3, r1, r4
 800079a:	ea40 0003 	orr.w	r0, r0, r3
 800079e:	4629      	mov	r1, r5
 80007a0:	bd30      	pop	{r4, r5, pc}
 80007a2:	fa21 f004 	lsr.w	r0, r1, r4
 80007a6:	4629      	mov	r1, r5
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	f094 0f00 	teq	r4, #0
 80007ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80007b2:	bf06      	itte	eq
 80007b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80007b8:	3401      	addeq	r4, #1
 80007ba:	3d01      	subne	r5, #1
 80007bc:	e74e      	b.n	800065c <__adddf3+0x8c>
 80007be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007c2:	bf18      	it	ne
 80007c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007c8:	d029      	beq.n	800081e <__adddf3+0x24e>
 80007ca:	ea94 0f05 	teq	r4, r5
 80007ce:	bf08      	it	eq
 80007d0:	ea90 0f02 	teqeq	r0, r2
 80007d4:	d005      	beq.n	80007e2 <__adddf3+0x212>
 80007d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80007da:	bf04      	itt	eq
 80007dc:	4619      	moveq	r1, r3
 80007de:	4610      	moveq	r0, r2
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	ea91 0f03 	teq	r1, r3
 80007e6:	bf1e      	ittt	ne
 80007e8:	2100      	movne	r1, #0
 80007ea:	2000      	movne	r0, #0
 80007ec:	bd30      	popne	{r4, r5, pc}
 80007ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007f2:	d105      	bne.n	8000800 <__adddf3+0x230>
 80007f4:	0040      	lsls	r0, r0, #1
 80007f6:	4149      	adcs	r1, r1
 80007f8:	bf28      	it	cs
 80007fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80007fe:	bd30      	pop	{r4, r5, pc}
 8000800:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000804:	bf3c      	itt	cc
 8000806:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800080a:	bd30      	popcc	{r4, r5, pc}
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000810:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000814:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd30      	pop	{r4, r5, pc}
 800081e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000822:	bf1a      	itte	ne
 8000824:	4619      	movne	r1, r3
 8000826:	4610      	movne	r0, r2
 8000828:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800082c:	bf1c      	itt	ne
 800082e:	460b      	movne	r3, r1
 8000830:	4602      	movne	r2, r0
 8000832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000836:	bf06      	itte	eq
 8000838:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800083c:	ea91 0f03 	teqeq	r1, r3
 8000840:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000844:	bd30      	pop	{r4, r5, pc}
 8000846:	bf00      	nop

08000848 <__aeabi_ui2d>:
 8000848:	f090 0f00 	teq	r0, #0
 800084c:	bf04      	itt	eq
 800084e:	2100      	moveq	r1, #0
 8000850:	4770      	bxeq	lr
 8000852:	b530      	push	{r4, r5, lr}
 8000854:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000858:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800085c:	f04f 0500 	mov.w	r5, #0
 8000860:	f04f 0100 	mov.w	r1, #0
 8000864:	e750      	b.n	8000708 <__adddf3+0x138>
 8000866:	bf00      	nop

08000868 <__aeabi_i2d>:
 8000868:	f090 0f00 	teq	r0, #0
 800086c:	bf04      	itt	eq
 800086e:	2100      	moveq	r1, #0
 8000870:	4770      	bxeq	lr
 8000872:	b530      	push	{r4, r5, lr}
 8000874:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000878:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800087c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	f04f 0100 	mov.w	r1, #0
 8000888:	e73e      	b.n	8000708 <__adddf3+0x138>
 800088a:	bf00      	nop

0800088c <__aeabi_f2d>:
 800088c:	0042      	lsls	r2, r0, #1
 800088e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000892:	ea4f 0131 	mov.w	r1, r1, rrx
 8000896:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800089a:	bf1f      	itttt	ne
 800089c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80008a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80008a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80008a8:	4770      	bxne	lr
 80008aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80008ae:	bf08      	it	eq
 80008b0:	4770      	bxeq	lr
 80008b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80008b6:	bf04      	itt	eq
 80008b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80008bc:	4770      	bxeq	lr
 80008be:	b530      	push	{r4, r5, lr}
 80008c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80008c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80008cc:	e71c      	b.n	8000708 <__adddf3+0x138>
 80008ce:	bf00      	nop

080008d0 <__aeabi_ul2d>:
 80008d0:	ea50 0201 	orrs.w	r2, r0, r1
 80008d4:	bf08      	it	eq
 80008d6:	4770      	bxeq	lr
 80008d8:	b530      	push	{r4, r5, lr}
 80008da:	f04f 0500 	mov.w	r5, #0
 80008de:	e00a      	b.n	80008f6 <__aeabi_l2d+0x16>

080008e0 <__aeabi_l2d>:
 80008e0:	ea50 0201 	orrs.w	r2, r0, r1
 80008e4:	bf08      	it	eq
 80008e6:	4770      	bxeq	lr
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80008ee:	d502      	bpl.n	80008f6 <__aeabi_l2d+0x16>
 80008f0:	4240      	negs	r0, r0
 80008f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000902:	f43f aed8 	beq.w	80006b6 <__adddf3+0xe6>
 8000906:	f04f 0203 	mov.w	r2, #3
 800090a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800090e:	bf18      	it	ne
 8000910:	3203      	addne	r2, #3
 8000912:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000916:	bf18      	it	ne
 8000918:	3203      	addne	r2, #3
 800091a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800091e:	f1c2 0320 	rsb	r3, r2, #32
 8000922:	fa00 fc03 	lsl.w	ip, r0, r3
 8000926:	fa20 f002 	lsr.w	r0, r0, r2
 800092a:	fa01 fe03 	lsl.w	lr, r1, r3
 800092e:	ea40 000e 	orr.w	r0, r0, lr
 8000932:	fa21 f102 	lsr.w	r1, r1, r2
 8000936:	4414      	add	r4, r2
 8000938:	e6bd      	b.n	80006b6 <__adddf3+0xe6>
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009f0:	f000 b96a 	b.w	8000cc8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	460c      	mov	r4, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d14e      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a18:	4694      	mov	ip, r2
 8000a1a:	458c      	cmp	ip, r1
 8000a1c:	4686      	mov	lr, r0
 8000a1e:	fab2 f282 	clz	r2, r2
 8000a22:	d962      	bls.n	8000aea <__udivmoddi4+0xde>
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	4319      	orrs	r1, r3
 8000a36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3e:	fa1f f68c 	uxth.w	r6, ip
 8000a42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a52:	fb04 f106 	mul.w	r1, r4, r6
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a62:	f080 8112 	bcs.w	8000c8a <__udivmoddi4+0x27e>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 810f 	bls.w	8000c8a <__udivmoddi4+0x27e>
 8000a6c:	3c02      	subs	r4, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a59      	subs	r1, r3, r1
 8000a72:	fa1f f38e 	uxth.w	r3, lr
 8000a76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb00 f606 	mul.w	r6, r0, r6
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x94>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a92:	f080 80fc 	bcs.w	8000c8e <__udivmoddi4+0x282>
 8000a96:	429e      	cmp	r6, r3
 8000a98:	f240 80f9 	bls.w	8000c8e <__udivmoddi4+0x282>
 8000a9c:	4463      	add	r3, ip
 8000a9e:	3802      	subs	r0, #2
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	b11d      	cbz	r5, 8000ab2 <__udivmoddi4+0xa6>
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d905      	bls.n	8000ac6 <__udivmoddi4+0xba>
 8000aba:	b10d      	cbz	r5, 8000ac0 <__udivmoddi4+0xb4>
 8000abc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e7f5      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000ac6:	fab3 f183 	clz	r1, r3
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d146      	bne.n	8000b5c <__udivmoddi4+0x150>
 8000ace:	42a3      	cmp	r3, r4
 8000ad0:	d302      	bcc.n	8000ad8 <__udivmoddi4+0xcc>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	f0c0 80f0 	bcc.w	8000cb8 <__udivmoddi4+0x2ac>
 8000ad8:	1a86      	subs	r6, r0, r2
 8000ada:	eb64 0303 	sbc.w	r3, r4, r3
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d0e6      	beq.n	8000ab2 <__udivmoddi4+0xa6>
 8000ae4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae8:	e7e3      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	f040 8090 	bne.w	8000c10 <__udivmoddi4+0x204>
 8000af0:	eba1 040c 	sub.w	r4, r1, ip
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa1f f78c 	uxth.w	r7, ip
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0e:	fb07 f006 	mul.w	r0, r7, r6
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x11c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x11a>
 8000b20:	4298      	cmp	r0, r3
 8000b22:	f200 80cd 	bhi.w	8000cc0 <__udivmoddi4+0x2b4>
 8000b26:	4626      	mov	r6, r4
 8000b28:	1a1c      	subs	r4, r3, r0
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b32:	fb08 4410 	mls	r4, r8, r0, r4
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	fb00 f707 	mul.w	r7, r0, r7
 8000b3e:	429f      	cmp	r7, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x148>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x146>
 8000b4c:	429f      	cmp	r7, r3
 8000b4e:	f200 80b0 	bhi.w	8000cb2 <__udivmoddi4+0x2a6>
 8000b52:	4620      	mov	r0, r4
 8000b54:	1bdb      	subs	r3, r3, r7
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	e7a5      	b.n	8000aa8 <__udivmoddi4+0x9c>
 8000b5c:	f1c1 0620 	rsb	r6, r1, #32
 8000b60:	408b      	lsls	r3, r1
 8000b62:	fa22 f706 	lsr.w	r7, r2, r6
 8000b66:	431f      	orrs	r7, r3
 8000b68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b70:	ea43 030c 	orr.w	r3, r3, ip
 8000b74:	40f4      	lsrs	r4, r6
 8000b76:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7a:	0c38      	lsrs	r0, r7, #16
 8000b7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b80:	fbb4 fef0 	udiv	lr, r4, r0
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	fb00 441e 	mls	r4, r0, lr, r4
 8000b8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b90:	fb0e f90c 	mul.w	r9, lr, ip
 8000b94:	45a1      	cmp	r9, r4
 8000b96:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x1a6>
 8000b9c:	193c      	adds	r4, r7, r4
 8000b9e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ba2:	f080 8084 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	f240 8081 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000bac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	eba4 0409 	sub.w	r4, r4, r9
 8000bb6:	fa1f f983 	uxth.w	r9, r3
 8000bba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x1d2>
 8000bce:	193c      	adds	r4, r7, r4
 8000bd0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bd4:	d267      	bcs.n	8000ca6 <__udivmoddi4+0x29a>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	d965      	bls.n	8000ca6 <__udivmoddi4+0x29a>
 8000bda:	3b02      	subs	r3, #2
 8000bdc:	443c      	add	r4, r7
 8000bde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be2:	fba0 9302 	umull	r9, r3, r0, r2
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	429c      	cmp	r4, r3
 8000bec:	46ce      	mov	lr, r9
 8000bee:	469c      	mov	ip, r3
 8000bf0:	d351      	bcc.n	8000c96 <__udivmoddi4+0x28a>
 8000bf2:	d04e      	beq.n	8000c92 <__udivmoddi4+0x286>
 8000bf4:	b155      	cbz	r5, 8000c0c <__udivmoddi4+0x200>
 8000bf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000c02:	40cb      	lsrs	r3, r1
 8000c04:	431e      	orrs	r6, r3
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	e9c5 6400 	strd	r6, r4, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e750      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000c10:	f1c2 0320 	rsb	r3, r2, #32
 8000c14:	fa20 f103 	lsr.w	r1, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c20:	4094      	lsls	r4, r2
 8000c22:	430c      	orrs	r4, r1
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2c:	fa1f f78c 	uxth.w	r7, ip
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3110 	mls	r1, r8, r0, r3
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f107 	mul.w	r1, r0, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x24c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c4e:	d22c      	bcs.n	8000caa <__udivmoddi4+0x29e>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d92a      	bls.n	8000caa <__udivmoddi4+0x29e>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c60:	fb08 3311 	mls	r3, r8, r1, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb01 f307 	mul.w	r3, r1, r7
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x276>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c78:	d213      	bcs.n	8000ca2 <__udivmoddi4+0x296>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d911      	bls.n	8000ca2 <__udivmoddi4+0x296>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4464      	add	r4, ip
 8000c82:	1ae4      	subs	r4, r4, r3
 8000c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c88:	e739      	b.n	8000afe <__udivmoddi4+0xf2>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	e6f0      	b.n	8000a70 <__udivmoddi4+0x64>
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e706      	b.n	8000aa0 <__udivmoddi4+0x94>
 8000c92:	45c8      	cmp	r8, r9
 8000c94:	d2ae      	bcs.n	8000bf4 <__udivmoddi4+0x1e8>
 8000c96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9e:	3801      	subs	r0, #1
 8000ca0:	e7a8      	b.n	8000bf4 <__udivmoddi4+0x1e8>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e7ed      	b.n	8000c82 <__udivmoddi4+0x276>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	e799      	b.n	8000bde <__udivmoddi4+0x1d2>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e7d4      	b.n	8000c58 <__udivmoddi4+0x24c>
 8000cae:	46d6      	mov	lr, sl
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1a6>
 8000cb2:	4463      	add	r3, ip
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	e74d      	b.n	8000b54 <__udivmoddi4+0x148>
 8000cb8:	4606      	mov	r6, r0
 8000cba:	4623      	mov	r3, r4
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e70f      	b.n	8000ae0 <__udivmoddi4+0xd4>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	e730      	b.n	8000b28 <__udivmoddi4+0x11c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <delayUS>:
static void modbus_comm_task(void *parameters);
static void task1_handler(void *parameters);
static void readVoltage_task(void *parameters);

void delayUS(uint32_t us)
{                                    // Sets the delay in microseconds.
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim10, 0); // set the counter value a 0
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <delayUS+0x2c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim10) < us)
 8000cdc:	bf00      	nop
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <delayUS+0x2c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d8f9      	bhi.n	8000cde <delayUS+0x12>
    ; // wait for the counter to reach the us input in the parameter
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	200002d4 	.word	0x200002d4

08000cfc <Checksum>:
  }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
  unsigned char i;
  unsigned char checksum = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < len; i++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e009      	b.n	8000d26 <Checksum+0x2a>
    checksum += ptr[i];
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < len; i++)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	3301      	adds	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d3f1      	bcc.n	8000d12 <Checksum+0x16>

  checksum = 0xff & ~checksum;
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	73bb      	strb	r3, [r7, #14]

  return (checksum);
 8000d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <I2C_WriteReg>:
  }
  return (crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <I2C_WriteReg+0x44>)
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d5c:	c303      	stmia	r3!, {r0, r1}
 8000d5e:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
  }
#else
  HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d6c:	9102      	str	r1, [sp, #8]
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <I2C_WriteReg+0x48>)
 8000d7a:	f004 fc81 	bl	8005680 <HAL_I2C_Mem_Write>
#endif
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	0800dfac 	.word	0x0800dfac
 8000d8c:	20000168 	.word	0x20000168

08000d90 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
  unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <I2C_ReadReg+0x48>)
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dac:	c303      	stmia	r3!, {r0, r1}
 8000dae:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    CopyArray(RX_Buffer, reg_data, crc_count);
  }
#else
  HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dbc:	9102      	str	r1, [sp, #8]
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <I2C_ReadReg+0x4c>)
 8000dca:	f004 fd53 	bl	8005874 <HAL_I2C_Mem_Read>
#endif
  return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	0800dfac 	.word	0x0800dfac
 8000ddc:	20000168 	.word	0x20000168

08000de0 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	80fb      	strh	r3, [r7, #6]
 8000dec:	4613      	mov	r3, r2
 8000dee:	717b      	strb	r3, [r7, #5]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000df0:	2300      	movs	r3, #0
 8000df2:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000df4:	4a49      	ldr	r2, [pc, #292]	@ (8000f1c <BQ769x2_SetRegister+0x13c>)
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dfe:	6018      	str	r0, [r3, #0]
 8000e00:	3304      	adds	r3, #4
 8000e02:	8019      	strh	r1, [r3, #0]

  // TX_RegData in little endian format
  TX_RegData[0] = reg_addr & 0xff;
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = reg_data & 0xff; // 1st byte of data
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	73bb      	strb	r3, [r7, #14]

  switch (datalen)
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d04c      	beq.n	8000eba <BQ769x2_SetRegister+0xda>
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	dc77      	bgt.n	8000f14 <BQ769x2_SetRegister+0x134>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d002      	beq.n	8000e2e <BQ769x2_SetRegister+0x4e>
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d021      	beq.n	8000e70 <BQ769x2_SetRegister+0x90>
    TX_Buffer[1] = 0x08;              // combined length of register address and data
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
    delayUS(2000);
    break;
  }
}
 8000e2c:	e072      	b.n	8000f14 <BQ769x2_SetRegister+0x134>
    I2C_WriteReg(0x3E, TX_RegData, 3);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2203      	movs	r2, #3
 8000e34:	4619      	mov	r1, r3
 8000e36:	203e      	movs	r0, #62	@ 0x3e
 8000e38:	f7ff ff84 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 8000e3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e40:	f7ff ff44 	bl	8000ccc <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 3);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2103      	movs	r1, #3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff56 	bl	8000cfc <Checksum>
 8000e50:	4603      	mov	r3, r0
 8000e52:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x05;              // combined length of register address and data
 8000e54:	2305      	movs	r3, #5
 8000e56:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2060      	movs	r0, #96	@ 0x60
 8000e62:	f7ff ff6f 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 8000e66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e6a:	f7ff ff2f 	bl	8000ccc <delayUS>
    break;
 8000e6e:	e051      	b.n	8000f14 <BQ769x2_SetRegister+0x134>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	73fb      	strb	r3, [r7, #15]
    I2C_WriteReg(0x3E, TX_RegData, 4);
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	203e      	movs	r0, #62	@ 0x3e
 8000e82:	f7ff ff5f 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 8000e86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e8a:	f7ff ff1f 	bl	8000ccc <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2104      	movs	r1, #4
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <Checksum>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x06;              // combined length of register address and data
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2060      	movs	r0, #96	@ 0x60
 8000eac:	f7ff ff4a 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 8000eb0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000eb4:	f7ff ff0a 	bl	8000ccc <delayUS>
    break;
 8000eb8:	e02c      	b.n	8000f14 <BQ769x2_SetRegister+0x134>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	73fb      	strb	r3, [r7, #15]
    TX_RegData[4] = (reg_data >> 16) & 0xff;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	743b      	strb	r3, [r7, #16]
    TX_RegData[5] = (reg_data >> 24) & 0xff;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	0e1b      	lsrs	r3, r3, #24
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x3E, TX_RegData, 6);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2206      	movs	r2, #6
 8000ed8:	4619      	mov	r1, r3
 8000eda:	203e      	movs	r0, #62	@ 0x3e
 8000edc:	f7ff ff32 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 8000ee0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ee4:	f7ff fef2 	bl	8000ccc <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 6);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2106      	movs	r1, #6
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff04 	bl	8000cfc <Checksum>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x08;              // combined length of register address and data
 8000ef8:	2308      	movs	r3, #8
 8000efa:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2202      	movs	r2, #2
 8000f02:	4619      	mov	r1, r3
 8000f04:	2060      	movs	r0, #96	@ 0x60
 8000f06:	f7ff ff1d 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 8000f0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f0e:	f7ff fedd 	bl	8000ccc <delayUS>
    break;
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800dfb8 	.word	0x0800dfb8

08000f20 <CommandSubcommands>:
  I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) // For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ // For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]

  uint8_t TX_Reg[2] = {0x00, 0x00};
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	81bb      	strh	r3, [r7, #12]

  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	733b      	strb	r3, [r7, #12]
  TX_Reg[1] = (command >> 8) & 0xff;
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	737b      	strb	r3, [r7, #13]

  I2C_WriteReg(0x3E, TX_Reg, 2);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2202      	movs	r2, #2
 8000f44:	4619      	mov	r1, r3
 8000f46:	203e      	movs	r0, #62	@ 0x3e
 8000f48:	f7ff fefc 	bl	8000d44 <I2C_WriteReg>
  delayUS(2000);
 8000f4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f50:	f7ff febc 	bl	8000ccc <delayUS>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Subcommands>:

void Subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
 8000f66:	460b      	mov	r3, r1
 8000f68:	80bb      	strh	r3, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	70fb      	strb	r3, [r7, #3]
  // security keys and Manu_data writes dont work with this function (reading these commands works)
  // max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
  uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000f72:	2300      	movs	r3, #0
 8000f74:	823b      	strh	r3, [r7, #16]
  uint8_t lowByte;
  uint8_t highByte;

  I2C_ReadReg(0x3E, &lowByte, 1);
 8000f76:	f107 030f 	add.w	r3, r7, #15
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	203e      	movs	r0, #62	@ 0x3e
 8000f80:	f7ff ff06 	bl	8000d90 <I2C_ReadReg>
  I2C_ReadReg(0x3F, &highByte, 1);
 8000f84:	f107 030e 	add.w	r3, r7, #14
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	203f      	movs	r0, #63	@ 0x3f
 8000f8e:	f7ff feff 	bl	8000d90 <I2C_ReadReg>
  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	753b      	strb	r3, [r7, #20]
  TX_Reg[1] = (command >> 8) & 0xff;
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	757b      	strb	r3, [r7, #21]

  if (type == R)
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d120      	bne.n	8000fea <Subcommands+0x8e>
  { // read
    I2C_WriteReg(0x3E, TX_Reg, 2);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2202      	movs	r2, #2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	203e      	movs	r0, #62	@ 0x3e
 8000fb2:	f7ff fec7 	bl	8000d44 <I2C_WriteReg>
    do
    {
      I2C_ReadReg(0x3E, &lowByte, 1);
 8000fb6:	f107 030f 	add.w	r3, r7, #15
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	203e      	movs	r0, #62	@ 0x3e
 8000fc0:	f7ff fee6 	bl	8000d90 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &highByte, 1);
 8000fc4:	f107 030e 	add.w	r3, r7, #14
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4619      	mov	r1, r3
 8000fcc:	203f      	movs	r0, #63	@ 0x3f
 8000fce:	f7ff fedf 	bl	8000d90 <I2C_ReadReg>
    } while (lowByte == 0xFF && highByte == 0xFF);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2bff      	cmp	r3, #255	@ 0xff
 8000fd6:	d102      	bne.n	8000fde <Subcommands+0x82>
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2bff      	cmp	r3, #255	@ 0xff
 8000fdc:	d0eb      	beq.n	8000fb6 <Subcommands+0x5a>

    // delayUS(100000);

    I2C_ReadReg(0x40, RX_32Byte, 32); // RX_32Byte is a global variable
 8000fde:	2220      	movs	r2, #32
 8000fe0:	492d      	ldr	r1, [pc, #180]	@ (8001098 <Subcommands+0x13c>)
 8000fe2:	2040      	movs	r0, #64	@ 0x40
 8000fe4:	f7ff fed4 	bl	8000d90 <I2C_ReadReg>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
    TX_Buffer[1] = 0x06; // combined length of registers address and data
    I2C_WriteReg(0x60, TX_Buffer, 2);
    delayUS(1000);
  }
}
 8000fe8:	e051      	b.n	800108e <Subcommands+0x132>
  else if (type == W)
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d123      	bne.n	8001038 <Subcommands+0xdc>
    TX_Reg[2] = data & 0xff;
 8000ff0:	88bb      	ldrh	r3, [r7, #4]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75bb      	strb	r3, [r7, #22]
    I2C_WriteReg(0x3E, TX_Reg, 3);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	203e      	movs	r0, #62	@ 0x3e
 8001000:	f7ff fea0 	bl	8000d44 <I2C_WriteReg>
    delayUS(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001008:	f7ff fe60 	bl	8000ccc <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 3);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2103      	movs	r1, #3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fe72 	bl	8000cfc <Checksum>
 8001018:	4603      	mov	r3, r0
 800101a:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x05; // combined length of registers address and data
 800101c:	2305      	movs	r3, #5
 800101e:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2202      	movs	r2, #2
 8001026:	4619      	mov	r1, r3
 8001028:	2060      	movs	r0, #96	@ 0x60
 800102a:	f7ff fe8b 	bl	8000d44 <I2C_WriteReg>
    delayUS(1000);
 800102e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001032:	f7ff fe4b 	bl	8000ccc <delayUS>
}
 8001036:	e02a      	b.n	800108e <Subcommands+0x132>
  else if (type == W2)
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d127      	bne.n	800108e <Subcommands+0x132>
    TX_Reg[2] = data & 0xff;
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	75bb      	strb	r3, [r7, #22]
    TX_Reg[3] = (data >> 8) & 0xff;
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	75fb      	strb	r3, [r7, #23]
    I2C_WriteReg(0x3E, TX_Reg, 4);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2204      	movs	r2, #4
 8001054:	4619      	mov	r1, r3
 8001056:	203e      	movs	r0, #62	@ 0x3e
 8001058:	f7ff fe74 	bl	8000d44 <I2C_WriteReg>
    delayUS(1000);
 800105c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001060:	f7ff fe34 	bl	8000ccc <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2104      	movs	r1, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fe46 	bl	8000cfc <Checksum>
 8001070:	4603      	mov	r3, r0
 8001072:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x06; // combined length of registers address and data
 8001074:	2306      	movs	r3, #6
 8001076:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2202      	movs	r2, #2
 800107e:	4619      	mov	r1, r3
 8001080:	2060      	movs	r0, #96	@ 0x60
 8001082:	f7ff fe5f 	bl	8000d44 <I2C_WriteReg>
    delayUS(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800108a:	f7ff fe1f 	bl	8000ccc <delayUS>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000540 	.word	0x20000540

0800109c <DirectCommands>:

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{ // type: R = read, W = write
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	460b      	mov	r3, r1
 80010a8:	80bb      	strh	r3, [r7, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_data[2] = {0x00, 0x00};
 80010ae:	2300      	movs	r3, #0
 80010b0:	81bb      	strh	r3, [r7, #12]

  // little endian format
  TX_data[0] = data & 0xff;
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	733b      	strb	r3, [r7, #12]
  TX_data[1] = (data >> 8) & 0xff;
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	737b      	strb	r3, [r7, #13]

  if (type == R)
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d109      	bne.n	80010dc <DirectCommands+0x40>
  {                                   // Read
    I2C_ReadReg(command, RX_data, 2); // RX_data is a global variable
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2202      	movs	r2, #2
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <DirectCommands+0x64>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe5e 	bl	8000d90 <I2C_ReadReg>
    delayUS(2000);
 80010d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010d8:	f7ff fdf8 	bl	8000ccc <delayUS>
  }
  if (type == W)
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d10a      	bne.n	80010f8 <DirectCommands+0x5c>
  { // write
    // Control_status, alarm_status, alarm_enable all 2 bytes long
    I2C_WriteReg(command, TX_data, 2);
 80010e2:	f107 010c 	add.w	r1, r7, #12
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe2a 	bl	8000d44 <I2C_WriteReg>
    delayUS(2000);
 80010f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010f4:	f7ff fdea 	bl	8000ccc <delayUS>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000053c 	.word	0x2000053c

08001104 <BQ769x2_Init>:

void BQ769x2_Init()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  // Configures all parameters in device RAM

  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
  // See TRM for full description of CONFIG_UPDATE mode
  CommandSubcommands(SET_CFGUPDATE);
 8001108:	2090      	movs	r0, #144	@ 0x90
 800110a:	f7ff ff09 	bl	8000f20 <CommandSubcommands>
  // a full description of the register and the bits will pop up on the screen.

  // 'Power Config' - 0x9234 = 0x2D80
  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
  // Set wake speed bits to 00 for best performance
  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 800110e:	2202      	movs	r2, #2
 8001110:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8001114:	f249 2034 	movw	r0, #37428	@ 0x9234
 8001118:	f7ff fe62 	bl	8000de0 <BQ769x2_SetRegister>

  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
  BQ769x2_SetRegister(REG0Config, 0x00, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	f249 2037 	movw	r0, #37431	@ 0x9237
 8001124:	f7ff fe5c 	bl	8000de0 <BQ769x2_SetRegister>
  // BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

  // Set up ALERT Pin - 0x92FC = 0x2A
  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
  BQ769x2_SetRegister(ALERTPinConfig, 0x2A, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	212a      	movs	r1, #42	@ 0x2a
 800112c:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 8001130:	f7ff fe56 	bl	8000de0 <BQ769x2_SetRegister>

  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
  // BQ769x2_SetRegister(HDQPinConfig, 0x00, 1);  // No thermistor installed on EVM HDQ pin, so set to 0x00

  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8001134:	2202      	movs	r2, #2
 8001136:	f248 011f 	movw	r1, #32799	@ 0x801f
 800113a:	f249 3004 	movw	r0, #37636	@ 0x9304
 800113e:	f7ff fe4f 	bl	8000de0 <BQ769x2_SetRegister>

  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
  // COV (over-voltage), CUV (under-voltage)
  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	21bc      	movs	r1, #188	@ 0xbc
 8001146:	f249 2061 	movw	r0, #37473	@ 0x9261
 800114a:	f7ff fe49 	bl	8000de0 <BQ769x2_SetRegister>

  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	21f7      	movs	r1, #247	@ 0xf7
 8001152:	f249 2062 	movw	r0, #37474	@ 0x9262
 8001156:	f7ff fe43 	bl	8000de0 <BQ769x2_SetRegister>

  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
  BQ769x2_SetRegister(DefaultAlarmMask, 0xF882, 2);
 800115a:	2202      	movs	r2, #2
 800115c:	f64f 0182 	movw	r1, #63618	@ 0xf882
 8001160:	f249 206d 	movw	r0, #37485	@ 0x926d
 8001164:	f7ff fe3c 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up Cell Balancing Configuration - 0x9335 = 0x03   -  Automated balancing while in Relax or Charge modes
  // Also see "Cell Balancing with BQ769x2 Battery Monitors" document on ti.com
  BQ769x2_SetRegister(BalancingConfiguration, 0x03, 1);
 8001168:	2201      	movs	r2, #1
 800116a:	2103      	movs	r1, #3
 800116c:	f249 3035 	movw	r0, #37685	@ 0x9335
 8001170:	f7ff fe36 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
  // CUV Threshold is this value multiplied by 50.6mV
  BQ769x2_SetRegister(CUVThreshold, 0x23, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	2123      	movs	r1, #35	@ 0x23
 8001178:	f249 2075 	movw	r0, #37493	@ 0x9275
 800117c:	f7ff fe30 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
  // COV Threshold is this value multiplied by 50.6mV
  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	2155      	movs	r1, #85	@ 0x55
 8001184:	f249 2078 	movw	r0, #37496	@ 0x9278
 8001188:	f7ff fe2a 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
  BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 800118c:	2201      	movs	r2, #1
 800118e:	2105      	movs	r1, #5
 8001190:	f249 2080 	movw	r0, #37504	@ 0x9280
 8001194:	f7ff fe24 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
  BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	210a      	movs	r1, #10
 800119c:	f249 2082 	movw	r0, #37506	@ 0x9282
 80011a0:	f7ff fe1e 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
  BQ769x2_SetRegister(SCDThreshold, 0x05, 1);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2105      	movs	r1, #5
 80011a8:	f249 2086 	movw	r0, #37510	@ 0x9286
 80011ac:	f7ff fe18 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2103      	movs	r1, #3
 80011b4:	f249 2087 	movw	r0, #37511	@ 0x9287
 80011b8:	f7ff fe12 	bl	8000de0 <BQ769x2_SetRegister>

  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	f249 2095 	movw	r0, #37525	@ 0x9295
 80011c4:	f7ff fe0c 	bl	8000de0 <BQ769x2_SetRegister>

  // Exit CONFIGUPDATE mode  - Subcommand 0x0092
  CommandSubcommands(EXIT_CFGUPDATE);
 80011c8:	2092      	movs	r0, #146	@ 0x92
 80011ca:	f7ff fea9 	bl	8000f20 <CommandSubcommands>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************

// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  // Read this register to find out why the ALERT pin was asserted
  DirectCommands(AlarmStatus, 0x00, R);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2062      	movs	r0, #98	@ 0x62
 80011de:	f7ff ff5d 	bl	800109c <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]);
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <BQ769x2_ReadAlarmStatus+0x24>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <BQ769x2_ReadAlarmStatus+0x24>)
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000053c 	.word	0x2000053c

080011fc <BQ769x2_ReadVoltage>:

// ********************************* BQ769x2 Measurement Commands   *****************************************

uint16_t BQ769x2_ReadVoltage(uint8_t command)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  // RX_data is global var
  DirectCommands(command, 0x00, R);
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff45 	bl	800109c <DirectCommands>
  if (command >= Cell1Voltage && command <= Cell16Voltage)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b13      	cmp	r3, #19
 8001216:	d90b      	bls.n	8001230 <BQ769x2_ReadVoltage+0x34>
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b32      	cmp	r3, #50	@ 0x32
 800121c:	d808      	bhi.n	8001230 <BQ769x2_ReadVoltage+0x34>
  {                                         // Cells 1 through 16 (0x14 to 0x32)
    return (RX_data[1] * 256 + RX_data[0]); // voltage is reported in mV
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <BQ769x2_ReadVoltage+0x54>)
 8001220:	785b      	ldrb	r3, [r3, #1]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b29b      	uxth	r3, r3
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <BQ769x2_ReadVoltage+0x54>)
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	4413      	add	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	e00b      	b.n	8001248 <BQ769x2_ReadVoltage+0x4c>
  }
  else
  {                                              // stack, Pack, LD
    return 10 * (RX_data[1] * 256 + RX_data[0]); // voltage is reported in 0.01V units
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <BQ769x2_ReadVoltage+0x54>)
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <BQ769x2_ReadVoltage+0x54>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4413      	add	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	b29b      	uxth	r3, r3
  }
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000053c 	.word	0x2000053c

08001254 <BQ769x2_ReadAllVoltages>:
void BQ769x2_ReadAllVoltages()
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  int cellvoltageholder = Cell1Voltage; // Cell1Voltage is 0x14
 800125a:	2314      	movs	r3, #20
 800125c:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++)
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	e010      	b.n	8001286 <BQ769x2_ReadAllVoltages+0x32>
  { // Reads all cell voltages
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ffc7 	bl	80011fc <BQ769x2_ReadVoltage>
 800126e:	4603      	mov	r3, r0
 8001270:	4619      	mov	r1, r3
 8001272:	4a13      	ldr	r2, [pc, #76]	@ (80012c0 <BQ769x2_ReadAllVoltages+0x6c>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3302      	adds	r3, #2
 800127e:	607b      	str	r3, [r7, #4]
  for (int x = 0; x < 16; x++)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	ddeb      	ble.n	8001264 <BQ769x2_ReadAllVoltages+0x10>
  }
  Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage);
 800128c:	2034      	movs	r0, #52	@ 0x34
 800128e:	f7ff ffb5 	bl	80011fc <BQ769x2_ReadVoltage>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <BQ769x2_ReadAllVoltages+0x70>)
 8001298:	801a      	strh	r2, [r3, #0]
  Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage);
 800129a:	2036      	movs	r0, #54	@ 0x36
 800129c:	f7ff ffae 	bl	80011fc <BQ769x2_ReadVoltage>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <BQ769x2_ReadAllVoltages+0x74>)
 80012a6:	801a      	strh	r2, [r3, #0]
  LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage);
 80012a8:	2038      	movs	r0, #56	@ 0x38
 80012aa:	f7ff ffa7 	bl	80011fc <BQ769x2_ReadVoltage>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <BQ769x2_ReadAllVoltages+0x78>)
 80012b4:	801a      	strh	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000560 	.word	0x20000560
 80012c4:	2000058c 	.word	0x2000058c
 80012c8:	2000058e 	.word	0x2000058e
 80012cc:	20000590 	.word	0x20000590

080012d0 <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  DirectCommands(CC2Current, 0x00, R);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	203a      	movs	r0, #58	@ 0x3a
 80012da:	f7ff fedf 	bl	800109c <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]); // current is reported in mA
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <BQ769x2_ReadCurrent+0x24>)
 80012e0:	785b      	ldrb	r3, [r3, #1]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4a03      	ldr	r2, [pc, #12]	@ (80012f4 <BQ769x2_ReadCurrent+0x24>)
 80012e8:	7812      	ldrb	r2, [r2, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000053c 	.word	0x2000053c

080012f8 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  DirectCommands(command, 0x00, R);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fec7 	bl	800109c <DirectCommands>
  // RX_data is a global var
  return (0.1 * (float)(RX_data[1] * 256 + RX_data[0])) - 273.15; // converts from 0.1K to Celcius
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <BQ769x2_ReadTemperature+0x80>)
 8001310:	785b      	ldrb	r3, [r3, #1]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <BQ769x2_ReadTemperature+0x80>)
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	4413      	add	r3, r2
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff fab1 	bl	800088c <__aeabi_f2d>
 800132a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001368 <BQ769x2_ReadTemperature+0x70>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f81e 	bl	8000370 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001370 <BQ769x2_ReadTemperature+0x78>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f943 	bl	80005cc <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff faf5 	bl	800093c <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	ee07 3a90 	vmov	s15, r3
}
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	9999999a 	.word	0x9999999a
 800136c:	3fb99999 	.word	0x3fb99999
 8001370:	66666666 	.word	0x66666666
 8001374:	40711266 	.word	0x40711266
 8001378:	2000053c 	.word	0x2000053c

0800137c <BQ769x2_ReadPassQ>:

void BQ769x2_ReadPassQ()
{ // Read Accumulated Charge and Time from DASTATUS6
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  Subcommands(DASTATUS6, 0x00, R);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2076      	movs	r0, #118	@ 0x76
 8001386:	f7ff fde9 	bl	8000f5c <Subcommands>
  AccumulatedCharge_Int = ((RX_32Byte[3] << 24) + (RX_32Byte[2] << 16) + (RX_32Byte[1] << 8) + RX_32Byte[0]);    // Bytes 0-3
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	061a      	lsls	r2, r3, #24
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 8001392:	789b      	ldrb	r3, [r3, #2]
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	441a      	add	r2, r3
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	4413      	add	r3, r2
 80013a0:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <BQ769x2_ReadPassQ+0x7c>)
 80013aa:	601a      	str	r2, [r3, #0]
  AccumulatedCharge_Frac = ((RX_32Byte[7] << 24) + (RX_32Byte[6] << 16) + (RX_32Byte[5] << 8) + RX_32Byte[4]);   // Bytes 4-7
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013ae:	79db      	ldrb	r3, [r3, #7]
 80013b0:	061a      	lsls	r2, r3, #24
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013b4:	799b      	ldrb	r3, [r3, #6]
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	441a      	add	r2, r3
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013bc:	795b      	ldrb	r3, [r3, #5]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4413      	add	r3, r2
 80013c2:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013c4:	7912      	ldrb	r2, [r2, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <BQ769x2_ReadPassQ+0x80>)
 80013cc:	601a      	str	r2, [r3, #0]
  AccumulatedCharge_Time = ((RX_32Byte[11] << 24) + (RX_32Byte[10] << 16) + (RX_32Byte[9] << 8) + RX_32Byte[8]); // Bytes 8-11
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013d0:	7adb      	ldrb	r3, [r3, #11]
 80013d2:	061a      	lsls	r2, r3, #24
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013d6:	7a9b      	ldrb	r3, [r3, #10]
 80013d8:	041b      	lsls	r3, r3, #16
 80013da:	441a      	add	r2, r3
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013de:	7a5b      	ldrb	r3, [r3, #9]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4413      	add	r3, r2
 80013e4:	4a03      	ldr	r2, [pc, #12]	@ (80013f4 <BQ769x2_ReadPassQ+0x78>)
 80013e6:	7a12      	ldrb	r2, [r2, #8]
 80013e8:	4413      	add	r3, r2
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <BQ769x2_ReadPassQ+0x84>)
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000540 	.word	0x20000540
 80013f8:	20000598 	.word	0x20000598
 80013fc:	2000059c 	.word	0x2000059c
 8001400:	200005a0 	.word	0x200005a0

08001404 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800140a:	4baf      	ldr	r3, [pc, #700]	@ (80016c8 <main+0x2c4>)
 800140c:	1d3c      	adds	r4, r7, #4
 800140e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001414:	f003 f9f6 	bl	8004804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001418:	f000 f9b0 	bl	800177c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f000 fb1e 	bl	8001a5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f000 faf4 	bl	8001a0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001424:	f000 fa9e 	bl	8001964 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001428:	f000 fa42 	bl	80018b0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800142c:	f000 fac4 	bl	80019b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001430:	f000 fa10 	bl	8001854 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001434:	f000 fa72 	bl	800191c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Enable cycle count for STM32

  DWT_CTRL |= (1 << 0);
 8001438:	4ba4      	ldr	r3, [pc, #656]	@ (80016cc <main+0x2c8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4aa3      	ldr	r2, [pc, #652]	@ (80016cc <main+0x2c8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8001444:	f009 fdcc 	bl	800afe0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001448:	f00a fe38 	bl	800c0bc <SEGGER_SYSVIEW_Start>

  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800144c:	2102      	movs	r1, #2
 800144e:	48a0      	ldr	r0, [pc, #640]	@ (80016d0 <main+0x2cc>)
 8001450:	f003 ffb7 	bl	80053c2 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8001454:	20c8      	movs	r0, #200	@ 0xc8
 8001456:	f003 fa17 	bl	8004888 <HAL_Delay>
  // vTaskStartScheduler();
  /* Chip selection call back */

  // HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
  // HAL_Delay(200);
  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800145a:	2102      	movs	r1, #2
 800145c:	489c      	ldr	r0, [pc, #624]	@ (80016d0 <main+0x2cc>)
 800145e:	f003 ffb0 	bl	80053c2 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 8001462:	20c8      	movs	r0, #200	@ 0xc8
 8001464:	f003 fa10 	bl	8004888 <HAL_Delay>
  // vTaskDelay(pdMS_TO_TICKS(200));

  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	2108      	movs	r1, #8
 800146c:	4899      	ldr	r0, [pc, #612]	@ (80016d4 <main+0x2d0>)
 800146e:	f003 ff8f 	bl	8005390 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001472:	2064      	movs	r0, #100	@ 0x64
 8001474:	f003 fa08 	bl	8004888 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2108      	movs	r1, #8
 800147c:	4895      	ldr	r0, [pc, #596]	@ (80016d4 <main+0x2d0>)
 800147e:	f003 ff87 	bl	8005390 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001482:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001486:	f003 f9ff 	bl	8004888 <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800148a:	4993      	ldr	r1, [pc, #588]	@ (80016d8 <main+0x2d4>)
 800148c:	4893      	ldr	r0, [pc, #588]	@ (80016dc <main+0x2d8>)
 800148e:	f002 fc77 	bl	8003d80 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001492:	4993      	ldr	r1, [pc, #588]	@ (80016e0 <main+0x2dc>)
 8001494:	4893      	ldr	r0, [pc, #588]	@ (80016e4 <main+0x2e0>)
 8001496:	f002 fc99 	bl	8003dcc <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	2001      	movs	r0, #1
 80014a0:	f002 fcc0 	bl	8003e24 <ctlwizchip>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014aa:	d101      	bne.n	80014b0 <main+0xac>
  {

    while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <main+0xa8>
      ;
  }

  /* Network initialization */
  network_init();
 80014b0:	f000 fdf8 	bl	80020a4 <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 80014b4:	488c      	ldr	r0, [pc, #560]	@ (80016e8 <main+0x2e4>)
 80014b6:	f003 f88f 	bl	80045d8 <wizchip_setnetinfo>
  PRINT_NETINFO(gWIZNETINFO);
 80014ba:	2364      	movs	r3, #100	@ 0x64
 80014bc:	2218      	movs	r2, #24
 80014be:	498b      	ldr	r1, [pc, #556]	@ (80016ec <main+0x2e8>)
 80014c0:	488b      	ldr	r0, [pc, #556]	@ (80016f0 <main+0x2ec>)
 80014c2:	f006 fc93 	bl	8007dec <HAL_UART_Transmit>
 80014c6:	4b88      	ldr	r3, [pc, #544]	@ (80016e8 <main+0x2e4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461c      	mov	r4, r3
 80014cc:	4b86      	ldr	r3, [pc, #536]	@ (80016e8 <main+0x2e4>)
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	461d      	mov	r5, r3
 80014d2:	4b85      	ldr	r3, [pc, #532]	@ (80016e8 <main+0x2e4>)
 80014d4:	789b      	ldrb	r3, [r3, #2]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b83      	ldr	r3, [pc, #524]	@ (80016e8 <main+0x2e4>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	4619      	mov	r1, r3
 80014de:	4b82      	ldr	r3, [pc, #520]	@ (80016e8 <main+0x2e4>)
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	4b80      	ldr	r3, [pc, #512]	@ (80016e8 <main+0x2e4>)
 80014e6:	795b      	ldrb	r3, [r3, #5]
 80014e8:	9303      	str	r3, [sp, #12]
 80014ea:	9002      	str	r0, [sp, #8]
 80014ec:	9101      	str	r1, [sp, #4]
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	462b      	mov	r3, r5
 80014f2:	4622      	mov	r2, r4
 80014f4:	497f      	ldr	r1, [pc, #508]	@ (80016f4 <main+0x2f0>)
 80014f6:	4880      	ldr	r0, [pc, #512]	@ (80016f8 <main+0x2f4>)
 80014f8:	f00b fcf0 	bl	800cedc <siprintf>
 80014fc:	487e      	ldr	r0, [pc, #504]	@ (80016f8 <main+0x2f4>)
 80014fe:	f7fe fedb 	bl	80002b8 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	2364      	movs	r3, #100	@ 0x64
 8001508:	497b      	ldr	r1, [pc, #492]	@ (80016f8 <main+0x2f4>)
 800150a:	4879      	ldr	r0, [pc, #484]	@ (80016f0 <main+0x2ec>)
 800150c:	f006 fc6e 	bl	8007dec <HAL_UART_Transmit>
 8001510:	4b75      	ldr	r3, [pc, #468]	@ (80016e8 <main+0x2e4>)
 8001512:	799b      	ldrb	r3, [r3, #6]
 8001514:	4619      	mov	r1, r3
 8001516:	4b74      	ldr	r3, [pc, #464]	@ (80016e8 <main+0x2e4>)
 8001518:	79db      	ldrb	r3, [r3, #7]
 800151a:	4618      	mov	r0, r3
 800151c:	4b72      	ldr	r3, [pc, #456]	@ (80016e8 <main+0x2e4>)
 800151e:	7a1b      	ldrb	r3, [r3, #8]
 8001520:	461a      	mov	r2, r3
 8001522:	4b71      	ldr	r3, [pc, #452]	@ (80016e8 <main+0x2e4>)
 8001524:	7a5b      	ldrb	r3, [r3, #9]
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9200      	str	r2, [sp, #0]
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	4973      	ldr	r1, [pc, #460]	@ (80016fc <main+0x2f8>)
 8001530:	4871      	ldr	r0, [pc, #452]	@ (80016f8 <main+0x2f4>)
 8001532:	f00b fcd3 	bl	800cedc <siprintf>
 8001536:	4870      	ldr	r0, [pc, #448]	@ (80016f8 <main+0x2f4>)
 8001538:	f7fe febe 	bl	80002b8 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	496d      	ldr	r1, [pc, #436]	@ (80016f8 <main+0x2f4>)
 8001544:	486a      	ldr	r0, [pc, #424]	@ (80016f0 <main+0x2ec>)
 8001546:	f006 fc51 	bl	8007dec <HAL_UART_Transmit>
 800154a:	4b67      	ldr	r3, [pc, #412]	@ (80016e8 <main+0x2e4>)
 800154c:	7a9b      	ldrb	r3, [r3, #10]
 800154e:	4619      	mov	r1, r3
 8001550:	4b65      	ldr	r3, [pc, #404]	@ (80016e8 <main+0x2e4>)
 8001552:	7adb      	ldrb	r3, [r3, #11]
 8001554:	4618      	mov	r0, r3
 8001556:	4b64      	ldr	r3, [pc, #400]	@ (80016e8 <main+0x2e4>)
 8001558:	7b1b      	ldrb	r3, [r3, #12]
 800155a:	461a      	mov	r2, r3
 800155c:	4b62      	ldr	r3, [pc, #392]	@ (80016e8 <main+0x2e4>)
 800155e:	7b5b      	ldrb	r3, [r3, #13]
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	4603      	mov	r3, r0
 8001566:	460a      	mov	r2, r1
 8001568:	4965      	ldr	r1, [pc, #404]	@ (8001700 <main+0x2fc>)
 800156a:	4863      	ldr	r0, [pc, #396]	@ (80016f8 <main+0x2f4>)
 800156c:	f00b fcb6 	bl	800cedc <siprintf>
 8001570:	4861      	ldr	r0, [pc, #388]	@ (80016f8 <main+0x2f4>)
 8001572:	f7fe fea1 	bl	80002b8 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	2364      	movs	r3, #100	@ 0x64
 800157c:	495e      	ldr	r1, [pc, #376]	@ (80016f8 <main+0x2f4>)
 800157e:	485c      	ldr	r0, [pc, #368]	@ (80016f0 <main+0x2ec>)
 8001580:	f006 fc34 	bl	8007dec <HAL_UART_Transmit>
 8001584:	4b58      	ldr	r3, [pc, #352]	@ (80016e8 <main+0x2e4>)
 8001586:	7b9b      	ldrb	r3, [r3, #14]
 8001588:	4619      	mov	r1, r3
 800158a:	4b57      	ldr	r3, [pc, #348]	@ (80016e8 <main+0x2e4>)
 800158c:	7bdb      	ldrb	r3, [r3, #15]
 800158e:	4618      	mov	r0, r3
 8001590:	4b55      	ldr	r3, [pc, #340]	@ (80016e8 <main+0x2e4>)
 8001592:	7c1b      	ldrb	r3, [r3, #16]
 8001594:	461a      	mov	r2, r3
 8001596:	4b54      	ldr	r3, [pc, #336]	@ (80016e8 <main+0x2e4>)
 8001598:	7c5b      	ldrb	r3, [r3, #17]
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9200      	str	r2, [sp, #0]
 800159e:	4603      	mov	r3, r0
 80015a0:	460a      	mov	r2, r1
 80015a2:	4958      	ldr	r1, [pc, #352]	@ (8001704 <main+0x300>)
 80015a4:	4854      	ldr	r0, [pc, #336]	@ (80016f8 <main+0x2f4>)
 80015a6:	f00b fc99 	bl	800cedc <siprintf>
 80015aa:	4853      	ldr	r0, [pc, #332]	@ (80016f8 <main+0x2f4>)
 80015ac:	f7fe fe84 	bl	80002b8 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	2364      	movs	r3, #100	@ 0x64
 80015b6:	4950      	ldr	r1, [pc, #320]	@ (80016f8 <main+0x2f4>)
 80015b8:	484d      	ldr	r0, [pc, #308]	@ (80016f0 <main+0x2ec>)
 80015ba:	f006 fc17 	bl	8007dec <HAL_UART_Transmit>

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80015be:	494a      	ldr	r1, [pc, #296]	@ (80016e8 <main+0x2e4>)
 80015c0:	2000      	movs	r0, #0
 80015c2:	f002 fd0f 	bl	8003fe4 <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 80015c6:	2301      	movs	r3, #1
 80015c8:	703b      	strb	r3, [r7, #0]
  phyconf.duplex = PHY_DUPLEX_FULL;
 80015ca:	2301      	movs	r3, #1
 80015cc:	70fb      	strb	r3, [r7, #3]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 80015ce:	2300      	movs	r3, #0
 80015d0:	70bb      	strb	r3, [r7, #2]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 80015d2:	2301      	movs	r3, #1
 80015d4:	707b      	strb	r3, [r7, #1]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	200a      	movs	r0, #10
 80015dc:	f002 fc22 	bl	8003e24 <ctlwizchip>
  //*** End Phy Configuration

  PHYStatusCheck();
 80015e0:	f000 fd72 	bl	80020c8 <PHYStatusCheck>
  PrintPHYConf();
 80015e4:	f000 fd9c 	bl	8002120 <PrintPHYConf>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80015e8:	2101      	movs	r1, #1
 80015ea:	4839      	ldr	r0, [pc, #228]	@ (80016d0 <main+0x2cc>)
 80015ec:	f003 fee9 	bl	80053c2 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 80015f0:	20c8      	movs	r0, #200	@ 0xc8
 80015f2:	f003 f949 	bl	8004888 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80015f6:	2102      	movs	r1, #2
 80015f8:	4835      	ldr	r0, [pc, #212]	@ (80016d0 <main+0x2cc>)
 80015fa:	f003 fee2 	bl	80053c2 <HAL_GPIO_TogglePin>
  HAL_Delay(200);
 80015fe:	20c8      	movs	r0, #200	@ 0xc8
 8001600:	f003 f942 	bl	8004888 <HAL_Delay>

  HAL_TIM_Base_Start(&htim10);
 8001604:	4840      	ldr	r0, [pc, #256]	@ (8001708 <main+0x304>)
 8001606:	f006 f899 	bl	800773c <HAL_TIM_Base_Start>
  delayUS(10000);
 800160a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800160e:	f7ff fb5d 	bl	8000ccc <delayUS>
  // CommandSubcommands(BQ769x2_RESET); // Resets the BQ769x2 registers
  // delayUS(60000);
  BQ769x2_Init(); // Configure all of the BQ769x2 register settings
 8001612:	f7ff fd77 	bl	8001104 <BQ769x2_Init>
  delayUS(10000);
 8001616:	f242 7010 	movw	r0, #10000	@ 0x2710
 800161a:	f7ff fb57 	bl	8000ccc <delayUS>
  CommandSubcommands(FET_ENABLE); // Enable the CHG and DSG FETs
 800161e:	2022      	movs	r0, #34	@ 0x22
 8001620:	f7ff fc7e 	bl	8000f20 <CommandSubcommands>
  delayUS(10000);
 8001624:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001628:	f7ff fb50 	bl	8000ccc <delayUS>
  CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 800162c:	209a      	movs	r0, #154	@ 0x9a
 800162e:	f7ff fc77 	bl	8000f20 <CommandSubcommands>
                                     // demonstrate full-speed measurements in Normal mode.

  delayUS(60000);
 8001632:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001636:	f7ff fb49 	bl	8000ccc <delayUS>
  delayUS(60000);
 800163a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800163e:	f7ff fb45 	bl	8000ccc <delayUS>
  delayUS(60000);
 8001642:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001646:	f7ff fb41 	bl	8000ccc <delayUS>
  delayUS(60000);
 800164a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800164e:	f7ff fb3d 	bl	8000ccc <delayUS>

  status = xTaskCreate(modbus_comm_task, "Modbus_comm", 200, NULL, 3, &modbus_task_handle);
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <main+0x308>)
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2303      	movs	r3, #3
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	22c8      	movs	r2, #200	@ 0xc8
 800165e:	492c      	ldr	r1, [pc, #176]	@ (8001710 <main+0x30c>)
 8001660:	482c      	ldr	r0, [pc, #176]	@ (8001714 <main+0x310>)
 8001662:	f007 fd9f 	bl	80091a4 <xTaskCreate>
 8001666:	4603      	mov	r3, r0
 8001668:	4a2b      	ldr	r2, [pc, #172]	@ (8001718 <main+0x314>)
 800166a:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <main+0x314>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d00b      	beq.n	800168c <main+0x288>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <main+0x284>

   status = xTaskCreate(task1_handler, "Led_blink", 200, NULL, 1, &task1_handle);
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <main+0x318>)
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2301      	movs	r3, #1
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	22c8      	movs	r2, #200	@ 0xc8
 8001698:	4921      	ldr	r1, [pc, #132]	@ (8001720 <main+0x31c>)
 800169a:	4822      	ldr	r0, [pc, #136]	@ (8001724 <main+0x320>)
 800169c:	f007 fd82 	bl	80091a4 <xTaskCreate>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001718 <main+0x314>)
 80016a4:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <main+0x314>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d03c      	beq.n	8001728 <main+0x324>
        __asm volatile
 80016ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016b2:	f383 8811 	msr	BASEPRI, r3
 80016b6:	f3bf 8f6f 	isb	sy
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	61bb      	str	r3, [r7, #24]
    }
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	e7fd      	b.n	80016c2 <main+0x2be>
 80016c6:	bf00      	nop
 80016c8:	0800e088 	.word	0x0800e088
 80016cc:	e0001000 	.word	0xe0001000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020000 	.word	0x40020000
 80016d8:	08002061 	.word	0x08002061
 80016dc:	08002049 	.word	0x08002049
 80016e0:	08002079 	.word	0x08002079
 80016e4:	08002093 	.word	0x08002093
 80016e8:	20000000 	.word	0x20000000
 80016ec:	0800dfc0 	.word	0x0800dfc0
 80016f0:	20000364 	.word	0x20000364
 80016f4:	0800dfdc 	.word	0x0800dfdc
 80016f8:	2000012c 	.word	0x2000012c
 80016fc:	0800e000 	.word	0x0800e000
 8001700:	0800e020 	.word	0x0800e020
 8001704:	0800e040 	.word	0x0800e040
 8001708:	200002d4 	.word	0x200002d4
 800170c:	2000052c 	.word	0x2000052c
 8001710:	0800e060 	.word	0x0800e060
 8001714:	08001b75 	.word	0x08001b75
 8001718:	20000538 	.word	0x20000538
 800171c:	20000530 	.word	0x20000530
 8001720:	0800e06c 	.word	0x0800e06c
 8001724:	08001d51 	.word	0x08001d51

   status = xTaskCreate(readVoltage_task, "read_voltage", 200, NULL, 2, &readVoltage_handle);
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <main+0x368>)
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2302      	movs	r3, #2
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	22c8      	movs	r2, #200	@ 0xc8
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <main+0x36c>)
 8001736:	480f      	ldr	r0, [pc, #60]	@ (8001774 <main+0x370>)
 8001738:	f007 fd34 	bl	80091a4 <xTaskCreate>
 800173c:	4603      	mov	r3, r0
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <main+0x374>)
 8001740:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8001742:	4b0d      	ldr	r3, [pc, #52]	@ (8001778 <main+0x374>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d00b      	beq.n	8001762 <main+0x35e>
        __asm volatile
 800174a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800174e:	f383 8811 	msr	BASEPRI, r3
 8001752:	f3bf 8f6f 	isb	sy
 8001756:	f3bf 8f4f 	dsb	sy
 800175a:	617b      	str	r3, [r7, #20]
    }
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	e7fd      	b.n	800175e <main+0x35a>

  vTaskStartScheduler();
 8001762:	f007 febd 	bl	80094e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001766:	bf00      	nop
 8001768:	e7fd      	b.n	8001766 <main+0x362>
 800176a:	bf00      	nop
 800176c:	20000534 	.word	0x20000534
 8001770:	0800e078 	.word	0x0800e078
 8001774:	08001d85 	.word	0x08001d85
 8001778:	20000538 	.word	0x20000538

0800177c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	@ 0x50
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2234      	movs	r2, #52	@ 0x34
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f00b fcae 	bl	800d0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001790:	f107 0308 	add.w	r3, r7, #8
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	4b29      	ldr	r3, [pc, #164]	@ (800184c <SystemClock_Config+0xd0>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	4a28      	ldr	r2, [pc, #160]	@ (800184c <SystemClock_Config+0xd0>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b0:	4b26      	ldr	r3, [pc, #152]	@ (800184c <SystemClock_Config+0xd0>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	2300      	movs	r3, #0
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <SystemClock_Config+0xd4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a22      	ldr	r2, [pc, #136]	@ (8001850 <SystemClock_Config+0xd4>)
 80017c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <SystemClock_Config+0xd4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d8:	2301      	movs	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ec:	2308      	movs	r3, #8
 80017ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017f0:	23a8      	movs	r3, #168	@ 0xa8
 80017f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4618      	mov	r0, r3
 8001806:	f005 f995 	bl	8006b34 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001810:	f000 fcdc 	bl	80021cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001814:	230f      	movs	r3, #15
 8001816:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001818:	2302      	movs	r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001820:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001824:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2105      	movs	r1, #5
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fe04 	bl	8006440 <HAL_RCC_ClockConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800183e:	f000 fcc5 	bl	80021cc <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3750      	adds	r7, #80	@ 0x50
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800185a:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <MX_I2C1_Init+0x54>)
 800185c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001860:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <MX_I2C1_Init+0x58>)
 8001862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001872:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <MX_I2C1_Init+0x50>)
 8001892:	f003 fdb1 	bl	80053f8 <HAL_I2C_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800189c:	f000 fc96 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000168 	.word	0x20000168
 80018a8:	40005400 	.word	0x40005400
 80018ac:	000186a0 	.word	0x000186a0

080018b0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018b6:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <MX_SPI1_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_SPI1_Init+0x64>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <MX_SPI1_Init+0x64>)
 8001902:	f005 fbb5 	bl	8007070 <HAL_SPI_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800190c:	f000 fc5e 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000027c 	.word	0x2000027c
 8001918:	40013000 	.word	0x40013000

0800191c <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_TIM10_Init+0x40>)
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <MX_TIM10_Init+0x44>)
 8001924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001926:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <MX_TIM10_Init+0x40>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <MX_TIM10_Init+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_TIM10_Init+0x40>)
 8001934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001938:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <MX_TIM10_Init+0x40>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_TIM10_Init+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_TIM10_Init+0x40>)
 8001948:	f005 fea8 	bl	800769c <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001952:	f000 fc3b 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002d4 	.word	0x200002d4
 8001960:	40014400 	.word	0x40014400

08001964 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <MX_USART1_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_USART1_UART_Init+0x4c>)
 800199c:	f006 f97e 	bl	8007c9c <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f000 fc11 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000031c 	.word	0x2000031c
 80019b4:	40011000 	.word	0x40011000

080019b8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <MX_USART2_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019c2:	4b10      	ldr	r3, [pc, #64]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_USART2_UART_Init+0x4c>)
 80019f0:	f006 f9a4 	bl	8007d3c <HAL_HalfDuplex_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019fa:	f000 fbe7 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000364 	.word	0x20000364
 8001a08:	40004400 	.word	0x40004400

08001a0c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <MX_DMA_Init+0x4c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <MX_DMA_Init+0x4c>)
 8001a1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <MX_DMA_Init+0x4c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	200b      	movs	r0, #11
 8001a34:	f003 f804 	bl	8004a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a38:	200b      	movs	r0, #11
 8001a3a:	f003 f81d 	bl	8004a78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2011      	movs	r0, #17
 8001a44:	f002 fffc 	bl	8004a40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a48:	2011      	movs	r0, #17
 8001a4a:	f003 f815 	bl	8004a78 <HAL_NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a33      	ldr	r2, [pc, #204]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a25      	ldr	r2, [pc, #148]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <MX_GPIO_Init+0x108>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin | GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2118      	movs	r1, #24
 8001ae6:	4820      	ldr	r0, [pc, #128]	@ (8001b68 <MX_GPIO_Init+0x10c>)
 8001ae8:	f003 fc52 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | SPI_INT_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f248 0103 	movw	r1, #32771	@ 0x8003
 8001af2:	481e      	ldr	r0, [pc, #120]	@ (8001b6c <MX_GPIO_Init+0x110>)
 8001af4:	f003 fc4c 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001afe:	481c      	ldr	r0, [pc, #112]	@ (8001b70 <MX_GPIO_Init+0x114>)
 8001b00:	f003 fc46 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin | GPIO_W5500_CS_Pin;
 8001b04:	2318      	movs	r3, #24
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4813      	ldr	r0, [pc, #76]	@ (8001b68 <MX_GPIO_Init+0x10c>)
 8001b1c:	f003 faa4 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | SPI_INT_Pin;
 8001b20:	f248 0303 	movw	r3, #32771	@ 0x8003
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <MX_GPIO_Init+0x110>)
 8001b3a:	f003 fa95 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001b3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	@ (8001b70 <MX_GPIO_Init+0x114>)
 8001b58:	f003 fa86 	bl	8005068 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800

08001b74 <modbus_comm_task>:

/* USER CODE BEGIN 4 */

static void modbus_comm_task(void *parameters)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  PRINT_STR("MODBUS WHILE LOOP\r\n");
 8001b7c:	2364      	movs	r3, #100	@ 0x64
 8001b7e:	2213      	movs	r2, #19
 8001b80:	495c      	ldr	r1, [pc, #368]	@ (8001cf4 <modbus_comm_task+0x180>)
 8001b82:	485d      	ldr	r0, [pc, #372]	@ (8001cf8 <modbus_comm_task+0x184>)
 8001b84:	f006 f932 	bl	8007dec <HAL_UART_Transmit>

  while (1)
  {
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	485c      	ldr	r0, [pc, #368]	@ (8001cfc <modbus_comm_task+0x188>)
 8001b8c:	f003 fc19 	bl	80053c2 <HAL_GPIO_TogglePin>
    printf("\r\nInitializing server socket\r\n");
 8001b90:	485b      	ldr	r0, [pc, #364]	@ (8001d00 <modbus_comm_task+0x18c>)
 8001b92:	f00b f99b 	bl	800cecc <puts>
    vTaskDelay(pdMS_TO_TICKS(100));
 8001b96:	2064      	movs	r0, #100	@ 0x64
 8001b98:	f007 fc68 	bl	800946c <vTaskDelay>
    // Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
    // Return value is socket ID on success
    if (socket(1, Sn_MR_TCP, LISTEN_PORT, 0) != 1)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f001 fbc9 	bl	800333c <socket>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d006      	beq.n	8001bbe <modbus_comm_task+0x4a>
    {
      // error
      printf("Cannot create Socket!\r\n");
 8001bb0:	4854      	ldr	r0, [pc, #336]	@ (8001d04 <modbus_comm_task+0x190>)
 8001bb2:	f00b f98b 	bl	800cecc <puts>
      vTaskDelay(pdMS_TO_TICKS(200)); // Delay before retrying
 8001bb6:	20c8      	movs	r0, #200	@ 0xc8
 8001bb8:	f007 fc58 	bl	800946c <vTaskDelay>
      continue;                       // Retry initialization
 8001bbc:	e099      	b.n	8001cf2 <modbus_comm_task+0x17e>
    }

    // success
    printf("Socket Created Successfully ! \r\n");
 8001bbe:	4852      	ldr	r0, [pc, #328]	@ (8001d08 <modbus_comm_task+0x194>)
 8001bc0:	f00b f984 	bl	800cecc <puts>

    uint8_t socket_io_mode = SOCK_IO_BLOCK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	72fb      	strb	r3, [r7, #11]
    ctlsocket(1, CS_SET_IOMODE, &socket_io_mode); // set blocking IO mode
 8001bc8:	f107 030b 	add.w	r3, r7, #11
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f001 ffb1 	bl	8003b38 <ctlsocket>

    printf("Start listening on port %d ! \r\n", LISTEN_PORT);
 8001bd6:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8001bda:	484c      	ldr	r0, [pc, #304]	@ (8001d0c <modbus_comm_task+0x198>)
 8001bdc:	f00b f90e 	bl	800cdfc <iprintf>
    printf("Waiting for a client connection. \r\n");
 8001be0:	484b      	ldr	r0, [pc, #300]	@ (8001d10 <modbus_comm_task+0x19c>)
 8001be2:	f00b f973 	bl	800cecc <puts>

    // Make it a passive socket (i.e. listen for connection)
    if (listen(1) != SOCK_OK) // our socket id is 1 (w5500 have 8 sockets from 0-7)
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 fd2a 	bl	8003640 <listen>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d009      	beq.n	8001c06 <modbus_comm_task+0x92>
    {
      // error
      printf("Cannot listen on port %d", LISTEN_PORT);
 8001bf2:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8001bf6:	4847      	ldr	r0, [pc, #284]	@ (8001d14 <modbus_comm_task+0x1a0>)
 8001bf8:	f00b f900 	bl	800cdfc <iprintf>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 8001bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c00:	f007 fc34 	bl	800946c <vTaskDelay>
      continue;                        // Retry initialization
 8001c04:	e075      	b.n	8001cf2 <modbus_comm_task+0x17e>
    }

    uint8_t sr = 0x00;                                               // socket status register
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    TickType_t xTimeOut = xTaskGetTickCount() + pdMS_TO_TICKS(5000); // 5-second timeout
 8001c0a:	f007 fd7b 	bl	8009704 <xTaskGetTickCount>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001c14:	3308      	adds	r3, #8
 8001c16:	613b      	str	r3, [r7, #16]

    // Wait for a client connection with timeout
    do
    {
      sr = getSn_SR(1);               // read status reg (SR of socket 1)
 8001c18:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8001c1c:	f001 f8ee 	bl	8002dfc <WIZCHIP_READ>
 8001c20:	4603      	mov	r3, r0
 8001c22:	75fb      	strb	r3, [r7, #23]
      vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 8001c24:	2064      	movs	r0, #100	@ 0x64
 8001c26:	f007 fc21 	bl	800946c <vTaskDelay>
    } while (sr != 0x17 && sr != 0x00 && xTaskGetTickCount() < xTimeOut);
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	2b17      	cmp	r3, #23
 8001c2e:	d008      	beq.n	8001c42 <modbus_comm_task+0xce>
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <modbus_comm_task+0xce>
 8001c36:	f007 fd65 	bl	8009704 <xTaskGetTickCount>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d8ea      	bhi.n	8001c18 <modbus_comm_task+0xa4>

    if (sr == 0x00)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <modbus_comm_task+0xe4>
    {
      printf("Some error occurred on server socket. Retrying...\r\n");
 8001c48:	4833      	ldr	r0, [pc, #204]	@ (8001d18 <modbus_comm_task+0x1a4>)
 8001c4a:	f00b f93f 	bl	800cecc <puts>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 8001c4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c52:	f007 fc0b 	bl	800946c <vTaskDelay>
      continue;                        // Retry initialization
 8001c56:	e04c      	b.n	8001cf2 <modbus_comm_task+0x17e>
    }

    if (sr == 0x17)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b17      	cmp	r3, #23
 8001c5c:	d194      	bne.n	8001b88 <modbus_comm_task+0x14>
    {
      // we come here only when a client has connected.
      // Now we can read data from the socket
      printf("A client connected!\r\n");
 8001c5e:	482f      	ldr	r0, [pc, #188]	@ (8001d1c <modbus_comm_task+0x1a8>)
 8001c60:	f00b f934 	bl	800cecc <puts>
      printf("Waiting for Client Data ...!\r\n");
 8001c64:	482e      	ldr	r0, [pc, #184]	@ (8001d20 <modbus_comm_task+0x1ac>)
 8001c66:	f00b f931 	bl	800cecc <puts>

      while (1)
      {
        int len = recv(1, RX_buffer, RX_buffer_length);
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	492d      	ldr	r1, [pc, #180]	@ (8001d24 <modbus_comm_task+0x1b0>)
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f001 feae 	bl	80039d0 <recv>
 8001c74:	60f8      	str	r0, [r7, #12]
        if (len == SOCKERR_SOCKSTATUS)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f113 0f07 	cmn.w	r3, #7
 8001c7c:	d106      	bne.n	8001c8c <modbus_comm_task+0x118>
        {
          // client has disconnected
          printf("Client has disconnected\r\n");
 8001c7e:	482a      	ldr	r0, [pc, #168]	@ (8001d28 <modbus_comm_task+0x1b4>)
 8001c80:	f00b f924 	bl	800cecc <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8001c84:	4829      	ldr	r0, [pc, #164]	@ (8001d2c <modbus_comm_task+0x1b8>)
 8001c86:	f00b f921 	bl	800cecc <puts>
          break; // Exit client communication loop
 8001c8a:	e032      	b.n	8001cf2 <modbus_comm_task+0x17e>
        }

        RX_buffer[len] = '\0';
 8001c8c:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <modbus_comm_task+0x1b0>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
        printf("Received %d bytes from client\r\n", len);
 8001c96:	68f9      	ldr	r1, [r7, #12]
 8001c98:	4825      	ldr	r0, [pc, #148]	@ (8001d30 <modbus_comm_task+0x1bc>)
 8001c9a:	f00b f8af 	bl	800cdfc <iprintf>
        printf("Data Received: %s", RX_buffer);
 8001c9e:	4921      	ldr	r1, [pc, #132]	@ (8001d24 <modbus_comm_task+0x1b0>)
 8001ca0:	4824      	ldr	r0, [pc, #144]	@ (8001d34 <modbus_comm_task+0x1c0>)
 8001ca2:	f00b f8ab 	bl	800cdfc <iprintf>

        memset(TX_buffer, 0, sizeof(TX_buffer));
 8001ca6:	2280      	movs	r2, #128	@ 0x80
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4823      	ldr	r0, [pc, #140]	@ (8001d38 <modbus_comm_task+0x1c4>)
 8001cac:	f00b fa1e 	bl	800d0ec <memset>
        modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <modbus_comm_task+0x1c8>)
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4920      	ldr	r1, [pc, #128]	@ (8001d38 <modbus_comm_task+0x1c4>)
 8001cb6:	481b      	ldr	r0, [pc, #108]	@ (8001d24 <modbus_comm_task+0x1b0>)
 8001cb8:	f000 fac0 	bl	800223c <modbus_receive>
        // holding_register[3] = holding_register[3] + 1;

        printf("\r\nECHO sent back to client\r\n");
 8001cbc:	4820      	ldr	r0, [pc, #128]	@ (8001d40 <modbus_comm_task+0x1cc>)
 8001cbe:	f00b f905 	bl	800cecc <puts>

        // Look for quit message and quit if received
        if (strcmp((char *)RX_buffer, "QUIT") == 0)
 8001cc2:	4920      	ldr	r1, [pc, #128]	@ (8001d44 <modbus_comm_task+0x1d0>)
 8001cc4:	4817      	ldr	r0, [pc, #92]	@ (8001d24 <modbus_comm_task+0x1b0>)
 8001cc6:	f7fe faed 	bl	80002a4 <strcmp>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10c      	bne.n	8001cea <modbus_comm_task+0x176>
        {
          printf("Received QUIT command from client\r\n");
 8001cd0:	481d      	ldr	r0, [pc, #116]	@ (8001d48 <modbus_comm_task+0x1d4>)
 8001cd2:	f00b f8fb 	bl	800cecc <puts>
          printf("Disconnecting ... \r\n");
 8001cd6:	481d      	ldr	r0, [pc, #116]	@ (8001d4c <modbus_comm_task+0x1d8>)
 8001cd8:	f00b f8f8 	bl	800cecc <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8001cdc:	4813      	ldr	r0, [pc, #76]	@ (8001d2c <modbus_comm_task+0x1b8>)
 8001cde:	f00b f8f5 	bl	800cecc <puts>
          disconnect(1); // disconnect from the client
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f001 fd06 	bl	80036f4 <disconnect>
          break;         // Exit client communication loop
 8001ce8:	e003      	b.n	8001cf2 <modbus_comm_task+0x17e>
        }

        vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 8001cea:	2064      	movs	r0, #100	@ 0x64
 8001cec:	f007 fbbe 	bl	800946c <vTaskDelay>
      {
 8001cf0:	e7bb      	b.n	8001c6a <modbus_comm_task+0xf6>
  {
 8001cf2:	e749      	b.n	8001b88 <modbus_comm_task+0x14>
 8001cf4:	0800e098 	.word	0x0800e098
 8001cf8:	20000364 	.word	0x20000364
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	0800e0ac 	.word	0x0800e0ac
 8001d04:	0800e0cc 	.word	0x0800e0cc
 8001d08:	0800e0e4 	.word	0x0800e0e4
 8001d0c:	0800e104 	.word	0x0800e104
 8001d10:	0800e124 	.word	0x0800e124
 8001d14:	0800e148 	.word	0x0800e148
 8001d18:	0800e164 	.word	0x0800e164
 8001d1c:	0800e198 	.word	0x0800e198
 8001d20:	0800e1b0 	.word	0x0800e1b0
 8001d24:	2000042c 	.word	0x2000042c
 8001d28:	0800e1d0 	.word	0x0800e1d0
 8001d2c:	0800e1ec 	.word	0x0800e1ec
 8001d30:	0800e204 	.word	0x0800e204
 8001d34:	0800e224 	.word	0x0800e224
 8001d38:	200003ac 	.word	0x200003ac
 8001d3c:	200004ac 	.word	0x200004ac
 8001d40:	0800e238 	.word	0x0800e238
 8001d44:	0800e254 	.word	0x0800e254
 8001d48:	0800e25c 	.word	0x0800e25c
 8001d4c:	0800e280 	.word	0x0800e280

08001d50 <task1_handler>:
    } // if block, client connect success
  } // outer while loop
}

static void task1_handler(void *parameters)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  while (1)
  {
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 8001d58:	2364      	movs	r3, #100	@ 0x64
 8001d5a:	2212      	movs	r2, #18
 8001d5c:	4906      	ldr	r1, [pc, #24]	@ (8001d78 <task1_handler+0x28>)
 8001d5e:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <task1_handler+0x2c>)
 8001d60:	f006 f844 	bl	8007dec <HAL_UART_Transmit>

    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8001d64:	2102      	movs	r1, #2
 8001d66:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <task1_handler+0x30>)
 8001d68:	f003 fb2b 	bl	80053c2 <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(100));
 8001d6c:	2064      	movs	r0, #100	@ 0x64
 8001d6e:	f007 fb7d 	bl	800946c <vTaskDelay>
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 8001d72:	bf00      	nop
 8001d74:	e7f0      	b.n	8001d58 <task1_handler+0x8>
 8001d76:	bf00      	nop
 8001d78:	0800e294 	.word	0x0800e294
 8001d7c:	20000364 	.word	0x20000364
 8001d80:	40020400 	.word	0x40020400

08001d84 <readVoltage_task>:
    // taskYIELD();
  }
}

static void readVoltage_task(void *parameters)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  while (1)
  {
	int size = sizeof(ocv_simple) / sizeof(ocv_simple[0]);
 8001d8c:	230b      	movs	r3, #11
 8001d8e:	60fb      	str	r3, [r7, #12]

	BQ769x2_ReadAllVoltages();
 8001d90:	f7ff fa60 	bl	8001254 <BQ769x2_ReadAllVoltages>
	BQ769x2_ReadPassQ();
 8001d94:	f7ff faf2 	bl	800137c <BQ769x2_ReadPassQ>
	Pack_Current = BQ769x2_ReadCurrent();
 8001d98:	f7ff fa9a 	bl	80012d0 <BQ769x2_ReadCurrent>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b96      	ldr	r3, [pc, #600]	@ (8001ffc <readVoltage_task+0x278>)
 8001da2:	801a      	strh	r2, [r3, #0]
	Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 8001da4:	2070      	movs	r0, #112	@ 0x70
 8001da6:	f7ff faa7 	bl	80012f8 <BQ769x2_ReadTemperature>
 8001daa:	eef0 7a40 	vmov.f32	s15, s0
 8001dae:	4b94      	ldr	r3, [pc, #592]	@ (8002000 <readVoltage_task+0x27c>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
	Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 8001db4:	2074      	movs	r0, #116	@ 0x74
 8001db6:	f7ff fa9f 	bl	80012f8 <BQ769x2_ReadTemperature>
 8001dba:	eef0 7a40 	vmov.f32	s15, s0
 8001dbe:	4b90      	ldr	r3, [pc, #576]	@ (8002000 <readVoltage_task+0x27c>)
 8001dc0:	edc3 7a01 	vstr	s15, [r3, #4]

	holding_register[0] = (uint16_t)roundf(interpolate(ocv_simple, soc_simple, size, ((CellVoltage[0]))/1000.0f));
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a8f      	ldr	r2, [pc, #572]	@ (8002004 <readVoltage_task+0x280>)
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	ee07 2a90 	vmov	s15, r2
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002008 <readVoltage_task+0x284>
 8001dd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dda:	eeb0 0a47 	vmov.f32	s0, s14
 8001dde:	461a      	mov	r2, r3
 8001de0:	498a      	ldr	r1, [pc, #552]	@ (800200c <readVoltage_task+0x288>)
 8001de2:	488b      	ldr	r0, [pc, #556]	@ (8002010 <readVoltage_task+0x28c>)
 8001de4:	f000 fe7c 	bl	8002ae0 <interpolate>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	eeb0 0a67 	vmov.f32	s0, s15
 8001df0:	f00c f89e 	bl	800df30 <roundf>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dfc:	ee17 3a90 	vmov	r3, s15
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b84      	ldr	r3, [pc, #528]	@ (8002014 <readVoltage_task+0x290>)
 8001e04:	801a      	strh	r2, [r3, #0]
	holding_register[1] = (uint16_t)roundf(interpolate_SOC(ocv_simple, soc_simple, size, ((CellVoltage[1]))/1000.0f));
 8001e06:	4b7f      	ldr	r3, [pc, #508]	@ (8002004 <readVoltage_task+0x280>)
 8001e08:	885b      	ldrh	r3, [r3, #2]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002008 <readVoltage_task+0x284>
 8001e16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	497a      	ldr	r1, [pc, #488]	@ (800200c <readVoltage_task+0x288>)
 8001e22:	487b      	ldr	r0, [pc, #492]	@ (8002010 <readVoltage_task+0x28c>)
 8001e24:	f000 ff52 	bl	8002ccc <interpolate_SOC>
 8001e28:	eef0 7a40 	vmov.f32	s15, s0
 8001e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e30:	f00c f87e 	bl	800df30 <roundf>
 8001e34:	eef0 7a40 	vmov.f32	s15, s0
 8001e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3c:	ee17 3a90 	vmov	r3, s15
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b74      	ldr	r3, [pc, #464]	@ (8002014 <readVoltage_task+0x290>)
 8001e44:	805a      	strh	r2, [r3, #2]
	holding_register[2] = (uint16_t)roundf(interpolate_SOC(ocv_simple, soc_simple, size, ((CellVoltage[2]))/1000.0f));
 8001e46:	4b6f      	ldr	r3, [pc, #444]	@ (8002004 <readVoltage_task+0x280>)
 8001e48:	889b      	ldrh	r3, [r3, #4]
 8001e4a:	ee07 3a90 	vmov	s15, r3
 8001e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e52:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002008 <readVoltage_task+0x284>
 8001e56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	496a      	ldr	r1, [pc, #424]	@ (800200c <readVoltage_task+0x288>)
 8001e62:	486b      	ldr	r0, [pc, #428]	@ (8002010 <readVoltage_task+0x28c>)
 8001e64:	f000 ff32 	bl	8002ccc <interpolate_SOC>
 8001e68:	eef0 7a40 	vmov.f32	s15, s0
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f00c f85e 	bl	800df30 <roundf>
 8001e74:	eef0 7a40 	vmov.f32	s15, s0
 8001e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7c:	ee17 3a90 	vmov	r3, s15
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b64      	ldr	r3, [pc, #400]	@ (8002014 <readVoltage_task+0x290>)
 8001e84:	809a      	strh	r2, [r3, #4]
	holding_register[3] = (uint16_t)roundf(interpolate_SOC(ocv_simple, soc_simple, size, ((CellVoltage[3]))/1000.0f));
 8001e86:	4b5f      	ldr	r3, [pc, #380]	@ (8002004 <readVoltage_task+0x280>)
 8001e88:	88db      	ldrh	r3, [r3, #6]
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e92:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002008 <readVoltage_task+0x284>
 8001e96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e9a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	495a      	ldr	r1, [pc, #360]	@ (800200c <readVoltage_task+0x288>)
 8001ea2:	485b      	ldr	r0, [pc, #364]	@ (8002010 <readVoltage_task+0x28c>)
 8001ea4:	f000 ff12 	bl	8002ccc <interpolate_SOC>
 8001ea8:	eef0 7a40 	vmov.f32	s15, s0
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	f00c f83e 	bl	800df30 <roundf>
 8001eb4:	eef0 7a40 	vmov.f32	s15, s0
 8001eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebc:	ee17 3a90 	vmov	r3, s15
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	4b54      	ldr	r3, [pc, #336]	@ (8002014 <readVoltage_task+0x290>)
 8001ec4:	80da      	strh	r2, [r3, #6]
	holding_register[4] = (uint16_t)roundf(interpolate_SOC(ocv_simple, soc_simple, size, ((CellVoltage[4]))/1000.0f));
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8002004 <readVoltage_task+0x280>)
 8001ec8:	891b      	ldrh	r3, [r3, #8]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002008 <readVoltage_task+0x284>
 8001ed6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001eda:	eeb0 0a47 	vmov.f32	s0, s14
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	494a      	ldr	r1, [pc, #296]	@ (800200c <readVoltage_task+0x288>)
 8001ee2:	484b      	ldr	r0, [pc, #300]	@ (8002010 <readVoltage_task+0x28c>)
 8001ee4:	f000 fef2 	bl	8002ccc <interpolate_SOC>
 8001ee8:	eef0 7a40 	vmov.f32	s15, s0
 8001eec:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef0:	f00c f81e 	bl	800df30 <roundf>
 8001ef4:	eef0 7a40 	vmov.f32	s15, s0
 8001ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efc:	ee17 3a90 	vmov	r3, s15
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	4b44      	ldr	r3, [pc, #272]	@ (8002014 <readVoltage_task+0x290>)
 8001f04:	811a      	strh	r2, [r3, #8]
	holding_register[5] = (uint16_t)roundf(interpolate_SOC(ocv_simple, soc_simple, size, ((CellVoltage[15]))/1000.0f));
 8001f06:	4b3f      	ldr	r3, [pc, #252]	@ (8002004 <readVoltage_task+0x280>)
 8001f08:	8bdb      	ldrh	r3, [r3, #30]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002008 <readVoltage_task+0x284>
 8001f16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	493a      	ldr	r1, [pc, #232]	@ (800200c <readVoltage_task+0x288>)
 8001f22:	483b      	ldr	r0, [pc, #236]	@ (8002010 <readVoltage_task+0x28c>)
 8001f24:	f000 fed2 	bl	8002ccc <interpolate_SOC>
 8001f28:	eef0 7a40 	vmov.f32	s15, s0
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	f00b fffe 	bl	800df30 <roundf>
 8001f34:	eef0 7a40 	vmov.f32	s15, s0
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <readVoltage_task+0x290>)
 8001f44:	815a      	strh	r2, [r3, #10]


	holding_register[6] = (CellVoltage[0]);
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <readVoltage_task+0x280>)
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <readVoltage_task+0x290>)
 8001f4c:	819a      	strh	r2, [r3, #12]
	holding_register[7] = (CellVoltage[1]);
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <readVoltage_task+0x280>)
 8001f50:	885a      	ldrh	r2, [r3, #2]
 8001f52:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <readVoltage_task+0x290>)
 8001f54:	81da      	strh	r2, [r3, #14]
	holding_register[8] = (CellVoltage[2]);
 8001f56:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <readVoltage_task+0x280>)
 8001f58:	889a      	ldrh	r2, [r3, #4]
 8001f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002014 <readVoltage_task+0x290>)
 8001f5c:	821a      	strh	r2, [r3, #16]
	holding_register[9] = (CellVoltage[3]);
 8001f5e:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <readVoltage_task+0x280>)
 8001f60:	88da      	ldrh	r2, [r3, #6]
 8001f62:	4b2c      	ldr	r3, [pc, #176]	@ (8002014 <readVoltage_task+0x290>)
 8001f64:	825a      	strh	r2, [r3, #18]
	holding_register[10] = (CellVoltage[4]);
 8001f66:	4b27      	ldr	r3, [pc, #156]	@ (8002004 <readVoltage_task+0x280>)
 8001f68:	891a      	ldrh	r2, [r3, #8]
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <readVoltage_task+0x290>)
 8001f6c:	829a      	strh	r2, [r3, #20]
	holding_register[11] = (CellVoltage[15]);
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <readVoltage_task+0x280>)
 8001f70:	8bda      	ldrh	r2, [r3, #30]
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <readVoltage_task+0x290>)
 8001f74:	82da      	strh	r2, [r3, #22]

	//    holding_register[2] = CellVoltage[2];
	//    holding_register[3] = CellVoltage[3];
	//    holding_register[4] = CellVoltage[4];
	//holding_register[5] = CellVoltage[15];
	holding_register[12] = (CellVoltage[5]);
 8001f76:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <readVoltage_task+0x280>)
 8001f78:	895a      	ldrh	r2, [r3, #10]
 8001f7a:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <readVoltage_task+0x290>)
 8001f7c:	831a      	strh	r2, [r3, #24]
	holding_register[13] = (CellVoltage[6]);
 8001f7e:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <readVoltage_task+0x280>)
 8001f80:	899a      	ldrh	r2, [r3, #12]
 8001f82:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <readVoltage_task+0x290>)
 8001f84:	835a      	strh	r2, [r3, #26]
	holding_register[14] = (CellVoltage[7]);
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <readVoltage_task+0x280>)
 8001f88:	89da      	ldrh	r2, [r3, #14]
 8001f8a:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <readVoltage_task+0x290>)
 8001f8c:	839a      	strh	r2, [r3, #28]

	holding_register[15] = BQ769x2_ReadVoltage(StackVoltage);
 8001f8e:	2034      	movs	r0, #52	@ 0x34
 8001f90:	f7ff f934 	bl	80011fc <BQ769x2_ReadVoltage>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <readVoltage_task+0x290>)
 8001f9a:	83da      	strh	r2, [r3, #30]
	holding_register[16] = BQ769x2_ReadCurrent();
 8001f9c:	f7ff f998 	bl	80012d0 <BQ769x2_ReadCurrent>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <readVoltage_task+0x290>)
 8001fa6:	841a      	strh	r2, [r3, #32]
	holding_register[17] = BQ769x2_ReadVoltage(PACKPinVoltage);
 8001fa8:	2036      	movs	r0, #54	@ 0x36
 8001faa:	f7ff f927 	bl	80011fc <BQ769x2_ReadVoltage>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <readVoltage_task+0x290>)
 8001fb4:	845a      	strh	r2, [r3, #34]	@ 0x22

    // HAL_Delay(5000);
    uint16_t alarm;
    alarm = BQ769x2_ReadAlarmStatus();
 8001fb6:	f7ff f90d 	bl	80011d4 <BQ769x2_ReadAlarmStatus>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	817b      	strh	r3, [r7, #10]
    AlarmBits = BQ769x2_ReadAlarmStatus();
 8001fbe:	f7ff f909 	bl	80011d4 <BQ769x2_ReadAlarmStatus>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <readVoltage_task+0x294>)
 8001fc8:	801a      	strh	r2, [r3, #0]
    if (AlarmBits & 0x80)
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <readVoltage_task+0x294>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <readVoltage_task+0x26c>
    { // Check if FULLSCAN is complete. If set, new measurements are available
      BQ769x2_ReadAllVoltages();
 8001fd6:	f7ff f93d 	bl	8001254 <BQ769x2_ReadAllVoltages>
      Pack_Current = BQ769x2_ReadCurrent();
 8001fda:	f7ff f979 	bl	80012d0 <BQ769x2_ReadCurrent>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <readVoltage_task+0x278>)
 8001fe4:	801a      	strh	r2, [r3, #0]
      // Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
      // Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
      DirectCommands(AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	2062      	movs	r0, #98	@ 0x62
 8001fec:	f7ff f856 	bl	800109c <DirectCommands>
    }
    else
    {
    }

    vTaskDelay(pdMS_TO_TICKS(500));
 8001ff0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ff4:	f007 fa3a 	bl	800946c <vTaskDelay>
  {
 8001ff8:	e6c8      	b.n	8001d8c <readVoltage_task+0x8>
 8001ffa:	bf00      	nop
 8001ffc:	20000592 	.word	0x20000592
 8002000:	20000580 	.word	0x20000580
 8002004:	20000560 	.word	0x20000560
 8002008:	447a0000 	.word	0x447a0000
 800200c:	20000044 	.word	0x20000044
 8002010:	20000018 	.word	0x20000018
 8002014:	200004ac 	.word	0x200004ac
 8002018:	20000594 	.word	0x20000594

0800201c <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 8002026:	f107 020f 	add.w	r2, r7, #15
 800202a:	1df9      	adds	r1, r7, #7
 800202c:	2332      	movs	r3, #50	@ 0x32
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2301      	movs	r3, #1
 8002032:	4804      	ldr	r0, [pc, #16]	@ (8002044 <W5500_rxtx+0x28>)
 8002034:	f005 f8a5 	bl	8007182 <HAL_SPI_TransmitReceive>

  return (rxdata);
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000027c 	.word	0x2000027c

08002048 <wizchip_select>:

void wizchip_select(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  W5500_select();
 800204c:	2200      	movs	r2, #0
 800204e:	2110      	movs	r1, #16
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <wizchip_select+0x14>)
 8002052:	f003 f99d 	bl	8005390 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40020000 	.word	0x40020000

08002060 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  W5500_release();
 8002064:	2201      	movs	r2, #1
 8002066:	2110      	movs	r1, #16
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <wizchip_deselect+0x14>)
 800206a:	f003 f991 	bl	8005390 <HAL_GPIO_WritePin>
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40020000 	.word	0x40020000

08002078 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ffc9 	bl	800201c <W5500_rxtx>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <wizchip_read>:

uint8_t wizchip_read()
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
  return W5500_rx();
 8002096:	20ff      	movs	r0, #255	@ 0xff
 8002098:	f7ff ffc0 	bl	800201c <W5500_rxtx>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80020aa:	4906      	ldr	r1, [pc, #24]	@ (80020c4 <network_init+0x20>)
 80020ac:	2000      	movs	r0, #0
 80020ae:	f001 ff99 	bl	8003fe4 <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 80020b2:	463b      	mov	r3, r7
 80020b4:	4619      	mov	r1, r3
 80020b6:	2008      	movs	r0, #8
 80020b8:	f001 feb4 	bl	8003e24 <ctlwizchip>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000000 	.word	0x20000000

080020c8 <PHYStatusCheck>:
  UWriteData(ch);
  return ch;
}

void PHYStatusCheck(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 80020ce:	4810      	ldr	r0, [pc, #64]	@ (8002110 <PHYStatusCheck+0x48>)
 80020d0:	f00a fe94 	bl	800cdfc <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	4619      	mov	r1, r3
 80020d8:	200f      	movs	r0, #15
 80020da:	f001 fea3 	bl	8003e24 <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <PHYStatusCheck+0x34>
    {
      printf("NO Cable Connected!");
 80020e4:	480b      	ldr	r0, [pc, #44]	@ (8002114 <PHYStatusCheck+0x4c>)
 80020e6:	f00a fe89 	bl	800cdfc <iprintf>

      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2102      	movs	r1, #2
 80020ee:	480a      	ldr	r0, [pc, #40]	@ (8002118 <PHYStatusCheck+0x50>)
 80020f0:	f003 f94e 	bl	8005390 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80020f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020f8:	f002 fbc6 	bl	8004888 <HAL_Delay>
      // HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
      // HAL_Delay(200);
    }
  } while (tmp == PHY_LINK_OFF);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0e5      	beq.n	80020ce <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 8002102:	4806      	ldr	r0, [pc, #24]	@ (800211c <PHYStatusCheck+0x54>)
 8002104:	f00a fe7a 	bl	800cdfc <iprintf>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	0800e2a8 	.word	0x0800e2a8
 8002114:	0800e2d0 	.word	0x0800e2d0
 8002118:	40020400 	.word	0x40020400
 800211c:	0800e2e4 	.word	0x0800e2e4

08002120 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	4619      	mov	r1, r3
 800212a:	200b      	movs	r0, #11
 800212c:	f001 fe7a 	bl	8003e24 <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 8002130:	793b      	ldrb	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 8002136:	4814      	ldr	r0, [pc, #80]	@ (8002188 <PrintPHYConf+0x68>)
 8002138:	f00a fe60 	bl	800cdfc <iprintf>
 800213c:	e002      	b.n	8002144 <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 800213e:	4813      	ldr	r0, [pc, #76]	@ (800218c <PrintPHYConf+0x6c>)
 8002140:	f00a fe5c 	bl	800cdfc <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 8002144:	797b      	ldrb	r3, [r7, #5]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d103      	bne.n	8002152 <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 800214a:	4811      	ldr	r0, [pc, #68]	@ (8002190 <PrintPHYConf+0x70>)
 800214c:	f00a fe56 	bl	800cdfc <iprintf>
 8002150:	e002      	b.n	8002158 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 8002152:	4810      	ldr	r0, [pc, #64]	@ (8002194 <PrintPHYConf+0x74>)
 8002154:	f00a fe52 	bl	800cdfc <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d103      	bne.n	8002166 <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 800215e:	480e      	ldr	r0, [pc, #56]	@ (8002198 <PrintPHYConf+0x78>)
 8002160:	f00a fe4c 	bl	800cdfc <iprintf>
 8002164:	e002      	b.n	800216c <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <PrintPHYConf+0x7c>)
 8002168:	f00a fe48 	bl	800cdfc <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 8002172:	480b      	ldr	r0, [pc, #44]	@ (80021a0 <PrintPHYConf+0x80>)
 8002174:	f00a fe42 	bl	800cdfc <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 8002178:	e002      	b.n	8002180 <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 800217a:	480a      	ldr	r0, [pc, #40]	@ (80021a4 <PrintPHYConf+0x84>)
 800217c:	f00a fe3e 	bl	800cdfc <iprintf>
}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	0800e300 	.word	0x0800e300
 800218c:	0800e324 	.word	0x0800e324
 8002190:	0800e344 	.word	0x0800e344
 8002194:	0800e360 	.word	0x0800e360
 8002198:	0800e380 	.word	0x0800e380
 800219c:	0800e394 	.word	0x0800e394
 80021a0:	0800e3a8 	.word	0x0800e3a8
 80021a4:	0800e3b8 	.word	0x0800e3b8

080021a8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80021ba:	f002 fb45 	bl	8004848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40001000 	.word	0x40001000

080021cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <Error_Handler+0x8>

080021d8 <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 80021e6:	89fb      	ldrh	r3, [r7, #14]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 80021ee:	89fb      	ldrh	r3, [r7, #14]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	701a      	strb	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	460a      	mov	r2, r1
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	4613      	mov	r3, r2
 8002214:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 8002224:	79bb      	ldrb	r3, [r7, #6]
 8002226:	b29a      	uxth	r2, r3
 8002228:	89fb      	ldrh	r3, [r7, #14]
 800222a:	4313      	orrs	r3, r2
 800222c:	81fb      	strh	r3, [r7, #14]

	return tmp;
 800222e:	89fb      	ldrh	r3, [r7, #14]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b08b      	sub	sp, #44	@ 0x2c
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 800224a:	2300      	movs	r3, #0
 800224c:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 800224e:	2300      	movs	r3, #0
 8002250:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 8002252:	2300      	movs	r3, #0
 8002254:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t temp4 = 0x0000;
 8002256:	2300      	movs	r3, #0
 8002258:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 800225a:	2300      	movs	r3, #0
 800225c:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 800225e:	2300      	movs	r3, #0
 8002260:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t temp7 = 0x0000;
 8002262:	2300      	movs	r3, #0
 8002264:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3306      	adds	r3, #6
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 814d 	bne.w	800250c <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3306      	adds	r3, #6
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	7992      	ldrb	r2, [r2, #6]
 800227a:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3307      	adds	r3, #7
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	79d2      	ldrb	r2, [r2, #7]
 8002284:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3302      	adds	r3, #2
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	3303      	adds	r3, #3
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3307      	adds	r3, #7
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	f000 809e 	beq.w	80023de <modbus_receive+0x1a2>
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	f300 812e 	bgt.w	8002504 <modbus_receive+0x2c8>
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <modbus_receive+0x78>
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	f000 8125 	beq.w	80024fc <modbus_receive+0x2c0>
 80022b2:	e127      	b.n	8002504 <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3308      	adds	r3, #8
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3309      	adds	r3, #9
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f7ff ff9f 	bl	8002206 <make_word>
 80022c8:	4603      	mov	r3, r0
 80022ca:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 80022cc:	8bfb      	ldrh	r3, [r7, #30]
 80022ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d0:	d87e      	bhi.n	80023d0 <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	330a      	adds	r3, #10
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	330b      	adds	r3, #11
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f7ff ff90 	bl	8002206 <make_word>
 80022e6:	4603      	mov	r3, r0
 80022e8:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 80022ea:	8bbb      	ldrh	r3, [r7, #28]
 80022ec:	2b40      	cmp	r3, #64	@ 0x40
 80022ee:	d86b      	bhi.n	80023c8 <modbus_receive+0x18c>
 80022f0:	8bba      	ldrh	r2, [r7, #28]
 80022f2:	8bfb      	ldrh	r3, [r7, #30]
 80022f4:	4413      	add	r3, r2
 80022f6:	2b40      	cmp	r3, #64	@ 0x40
 80022f8:	dc66      	bgt.n	80023c8 <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	7852      	ldrb	r2, [r2, #1]
 800230a:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 800230c:	8bbb      	ldrh	r3, [r7, #28]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3305      	adds	r3, #5
 8002318:	3203      	adds	r2, #3
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 800231e:	8bbb      	ldrh	r3, [r7, #28]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3308      	adds	r3, #8
 8002326:	0052      	lsls	r2, r2, #1
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 800232c:	8bbb      	ldrh	r3, [r7, #28]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d92b      	bls.n	800238a <modbus_receive+0x14e>
					{
						int i = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002336:	8bfb      	ldrh	r3, [r7, #30]
 8002338:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800233a:	e021      	b.n	8002380 <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 800233c:	8bfa      	ldrh	r2, [r7, #30]
 800233e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002340:	4413      	add	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	4413      	add	r3, r2
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	4a72      	ldr	r2, [pc, #456]	@ (8002514 <modbus_receive+0x2d8>)
 800234c:	4972      	ldr	r1, [pc, #456]	@ (8002518 <modbus_receive+0x2dc>)
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff42 	bl	80021d8 <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	3309      	adds	r3, #9
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4413      	add	r3, r2
 800235e:	4a6e      	ldr	r2, [pc, #440]	@ (8002518 <modbus_receive+0x2dc>)
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	330a      	adds	r3, #10
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4413      	add	r3, r2
 800236e:	4a69      	ldr	r2, [pc, #420]	@ (8002514 <modbus_receive+0x2d8>)
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	701a      	strb	r2, [r3, #0]
							i += 2;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	3302      	adds	r3, #2
 8002378:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 800237a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800237c:	3301      	adds	r3, #1
 800237e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002380:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002382:	8bbb      	ldrh	r3, [r7, #28]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3d9      	bcc.n	800233c <modbus_receive+0x100>
 8002388:	e013      	b.n	80023b2 <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 800238a:	8bfb      	ldrh	r3, [r7, #30]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	4413      	add	r3, r2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	4a5f      	ldr	r2, [pc, #380]	@ (8002514 <modbus_receive+0x2d8>)
 8002396:	4960      	ldr	r1, [pc, #384]	@ (8002518 <modbus_receive+0x2dc>)
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff1d 	bl	80021d8 <get_HB_LB>
						tx_buffer[1] = high_byte;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002518 <modbus_receive+0x2dc>)
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3302      	adds	r3, #2
 80023ac:	4a59      	ldr	r2, [pc, #356]	@ (8002514 <modbus_receive+0x2d8>)
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 80023b2:	8bbb      	ldrh	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3309      	adds	r3, #9
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	2001      	movs	r0, #1
 80023c2:	f001 fa0d 	bl	80037e0 <send>
 80023c6:	e006      	b.n	80023d6 <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 80023c8:	4b54      	ldr	r3, [pc, #336]	@ (800251c <modbus_receive+0x2e0>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e002      	b.n	80023d6 <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 80023d0:	4b52      	ldr	r3, [pc, #328]	@ (800251c <modbus_receive+0x2e0>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 80023d6:	4852      	ldr	r0, [pc, #328]	@ (8002520 <modbus_receive+0x2e4>)
 80023d8:	f00a fd78 	bl	800cecc <puts>
			break;
 80023dc:	e096      	b.n	800250c <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3308      	adds	r3, #8
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3309      	adds	r3, #9
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7ff ff0a 	bl	8002206 <make_word>
 80023f2:	4603      	mov	r3, r0
 80023f4:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80023fa:	d878      	bhi.n	80024ee <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	330a      	adds	r3, #10
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	330b      	adds	r3, #11
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f7ff fefb 	bl	8002206 <make_word>
 8002410:	4603      	mov	r3, r0
 8002412:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8002414:	8bbb      	ldrh	r3, [r7, #28]
 8002416:	2b40      	cmp	r3, #64	@ 0x40
 8002418:	d865      	bhi.n	80024e6 <modbus_receive+0x2aa>
 800241a:	8bba      	ldrh	r2, [r7, #28]
 800241c:	8bfb      	ldrh	r3, [r7, #30]
 800241e:	4413      	add	r3, r2
 8002420:	2b40      	cmp	r3, #64	@ 0x40
 8002422:	dc60      	bgt.n	80024e6 <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3301      	adds	r3, #1
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	7852      	ldrb	r2, [r2, #1]
 8002434:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3305      	adds	r3, #5
 800243a:	2206      	movs	r2, #6
 800243c:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 800243e:	8bfb      	ldrh	r3, [r7, #30]
 8002440:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 8002442:	230d      	movs	r3, #13
 8002444:	84fb      	strh	r3, [r7, #38]	@ 0x26

					if(temp2 == 1)
 8002446:	8bbb      	ldrh	r3, [r7, #28]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d111      	bne.n	8002470 <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 800244c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	7818      	ldrb	r0, [r3, #0]
 8002454:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002456:	3301      	adds	r3, #1
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	7819      	ldrb	r1, [r3, #0]
 800245e:	8bfb      	ldrh	r3, [r7, #30]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	18d4      	adds	r4, r2, r3
 8002466:	f7ff fece 	bl	8002206 <make_word>
 800246a:	4603      	mov	r3, r0
 800246c:	8023      	strh	r3, [r4, #0]
 800246e:	e020      	b.n	80024b2 <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002470:	8b3b      	ldrh	r3, [r7, #24]
 8002472:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002474:	e017      	b.n	80024a6 <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 8002476:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	7818      	ldrb	r0, [r3, #0]
 800247e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002480:	3301      	adds	r3, #1
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	7819      	ldrb	r1, [r3, #0]
 800248a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	18d4      	adds	r4, r2, r3
 8002492:	f7ff feb8 	bl	8002206 <make_word>
 8002496:	4603      	mov	r3, r0
 8002498:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 800249a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800249c:	3302      	adds	r3, #2
 800249e:	84fb      	strh	r3, [r7, #38]	@ 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 80024a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80024a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024a8:	8bb9      	ldrh	r1, [r7, #28]
 80024aa:	8b3b      	ldrh	r3, [r7, #24]
 80024ac:	440b      	add	r3, r1
 80024ae:	429a      	cmp	r2, r3
 80024b0:	dbe1      	blt.n	8002476 <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3308      	adds	r3, #8
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	7a12      	ldrb	r2, [r2, #8]
 80024ba:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3309      	adds	r3, #9
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	7a52      	ldrb	r2, [r2, #9]
 80024c4:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	330a      	adds	r3, #10
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	7a92      	ldrb	r2, [r2, #10]
 80024ce:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	330b      	adds	r3, #11
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	7ad2      	ldrb	r2, [r2, #11]
 80024d8:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 80024da:	220c      	movs	r2, #12
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	2001      	movs	r0, #1
 80024e0:	f001 f97e 	bl	80037e0 <send>
 80024e4:	e006      	b.n	80024f4 <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <modbus_receive+0x2e0>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e002      	b.n	80024f4 <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <modbus_receive+0x2e0>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 80024f4:	480b      	ldr	r0, [pc, #44]	@ (8002524 <modbus_receive+0x2e8>)
 80024f6:	f00a fce9 	bl	800cecc <puts>
			break;
 80024fa:	e007      	b.n	800250c <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 80024fc:	480a      	ldr	r0, [pc, #40]	@ (8002528 <modbus_receive+0x2ec>)
 80024fe:	f00a fce5 	bl	800cecc <puts>
			break;
 8002502:	e003      	b.n	800250c <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 8002504:	4809      	ldr	r0, [pc, #36]	@ (800252c <modbus_receive+0x2f0>)
 8002506:	f00a fce1 	bl	800cecc <puts>
			break;
 800250a:	bf00      	nop
		}
	}
}
 800250c:	bf00      	nop
 800250e:	372c      	adds	r7, #44	@ 0x2c
 8002510:	46bd      	mov	sp, r7
 8002512:	bd90      	pop	{r4, r7, pc}
 8002514:	200005a5 	.word	0x200005a5
 8002518:	200005a6 	.word	0x200005a6
 800251c:	200005a4 	.word	0x200005a4
 8002520:	0800e3cc 	.word	0x0800e3cc
 8002524:	0800e3dc 	.word	0x0800e3dc
 8002528:	0800e3ec 	.word	0x0800e3ec
 800252c:	0800e3fc 	.word	0x0800e3fc

08002530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_MspInit+0x4c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <HAL_MspInit+0x4c>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002544:	6453      	str	r3, [r2, #68]	@ 0x44
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <HAL_MspInit+0x4c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <HAL_MspInit+0x4c>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800256e:	f008 f975 	bl	800a85c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a48      	ldr	r2, [pc, #288]	@ (80026c0 <HAL_I2C_MspInit+0x140>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	f040 8089 	bne.w	80026b6 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	4b46      	ldr	r3, [pc, #280]	@ (80026c4 <HAL_I2C_MspInit+0x144>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4a45      	ldr	r2, [pc, #276]	@ (80026c4 <HAL_I2C_MspInit+0x144>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b4:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <HAL_I2C_MspInit+0x144>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c6:	2312      	movs	r3, #18
 80025c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025d2:	2304      	movs	r3, #4
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	483a      	ldr	r0, [pc, #232]	@ (80026c8 <HAL_I2C_MspInit+0x148>)
 80025de:	f002 fd43 	bl	8005068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b37      	ldr	r3, [pc, #220]	@ (80026c4 <HAL_I2C_MspInit+0x144>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	4a36      	ldr	r2, [pc, #216]	@ (80026c4 <HAL_I2C_MspInit+0x144>)
 80025ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f2:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_I2C_MspInit+0x144>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025fe:	4b33      	ldr	r3, [pc, #204]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002600:	4a33      	ldr	r2, [pc, #204]	@ (80026d0 <HAL_I2C_MspInit+0x150>)
 8002602:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800260a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260c:	4b2f      	ldr	r3, [pc, #188]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002612:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002614:	2200      	movs	r2, #0
 8002616:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002618:	4b2c      	ldr	r3, [pc, #176]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 800261a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002620:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002622:	2200      	movs	r2, #0
 8002624:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002626:	4b29      	ldr	r3, [pc, #164]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002632:	4b26      	ldr	r3, [pc, #152]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800263e:	4823      	ldr	r0, [pc, #140]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002640:	f002 fa28 	bl	8004a94 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800264a:	f7ff fdbf 	bl	80021cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1e      	ldr	r2, [pc, #120]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002652:	639a      	str	r2, [r3, #56]	@ 0x38
 8002654:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <HAL_I2C_MspInit+0x14c>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 800265c:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <HAL_I2C_MspInit+0x158>)
 800265e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 8002662:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002666:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800266e:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 8002676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800267a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002682:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002694:	4b0f      	ldr	r3, [pc, #60]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800269a:	480e      	ldr	r0, [pc, #56]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 800269c:	f002 f9fa 	bl	8004a94 <HAL_DMA_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80026a6:	f7ff fd91 	bl	80021cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 80026ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80026b0:	4a08      	ldr	r2, [pc, #32]	@ (80026d4 <HAL_I2C_MspInit+0x154>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3728      	adds	r7, #40	@ 0x28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40005400 	.word	0x40005400
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020400 	.word	0x40020400
 80026cc:	200001bc 	.word	0x200001bc
 80026d0:	40026010 	.word	0x40026010
 80026d4:	2000021c 	.word	0x2000021c
 80026d8:	400260a0 	.word	0x400260a0

080026dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a19      	ldr	r2, [pc, #100]	@ (8002760 <HAL_SPI_MspInit+0x84>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d12b      	bne.n	8002756 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_SPI_MspInit+0x88>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	4a17      	ldr	r2, [pc, #92]	@ (8002764 <HAL_SPI_MspInit+0x88>)
 8002708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800270c:	6453      	str	r3, [r2, #68]	@ 0x44
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_SPI_MspInit+0x88>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <HAL_SPI_MspInit+0x88>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a10      	ldr	r2, [pc, #64]	@ (8002764 <HAL_SPI_MspInit+0x88>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <HAL_SPI_MspInit+0x88>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002736:	23e0      	movs	r3, #224	@ 0xe0
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002746:	2305      	movs	r3, #5
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	4805      	ldr	r0, [pc, #20]	@ (8002768 <HAL_SPI_MspInit+0x8c>)
 8002752:	f002 fc89 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002756:	bf00      	nop
 8002758:	3728      	adds	r7, #40	@ 0x28
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40013000 	.word	0x40013000
 8002764:	40023800 	.word	0x40023800
 8002768:	40020000 	.word	0x40020000

0800276c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0b      	ldr	r2, [pc, #44]	@ (80027a8 <HAL_TIM_Base_MspInit+0x3c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10d      	bne.n	800279a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_TIM_Base_MspInit+0x40>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_TIM_Base_MspInit+0x40>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278c:	6453      	str	r3, [r2, #68]	@ 0x44
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <HAL_TIM_Base_MspInit+0x40>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08c      	sub	sp, #48	@ 0x30
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a32      	ldr	r2, [pc, #200]	@ (8002898 <HAL_UART_MspInit+0xe8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d12c      	bne.n	800282c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <HAL_UART_MspInit+0xec>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	4a30      	ldr	r2, [pc, #192]	@ (800289c <HAL_UART_MspInit+0xec>)
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e2:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <HAL_UART_MspInit+0xec>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	4b2a      	ldr	r3, [pc, #168]	@ (800289c <HAL_UART_MspInit+0xec>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	4a29      	ldr	r2, [pc, #164]	@ (800289c <HAL_UART_MspInit+0xec>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	4b27      	ldr	r3, [pc, #156]	@ (800289c <HAL_UART_MspInit+0xec>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800280a:	23c0      	movs	r3, #192	@ 0xc0
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800281a:	2307      	movs	r3, #7
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	481e      	ldr	r0, [pc, #120]	@ (80028a0 <HAL_UART_MspInit+0xf0>)
 8002826:	f002 fc1f 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800282a:	e030      	b.n	800288e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1c      	ldr	r2, [pc, #112]	@ (80028a4 <HAL_UART_MspInit+0xf4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12b      	bne.n	800288e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b18      	ldr	r3, [pc, #96]	@ (800289c <HAL_UART_MspInit+0xec>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	4a17      	ldr	r2, [pc, #92]	@ (800289c <HAL_UART_MspInit+0xec>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002844:	6413      	str	r3, [r2, #64]	@ 0x40
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_UART_MspInit+0xec>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_UART_MspInit+0xec>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a10      	ldr	r2, [pc, #64]	@ (800289c <HAL_UART_MspInit+0xec>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <HAL_UART_MspInit+0xec>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800286e:	2304      	movs	r3, #4
 8002870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002872:	2312      	movs	r3, #18
 8002874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287e:	2307      	movs	r3, #7
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 031c 	add.w	r3, r7, #28
 8002886:	4619      	mov	r1, r3
 8002888:	4807      	ldr	r0, [pc, #28]	@ (80028a8 <HAL_UART_MspInit+0xf8>)
 800288a:	f002 fbed 	bl	8005068 <HAL_GPIO_Init>
}
 800288e:	bf00      	nop
 8002890:	3730      	adds	r7, #48	@ 0x30
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40011000 	.word	0x40011000
 800289c:	40023800 	.word	0x40023800
 80028a0:	40020400 	.word	0x40020400
 80028a4:	40004400 	.word	0x40004400
 80028a8:	40020000 	.word	0x40020000

080028ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	@ 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <HAL_InitTick+0xe4>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	4a32      	ldr	r2, [pc, #200]	@ (8002990 <HAL_InitTick+0xe4>)
 80028c6:	f043 0310 	orr.w	r3, r3, #16
 80028ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80028cc:	4b30      	ldr	r3, [pc, #192]	@ (8002990 <HAL_InitTick+0xe4>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028d8:	f107 0210 	add.w	r2, r7, #16
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fec6 	bl	8006674 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028f2:	f003 fe97 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 80028f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80028f8:	e004      	b.n	8002904 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80028fa:	f003 fe93 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 80028fe:	4603      	mov	r3, r0
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002906:	4a23      	ldr	r2, [pc, #140]	@ (8002994 <HAL_InitTick+0xe8>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	3b01      	subs	r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002912:	4b21      	ldr	r3, [pc, #132]	@ (8002998 <HAL_InitTick+0xec>)
 8002914:	4a21      	ldr	r2, [pc, #132]	@ (800299c <HAL_InitTick+0xf0>)
 8002916:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002918:	4b1f      	ldr	r3, [pc, #124]	@ (8002998 <HAL_InitTick+0xec>)
 800291a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800291e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_InitTick+0xec>)
 8002922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002924:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002926:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <HAL_InitTick+0xec>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <HAL_InitTick+0xec>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_InitTick+0xec>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002938:	4817      	ldr	r0, [pc, #92]	@ (8002998 <HAL_InitTick+0xec>)
 800293a:	f004 feaf 	bl	800769c <HAL_TIM_Base_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002944:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11b      	bne.n	8002984 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800294c:	4812      	ldr	r0, [pc, #72]	@ (8002998 <HAL_InitTick+0xec>)
 800294e:	f004 ff5d 	bl	800780c <HAL_TIM_Base_Start_IT>
 8002952:	4603      	mov	r3, r0
 8002954:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800295c:	2b00      	cmp	r3, #0
 800295e:	d111      	bne.n	8002984 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002960:	2036      	movs	r0, #54	@ 0x36
 8002962:	f002 f889 	bl	8004a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d808      	bhi.n	800297e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	2036      	movs	r0, #54	@ 0x36
 8002972:	f002 f865 	bl	8004a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <HAL_InitTick+0xf4>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e002      	b.n	8002984 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002984:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002988:	4618      	mov	r0, r3
 800298a:	3738      	adds	r7, #56	@ 0x38
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	431bde83 	.word	0x431bde83
 8002998:	200005a8 	.word	0x200005a8
 800299c:	40001000 	.word	0x40001000
 80029a0:	200000a4 	.word	0x200000a4

080029a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <NMI_Handler+0x4>

080029ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <MemManage_Handler+0x4>

080029bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <BusFault_Handler+0x4>

080029c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c8:	bf00      	nop
 80029ca:	e7fd      	b.n	80029c8 <UsageFault_Handler+0x4>

080029cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80029e0:	4802      	ldr	r0, [pc, #8]	@ (80029ec <DMA1_Stream0_IRQHandler+0x10>)
 80029e2:	f002 f905 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200001bc 	.word	0x200001bc

080029f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80029f4:	4802      	ldr	r0, [pc, #8]	@ (8002a00 <DMA1_Stream6_IRQHandler+0x10>)
 80029f6:	f002 f8fb 	bl	8004bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000021c 	.word	0x2000021c

08002a04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <TIM6_DAC_IRQHandler+0x10>)
 8002a0a:	f004 ff6f 	bl	80078ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200005a8 	.word	0x200005a8

08002a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e00a      	b.n	8002a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a2a:	f3af 8000 	nop.w
 8002a2e:	4601      	mov	r1, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	60ba      	str	r2, [r7, #8]
 8002a36:	b2ca      	uxtb	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dbf0      	blt.n	8002a2a <_read+0x12>
  }

  return len;
 8002a48:	687b      	ldr	r3, [r7, #4]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a7a:	605a      	str	r2, [r3, #4]
  return 0;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <_isatty>:

int _isatty(int file)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a92:	2301      	movs	r3, #1
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <interpolate>:


#include "utils.h"


float interpolate(const float a[], const float b[], size_t size, float value_a) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	ed87 0a00 	vstr	s0, [r7]
    if (size < 2) {
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d802      	bhi.n	8002afc <interpolate+0x1c>
        // Not enough points to interpolate
        return 0.0;
 8002af6:	eddf 7a74 	vldr	s15, [pc, #464]	@ 8002cc8 <interpolate+0x1e8>
 8002afa:	e0dd      	b.n	8002cb8 <interpolate+0x1d8>
    }

    // Check if 'a' array is in ascending order or not
    if (a[0] < a[size - 1]) {
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	ed93 7a00 	vldr	s14, [r3]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	d566      	bpl.n	8002bec <interpolate+0x10c>
        // Ascending order
        for (size_t i = 0; i < size; i++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e055      	b.n	8002bd0 <interpolate+0xf0>
            if (value_a <= a[i]) {
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ed97 7a00 	vldr	s14, [r7]
 8002b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3c:	d845      	bhi.n	8002bca <interpolate+0xea>
                if (i == 0) {
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d103      	bne.n	8002b4c <interpolate+0x6c>
                    return b[0]; // value_a smaller than the first element
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	e0b5      	b.n	8002cb8 <interpolate+0x1d8>
                } else {
                    // Linear interpolation formula
                    return b[i - 1] + (b[i] - b[i - 1]) * (value_a - a[i - 1]) / (a[i] - a[i - 1]);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b52:	3b01      	subs	r3, #1
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4413      	add	r3, r2
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	edd3 6a00 	vldr	s13, [r3]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b70:	3b01      	subs	r3, #1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b86:	3b01      	subs	r3, #1
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	edd3 7a00 	vldr	s15, [r3]
 8002b92:	ed97 6a00 	vldr	s12, [r7]
 8002b96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002b9a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	edd3 6a00 	vldr	s13, [r3]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bc0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc8:	e076      	b.n	8002cb8 <interpolate+0x1d8>
        for (size_t i = 0; i < size; i++) {
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3a5      	bcc.n	8002b24 <interpolate+0x44>
                }
            }
        }
        return b[size - 1]; // value_a larger than the last element
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bde:	3b01      	subs	r3, #1
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	4413      	add	r3, r2
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	e065      	b.n	8002cb8 <interpolate+0x1d8>
    } else {
        // Descending order
        for (size_t i = 0; i < size; i++) {
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e055      	b.n	8002c9e <interpolate+0x1be>
            if (value_a >= a[i]) {
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ed97 7a00 	vldr	s14, [r7]
 8002c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	db45      	blt.n	8002c98 <interpolate+0x1b8>
                if (i == 0) {
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <interpolate+0x13a>
                    return b[0]; // value_a larger than the first element in descending array
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	edd3 7a00 	vldr	s15, [r3]
 8002c18:	e04e      	b.n	8002cb8 <interpolate+0x1d8>
                } else {
                    // Linear interpolation formula
                    return b[i - 1] + (b[i] - b[i - 1]) * (value_a - a[i - 1]) / (a[i] - a[i - 1]);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c20:	3b01      	subs	r3, #1
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	4413      	add	r3, r2
 8002c28:	ed93 7a00 	vldr	s14, [r3]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4413      	add	r3, r2
 8002c34:	edd3 6a00 	vldr	s13, [r3]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4413      	add	r3, r2
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c54:	3b01      	subs	r3, #1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	edd3 7a00 	vldr	s15, [r3]
 8002c60:	ed97 6a00 	vldr	s12, [r7]
 8002c64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c68:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	edd3 6a00 	vldr	s13, [r3]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	edd3 7a00 	vldr	s15, [r3]
 8002c8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c8e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c96:	e00f      	b.n	8002cb8 <interpolate+0x1d8>
        for (size_t i = 0; i < size; i++) {
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d3a5      	bcc.n	8002bf2 <interpolate+0x112>
                }
            }
        }
        return b[size - 1]; // value_a smaller than the last element in descending array
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cac:	3b01      	subs	r3, #1
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
    }
}
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	00000000 	.word	0x00000000

08002ccc <interpolate_SOC>:

float interpolate_SOC(const float OCV[], const float SOC[], int size, float OCV_value){
 8002ccc:	b480      	push	{r7}
 8002cce:	b08b      	sub	sp, #44	@ 0x2c
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	ed87 0a00 	vstr	s0, [r7]
    // Check if the OCV_value is outside the bounds of the OCV array
    if (OCV_value <= OCV[size - 1]) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4413      	add	r3, r2
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ed97 7a00 	vldr	s14, [r7]
 8002cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	d808      	bhi.n	8002d0e <interpolate_SOC+0x42>
        return SOC[size - 1];
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d02:	3b01      	subs	r3, #1
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4413      	add	r3, r2
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	e06c      	b.n	8002de8 <interpolate_SOC+0x11c>
    }
    if (OCV_value >= OCV[0]) {
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ed97 7a00 	vldr	s14, [r7]
 8002d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d20:	db02      	blt.n	8002d28 <interpolate_SOC+0x5c>
        return SOC[0];
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e05f      	b.n	8002de8 <interpolate_SOC+0x11c>
    }

    // Find the interval in which OCV_value is located
    for (int i = 0; i < size - 1; i++) {
 8002d28:	2300      	movs	r3, #0
 8002d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2c:	e055      	b.n	8002dda <interpolate_SOC+0x10e>
        if (OCV[i] >= OCV_value && OCV_value >= OCV[i + 1]) {
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ed97 7a00 	vldr	s14, [r7]
 8002d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	d845      	bhi.n	8002dd4 <interpolate_SOC+0x108>
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ed97 7a00 	vldr	s14, [r7]
 8002d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d62:	db37      	blt.n	8002dd4 <interpolate_SOC+0x108>
            // Perform linear interpolation
            float OCV1 = OCV[i], OCV2 = OCV[i + 1];
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	3301      	adds	r3, #1
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4413      	add	r3, r2
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61fb      	str	r3, [r7, #28]
            float SOC1 = SOC[i], SOC2 = SOC[i + 1];
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4413      	add	r3, r2
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4413      	add	r3, r2
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	617b      	str	r3, [r7, #20]
            float SOC_value = SOC1 + (OCV_value - OCV1) * (SOC2 - SOC1) / (OCV2 - OCV1);
 8002d98:	ed97 7a00 	vldr	s14, [r7]
 8002d9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002da0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002da4:	edd7 6a05 	vldr	s13, [r7, #20]
 8002da8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002db0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002db4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002db8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	edc7 7a04 	vstr	s15, [r7, #16]
            return SOC_value;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	e009      	b.n	8002de8 <interpolate_SOC+0x11c>
    for (int i = 0; i < size - 1; i++) {
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dba4      	blt.n	8002d2e <interpolate_SOC+0x62>
        }
    }

    // If value is not found in the range (should not happen)
    return 0.0;
 8002de4:	f04f 0300 	mov.w	r3, #0
}
 8002de8:	ee07 3a90 	vmov	s15, r3
 8002dec:	eeb0 0a67 	vmov.f32	s0, s15
 8002df0:	372c      	adds	r7, #44	@ 0x2c
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002e04:	4b22      	ldr	r3, [pc, #136]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002e10:	4b1f      	ldr	r3, [pc, #124]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <WIZCHIP_READ+0x24>
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d114      	bne.n	8002e4a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	0c12      	lsrs	r2, r2, #16
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002e2e:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	0a12      	lsrs	r2, r2, #8
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4610      	mov	r0, r2
 8002e46:	4798      	blx	r3
 8002e48:	e011      	b.n	8002e6e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e64:	f107 020c 	add.w	r2, r7, #12
 8002e68:	2103      	movs	r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4798      	blx	r3
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002e7e:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <WIZCHIP_READ+0x94>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4798      	blx	r3
   return ret;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000078 	.word	0x20000078

08002e94 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d119      	bne.n	8002ef0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	0c12      	lsrs	r2, r2, #16
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002eca:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	0a12      	lsrs	r2, r2, #8
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	4610      	mov	r0, r2
 8002eec:	4798      	blx	r3
 8002eee:	e013      	b.n	8002f18 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002f0a:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	f107 020c 	add.w	r2, r7, #12
 8002f12:	2104      	movs	r1, #4
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002f18:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002f1e:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <WIZCHIP_WRITE+0x98>)
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	4798      	blx	r3
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000078 	.word	0x20000078

08002f30 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002f44:	4b29      	ldr	r3, [pc, #164]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002f4a:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <WIZCHIP_READ_BUF+0x2a>
 8002f52:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d126      	bne.n	8002fa8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002f5a:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	0c12      	lsrs	r2, r2, #16
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4610      	mov	r0, r2
 8002f66:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002f68:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	0a12      	lsrs	r2, r2, #8
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	4610      	mov	r0, r2
 8002f74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002f76:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	82fb      	strh	r3, [r7, #22]
 8002f86:	e00a      	b.n	8002f9e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002f88:	4b18      	ldr	r3, [pc, #96]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	8afa      	ldrh	r2, [r7, #22]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	188c      	adds	r4, r1, r2
 8002f92:	4798      	blx	r3
 8002f94:	4603      	mov	r3, r0
 8002f96:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	82fb      	strh	r3, [r7, #22]
 8002f9e:	8afa      	ldrh	r2, [r7, #22]
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d3f0      	bcc.n	8002f88 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002fa6:	e017      	b.n	8002fd8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	f107 0210 	add.w	r2, r7, #16
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002fcc:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	68b8      	ldr	r0, [r7, #8]
 8002fd6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002fde:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <WIZCHIP_READ_BUF+0xbc>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4798      	blx	r3
}
 8002fe4:	bf00      	nop
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}
 8002fec:	20000078 	.word	0x20000078

08002ff0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f043 0304 	orr.w	r3, r3, #4
 8003010:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003012:	4b26      	ldr	r3, [pc, #152]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d126      	bne.n	8003068 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	0c12      	lsrs	r2, r2, #16
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	4610      	mov	r0, r2
 8003026:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003028:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	0a12      	lsrs	r2, r2, #8
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4610      	mov	r0, r2
 8003034:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003036:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	4610      	mov	r0, r2
 8003040:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003042:	2300      	movs	r3, #0
 8003044:	82fb      	strh	r3, [r7, #22]
 8003046:	e00a      	b.n	800305e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	8afa      	ldrh	r2, [r7, #22]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	440a      	add	r2, r1
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003058:	8afb      	ldrh	r3, [r7, #22]
 800305a:	3301      	adds	r3, #1
 800305c:	82fb      	strh	r3, [r7, #22]
 800305e:	8afa      	ldrh	r2, [r7, #22]
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	429a      	cmp	r2, r3
 8003064:	d3f0      	bcc.n	8003048 <WIZCHIP_WRITE_BUF+0x58>
 8003066:	e017      	b.n	8003098 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	0c1b      	lsrs	r3, r3, #16
 800306c:	b2db      	uxtb	r3, r3
 800306e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	b2db      	uxtb	r3, r3
 8003076:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	f107 0210 	add.w	r2, r7, #16
 8003086:	2103      	movs	r1, #3
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800308c:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	4611      	mov	r1, r2
 8003094:	68b8      	ldr	r0, [r7, #8]
 8003096:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003098:	4b04      	ldr	r3, [pc, #16]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800309e:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <WIZCHIP_WRITE_BUF+0xbc>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	4798      	blx	r3
}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000078 	.word	0x20000078

080030b0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	81fb      	strh	r3, [r7, #14]
 80030be:	2300      	movs	r3, #0
 80030c0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3301      	adds	r3, #1
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fe94 	bl	8002dfc <WIZCHIP_READ>
 80030d4:	4603      	mov	r3, r0
 80030d6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80030d8:	89bb      	ldrh	r3, [r7, #12]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	b29c      	uxth	r4, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3301      	adds	r3, #1
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fe86 	bl	8002dfc <WIZCHIP_READ>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4423      	add	r3, r4
 80030f4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80030f6:	89bb      	ldrh	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d019      	beq.n	8003130 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fe77 	bl	8002dfc <WIZCHIP_READ>
 800310e:	4603      	mov	r3, r0
 8003110:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	021b      	lsls	r3, r3, #8
 8003116:	b29c      	uxth	r4, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3301      	adds	r3, #1
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fe69 	bl	8002dfc <WIZCHIP_READ>
 800312a:	4603      	mov	r3, r0
 800312c:	4423      	add	r3, r4
 800312e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003130:	89fa      	ldrh	r2, [r7, #14]
 8003132:	89bb      	ldrh	r3, [r7, #12]
 8003134:	429a      	cmp	r2, r3
 8003136:	d1c4      	bne.n	80030c2 <getSn_TX_FSR+0x12>
   return val;
 8003138:	89fb      	ldrh	r3, [r7, #14]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}

08003142 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003142:	b590      	push	{r4, r7, lr}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800314c:	2300      	movs	r3, #0
 800314e:	81fb      	strh	r3, [r7, #14]
 8003150:	2300      	movs	r3, #0
 8003152:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3301      	adds	r3, #1
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fe4b 	bl	8002dfc <WIZCHIP_READ>
 8003166:	4603      	mov	r3, r0
 8003168:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800316a:	89bb      	ldrh	r3, [r7, #12]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	b29c      	uxth	r4, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	3301      	adds	r3, #1
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fe3d 	bl	8002dfc <WIZCHIP_READ>
 8003182:	4603      	mov	r3, r0
 8003184:	4423      	add	r3, r4
 8003186:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003188:	89bb      	ldrh	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d019      	beq.n	80031c2 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	3301      	adds	r3, #1
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fe2e 	bl	8002dfc <WIZCHIP_READ>
 80031a0:	4603      	mov	r3, r0
 80031a2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80031a4:	89fb      	ldrh	r3, [r7, #14]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	b29c      	uxth	r4, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	3301      	adds	r3, #1
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fe20 	bl	8002dfc <WIZCHIP_READ>
 80031bc:	4603      	mov	r3, r0
 80031be:	4423      	add	r3, r4
 80031c0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80031c2:	89fa      	ldrh	r2, [r7, #14]
 80031c4:	89bb      	ldrh	r3, [r7, #12]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d1c4      	bne.n	8003154 <getSn_RX_RSR+0x12>
   return val;
 80031ca:	89fb      	ldrh	r3, [r7, #14]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80031ec:	88bb      	ldrh	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d046      	beq.n	8003280 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3301      	adds	r3, #1
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fdfc 	bl	8002dfc <WIZCHIP_READ>
 8003204:	4603      	mov	r3, r0
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b29c      	uxth	r4, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	3301      	adds	r3, #1
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fdf0 	bl	8002dfc <WIZCHIP_READ>
 800321c:	4603      	mov	r3, r0
 800321e:	4423      	add	r3, r4
 8003220:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	021b      	lsls	r3, r3, #8
 8003226:	79fa      	ldrb	r2, [r7, #7]
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	3202      	adds	r2, #2
 800322c:	00d2      	lsls	r2, r2, #3
 800322e:	4413      	add	r3, r2
 8003230:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003232:	88bb      	ldrh	r3, [r7, #4]
 8003234:	461a      	mov	r2, r3
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	f7ff fed9 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800323e:	89fa      	ldrh	r2, [r7, #14]
 8003240:	88bb      	ldrh	r3, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3301      	adds	r3, #1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003252:	461a      	mov	r2, r3
 8003254:	89fb      	ldrh	r3, [r7, #14]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	b29b      	uxth	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7ff fe18 	bl	8002e94 <WIZCHIP_WRITE>
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	3301      	adds	r3, #1
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003270:	461a      	mov	r2, r3
 8003272:	89fb      	ldrh	r3, [r7, #14]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f7ff fe0b 	bl	8002e94 <WIZCHIP_WRITE>
 800327e:	e000      	b.n	8003282 <wiz_send_data+0xae>
   if(len == 0)  return;
 8003280:	bf00      	nop
}
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bd90      	pop	{r4, r7, pc}

08003288 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
 8003294:	4613      	mov	r3, r2
 8003296:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80032a0:	88bb      	ldrh	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d046      	beq.n	8003334 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	3301      	adds	r3, #1
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fda2 	bl	8002dfc <WIZCHIP_READ>
 80032b8:	4603      	mov	r3, r0
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	b29c      	uxth	r4, r3
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3301      	adds	r3, #1
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fd96 	bl	8002dfc <WIZCHIP_READ>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4423      	add	r3, r4
 80032d4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	79fa      	ldrb	r2, [r7, #7]
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	3203      	adds	r2, #3
 80032e0:	00d2      	lsls	r2, r2, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80032e6:	88bb      	ldrh	r3, [r7, #4]
 80032e8:	461a      	mov	r2, r3
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	68b8      	ldr	r0, [r7, #8]
 80032ee:	f7ff fe1f 	bl	8002f30 <WIZCHIP_READ_BUF>
   ptr += len;
 80032f2:	89fa      	ldrh	r2, [r7, #14]
 80032f4:	88bb      	ldrh	r3, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	3301      	adds	r3, #1
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003306:	461a      	mov	r2, r3
 8003308:	89fb      	ldrh	r3, [r7, #14]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7ff fdbe 	bl	8002e94 <WIZCHIP_WRITE>
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3301      	adds	r3, #1
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003324:	461a      	mov	r2, r3
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f7ff fdb1 	bl	8002e94 <WIZCHIP_WRITE>
 8003332:	e000      	b.n	8003336 <wiz_recv_data+0xae>
   if(len == 0) return;
 8003334:	bf00      	nop
}
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	bd90      	pop	{r4, r7, pc}

0800333c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4623      	mov	r3, r4
 800334c:	71fb      	strb	r3, [r7, #7]
 800334e:	4603      	mov	r3, r0
 8003350:	71bb      	strb	r3, [r7, #6]
 8003352:	460b      	mov	r3, r1
 8003354:	80bb      	strh	r3, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	2b08      	cmp	r3, #8
 800335e:	d902      	bls.n	8003366 <socket+0x2a>
 8003360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003364:	e0f0      	b.n	8003548 <socket+0x20c>
	switch(protocol)
 8003366:	79bb      	ldrb	r3, [r7, #6]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <socket+0x3c>
 800336c:	2b00      	cmp	r3, #0
 800336e:	dd11      	ble.n	8003394 <socket+0x58>
 8003370:	3b02      	subs	r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d80e      	bhi.n	8003394 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003376:	e011      	b.n	800339c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	2204      	movs	r2, #4
 800337e:	4619      	mov	r1, r3
 8003380:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003384:	f7ff fdd4 	bl	8002f30 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <socket+0x5e>
 800338e:	f06f 0302 	mvn.w	r3, #2
 8003392:	e0d9      	b.n	8003548 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003394:	f06f 0304 	mvn.w	r3, #4
 8003398:	e0d6      	b.n	8003548 <socket+0x20c>
	    break;
 800339a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <socket+0x70>
 80033a6:	f06f 0305 	mvn.w	r3, #5
 80033aa:	e0cd      	b.n	8003548 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d028      	beq.n	8003404 <socket+0xc8>
	{
   	switch(protocol)
 80033b2:	79bb      	ldrb	r3, [r7, #6]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d002      	beq.n	80033be <socket+0x82>
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d008      	beq.n	80033ce <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80033bc:	e022      	b.n	8003404 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11a      	bne.n	80033fe <socket+0xc2>
 80033c8:	f06f 0305 	mvn.w	r3, #5
 80033cc:	e0bc      	b.n	8003548 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80033d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db02      	blt.n	80033e6 <socket+0xaa>
 80033e0:	f06f 0305 	mvn.w	r3, #5
 80033e4:	e0b0      	b.n	8003548 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80033f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db04      	blt.n	8003402 <socket+0xc6>
 80033f8:	f06f 0305 	mvn.w	r3, #5
 80033fc:	e0a4      	b.n	8003548 <socket+0x20c>
   	      break;
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <socket+0xc8>
   	      break;
 8003402:	bf00      	nop
   	}
   }
	close(sn);
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f8ac 	bl	8003564 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	3301      	adds	r3, #1
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4618      	mov	r0, r3
 8003416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800341a:	f023 030f 	bic.w	r3, r3, #15
 800341e:	b25a      	sxtb	r2, r3
 8003420:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003424:	4313      	orrs	r3, r2
 8003426:	b25b      	sxtb	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	f7ff fd32 	bl	8002e94 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003430:	88bb      	ldrh	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d110      	bne.n	8003458 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003436:	4b46      	ldr	r3, [pc, #280]	@ (8003550 <socket+0x214>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	b291      	uxth	r1, r2
 800343e:	4a44      	ldr	r2, [pc, #272]	@ (8003550 <socket+0x214>)
 8003440:	8011      	strh	r1, [r2, #0]
 8003442:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003444:	4b42      	ldr	r3, [pc, #264]	@ (8003550 <socket+0x214>)
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <socket+0x11c>
 8003450:	4b3f      	ldr	r3, [pc, #252]	@ (8003550 <socket+0x214>)
 8003452:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003456:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3301      	adds	r3, #1
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003464:	461a      	mov	r2, r3
 8003466:	88bb      	ldrh	r3, [r7, #4]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	b29b      	uxth	r3, r3
 800346c:	b2db      	uxtb	r3, r3
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f7ff fd0f 	bl	8002e94 <WIZCHIP_WRITE>
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3301      	adds	r3, #1
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003482:	461a      	mov	r2, r3
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f7ff fd02 	bl	8002e94 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	3301      	adds	r3, #1
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800349c:	2101      	movs	r1, #1
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fcf8 	bl	8002e94 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80034a4:	bf00      	nop
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	3301      	adds	r3, #1
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fca2 	bl	8002dfc <WIZCHIP_READ>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f3      	bne.n	80034a6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2201      	movs	r2, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <socket+0x218>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	4013      	ands	r3, r2
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <socket+0x218>)
 80034da:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 0201 	and.w	r2, r3, #1
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	b21a      	sxth	r2, r3
 80034ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003554 <socket+0x218>)
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	4b17      	ldr	r3, [pc, #92]	@ (8003554 <socket+0x218>)
 80034f8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	b21b      	sxth	r3, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	b21a      	sxth	r2, r3
 8003508:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <socket+0x21c>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b21b      	sxth	r3, r3
 800350e:	4013      	ands	r3, r2
 8003510:	b21b      	sxth	r3, r3
 8003512:	b29a      	uxth	r2, r3
 8003514:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <socket+0x21c>)
 8003516:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	4a10      	ldr	r2, [pc, #64]	@ (800355c <socket+0x220>)
 800351c:	2100      	movs	r1, #0
 800351e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	4a0e      	ldr	r2, [pc, #56]	@ (8003560 <socket+0x224>)
 8003526:	2100      	movs	r1, #0
 8003528:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800352a:	bf00      	nop
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	3301      	adds	r3, #1
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fc5f 	bl	8002dfc <WIZCHIP_READ>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f3      	beq.n	800352c <socket+0x1f0>
   return (int8_t)sn;
 8003544:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}
 8003550:	20000074 	.word	0x20000074
 8003554:	200005f0 	.word	0x200005f0
 8003558:	200005f2 	.word	0x200005f2
 800355c:	200005f4 	.word	0x200005f4
 8003560:	20000604 	.word	0x20000604

08003564 <close>:

int8_t close(uint8_t sn)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b08      	cmp	r3, #8
 8003572:	d902      	bls.n	800357a <close+0x16>
 8003574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003578:	e055      	b.n	8003626 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3301      	adds	r3, #1
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003586:	2110      	movs	r1, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fc83 	bl	8002e94 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800358e:	bf00      	nop
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	3301      	adds	r3, #1
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fc2d 	bl	8002dfc <WIZCHIP_READ>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f3      	bne.n	8003590 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	3301      	adds	r3, #1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035b4:	211f      	movs	r1, #31
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fc6c 	bl	8002e94 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	2201      	movs	r2, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	b21a      	sxth	r2, r3
 80035ca:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <close+0xcc>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	4013      	ands	r3, r2
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <close+0xcc>)
 80035d8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	2201      	movs	r2, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	b21b      	sxth	r3, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	b21a      	sxth	r2, r3
 80035e8:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <close+0xd0>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	4013      	ands	r3, r2
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <close+0xd0>)
 80035f6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003638 <close+0xd4>)
 80035fc:	2100      	movs	r1, #0
 80035fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <close+0xd8>)
 8003606:	2100      	movs	r1, #0
 8003608:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800360a:	bf00      	nop
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	3301      	adds	r3, #1
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fbef 	bl	8002dfc <WIZCHIP_READ>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f3      	bne.n	800360c <close+0xa8>
	return SOCK_OK;
 8003624:	2301      	movs	r3, #1
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200005f0 	.word	0x200005f0
 8003634:	200005f2 	.word	0x200005f2
 8003638:	200005f4 	.word	0x200005f4
 800363c:	20000604 	.word	0x20000604

08003640 <listen>:

int8_t listen(uint8_t sn)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d902      	bls.n	8003656 <listen+0x16>
 8003650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003654:	e049      	b.n	80036ea <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	3301      	adds	r3, #1
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fbcc 	bl	8002dfc <WIZCHIP_READ>
 8003664:	4603      	mov	r3, r0
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <listen+0x34>
 800366e:	f06f 0304 	mvn.w	r3, #4
 8003672:	e03a      	b.n	80036ea <listen+0xaa>
	CHECK_SOCKINIT();
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3301      	adds	r3, #1
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fbbb 	bl	8002dfc <WIZCHIP_READ>
 8003686:	4603      	mov	r3, r0
 8003688:	2b13      	cmp	r3, #19
 800368a:	d002      	beq.n	8003692 <listen+0x52>
 800368c:	f06f 0302 	mvn.w	r3, #2
 8003690:	e02b      	b.n	80036ea <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	3301      	adds	r3, #1
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800369e:	2102      	movs	r1, #2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fbf7 	bl	8002e94 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80036a6:	bf00      	nop
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3301      	adds	r3, #1
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fba1 	bl	8002dfc <WIZCHIP_READ>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f3      	bne.n	80036a8 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80036c0:	e006      	b.n	80036d0 <listen+0x90>
   {
         close(sn);
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff4d 	bl	8003564 <close>
         return SOCKERR_SOCKCLOSED;
 80036ca:	f06f 0303 	mvn.w	r3, #3
 80036ce:	e00c      	b.n	80036ea <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	3301      	adds	r3, #1
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fb8d 	bl	8002dfc <WIZCHIP_READ>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b14      	cmp	r3, #20
 80036e6:	d1ec      	bne.n	80036c2 <listen+0x82>
   }
   return SOCK_OK;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d902      	bls.n	800370a <disconnect+0x16>
 8003704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003708:	e062      	b.n	80037d0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	3301      	adds	r3, #1
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fb72 	bl	8002dfc <WIZCHIP_READ>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	2b01      	cmp	r3, #1
 8003720:	d002      	beq.n	8003728 <disconnect+0x34>
 8003722:	f06f 0304 	mvn.w	r3, #4
 8003726:	e053      	b.n	80037d0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003734:	2108      	movs	r1, #8
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fbac 	bl	8002e94 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800373c:	bf00      	nop
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	3301      	adds	r3, #1
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fb56 	bl	8002dfc <WIZCHIP_READ>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f3      	bne.n	800373e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	2201      	movs	r2, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	b21b      	sxth	r3, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	b21a      	sxth	r2, r3
 8003764:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <disconnect+0xe4>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b21b      	sxth	r3, r3
 800376a:	4013      	ands	r3, r2
 800376c:	b21b      	sxth	r3, r3
 800376e:	b29a      	uxth	r2, r3
 8003770:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <disconnect+0xe4>)
 8003772:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <disconnect+0xe8>)
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	fa42 f303 	asr.w	r3, r2, r3
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <disconnect+0xc2>
 8003788:	2300      	movs	r3, #0
 800378a:	e021      	b.n	80037d0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	3301      	adds	r3, #1
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fb2f 	bl	8002dfc <WIZCHIP_READ>
 800379e:	4603      	mov	r3, r0
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <disconnect+0xc2>
	   {
	      close(sn);
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff feda 	bl	8003564 <close>
	      return SOCKERR_TIMEOUT;
 80037b0:	f06f 030c 	mvn.w	r3, #12
 80037b4:	e00c      	b.n	80037d0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	3301      	adds	r3, #1
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fb1a 	bl	8002dfc <WIZCHIP_READ>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1de      	bne.n	800378c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80037ce:	2301      	movs	r3, #1
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	200005f2 	.word	0x200005f2
 80037dc:	200005f0 	.word	0x200005f0

080037e0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	4613      	mov	r3, r2
 80037ee:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d902      	bls.n	8003804 <send+0x24>
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003802:	e0dd      	b.n	80039c0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3301      	adds	r3, #1
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff faf5 	bl	8002dfc <WIZCHIP_READ>
 8003812:	4603      	mov	r3, r0
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <send+0x42>
 800381c:	f06f 0304 	mvn.w	r3, #4
 8003820:	e0ce      	b.n	80039c0 <send+0x1e0>
   CHECK_SOCKDATA();
 8003822:	88bb      	ldrh	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <send+0x4e>
 8003828:	f06f 030d 	mvn.w	r3, #13
 800382c:	e0c8      	b.n	80039c0 <send+0x1e0>
   tmp = getSn_SR(sn);
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3301      	adds	r3, #1
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fade 	bl	8002dfc <WIZCHIP_READ>
 8003840:	4603      	mov	r3, r0
 8003842:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b17      	cmp	r3, #23
 8003848:	d005      	beq.n	8003856 <send+0x76>
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b1c      	cmp	r3, #28
 800384e:	d002      	beq.n	8003856 <send+0x76>
 8003850:	f06f 0306 	mvn.w	r3, #6
 8003854:	e0b4      	b.n	80039c0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8003856:	4b5c      	ldr	r3, [pc, #368]	@ (80039c8 <send+0x1e8>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	fa42 f303 	asr.w	r3, r2, r3
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d039      	beq.n	80038de <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	3301      	adds	r3, #1
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fac0 	bl	8002dfc <WIZCHIP_READ>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	3301      	adds	r3, #1
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800389a:	2110      	movs	r1, #16
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff faf9 	bl	8002e94 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2201      	movs	r2, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	b21a      	sxth	r2, r3
 80038b0:	4b45      	ldr	r3, [pc, #276]	@ (80039c8 <send+0x1e8>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b21b      	sxth	r3, r3
 80038b6:	4013      	ands	r3, r2
 80038b8:	b21b      	sxth	r3, r3
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b42      	ldr	r3, [pc, #264]	@ (80039c8 <send+0x1e8>)
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	e00d      	b.n	80038de <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <send+0xfa>
      {
         close(sn);
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fe48 	bl	8003564 <close>
         return SOCKERR_TIMEOUT;
 80038d4:	f06f 030c 	mvn.w	r3, #12
 80038d8:	e072      	b.n	80039c0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 80038da:	2300      	movs	r3, #0
 80038dc:	e070      	b.n	80039c0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	3301      	adds	r3, #1
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fa86 	bl	8002dfc <WIZCHIP_READ>
 80038f0:	4603      	mov	r3, r0
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80038f6:	88ba      	ldrh	r2, [r7, #4]
 80038f8:	89bb      	ldrh	r3, [r7, #12]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d901      	bls.n	8003902 <send+0x122>
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fbd3 	bl	80030b0 <getSn_TX_FSR>
 800390a:	4603      	mov	r3, r0
 800390c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	3301      	adds	r3, #1
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fa6e 	bl	8002dfc <WIZCHIP_READ>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	2b17      	cmp	r3, #23
 8003928:	d009      	beq.n	800393e <send+0x15e>
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b1c      	cmp	r3, #28
 800392e:	d006      	beq.n	800393e <send+0x15e>
      {
         close(sn);
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fe16 	bl	8003564 <close>
         return SOCKERR_SOCKSTATUS;
 8003938:	f06f 0306 	mvn.w	r3, #6
 800393c:	e040      	b.n	80039c0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800393e:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <send+0x1ec>)
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	fa42 f303 	asr.w	r3, r2, r3
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <send+0x17e>
 8003952:	88ba      	ldrh	r2, [r7, #4]
 8003954:	89bb      	ldrh	r3, [r7, #12]
 8003956:	429a      	cmp	r2, r3
 8003958:	d901      	bls.n	800395e <send+0x17e>
 800395a:	2300      	movs	r3, #0
 800395c:	e030      	b.n	80039c0 <send+0x1e0>
      if(len <= freesize) break;
 800395e:	88ba      	ldrh	r2, [r7, #4]
 8003960:	89bb      	ldrh	r3, [r7, #12]
 8003962:	429a      	cmp	r2, r3
 8003964:	d900      	bls.n	8003968 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8003966:	e7cc      	b.n	8003902 <send+0x122>
      if(len <= freesize) break;
 8003968:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800396a:	88ba      	ldrh	r2, [r7, #4]
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fc2f 	bl	80031d4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3301      	adds	r3, #1
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003982:	2120      	movs	r1, #32
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff fa85 	bl	8002e94 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800398a:	bf00      	nop
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	3301      	adds	r3, #1
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fa2f 	bl	8002dfc <WIZCHIP_READ>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f3      	bne.n	800398c <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	2201      	movs	r2, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	b21a      	sxth	r2, r3
 80039ae:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <send+0x1e8>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b21b      	sxth	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <send+0x1e8>)
 80039bc:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80039be:	88bb      	ldrh	r3, [r7, #4]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200005f2 	.word	0x200005f2
 80039cc:	200005f0 	.word	0x200005f0

080039d0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	6039      	str	r1, [r7, #0]
 80039da:	71fb      	strb	r3, [r7, #7]
 80039dc:	4613      	mov	r3, r2
 80039de:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d902      	bls.n	80039f4 <recv+0x24>
 80039ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039f2:	e09b      	b.n	8003b2c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	3301      	adds	r3, #1
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff f9fd 	bl	8002dfc <WIZCHIP_READ>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d002      	beq.n	8003a12 <recv+0x42>
 8003a0c:	f06f 0304 	mvn.w	r3, #4
 8003a10:	e08c      	b.n	8003b2c <recv+0x15c>
   CHECK_SOCKDATA();
 8003a12:	88bb      	ldrh	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <recv+0x4e>
 8003a18:	f06f 030d 	mvn.w	r3, #13
 8003a1c:	e086      	b.n	8003b2c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3301      	adds	r3, #1
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff f9e6 	bl	8002dfc <WIZCHIP_READ>
 8003a30:	4603      	mov	r3, r0
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8003a36:	89ba      	ldrh	r2, [r7, #12]
 8003a38:	88bb      	ldrh	r3, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d201      	bcs.n	8003a42 <recv+0x72>
 8003a3e:	89bb      	ldrh	r3, [r7, #12]
 8003a40:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fb7c 	bl	8003142 <getSn_RX_RSR>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	3301      	adds	r3, #1
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff f9ce 	bl	8002dfc <WIZCHIP_READ>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b17      	cmp	r3, #23
 8003a68:	d026      	beq.n	8003ab8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b1c      	cmp	r3, #28
 8003a6e:	d11c      	bne.n	8003aaa <recv+0xda>
            {
               if(recvsize != 0) break;
 8003a70:	89bb      	ldrh	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d133      	bne.n	8003ade <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fb19 	bl	80030b0 <getSn_TX_FSR>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461c      	mov	r4, r3
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	3301      	adds	r3, #1
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f9b4 	bl	8002dfc <WIZCHIP_READ>
 8003a94:	4603      	mov	r3, r0
 8003a96:	029b      	lsls	r3, r3, #10
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	d10d      	bne.n	8003ab8 <recv+0xe8>
               {
                  close(sn);
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fd60 	bl	8003564 <close>
                  return SOCKERR_SOCKSTATUS;
 8003aa4:	f06f 0306 	mvn.w	r3, #6
 8003aa8:	e040      	b.n	8003b2c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fd59 	bl	8003564 <close>
               return SOCKERR_SOCKSTATUS;
 8003ab2:	f06f 0306 	mvn.w	r3, #6
 8003ab6:	e039      	b.n	8003b2c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <recv+0x164>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	fa42 f303 	asr.w	r3, r2, r3
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <recv+0x106>
 8003acc:	89bb      	ldrh	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <recv+0x106>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e02a      	b.n	8003b2c <recv+0x15c>
         if(recvsize != 0) break;
 8003ad6:	89bb      	ldrh	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8003adc:	e7b1      	b.n	8003a42 <recv+0x72>
               if(recvsize != 0) break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <recv+0x114>
         if(recvsize != 0) break;
 8003ae2:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8003ae4:	89ba      	ldrh	r2, [r7, #12]
 8003ae6:	88bb      	ldrh	r3, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d201      	bcs.n	8003af0 <recv+0x120>
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8003af0:	88ba      	ldrh	r2, [r7, #4]
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fbc6 	bl	8003288 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	3301      	adds	r3, #1
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b08:	2140      	movs	r1, #64	@ 0x40
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f9c2 	bl	8002e94 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003b10:	bf00      	nop
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	3301      	adds	r3, #1
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f96c 	bl	8002dfc <WIZCHIP_READ>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f3      	bne.n	8003b12 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003b2a:	88bb      	ldrh	r3, [r7, #4]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd90      	pop	{r4, r7, pc}
 8003b34:	200005f0 	.word	0x200005f0

08003b38 <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	603a      	str	r2, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
 8003b44:	460b      	mov	r3, r1
 8003b46:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d902      	bls.n	8003b58 <ctlsocket+0x20>
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b56:	e0c0      	b.n	8003cda <ctlsocket+0x1a2>
   switch(cstype)
 8003b58:	79bb      	ldrb	r3, [r7, #6]
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	f200 80b9 	bhi.w	8003cd2 <ctlsocket+0x19a>
 8003b60:	a201      	add	r2, pc, #4	@ (adr r2, 8003b68 <ctlsocket+0x30>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b89 	.word	0x08003b89
 8003b6c:	08003bdd 	.word	0x08003bdd
 8003b70:	08003bf7 	.word	0x08003bf7
 8003b74:	08003c15 	.word	0x08003c15
 8003b78:	08003c33 	.word	0x08003c33
 8003b7c:	08003c63 	.word	0x08003c63
 8003b80:	08003c83 	.word	0x08003c83
 8003b84:	08003cb3 	.word	0x08003cb3
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10d      	bne.n	8003bb0 <ctlsocket+0x78>
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	2201      	movs	r2, #1
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	b21a      	sxth	r2, r3
 8003b9e:	4b51      	ldr	r3, [pc, #324]	@ (8003ce4 <ctlsocket+0x1ac>)
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b21b      	sxth	r3, r3
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b21b      	sxth	r3, r3
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	4b4e      	ldr	r3, [pc, #312]	@ (8003ce4 <ctlsocket+0x1ac>)
 8003bac:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8003bae:	e093      	b.n	8003cd8 <ctlsocket+0x1a0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <ctlsocket+0x9e>
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	b21b      	sxth	r3, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	b21a      	sxth	r2, r3
 8003bc4:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <ctlsocket+0x1ac>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b21b      	sxth	r3, r3
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b21b      	sxth	r3, r3
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	4b44      	ldr	r3, [pc, #272]	@ (8003ce4 <ctlsocket+0x1ac>)
 8003bd2:	801a      	strh	r2, [r3, #0]
         break;
 8003bd4:	e080      	b.n	8003cd8 <ctlsocket+0x1a0>
         else return SOCKERR_ARG;
 8003bd6:	f06f 0309 	mvn.w	r3, #9
 8003bda:	e07e      	b.n	8003cda <ctlsocket+0x1a2>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8003bdc:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <ctlsocket+0x1ac>)
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	fa42 f303 	asr.w	r3, r2, r3
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	701a      	strb	r2, [r3, #0]
         //
         break;
 8003bf4:	e070      	b.n	8003cd8 <ctlsocket+0x1a0>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff f8fa 	bl	8002dfc <WIZCHIP_READ>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	801a      	strh	r2, [r3, #0]
         break;
 8003c12:	e061      	b.n	8003cd8 <ctlsocket+0x1a0>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	3301      	adds	r3, #1
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff f8eb 	bl	8002dfc <WIZCHIP_READ>
 8003c26:	4603      	mov	r3, r0
 8003c28:	029b      	lsls	r3, r3, #10
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	801a      	strh	r2, [r3, #0]
         break;
 8003c30:	e052      	b.n	8003cd8 <ctlsocket+0x1a0>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b1f      	cmp	r3, #31
 8003c38:	d902      	bls.n	8003c40 <ctlsocket+0x108>
 8003c3a:	f06f 0309 	mvn.w	r3, #9
 8003c3e:	e04c      	b.n	8003cda <ctlsocket+0x1a2>
         setSn_IR(sn,*(uint8_t*)arg);
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	3301      	adds	r3, #1
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	f7ff f91a 	bl	8002e94 <WIZCHIP_WRITE>
         break;
 8003c60:	e03a      	b.n	8003cd8 <ctlsocket+0x1a0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	3301      	adds	r3, #1
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff f8c4 	bl	8002dfc <WIZCHIP_READ>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
         break;
 8003c80:	e02a      	b.n	8003cd8 <ctlsocket+0x1a0>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b1f      	cmp	r3, #31
 8003c88:	d902      	bls.n	8003c90 <ctlsocket+0x158>
 8003c8a:	f06f 0309 	mvn.w	r3, #9
 8003c8e:	e024      	b.n	8003cda <ctlsocket+0x1a2>
         setSn_IMR(sn,*(uint8_t*)arg);
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	3301      	adds	r3, #1
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4610      	mov	r0, r2
 8003cac:	f7ff f8f2 	bl	8002e94 <WIZCHIP_WRITE>
         break;
 8003cb0:	e012      	b.n	8003cd8 <ctlsocket+0x1a0>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff f89c 	bl	8002dfc <WIZCHIP_READ>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
         break;
 8003cd0:	e002      	b.n	8003cd8 <ctlsocket+0x1a0>
   #endif
      default:
         return SOCKERR_ARG;
 8003cd2:	f06f 0309 	mvn.w	r3, #9
 8003cd6:	e000      	b.n	8003cda <ctlsocket+0x1a2>
   }
   return SOCK_OK;
 8003cd8:	2301      	movs	r3, #1
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200005f0 	.word	0x200005f0

08003ce8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <reg_wizchip_cs_cbfunc+0x16>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d106      	bne.n	8003da4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003d96:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <reg_wizchip_cs_cbfunc+0x40>)
 8003d98:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc4 <reg_wizchip_cs_cbfunc+0x44>)
 8003d9a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003d9c:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <reg_wizchip_cs_cbfunc+0x40>)
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <reg_wizchip_cs_cbfunc+0x48>)
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	e006      	b.n	8003db2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003da4:	4a06      	ldr	r2, [pc, #24]	@ (8003dc0 <reg_wizchip_cs_cbfunc+0x40>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003daa:	4a05      	ldr	r2, [pc, #20]	@ (8003dc0 <reg_wizchip_cs_cbfunc+0x40>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6193      	str	r3, [r2, #24]
   }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000078 	.word	0x20000078
 8003dc4:	08003d05 	.word	0x08003d05
 8003dc8:	08003d13 	.word	0x08003d13

08003dcc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003dd6:	bf00      	nop
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f9      	beq.n	8003dd8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <reg_wizchip_spi_cbfunc+0x24>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003df0:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003df2:	4a0a      	ldr	r2, [pc, #40]	@ (8003e1c <reg_wizchip_spi_cbfunc+0x50>)
 8003df4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003df6:	4b08      	ldr	r3, [pc, #32]	@ (8003e18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003df8:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <reg_wizchip_spi_cbfunc+0x54>)
 8003dfa:	621a      	str	r2, [r3, #32]
 8003dfc:	e006      	b.n	8003e0c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003dfe:	4a06      	ldr	r2, [pc, #24]	@ (8003e18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003e04:	4a04      	ldr	r2, [pc, #16]	@ (8003e18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6213      	str	r3, [r2, #32]
   }
}
 8003e0a:	bf00      	nop
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	20000078 	.word	0x20000078
 8003e1c:	08003d59 	.word	0x08003d59
 8003e20:	08003d69 	.word	0x08003d69

08003e24 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f200 80c5 	bhi.w	8003fce <ctlwizchip+0x1aa>
 8003e44:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <ctlwizchip+0x28>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e93 	.word	0x08003e93
 8003e54:	08003ebf 	.word	0x08003ebf
 8003e58:	08003eb3 	.word	0x08003eb3
 8003e5c:	08003ecd 	.word	0x08003ecd
 8003e60:	08003ed9 	.word	0x08003ed9
 8003e64:	08003ee7 	.word	0x08003ee7
 8003e68:	08003f0d 	.word	0x08003f0d
 8003e6c:	08003f2f 	.word	0x08003f2f
 8003e70:	08003f73 	.word	0x08003f73
 8003e74:	08003f79 	.word	0x08003f79
 8003e78:	08003f81 	.word	0x08003f81
 8003e7c:	08003fd5 	.word	0x08003fd5
 8003e80:	08003f89 	.word	0x08003f89
 8003e84:	08003f97 	.word	0x08003f97
 8003e88:	08003fb3 	.word	0x08003fb3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003e8c:	f000 f8e8 	bl	8004060 <wizchip_sw_reset>
         break;
 8003e90:	e0a1      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f925 	bl	80040f8 <wizchip_init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	e092      	b.n	8003fd8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f9aa 	bl	8004210 <wizchip_clrinterrupt>
         break;
 8003ebc:	e08b      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003ebe:	f000 f9db 	bl	8004278 <wizchip_getinterrupt>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	801a      	strh	r2, [r3, #0]
         break;
 8003eca:	e084      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 f9f6 	bl	80042c2 <wizchip_setinterruptmask>
         break;         
 8003ed6:	e07e      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003ed8:	f000 fa0e 	bl	80042f8 <wizchip_getinterruptmask>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	801a      	strh	r2, [r3, #0]
         break;
 8003ee4:	e077      	b.n	8003fd6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003ef6:	f7fe ffcd 	bl	8002e94 <WIZCHIP_WRITE>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003f06:	f7fe ffc5 	bl	8002e94 <WIZCHIP_WRITE>
         break;
 8003f0a:	e064      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003f0c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003f10:	f7fe ff74 	bl	8002dfc <WIZCHIP_READ>
 8003f14:	4603      	mov	r3, r0
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	b29c      	uxth	r4, r3
 8003f1a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003f1e:	f7fe ff6d 	bl	8002dfc <WIZCHIP_READ>
 8003f22:	4603      	mov	r3, r0
 8003f24:	4423      	add	r3, r4
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	801a      	strh	r2, [r3, #0]
         break;
 8003f2c:	e053      	b.n	8003fd6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <ctlwizchip+0x1bc>)
 8003f30:	789a      	ldrb	r2, [r3, #2]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	4a29      	ldr	r2, [pc, #164]	@ (8003fe0 <ctlwizchip+0x1bc>)
 8003f3c:	78d2      	ldrb	r2, [r2, #3]
 8003f3e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	3302      	adds	r3, #2
 8003f44:	4a26      	ldr	r2, [pc, #152]	@ (8003fe0 <ctlwizchip+0x1bc>)
 8003f46:	7912      	ldrb	r2, [r2, #4]
 8003f48:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3303      	adds	r3, #3
 8003f4e:	4a24      	ldr	r2, [pc, #144]	@ (8003fe0 <ctlwizchip+0x1bc>)
 8003f50:	7952      	ldrb	r2, [r2, #5]
 8003f52:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4a21      	ldr	r2, [pc, #132]	@ (8003fe0 <ctlwizchip+0x1bc>)
 8003f5a:	7992      	ldrb	r2, [r2, #6]
 8003f5c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	3305      	adds	r3, #5
 8003f62:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <ctlwizchip+0x1bc>)
 8003f64:	79d2      	ldrb	r2, [r2, #7]
 8003f66:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	3306      	adds	r3, #6
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
         break;
 8003f70:	e031      	b.n	8003fd6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003f72:	f000 fa13 	bl	800439c <wizphy_reset>
         break;
 8003f76:	e02e      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003f78:	6838      	ldr	r0, [r7, #0]
 8003f7a:	f000 fa36 	bl	80043ea <wizphy_setphyconf>
         break;
 8003f7e:	e02a      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f000 fa75 	bl	8004470 <wizphy_getphyconf>
         break;
 8003f86:	e026      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fad9 	bl	8004544 <wizphy_setphypmode>
 8003f92:	4603      	mov	r3, r0
 8003f94:	e020      	b.n	8003fd8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003f96:	f000 f9e8 	bl	800436a <wizphy_getphypmode>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	2bff      	cmp	r3, #255	@ 0xff
 8003fa2:	d102      	bne.n	8003faa <ctlwizchip+0x186>
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fa8:	e016      	b.n	8003fd8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	7dfa      	ldrb	r2, [r7, #23]
 8003fae:	701a      	strb	r2, [r3, #0]
         break;
 8003fb0:	e011      	b.n	8003fd6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003fb2:	f000 f9c4 	bl	800433e <wizphy_getphylink>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	2bff      	cmp	r3, #255	@ 0xff
 8003fbe:	d102      	bne.n	8003fc6 <ctlwizchip+0x1a2>
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fc4:	e008      	b.n	8003fd8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	7dfa      	ldrb	r2, [r7, #23]
 8003fca:	701a      	strb	r2, [r3, #0]
         break;
 8003fcc:	e003      	b.n	8003fd6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fd2:	e001      	b.n	8003fd8 <ctlwizchip+0x1b4>
         break;
 8003fd4:	bf00      	nop
   }
   return 0;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd90      	pop	{r4, r7, pc}
 8003fe0:	20000078 	.word	0x20000078

08003fe4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d82c      	bhi.n	8004050 <ctlnetwork+0x6c>
 8003ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ffc <ctlnetwork+0x18>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004015 	.word	0x08004015
 8004000:	0800401d 	.word	0x0800401d
 8004004:	08004025 	.word	0x08004025
 8004008:	08004033 	.word	0x08004033
 800400c:	08004041 	.word	0x08004041
 8004010:	08004049 	.word	0x08004049
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004014:	6838      	ldr	r0, [r7, #0]
 8004016:	f000 fadf 	bl	80045d8 <wizchip_setnetinfo>
         break;
 800401a:	e01c      	b.n	8004056 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800401c:	6838      	ldr	r0, [r7, #0]
 800401e:	f000 fb1b 	bl	8004658 <wizchip_getnetinfo>
         break;
 8004022:	e018      	b.n	8004056 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fb55 	bl	80046d8 <wizchip_setnetmode>
 800402e:	4603      	mov	r3, r0
 8004030:	e012      	b.n	8004058 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004032:	f000 fb73 	bl	800471c <wizchip_getnetmode>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	701a      	strb	r2, [r3, #0]
         break;
 800403e:	e00a      	b.n	8004056 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004040:	6838      	ldr	r0, [r7, #0]
 8004042:	f000 fb73 	bl	800472c <wizchip_settimeout>
         break;
 8004046:	e006      	b.n	8004056 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004048:	6838      	ldr	r0, [r7, #0]
 800404a:	f000 fb90 	bl	800476e <wizchip_gettimeout>
         break;
 800404e:	e002      	b.n	8004056 <ctlnetwork+0x72>
      default:
         return -1;
 8004050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004054:	e000      	b.n	8004058 <ctlnetwork+0x74>
   }
   return 0;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	2206      	movs	r2, #6
 800406a:	4619      	mov	r1, r3
 800406c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004070:	f7fe ff5e 	bl	8002f30 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2204      	movs	r2, #4
 800407a:	4619      	mov	r1, r3
 800407c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004080:	f7fe ff56 	bl	8002f30 <WIZCHIP_READ_BUF>
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	2204      	movs	r2, #4
 800408a:	4619      	mov	r1, r3
 800408c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004090:	f7fe ff4e 	bl	8002f30 <WIZCHIP_READ_BUF>
 8004094:	f107 030c 	add.w	r3, r7, #12
 8004098:	2204      	movs	r2, #4
 800409a:	4619      	mov	r1, r3
 800409c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80040a0:	f7fe ff46 	bl	8002f30 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80040a4:	2180      	movs	r1, #128	@ 0x80
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7fe fef4 	bl	8002e94 <WIZCHIP_WRITE>
   getMR(); // for delay
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fe fea5 	bl	8002dfc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	2206      	movs	r2, #6
 80040b6:	4619      	mov	r1, r3
 80040b8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80040bc:	f7fe ff98 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	2204      	movs	r2, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80040cc:	f7fe ff90 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80040d0:	f107 0310 	add.w	r3, r7, #16
 80040d4:	2204      	movs	r2, #4
 80040d6:	4619      	mov	r1, r3
 80040d8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80040dc:	f7fe ff88 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2204      	movs	r2, #4
 80040e6:	4619      	mov	r1, r3
 80040e8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80040ec:	f7fe ff80 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
}
 80040f0:	bf00      	nop
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004106:	f7ff ffab 	bl	8004060 <wizchip_sw_reset>
   if(txsize)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d03b      	beq.n	8004188 <wizchip_init+0x90>
   {
      tmp = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	e015      	b.n	8004146 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	781a      	ldrb	r2, [r3, #0]
 8004124:	7bbb      	ldrb	r3, [r7, #14]
 8004126:	4413      	add	r3, r2
 8004128:	b2db      	uxtb	r3, r3
 800412a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800412c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004130:	2b10      	cmp	r3, #16
 8004132:	dd02      	ble.n	800413a <wizchip_init+0x42>
 8004134:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004138:	e066      	b.n	8004208 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	3301      	adds	r3, #1
 8004142:	b2db      	uxtb	r3, r3
 8004144:	73fb      	strb	r3, [r7, #15]
 8004146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414a:	2b07      	cmp	r3, #7
 800414c:	dde5      	ble.n	800411a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e015      	b.n	8004180 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	3301      	adds	r3, #1
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004162:	4618      	mov	r0, r3
 8004164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	4413      	add	r3, r2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	f7fe fe90 	bl	8002e94 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	3301      	adds	r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004184:	2b07      	cmp	r3, #7
 8004186:	dde5      	ble.n	8004154 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03b      	beq.n	8004206 <wizchip_init+0x10e>
   {
      tmp = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	e015      	b.n	80041c4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	781a      	ldrb	r2, [r3, #0]
 80041a2:	7bbb      	ldrb	r3, [r7, #14]
 80041a4:	4413      	add	r3, r2
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80041aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	dd02      	ble.n	80041b8 <wizchip_init+0xc0>
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041b6:	e027      	b.n	8004208 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80041b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	dde5      	ble.n	8004198 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e015      	b.n	80041fe <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80041d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	3301      	adds	r3, #1
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80041e0:	4618      	mov	r0, r3
 80041e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f7fe fe51 	bl	8002e94 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80041f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004202:	2b07      	cmp	r3, #7
 8004204:	dde5      	ble.n	80041d2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	b29b      	uxth	r3, r3
 8004224:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	f023 030f 	bic.w	r3, r3, #15
 800422c:	b2db      	uxtb	r3, r3
 800422e:	4619      	mov	r1, r3
 8004230:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004234:	f7fe fe2e 	bl	8002e94 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e014      	b.n	8004268 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800423e:	7bba      	ldrb	r2, [r7, #14]
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	fa42 f303 	asr.w	r3, r2, r3
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <wizchip_clrinterrupt+0x52>
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	3301      	adds	r3, #1
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800425a:	211f      	movs	r1, #31
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fe19 	bl	8002e94 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	3301      	adds	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b07      	cmp	r3, #7
 800426c:	d9e7      	bls.n	800423e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800428a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800428e:	f7fe fdb5 	bl	8002dfc <WIZCHIP_READ>
 8004292:	4603      	mov	r3, r0
 8004294:	f023 030f 	bic.w	r3, r3, #15
 8004298:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800429a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 800429e:	f7fe fdad 	bl	8002dfc <WIZCHIP_READ>
 80042a2:	4603      	mov	r3, r0
 80042a4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80042a6:	79bb      	ldrb	r3, [r7, #6]
 80042a8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80042aa:	88bb      	ldrh	r3, [r7, #4]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80042b8:	88bb      	ldrh	r3, [r7, #4]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	4619      	mov	r1, r3
 80042dc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80042e0:	f7fe fdd8 	bl	8002e94 <WIZCHIP_WRITE>
   setSIMR(simr);
 80042e4:	7bbb      	ldrb	r3, [r7, #14]
 80042e6:	4619      	mov	r1, r3
 80042e8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80042ec:	f7fe fdd2 	bl	8002e94 <WIZCHIP_WRITE>
#endif   
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800430a:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800430e:	f7fe fd75 	bl	8002dfc <WIZCHIP_READ>
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004316:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800431a:	f7fe fd6f 	bl	8002dfc <WIZCHIP_READ>
 800431e:	4603      	mov	r3, r0
 8004320:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004322:	79bb      	ldrb	r3, [r7, #6]
 8004324:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004326:	88bb      	ldrh	r3, [r7, #4]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	b29a      	uxth	r2, r3
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4413      	add	r3, r2
 8004332:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004334:	88bb      	ldrh	r3, [r7, #4]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004344:	2300      	movs	r3, #0
 8004346:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004348:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800434c:	f7fe fd56 	bl	8002dfc <WIZCHIP_READ>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800435a:	2301      	movs	r3, #1
 800435c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004374:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004378:	f7fe fd40 	bl	8002dfc <WIZCHIP_READ>
 800437c:	4603      	mov	r3, r0
 800437e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004382:	2b30      	cmp	r3, #48	@ 0x30
 8004384:	d102      	bne.n	800438c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004386:	2301      	movs	r3, #1
 8004388:	71fb      	strb	r3, [r7, #7]
 800438a:	e001      	b.n	8004390 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800438c:	2300      	movs	r3, #0
 800438e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80043a2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80043a6:	f7fe fd29 	bl	8002dfc <WIZCHIP_READ>
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80043b6:	79fb      	ldrb	r3, [r7, #7]
 80043b8:	4619      	mov	r1, r3
 80043ba:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80043be:	f7fe fd69 	bl	8002e94 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80043c2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80043c6:	f7fe fd19 	bl	8002dfc <WIZCHIP_READ>
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043d4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	4619      	mov	r1, r3
 80043da:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80043de:	f7fe fd59 	bl	8002e94 <WIZCHIP_WRITE>
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d104      	bne.n	8004408 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	e003      	b.n	8004410 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800440e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d104      	bne.n	8004422 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800441e:	73fb      	strb	r3, [r7, #15]
 8004420:	e019      	b.n	8004456 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	78db      	ldrb	r3, [r3, #3]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10d      	bne.n	8004446 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	789b      	ldrb	r3, [r3, #2]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d104      	bne.n	800443c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	f043 0318 	orr.w	r3, r3, #24
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e00c      	b.n	8004456 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	f043 0308 	orr.w	r3, r3, #8
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e007      	b.n	8004456 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	789b      	ldrb	r3, [r3, #2]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d103      	bne.n	8004456 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	f043 0310 	orr.w	r3, r3, #16
 8004454:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	4619      	mov	r1, r3
 800445a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800445e:	f7fe fd19 	bl	8002e94 <WIZCHIP_WRITE>
   wizphy_reset();
 8004462:	f7ff ff9b 	bl	800439c <wizphy_reset>
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800447c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004480:	f7fe fcbc 	bl	8002dfc <WIZCHIP_READ>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	119b      	asrs	r3, r3, #6
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d001      	beq.n	80044a6 <wizphy_getphyconf+0x36>
 80044a2:	2b38      	cmp	r3, #56	@ 0x38
 80044a4:	d103      	bne.n	80044ae <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	705a      	strb	r2, [r3, #1]
         break;
 80044ac:	e003      	b.n	80044b6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	705a      	strb	r2, [r3, #1]
         break;
 80044b4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044bc:	3b10      	subs	r3, #16
 80044be:	2b10      	cmp	r3, #16
 80044c0:	bf8c      	ite	hi
 80044c2:	2201      	movhi	r2, #1
 80044c4:	2200      	movls	r2, #0
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	2a00      	cmp	r2, #0
 80044ca:	d10f      	bne.n	80044ec <wizphy_getphyconf+0x7c>
 80044cc:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <wizphy_getphyconf+0xcc>)
 80044ce:	fa22 f303 	lsr.w	r3, r2, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	709a      	strb	r2, [r3, #2]
         break;
 80044ea:	e003      	b.n	80044f4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	709a      	strb	r2, [r3, #2]
         break;
 80044f2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044fa:	3b08      	subs	r3, #8
 80044fc:	2b18      	cmp	r3, #24
 80044fe:	bf8c      	ite	hi
 8004500:	2201      	movhi	r2, #1
 8004502:	2200      	movls	r2, #0
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	2a00      	cmp	r2, #0
 8004508:	d10f      	bne.n	800452a <wizphy_getphyconf+0xba>
 800450a:	4a0d      	ldr	r2, [pc, #52]	@ (8004540 <wizphy_getphyconf+0xd0>)
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	70da      	strb	r2, [r3, #3]
         break;
 8004528:	e003      	b.n	8004532 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	70da      	strb	r2, [r3, #3]
         break;
 8004530:	bf00      	nop
   }
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	00010101 	.word	0x00010101
 8004540:	01010001 	.word	0x01010001

08004544 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004552:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004556:	f7fe fc51 	bl	8002dfc <WIZCHIP_READ>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <wizphy_setphypmode+0x2a>
 8004568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800456c:	e030      	b.n	80045d0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004574:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d104      	bne.n	8004586 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e003      	b.n	800458e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800458c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	4619      	mov	r1, r3
 8004592:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004596:	f7fe fc7d 	bl	8002e94 <WIZCHIP_WRITE>
   wizphy_reset();
 800459a:	f7ff feff 	bl	800439c <wizphy_reset>
   tmp = getPHYCFGR();
 800459e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80045a2:	f7fe fc2b 	bl	8002dfc <WIZCHIP_READ>
 80045a6:	4603      	mov	r3, r0
 80045a8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d106      	bne.n	80045be <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <wizphy_setphypmode+0x88>
 80045ba:	2300      	movs	r3, #0
 80045bc:	e008      	b.n	80045d0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <wizphy_setphypmode+0x88>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e001      	b.n	80045d0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2206      	movs	r2, #6
 80045e4:	4619      	mov	r1, r3
 80045e6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80045ea:	f7fe fd01 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	330e      	adds	r3, #14
 80045f2:	2204      	movs	r2, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80045fa:	f7fe fcf9 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	330a      	adds	r3, #10
 8004602:	2204      	movs	r2, #4
 8004604:	4619      	mov	r1, r3
 8004606:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800460a:	f7fe fcf1 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3306      	adds	r3, #6
 8004612:	2204      	movs	r2, #4
 8004614:	4619      	mov	r1, r3
 8004616:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800461a:	f7fe fce9 	bl	8002ff0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7c9a      	ldrb	r2, [r3, #18]
 8004622:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <wizchip_setnetinfo+0x78>)
 8004624:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7cda      	ldrb	r2, [r3, #19]
 800462a:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <wizchip_setnetinfo+0x78>)
 800462c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7d1a      	ldrb	r2, [r3, #20]
 8004632:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <wizchip_setnetinfo+0x78>)
 8004634:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7d5a      	ldrb	r2, [r3, #21]
 800463a:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <wizchip_setnetinfo+0x78>)
 800463c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	7d9a      	ldrb	r2, [r3, #22]
 8004642:	4b04      	ldr	r3, [pc, #16]	@ (8004654 <wizchip_setnetinfo+0x7c>)
 8004644:	701a      	strb	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000060c 	.word	0x2000060c
 8004654:	20000610 	.word	0x20000610

08004658 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2206      	movs	r2, #6
 8004664:	4619      	mov	r1, r3
 8004666:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800466a:	f7fe fc61 	bl	8002f30 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	330e      	adds	r3, #14
 8004672:	2204      	movs	r2, #4
 8004674:	4619      	mov	r1, r3
 8004676:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800467a:	f7fe fc59 	bl	8002f30 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	330a      	adds	r3, #10
 8004682:	2204      	movs	r2, #4
 8004684:	4619      	mov	r1, r3
 8004686:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800468a:	f7fe fc51 	bl	8002f30 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3306      	adds	r3, #6
 8004692:	2204      	movs	r2, #4
 8004694:	4619      	mov	r1, r3
 8004696:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800469a:	f7fe fc49 	bl	8002f30 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800469e:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <wizchip_getnetinfo+0x78>)
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80046a6:	4b0a      	ldr	r3, [pc, #40]	@ (80046d0 <wizchip_getnetinfo+0x78>)
 80046a8:	785a      	ldrb	r2, [r3, #1]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80046ae:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <wizchip_getnetinfo+0x78>)
 80046b0:	789a      	ldrb	r2, [r3, #2]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80046b6:	4b06      	ldr	r3, [pc, #24]	@ (80046d0 <wizchip_getnetinfo+0x78>)
 80046b8:	78da      	ldrb	r2, [r3, #3]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80046be:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <wizchip_getnetinfo+0x7c>)
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	759a      	strb	r2, [r3, #22]
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	2000060c 	.word	0x2000060c
 80046d4:	20000610 	.word	0x20000610

080046d8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <wizchip_setnetmode+0x1e>
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046f4:	e00e      	b.n	8004714 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fe fb80 	bl	8002dfc <WIZCHIP_READ>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4313      	orrs	r3, r2
 8004706:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	4619      	mov	r1, r3
 800470c:	2000      	movs	r0, #0
 800470e:	f7fe fbc1 	bl	8002e94 <WIZCHIP_WRITE>
   return 0;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004720:	2000      	movs	r0, #0
 8004722:	f7fe fb6b 	bl	8002dfc <WIZCHIP_READ>
 8004726:	4603      	mov	r3, r0
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}

0800472c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800473e:	f7fe fba9 	bl	8002e94 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	885b      	ldrh	r3, [r3, #2]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b29b      	uxth	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004752:	f7fe fb9f 	bl	8002e94 <WIZCHIP_WRITE>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	885b      	ldrh	r3, [r3, #2]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004762:	f7fe fb97 	bl	8002e94 <WIZCHIP_WRITE>
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800476e:	b590      	push	{r4, r7, lr}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004776:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800477a:	f7fe fb3f 	bl	8002dfc <WIZCHIP_READ>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004786:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800478a:	f7fe fb37 	bl	8002dfc <WIZCHIP_READ>
 800478e:	4603      	mov	r3, r0
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	b29c      	uxth	r4, r3
 8004794:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004798:	f7fe fb30 	bl	8002dfc <WIZCHIP_READ>
 800479c:	4603      	mov	r3, r0
 800479e:	4423      	add	r3, r4
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	805a      	strh	r2, [r3, #2]
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd90      	pop	{r4, r7, pc}
	...

080047b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047b4:	f7fe f982 	bl	8002abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047b8:	480c      	ldr	r0, [pc, #48]	@ (80047ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047ba:	490d      	ldr	r1, [pc, #52]	@ (80047f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047bc:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047c0:	e002      	b.n	80047c8 <LoopCopyDataInit>

080047c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047c6:	3304      	adds	r3, #4

080047c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047cc:	d3f9      	bcc.n	80047c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047ce:	4a0a      	ldr	r2, [pc, #40]	@ (80047f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047d0:	4c0a      	ldr	r4, [pc, #40]	@ (80047fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80047d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047d4:	e001      	b.n	80047da <LoopFillZerobss>

080047d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047d8:	3204      	adds	r2, #4

080047da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047dc:	d3fb      	bcc.n	80047d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80047de:	f008 fcc1 	bl	800d164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047e2:	f7fc fe0f 	bl	8001404 <main>
  bx  lr    
 80047e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047f0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80047f4:	0800e54c 	.word	0x0800e54c
  ldr r2, =_sbss
 80047f8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80047fc:	20014b88 	.word	0x20014b88

08004800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004800:	e7fe      	b.n	8004800 <ADC_IRQHandler>
	...

08004804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004808:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <HAL_Init+0x40>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0d      	ldr	r2, [pc, #52]	@ (8004844 <HAL_Init+0x40>)
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004814:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <HAL_Init+0x40>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_Init+0x40>)
 800481a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800481e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004820:	4b08      	ldr	r3, [pc, #32]	@ (8004844 <HAL_Init+0x40>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <HAL_Init+0x40>)
 8004826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800482c:	2003      	movs	r0, #3
 800482e:	f000 f8fc 	bl	8004a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004832:	200f      	movs	r0, #15
 8004834:	f7fe f83a 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004838:	f7fd fe7a 	bl	8002530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023c00 	.word	0x40023c00

08004848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_IncTick+0x20>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_IncTick+0x24>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4413      	add	r3, r2
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <HAL_IncTick+0x24>)
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200000a8 	.word	0x200000a8
 800486c:	20000614 	.word	0x20000614

08004870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  return uwTick;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <HAL_GetTick+0x14>)
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000614 	.word	0x20000614

08004888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004890:	f7ff ffee 	bl	8004870 <HAL_GetTick>
 8004894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048a0:	d005      	beq.n	80048ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048a2:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <HAL_Delay+0x44>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048ae:	bf00      	nop
 80048b0:	f7ff ffde 	bl	8004870 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d8f7      	bhi.n	80048b0 <HAL_Delay+0x28>
  {
  }
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200000a8 	.word	0x200000a8

080048d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048ec:	4013      	ands	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004902:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <__NVIC_SetPriorityGrouping+0x44>)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	60d3      	str	r3, [r2, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800491c:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <__NVIC_GetPriorityGrouping+0x18>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	0a1b      	lsrs	r3, r3, #8
 8004922:	f003 0307 	and.w	r3, r3, #7
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	2b00      	cmp	r3, #0
 8004944:	db0b      	blt.n	800495e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	f003 021f 	and.w	r2, r3, #31
 800494c:	4907      	ldr	r1, [pc, #28]	@ (800496c <__NVIC_EnableIRQ+0x38>)
 800494e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	2001      	movs	r0, #1
 8004956:	fa00 f202 	lsl.w	r2, r0, r2
 800495a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	e000e100 	.word	0xe000e100

08004970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	6039      	str	r1, [r7, #0]
 800497a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800497c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004980:	2b00      	cmp	r3, #0
 8004982:	db0a      	blt.n	800499a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	490c      	ldr	r1, [pc, #48]	@ (80049bc <__NVIC_SetPriority+0x4c>)
 800498a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498e:	0112      	lsls	r2, r2, #4
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	440b      	add	r3, r1
 8004994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004998:	e00a      	b.n	80049b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4908      	ldr	r1, [pc, #32]	@ (80049c0 <__NVIC_SetPriority+0x50>)
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	3b04      	subs	r3, #4
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	440b      	add	r3, r1
 80049ae:	761a      	strb	r2, [r3, #24]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000e100 	.word	0xe000e100
 80049c0:	e000ed00 	.word	0xe000ed00

080049c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	@ 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f1c3 0307 	rsb	r3, r3, #7
 80049de:	2b04      	cmp	r3, #4
 80049e0:	bf28      	it	cs
 80049e2:	2304      	movcs	r3, #4
 80049e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3304      	adds	r3, #4
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d902      	bls.n	80049f4 <NVIC_EncodePriority+0x30>
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3b03      	subs	r3, #3
 80049f2:	e000      	b.n	80049f6 <NVIC_EncodePriority+0x32>
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43da      	mvns	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	401a      	ands	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	43d9      	mvns	r1, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1c:	4313      	orrs	r3, r2
         );
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3724      	adds	r7, #36	@ 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff ff4c 	bl	80048d0 <__NVIC_SetPriorityGrouping>
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a52:	f7ff ff61 	bl	8004918 <__NVIC_GetPriorityGrouping>
 8004a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	6978      	ldr	r0, [r7, #20]
 8004a5e:	f7ff ffb1 	bl	80049c4 <NVIC_EncodePriority>
 8004a62:	4602      	mov	r2, r0
 8004a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ff80 	bl	8004970 <__NVIC_SetPriority>
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff ff54 	bl	8004934 <__NVIC_EnableIRQ>
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004aa0:	f7ff fee6 	bl	8004870 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e099      	b.n	8004be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad0:	e00f      	b.n	8004af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad2:	f7ff fecd 	bl	8004870 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d908      	bls.n	8004af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2203      	movs	r2, #3
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e078      	b.n	8004be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e8      	bne.n	8004ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4b38      	ldr	r3, [pc, #224]	@ (8004bec <HAL_DMA_Init+0x158>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d107      	bne.n	8004b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b54:	4313      	orrs	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d117      	bne.n	8004bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9e9 	bl	8004f70 <DMA_CheckFifoParam>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e016      	b.n	8004be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9a0 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bcc:	223f      	movs	r2, #63	@ 0x3f
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	f010803f 	.word	0xf010803f

08004bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8004e38 <HAL_DMA_IRQHandler+0x248>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a8e      	ldr	r2, [pc, #568]	@ (8004e3c <HAL_DMA_IRQHandler+0x24c>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0a9b      	lsrs	r3, r3, #10
 8004c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	2208      	movs	r2, #8
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	f043 0201 	orr.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c60:	2201      	movs	r2, #1
 8004c62:	409a      	lsls	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	2201      	movs	r2, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	f043 0202 	orr.w	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c96:	2204      	movs	r2, #4
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d012      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc0:	f043 0204 	orr.w	r2, r3, #4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	2210      	movs	r2, #16
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d043      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d03c      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cea:	2210      	movs	r2, #16
 8004cec:	409a      	lsls	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d024      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
 8004d1e:	e01f      	b.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
 8004d30:	e016      	b.n	8004d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0208 	bic.w	r2, r2, #8
 8004d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d64:	2220      	movs	r2, #32
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 808f 	beq.w	8004e90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8087 	beq.w	8004e90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d86:	2220      	movs	r2, #32
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b05      	cmp	r3, #5
 8004d98:	d136      	bne.n	8004e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0216 	bic.w	r2, r2, #22
 8004da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_DMA_IRQHandler+0x1da>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0208 	bic.w	r2, r2, #8
 8004dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dde:	223f      	movs	r2, #63	@ 0x3f
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d07e      	beq.n	8004efc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
        }
        return;
 8004e06:	e079      	b.n	8004efc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01d      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10d      	bne.n	8004e40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d031      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
 8004e34:	e02c      	b.n	8004e90 <HAL_DMA_IRQHandler+0x2a0>
 8004e36:	bf00      	nop
 8004e38:	20000070 	.word	0x20000070
 8004e3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d023      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
 8004e50:	e01e      	b.n	8004e90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0210 	bic.w	r2, r2, #16
 8004e6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d032      	beq.n	8004efe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d022      	beq.n	8004eea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60bb      	str	r3, [r7, #8]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d307      	bcc.n	8004ed8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f2      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x2cc>
 8004ed6:	e000      	b.n	8004eda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ed8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
 8004efa:	e000      	b.n	8004efe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004efc:	bf00      	nop
    }
  }
}
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	3b10      	subs	r3, #16
 8004f14:	4a14      	ldr	r2, [pc, #80]	@ (8004f68 <DMA_CalcBaseAndBitshift+0x64>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f1e:	4a13      	ldr	r2, [pc, #76]	@ (8004f6c <DMA_CalcBaseAndBitshift+0x68>)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d909      	bls.n	8004f46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f44:	e007      	b.n	8004f56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	aaaaaaab 	.word	0xaaaaaaab
 8004f6c:	0800e4ec 	.word	0x0800e4ec

08004f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11f      	bne.n	8004fca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d856      	bhi.n	800503e <DMA_CheckFifoParam+0xce>
 8004f90:	a201      	add	r2, pc, #4	@ (adr r2, 8004f98 <DMA_CheckFifoParam+0x28>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	0800503f 	.word	0x0800503f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d046      	beq.n	8005042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb8:	e043      	b.n	8005042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fc2:	d140      	bne.n	8005046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e03d      	b.n	8005046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd2:	d121      	bne.n	8005018 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d837      	bhi.n	800504a <DMA_CheckFifoParam+0xda>
 8004fda:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <DMA_CheckFifoParam+0x70>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff7 	.word	0x08004ff7
 8004fe8:	08004ff1 	.word	0x08004ff1
 8004fec:	08005009 	.word	0x08005009
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	e030      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d025      	beq.n	800504e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005006:	e022      	b.n	800504e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005010:	d11f      	bne.n	8005052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005016:	e01c      	b.n	8005052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d903      	bls.n	8005026 <DMA_CheckFifoParam+0xb6>
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d003      	beq.n	800502c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005024:	e018      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
      break;
 800502a:	e015      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e00b      	b.n	8005056 <DMA_CheckFifoParam+0xe6>
      break;
 800503e:	bf00      	nop
 8005040:	e00a      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005042:	bf00      	nop
 8005044:	e008      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005046:	bf00      	nop
 8005048:	e006      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
 800504c:	e004      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;   
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
    }
  } 
  
  return status; 
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	@ 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	e165      	b.n	8005350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005084:	2201      	movs	r2, #1
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	f040 8154 	bne.w	800534a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d005      	beq.n	80050ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d130      	bne.n	800511c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	2203      	movs	r2, #3
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	43db      	mvns	r3, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 0201 	and.w	r2, r3, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d017      	beq.n	8005158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	2203      	movs	r2, #3
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4313      	orrs	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d123      	bne.n	80051ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	220f      	movs	r2, #15
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	08da      	lsrs	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3208      	adds	r2, #8
 80051a6:	69b9      	ldr	r1, [r7, #24]
 80051a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0203 	and.w	r2, r3, #3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80ae 	beq.w	800534a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	4b5d      	ldr	r3, [pc, #372]	@ (8005368 <HAL_GPIO_Init+0x300>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f6:	4a5c      	ldr	r2, [pc, #368]	@ (8005368 <HAL_GPIO_Init+0x300>)
 80051f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80051fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005368 <HAL_GPIO_Init+0x300>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800520a:	4a58      	ldr	r2, [pc, #352]	@ (800536c <HAL_GPIO_Init+0x304>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	220f      	movs	r2, #15
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a4f      	ldr	r2, [pc, #316]	@ (8005370 <HAL_GPIO_Init+0x308>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d025      	beq.n	8005282 <HAL_GPIO_Init+0x21a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a4e      	ldr	r2, [pc, #312]	@ (8005374 <HAL_GPIO_Init+0x30c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01f      	beq.n	800527e <HAL_GPIO_Init+0x216>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a4d      	ldr	r2, [pc, #308]	@ (8005378 <HAL_GPIO_Init+0x310>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d019      	beq.n	800527a <HAL_GPIO_Init+0x212>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a4c      	ldr	r2, [pc, #304]	@ (800537c <HAL_GPIO_Init+0x314>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_GPIO_Init+0x20e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a4b      	ldr	r2, [pc, #300]	@ (8005380 <HAL_GPIO_Init+0x318>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00d      	beq.n	8005272 <HAL_GPIO_Init+0x20a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4a      	ldr	r2, [pc, #296]	@ (8005384 <HAL_GPIO_Init+0x31c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <HAL_GPIO_Init+0x206>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a49      	ldr	r2, [pc, #292]	@ (8005388 <HAL_GPIO_Init+0x320>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_GPIO_Init+0x202>
 8005266:	2306      	movs	r3, #6
 8005268:	e00c      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 800526a:	2307      	movs	r3, #7
 800526c:	e00a      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 800526e:	2305      	movs	r3, #5
 8005270:	e008      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 8005272:	2304      	movs	r3, #4
 8005274:	e006      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 8005276:	2303      	movs	r3, #3
 8005278:	e004      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 800527a:	2302      	movs	r3, #2
 800527c:	e002      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_GPIO_Init+0x21c>
 8005282:	2300      	movs	r3, #0
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	f002 0203 	and.w	r2, r2, #3
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	4093      	lsls	r3, r2
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005294:	4935      	ldr	r1, [pc, #212]	@ (800536c <HAL_GPIO_Init+0x304>)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	3302      	adds	r3, #2
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052a2:	4b3a      	ldr	r3, [pc, #232]	@ (800538c <HAL_GPIO_Init+0x324>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052c6:	4a31      	ldr	r2, [pc, #196]	@ (800538c <HAL_GPIO_Init+0x324>)
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052cc:	4b2f      	ldr	r3, [pc, #188]	@ (800538c <HAL_GPIO_Init+0x324>)
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	43db      	mvns	r3, r3
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	4013      	ands	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052f0:	4a26      	ldr	r2, [pc, #152]	@ (800538c <HAL_GPIO_Init+0x324>)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052f6:	4b25      	ldr	r3, [pc, #148]	@ (800538c <HAL_GPIO_Init+0x324>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800531a:	4a1c      	ldr	r2, [pc, #112]	@ (800538c <HAL_GPIO_Init+0x324>)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005320:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <HAL_GPIO_Init+0x324>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005344:	4a11      	ldr	r2, [pc, #68]	@ (800538c <HAL_GPIO_Init+0x324>)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	3301      	adds	r3, #1
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	f67f ae96 	bls.w	8005084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3724      	adds	r7, #36	@ 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	40013800 	.word	0x40013800
 8005370:	40020000 	.word	0x40020000
 8005374:	40020400 	.word	0x40020400
 8005378:	40020800 	.word	0x40020800
 800537c:	40020c00 	.word	0x40020c00
 8005380:	40021000 	.word	0x40021000
 8005384:	40021400 	.word	0x40021400
 8005388:	40021800 	.word	0x40021800
 800538c:	40013c00 	.word	0x40013c00

08005390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
 800539c:	4613      	mov	r3, r2
 800539e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a0:	787b      	ldrb	r3, [r7, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053ac:	e003      	b.n	80053b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053ae:	887b      	ldrh	r3, [r7, #2]
 80053b0:	041a      	lsls	r2, r3, #16
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	619a      	str	r2, [r3, #24]
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	460b      	mov	r3, r1
 80053cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053d4:	887a      	ldrh	r2, [r7, #2]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4013      	ands	r3, r2
 80053da:	041a      	lsls	r2, r3, #16
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	43d9      	mvns	r1, r3
 80053e0:	887b      	ldrh	r3, [r7, #2]
 80053e2:	400b      	ands	r3, r1
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	619a      	str	r2, [r3, #24]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e12b      	b.n	8005662 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd f8ae 	bl	8002580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	@ 0x24
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800545c:	f001 f8e2 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 8005460:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4a81      	ldr	r2, [pc, #516]	@ (800566c <HAL_I2C_Init+0x274>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d807      	bhi.n	800547c <HAL_I2C_Init+0x84>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4a80      	ldr	r2, [pc, #512]	@ (8005670 <HAL_I2C_Init+0x278>)
 8005470:	4293      	cmp	r3, r2
 8005472:	bf94      	ite	ls
 8005474:	2301      	movls	r3, #1
 8005476:	2300      	movhi	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e006      	b.n	800548a <HAL_I2C_Init+0x92>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4a7d      	ldr	r2, [pc, #500]	@ (8005674 <HAL_I2C_Init+0x27c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	bf94      	ite	ls
 8005484:	2301      	movls	r3, #1
 8005486:	2300      	movhi	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0e7      	b.n	8005662 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a78      	ldr	r2, [pc, #480]	@ (8005678 <HAL_I2C_Init+0x280>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0c9b      	lsrs	r3, r3, #18
 800549c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a6a      	ldr	r2, [pc, #424]	@ (800566c <HAL_I2C_Init+0x274>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <HAL_I2C_Init+0xd4>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3301      	adds	r3, #1
 80054ca:	e009      	b.n	80054e0 <HAL_I2C_Init+0xe8>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054d2:	fb02 f303 	mul.w	r3, r2, r3
 80054d6:	4a69      	ldr	r2, [pc, #420]	@ (800567c <HAL_I2C_Init+0x284>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	3301      	adds	r3, #1
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	495c      	ldr	r1, [pc, #368]	@ (800566c <HAL_I2C_Init+0x274>)
 80054fc:	428b      	cmp	r3, r1
 80054fe:	d819      	bhi.n	8005534 <HAL_I2C_Init+0x13c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1e59      	subs	r1, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	fbb1 f3f3 	udiv	r3, r1, r3
 800550e:	1c59      	adds	r1, r3, #1
 8005510:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005514:	400b      	ands	r3, r1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <HAL_I2C_Init+0x138>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1e59      	subs	r1, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	fbb1 f3f3 	udiv	r3, r1, r3
 8005528:	3301      	adds	r3, #1
 800552a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552e:	e051      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 8005530:	2304      	movs	r3, #4
 8005532:	e04f      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d111      	bne.n	8005560 <HAL_I2C_Init+0x168>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1e58      	subs	r0, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	440b      	add	r3, r1
 800554a:	fbb0 f3f3 	udiv	r3, r0, r3
 800554e:	3301      	adds	r3, #1
 8005550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	e012      	b.n	8005586 <HAL_I2C_Init+0x18e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1e58      	subs	r0, r3, #1
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	460b      	mov	r3, r1
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	0099      	lsls	r1, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	fbb0 f3f3 	udiv	r3, r0, r3
 8005576:	3301      	adds	r3, #1
 8005578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf0c      	ite	eq
 8005580:	2301      	moveq	r3, #1
 8005582:	2300      	movne	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Init+0x196>
 800558a:	2301      	movs	r3, #1
 800558c:	e022      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10e      	bne.n	80055b4 <HAL_I2C_Init+0x1bc>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1e58      	subs	r0, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	440b      	add	r3, r1
 80055a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055b2:	e00f      	b.n	80055d4 <HAL_I2C_Init+0x1dc>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1e58      	subs	r0, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	0099      	lsls	r1, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	6809      	ldr	r1, [r1, #0]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005602:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6911      	ldr	r1, [r2, #16]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68d2      	ldr	r2, [r2, #12]
 800560e:	4311      	orrs	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	430b      	orrs	r3, r1
 8005616:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	000186a0 	.word	0x000186a0
 8005670:	001e847f 	.word	0x001e847f
 8005674:	003d08ff 	.word	0x003d08ff
 8005678:	431bde83 	.word	0x431bde83
 800567c:	10624dd3 	.word	0x10624dd3

08005680 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	461a      	mov	r2, r3
 800568e:	4603      	mov	r3, r0
 8005690:	817b      	strh	r3, [r7, #10]
 8005692:	460b      	mov	r3, r1
 8005694:	813b      	strh	r3, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800569a:	f7ff f8e9 	bl	8004870 <HAL_GetTick>
 800569e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	f040 80d9 	bne.w	8005860 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	2319      	movs	r3, #25
 80056b4:	2201      	movs	r2, #1
 80056b6:	496d      	ldr	r1, [pc, #436]	@ (800586c <HAL_I2C_Mem_Write+0x1ec>)
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fc8b 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056c4:	2302      	movs	r3, #2
 80056c6:	e0cc      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_I2C_Mem_Write+0x56>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e0c5      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d007      	beq.n	80056fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800570a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2221      	movs	r2, #33	@ 0x21
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2240      	movs	r2, #64	@ 0x40
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800572c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a4d      	ldr	r2, [pc, #308]	@ (8005870 <HAL_I2C_Mem_Write+0x1f0>)
 800573c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800573e:	88f8      	ldrh	r0, [r7, #6]
 8005740:	893a      	ldrh	r2, [r7, #8]
 8005742:	8979      	ldrh	r1, [r7, #10]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	4603      	mov	r3, r0
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 fac2 	bl	8005cd8 <I2C_RequestMemoryWrite>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d052      	beq.n	8005800 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e081      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fd50 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2b04      	cmp	r3, #4
 8005774:	d107      	bne.n	8005786 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005784:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e06b      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	1c5a      	adds	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d11b      	bne.n	8005800 <HAL_I2C_Mem_Write+0x180>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1aa      	bne.n	800575e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fd43 	bl	8006298 <I2C_WaitOnBTFFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	2b04      	cmp	r3, #4
 800581e:	d107      	bne.n	8005830 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e016      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	00100002 	.word	0x00100002
 8005870:	ffff0000 	.word	0xffff0000

08005874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	@ 0x30
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4603      	mov	r3, r0
 8005884:	817b      	strh	r3, [r7, #10]
 8005886:	460b      	mov	r3, r1
 8005888:	813b      	strh	r3, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800588e:	f7fe ffef 	bl	8004870 <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b20      	cmp	r3, #32
 800589e:	f040 8214 	bne.w	8005cca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2319      	movs	r3, #25
 80058a8:	2201      	movs	r2, #1
 80058aa:	497b      	ldr	r1, [pc, #492]	@ (8005a98 <HAL_I2C_Mem_Read+0x224>)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fb91 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058b8:	2302      	movs	r3, #2
 80058ba:	e207      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_I2C_Mem_Read+0x56>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e200      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d007      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2222      	movs	r2, #34	@ 0x22
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2240      	movs	r2, #64	@ 0x40
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005920:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a5b      	ldr	r2, [pc, #364]	@ (8005a9c <HAL_I2C_Mem_Read+0x228>)
 8005930:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005932:	88f8      	ldrh	r0, [r7, #6]
 8005934:	893a      	ldrh	r2, [r7, #8]
 8005936:	8979      	ldrh	r1, [r7, #10]
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	4603      	mov	r3, r0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fa5e 	bl	8005e04 <I2C_RequestMemoryRead>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1bc      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d113      	bne.n	8005982 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e190      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11b      	bne.n	80059c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005998:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	e170      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d11b      	bne.n	8005a02 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	e150      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a18:	e144      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	f200 80f1 	bhi.w	8005c06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d123      	bne.n	8005a74 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fc79 	bl	8006328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e145      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a72:	e117      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d14e      	bne.n	8005b1a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	2200      	movs	r2, #0
 8005a84:	4906      	ldr	r1, [pc, #24]	@ (8005aa0 <HAL_I2C_Mem_Read+0x22c>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 faa4 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e11a      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
 8005a96:	bf00      	nop
 8005a98:	00100002 	.word	0x00100002
 8005a9c:	ffff0000 	.word	0xffff0000
 8005aa0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b18:	e0c4      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b20:	2200      	movs	r2, #0
 8005b22:	496c      	ldr	r1, [pc, #432]	@ (8005cd4 <HAL_I2C_Mem_Read+0x460>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fa55 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0cb      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691a      	ldr	r2, [r3, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4955      	ldr	r1, [pc, #340]	@ (8005cd4 <HAL_I2C_Mem_Read+0x460>)
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fa27 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e09d      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c04:	e04e      	b.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fb8c 	bl	8006328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e058      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d124      	bne.n	8005ca4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d107      	bne.n	8005c72 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c70:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f aeb6 	bne.w	8005a1a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3728      	adds	r7, #40	@ 0x28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	00010004 	.word	0x00010004

08005cd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	817b      	strh	r3, [r7, #10]
 8005cea:	460b      	mov	r3, r1
 8005cec:	813b      	strh	r3, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f960 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d28:	d103      	bne.n	8005d32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e05f      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d36:	897b      	ldrh	r3, [r7, #10]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	6a3a      	ldr	r2, [r7, #32]
 8005d4a:	492d      	ldr	r1, [pc, #180]	@ (8005e00 <I2C_RequestMemoryWrite+0x128>)
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f9bb 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e04c      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	6a39      	ldr	r1, [r7, #32]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa46 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d107      	bne.n	8005d9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e02b      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9e:	88fb      	ldrh	r3, [r7, #6]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005da4:	893b      	ldrh	r3, [r7, #8]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e021      	b.n	8005df4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005db0:	893b      	ldrh	r3, [r7, #8]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc0:	6a39      	ldr	r1, [r7, #32]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa20 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d107      	bne.n	8005de6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e005      	b.n	8005df6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dea:	893b      	ldrh	r3, [r7, #8]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	00010002 	.word	0x00010002

08005e04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	4611      	mov	r1, r2
 8005e10:	461a      	mov	r2, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	817b      	strh	r3, [r7, #10]
 8005e16:	460b      	mov	r3, r1
 8005e18:	813b      	strh	r3, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 f8c2 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00d      	beq.n	8005e72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e64:	d103      	bne.n	8005e6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e0aa      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e72:	897b      	ldrh	r3, [r7, #10]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	4952      	ldr	r1, [pc, #328]	@ (8005fd0 <I2C_RequestMemoryRead+0x1cc>)
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f91d 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e097      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb0:	6a39      	ldr	r1, [r7, #32]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f9a8 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00d      	beq.n	8005eda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d107      	bne.n	8005ed6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e076      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ee0:	893b      	ldrh	r3, [r7, #8]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	611a      	str	r2, [r3, #16]
 8005eea:	e021      	b.n	8005f30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005efc:	6a39      	ldr	r1, [r7, #32]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f982 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00d      	beq.n	8005f26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d107      	bne.n	8005f22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e050      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f26:	893b      	ldrh	r3, [r7, #8]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	6a39      	ldr	r1, [r7, #32]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f967 	bl	8006208 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d107      	bne.n	8005f58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e035      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f82b 	bl	8005fd4 <I2C_WaitOnFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f92:	d103      	bne.n	8005f9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e013      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fa0:	897b      	ldrh	r3, [r7, #10]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	4906      	ldr	r1, [pc, #24]	@ (8005fd0 <I2C_RequestMemoryRead+0x1cc>)
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f886 	bl	80060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	00010002 	.word	0x00010002

08005fd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe4:	e048      	b.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fec:	d044      	beq.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fe fc3f 	bl	8004870 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d139      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10d      	bne.n	800602a <I2C_WaitOnFlagUntilTimeout+0x56>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	43da      	mvns	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	e00c      	b.n	8006044 <I2C_WaitOnFlagUntilTimeout+0x70>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	43da      	mvns	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e023      	b.n	80060c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10d      	bne.n	800609e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	43da      	mvns	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	e00c      	b.n	80060b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	43da      	mvns	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4013      	ands	r3, r2
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d093      	beq.n	8005fe6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060d6:	e071      	b.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e6:	d123      	bne.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006100:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	f043 0204 	orr.w	r2, r3, #4
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e067      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006136:	d041      	beq.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006138:	f7fe fb9a 	bl	8004870 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d136      	bne.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d10c      	bne.n	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	43da      	mvns	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf14      	ite	ne
 800616a:	2301      	movne	r3, #1
 800616c:	2300      	moveq	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e00b      	b.n	800618a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	43da      	mvns	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4013      	ands	r3, r2
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf14      	ite	ne
 8006184:	2301      	movne	r3, #1
 8006186:	2300      	moveq	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	f043 0220 	orr.w	r2, r3, #32
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e021      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10c      	bne.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	43da      	mvns	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4013      	ands	r3, r2
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e00b      	b.n	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	43da      	mvns	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4013      	ands	r3, r2
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bf14      	ite	ne
 80061f2:	2301      	movne	r3, #1
 80061f4:	2300      	moveq	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af6d 	bne.w	80060d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006214:	e034      	b.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 f8e3 	bl	80063e2 <I2C_IsAcknowledgeFailed>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e034      	b.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800622c:	d028      	beq.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622e:	f7fe fb1f 	bl	8004870 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d302      	bcc.n	8006244 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11d      	bne.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800624e:	2b80      	cmp	r3, #128	@ 0x80
 8006250:	d016      	beq.n	8006280 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e007      	b.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800628a:	2b80      	cmp	r3, #128	@ 0x80
 800628c:	d1c3      	bne.n	8006216 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062a4:	e034      	b.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f89b 	bl	80063e2 <I2C_IsAcknowledgeFailed>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e034      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062bc:	d028      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fe fad7 	bl	8004870 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d302      	bcc.n	80062d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11d      	bne.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d016      	beq.n	8006310 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e007      	b.n	8006320 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b04      	cmp	r3, #4
 800631c:	d1c3      	bne.n	80062a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006334:	e049      	b.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	2b10      	cmp	r3, #16
 8006342:	d119      	bne.n	8006378 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0210 	mvn.w	r2, #16
 800634c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e030      	b.n	80063da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006378:	f7fe fa7a 	bl	8004870 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	429a      	cmp	r2, r3
 8006386:	d302      	bcc.n	800638e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d11d      	bne.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006398:	2b40      	cmp	r3, #64	@ 0x40
 800639a:	d016      	beq.n	80063ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e007      	b.n	80063da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d4:	2b40      	cmp	r3, #64	@ 0x40
 80063d6:	d1ae      	bne.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f8:	d11b      	bne.n	8006432 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006402:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e0cc      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006454:	4b68      	ldr	r3, [pc, #416]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d90c      	bls.n	800647c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b65      	ldr	r3, [pc, #404]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800646a:	4b63      	ldr	r3, [pc, #396]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0b8      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d020      	beq.n	80064ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006494:	4b59      	ldr	r3, [pc, #356]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	4a58      	ldr	r2, [pc, #352]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800649e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064ac:	4b53      	ldr	r3, [pc, #332]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a52      	ldr	r2, [pc, #328]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064b8:	4b50      	ldr	r3, [pc, #320]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	494d      	ldr	r1, [pc, #308]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d044      	beq.n	8006560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d107      	bne.n	80064ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064de:	4b47      	ldr	r3, [pc, #284]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d119      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e07f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d003      	beq.n	80064fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fe:	4b3f      	ldr	r3, [pc, #252]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e06f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650e:	4b3b      	ldr	r3, [pc, #236]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e067      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800651e:	4b37      	ldr	r3, [pc, #220]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 0203 	bic.w	r2, r3, #3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4934      	ldr	r1, [pc, #208]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006530:	f7fe f99e 	bl	8004870 <HAL_GetTick>
 8006534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006536:	e00a      	b.n	800654e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006538:	f7fe f99a 	bl	8004870 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e04f      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	4b2b      	ldr	r3, [pc, #172]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 020c 	and.w	r2, r3, #12
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	429a      	cmp	r2, r3
 800655e:	d1eb      	bne.n	8006538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006560:	4b25      	ldr	r3, [pc, #148]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	429a      	cmp	r2, r3
 800656c:	d20c      	bcs.n	8006588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800656e:	4b22      	ldr	r3, [pc, #136]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006576:	4b20      	ldr	r3, [pc, #128]	@ (80065f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d001      	beq.n	8006588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e032      	b.n	80065ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006594:	4b19      	ldr	r3, [pc, #100]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	4916      	ldr	r1, [pc, #88]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0308 	and.w	r3, r3, #8
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	490e      	ldr	r1, [pc, #56]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065c6:	f000 f887 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	490a      	ldr	r1, [pc, #40]	@ (8006600 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	5ccb      	ldrb	r3, [r1, r3]
 80065da:	fa22 f303 	lsr.w	r3, r2, r3
 80065de:	4a09      	ldr	r2, [pc, #36]	@ (8006604 <HAL_RCC_ClockConfig+0x1c4>)
 80065e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065e2:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <HAL_RCC_ClockConfig+0x1c8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fc f960 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	40023c00 	.word	0x40023c00
 80065fc:	40023800 	.word	0x40023800
 8006600:	0800e4d4 	.word	0x0800e4d4
 8006604:	20000070 	.word	0x20000070
 8006608:	200000a4 	.word	0x200000a4

0800660c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006610:	4b03      	ldr	r3, [pc, #12]	@ (8006620 <HAL_RCC_GetHCLKFreq+0x14>)
 8006612:	681b      	ldr	r3, [r3, #0]
}
 8006614:	4618      	mov	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000070 	.word	0x20000070

08006624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006628:	f7ff fff0 	bl	800660c <HAL_RCC_GetHCLKFreq>
 800662c:	4602      	mov	r2, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	@ (8006644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0a9b      	lsrs	r3, r3, #10
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4903      	ldr	r1, [pc, #12]	@ (8006648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800663a:	5ccb      	ldrb	r3, [r1, r3]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800e4e4 	.word	0x0800e4e4

0800664c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006650:	f7ff ffdc 	bl	800660c <HAL_RCC_GetHCLKFreq>
 8006654:	4602      	mov	r2, r0
 8006656:	4b05      	ldr	r3, [pc, #20]	@ (800666c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0b5b      	lsrs	r3, r3, #13
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4903      	ldr	r1, [pc, #12]	@ (8006670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006662:	5ccb      	ldrb	r3, [r1, r3]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40023800 	.word	0x40023800
 8006670:	0800e4e4 	.word	0x0800e4e4

08006674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	220f      	movs	r2, #15
 8006682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0203 	and.w	r2, r3, #3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006690:	4b0f      	ldr	r3, [pc, #60]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800669c:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	08db      	lsrs	r3, r3, #3
 80066ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <HAL_RCC_GetClockConfig+0x60>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	601a      	str	r2, [r3, #0]
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
 80066d4:	40023c00 	.word	0x40023c00

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066dc:	b0ae      	sub	sp, #184	@ 0xb8
 80066de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066fe:	4bcb      	ldr	r3, [pc, #812]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 030c 	and.w	r3, r3, #12
 8006706:	2b0c      	cmp	r3, #12
 8006708:	f200 8204 	bhi.w	8006b14 <HAL_RCC_GetSysClockFreq+0x43c>
 800670c:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <HAL_RCC_GetSysClockFreq+0x3c>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006749 	.word	0x08006749
 8006718:	08006b15 	.word	0x08006b15
 800671c:	08006b15 	.word	0x08006b15
 8006720:	08006b15 	.word	0x08006b15
 8006724:	08006751 	.word	0x08006751
 8006728:	08006b15 	.word	0x08006b15
 800672c:	08006b15 	.word	0x08006b15
 8006730:	08006b15 	.word	0x08006b15
 8006734:	08006759 	.word	0x08006759
 8006738:	08006b15 	.word	0x08006b15
 800673c:	08006b15 	.word	0x08006b15
 8006740:	08006b15 	.word	0x08006b15
 8006744:	08006949 	.word	0x08006949
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006748:	4bb9      	ldr	r3, [pc, #740]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x358>)
 800674a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800674e:	e1e5      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006750:	4bb7      	ldr	r3, [pc, #732]	@ (8006a30 <HAL_RCC_GetSysClockFreq+0x358>)
 8006752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006756:	e1e1      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006758:	4bb4      	ldr	r3, [pc, #720]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006764:	4bb1      	ldr	r3, [pc, #708]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d071      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006770:	4bae      	ldr	r3, [pc, #696]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	099b      	lsrs	r3, r3, #6
 8006776:	2200      	movs	r2, #0
 8006778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800677c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006780:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800678c:	2300      	movs	r3, #0
 800678e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006796:	4622      	mov	r2, r4
 8006798:	462b      	mov	r3, r5
 800679a:	f04f 0000 	mov.w	r0, #0
 800679e:	f04f 0100 	mov.w	r1, #0
 80067a2:	0159      	lsls	r1, r3, #5
 80067a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067a8:	0150      	lsls	r0, r2, #5
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4621      	mov	r1, r4
 80067b0:	1a51      	subs	r1, r2, r1
 80067b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80067b4:	4629      	mov	r1, r5
 80067b6:	eb63 0301 	sbc.w	r3, r3, r1
 80067ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80067c8:	4649      	mov	r1, r9
 80067ca:	018b      	lsls	r3, r1, #6
 80067cc:	4641      	mov	r1, r8
 80067ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067d2:	4641      	mov	r1, r8
 80067d4:	018a      	lsls	r2, r1, #6
 80067d6:	4641      	mov	r1, r8
 80067d8:	1a51      	subs	r1, r2, r1
 80067da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067dc:	4649      	mov	r1, r9
 80067de:	eb63 0301 	sbc.w	r3, r3, r1
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80067f0:	4649      	mov	r1, r9
 80067f2:	00cb      	lsls	r3, r1, #3
 80067f4:	4641      	mov	r1, r8
 80067f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067fa:	4641      	mov	r1, r8
 80067fc:	00ca      	lsls	r2, r1, #3
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	4603      	mov	r3, r0
 8006804:	4622      	mov	r2, r4
 8006806:	189b      	adds	r3, r3, r2
 8006808:	633b      	str	r3, [r7, #48]	@ 0x30
 800680a:	462b      	mov	r3, r5
 800680c:	460a      	mov	r2, r1
 800680e:	eb42 0303 	adc.w	r3, r2, r3
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006820:	4629      	mov	r1, r5
 8006822:	028b      	lsls	r3, r1, #10
 8006824:	4621      	mov	r1, r4
 8006826:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800682a:	4621      	mov	r1, r4
 800682c:	028a      	lsls	r2, r1, #10
 800682e:	4610      	mov	r0, r2
 8006830:	4619      	mov	r1, r3
 8006832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006836:	2200      	movs	r2, #0
 8006838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800683c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006840:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006844:	f7fa f8ca 	bl	80009dc <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4613      	mov	r3, r2
 800684e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006852:	e067      	b.n	8006924 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006854:	4b75      	ldr	r3, [pc, #468]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	099b      	lsrs	r3, r3, #6
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006860:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800686e:	2300      	movs	r3, #0
 8006870:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006872:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006876:	4622      	mov	r2, r4
 8006878:	462b      	mov	r3, r5
 800687a:	f04f 0000 	mov.w	r0, #0
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	0159      	lsls	r1, r3, #5
 8006884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006888:	0150      	lsls	r0, r2, #5
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4621      	mov	r1, r4
 8006890:	1a51      	subs	r1, r2, r1
 8006892:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006894:	4629      	mov	r1, r5
 8006896:	eb63 0301 	sbc.w	r3, r3, r1
 800689a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80068a8:	4649      	mov	r1, r9
 80068aa:	018b      	lsls	r3, r1, #6
 80068ac:	4641      	mov	r1, r8
 80068ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068b2:	4641      	mov	r1, r8
 80068b4:	018a      	lsls	r2, r1, #6
 80068b6:	4641      	mov	r1, r8
 80068b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80068bc:	4649      	mov	r1, r9
 80068be:	eb63 0b01 	sbc.w	fp, r3, r1
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068d6:	4692      	mov	sl, r2
 80068d8:	469b      	mov	fp, r3
 80068da:	4623      	mov	r3, r4
 80068dc:	eb1a 0303 	adds.w	r3, sl, r3
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	462b      	mov	r3, r5
 80068e4:	eb4b 0303 	adc.w	r3, fp, r3
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80068f6:	4629      	mov	r1, r5
 80068f8:	028b      	lsls	r3, r1, #10
 80068fa:	4621      	mov	r1, r4
 80068fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006900:	4621      	mov	r1, r4
 8006902:	028a      	lsls	r2, r1, #10
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800690c:	2200      	movs	r2, #0
 800690e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006910:	677a      	str	r2, [r7, #116]	@ 0x74
 8006912:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006916:	f7fa f861 	bl	80009dc <__aeabi_uldivmod>
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	4613      	mov	r3, r2
 8006920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006924:	4b41      	ldr	r3, [pc, #260]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	3301      	adds	r3, #1
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8006936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800693a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006946:	e0e9      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006948:	4b38      	ldr	r3, [pc, #224]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006950:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006954:	4b35      	ldr	r3, [pc, #212]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d069      	beq.n	8006a34 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006960:	4b32      	ldr	r3, [pc, #200]	@ (8006a2c <HAL_RCC_GetSysClockFreq+0x354>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	099b      	lsrs	r3, r3, #6
 8006966:	2200      	movs	r2, #0
 8006968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800696a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800696c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800696e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006972:	663b      	str	r3, [r7, #96]	@ 0x60
 8006974:	2300      	movs	r3, #0
 8006976:	667b      	str	r3, [r7, #100]	@ 0x64
 8006978:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800697c:	4622      	mov	r2, r4
 800697e:	462b      	mov	r3, r5
 8006980:	f04f 0000 	mov.w	r0, #0
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	0159      	lsls	r1, r3, #5
 800698a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800698e:	0150      	lsls	r0, r2, #5
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4621      	mov	r1, r4
 8006996:	1a51      	subs	r1, r2, r1
 8006998:	61b9      	str	r1, [r7, #24]
 800699a:	4629      	mov	r1, r5
 800699c:	eb63 0301 	sbc.w	r3, r3, r1
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80069ae:	4659      	mov	r1, fp
 80069b0:	018b      	lsls	r3, r1, #6
 80069b2:	4651      	mov	r1, sl
 80069b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069b8:	4651      	mov	r1, sl
 80069ba:	018a      	lsls	r2, r1, #6
 80069bc:	4651      	mov	r1, sl
 80069be:	ebb2 0801 	subs.w	r8, r2, r1
 80069c2:	4659      	mov	r1, fp
 80069c4:	eb63 0901 	sbc.w	r9, r3, r1
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	f04f 0300 	mov.w	r3, #0
 80069d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069dc:	4690      	mov	r8, r2
 80069de:	4699      	mov	r9, r3
 80069e0:	4623      	mov	r3, r4
 80069e2:	eb18 0303 	adds.w	r3, r8, r3
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	462b      	mov	r3, r5
 80069ea:	eb49 0303 	adc.w	r3, r9, r3
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80069fc:	4629      	mov	r1, r5
 80069fe:	028b      	lsls	r3, r1, #10
 8006a00:	4621      	mov	r1, r4
 8006a02:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a06:	4621      	mov	r1, r4
 8006a08:	028a      	lsls	r2, r1, #10
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a12:	2200      	movs	r2, #0
 8006a14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a16:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006a18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a1c:	f7f9 ffde 	bl	80009dc <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4613      	mov	r3, r2
 8006a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a2a:	e063      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x41c>
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a34:	4b3d      	ldr	r3, [pc, #244]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x454>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	099b      	lsrs	r3, r3, #6
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	4611      	mov	r1, r2
 8006a40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a46:	2300      	movs	r3, #0
 8006a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006a4e:	4642      	mov	r2, r8
 8006a50:	464b      	mov	r3, r9
 8006a52:	f04f 0000 	mov.w	r0, #0
 8006a56:	f04f 0100 	mov.w	r1, #0
 8006a5a:	0159      	lsls	r1, r3, #5
 8006a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a60:	0150      	lsls	r0, r2, #5
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4641      	mov	r1, r8
 8006a68:	1a51      	subs	r1, r2, r1
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006a80:	4659      	mov	r1, fp
 8006a82:	018b      	lsls	r3, r1, #6
 8006a84:	4651      	mov	r1, sl
 8006a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	018a      	lsls	r2, r1, #6
 8006a8e:	4651      	mov	r1, sl
 8006a90:	1a54      	subs	r4, r2, r1
 8006a92:	4659      	mov	r1, fp
 8006a94:	eb63 0501 	sbc.w	r5, r3, r1
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	00eb      	lsls	r3, r5, #3
 8006aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aa6:	00e2      	lsls	r2, r4, #3
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	461d      	mov	r5, r3
 8006aac:	4643      	mov	r3, r8
 8006aae:	18e3      	adds	r3, r4, r3
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	eb45 0303 	adc.w	r3, r5, r3
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	028b      	lsls	r3, r1, #10
 8006aca:	4621      	mov	r1, r4
 8006acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	028a      	lsls	r2, r1, #10
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006adc:	2200      	movs	r2, #0
 8006ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006ae2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ae6:	f7f9 ff79 	bl	80009dc <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4613      	mov	r3, r2
 8006af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006af4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x454>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	0f1b      	lsrs	r3, r3, #28
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b12:	e003      	b.n	8006b1c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b14:	4b06      	ldr	r3, [pc, #24]	@ (8006b30 <HAL_RCC_GetSysClockFreq+0x458>)
 8006b16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	37b8      	adds	r7, #184	@ 0xb8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	00f42400 	.word	0x00f42400

08006b34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e28d      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8083 	beq.w	8006c5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b54:	4b94      	ldr	r3, [pc, #592]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 030c 	and.w	r3, r3, #12
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d019      	beq.n	8006b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b60:	4b91      	ldr	r3, [pc, #580]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d106      	bne.n	8006b7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b6c:	4b8e      	ldr	r3, [pc, #568]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b78:	d00c      	beq.n	8006b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b7a:	4b8b      	ldr	r3, [pc, #556]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006b82:	2b0c      	cmp	r3, #12
 8006b84:	d112      	bne.n	8006bac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b86:	4b88      	ldr	r3, [pc, #544]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b92:	d10b      	bne.n	8006bac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b94:	4b84      	ldr	r3, [pc, #528]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d05b      	beq.n	8006c58 <HAL_RCC_OscConfig+0x124>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d157      	bne.n	8006c58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e25a      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bb4:	d106      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x90>
 8006bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a7b      	ldr	r2, [pc, #492]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	e01d      	b.n	8006c00 <HAL_RCC_OscConfig+0xcc>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCC_OscConfig+0xb4>
 8006bce:	4b76      	ldr	r3, [pc, #472]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a75      	ldr	r2, [pc, #468]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	4b73      	ldr	r3, [pc, #460]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a72      	ldr	r2, [pc, #456]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e00b      	b.n	8006c00 <HAL_RCC_OscConfig+0xcc>
 8006be8:	4b6f      	ldr	r3, [pc, #444]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6e      	ldr	r2, [pc, #440]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d013      	beq.n	8006c30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fd fe32 	bl	8004870 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c10:	f7fd fe2e 	bl	8004870 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b64      	cmp	r3, #100	@ 0x64
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e21f      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c22:	4b61      	ldr	r3, [pc, #388]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0xdc>
 8006c2e:	e014      	b.n	8006c5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c30:	f7fd fe1e 	bl	8004870 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c36:	e008      	b.n	8006c4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c38:	f7fd fe1a 	bl	8004870 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	2b64      	cmp	r3, #100	@ 0x64
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e20b      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c4a:	4b57      	ldr	r3, [pc, #348]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1f0      	bne.n	8006c38 <HAL_RCC_OscConfig+0x104>
 8006c56:	e000      	b.n	8006c5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d06f      	beq.n	8006d46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c66:	4b50      	ldr	r3, [pc, #320]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d017      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c72:	4b4d      	ldr	r3, [pc, #308]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c8a:	4b47      	ldr	r3, [pc, #284]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006c92:	2b0c      	cmp	r3, #12
 8006c94:	d11c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c96:	4b44      	ldr	r3, [pc, #272]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d116      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca2:	4b41      	ldr	r3, [pc, #260]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_RCC_OscConfig+0x186>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d001      	beq.n	8006cba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e1d3      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cba:	4b3b      	ldr	r3, [pc, #236]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	4937      	ldr	r1, [pc, #220]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cce:	e03a      	b.n	8006d46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cd8:	4b34      	ldr	r3, [pc, #208]	@ (8006dac <HAL_RCC_OscConfig+0x278>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cde:	f7fd fdc7 	bl	8004870 <HAL_GetTick>
 8006ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ce6:	f7fd fdc3 	bl	8004870 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e1b4      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0f0      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d04:	4b28      	ldr	r3, [pc, #160]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4925      	ldr	r1, [pc, #148]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	600b      	str	r3, [r1, #0]
 8006d18:	e015      	b.n	8006d46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d1a:	4b24      	ldr	r3, [pc, #144]	@ (8006dac <HAL_RCC_OscConfig+0x278>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fd fda6 	bl	8004870 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d28:	f7fd fda2 	bl	8004870 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e193      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d036      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d016      	beq.n	8006d88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d5a:	4b15      	ldr	r3, [pc, #84]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fd fd86 	bl	8004870 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d68:	f7fd fd82 	bl	8004870 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e173      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <HAL_RCC_OscConfig+0x274>)
 8006d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f0      	beq.n	8006d68 <HAL_RCC_OscConfig+0x234>
 8006d86:	e01b      	b.n	8006dc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d88:	4b09      	ldr	r3, [pc, #36]	@ (8006db0 <HAL_RCC_OscConfig+0x27c>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8e:	f7fd fd6f 	bl	8004870 <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d94:	e00e      	b.n	8006db4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d96:	f7fd fd6b 	bl	8004870 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d907      	bls.n	8006db4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e15c      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
 8006da8:	40023800 	.word	0x40023800
 8006dac:	42470000 	.word	0x42470000
 8006db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006db4:	4b8a      	ldr	r3, [pc, #552]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1ea      	bne.n	8006d96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8097 	beq.w	8006efc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dd2:	4b83      	ldr	r3, [pc, #524]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10f      	bne.n	8006dfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dde:	2300      	movs	r3, #0
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	4a7e      	ldr	r2, [pc, #504]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dee:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfe:	4b79      	ldr	r3, [pc, #484]	@ (8006fe4 <HAL_RCC_OscConfig+0x4b0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d118      	bne.n	8006e3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e0a:	4b76      	ldr	r3, [pc, #472]	@ (8006fe4 <HAL_RCC_OscConfig+0x4b0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a75      	ldr	r2, [pc, #468]	@ (8006fe4 <HAL_RCC_OscConfig+0x4b0>)
 8006e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e16:	f7fd fd2b 	bl	8004870 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e1c:	e008      	b.n	8006e30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e1e:	f7fd fd27 	bl	8004870 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d901      	bls.n	8006e30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e118      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e30:	4b6c      	ldr	r3, [pc, #432]	@ (8006fe4 <HAL_RCC_OscConfig+0x4b0>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0f0      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d106      	bne.n	8006e52 <HAL_RCC_OscConfig+0x31e>
 8006e44:	4b66      	ldr	r3, [pc, #408]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e48:	4a65      	ldr	r2, [pc, #404]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e50:	e01c      	b.n	8006e8c <HAL_RCC_OscConfig+0x358>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0x340>
 8006e5a:	4b61      	ldr	r3, [pc, #388]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5e:	4a60      	ldr	r2, [pc, #384]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e60:	f043 0304 	orr.w	r3, r3, #4
 8006e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e66:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6a:	4a5d      	ldr	r2, [pc, #372]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e6c:	f043 0301 	orr.w	r3, r3, #1
 8006e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e72:	e00b      	b.n	8006e8c <HAL_RCC_OscConfig+0x358>
 8006e74:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e78:	4a59      	ldr	r2, [pc, #356]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e80:	4b57      	ldr	r3, [pc, #348]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e84:	4a56      	ldr	r2, [pc, #344]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006e86:	f023 0304 	bic.w	r3, r3, #4
 8006e8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d015      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e94:	f7fd fcec 	bl	8004870 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e9c:	f7fd fce8 	bl	8004870 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e0d7      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb2:	4b4b      	ldr	r3, [pc, #300]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0ee      	beq.n	8006e9c <HAL_RCC_OscConfig+0x368>
 8006ebe:	e014      	b.n	8006eea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec0:	f7fd fcd6 	bl	8004870 <HAL_GetTick>
 8006ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec8:	f7fd fcd2 	bl	8004870 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e0c1      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ede:	4b40      	ldr	r3, [pc, #256]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1ee      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006ef6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80ad 	beq.w	8007060 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f06:	4b36      	ldr	r3, [pc, #216]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 030c 	and.w	r3, r3, #12
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d060      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d145      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1a:	4b33      	ldr	r3, [pc, #204]	@ (8006fe8 <HAL_RCC_OscConfig+0x4b4>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fd fca6 	bl	8004870 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f28:	f7fd fca2 	bl	8004870 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e093      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f3a:	4b29      	ldr	r3, [pc, #164]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	019b      	lsls	r3, r3, #6
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f68:	061b      	lsls	r3, r3, #24
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f70:	071b      	lsls	r3, r3, #28
 8006f72:	491b      	ldr	r1, [pc, #108]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f78:	4b1b      	ldr	r3, [pc, #108]	@ (8006fe8 <HAL_RCC_OscConfig+0x4b4>)
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7e:	f7fd fc77 	bl	8004870 <HAL_GetTick>
 8006f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f84:	e008      	b.n	8006f98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f86:	f7fd fc73 	bl	8004870 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e064      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f98:	4b11      	ldr	r3, [pc, #68]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0f0      	beq.n	8006f86 <HAL_RCC_OscConfig+0x452>
 8006fa4:	e05c      	b.n	8007060 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa6:	4b10      	ldr	r3, [pc, #64]	@ (8006fe8 <HAL_RCC_OscConfig+0x4b4>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fd fc60 	bl	8004870 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb4:	f7fd fc5c 	bl	8004870 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e04d      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc6:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <HAL_RCC_OscConfig+0x4ac>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f0      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x480>
 8006fd2:	e045      	b.n	8007060 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e040      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	40007000 	.word	0x40007000
 8006fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fec:	4b1f      	ldr	r3, [pc, #124]	@ (800706c <HAL_RCC_OscConfig+0x538>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d030      	beq.n	800705c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d129      	bne.n	800705c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007012:	429a      	cmp	r2, r3
 8007014:	d122      	bne.n	800705c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800701c:	4013      	ands	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007024:	4293      	cmp	r3, r2
 8007026:	d119      	bne.n	800705c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	3b01      	subs	r3, #1
 8007036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d10f      	bne.n	800705c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007048:	429a      	cmp	r2, r3
 800704a:	d107      	bne.n	800705c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007058:	429a      	cmp	r2, r3
 800705a:	d001      	beq.n	8007060 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e000      	b.n	8007062 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40023800 	.word	0x40023800

08007070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e07b      	b.n	800717a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	2b00      	cmp	r3, #0
 8007088:	d108      	bne.n	800709c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007092:	d009      	beq.n	80070a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	61da      	str	r2, [r3, #28]
 800709a:	e005      	b.n	80070a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fb fb0a 	bl	80026dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712c:	ea42 0103 	orr.w	r1, r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	f003 0104 	and.w	r1, r3, #4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714e:	f003 0210 	and.w	r2, r3, #16
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b08c      	sub	sp, #48	@ 0x30
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
 800718e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007190:	2301      	movs	r3, #1
 8007192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_SPI_TransmitReceive+0x26>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e198      	b.n	80074da <HAL_SPI_TransmitReceive+0x358>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071b0:	f7fd fb5e 	bl	8004870 <HAL_GetTick>
 80071b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80071c6:	887b      	ldrh	r3, [r7, #2]
 80071c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d00f      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x70>
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071d8:	d107      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <HAL_SPI_TransmitReceive+0x68>
 80071e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d003      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
 80071ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80071f0:	e16d      	b.n	80074ce <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d005      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x82>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d002      	beq.n	8007204 <HAL_SPI_TransmitReceive+0x82>
 80071fe:	887b      	ldrh	r3, [r7, #2]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d103      	bne.n	800720c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800720a:	e160      	b.n	80074ce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b04      	cmp	r3, #4
 8007216:	d003      	beq.n	8007220 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2205      	movs	r2, #5
 800721c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	887a      	ldrh	r2, [r7, #2]
 8007230:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	887a      	ldrh	r2, [r7, #2]
 8007236:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	887a      	ldrh	r2, [r7, #2]
 8007242:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007260:	2b40      	cmp	r3, #64	@ 0x40
 8007262:	d007      	beq.n	8007274 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007272:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800727c:	d17c      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_SPI_TransmitReceive+0x10a>
 8007286:	8b7b      	ldrh	r3, [r7, #26]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d16a      	bne.n	8007362 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007290:	881a      	ldrh	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800729c:	1c9a      	adds	r2, r3, #2
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b0:	e057      	b.n	8007362 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d11b      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x176>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d016      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x176>
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d113      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	881a      	ldrh	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e0:	1c9a      	adds	r2, r3, #2
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d119      	bne.n	800733a <HAL_SPI_TransmitReceive+0x1b8>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d014      	beq.n	800733a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	b292      	uxth	r2, r2
 800731c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	1c9a      	adds	r2, r3, #2
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007336:	2301      	movs	r3, #1
 8007338:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800733a:	f7fd fa99 	bl	8004870 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007346:	429a      	cmp	r2, r3
 8007348:	d80b      	bhi.n	8007362 <HAL_SPI_TransmitReceive+0x1e0>
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007350:	d007      	beq.n	8007362 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007360:	e0b5      	b.n	80074ce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1a2      	bne.n	80072b2 <HAL_SPI_TransmitReceive+0x130>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d19d      	bne.n	80072b2 <HAL_SPI_TransmitReceive+0x130>
 8007376:	e080      	b.n	800747a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <HAL_SPI_TransmitReceive+0x204>
 8007380:	8b7b      	ldrh	r3, [r7, #26]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d16f      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ac:	e05b      	b.n	8007466 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d11c      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x274>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d017      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0x274>
 80073c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d114      	bne.n	80073f6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	330c      	adds	r3, #12
 80073d6:	7812      	ldrb	r2, [r2, #0]
 80073d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b01      	cmp	r3, #1
 8007402:	d119      	bne.n	8007438 <HAL_SPI_TransmitReceive+0x2b6>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d014      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007434:	2301      	movs	r3, #1
 8007436:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007438:	f7fd fa1a 	bl	8004870 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007444:	429a      	cmp	r2, r3
 8007446:	d803      	bhi.n	8007450 <HAL_SPI_TransmitReceive+0x2ce>
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800744e:	d102      	bne.n	8007456 <HAL_SPI_TransmitReceive+0x2d4>
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007464:	e033      	b.n	80074ce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d19e      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x22c>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d199      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800747a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800747c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f8b8 	bl	80075f4 <SPI_EndRxTxTransaction>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d006      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007496:	e01a      	b.n	80074ce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a0:	2300      	movs	r3, #0
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c4:	e003      	b.n	80074ce <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80074d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3730      	adds	r7, #48	@ 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074f4:	f7fd f9bc 	bl	8004870 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4413      	add	r3, r2
 8007502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007504:	f7fd f9b4 	bl	8004870 <HAL_GetTick>
 8007508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800750a:	4b39      	ldr	r3, [pc, #228]	@ (80075f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	015b      	lsls	r3, r3, #5
 8007510:	0d1b      	lsrs	r3, r3, #20
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800751a:	e054      	b.n	80075c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007522:	d050      	beq.n	80075c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007524:	f7fd f9a4 	bl	8004870 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	429a      	cmp	r2, r3
 8007532:	d902      	bls.n	800753a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d13d      	bne.n	80075b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007552:	d111      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800755c:	d004      	beq.n	8007568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007566:	d107      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007580:	d10f      	bne.n	80075a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e017      	b.n	80075e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d19b      	bne.n	800751c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20000070 	.word	0x20000070

080075f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2201      	movs	r2, #1
 8007608:	2102      	movs	r1, #2
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff ff6a 	bl	80074e4 <SPI_WaitFlagStateUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761a:	f043 0220 	orr.w	r2, r3, #32
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e032      	b.n	800768c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007626:	4b1b      	ldr	r3, [pc, #108]	@ (8007694 <SPI_EndRxTxTransaction+0xa0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <SPI_EndRxTxTransaction+0xa4>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	0d5b      	lsrs	r3, r3, #21
 8007632:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007636:	fb02 f303 	mul.w	r3, r2, r3
 800763a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007644:	d112      	bne.n	800766c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	2180      	movs	r1, #128	@ 0x80
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7ff ff47 	bl	80074e4 <SPI_WaitFlagStateUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d016      	beq.n	800768a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e00f      	b.n	800768c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	3b01      	subs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007682:	2b80      	cmp	r3, #128	@ 0x80
 8007684:	d0f2      	beq.n	800766c <SPI_EndRxTxTransaction+0x78>
 8007686:	e000      	b.n	800768a <SPI_EndRxTxTransaction+0x96>
        break;
 8007688:	bf00      	nop
  }

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000070 	.word	0x20000070
 8007698:	165e9f81 	.word	0x165e9f81

0800769c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e041      	b.n	8007732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fb f852 	bl	800276c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f000 fa1e 	bl	8007b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e046      	b.n	80077e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a23      	ldr	r2, [pc, #140]	@ (80077f0 <HAL_TIM_Base_Start+0xb4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d022      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776e:	d01d      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1f      	ldr	r2, [pc, #124]	@ (80077f4 <HAL_TIM_Base_Start+0xb8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d018      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1e      	ldr	r2, [pc, #120]	@ (80077f8 <HAL_TIM_Base_Start+0xbc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1c      	ldr	r2, [pc, #112]	@ (80077fc <HAL_TIM_Base_Start+0xc0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00e      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1b      	ldr	r2, [pc, #108]	@ (8007800 <HAL_TIM_Base_Start+0xc4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a19      	ldr	r2, [pc, #100]	@ (8007804 <HAL_TIM_Base_Start+0xc8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <HAL_TIM_Base_Start+0x70>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a18      	ldr	r2, [pc, #96]	@ (8007808 <HAL_TIM_Base_Start+0xcc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d111      	bne.n	80077d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 0307 	and.w	r3, r3, #7
 80077b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b06      	cmp	r3, #6
 80077bc:	d010      	beq.n	80077e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0201 	orr.w	r2, r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ce:	e007      	b.n	80077e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40010400 	.word	0x40010400
 8007804:	40014000 	.word	0x40014000
 8007808:	40001800 	.word	0x40001800

0800780c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e04e      	b.n	80078c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a23      	ldr	r2, [pc, #140]	@ (80078d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d022      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800784e:	d01d      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1f      	ldr	r2, [pc, #124]	@ (80078d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d018      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1e      	ldr	r2, [pc, #120]	@ (80078d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d013      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1c      	ldr	r2, [pc, #112]	@ (80078dc <HAL_TIM_Base_Start_IT+0xd0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1b      	ldr	r2, [pc, #108]	@ (80078e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a19      	ldr	r2, [pc, #100]	@ (80078e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x80>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a18      	ldr	r2, [pc, #96]	@ (80078e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d111      	bne.n	80078b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b06      	cmp	r3, #6
 800789c:	d010      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ae:	e007      	b.n	80078c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800
 80078dc:	40000c00 	.word	0x40000c00
 80078e0:	40010400 	.word	0x40010400
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40001800 	.word	0x40001800

080078ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d020      	beq.n	8007950 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01b      	beq.n	8007950 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0202 	mvn.w	r2, #2
 8007920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8d2 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 800793c:	e005      	b.n	800794a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8c4 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f8d5 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d020      	beq.n	800799c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01b      	beq.n	800799c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0204 	mvn.w	r2, #4
 800796c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2202      	movs	r2, #2
 8007972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8ac 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 8007988:	e005      	b.n	8007996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f89e 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f8af 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d020      	beq.n	80079e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01b      	beq.n	80079e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0208 	mvn.w	r2, #8
 80079b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2204      	movs	r2, #4
 80079be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f886 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 80079d4:	e005      	b.n	80079e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f878 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f889 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d020      	beq.n	8007a34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01b      	beq.n	8007a34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f06f 0210 	mvn.w	r2, #16
 8007a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f860 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 8007a20:	e005      	b.n	8007a2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f852 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f863 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0201 	mvn.w	r2, #1
 8007a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fa fba8 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00c      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d007      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f906 	bl	8007c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f834 	bl	8007b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0220 	mvn.w	r2, #32
 8007abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8d8 	bl	8007c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a46      	ldr	r2, [pc, #280]	@ (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d013      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3a:	d00f      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a43      	ldr	r2, [pc, #268]	@ (8007c4c <TIM_Base_SetConfig+0x130>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d00b      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a42      	ldr	r2, [pc, #264]	@ (8007c50 <TIM_Base_SetConfig+0x134>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d007      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a41      	ldr	r2, [pc, #260]	@ (8007c54 <TIM_Base_SetConfig+0x138>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d003      	beq.n	8007b5c <TIM_Base_SetConfig+0x40>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a40      	ldr	r2, [pc, #256]	@ (8007c58 <TIM_Base_SetConfig+0x13c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d108      	bne.n	8007b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a35      	ldr	r2, [pc, #212]	@ (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d02b      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b7c:	d027      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a32      	ldr	r2, [pc, #200]	@ (8007c4c <TIM_Base_SetConfig+0x130>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d023      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a31      	ldr	r2, [pc, #196]	@ (8007c50 <TIM_Base_SetConfig+0x134>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d01f      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a30      	ldr	r2, [pc, #192]	@ (8007c54 <TIM_Base_SetConfig+0x138>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d01b      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a2f      	ldr	r2, [pc, #188]	@ (8007c58 <TIM_Base_SetConfig+0x13c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d017      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8007c5c <TIM_Base_SetConfig+0x140>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8007c60 <TIM_Base_SetConfig+0x144>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00f      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8007c64 <TIM_Base_SetConfig+0x148>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00b      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8007c68 <TIM_Base_SetConfig+0x14c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8007c6c <TIM_Base_SetConfig+0x150>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a29      	ldr	r2, [pc, #164]	@ (8007c70 <TIM_Base_SetConfig+0x154>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d108      	bne.n	8007be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a10      	ldr	r2, [pc, #64]	@ (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d003      	beq.n	8007c14 <TIM_Base_SetConfig+0xf8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a12      	ldr	r2, [pc, #72]	@ (8007c58 <TIM_Base_SetConfig+0x13c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d103      	bne.n	8007c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d105      	bne.n	8007c3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f023 0201 	bic.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	611a      	str	r2, [r3, #16]
  }
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	40010000 	.word	0x40010000
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00
 8007c58:	40010400 	.word	0x40010400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800
 8007c68:	40001800 	.word	0x40001800
 8007c6c:	40001c00 	.word	0x40001c00
 8007c70:	40002000 	.word	0x40002000

08007c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e042      	b.n	8007d34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fa fd74 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2224      	movs	r2, #36	@ 0x24
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f9cb 	bl	800807c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	691a      	ldr	r2, [r3, #16]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	695a      	ldr	r2, [r3, #20]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e04a      	b.n	8007de4 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fa fd24 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2224      	movs	r2, #36	@ 0x24
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f97b 	bl	800807c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695a      	ldr	r2, [r3, #20]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8007da4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	695a      	ldr	r2, [r3, #20]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0208 	orr.w	r2, r2, #8
 8007db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	@ 0x28
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d175      	bne.n	8007ef8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_UART_Transmit+0x2c>
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e06e      	b.n	8007efa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2221      	movs	r2, #33	@ 0x21
 8007e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e2a:	f7fc fd21 	bl	8004870 <HAL_GetTick>
 8007e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	88fa      	ldrh	r2, [r7, #6]
 8007e34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	88fa      	ldrh	r2, [r7, #6]
 8007e3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e44:	d108      	bne.n	8007e58 <HAL_UART_Transmit+0x6c>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	e003      	b.n	8007e60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e60:	e02e      	b.n	8007ec0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2180      	movs	r1, #128	@ 0x80
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 f848 	bl	8007f02 <UART_WaitOnFlagUntilTimeout>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e03a      	b.n	8007efa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	e007      	b.n	8007eb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1cb      	bne.n	8007e62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2140      	movs	r1, #64	@ 0x40
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f814 	bl	8007f02 <UART_WaitOnFlagUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d005      	beq.n	8007eec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e006      	b.n	8007efa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	e000      	b.n	8007efa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ef8:	2302      	movs	r3, #2
  }
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f12:	e03b      	b.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f1a:	d037      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1c:	f7fc fca8 	bl	8004870 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	6a3a      	ldr	r2, [r7, #32]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e03a      	b.n	8007fac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d023      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b80      	cmp	r3, #128	@ 0x80
 8007f48:	d020      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b40      	cmp	r3, #64	@ 0x40
 8007f4e:	d01d      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b08      	cmp	r3, #8
 8007f5c:	d116      	bne.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f81d 	bl	8007fb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e00f      	b.n	8007fac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	4013      	ands	r3, r2
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2301      	moveq	r3, #1
 8007f9e:	2300      	movne	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d0b4      	beq.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b095      	sub	sp, #84	@ 0x54
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3314      	adds	r3, #20
 800800e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008010:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e5      	bne.n	8007ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008028:	2b01      	cmp	r3, #1
 800802a:	d119      	bne.n	8008060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	e853 3f00 	ldrex	r3, [r3]
 800803a:	60bb      	str	r3, [r7, #8]
   return(result);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f023 0310 	bic.w	r3, r3, #16
 8008042:	647b      	str	r3, [r7, #68]	@ 0x44
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	330c      	adds	r3, #12
 800804a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800804c:	61ba      	str	r2, [r7, #24]
 800804e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008050:	6979      	ldr	r1, [r7, #20]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	e841 2300 	strex	r3, r2, [r1]
 8008058:	613b      	str	r3, [r7, #16]
   return(result);
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e5      	bne.n	800802c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800806e:	bf00      	nop
 8008070:	3754      	adds	r7, #84	@ 0x54
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800807c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008080:	b0c0      	sub	sp, #256	@ 0x100
 8008082:	af00      	add	r7, sp, #0
 8008084:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008098:	68d9      	ldr	r1, [r3, #12]
 800809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	ea40 0301 	orr.w	r3, r0, r1
 80080a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	431a      	orrs	r2, r3
 80080bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80080d4:	f021 010c 	bic.w	r1, r1, #12
 80080d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80080e2:	430b      	orrs	r3, r1
 80080e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80080f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080f6:	6999      	ldr	r1, [r3, #24]
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	ea40 0301 	orr.w	r3, r0, r1
 8008102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	4b8f      	ldr	r3, [pc, #572]	@ (8008348 <UART_SetConfig+0x2cc>)
 800810c:	429a      	cmp	r2, r3
 800810e:	d005      	beq.n	800811c <UART_SetConfig+0xa0>
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	4b8d      	ldr	r3, [pc, #564]	@ (800834c <UART_SetConfig+0x2d0>)
 8008118:	429a      	cmp	r2, r3
 800811a:	d104      	bne.n	8008126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800811c:	f7fe fa96 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 8008120:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008124:	e003      	b.n	800812e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008126:	f7fe fa7d 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 800812a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008138:	f040 810c 	bne.w	8008354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800813c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008140:	2200      	movs	r2, #0
 8008142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008146:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800814a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800814e:	4622      	mov	r2, r4
 8008150:	462b      	mov	r3, r5
 8008152:	1891      	adds	r1, r2, r2
 8008154:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008156:	415b      	adcs	r3, r3
 8008158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800815a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800815e:	4621      	mov	r1, r4
 8008160:	eb12 0801 	adds.w	r8, r2, r1
 8008164:	4629      	mov	r1, r5
 8008166:	eb43 0901 	adc.w	r9, r3, r1
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800817a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800817e:	4690      	mov	r8, r2
 8008180:	4699      	mov	r9, r3
 8008182:	4623      	mov	r3, r4
 8008184:	eb18 0303 	adds.w	r3, r8, r3
 8008188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800818c:	462b      	mov	r3, r5
 800818e:	eb49 0303 	adc.w	r3, r9, r3
 8008192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80081a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80081aa:	460b      	mov	r3, r1
 80081ac:	18db      	adds	r3, r3, r3
 80081ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80081b0:	4613      	mov	r3, r2
 80081b2:	eb42 0303 	adc.w	r3, r2, r3
 80081b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80081b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80081bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80081c0:	f7f8 fc0c 	bl	80009dc <__aeabi_uldivmod>
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	4b61      	ldr	r3, [pc, #388]	@ (8008350 <UART_SetConfig+0x2d4>)
 80081ca:	fba3 2302 	umull	r2, r3, r3, r2
 80081ce:	095b      	lsrs	r3, r3, #5
 80081d0:	011c      	lsls	r4, r3, #4
 80081d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081d6:	2200      	movs	r2, #0
 80081d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80081e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80081e4:	4642      	mov	r2, r8
 80081e6:	464b      	mov	r3, r9
 80081e8:	1891      	adds	r1, r2, r2
 80081ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80081ec:	415b      	adcs	r3, r3
 80081ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80081f4:	4641      	mov	r1, r8
 80081f6:	eb12 0a01 	adds.w	sl, r2, r1
 80081fa:	4649      	mov	r1, r9
 80081fc:	eb43 0b01 	adc.w	fp, r3, r1
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800820c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008214:	4692      	mov	sl, r2
 8008216:	469b      	mov	fp, r3
 8008218:	4643      	mov	r3, r8
 800821a:	eb1a 0303 	adds.w	r3, sl, r3
 800821e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008222:	464b      	mov	r3, r9
 8008224:	eb4b 0303 	adc.w	r3, fp, r3
 8008228:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008238:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800823c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008240:	460b      	mov	r3, r1
 8008242:	18db      	adds	r3, r3, r3
 8008244:	643b      	str	r3, [r7, #64]	@ 0x40
 8008246:	4613      	mov	r3, r2
 8008248:	eb42 0303 	adc.w	r3, r2, r3
 800824c:	647b      	str	r3, [r7, #68]	@ 0x44
 800824e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008256:	f7f8 fbc1 	bl	80009dc <__aeabi_uldivmod>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4611      	mov	r1, r2
 8008260:	4b3b      	ldr	r3, [pc, #236]	@ (8008350 <UART_SetConfig+0x2d4>)
 8008262:	fba3 2301 	umull	r2, r3, r3, r1
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	2264      	movs	r2, #100	@ 0x64
 800826a:	fb02 f303 	mul.w	r3, r2, r3
 800826e:	1acb      	subs	r3, r1, r3
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008276:	4b36      	ldr	r3, [pc, #216]	@ (8008350 <UART_SetConfig+0x2d4>)
 8008278:	fba3 2302 	umull	r2, r3, r3, r2
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008284:	441c      	add	r4, r3
 8008286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800828a:	2200      	movs	r2, #0
 800828c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008290:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008298:	4642      	mov	r2, r8
 800829a:	464b      	mov	r3, r9
 800829c:	1891      	adds	r1, r2, r2
 800829e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80082a0:	415b      	adcs	r3, r3
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80082a8:	4641      	mov	r1, r8
 80082aa:	1851      	adds	r1, r2, r1
 80082ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80082ae:	4649      	mov	r1, r9
 80082b0:	414b      	adcs	r3, r1
 80082b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b4:	f04f 0200 	mov.w	r2, #0
 80082b8:	f04f 0300 	mov.w	r3, #0
 80082bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80082c0:	4659      	mov	r1, fp
 80082c2:	00cb      	lsls	r3, r1, #3
 80082c4:	4651      	mov	r1, sl
 80082c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ca:	4651      	mov	r1, sl
 80082cc:	00ca      	lsls	r2, r1, #3
 80082ce:	4610      	mov	r0, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	4642      	mov	r2, r8
 80082d6:	189b      	adds	r3, r3, r2
 80082d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082dc:	464b      	mov	r3, r9
 80082de:	460a      	mov	r2, r1
 80082e0:	eb42 0303 	adc.w	r3, r2, r3
 80082e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80082f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80082fc:	460b      	mov	r3, r1
 80082fe:	18db      	adds	r3, r3, r3
 8008300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008302:	4613      	mov	r3, r2
 8008304:	eb42 0303 	adc.w	r3, r2, r3
 8008308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800830a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800830e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008312:	f7f8 fb63 	bl	80009dc <__aeabi_uldivmod>
 8008316:	4602      	mov	r2, r0
 8008318:	460b      	mov	r3, r1
 800831a:	4b0d      	ldr	r3, [pc, #52]	@ (8008350 <UART_SetConfig+0x2d4>)
 800831c:	fba3 1302 	umull	r1, r3, r3, r2
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	2164      	movs	r1, #100	@ 0x64
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	3332      	adds	r3, #50	@ 0x32
 800832e:	4a08      	ldr	r2, [pc, #32]	@ (8008350 <UART_SetConfig+0x2d4>)
 8008330:	fba2 2303 	umull	r2, r3, r2, r3
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	f003 0207 	and.w	r2, r3, #7
 800833a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4422      	add	r2, r4
 8008342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008344:	e106      	b.n	8008554 <UART_SetConfig+0x4d8>
 8008346:	bf00      	nop
 8008348:	40011000 	.word	0x40011000
 800834c:	40011400 	.word	0x40011400
 8008350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008358:	2200      	movs	r2, #0
 800835a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800835e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008366:	4642      	mov	r2, r8
 8008368:	464b      	mov	r3, r9
 800836a:	1891      	adds	r1, r2, r2
 800836c:	6239      	str	r1, [r7, #32]
 800836e:	415b      	adcs	r3, r3
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
 8008372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008376:	4641      	mov	r1, r8
 8008378:	1854      	adds	r4, r2, r1
 800837a:	4649      	mov	r1, r9
 800837c:	eb43 0501 	adc.w	r5, r3, r1
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	f04f 0300 	mov.w	r3, #0
 8008388:	00eb      	lsls	r3, r5, #3
 800838a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800838e:	00e2      	lsls	r2, r4, #3
 8008390:	4614      	mov	r4, r2
 8008392:	461d      	mov	r5, r3
 8008394:	4643      	mov	r3, r8
 8008396:	18e3      	adds	r3, r4, r3
 8008398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800839c:	464b      	mov	r3, r9
 800839e:	eb45 0303 	adc.w	r3, r5, r3
 80083a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80083a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80083b6:	f04f 0200 	mov.w	r2, #0
 80083ba:	f04f 0300 	mov.w	r3, #0
 80083be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80083c2:	4629      	mov	r1, r5
 80083c4:	008b      	lsls	r3, r1, #2
 80083c6:	4621      	mov	r1, r4
 80083c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083cc:	4621      	mov	r1, r4
 80083ce:	008a      	lsls	r2, r1, #2
 80083d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80083d4:	f7f8 fb02 	bl	80009dc <__aeabi_uldivmod>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4b60      	ldr	r3, [pc, #384]	@ (8008560 <UART_SetConfig+0x4e4>)
 80083de:	fba3 2302 	umull	r2, r3, r3, r2
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	011c      	lsls	r4, r3, #4
 80083e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80083f8:	4642      	mov	r2, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	1891      	adds	r1, r2, r2
 80083fe:	61b9      	str	r1, [r7, #24]
 8008400:	415b      	adcs	r3, r3
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008408:	4641      	mov	r1, r8
 800840a:	1851      	adds	r1, r2, r1
 800840c:	6139      	str	r1, [r7, #16]
 800840e:	4649      	mov	r1, r9
 8008410:	414b      	adcs	r3, r1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008420:	4659      	mov	r1, fp
 8008422:	00cb      	lsls	r3, r1, #3
 8008424:	4651      	mov	r1, sl
 8008426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800842a:	4651      	mov	r1, sl
 800842c:	00ca      	lsls	r2, r1, #3
 800842e:	4610      	mov	r0, r2
 8008430:	4619      	mov	r1, r3
 8008432:	4603      	mov	r3, r0
 8008434:	4642      	mov	r2, r8
 8008436:	189b      	adds	r3, r3, r2
 8008438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800843c:	464b      	mov	r3, r9
 800843e:	460a      	mov	r2, r1
 8008440:	eb42 0303 	adc.w	r3, r2, r3
 8008444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008452:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008460:	4649      	mov	r1, r9
 8008462:	008b      	lsls	r3, r1, #2
 8008464:	4641      	mov	r1, r8
 8008466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800846a:	4641      	mov	r1, r8
 800846c:	008a      	lsls	r2, r1, #2
 800846e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008472:	f7f8 fab3 	bl	80009dc <__aeabi_uldivmod>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4611      	mov	r1, r2
 800847c:	4b38      	ldr	r3, [pc, #224]	@ (8008560 <UART_SetConfig+0x4e4>)
 800847e:	fba3 2301 	umull	r2, r3, r3, r1
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	2264      	movs	r2, #100	@ 0x64
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	1acb      	subs	r3, r1, r3
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	3332      	adds	r3, #50	@ 0x32
 8008490:	4a33      	ldr	r2, [pc, #204]	@ (8008560 <UART_SetConfig+0x4e4>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800849c:	441c      	add	r4, r3
 800849e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084a2:	2200      	movs	r2, #0
 80084a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80084a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80084a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80084ac:	4642      	mov	r2, r8
 80084ae:	464b      	mov	r3, r9
 80084b0:	1891      	adds	r1, r2, r2
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	415b      	adcs	r3, r3
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084bc:	4641      	mov	r1, r8
 80084be:	1851      	adds	r1, r2, r1
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	4649      	mov	r1, r9
 80084c4:	414b      	adcs	r3, r1
 80084c6:	607b      	str	r3, [r7, #4]
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80084d4:	4659      	mov	r1, fp
 80084d6:	00cb      	lsls	r3, r1, #3
 80084d8:	4651      	mov	r1, sl
 80084da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084de:	4651      	mov	r1, sl
 80084e0:	00ca      	lsls	r2, r1, #3
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	4642      	mov	r2, r8
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ee:	464b      	mov	r3, r9
 80084f0:	460a      	mov	r2, r1
 80084f2:	eb42 0303 	adc.w	r3, r2, r3
 80084f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	663b      	str	r3, [r7, #96]	@ 0x60
 8008502:	667a      	str	r2, [r7, #100]	@ 0x64
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	f04f 0300 	mov.w	r3, #0
 800850c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008510:	4649      	mov	r1, r9
 8008512:	008b      	lsls	r3, r1, #2
 8008514:	4641      	mov	r1, r8
 8008516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800851a:	4641      	mov	r1, r8
 800851c:	008a      	lsls	r2, r1, #2
 800851e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008522:	f7f8 fa5b 	bl	80009dc <__aeabi_uldivmod>
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <UART_SetConfig+0x4e4>)
 800852c:	fba3 1302 	umull	r1, r3, r3, r2
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	2164      	movs	r1, #100	@ 0x64
 8008534:	fb01 f303 	mul.w	r3, r1, r3
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	3332      	adds	r3, #50	@ 0x32
 800853e:	4a08      	ldr	r2, [pc, #32]	@ (8008560 <UART_SetConfig+0x4e4>)
 8008540:	fba2 2303 	umull	r2, r3, r2, r3
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	f003 020f 	and.w	r2, r3, #15
 800854a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4422      	add	r2, r4
 8008552:	609a      	str	r2, [r3, #8]
}
 8008554:	bf00      	nop
 8008556:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800855a:	46bd      	mov	sp, r7
 800855c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008560:	51eb851f 	.word	0x51eb851f

08008564 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f103 0208 	add.w	r2, r3, #8
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800857c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f103 0208 	add.w	r2, r3, #8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f103 0208 	add.w	r2, r3, #8
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	601a      	str	r2, [r3, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800861c:	d103      	bne.n	8008626 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e00c      	b.n	8008640 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3308      	adds	r3, #8
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	e002      	b.n	8008634 <vListInsert+0x2e>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	429a      	cmp	r2, r3
 800863e:	d2f6      	bcs.n	800862e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
}
 800866c:	bf00      	nop
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	6892      	ldr	r2, [r2, #8]
 800868e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6852      	ldr	r2, [r2, #4]
 8008698:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d103      	bne.n	80086ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	1e5a      	subs	r2, r3, #1
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <xQueueGenericReset+0x2c>
        __asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60bb      	str	r3, [r7, #8]
    }
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80086f8:	f002 f930 	bl	800a95c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008704:	68f9      	ldr	r1, [r7, #12]
 8008706:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008708:	fb01 f303 	mul.w	r3, r1, r3
 800870c:	441a      	add	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	3b01      	subs	r3, #1
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	441a      	add	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	22ff      	movs	r2, #255	@ 0xff
 800873c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	22ff      	movs	r2, #255	@ 0xff
 8008744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d114      	bne.n	8008778 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01a      	beq.n	800878c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3310      	adds	r3, #16
 800875a:	4618      	mov	r0, r3
 800875c:	f001 f972 	bl	8009a44 <xTaskRemoveFromEventList>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d012      	beq.n	800878c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008766:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <xQueueGenericReset+0xd0>)
 8008768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	e009      	b.n	800878c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3310      	adds	r3, #16
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff fef1 	bl	8008564 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3324      	adds	r3, #36	@ 0x24
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff feec 	bl	8008564 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800878c:	f002 f918 	bl	800a9c0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008790:	2301      	movs	r3, #1
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	e000ed04 	.word	0xe000ed04

080087a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08c      	sub	sp, #48	@ 0x30
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10b      	bne.n	80087cc <xQueueGenericCreate+0x2c>
        __asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	61bb      	str	r3, [r7, #24]
    }
 80087c6:	bf00      	nop
 80087c8:	bf00      	nop
 80087ca:	e7fd      	b.n	80087c8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	fb02 f303 	mul.w	r3, r2, r3
 80087d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d006      	beq.n	80087ea <xQueueGenericCreate+0x4a>
 80087dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d101      	bne.n	80087ee <xQueueGenericCreate+0x4e>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <xQueueGenericCreate+0x50>
 80087ee:	2300      	movs	r3, #0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10b      	bne.n	800880c <xQueueGenericCreate+0x6c>
        __asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	617b      	str	r3, [r7, #20]
    }
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008812:	d90b      	bls.n	800882c <xQueueGenericCreate+0x8c>
        __asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	613b      	str	r3, [r7, #16]
    }
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882e:	3350      	adds	r3, #80	@ 0x50
 8008830:	4618      	mov	r0, r3
 8008832:	f002 f9c5 	bl	800abc0 <pvPortMalloc>
 8008836:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00d      	beq.n	800885a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	3350      	adds	r3, #80	@ 0x50
 8008846:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008848:	79fa      	ldrb	r2, [r7, #7]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	4613      	mov	r3, r2
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 f805 	bl	8008864 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800885a:	6a3b      	ldr	r3, [r7, #32]
    }
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	@ 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d103      	bne.n	8008880 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e002      	b.n	8008886 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008892:	2101      	movs	r1, #1
 8008894:	69b8      	ldr	r0, [r7, #24]
 8008896:	f7ff ff19 	bl	80086cc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	2073      	movs	r0, #115	@ 0x73
 80088aa:	f003 faff 	bl	800beac <SEGGER_SYSVIEW_RecordU32x3>
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b090      	sub	sp, #64	@ 0x40
 80088bc:	af02      	add	r7, sp, #8
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <xQueueGenericSend+0x34>
        __asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d103      	bne.n	80088fa <xQueueGenericSend+0x42>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <xQueueGenericSend+0x46>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <xQueueGenericSend+0x48>
 80088fe:	2300      	movs	r3, #0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10b      	bne.n	800891c <xQueueGenericSend+0x64>
        __asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d103      	bne.n	800892a <xQueueGenericSend+0x72>
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008926:	2b01      	cmp	r3, #1
 8008928:	d101      	bne.n	800892e <xQueueGenericSend+0x76>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <xQueueGenericSend+0x78>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10b      	bne.n	800894c <xQueueGenericSend+0x94>
        __asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	623b      	str	r3, [r7, #32]
    }
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800894c:	f001 fa1e 	bl	8009d8c <xTaskGetSchedulerState>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d102      	bne.n	800895c <xQueueGenericSend+0xa4>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <xQueueGenericSend+0xa8>
 800895c:	2301      	movs	r3, #1
 800895e:	e000      	b.n	8008962 <xQueueGenericSend+0xaa>
 8008960:	2300      	movs	r3, #0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <xQueueGenericSend+0xc6>
        __asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	61fb      	str	r3, [r7, #28]
    }
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800897e:	f001 ffed 	bl	800a95c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898a:	429a      	cmp	r2, r3
 800898c:	d302      	bcc.n	8008994 <xQueueGenericSend+0xdc>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d136      	bne.n	8008a02 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	4618      	mov	r0, r3
 8008998:	f004 f814 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	460b      	mov	r3, r1
 80089a6:	4601      	mov	r1, r0
 80089a8:	205a      	movs	r0, #90	@ 0x5a
 80089aa:	f003 faf5 	bl	800bf98 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089b4:	f000 fa80 	bl	8008eb8 <prvCopyDataToQueue>
 80089b8:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d010      	beq.n	80089e4 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	3324      	adds	r3, #36	@ 0x24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 f83c 	bl	8009a44 <xTaskRemoveFromEventList>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d013      	beq.n	80089fa <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80089d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008b08 <xQueueGenericSend+0x250>)
 80089d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	e00a      	b.n	80089fa <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d007      	beq.n	80089fa <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80089ea:	4b47      	ldr	r3, [pc, #284]	@ (8008b08 <xQueueGenericSend+0x250>)
 80089ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80089fa:	f001 ffe1 	bl	800a9c0 <vPortExitCritical>
                return pdPASS;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e07d      	b.n	8008afe <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d110      	bne.n	8008a2a <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008a08:	f001 ffda 	bl	800a9c0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f003 ffd8 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4601      	mov	r1, r0
 8008a20:	205a      	movs	r0, #90	@ 0x5a
 8008a22:	f003 fab9 	bl	800bf98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e069      	b.n	8008afe <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d106      	bne.n	8008a3e <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008a30:	f107 0314 	add.w	r3, r7, #20
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 f86d 	bl	8009b14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008a3e:	f001 ffbf 	bl	800a9c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008a42:	f000 fdaf 	bl	80095a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008a46:	f001 ff89 	bl	800a95c <vPortEnterCritical>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a50:	b25b      	sxtb	r3, r3
 8008a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a56:	d103      	bne.n	8008a60 <xQueueGenericSend+0x1a8>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a6c:	d103      	bne.n	8008a76 <xQueueGenericSend+0x1be>
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a76:	f001 ffa3 	bl	800a9c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a7a:	1d3a      	adds	r2, r7, #4
 8008a7c:	f107 0314 	add.w	r3, r7, #20
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f001 f85c 	bl	8009b40 <xTaskCheckForTimeOut>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d124      	bne.n	8008ad8 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a90:	f000 fb0a 	bl	80090a8 <prvIsQueueFull>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d018      	beq.n	8008acc <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	3310      	adds	r3, #16
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	4611      	mov	r1, r2
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 ff78 	bl	8009998 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008aaa:	f000 fa95 	bl	8008fd8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008aae:	f000 fd87 	bl	80095c0 <xTaskResumeAll>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f af62 	bne.w	800897e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8008aba:	4b13      	ldr	r3, [pc, #76]	@ (8008b08 <xQueueGenericSend+0x250>)
 8008abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	e758      	b.n	800897e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ace:	f000 fa83 	bl	8008fd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008ad2:	f000 fd75 	bl	80095c0 <xTaskResumeAll>
 8008ad6:	e752      	b.n	800897e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ada:	f000 fa7d 	bl	8008fd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008ade:	f000 fd6f 	bl	80095c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f003 ff6d 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	460b      	mov	r3, r1
 8008af4:	4601      	mov	r1, r0
 8008af6:	205a      	movs	r0, #90	@ 0x5a
 8008af8:	f003 fa4e 	bl	800bf98 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008afc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3738      	adds	r7, #56	@ 0x38
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b090      	sub	sp, #64	@ 0x40
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10b      	bne.n	8008b3c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d103      	bne.n	8008b4a <xQueueGenericSendFromISR+0x3e>
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <xQueueGenericSendFromISR+0x42>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <xQueueGenericSendFromISR+0x44>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10b      	bne.n	8008b6c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	e7fd      	b.n	8008b68 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d103      	bne.n	8008b7a <xQueueGenericSendFromISR+0x6e>
 8008b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <xQueueGenericSendFromISR+0x72>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <xQueueGenericSendFromISR+0x74>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10b      	bne.n	8008b9c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	623b      	str	r3, [r7, #32]
    }
 8008b96:	bf00      	nop
 8008b98:	bf00      	nop
 8008b9a:	e7fd      	b.n	8008b98 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b9c:	f001 ffce 	bl	800ab3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008ba0:	f3ef 8211 	mrs	r2, BASEPRI
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	61fa      	str	r2, [r7, #28]
 8008bb6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8008bb8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bba:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d302      	bcc.n	8008bce <xQueueGenericSendFromISR+0xc2>
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d149      	bne.n	8008c62 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be0:	4618      	mov	r0, r3
 8008be2:	f003 feef 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008be6:	4601      	mov	r1, r0
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	461a      	mov	r2, r3
 8008bec:	2060      	movs	r0, #96	@ 0x60
 8008bee:	f003 f903 	bl	800bdf8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	68b9      	ldr	r1, [r7, #8]
 8008bf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bf8:	f000 f95e 	bl	8008eb8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008bfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c04:	d112      	bne.n	8008c2c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d026      	beq.n	8008c5c <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c10:	3324      	adds	r3, #36	@ 0x24
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 ff16 	bl	8009a44 <xTaskRemoveFromEventList>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01e      	beq.n	8008c5c <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01b      	beq.n	8008c5c <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	e017      	b.n	8008c5c <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8008c2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c32:	d10b      	bne.n	8008c4c <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	617b      	str	r3, [r7, #20]
    }
 8008c46:	bf00      	nop
 8008c48:	bf00      	nop
 8008c4a:	e7fd      	b.n	8008c48 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008c50:	3301      	adds	r3, #1
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	b25a      	sxtb	r2, r3
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8008c60:	e00b      	b.n	8008c7a <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	4618      	mov	r0, r3
 8008c66:	f003 fead 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2060      	movs	r0, #96	@ 0x60
 8008c72:	f003 f8c1 	bl	800bdf8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008c84:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3740      	adds	r7, #64	@ 0x40
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b08f      	sub	sp, #60	@ 0x3c
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10b      	bne.n	8008cc2 <xQueueReceive+0x32>
        __asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	623b      	str	r3, [r7, #32]
    }
 8008cbc:	bf00      	nop
 8008cbe:	bf00      	nop
 8008cc0:	e7fd      	b.n	8008cbe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <xQueueReceive+0x40>
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <xQueueReceive+0x44>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <xQueueReceive+0x46>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <xQueueReceive+0x62>
        __asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	61fb      	str	r3, [r7, #28]
    }
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cf2:	f001 f84b 	bl	8009d8c <xTaskGetSchedulerState>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <xQueueReceive+0x72>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <xQueueReceive+0x76>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <xQueueReceive+0x78>
 8008d06:	2300      	movs	r3, #0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <xQueueReceive+0x94>
        __asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	61bb      	str	r3, [r7, #24]
    }
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008d24:	f001 fe1a 	bl	800a95c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d02f      	beq.n	8008d94 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d38:	f000 f928 	bl	8008f8c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f003 fe40 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008d44:	4604      	mov	r4, r0
 8008d46:	2000      	movs	r0, #0
 8008d48:	f003 fe3c 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2101      	movs	r1, #1
 8008d52:	9100      	str	r1, [sp, #0]
 8008d54:	4621      	mov	r1, r4
 8008d56:	205c      	movs	r0, #92	@ 0x5c
 8008d58:	f003 f91e 	bl	800bf98 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	1e5a      	subs	r2, r3, #1
 8008d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d62:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00f      	beq.n	8008d8c <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6e:	3310      	adds	r3, #16
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fe67 	bl	8009a44 <xTaskRemoveFromEventList>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008eb4 <xQueueReceive+0x224>)
 8008d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008d8c:	f001 fe18 	bl	800a9c0 <vPortExitCritical>
                return pdPASS;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e08a      	b.n	8008eaa <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d113      	bne.n	8008dc2 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008d9a:	f001 fe11 	bl	800a9c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da0:	4618      	mov	r0, r3
 8008da2:	f003 fe0f 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008da6:	4604      	mov	r4, r0
 8008da8:	2000      	movs	r0, #0
 8008daa:	f003 fe0b 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008dae:	4602      	mov	r2, r0
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2101      	movs	r1, #1
 8008db4:	9100      	str	r1, [sp, #0]
 8008db6:	4621      	mov	r1, r4
 8008db8:	205c      	movs	r0, #92	@ 0x5c
 8008dba:	f003 f8ed 	bl	800bf98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e073      	b.n	8008eaa <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fea1 	bl	8009b14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008dd6:	f001 fdf3 	bl	800a9c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008dda:	f000 fbe3 	bl	80095a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008dde:	f001 fdbd 	bl	800a95c <vPortEnterCritical>
 8008de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dee:	d103      	bne.n	8008df8 <xQueueReceive+0x168>
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e04:	d103      	bne.n	8008e0e <xQueueReceive+0x17e>
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e0e:	f001 fdd7 	bl	800a9c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e12:	1d3a      	adds	r2, r7, #4
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fe90 	bl	8009b40 <xTaskCheckForTimeOut>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d124      	bne.n	8008e70 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e28:	f000 f928 	bl	800907c <prvIsQueueEmpty>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d018      	beq.n	8008e64 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	3324      	adds	r3, #36	@ 0x24
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fdac 	bl	8009998 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008e40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e42:	f000 f8c9 	bl	8008fd8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008e46:	f000 fbbb 	bl	80095c0 <xTaskResumeAll>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f47f af69 	bne.w	8008d24 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8008e52:	4b18      	ldr	r3, [pc, #96]	@ (8008eb4 <xQueueReceive+0x224>)
 8008e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	e75f      	b.n	8008d24 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e66:	f000 f8b7 	bl	8008fd8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008e6a:	f000 fba9 	bl	80095c0 <xTaskResumeAll>
 8008e6e:	e759      	b.n	8008d24 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e72:	f000 f8b1 	bl	8008fd8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008e76:	f000 fba3 	bl	80095c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7c:	f000 f8fe 	bl	800907c <prvIsQueueEmpty>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f43f af4e 	beq.w	8008d24 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f003 fd9a 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008e90:	4604      	mov	r4, r0
 8008e92:	2000      	movs	r0, #0
 8008e94:	f003 fd96 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	9100      	str	r1, [sp, #0]
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	205c      	movs	r0, #92	@ 0x5c
 8008ea4:	f003 f878 	bl	800bf98 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8008ea8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3734      	adds	r7, #52	@ 0x34
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed04 	.word	0xe000ed04

08008eb8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10d      	bne.n	8008ef2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d14d      	bne.n	8008f7a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 ff70 	bl	8009dc8 <xTaskPriorityDisinherit>
 8008ee8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	e043      	b.n	8008f7a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d119      	bne.n	8008f2c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6858      	ldr	r0, [r3, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	461a      	mov	r2, r3
 8008f02:	68b9      	ldr	r1, [r7, #8]
 8008f04:	f004 f955 	bl	800d1b2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d32b      	bcc.n	8008f7a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e026      	b.n	8008f7a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68d8      	ldr	r0, [r3, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	461a      	mov	r2, r3
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	f004 f93b 	bl	800d1b2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f44:	425b      	negs	r3, r3
 8008f46:	441a      	add	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d207      	bcs.n	8008f68 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f60:	425b      	negs	r3, r3
 8008f62:	441a      	add	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d105      	bne.n	8008f7a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8008f82:	697b      	ldr	r3, [r7, #20]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d018      	beq.n	8008fd0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa6:	441a      	add	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d303      	bcc.n	8008fc0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68d9      	ldr	r1, [r3, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc8:	461a      	mov	r2, r3
 8008fca:	6838      	ldr	r0, [r7, #0]
 8008fcc:	f004 f8f1 	bl	800d1b2 <memcpy>
    }
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008fe0:	f001 fcbc 	bl	800a95c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fec:	e011      	b.n	8009012 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d012      	beq.n	800901c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3324      	adds	r3, #36	@ 0x24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fd22 	bl	8009a44 <xTaskRemoveFromEventList>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009006:	f000 fe03 	bl	8009c10 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	3b01      	subs	r3, #1
 800900e:	b2db      	uxtb	r3, r3
 8009010:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009016:	2b00      	cmp	r3, #0
 8009018:	dce9      	bgt.n	8008fee <prvUnlockQueue+0x16>
 800901a:	e000      	b.n	800901e <prvUnlockQueue+0x46>
                        break;
 800901c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	22ff      	movs	r2, #255	@ 0xff
 8009022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009026:	f001 fccb 	bl	800a9c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800902a:	f001 fc97 	bl	800a95c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009034:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009036:	e011      	b.n	800905c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d012      	beq.n	8009066 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3310      	adds	r3, #16
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fcfd 	bl	8009a44 <xTaskRemoveFromEventList>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009050:	f000 fdde 	bl	8009c10 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	3b01      	subs	r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800905c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	dce9      	bgt.n	8009038 <prvUnlockQueue+0x60>
 8009064:	e000      	b.n	8009068 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009066:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	22ff      	movs	r2, #255	@ 0xff
 800906c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009070:	f001 fca6 	bl	800a9c0 <vPortExitCritical>
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009084:	f001 fc6a 	bl	800a95c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009090:	2301      	movs	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e001      	b.n	800909a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800909a:	f001 fc91 	bl	800a9c0 <vPortExitCritical>

    return xReturn;
 800909e:	68fb      	ldr	r3, [r7, #12]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80090b0:	f001 fc54 	bl	800a95c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090bc:	429a      	cmp	r2, r3
 80090be:	d102      	bne.n	80090c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e001      	b.n	80090ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80090ca:	f001 fc79 	bl	800a9c0 <vPortExitCritical>

    return xReturn;
 80090ce:	68fb      	ldr	r3, [r7, #12]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	e01e      	b.n	8009126 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090e8:	4a13      	ldr	r2, [pc, #76]	@ (8009138 <vQueueAddToRegistry+0x60>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d115      	bne.n	8009120 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090f4:	4910      	ldr	r1, [pc, #64]	@ (8009138 <vQueueAddToRegistry+0x60>)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80090fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009138 <vQueueAddToRegistry+0x60>)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	4413      	add	r3, r2
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	f003 fc59 	bl	800c9c4 <SEGGER_SYSVIEW_ShrinkId>
 8009112:	4601      	mov	r1, r0
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	2071      	movs	r0, #113	@ 0x71
 800911a:	f002 fe6d 	bl	800bdf8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800911e:	e006      	b.n	800912e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	3301      	adds	r3, #1
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b07      	cmp	r3, #7
 800912a:	d9dd      	bls.n	80090e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000618 	.word	0x20000618

0800913c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800914c:	f001 fc06 	bl	800a95c <vPortEnterCritical>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009156:	b25b      	sxtb	r3, r3
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800915c:	d103      	bne.n	8009166 <vQueueWaitForMessageRestricted+0x2a>
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800916c:	b25b      	sxtb	r3, r3
 800916e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009172:	d103      	bne.n	800917c <vQueueWaitForMessageRestricted+0x40>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800917c:	f001 fc20 	bl	800a9c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d106      	bne.n	8009196 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	3324      	adds	r3, #36	@ 0x24
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fc27 	bl	80099e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009196:	6978      	ldr	r0, [r7, #20]
 8009198:	f7ff ff1e 	bl	8008fd8 <prvUnlockQueue>
    }
 800919c:	bf00      	nop
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08c      	sub	sp, #48	@ 0x30
 80091a8:	af04      	add	r7, sp, #16
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091b4:	88fb      	ldrh	r3, [r7, #6]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 fd01 	bl	800abc0 <pvPortMalloc>
 80091be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00e      	beq.n	80091e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091c6:	2058      	movs	r0, #88	@ 0x58
 80091c8:	f001 fcfa 	bl	800abc0 <pvPortMalloc>
 80091cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80091da:	e005      	b.n	80091e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80091dc:	6978      	ldr	r0, [r7, #20]
 80091de:	f001 fdd1 	bl	800ad84 <vPortFree>
 80091e2:	e001      	b.n	80091e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d013      	beq.n	8009216 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091ee:	88fa      	ldrh	r2, [r7, #6]
 80091f0:	2300      	movs	r3, #0
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f000 f80e 	bl	8009226 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800920a:	69f8      	ldr	r0, [r7, #28]
 800920c:	f000 f8a2 	bl	8009354 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009210:	2301      	movs	r3, #1
 8009212:	61bb      	str	r3, [r7, #24]
 8009214:	e002      	b.n	800921c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800921a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800921c:	69bb      	ldr	r3, [r7, #24]
    }
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b088      	sub	sp, #32
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	607a      	str	r2, [r7, #4]
 8009232:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	461a      	mov	r2, r3
 800923e:	21a5      	movs	r1, #165	@ 0xa5
 8009240:	f003 ff54 	bl	800d0ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800924e:	3b01      	subs	r3, #1
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	f023 0307 	bic.w	r3, r3, #7
 800925c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	617b      	str	r3, [r7, #20]
    }
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01f      	beq.n	80092c6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009286:	2300      	movs	r3, #0
 8009288:	61fb      	str	r3, [r7, #28]
 800928a:	e012      	b.n	80092b2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	4413      	add	r3, r2
 8009292:	7819      	ldrb	r1, [r3, #0]
 8009294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	4413      	add	r3, r2
 800929a:	3334      	adds	r3, #52	@ 0x34
 800929c:	460a      	mov	r2, r1
 800929e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d006      	beq.n	80092ba <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	3301      	adds	r3, #1
 80092b0:	61fb      	str	r3, [r7, #28]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	2b09      	cmp	r3, #9
 80092b6:	d9e9      	bls.n	800928c <prvInitialiseNewTask+0x66>
 80092b8:	e000      	b.n	80092bc <prvInitialiseNewTask+0x96>
            {
                break;
 80092ba:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80092c4:	e003      	b.n	80092ce <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d901      	bls.n	80092d8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092d4:	2304      	movs	r3, #4
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80092d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092e2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80092e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e6:	2200      	movs	r2, #0
 80092e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ec:	3304      	adds	r3, #4
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7ff f958 	bl	80085a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	3318      	adds	r3, #24
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff f953 	bl	80085a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009302:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009306:	f1c3 0205 	rsb	r2, r3, #5
 800930a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009312:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	3350      	adds	r3, #80	@ 0x50
 8009318:	2204      	movs	r2, #4
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f003 fee5 	bl	800d0ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	3354      	adds	r3, #84	@ 0x54
 8009326:	2201      	movs	r2, #1
 8009328:	2100      	movs	r1, #0
 800932a:	4618      	mov	r0, r3
 800932c:	f003 fede 	bl	800d0ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	68f9      	ldr	r1, [r7, #12]
 8009334:	69b8      	ldr	r0, [r7, #24]
 8009336:	f001 f95f 	bl	800a5f8 <pxPortInitialiseStack>
 800933a:	4602      	mov	r2, r0
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800934a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800934c:	bf00      	nop
 800934e:	3720      	adds	r7, #32
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009354:	b5b0      	push	{r4, r5, r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af02      	add	r7, sp, #8
 800935a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800935c:	f001 fafe 	bl	800a95c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009360:	4b3b      	ldr	r3, [pc, #236]	@ (8009450 <prvAddNewTaskToReadyList+0xfc>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	4a3a      	ldr	r2, [pc, #232]	@ (8009450 <prvAddNewTaskToReadyList+0xfc>)
 8009368:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800936a:	4b3a      	ldr	r3, [pc, #232]	@ (8009454 <prvAddNewTaskToReadyList+0x100>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d109      	bne.n	8009386 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009372:	4a38      	ldr	r2, [pc, #224]	@ (8009454 <prvAddNewTaskToReadyList+0x100>)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009378:	4b35      	ldr	r3, [pc, #212]	@ (8009450 <prvAddNewTaskToReadyList+0xfc>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d110      	bne.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009380:	f000 fc6a 	bl	8009c58 <prvInitialiseTaskLists>
 8009384:	e00d      	b.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009386:	4b34      	ldr	r3, [pc, #208]	@ (8009458 <prvAddNewTaskToReadyList+0x104>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800938e:	4b31      	ldr	r3, [pc, #196]	@ (8009454 <prvAddNewTaskToReadyList+0x100>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d802      	bhi.n	80093a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800939c:	4a2d      	ldr	r2, [pc, #180]	@ (8009454 <prvAddNewTaskToReadyList+0x100>)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80093a2:	4b2e      	ldr	r3, [pc, #184]	@ (800945c <prvAddNewTaskToReadyList+0x108>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3301      	adds	r3, #1
 80093a8:	4a2c      	ldr	r2, [pc, #176]	@ (800945c <prvAddNewTaskToReadyList+0x108>)
 80093aa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093ac:	4b2b      	ldr	r3, [pc, #172]	@ (800945c <prvAddNewTaskToReadyList+0x108>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d016      	beq.n	80093e8 <prvAddNewTaskToReadyList+0x94>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	f003 f9db 	bl	800c778 <SEGGER_SYSVIEW_OnTaskCreate>
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093d2:	461d      	mov	r5, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	461c      	mov	r4, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093de:	1ae3      	subs	r3, r4, r3
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462b      	mov	r3, r5
 80093e4:	f001 fe9e 	bl	800b124 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f003 fa48 	bl	800c880 <SEGGER_SYSVIEW_OnTaskStartReady>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f4:	2201      	movs	r2, #1
 80093f6:	409a      	lsls	r2, r3
 80093f8:	4b19      	ldr	r3, [pc, #100]	@ (8009460 <prvAddNewTaskToReadyList+0x10c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	4a18      	ldr	r2, [pc, #96]	@ (8009460 <prvAddNewTaskToReadyList+0x10c>)
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009406:	4613      	mov	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4a15      	ldr	r2, [pc, #84]	@ (8009464 <prvAddNewTaskToReadyList+0x110>)
 8009410:	441a      	add	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3304      	adds	r3, #4
 8009416:	4619      	mov	r1, r3
 8009418:	4610      	mov	r0, r2
 800941a:	f7ff f8d0 	bl	80085be <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800941e:	f001 facf 	bl	800a9c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <prvAddNewTaskToReadyList+0x104>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00e      	beq.n	8009448 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800942a:	4b0a      	ldr	r3, [pc, #40]	@ (8009454 <prvAddNewTaskToReadyList+0x100>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	429a      	cmp	r2, r3
 8009436:	d207      	bcs.n	8009448 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009438:	4b0b      	ldr	r3, [pc, #44]	@ (8009468 <prvAddNewTaskToReadyList+0x114>)
 800943a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bdb0      	pop	{r4, r5, r7, pc}
 8009450:	20000730 	.word	0x20000730
 8009454:	20000658 	.word	0x20000658
 8009458:	2000073c 	.word	0x2000073c
 800945c:	2000074c 	.word	0x2000074c
 8009460:	20000738 	.word	0x20000738
 8009464:	2000065c 	.word	0x2000065c
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009474:	2300      	movs	r3, #0
 8009476:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d01c      	beq.n	80094b8 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800947e:	4b16      	ldr	r3, [pc, #88]	@ (80094d8 <vTaskDelay+0x6c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <vTaskDelay+0x32>
        __asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60bb      	str	r3, [r7, #8]
    }
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	e7fd      	b.n	800949a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800949e:	f000 f881 	bl	80095a4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	2023      	movs	r0, #35	@ 0x23
 80094a6:	f002 fc6b 	bl	800bd80 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fd0d 	bl	8009ecc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80094b2:	f000 f885 	bl	80095c0 <xTaskResumeAll>
 80094b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d107      	bne.n	80094ce <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 80094be:	4b07      	ldr	r3, [pc, #28]	@ (80094dc <vTaskDelay+0x70>)
 80094c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000758 	.word	0x20000758
 80094dc:	e000ed04 	.word	0xe000ed04

080094e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80094e6:	4b27      	ldr	r3, [pc, #156]	@ (8009584 <vTaskStartScheduler+0xa4>)
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	2300      	movs	r3, #0
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	2282      	movs	r2, #130	@ 0x82
 80094f2:	4925      	ldr	r1, [pc, #148]	@ (8009588 <vTaskStartScheduler+0xa8>)
 80094f4:	4825      	ldr	r0, [pc, #148]	@ (800958c <vTaskStartScheduler+0xac>)
 80094f6:	f7ff fe55 	bl	80091a4 <xTaskCreate>
 80094fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d102      	bne.n	8009508 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009502:	f000 fd5b 	bl	8009fbc <xTimerCreateTimerTask>
 8009506:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d124      	bne.n	8009558 <vTaskStartScheduler+0x78>
        __asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60bb      	str	r3, [r7, #8]
    }
 8009520:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009522:	4b1b      	ldr	r3, [pc, #108]	@ (8009590 <vTaskStartScheduler+0xb0>)
 8009524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009528:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800952a:	4b1a      	ldr	r3, [pc, #104]	@ (8009594 <vTaskStartScheduler+0xb4>)
 800952c:	2201      	movs	r2, #1
 800952e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009530:	4b19      	ldr	r3, [pc, #100]	@ (8009598 <vTaskStartScheduler+0xb8>)
 8009532:	2200      	movs	r2, #0
 8009534:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009536:	4b19      	ldr	r3, [pc, #100]	@ (800959c <vTaskStartScheduler+0xbc>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	4b12      	ldr	r3, [pc, #72]	@ (8009584 <vTaskStartScheduler+0xa4>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d102      	bne.n	8009548 <vTaskStartScheduler+0x68>
 8009542:	f003 f8fd 	bl	800c740 <SEGGER_SYSVIEW_OnIdle>
 8009546:	e004      	b.n	8009552 <vTaskStartScheduler+0x72>
 8009548:	4b14      	ldr	r3, [pc, #80]	@ (800959c <vTaskStartScheduler+0xbc>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f003 f955 	bl	800c7fc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009552:	f001 f8df 	bl	800a714 <xPortStartScheduler>
 8009556:	e00f      	b.n	8009578 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800955e:	d10b      	bne.n	8009578 <vTaskStartScheduler+0x98>
        __asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	607b      	str	r3, [r7, #4]
    }
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009578:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <vTaskStartScheduler+0xc0>)
 800957a:	681b      	ldr	r3, [r3, #0]
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000754 	.word	0x20000754
 8009588:	0800e40c 	.word	0x0800e40c
 800958c:	08009c29 	.word	0x08009c29
 8009590:	20000750 	.word	0x20000750
 8009594:	2000073c 	.word	0x2000073c
 8009598:	20000734 	.word	0x20000734
 800959c:	20000658 	.word	0x20000658
 80095a0:	200000ac 	.word	0x200000ac

080095a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80095a8:	4b04      	ldr	r3, [pc, #16]	@ (80095bc <vTaskSuspendAll+0x18>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3301      	adds	r3, #1
 80095ae:	4a03      	ldr	r2, [pc, #12]	@ (80095bc <vTaskSuspendAll+0x18>)
 80095b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80095b2:	bf00      	nop
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	20000758 	.word	0x20000758

080095c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80095ce:	4b44      	ldr	r3, [pc, #272]	@ (80096e0 <xTaskResumeAll+0x120>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10b      	bne.n	80095ee <xTaskResumeAll+0x2e>
        __asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	603b      	str	r3, [r7, #0]
    }
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	e7fd      	b.n	80095ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80095ee:	f001 f9b5 	bl	800a95c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80095f2:	4b3b      	ldr	r3, [pc, #236]	@ (80096e0 <xTaskResumeAll+0x120>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	4a39      	ldr	r2, [pc, #228]	@ (80096e0 <xTaskResumeAll+0x120>)
 80095fa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095fc:	4b38      	ldr	r3, [pc, #224]	@ (80096e0 <xTaskResumeAll+0x120>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d165      	bne.n	80096d0 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009604:	4b37      	ldr	r3, [pc, #220]	@ (80096e4 <xTaskResumeAll+0x124>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d061      	beq.n	80096d0 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800960c:	e032      	b.n	8009674 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800960e:	4b36      	ldr	r3, [pc, #216]	@ (80096e8 <xTaskResumeAll+0x128>)
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3318      	adds	r3, #24
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff f82c 	bl	8008678 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff f827 	bl	8008678 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4618      	mov	r0, r3
 800962e:	f003 f927 	bl	800c880 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009636:	2201      	movs	r2, #1
 8009638:	409a      	lsls	r2, r3
 800963a:	4b2c      	ldr	r3, [pc, #176]	@ (80096ec <xTaskResumeAll+0x12c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4313      	orrs	r3, r2
 8009640:	4a2a      	ldr	r2, [pc, #168]	@ (80096ec <xTaskResumeAll+0x12c>)
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009648:	4613      	mov	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4a27      	ldr	r2, [pc, #156]	@ (80096f0 <xTaskResumeAll+0x130>)
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f7fe ffaf 	bl	80085be <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009664:	4b23      	ldr	r3, [pc, #140]	@ (80096f4 <xTaskResumeAll+0x134>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966a:	429a      	cmp	r2, r3
 800966c:	d302      	bcc.n	8009674 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800966e:	4b22      	ldr	r3, [pc, #136]	@ (80096f8 <xTaskResumeAll+0x138>)
 8009670:	2201      	movs	r2, #1
 8009672:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009674:	4b1c      	ldr	r3, [pc, #112]	@ (80096e8 <xTaskResumeAll+0x128>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1c8      	bne.n	800960e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009682:	f000 fb67 	bl	8009d54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009686:	4b1d      	ldr	r3, [pc, #116]	@ (80096fc <xTaskResumeAll+0x13c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d010      	beq.n	80096b4 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009692:	f000 f859 	bl	8009748 <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800969c:	4b16      	ldr	r3, [pc, #88]	@ (80096f8 <xTaskResumeAll+0x138>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1f1      	bne.n	8009692 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80096ae:	4b13      	ldr	r3, [pc, #76]	@ (80096fc <xTaskResumeAll+0x13c>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80096b4:	4b10      	ldr	r3, [pc, #64]	@ (80096f8 <xTaskResumeAll+0x138>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d009      	beq.n	80096d0 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80096c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009700 <xTaskResumeAll+0x140>)
 80096c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80096d0:	f001 f976 	bl	800a9c0 <vPortExitCritical>

    return xAlreadyYielded;
 80096d4:	68bb      	ldr	r3, [r7, #8]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20000758 	.word	0x20000758
 80096e4:	20000730 	.word	0x20000730
 80096e8:	200006f0 	.word	0x200006f0
 80096ec:	20000738 	.word	0x20000738
 80096f0:	2000065c 	.word	0x2000065c
 80096f4:	20000658 	.word	0x20000658
 80096f8:	20000744 	.word	0x20000744
 80096fc:	20000740 	.word	0x20000740
 8009700:	e000ed04 	.word	0xe000ed04

08009704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800970a:	4b05      	ldr	r3, [pc, #20]	@ (8009720 <xTaskGetTickCount+0x1c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009710:	687b      	ldr	r3, [r7, #4]
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	20000734 	.word	0x20000734

08009724 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800972a:	f001 fa07 	bl	800ab3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800972e:	2300      	movs	r3, #0
 8009730:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8009732:	4b04      	ldr	r3, [pc, #16]	@ (8009744 <xTaskGetTickCountFromISR+0x20>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009738:	683b      	ldr	r3, [r7, #0]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000734 	.word	0x20000734

08009748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009752:	4b51      	ldr	r3, [pc, #324]	@ (8009898 <xTaskIncrementTick+0x150>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f040 8093 	bne.w	8009882 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800975c:	4b4f      	ldr	r3, [pc, #316]	@ (800989c <xTaskIncrementTick+0x154>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009764:	4a4d      	ldr	r2, [pc, #308]	@ (800989c <xTaskIncrementTick+0x154>)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d121      	bne.n	80097b4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009770:	4b4b      	ldr	r3, [pc, #300]	@ (80098a0 <xTaskIncrementTick+0x158>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00b      	beq.n	8009792 <xTaskIncrementTick+0x4a>
        __asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	603b      	str	r3, [r7, #0]
    }
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	e7fd      	b.n	800978e <xTaskIncrementTick+0x46>
 8009792:	4b43      	ldr	r3, [pc, #268]	@ (80098a0 <xTaskIncrementTick+0x158>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	4b42      	ldr	r3, [pc, #264]	@ (80098a4 <xTaskIncrementTick+0x15c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a40      	ldr	r2, [pc, #256]	@ (80098a0 <xTaskIncrementTick+0x158>)
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	4a40      	ldr	r2, [pc, #256]	@ (80098a4 <xTaskIncrementTick+0x15c>)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	4b40      	ldr	r3, [pc, #256]	@ (80098a8 <xTaskIncrementTick+0x160>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	4a3e      	ldr	r2, [pc, #248]	@ (80098a8 <xTaskIncrementTick+0x160>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	f000 fad0 	bl	8009d54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80097b4:	4b3d      	ldr	r3, [pc, #244]	@ (80098ac <xTaskIncrementTick+0x164>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d34c      	bcc.n	8009858 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097be:	4b38      	ldr	r3, [pc, #224]	@ (80098a0 <xTaskIncrementTick+0x158>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d104      	bne.n	80097d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c8:	4b38      	ldr	r3, [pc, #224]	@ (80098ac <xTaskIncrementTick+0x164>)
 80097ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097ce:	601a      	str	r2, [r3, #0]
                    break;
 80097d0:	e042      	b.n	8009858 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d2:	4b33      	ldr	r3, [pc, #204]	@ (80098a0 <xTaskIncrementTick+0x158>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d203      	bcs.n	80097f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80097ea:	4a30      	ldr	r2, [pc, #192]	@ (80098ac <xTaskIncrementTick+0x164>)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097f0:	e032      	b.n	8009858 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe ff3e 	bl	8008678 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3318      	adds	r3, #24
 8009808:	4618      	mov	r0, r3
 800980a:	f7fe ff35 	bl	8008678 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4618      	mov	r0, r3
 8009812:	f003 f835 	bl	800c880 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981a:	2201      	movs	r2, #1
 800981c:	409a      	lsls	r2, r3
 800981e:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <xTaskIncrementTick+0x168>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4313      	orrs	r3, r2
 8009824:	4a22      	ldr	r2, [pc, #136]	@ (80098b0 <xTaskIncrementTick+0x168>)
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4a1f      	ldr	r2, [pc, #124]	@ (80098b4 <xTaskIncrementTick+0x16c>)
 8009836:	441a      	add	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	3304      	adds	r3, #4
 800983c:	4619      	mov	r1, r3
 800983e:	4610      	mov	r0, r2
 8009840:	f7fe febd 	bl	80085be <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009848:	4b1b      	ldr	r3, [pc, #108]	@ (80098b8 <xTaskIncrementTick+0x170>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984e:	429a      	cmp	r2, r3
 8009850:	d3b5      	bcc.n	80097be <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8009852:	2301      	movs	r3, #1
 8009854:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009856:	e7b2      	b.n	80097be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009858:	4b17      	ldr	r3, [pc, #92]	@ (80098b8 <xTaskIncrementTick+0x170>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985e:	4915      	ldr	r1, [pc, #84]	@ (80098b4 <xTaskIncrementTick+0x16c>)
 8009860:	4613      	mov	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d901      	bls.n	8009874 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 8009870:	2301      	movs	r3, #1
 8009872:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8009874:	4b11      	ldr	r3, [pc, #68]	@ (80098bc <xTaskIncrementTick+0x174>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d007      	beq.n	800988c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800987c:	2301      	movs	r3, #1
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	e004      	b.n	800988c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009882:	4b0f      	ldr	r3, [pc, #60]	@ (80098c0 <xTaskIncrementTick+0x178>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	4a0d      	ldr	r2, [pc, #52]	@ (80098c0 <xTaskIncrementTick+0x178>)
 800988a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800988c:	697b      	ldr	r3, [r7, #20]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000758 	.word	0x20000758
 800989c:	20000734 	.word	0x20000734
 80098a0:	200006e8 	.word	0x200006e8
 80098a4:	200006ec 	.word	0x200006ec
 80098a8:	20000748 	.word	0x20000748
 80098ac:	20000750 	.word	0x20000750
 80098b0:	20000738 	.word	0x20000738
 80098b4:	2000065c 	.word	0x2000065c
 80098b8:	20000658 	.word	0x20000658
 80098bc:	20000744 	.word	0x20000744
 80098c0:	20000740 	.word	0x20000740

080098c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098ca:	4b2d      	ldr	r3, [pc, #180]	@ (8009980 <vTaskSwitchContext+0xbc>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80098d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009984 <vTaskSwitchContext+0xc0>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80098d8:	e04e      	b.n	8009978 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80098da:	4b2a      	ldr	r3, [pc, #168]	@ (8009984 <vTaskSwitchContext+0xc0>)
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e0:	4b29      	ldr	r3, [pc, #164]	@ (8009988 <vTaskSwitchContext+0xc4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	fab3 f383 	clz	r3, r3
 80098ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	f1c3 031f 	rsb	r3, r3, #31
 80098f4:	617b      	str	r3, [r7, #20]
 80098f6:	4925      	ldr	r1, [pc, #148]	@ (800998c <vTaskSwitchContext+0xc8>)
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <vTaskSwitchContext+0x5e>
        __asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	607b      	str	r3, [r7, #4]
    }
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <vTaskSwitchContext+0x5a>
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4a17      	ldr	r2, [pc, #92]	@ (800998c <vTaskSwitchContext+0xc8>)
 800992e:	4413      	add	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	605a      	str	r2, [r3, #4]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	3308      	adds	r3, #8
 8009944:	429a      	cmp	r2, r3
 8009946:	d104      	bne.n	8009952 <vTaskSwitchContext+0x8e>
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	605a      	str	r2, [r3, #4]
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	4a0d      	ldr	r2, [pc, #52]	@ (8009990 <vTaskSwitchContext+0xcc>)
 800995a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800995c:	4b0c      	ldr	r3, [pc, #48]	@ (8009990 <vTaskSwitchContext+0xcc>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	4b0c      	ldr	r3, [pc, #48]	@ (8009994 <vTaskSwitchContext+0xd0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d102      	bne.n	800996e <vTaskSwitchContext+0xaa>
 8009968:	f002 feea 	bl	800c740 <SEGGER_SYSVIEW_OnIdle>
}
 800996c:	e004      	b.n	8009978 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800996e:	4b08      	ldr	r3, [pc, #32]	@ (8009990 <vTaskSwitchContext+0xcc>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f002 ff42 	bl	800c7fc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009978:	bf00      	nop
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20000758 	.word	0x20000758
 8009984:	20000744 	.word	0x20000744
 8009988:	20000738 	.word	0x20000738
 800998c:	2000065c 	.word	0x2000065c
 8009990:	20000658 	.word	0x20000658
 8009994:	20000754 	.word	0x20000754

08009998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10b      	bne.n	80099c0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	60fb      	str	r3, [r7, #12]
    }
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099c0:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <vTaskPlaceOnEventList+0x48>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3318      	adds	r3, #24
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fe fe1c 	bl	8008606 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ce:	2101      	movs	r1, #1
 80099d0:	6838      	ldr	r0, [r7, #0]
 80099d2:	f000 fa7b 	bl	8009ecc <prvAddCurrentTaskToDelayedList>
}
 80099d6:	bf00      	nop
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000658 	.word	0x20000658

080099e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10b      	bne.n	8009a0e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	617b      	str	r3, [r7, #20]
    }
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a40 <vTaskPlaceOnEventListRestricted+0x5c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3318      	adds	r3, #24
 8009a14:	4619      	mov	r1, r3
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7fe fdd1 	bl	80085be <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8009a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a26:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009a28:	2024      	movs	r0, #36	@ 0x24
 8009a2a:	f002 f98b 	bl	800bd44 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	68b8      	ldr	r0, [r7, #8]
 8009a32:	f000 fa4b 	bl	8009ecc <prvAddCurrentTaskToDelayedList>
    }
 8009a36:	bf00      	nop
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000658 	.word	0x20000658

08009a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10b      	bne.n	8009a72 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	60fb      	str	r3, [r7, #12]
    }
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	e7fd      	b.n	8009a6e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	3318      	adds	r3, #24
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fdfe 	bl	8008678 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8009afc <xTaskRemoveFromEventList+0xb8>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d120      	bne.n	8009ac6 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fe fdf5 	bl	8008678 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f002 fef5 	bl	800c880 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	409a      	lsls	r2, r3
 8009a9e:	4b18      	ldr	r3, [pc, #96]	@ (8009b00 <xTaskRemoveFromEventList+0xbc>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	4a16      	ldr	r2, [pc, #88]	@ (8009b00 <xTaskRemoveFromEventList+0xbc>)
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4a13      	ldr	r2, [pc, #76]	@ (8009b04 <xTaskRemoveFromEventList+0xc0>)
 8009ab6:	441a      	add	r2, r3
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fd7d 	bl	80085be <vListInsertEnd>
 8009ac4:	e005      	b.n	8009ad2 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	3318      	adds	r3, #24
 8009aca:	4619      	mov	r1, r3
 8009acc:	480e      	ldr	r0, [pc, #56]	@ (8009b08 <xTaskRemoveFromEventList+0xc4>)
 8009ace:	f7fe fd76 	bl	80085be <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b0c <xTaskRemoveFromEventList+0xc8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d905      	bls.n	8009aec <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b10 <xTaskRemoveFromEventList+0xcc>)
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e001      	b.n	8009af0 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8009af0:	697b      	ldr	r3, [r7, #20]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3718      	adds	r7, #24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000758 	.word	0x20000758
 8009b00:	20000738 	.word	0x20000738
 8009b04:	2000065c 	.word	0x2000065c
 8009b08:	200006f0 	.word	0x200006f0
 8009b0c:	20000658 	.word	0x20000658
 8009b10:	20000744 	.word	0x20000744

08009b14 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <vTaskInternalSetTimeOutState+0x24>)
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009b24:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <vTaskInternalSetTimeOutState+0x28>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	605a      	str	r2, [r3, #4]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	20000748 	.word	0x20000748
 8009b3c:	20000734 	.word	0x20000734

08009b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10b      	bne.n	8009b68 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	613b      	str	r3, [r7, #16]
    }
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	e7fd      	b.n	8009b64 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10b      	bne.n	8009b86 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	60fb      	str	r3, [r7, #12]
    }
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009b86:	f000 fee9 	bl	800a95c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009c08 <xTaskCheckForTimeOut+0xc8>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ba2:	d102      	bne.n	8009baa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	e026      	b.n	8009bf8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	4b17      	ldr	r3, [pc, #92]	@ (8009c0c <xTaskCheckForTimeOut+0xcc>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d00a      	beq.n	8009bcc <xTaskCheckForTimeOut+0x8c>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d305      	bcc.n	8009bcc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	e015      	b.n	8009bf8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d20b      	bcs.n	8009bee <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	1ad2      	subs	r2, r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff ff96 	bl	8009b14 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	e004      	b.n	8009bf8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009bf8:	f000 fee2 	bl	800a9c0 <vPortExitCritical>

    return xReturn;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3720      	adds	r7, #32
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000734 	.word	0x20000734
 8009c0c:	20000748 	.word	0x20000748

08009c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009c14:	4b03      	ldr	r3, [pc, #12]	@ (8009c24 <vTaskMissedYield+0x14>)
 8009c16:	2201      	movs	r2, #1
 8009c18:	601a      	str	r2, [r3, #0]
}
 8009c1a:	bf00      	nop
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	20000744 	.word	0x20000744

08009c28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009c30:	f000 f852 	bl	8009cd8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c34:	4b06      	ldr	r3, [pc, #24]	@ (8009c50 <prvIdleTask+0x28>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d9f9      	bls.n	8009c30 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8009c3c:	4b05      	ldr	r3, [pc, #20]	@ (8009c54 <prvIdleTask+0x2c>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009c4c:	e7f0      	b.n	8009c30 <prvIdleTask+0x8>
 8009c4e:	bf00      	nop
 8009c50:	2000065c 	.word	0x2000065c
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c5e:	2300      	movs	r3, #0
 8009c60:	607b      	str	r3, [r7, #4]
 8009c62:	e00c      	b.n	8009c7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4a12      	ldr	r2, [pc, #72]	@ (8009cb8 <prvInitialiseTaskLists+0x60>)
 8009c70:	4413      	add	r3, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fc76 	bl	8008564 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d9ef      	bls.n	8009c64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009c84:	480d      	ldr	r0, [pc, #52]	@ (8009cbc <prvInitialiseTaskLists+0x64>)
 8009c86:	f7fe fc6d 	bl	8008564 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009c8a:	480d      	ldr	r0, [pc, #52]	@ (8009cc0 <prvInitialiseTaskLists+0x68>)
 8009c8c:	f7fe fc6a 	bl	8008564 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009c90:	480c      	ldr	r0, [pc, #48]	@ (8009cc4 <prvInitialiseTaskLists+0x6c>)
 8009c92:	f7fe fc67 	bl	8008564 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8009c96:	480c      	ldr	r0, [pc, #48]	@ (8009cc8 <prvInitialiseTaskLists+0x70>)
 8009c98:	f7fe fc64 	bl	8008564 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8009c9c:	480b      	ldr	r0, [pc, #44]	@ (8009ccc <prvInitialiseTaskLists+0x74>)
 8009c9e:	f7fe fc61 	bl	8008564 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd0 <prvInitialiseTaskLists+0x78>)
 8009ca4:	4a05      	ldr	r2, [pc, #20]	@ (8009cbc <prvInitialiseTaskLists+0x64>)
 8009ca6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8009cd4 <prvInitialiseTaskLists+0x7c>)
 8009caa:	4a05      	ldr	r2, [pc, #20]	@ (8009cc0 <prvInitialiseTaskLists+0x68>)
 8009cac:	601a      	str	r2, [r3, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000065c 	.word	0x2000065c
 8009cbc:	200006c0 	.word	0x200006c0
 8009cc0:	200006d4 	.word	0x200006d4
 8009cc4:	200006f0 	.word	0x200006f0
 8009cc8:	20000704 	.word	0x20000704
 8009ccc:	2000071c 	.word	0x2000071c
 8009cd0:	200006e8 	.word	0x200006e8
 8009cd4:	200006ec 	.word	0x200006ec

08009cd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cde:	e019      	b.n	8009d14 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009ce0:	f000 fe3c 	bl	800a95c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce4:	4b10      	ldr	r3, [pc, #64]	@ (8009d28 <prvCheckTasksWaitingTermination+0x50>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe fcc1 	bl	8008678 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <prvCheckTasksWaitingTermination+0x54>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8009d2c <prvCheckTasksWaitingTermination+0x54>)
 8009cfe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009d00:	4b0b      	ldr	r3, [pc, #44]	@ (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	4a0a      	ldr	r2, [pc, #40]	@ (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d08:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8009d0a:	f000 fe59 	bl	800a9c0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f810 	bl	8009d34 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d14:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <prvCheckTasksWaitingTermination+0x58>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e1      	bne.n	8009ce0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000704 	.word	0x20000704
 8009d2c:	20000730 	.word	0x20000730
 8009d30:	20000718 	.word	0x20000718

08009d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d40:	4618      	mov	r0, r3
 8009d42:	f001 f81f 	bl	800ad84 <vPortFree>
                vPortFree( pxTCB );
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 f81c 	bl	800ad84 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d58:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <prvResetNextTaskUnblockTime+0x30>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d104      	bne.n	8009d6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009d62:	4b09      	ldr	r3, [pc, #36]	@ (8009d88 <prvResetNextTaskUnblockTime+0x34>)
 8009d64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009d6a:	e005      	b.n	8009d78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d6c:	4b05      	ldr	r3, [pc, #20]	@ (8009d84 <prvResetNextTaskUnblockTime+0x30>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a04      	ldr	r2, [pc, #16]	@ (8009d88 <prvResetNextTaskUnblockTime+0x34>)
 8009d76:	6013      	str	r3, [r2, #0]
}
 8009d78:	bf00      	nop
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	200006e8 	.word	0x200006e8
 8009d88:	20000750 	.word	0x20000750

08009d8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009d92:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc0 <xTaskGetSchedulerState+0x34>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d102      	bne.n	8009da0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	607b      	str	r3, [r7, #4]
 8009d9e:	e008      	b.n	8009db2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da0:	4b08      	ldr	r3, [pc, #32]	@ (8009dc4 <xTaskGetSchedulerState+0x38>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d102      	bne.n	8009dae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009da8:	2302      	movs	r3, #2
 8009daa:	607b      	str	r3, [r7, #4]
 8009dac:	e001      	b.n	8009db2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009db2:	687b      	ldr	r3, [r7, #4]
    }
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	2000073c 	.word	0x2000073c
 8009dc4:	20000758 	.word	0x20000758

08009dc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d06a      	beq.n	8009eb4 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009dde:	4b38      	ldr	r3, [pc, #224]	@ (8009ec0 <xTaskPriorityDisinherit+0xf8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d00b      	beq.n	8009e00 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60fb      	str	r3, [r7, #12]
    }
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10b      	bne.n	8009e20 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	60bb      	str	r3, [r7, #8]
    }
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e24:	1e5a      	subs	r2, r3, #1
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d03e      	beq.n	8009eb4 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d13a      	bne.n	8009eb4 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fc18 	bl	8008678 <uxListRemove>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e52:	2201      	movs	r2, #1
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	43da      	mvns	r2, r3
 8009e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec4 <xTaskPriorityDisinherit+0xfc>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4013      	ands	r3, r2
 8009e60:	4a18      	ldr	r2, [pc, #96]	@ (8009ec4 <xTaskPriorityDisinherit+0xfc>)
 8009e62:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4619      	mov	r1, r3
 8009e68:	204a      	movs	r0, #74	@ 0x4a
 8009e6a:	f001 ff89 	bl	800bd80 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	f1c3 0205 	rsb	r2, r3, #5
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e86:	2201      	movs	r2, #1
 8009e88:	409a      	lsls	r2, r3
 8009e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec4 <xTaskPriorityDisinherit+0xfc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec4 <xTaskPriorityDisinherit+0xfc>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a09      	ldr	r2, [pc, #36]	@ (8009ec8 <xTaskPriorityDisinherit+0x100>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe fb87 	bl	80085be <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009eb4:	697b      	ldr	r3, [r7, #20]
    }
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000658 	.word	0x20000658
 8009ec4:	20000738 	.word	0x20000738
 8009ec8:	2000065c 	.word	0x2000065c

08009ecc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009ed6:	4b32      	ldr	r3, [pc, #200]	@ (8009fa0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009edc:	4b31      	ldr	r3, [pc, #196]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fbc8 	bl	8008678 <uxListRemove>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10b      	bne.n	8009f06 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009eee:	4b2d      	ldr	r3, [pc, #180]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8009efa:	43da      	mvns	r2, r3
 8009efc:	4b2a      	ldr	r3, [pc, #168]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4013      	ands	r3, r2
 8009f02:	4a29      	ldr	r2, [pc, #164]	@ (8009fa8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009f04:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f0c:	d110      	bne.n	8009f30 <prvAddCurrentTaskToDelayedList+0x64>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8009f14:	4b23      	ldr	r3, [pc, #140]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	211b      	movs	r1, #27
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f002 fcf2 	bl	800c904 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f20:	4b20      	ldr	r3, [pc, #128]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4820      	ldr	r0, [pc, #128]	@ (8009fac <prvAddCurrentTaskToDelayedList+0xe0>)
 8009f2a:	f7fe fb48 	bl	80085be <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009f2e:	e032      	b.n	8009f96 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4413      	add	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f38:	4b1a      	ldr	r3, [pc, #104]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d20f      	bcs.n	8009f68 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8009f48:	4b16      	ldr	r3, [pc, #88]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2104      	movs	r1, #4
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 fcd8 	bl	800c904 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f54:	4b16      	ldr	r3, [pc, #88]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	4b12      	ldr	r3, [pc, #72]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	4610      	mov	r0, r2
 8009f62:	f7fe fb50 	bl	8008606 <vListInsert>
}
 8009f66:	e016      	b.n	8009f96 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8009f68:	4b0e      	ldr	r3, [pc, #56]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f002 fcc8 	bl	800c904 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f74:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4610      	mov	r0, r2
 8009f82:	f7fe fb40 	bl	8008606 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8009f86:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <prvAddCurrentTaskToDelayedList+0xec>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d202      	bcs.n	8009f96 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8009f90:	4a09      	ldr	r2, [pc, #36]	@ (8009fb8 <prvAddCurrentTaskToDelayedList+0xec>)
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	6013      	str	r3, [r2, #0]
}
 8009f96:	bf00      	nop
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000734 	.word	0x20000734
 8009fa4:	20000658 	.word	0x20000658
 8009fa8:	20000738 	.word	0x20000738
 8009fac:	2000071c 	.word	0x2000071c
 8009fb0:	200006ec 	.word	0x200006ec
 8009fb4:	200006e8 	.word	0x200006e8
 8009fb8:	20000750 	.word	0x20000750

08009fbc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8009fc6:	f000 fae1 	bl	800a58c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8009fca:	4b12      	ldr	r3, [pc, #72]	@ (800a014 <xTimerCreateTimerTask+0x58>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8009fd2:	4b11      	ldr	r3, [pc, #68]	@ (800a018 <xTimerCreateTimerTask+0x5c>)
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	2302      	movs	r3, #2
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009fe0:	490e      	ldr	r1, [pc, #56]	@ (800a01c <xTimerCreateTimerTask+0x60>)
 8009fe2:	480f      	ldr	r0, [pc, #60]	@ (800a020 <xTimerCreateTimerTask+0x64>)
 8009fe4:	f7ff f8de 	bl	80091a4 <xTaskCreate>
 8009fe8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10b      	bne.n	800a008 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	603b      	str	r3, [r7, #0]
    }
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a008:	687b      	ldr	r3, [r7, #4]
    }
 800a00a:	4618      	mov	r0, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	2000078c 	.word	0x2000078c
 800a018:	20000790 	.word	0x20000790
 800a01c:	0800e414 	.word	0x0800e414
 800a020:	0800a15d 	.word	0x0800a15d

0800a024 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800a024:	b580      	push	{r7, lr}
 800a026:	b08a      	sub	sp, #40	@ 0x28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800a032:	2300      	movs	r3, #0
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10b      	bne.n	800a054 <xTimerGenericCommand+0x30>
        __asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	623b      	str	r3, [r7, #32]
    }
 800a04e:	bf00      	nop
 800a050:	bf00      	nop
 800a052:	e7fd      	b.n	800a050 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800a054:	4b19      	ldr	r3, [pc, #100]	@ (800a0bc <xTimerGenericCommand+0x98>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d02a      	beq.n	800a0b2 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b05      	cmp	r3, #5
 800a06c:	dc18      	bgt.n	800a0a0 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a06e:	f7ff fe8d 	bl	8009d8c <xTaskGetSchedulerState>
 800a072:	4603      	mov	r3, r0
 800a074:	2b02      	cmp	r3, #2
 800a076:	d109      	bne.n	800a08c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a078:	4b10      	ldr	r3, [pc, #64]	@ (800a0bc <xTimerGenericCommand+0x98>)
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	f107 0114 	add.w	r1, r7, #20
 800a080:	2300      	movs	r3, #0
 800a082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a084:	f7fe fc18 	bl	80088b8 <xQueueGenericSend>
 800a088:	6278      	str	r0, [r7, #36]	@ 0x24
 800a08a:	e012      	b.n	800a0b2 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a08c:	4b0b      	ldr	r3, [pc, #44]	@ (800a0bc <xTimerGenericCommand+0x98>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	f107 0114 	add.w	r1, r7, #20
 800a094:	2300      	movs	r3, #0
 800a096:	2200      	movs	r2, #0
 800a098:	f7fe fc0e 	bl	80088b8 <xQueueGenericSend>
 800a09c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a09e:	e008      	b.n	800a0b2 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0a0:	4b06      	ldr	r3, [pc, #24]	@ (800a0bc <xTimerGenericCommand+0x98>)
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	f107 0114 	add.w	r1, r7, #20
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	f7fe fd2e 	bl	8008b0c <xQueueGenericSendFromISR>
 800a0b0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3728      	adds	r7, #40	@ 0x28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	2000078c 	.word	0x2000078c

0800a0c0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ca:	4b23      	ldr	r3, [pc, #140]	@ (800a158 <prvProcessExpiredTimer+0x98>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe facd 	bl	8008678 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d023      	beq.n	800a134 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	699a      	ldr	r2, [r3, #24]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	18d1      	adds	r1, r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	6978      	ldr	r0, [r7, #20]
 800a0fa:	f000 f8d5 	bl	800a2a8 <prvInsertTimerInActiveList>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d020      	beq.n	800a146 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a104:	2300      	movs	r3, #0
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	2300      	movs	r3, #0
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	2100      	movs	r1, #0
 800a10e:	6978      	ldr	r0, [r7, #20]
 800a110:	f7ff ff88 	bl	800a024 <xTimerGenericCommand>
 800a114:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d114      	bne.n	800a146 <prvProcessExpiredTimer+0x86>
        __asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	60fb      	str	r3, [r7, #12]
    }
 800a12e:	bf00      	nop
 800a130:	bf00      	nop
 800a132:	e7fd      	b.n	800a130 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a13a:	f023 0301 	bic.w	r3, r3, #1
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	6978      	ldr	r0, [r7, #20]
 800a14c:	4798      	blx	r3
    }
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000784 	.word	0x20000784

0800a15c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a164:	f107 0308 	add.w	r3, r7, #8
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 f859 	bl	800a220 <prvGetNextExpireTime>
 800a16e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4619      	mov	r1, r3
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f805 	bl	800a184 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a17a:	f000 f8d7 	bl	800a32c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a17e:	bf00      	nop
 800a180:	e7f0      	b.n	800a164 <prvTimerTask+0x8>
	...

0800a184 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a18e:	f7ff fa09 	bl	80095a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a192:	f107 0308 	add.w	r3, r7, #8
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f866 	bl	800a268 <prvSampleTimeNow>
 800a19c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d130      	bne.n	800a206 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <prvProcessTimerOrBlockTask+0x3c>
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d806      	bhi.n	800a1c0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a1b2:	f7ff fa05 	bl	80095c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1b6:	68f9      	ldr	r1, [r7, #12]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff ff81 	bl	800a0c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a1be:	e024      	b.n	800a20a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d008      	beq.n	800a1d8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1c6:	4b13      	ldr	r3, [pc, #76]	@ (800a214 <prvProcessTimerOrBlockTask+0x90>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <prvProcessTimerOrBlockTask+0x50>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e000      	b.n	800a1d6 <prvProcessTimerOrBlockTask+0x52>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a218 <prvProcessTimerOrBlockTask+0x94>)
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	f7fe ffa9 	bl	800913c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a1ea:	f7ff f9e9 	bl	80095c0 <xTaskResumeAll>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a1f4:	4b09      	ldr	r3, [pc, #36]	@ (800a21c <prvProcessTimerOrBlockTask+0x98>)
 800a1f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	f3bf 8f6f 	isb	sy
    }
 800a204:	e001      	b.n	800a20a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a206:	f7ff f9db 	bl	80095c0 <xTaskResumeAll>
    }
 800a20a:	bf00      	nop
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000788 	.word	0x20000788
 800a218:	2000078c 	.word	0x2000078c
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a228:	4b0e      	ldr	r3, [pc, #56]	@ (800a264 <prvGetNextExpireTime+0x44>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <prvGetNextExpireTime+0x16>
 800a232:	2201      	movs	r2, #1
 800a234:	e000      	b.n	800a238 <prvGetNextExpireTime+0x18>
 800a236:	2200      	movs	r2, #0
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d105      	bne.n	800a250 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a244:	4b07      	ldr	r3, [pc, #28]	@ (800a264 <prvGetNextExpireTime+0x44>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	e001      	b.n	800a254 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a254:	68fb      	ldr	r3, [r7, #12]
    }
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000784 	.word	0x20000784

0800a268 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a270:	f7ff fa48 	bl	8009704 <xTaskGetTickCount>
 800a274:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a276:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a4 <prvSampleTimeNow+0x3c>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d205      	bcs.n	800a28c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a280:	f000 f91e 	bl	800a4c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e002      	b.n	800a292 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a292:	4a04      	ldr	r2, [pc, #16]	@ (800a2a4 <prvSampleTimeNow+0x3c>)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a298:	68fb      	ldr	r3, [r7, #12]
    }
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000794 	.word	0x20000794

0800a2a8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d812      	bhi.n	800a2f4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	1ad2      	subs	r2, r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d302      	bcc.n	800a2e2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e01b      	b.n	800a31a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a2e2:	4b10      	ldr	r3, [pc, #64]	@ (800a324 <prvInsertTimerInActiveList+0x7c>)
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	f7fe f98a 	bl	8008606 <vListInsert>
 800a2f2:	e012      	b.n	800a31a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d206      	bcs.n	800a30a <prvInsertTimerInActiveList+0x62>
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	429a      	cmp	r2, r3
 800a302:	d302      	bcc.n	800a30a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	e007      	b.n	800a31a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a30a:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <prvInsertTimerInActiveList+0x80>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3304      	adds	r3, #4
 800a312:	4619      	mov	r1, r3
 800a314:	4610      	mov	r0, r2
 800a316:	f7fe f976 	bl	8008606 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a31a:	697b      	ldr	r3, [r7, #20]
    }
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000788 	.word	0x20000788
 800a328:	20000784 	.word	0x20000784

0800a32c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	@ 0x30
 800a330:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a332:	e0b2      	b.n	800a49a <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f2c0 80af 	blt.w	800a49a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34a:	3304      	adds	r3, #4
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7fe f993 	bl	8008678 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a352:	1d3b      	adds	r3, r7, #4
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff ff87 	bl	800a268 <prvSampleTimeNow>
 800a35a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	2b09      	cmp	r3, #9
 800a360:	f200 8098 	bhi.w	800a494 <prvProcessReceivedCommands+0x168>
 800a364:	a201      	add	r2, pc, #4	@ (adr r2, 800a36c <prvProcessReceivedCommands+0x40>)
 800a366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36a:	bf00      	nop
 800a36c:	0800a395 	.word	0x0800a395
 800a370:	0800a395 	.word	0x0800a395
 800a374:	0800a395 	.word	0x0800a395
 800a378:	0800a40b 	.word	0x0800a40b
 800a37c:	0800a41f 	.word	0x0800a41f
 800a380:	0800a46b 	.word	0x0800a46b
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a395 	.word	0x0800a395
 800a38c:	0800a40b 	.word	0x0800a40b
 800a390:	0800a41f 	.word	0x0800a41f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a39a:	f043 0301 	orr.w	r3, r3, #1
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	18d1      	adds	r1, r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a3a      	ldr	r2, [r7, #32]
 800a3b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a3b4:	f7ff ff78 	bl	800a2a8 <prvInsertTimerInActiveList>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d06c      	beq.n	800a498 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a3c4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d061      	beq.n	800a498 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	441a      	add	r2, r3
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a3e6:	f7ff fe1d 	bl	800a024 <xTimerGenericCommand>
 800a3ea:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d152      	bne.n	800a498 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	61bb      	str	r3, [r7, #24]
    }
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	e7fd      	b.n	800a406 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a410:	f023 0301 	bic.w	r3, r3, #1
 800a414:	b2da      	uxtb	r2, r3
 800a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a418:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a41c:	e03d      	b.n	800a49a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a424:	f043 0301 	orr.w	r3, r3, #1
 800a428:	b2da      	uxtb	r2, r3
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a434:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10b      	bne.n	800a456 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	617b      	str	r3, [r7, #20]
    }
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a458:	699a      	ldr	r2, [r3, #24]
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	18d1      	adds	r1, r2, r3
 800a45e:	6a3b      	ldr	r3, [r7, #32]
 800a460:	6a3a      	ldr	r2, [r7, #32]
 800a462:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a464:	f7ff ff20 	bl	800a2a8 <prvInsertTimerInActiveList>
                        break;
 800a468:	e017      	b.n	800a49a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800a478:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a47a:	f000 fc83 	bl	800ad84 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a47e:	e00c      	b.n	800a49a <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a482:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a486:	f023 0301 	bic.w	r3, r3, #1
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a492:	e002      	b.n	800a49a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a494:	bf00      	nop
 800a496:	e000      	b.n	800a49a <prvProcessReceivedCommands+0x16e>
                        break;
 800a498:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a49a:	4b08      	ldr	r3, [pc, #32]	@ (800a4bc <prvProcessReceivedCommands+0x190>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f107 0108 	add.w	r1, r7, #8
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fe fbf3 	bl	8008c90 <xQueueReceive>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f47f af41 	bne.w	800a334 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800a4b2:	bf00      	nop
 800a4b4:	bf00      	nop
 800a4b6:	3728      	adds	r7, #40	@ 0x28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	2000078c 	.word	0x2000078c

0800a4c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4c6:	e049      	b.n	800a55c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4c8:	4b2e      	ldr	r3, [pc, #184]	@ (800a584 <prvSwitchTimerLists+0xc4>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a584 <prvSwitchTimerLists+0xc4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe f8c9 	bl	8008678 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d02f      	beq.n	800a55c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	4413      	add	r3, r2
 800a504:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d90e      	bls.n	800a52c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a51a:	4b1a      	ldr	r3, [pc, #104]	@ (800a584 <prvSwitchTimerLists+0xc4>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7fe f86e 	bl	8008606 <vListInsert>
 800a52a:	e017      	b.n	800a55c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a52c:	2300      	movs	r3, #0
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fd74 	bl	800a024 <xTimerGenericCommand>
 800a53c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <prvSwitchTimerLists+0x9c>
        __asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	603b      	str	r3, [r7, #0]
    }
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a55c:	4b09      	ldr	r3, [pc, #36]	@ (800a584 <prvSwitchTimerLists+0xc4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1b0      	bne.n	800a4c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800a566:	4b07      	ldr	r3, [pc, #28]	@ (800a584 <prvSwitchTimerLists+0xc4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800a56c:	4b06      	ldr	r3, [pc, #24]	@ (800a588 <prvSwitchTimerLists+0xc8>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a04      	ldr	r2, [pc, #16]	@ (800a584 <prvSwitchTimerLists+0xc4>)
 800a572:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a574:	4a04      	ldr	r2, [pc, #16]	@ (800a588 <prvSwitchTimerLists+0xc8>)
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	6013      	str	r3, [r2, #0]
    }
 800a57a:	bf00      	nop
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20000784 	.word	0x20000784
 800a588:	20000788 	.word	0x20000788

0800a58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a590:	f000 f9e4 	bl	800a95c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a594:	4b12      	ldr	r3, [pc, #72]	@ (800a5e0 <prvCheckForValidListAndQueue+0x54>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d11d      	bne.n	800a5d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a59c:	4811      	ldr	r0, [pc, #68]	@ (800a5e4 <prvCheckForValidListAndQueue+0x58>)
 800a59e:	f7fd ffe1 	bl	8008564 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a5a2:	4811      	ldr	r0, [pc, #68]	@ (800a5e8 <prvCheckForValidListAndQueue+0x5c>)
 800a5a4:	f7fd ffde 	bl	8008564 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a5a8:	4b10      	ldr	r3, [pc, #64]	@ (800a5ec <prvCheckForValidListAndQueue+0x60>)
 800a5aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a5e4 <prvCheckForValidListAndQueue+0x58>)
 800a5ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a5ae:	4b10      	ldr	r3, [pc, #64]	@ (800a5f0 <prvCheckForValidListAndQueue+0x64>)
 800a5b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a5e8 <prvCheckForValidListAndQueue+0x5c>)
 800a5b2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	210c      	movs	r1, #12
 800a5b8:	200a      	movs	r0, #10
 800a5ba:	f7fe f8f1 	bl	80087a0 <xQueueGenericCreate>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	4a07      	ldr	r2, [pc, #28]	@ (800a5e0 <prvCheckForValidListAndQueue+0x54>)
 800a5c2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800a5c4:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <prvCheckForValidListAndQueue+0x54>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d005      	beq.n	800a5d8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a5cc:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <prvCheckForValidListAndQueue+0x54>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4908      	ldr	r1, [pc, #32]	@ (800a5f4 <prvCheckForValidListAndQueue+0x68>)
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fd80 	bl	80090d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a5d8:	f000 f9f2 	bl	800a9c0 <vPortExitCritical>
    }
 800a5dc:	bf00      	nop
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	2000078c 	.word	0x2000078c
 800a5e4:	2000075c 	.word	0x2000075c
 800a5e8:	20000770 	.word	0x20000770
 800a5ec:	20000784 	.word	0x20000784
 800a5f0:	20000788 	.word	0x20000788
 800a5f4:	0800e41c 	.word	0x0800e41c

0800a5f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3b04      	subs	r3, #4
 800a608:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a610:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3b04      	subs	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f023 0201 	bic.w	r2, r3, #1
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b04      	subs	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a628:	4a0c      	ldr	r2, [pc, #48]	@ (800a65c <pxPortInitialiseStack+0x64>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3b14      	subs	r3, #20
 800a632:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3b04      	subs	r3, #4
 800a63e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f06f 0202 	mvn.w	r2, #2
 800a646:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3b20      	subs	r3, #32
 800a64c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a64e:	68fb      	ldr	r3, [r7, #12]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	0800a661 	.word	0x0800a661

0800a660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a66a:	4b13      	ldr	r3, [pc, #76]	@ (800a6b8 <prvTaskExitError+0x58>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a672:	d00b      	beq.n	800a68c <prvTaskExitError+0x2c>
        __asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60fb      	str	r3, [r7, #12]
    }
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	e7fd      	b.n	800a688 <prvTaskExitError+0x28>
        __asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60bb      	str	r3, [r7, #8]
    }
 800a69e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a6a0:	bf00      	nop
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0fc      	beq.n	800a6a2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	200000b0 	.word	0x200000b0
 800a6bc:	00000000 	.word	0x00000000

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	@ (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f3af 8000 	nop.w

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	20000658 	.word	0x20000658
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a6e8:	4808      	ldr	r0, [pc, #32]	@ (800a70c <prvPortStartFirstTask+0x24>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	f04f 0000 	mov.w	r0, #0
 800a6f6:	f380 8814 	msr	CONTROL, r0
 800a6fa:	b662      	cpsie	i
 800a6fc:	b661      	cpsie	f
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	df00      	svc	0
 800a708:	bf00      	nop
 800a70a:	0000      	.short	0x0000
 800a70c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop

0800a714 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a71a:	4b47      	ldr	r3, [pc, #284]	@ (800a838 <xPortStartScheduler+0x124>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a47      	ldr	r2, [pc, #284]	@ (800a83c <xPortStartScheduler+0x128>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d10b      	bne.n	800a73c <xPortStartScheduler+0x28>
        __asm volatile
 800a724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	613b      	str	r3, [r7, #16]
    }
 800a736:	bf00      	nop
 800a738:	bf00      	nop
 800a73a:	e7fd      	b.n	800a738 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a73c:	4b3e      	ldr	r3, [pc, #248]	@ (800a838 <xPortStartScheduler+0x124>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a3f      	ldr	r2, [pc, #252]	@ (800a840 <xPortStartScheduler+0x12c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d10b      	bne.n	800a75e <xPortStartScheduler+0x4a>
        __asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	60fb      	str	r3, [r7, #12]
    }
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a75e:	4b39      	ldr	r3, [pc, #228]	@ (800a844 <xPortStartScheduler+0x130>)
 800a760:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	b2db      	uxtb	r3, r3
 800a768:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	22ff      	movs	r2, #255	@ 0xff
 800a76e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a780:	b2da      	uxtb	r2, r3
 800a782:	4b31      	ldr	r3, [pc, #196]	@ (800a848 <xPortStartScheduler+0x134>)
 800a784:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a786:	4b31      	ldr	r3, [pc, #196]	@ (800a84c <xPortStartScheduler+0x138>)
 800a788:	2207      	movs	r2, #7
 800a78a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a78c:	e009      	b.n	800a7a2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800a78e:	4b2f      	ldr	r3, [pc, #188]	@ (800a84c <xPortStartScheduler+0x138>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3b01      	subs	r3, #1
 800a794:	4a2d      	ldr	r2, [pc, #180]	@ (800a84c <xPortStartScheduler+0x138>)
 800a796:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	005b      	lsls	r3, r3, #1
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7aa:	2b80      	cmp	r3, #128	@ 0x80
 800a7ac:	d0ef      	beq.n	800a78e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7ae:	4b27      	ldr	r3, [pc, #156]	@ (800a84c <xPortStartScheduler+0x138>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f1c3 0307 	rsb	r3, r3, #7
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	d00b      	beq.n	800a7d2 <xPortStartScheduler+0xbe>
        __asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	60bb      	str	r3, [r7, #8]
    }
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a84c <xPortStartScheduler+0x138>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	021b      	lsls	r3, r3, #8
 800a7d8:	4a1c      	ldr	r2, [pc, #112]	@ (800a84c <xPortStartScheduler+0x138>)
 800a7da:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7dc:	4b1b      	ldr	r3, [pc, #108]	@ (800a84c <xPortStartScheduler+0x138>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7e4:	4a19      	ldr	r2, [pc, #100]	@ (800a84c <xPortStartScheduler+0x138>)
 800a7e6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a7f0:	4b17      	ldr	r3, [pc, #92]	@ (800a850 <xPortStartScheduler+0x13c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a16      	ldr	r2, [pc, #88]	@ (800a850 <xPortStartScheduler+0x13c>)
 800a7f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a7fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a7fc:	4b14      	ldr	r3, [pc, #80]	@ (800a850 <xPortStartScheduler+0x13c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a13      	ldr	r2, [pc, #76]	@ (800a850 <xPortStartScheduler+0x13c>)
 800a802:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a806:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a808:	f000 f968 	bl	800aadc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a80c:	4b11      	ldr	r3, [pc, #68]	@ (800a854 <xPortStartScheduler+0x140>)
 800a80e:	2200      	movs	r2, #0
 800a810:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800a812:	f000 f987 	bl	800ab24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a816:	4b10      	ldr	r3, [pc, #64]	@ (800a858 <xPortStartScheduler+0x144>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a0f      	ldr	r2, [pc, #60]	@ (800a858 <xPortStartScheduler+0x144>)
 800a81c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a820:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a822:	f7ff ff61 	bl	800a6e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a826:	f7ff f84d 	bl	80098c4 <vTaskSwitchContext>
    prvTaskExitError();
 800a82a:	f7ff ff19 	bl	800a660 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	e000ed00 	.word	0xe000ed00
 800a83c:	410fc271 	.word	0x410fc271
 800a840:	410fc270 	.word	0x410fc270
 800a844:	e000e400 	.word	0xe000e400
 800a848:	20000798 	.word	0x20000798
 800a84c:	2000079c 	.word	0x2000079c
 800a850:	e000ed20 	.word	0xe000ed20
 800a854:	200000b0 	.word	0x200000b0
 800a858:	e000ef34 	.word	0xe000ef34

0800a85c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a862:	4b38      	ldr	r3, [pc, #224]	@ (800a944 <vInitPrioGroupValue+0xe8>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a38      	ldr	r2, [pc, #224]	@ (800a948 <vInitPrioGroupValue+0xec>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d10b      	bne.n	800a884 <vInitPrioGroupValue+0x28>
        __asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	613b      	str	r3, [r7, #16]
    }
 800a87e:	bf00      	nop
 800a880:	bf00      	nop
 800a882:	e7fd      	b.n	800a880 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a884:	4b2f      	ldr	r3, [pc, #188]	@ (800a944 <vInitPrioGroupValue+0xe8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a30      	ldr	r2, [pc, #192]	@ (800a94c <vInitPrioGroupValue+0xf0>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d10b      	bne.n	800a8a6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	60fb      	str	r3, [r7, #12]
    }
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	e7fd      	b.n	800a8a2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a950 <vInitPrioGroupValue+0xf4>)
 800a8a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	22ff      	movs	r2, #255	@ 0xff
 800a8b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4b22      	ldr	r3, [pc, #136]	@ (800a954 <vInitPrioGroupValue+0xf8>)
 800a8cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ce:	4b22      	ldr	r3, [pc, #136]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8d4:	e009      	b.n	800a8ea <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800a8d6:	4b20      	ldr	r3, [pc, #128]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a8de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8f2:	2b80      	cmp	r3, #128	@ 0x80
 800a8f4:	d0ef      	beq.n	800a8d6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8f6:	4b18      	ldr	r3, [pc, #96]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f1c3 0307 	rsb	r3, r3, #7
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d00b      	beq.n	800a91a <vInitPrioGroupValue+0xbe>
        __asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	60bb      	str	r3, [r7, #8]
    }
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	e7fd      	b.n	800a916 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a91a:	4b0f      	ldr	r3, [pc, #60]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	4a0d      	ldr	r2, [pc, #52]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a922:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a924:	4b0c      	ldr	r3, [pc, #48]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a92c:	4a0a      	ldr	r2, [pc, #40]	@ (800a958 <vInitPrioGroupValue+0xfc>)
 800a92e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	b2da      	uxtb	r2, r3
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800a938:	bf00      	nop
 800a93a:	371c      	adds	r7, #28
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	e000ed00 	.word	0xe000ed00
 800a948:	410fc271 	.word	0x410fc271
 800a94c:	410fc270 	.word	0x410fc270
 800a950:	e000e400 	.word	0xe000e400
 800a954:	20000798 	.word	0x20000798
 800a958:	2000079c 	.word	0x2000079c

0800a95c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
        __asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	607b      	str	r3, [r7, #4]
    }
 800a974:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a976:	4b10      	ldr	r3, [pc, #64]	@ (800a9b8 <vPortEnterCritical+0x5c>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3301      	adds	r3, #1
 800a97c:	4a0e      	ldr	r2, [pc, #56]	@ (800a9b8 <vPortEnterCritical+0x5c>)
 800a97e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a980:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b8 <vPortEnterCritical+0x5c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d110      	bne.n	800a9aa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a988:	4b0c      	ldr	r3, [pc, #48]	@ (800a9bc <vPortEnterCritical+0x60>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <vPortEnterCritical+0x4e>
        __asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	603b      	str	r3, [r7, #0]
    }
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <vPortEnterCritical+0x4a>
    }
}
 800a9aa:	bf00      	nop
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	200000b0 	.word	0x200000b0
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a9c6:	4b12      	ldr	r3, [pc, #72]	@ (800aa10 <vPortExitCritical+0x50>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <vPortExitCritical+0x26>
        __asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
    }
 800a9e0:	bf00      	nop
 800a9e2:	bf00      	nop
 800a9e4:	e7fd      	b.n	800a9e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800aa10 <vPortExitCritical+0x50>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a08      	ldr	r2, [pc, #32]	@ (800aa10 <vPortExitCritical+0x50>)
 800a9ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a9f0:	4b07      	ldr	r3, [pc, #28]	@ (800aa10 <vPortExitCritical+0x50>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d105      	bne.n	800aa04 <vPortExitCritical+0x44>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	f383 8811 	msr	BASEPRI, r3
    }
 800aa02:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	200000b0 	.word	0x200000b0
	...

0800aa20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800aa20:	f3ef 8009 	mrs	r0, PSP
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4b15      	ldr	r3, [pc, #84]	@ (800aa80 <pxCurrentTCBConst>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	f01e 0f10 	tst.w	lr, #16
 800aa30:	bf08      	it	eq
 800aa32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	6010      	str	r0, [r2, #0]
 800aa3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa44:	f380 8811 	msr	BASEPRI, r0
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f7fe ff38 	bl	80098c4 <vTaskSwitchContext>
 800aa54:	f04f 0000 	mov.w	r0, #0
 800aa58:	f380 8811 	msr	BASEPRI, r0
 800aa5c:	bc09      	pop	{r0, r3}
 800aa5e:	6819      	ldr	r1, [r3, #0]
 800aa60:	6808      	ldr	r0, [r1, #0]
 800aa62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa66:	f01e 0f10 	tst.w	lr, #16
 800aa6a:	bf08      	it	eq
 800aa6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa70:	f380 8809 	msr	PSP, r0
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	f3af 8000 	nop.w

0800aa80 <pxCurrentTCBConst>:
 800aa80:	20000658 	.word	0x20000658
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop

0800aa88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
        __asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	607b      	str	r3, [r7, #4]
    }
 800aaa0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800aaa2:	f001 fdd3 	bl	800c64c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800aaa6:	f7fe fe4f 	bl	8009748 <xTaskIncrementTick>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d006      	beq.n	800aabe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800aab0:	f001 fe2a 	bl	800c708 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aab4:	4b08      	ldr	r3, [pc, #32]	@ (800aad8 <SysTick_Handler+0x50>)
 800aab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e001      	b.n	800aac2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800aabe:	f001 fe07 	bl	800c6d0 <SEGGER_SYSVIEW_RecordExitISR>
 800aac2:	2300      	movs	r3, #0
 800aac4:	603b      	str	r3, [r7, #0]
        __asm volatile
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	f383 8811 	msr	BASEPRI, r3
    }
 800aacc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	e000ed04 	.word	0xe000ed04

0800aadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aae0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab10 <vPortSetupTimerInterrupt+0x34>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aae6:	4b0b      	ldr	r3, [pc, #44]	@ (800ab14 <vPortSetupTimerInterrupt+0x38>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaec:	4b0a      	ldr	r3, [pc, #40]	@ (800ab18 <vPortSetupTimerInterrupt+0x3c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a0a      	ldr	r2, [pc, #40]	@ (800ab1c <vPortSetupTimerInterrupt+0x40>)
 800aaf2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf6:	099b      	lsrs	r3, r3, #6
 800aaf8:	4a09      	ldr	r2, [pc, #36]	@ (800ab20 <vPortSetupTimerInterrupt+0x44>)
 800aafa:	3b01      	subs	r3, #1
 800aafc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aafe:	4b04      	ldr	r3, [pc, #16]	@ (800ab10 <vPortSetupTimerInterrupt+0x34>)
 800ab00:	2207      	movs	r2, #7
 800ab02:	601a      	str	r2, [r3, #0]
}
 800ab04:	bf00      	nop
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	e000e010 	.word	0xe000e010
 800ab14:	e000e018 	.word	0xe000e018
 800ab18:	20000070 	.word	0x20000070
 800ab1c:	10624dd3 	.word	0x10624dd3
 800ab20:	e000e014 	.word	0xe000e014

0800ab24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800ab24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab34 <vPortEnableVFP+0x10>
 800ab28:	6801      	ldr	r1, [r0, #0]
 800ab2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ab2e:	6001      	str	r1, [r0, #0]
 800ab30:	4770      	bx	lr
 800ab32:	0000      	.short	0x0000
 800ab34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800ab38:	bf00      	nop
 800ab3a:	bf00      	nop

0800ab3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800ab42:	f3ef 8305 	mrs	r3, IPSR
 800ab46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	d915      	bls.n	800ab7a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab4e:	4a18      	ldr	r2, [pc, #96]	@ (800abb0 <vPortValidateInterruptPriority+0x74>)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4413      	add	r3, r2
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab58:	4b16      	ldr	r3, [pc, #88]	@ (800abb4 <vPortValidateInterruptPriority+0x78>)
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	7afa      	ldrb	r2, [r7, #11]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d20b      	bcs.n	800ab7a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	607b      	str	r3, [r7, #4]
    }
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	e7fd      	b.n	800ab76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab7a:	4b0f      	ldr	r3, [pc, #60]	@ (800abb8 <vPortValidateInterruptPriority+0x7c>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab82:	4b0e      	ldr	r3, [pc, #56]	@ (800abbc <vPortValidateInterruptPriority+0x80>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d90b      	bls.n	800aba2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	603b      	str	r3, [r7, #0]
    }
 800ab9c:	bf00      	nop
 800ab9e:	bf00      	nop
 800aba0:	e7fd      	b.n	800ab9e <vPortValidateInterruptPriority+0x62>
    }
 800aba2:	bf00      	nop
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	e000e3f0 	.word	0xe000e3f0
 800abb4:	20000798 	.word	0x20000798
 800abb8:	e000ed0c 	.word	0xe000ed0c
 800abbc:	2000079c 	.word	0x2000079c

0800abc0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08a      	sub	sp, #40	@ 0x28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800abcc:	f7fe fcea 	bl	80095a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800abd0:	4b66      	ldr	r3, [pc, #408]	@ (800ad6c <pvPortMalloc+0x1ac>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800abd8:	f000 f938 	bl	800ae4c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abdc:	4b64      	ldr	r3, [pc, #400]	@ (800ad70 <pvPortMalloc+0x1b0>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4013      	ands	r3, r2
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 80a9 	bne.w	800ad3c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d02e      	beq.n	800ac4e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800abf0:	2208      	movs	r2, #8
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d228      	bcs.n	800ac4e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800abfc:	2208      	movs	r2, #8
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4413      	add	r3, r2
 800ac02:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d022      	beq.n	800ac54 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f023 0307 	bic.w	r3, r3, #7
 800ac14:	3308      	adds	r3, #8
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d215      	bcs.n	800ac48 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f023 0307 	bic.w	r3, r3, #7
 800ac22:	3308      	adds	r3, #8
 800ac24:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d011      	beq.n	800ac54 <pvPortMalloc+0x94>
        __asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	617b      	str	r3, [r7, #20]
    }
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac4c:	e002      	b.n	800ac54 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	607b      	str	r3, [r7, #4]
 800ac52:	e000      	b.n	800ac56 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac54:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d06f      	beq.n	800ad3c <pvPortMalloc+0x17c>
 800ac5c:	4b45      	ldr	r3, [pc, #276]	@ (800ad74 <pvPortMalloc+0x1b4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d86a      	bhi.n	800ad3c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ac66:	4b44      	ldr	r3, [pc, #272]	@ (800ad78 <pvPortMalloc+0x1b8>)
 800ac68:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800ac6a:	4b43      	ldr	r3, [pc, #268]	@ (800ad78 <pvPortMalloc+0x1b8>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac70:	e004      	b.n	800ac7c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d903      	bls.n	800ac8e <pvPortMalloc+0xce>
 800ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f1      	bne.n	800ac72 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ac8e:	4b37      	ldr	r3, [pc, #220]	@ (800ad6c <pvPortMalloc+0x1ac>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d051      	beq.n	800ad3c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2208      	movs	r2, #8
 800ac9e:	4413      	add	r3, r2
 800aca0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	1ad2      	subs	r2, r2, r3
 800acb2:	2308      	movs	r3, #8
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d920      	bls.n	800acfc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4413      	add	r3, r2
 800acc0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f003 0307 	and.w	r3, r3, #7
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00b      	beq.n	800ace4 <pvPortMalloc+0x124>
        __asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	613b      	str	r3, [r7, #16]
    }
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	e7fd      	b.n	800ace0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	685a      	ldr	r2, [r3, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	1ad2      	subs	r2, r2, r3
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800acf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acf6:	69b8      	ldr	r0, [r7, #24]
 800acf8:	f000 f90a 	bl	800af10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acfc:	4b1d      	ldr	r3, [pc, #116]	@ (800ad74 <pvPortMalloc+0x1b4>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	4a1b      	ldr	r2, [pc, #108]	@ (800ad74 <pvPortMalloc+0x1b4>)
 800ad08:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ad74 <pvPortMalloc+0x1b4>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ad7c <pvPortMalloc+0x1bc>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d203      	bcs.n	800ad1e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad16:	4b17      	ldr	r3, [pc, #92]	@ (800ad74 <pvPortMalloc+0x1b4>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a18      	ldr	r2, [pc, #96]	@ (800ad7c <pvPortMalloc+0x1bc>)
 800ad1c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4b13      	ldr	r3, [pc, #76]	@ (800ad70 <pvPortMalloc+0x1b0>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	431a      	orrs	r2, r3
 800ad28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2e:	2200      	movs	r2, #0
 800ad30:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ad32:	4b13      	ldr	r3, [pc, #76]	@ (800ad80 <pvPortMalloc+0x1c0>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	4a11      	ldr	r2, [pc, #68]	@ (800ad80 <pvPortMalloc+0x1c0>)
 800ad3a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ad3c:	f7fe fc40 	bl	80095c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00b      	beq.n	800ad62 <pvPortMalloc+0x1a2>
        __asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	60fb      	str	r3, [r7, #12]
    }
 800ad5c:	bf00      	nop
 800ad5e:	bf00      	nop
 800ad60:	e7fd      	b.n	800ad5e <pvPortMalloc+0x19e>
    return pvReturn;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3728      	adds	r7, #40	@ 0x28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	200133a8 	.word	0x200133a8
 800ad70:	200133bc 	.word	0x200133bc
 800ad74:	200133ac 	.word	0x200133ac
 800ad78:	200133a0 	.word	0x200133a0
 800ad7c:	200133b0 	.word	0x200133b0
 800ad80:	200133b4 	.word	0x200133b4

0800ad84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d04f      	beq.n	800ae36 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ad96:	2308      	movs	r3, #8
 800ad98:	425b      	negs	r3, r3
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	4b25      	ldr	r3, [pc, #148]	@ (800ae40 <vPortFree+0xbc>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4013      	ands	r3, r2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10b      	bne.n	800adca <vPortFree+0x46>
        __asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	60fb      	str	r3, [r7, #12]
    }
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop
 800adc8:	e7fd      	b.n	800adc6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00b      	beq.n	800adea <vPortFree+0x66>
        __asm volatile
 800add2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add6:	f383 8811 	msr	BASEPRI, r3
 800adda:	f3bf 8f6f 	isb	sy
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	60bb      	str	r3, [r7, #8]
    }
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
 800ade8:	e7fd      	b.n	800ade6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	685a      	ldr	r2, [r3, #4]
 800adee:	4b14      	ldr	r3, [pc, #80]	@ (800ae40 <vPortFree+0xbc>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4013      	ands	r3, r2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d01e      	beq.n	800ae36 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d11a      	bne.n	800ae36 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	4b0e      	ldr	r3, [pc, #56]	@ (800ae40 <vPortFree+0xbc>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	401a      	ands	r2, r3
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800ae10:	f7fe fbc8 	bl	80095a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	4b0a      	ldr	r3, [pc, #40]	@ (800ae44 <vPortFree+0xc0>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	4a09      	ldr	r2, [pc, #36]	@ (800ae44 <vPortFree+0xc0>)
 800ae20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae22:	6938      	ldr	r0, [r7, #16]
 800ae24:	f000 f874 	bl	800af10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ae28:	4b07      	ldr	r3, [pc, #28]	@ (800ae48 <vPortFree+0xc4>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	4a06      	ldr	r2, [pc, #24]	@ (800ae48 <vPortFree+0xc4>)
 800ae30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ae32:	f7fe fbc5 	bl	80095c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ae36:	bf00      	nop
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	200133bc 	.word	0x200133bc
 800ae44:	200133ac 	.word	0x200133ac
 800ae48:	200133b8 	.word	0x200133b8

0800ae4c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b085      	sub	sp, #20
 800ae50:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae52:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800ae56:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800ae58:	4b27      	ldr	r3, [pc, #156]	@ (800aef8 <prvHeapInit+0xac>)
 800ae5a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00c      	beq.n	800ae80 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3307      	adds	r3, #7
 800ae6a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 0307 	bic.w	r3, r3, #7
 800ae72:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	4a1f      	ldr	r2, [pc, #124]	@ (800aef8 <prvHeapInit+0xac>)
 800ae7c:	4413      	add	r3, r2
 800ae7e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae84:	4a1d      	ldr	r2, [pc, #116]	@ (800aefc <prvHeapInit+0xb0>)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ae8a:	4b1c      	ldr	r3, [pc, #112]	@ (800aefc <prvHeapInit+0xb0>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	4413      	add	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ae98:	2208      	movs	r2, #8
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f023 0307 	bic.w	r3, r3, #7
 800aea6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <prvHeapInit+0xb4>)
 800aeac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800aeae:	4b14      	ldr	r3, [pc, #80]	@ (800af00 <prvHeapInit+0xb4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800aeb6:	4b12      	ldr	r3, [pc, #72]	@ (800af00 <prvHeapInit+0xb4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	1ad2      	subs	r2, r2, r3
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aecc:	4b0c      	ldr	r3, [pc, #48]	@ (800af00 <prvHeapInit+0xb4>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4a0a      	ldr	r2, [pc, #40]	@ (800af04 <prvHeapInit+0xb8>)
 800aeda:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4a09      	ldr	r2, [pc, #36]	@ (800af08 <prvHeapInit+0xbc>)
 800aee2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aee4:	4b09      	ldr	r3, [pc, #36]	@ (800af0c <prvHeapInit+0xc0>)
 800aee6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aeea:	601a      	str	r2, [r3, #0]
}
 800aeec:	bf00      	nop
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	200007a0 	.word	0x200007a0
 800aefc:	200133a0 	.word	0x200133a0
 800af00:	200133a8 	.word	0x200133a8
 800af04:	200133b0 	.word	0x200133b0
 800af08:	200133ac 	.word	0x200133ac
 800af0c:	200133bc 	.word	0x200133bc

0800af10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af18:	4b28      	ldr	r3, [pc, #160]	@ (800afbc <prvInsertBlockIntoFreeList+0xac>)
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e002      	b.n	800af24 <prvInsertBlockIntoFreeList+0x14>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d8f7      	bhi.n	800af1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	4413      	add	r3, r2
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d108      	bne.n	800af52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685a      	ldr	r2, [r3, #4]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	441a      	add	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	441a      	add	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	429a      	cmp	r2, r3
 800af64:	d118      	bne.n	800af98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	4b15      	ldr	r3, [pc, #84]	@ (800afc0 <prvInsertBlockIntoFreeList+0xb0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d00d      	beq.n	800af8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	441a      	add	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e008      	b.n	800afa0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af8e:	4b0c      	ldr	r3, [pc, #48]	@ (800afc0 <prvInsertBlockIntoFreeList+0xb0>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	601a      	str	r2, [r3, #0]
 800af96:	e003      	b.n	800afa0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d002      	beq.n	800afae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	200133a0 	.word	0x200133a0
 800afc0:	200133a8 	.word	0x200133a8

0800afc4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800afc4:	b580      	push	{r7, lr}
 800afc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800afc8:	4803      	ldr	r0, [pc, #12]	@ (800afd8 <_cbSendSystemDesc+0x14>)
 800afca:	f001 fae9 	bl	800c5a0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800afce:	4803      	ldr	r0, [pc, #12]	@ (800afdc <_cbSendSystemDesc+0x18>)
 800afd0:	f001 fae6 	bl	800c5a0 <SEGGER_SYSVIEW_SendSysDesc>
}
 800afd4:	bf00      	nop
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	0800e424 	.word	0x0800e424
 800afdc:	0800e44c 	.word	0x0800e44c

0800afe0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800afe4:	4b06      	ldr	r3, [pc, #24]	@ (800b000 <SEGGER_SYSVIEW_Conf+0x20>)
 800afe6:	6818      	ldr	r0, [r3, #0]
 800afe8:	4b05      	ldr	r3, [pc, #20]	@ (800b000 <SEGGER_SYSVIEW_Conf+0x20>)
 800afea:	6819      	ldr	r1, [r3, #0]
 800afec:	4b05      	ldr	r3, [pc, #20]	@ (800b004 <SEGGER_SYSVIEW_Conf+0x24>)
 800afee:	4a06      	ldr	r2, [pc, #24]	@ (800b008 <SEGGER_SYSVIEW_Conf+0x28>)
 800aff0:	f000 fe54 	bl	800bc9c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800aff4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800aff8:	f000 fe94 	bl	800bd24 <SEGGER_SYSVIEW_SetRAMBase>
}
 800affc:	bf00      	nop
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20000070 	.word	0x20000070
 800b004:	0800afc5 	.word	0x0800afc5
 800b008:	0800e4f4 	.word	0x0800e4f4

0800b00c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800b00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b00e:	b085      	sub	sp, #20
 800b010:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800b012:	2300      	movs	r3, #0
 800b014:	607b      	str	r3, [r7, #4]
 800b016:	e033      	b.n	800b080 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800b018:	491e      	ldr	r1, [pc, #120]	@ (800b094 <_cbSendTaskList+0x88>)
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	491a      	ldr	r1, [pc, #104]	@ (800b094 <_cbSendTaskList+0x88>)
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	4613      	mov	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	440b      	add	r3, r1
 800b036:	3304      	adds	r3, #4
 800b038:	6819      	ldr	r1, [r3, #0]
 800b03a:	4c16      	ldr	r4, [pc, #88]	@ (800b094 <_cbSendTaskList+0x88>)
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4423      	add	r3, r4
 800b048:	3308      	adds	r3, #8
 800b04a:	681c      	ldr	r4, [r3, #0]
 800b04c:	4d11      	ldr	r5, [pc, #68]	@ (800b094 <_cbSendTaskList+0x88>)
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	442b      	add	r3, r5
 800b05a:	330c      	adds	r3, #12
 800b05c:	681d      	ldr	r5, [r3, #0]
 800b05e:	4e0d      	ldr	r6, [pc, #52]	@ (800b094 <_cbSendTaskList+0x88>)
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4433      	add	r3, r6
 800b06c:	3310      	adds	r3, #16
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	462b      	mov	r3, r5
 800b074:	4622      	mov	r2, r4
 800b076:	f000 f8bd 	bl	800b1f4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	3301      	adds	r3, #1
 800b07e:	607b      	str	r3, [r7, #4]
 800b080:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <_cbSendTaskList+0x8c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	429a      	cmp	r2, r3
 800b088:	d3c6      	bcc.n	800b018 <_cbSendTaskList+0xc>
  }
}
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b094:	200133c0 	.word	0x200133c0
 800b098:	20013460 	.word	0x20013460

0800b09c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800b09c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800b0a4:	f7fe fb3e 	bl	8009724 <xTaskGetTickCountFromISR>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	469a      	mov	sl, r3
 800b0ae:	4693      	mov	fp, r2
 800b0b0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800b0b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	f04f 0a00 	mov.w	sl, #0
 800b0c0:	f04f 0b00 	mov.w	fp, #0
 800b0c4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800b0c8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800b0cc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800b0d0:	4652      	mov	r2, sl
 800b0d2:	465b      	mov	r3, fp
 800b0d4:	1a14      	subs	r4, r2, r0
 800b0d6:	eb63 0501 	sbc.w	r5, r3, r1
 800b0da:	f04f 0200 	mov.w	r2, #0
 800b0de:	f04f 0300 	mov.w	r3, #0
 800b0e2:	00ab      	lsls	r3, r5, #2
 800b0e4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b0e8:	00a2      	lsls	r2, r4, #2
 800b0ea:	4614      	mov	r4, r2
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	eb14 0800 	adds.w	r8, r4, r0
 800b0f2:	eb45 0901 	adc.w	r9, r5, r1
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	f04f 0300 	mov.w	r3, #0
 800b0fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b10a:	4690      	mov	r8, r2
 800b10c:	4699      	mov	r9, r3
 800b10e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800b112:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800b116:	4610      	mov	r0, r2
 800b118:	4619      	mov	r1, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800b124 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af02      	add	r7, sp, #8
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b132:	2205      	movs	r2, #5
 800b134:	492b      	ldr	r1, [pc, #172]	@ (800b1e4 <SYSVIEW_AddTask+0xc0>)
 800b136:	68b8      	ldr	r0, [r7, #8]
 800b138:	f001 ffc8 	bl	800d0cc <memcmp>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d04b      	beq.n	800b1da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b142:	4b29      	ldr	r3, [pc, #164]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b07      	cmp	r3, #7
 800b148:	d903      	bls.n	800b152 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b14a:	4828      	ldr	r0, [pc, #160]	@ (800b1ec <SYSVIEW_AddTask+0xc8>)
 800b14c:	f001 fd26 	bl	800cb9c <SEGGER_SYSVIEW_Warn>
    return;
 800b150:	e044      	b.n	800b1dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b152:	4b25      	ldr	r3, [pc, #148]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	4926      	ldr	r1, [pc, #152]	@ (800b1f0 <SYSVIEW_AddTask+0xcc>)
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	440b      	add	r3, r1
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b166:	4b20      	ldr	r3, [pc, #128]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	4921      	ldr	r1, [pc, #132]	@ (800b1f0 <SYSVIEW_AddTask+0xcc>)
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	440b      	add	r3, r1
 800b176:	3304      	adds	r3, #4
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b17c:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	491b      	ldr	r1, [pc, #108]	@ (800b1f0 <SYSVIEW_AddTask+0xcc>)
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	3308      	adds	r3, #8
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b192:	4b15      	ldr	r3, [pc, #84]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	4916      	ldr	r1, [pc, #88]	@ (800b1f0 <SYSVIEW_AddTask+0xcc>)
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	440b      	add	r3, r1
 800b1a2:	330c      	adds	r3, #12
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	4910      	ldr	r1, [pc, #64]	@ (800b1f0 <SYSVIEW_AddTask+0xcc>)
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	440b      	add	r3, r1
 800b1b8:	3310      	adds	r3, #16
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b1be:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	4a08      	ldr	r2, [pc, #32]	@ (800b1e8 <SYSVIEW_AddTask+0xc4>)
 800b1c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	68b9      	ldr	r1, [r7, #8]
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 f80e 	bl	800b1f4 <SYSVIEW_SendTaskInfo>
 800b1d8:	e000      	b.n	800b1dc <SYSVIEW_AddTask+0xb8>
    return;
 800b1da:	bf00      	nop

}
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	0800e45c 	.word	0x0800e45c
 800b1e8:	20013460 	.word	0x20013460
 800b1ec:	0800e464 	.word	0x0800e464
 800b1f0:	200133c0 	.word	0x200133c0

0800b1f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	@ 0x28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b202:	f107 0314 	add.w	r3, r7, #20
 800b206:	2214      	movs	r2, #20
 800b208:	2100      	movs	r1, #0
 800b20a:	4618      	mov	r0, r3
 800b20c:	f001 ff6e 	bl	800d0ec <memset>
  TaskInfo.TaskID     = TaskID;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b224:	f107 0314 	add.w	r3, r7, #20
 800b228:	4618      	mov	r0, r3
 800b22a:	f001 f8c1 	bl	800c3b0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b22e:	bf00      	nop
 800b230:	3728      	adds	r7, #40	@ 0x28
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b23e:	4b24      	ldr	r3, [pc, #144]	@ (800b2d0 <_DoInit+0x98>)
 800b240:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2203      	movs	r2, #3
 800b246:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2203      	movs	r2, #3
 800b24c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a20      	ldr	r2, [pc, #128]	@ (800b2d4 <_DoInit+0x9c>)
 800b252:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a20      	ldr	r2, [pc, #128]	@ (800b2d8 <_DoInit+0xa0>)
 800b258:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b260:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a17      	ldr	r2, [pc, #92]	@ (800b2d4 <_DoInit+0x9c>)
 800b278:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a17      	ldr	r2, [pc, #92]	@ (800b2dc <_DoInit+0xa4>)
 800b27e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2210      	movs	r2, #16
 800b284:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3307      	adds	r3, #7
 800b29c:	4a10      	ldr	r2, [pc, #64]	@ (800b2e0 <_DoInit+0xa8>)
 800b29e:	6810      	ldr	r0, [r2, #0]
 800b2a0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b2a2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b2e4 <_DoInit+0xac>)
 800b2aa:	6810      	ldr	r0, [r2, #0]
 800b2ac:	6018      	str	r0, [r3, #0]
 800b2ae:	8891      	ldrh	r1, [r2, #4]
 800b2b0:	7992      	ldrb	r2, [r2, #6]
 800b2b2:	8099      	strh	r1, [r3, #4]
 800b2b4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b2b6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b2c0:	f3bf 8f5f 	dmb	sy
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	20013464 	.word	0x20013464
 800b2d4:	0800e4b4 	.word	0x0800e4b4
 800b2d8:	2001350c 	.word	0x2001350c
 800b2dc:	2001390c 	.word	0x2001390c
 800b2e0:	0800e4c0 	.word	0x0800e4c0
 800b2e4:	0800e4c4 	.word	0x0800e4c4

0800b2e8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	@ 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d905      	bls.n	800b318 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	3b01      	subs	r3, #1
 800b314:	627b      	str	r3, [r7, #36]	@ 0x24
 800b316:	e007      	b.n	800b328 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	69b9      	ldr	r1, [r7, #24]
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	1acb      	subs	r3, r1, r3
 800b322:	4413      	add	r3, r2
 800b324:	3b01      	subs	r3, #1
 800b326:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b332:	4293      	cmp	r3, r2
 800b334:	bf28      	it	cs
 800b336:	4613      	movcs	r3, r2
 800b338:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800b33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4293      	cmp	r3, r2
 800b340:	bf28      	it	cs
 800b342:	4613      	movcs	r3, r2
 800b344:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	685a      	ldr	r2, [r3, #4]
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800b350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	6978      	ldr	r0, [r7, #20]
 800b356:	f001 ff2c 	bl	800d1b2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800b35a:	6a3a      	ldr	r2, [r7, #32]
 800b35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35e:	4413      	add	r3, r2
 800b360:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b366:	4413      	add	r3, r2
 800b368:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800b372:	69fa      	ldr	r2, [r7, #28]
 800b374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b376:	4413      	add	r3, r2
 800b378:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	429a      	cmp	r2, r3
 800b382:	d101      	bne.n	800b388 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800b384:	2300      	movs	r3, #0
 800b386:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b388:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	69fa      	ldr	r2, [r7, #28]
 800b390:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1b2      	bne.n	800b2fe <_WriteBlocking+0x16>
  return NumBytesWritten;
 800b398:	6a3b      	ldr	r3, [r7, #32]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3728      	adds	r7, #40	@ 0x28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b088      	sub	sp, #32
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800b3be:	69ba      	ldr	r2, [r7, #24]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d911      	bls.n	800b3ea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	6938      	ldr	r0, [r7, #16]
 800b3d6:	f001 feec 	bl	800d1b2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b3da:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	441a      	add	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800b3e8:	e01f      	b.n	800b42a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	68b9      	ldr	r1, [r7, #8]
 800b3fc:	6938      	ldr	r0, [r7, #16]
 800b3fe:	f001 fed8 	bl	800d1b2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	4413      	add	r3, r2
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	4619      	mov	r1, r3
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f001 fec9 	bl	800d1b2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b420:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	60da      	str	r2, [r3, #12]
}
 800b42a:	bf00      	nop
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800b432:	b480      	push	{r7}
 800b434:	b087      	sub	sp, #28
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d808      	bhi.n	800b460 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689a      	ldr	r2, [r3, #8]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	1ad2      	subs	r2, r2, r3
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	4413      	add	r3, r2
 800b45a:	3b01      	subs	r3, #1
 800b45c:	617b      	str	r3, [r7, #20]
 800b45e:	e004      	b.n	800b46a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	3b01      	subs	r3, #1
 800b468:	617b      	str	r3, [r7, #20]
  }
  return r;
 800b46a:	697b      	ldr	r3, [r7, #20]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	371c      	adds	r7, #28
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08c      	sub	sp, #48	@ 0x30
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b484:	4b3e      	ldr	r3, [pc, #248]	@ (800b580 <SEGGER_RTT_ReadNoLock+0x108>)
 800b486:	623b      	str	r3, [r7, #32]
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <SEGGER_RTT_ReadNoLock+0x1e>
 800b492:	f7ff fed1 	bl	800b238 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	4613      	mov	r3, r2
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	4413      	add	r3, r2
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	3360      	adds	r3, #96	@ 0x60
 800b4a2:	4a37      	ldr	r2, [pc, #220]	@ (800b580 <SEGGER_RTT_ReadNoLock+0x108>)
 800b4a4:	4413      	add	r3, r2
 800b4a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b4bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d92b      	bls.n	800b51c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	689a      	ldr	r2, [r3, #8]
 800b4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	bf28      	it	cs
 800b4d6:	4613      	movcs	r3, r2
 800b4d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e0:	4413      	add	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	6939      	ldr	r1, [r7, #16]
 800b4e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4ea:	f001 fe62 	bl	800d1b2 <memcpy>
    NumBytesRead += NumBytesRem;
 800b4ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800b4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b506:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4413      	add	r3, r2
 800b50c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b514:	429a      	cmp	r2, r3
 800b516:	d101      	bne.n	800b51c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b518:	2300      	movs	r3, #0
 800b51a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4293      	cmp	r3, r2
 800b52a:	bf28      	it	cs
 800b52c:	4613      	movcs	r3, r2
 800b52e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d019      	beq.n	800b56a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	685a      	ldr	r2, [r3, #4]
 800b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b53c:	4413      	add	r3, r2
 800b53e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	6939      	ldr	r1, [r7, #16]
 800b544:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b546:	f001 fe34 	bl	800d1b2 <memcpy>
    NumBytesRead += NumBytesRem;
 800b54a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	4413      	add	r3, r2
 800b550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800b552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	4413      	add	r3, r2
 800b558:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	4413      	add	r3, r2
 800b568:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800b56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d002      	beq.n	800b576 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b574:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3730      	adds	r7, #48	@ 0x30
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20013464 	.word	0x20013464

0800b584 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	4613      	mov	r3, r2
 800b59a:	005b      	lsls	r3, r3, #1
 800b59c:	4413      	add	r3, r2
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b620 <SEGGER_RTT_WriteNoLock+0x9c>)
 800b5a2:	4413      	add	r3, r2
 800b5a4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d029      	beq.n	800b602 <SEGGER_RTT_WriteNoLock+0x7e>
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d82e      	bhi.n	800b610 <SEGGER_RTT_WriteNoLock+0x8c>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d002      	beq.n	800b5bc <SEGGER_RTT_WriteNoLock+0x38>
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d013      	beq.n	800b5e2 <SEGGER_RTT_WriteNoLock+0x5e>
 800b5ba:	e029      	b.n	800b610 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b5bc:	6978      	ldr	r0, [r7, #20]
 800b5be:	f7ff ff38 	bl	800b432 <_GetAvailWriteSpace>
 800b5c2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d202      	bcs.n	800b5d2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800b5d0:	e021      	b.n	800b616 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	69b9      	ldr	r1, [r7, #24]
 800b5da:	6978      	ldr	r0, [r7, #20]
 800b5dc:	f7ff fee1 	bl	800b3a2 <_WriteNoCheck>
    break;
 800b5e0:	e019      	b.n	800b616 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800b5e2:	6978      	ldr	r0, [r7, #20]
 800b5e4:	f7ff ff25 	bl	800b432 <_GetAvailWriteSpace>
 800b5e8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	bf28      	it	cs
 800b5f2:	4613      	movcs	r3, r2
 800b5f4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	69b9      	ldr	r1, [r7, #24]
 800b5fa:	6978      	ldr	r0, [r7, #20]
 800b5fc:	f7ff fed1 	bl	800b3a2 <_WriteNoCheck>
    break;
 800b600:	e009      	b.n	800b616 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	69b9      	ldr	r1, [r7, #24]
 800b606:	6978      	ldr	r0, [r7, #20]
 800b608:	f7ff fe6e 	bl	800b2e8 <_WriteBlocking>
 800b60c:	61f8      	str	r0, [r7, #28]
    break;
 800b60e:	e002      	b.n	800b616 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800b610:	2300      	movs	r3, #0
 800b612:	61fb      	str	r3, [r7, #28]
    break;
 800b614:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800b616:	69fb      	ldr	r3, [r7, #28]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3720      	adds	r7, #32
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20013464 	.word	0x20013464

0800b624 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800b624:	b580      	push	{r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800b630:	4b0e      	ldr	r3, [pc, #56]	@ (800b66c <SEGGER_RTT_Write+0x48>)
 800b632:	61fb      	str	r3, [r7, #28]
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <SEGGER_RTT_Write+0x1e>
 800b63e:	f7ff fdfb 	bl	800b238 <_DoInit>
  SEGGER_RTT_LOCK();
 800b642:	f3ef 8311 	mrs	r3, BASEPRI
 800b646:	f04f 0120 	mov.w	r1, #32
 800b64a:	f381 8811 	msr	BASEPRI, r1
 800b64e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f7ff ff95 	bl	800b584 <SEGGER_RTT_WriteNoLock>
 800b65a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800b662:	697b      	ldr	r3, [r7, #20]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3720      	adds	r7, #32
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20013464 	.word	0x20013464

0800b670 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b67e:	4b3d      	ldr	r3, [pc, #244]	@ (800b774 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b680:	61bb      	str	r3, [r7, #24]
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <SEGGER_RTT_AllocUpBuffer+0x20>
 800b68c:	f7ff fdd4 	bl	800b238 <_DoInit>
  SEGGER_RTT_LOCK();
 800b690:	f3ef 8311 	mrs	r3, BASEPRI
 800b694:	f04f 0120 	mov.w	r1, #32
 800b698:	f381 8811 	msr	BASEPRI, r1
 800b69c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b69e:	4b35      	ldr	r3, [pc, #212]	@ (800b774 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800b6a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800b6a6:	6939      	ldr	r1, [r7, #16]
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	4413      	add	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	440b      	add	r3, r1
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d008      	beq.n	800b6d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	dbeb      	blt.n	800b6a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800b6ce:	e000      	b.n	800b6d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800b6d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	da3f      	bge.n	800b75c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800b6dc:	6939      	ldr	r1, [r7, #16]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	4413      	add	r3, r2
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	440b      	add	r3, r1
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800b6f0:	6939      	ldr	r1, [r7, #16]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	1c5a      	adds	r2, r3, #1
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	4413      	add	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	440b      	add	r3, r1
 800b700:	3304      	adds	r3, #4
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800b706:	6939      	ldr	r1, [r7, #16]
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	4613      	mov	r3, r2
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	4413      	add	r3, r2
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	440b      	add	r3, r1
 800b714:	3320      	adds	r3, #32
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800b71a:	6939      	ldr	r1, [r7, #16]
 800b71c:	69fa      	ldr	r2, [r7, #28]
 800b71e:	4613      	mov	r3, r2
 800b720:	005b      	lsls	r3, r3, #1
 800b722:	4413      	add	r3, r2
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	440b      	add	r3, r1
 800b728:	3328      	adds	r3, #40	@ 0x28
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800b72e:	6939      	ldr	r1, [r7, #16]
 800b730:	69fa      	ldr	r2, [r7, #28]
 800b732:	4613      	mov	r3, r2
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	4413      	add	r3, r2
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	440b      	add	r3, r1
 800b73c:	3324      	adds	r3, #36	@ 0x24
 800b73e:	2200      	movs	r2, #0
 800b740:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800b742:	6939      	ldr	r1, [r7, #16]
 800b744:	69fa      	ldr	r2, [r7, #28]
 800b746:	4613      	mov	r3, r2
 800b748:	005b      	lsls	r3, r3, #1
 800b74a:	4413      	add	r3, r2
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	440b      	add	r3, r1
 800b750:	332c      	adds	r3, #44	@ 0x2c
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b756:	f3bf 8f5f 	dmb	sy
 800b75a:	e002      	b.n	800b762 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800b75c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b760:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800b768:	69fb      	ldr	r3, [r7, #28]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3720      	adds	r7, #32
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20013464 	.word	0x20013464

0800b778 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
 800b784:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800b786:	4b33      	ldr	r3, [pc, #204]	@ (800b854 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800b788:	61bb      	str	r3, [r7, #24]
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800b794:	f7ff fd50 	bl	800b238 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b798:	4b2e      	ldr	r3, [pc, #184]	@ (800b854 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800b79a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d24d      	bcs.n	800b844 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800b7a8:	f3ef 8311 	mrs	r3, BASEPRI
 800b7ac:	f04f 0120 	mov.w	r1, #32
 800b7b0:	f381 8811 	msr	BASEPRI, r1
 800b7b4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d031      	beq.n	800b820 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800b7bc:	6979      	ldr	r1, [r7, #20]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	4413      	add	r3, r2
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	440b      	add	r3, r1
 800b7ca:	3360      	adds	r3, #96	@ 0x60
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800b7d0:	6979      	ldr	r1, [r7, #20]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	4413      	add	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	440b      	add	r3, r1
 800b7de:	3364      	adds	r3, #100	@ 0x64
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800b7e4:	6979      	ldr	r1, [r7, #20]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	005b      	lsls	r3, r3, #1
 800b7ec:	4413      	add	r3, r2
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	440b      	add	r3, r1
 800b7f2:	3368      	adds	r3, #104	@ 0x68
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800b7f8:	6979      	ldr	r1, [r7, #20]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	005b      	lsls	r3, r3, #1
 800b800:	4413      	add	r3, r2
 800b802:	00db      	lsls	r3, r3, #3
 800b804:	440b      	add	r3, r1
 800b806:	3370      	adds	r3, #112	@ 0x70
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800b80c:	6979      	ldr	r1, [r7, #20]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4613      	mov	r3, r2
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	4413      	add	r3, r2
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	440b      	add	r3, r1
 800b81a:	336c      	adds	r3, #108	@ 0x6c
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800b820:	6979      	ldr	r1, [r7, #20]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	4613      	mov	r3, r2
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	4413      	add	r3, r2
 800b82a:	00db      	lsls	r3, r3, #3
 800b82c:	440b      	add	r3, r1
 800b82e:	3374      	adds	r3, #116	@ 0x74
 800b830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b832:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800b834:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800b83e:	2300      	movs	r3, #0
 800b840:	61fb      	str	r3, [r7, #28]
 800b842:	e002      	b.n	800b84a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800b844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b848:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800b84a:	69fb      	ldr	r3, [r7, #28]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3720      	adds	r7, #32
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20013464 	.word	0x20013464

0800b858 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b868:	e002      	b.n	800b870 <_EncodeStr+0x18>
    Len++;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	3301      	adds	r3, #1
 800b86e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	4413      	add	r3, r2
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1f6      	bne.n	800b86a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d901      	bls.n	800b888 <_EncodeStr+0x30>
    Len = Limit;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b88c:	d806      	bhi.n	800b89c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	60fa      	str	r2, [r7, #12]
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	b2d2      	uxtb	r2, r2
 800b898:	701a      	strb	r2, [r3, #0]
 800b89a:	e011      	b.n	800b8c0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	1c5a      	adds	r2, r3, #1
 800b8a0:	60fa      	str	r2, [r7, #12]
 800b8a2:	22ff      	movs	r2, #255	@ 0xff
 800b8a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	60fa      	str	r2, [r7, #12]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	b2d2      	uxtb	r2, r2
 800b8b0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	0a19      	lsrs	r1, r3, #8
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	60fa      	str	r2, [r7, #12]
 800b8bc:	b2ca      	uxtb	r2, r1
 800b8be:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b8c4:	e00a      	b.n	800b8dc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	1c53      	adds	r3, r2, #1
 800b8ca:	60bb      	str	r3, [r7, #8]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	1c59      	adds	r1, r3, #1
 800b8d0:	60f9      	str	r1, [r7, #12]
 800b8d2:	7812      	ldrb	r2, [r2, #0]
 800b8d4:	701a      	strb	r2, [r3, #0]
    n++;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d3f0      	bcc.n	800b8c6 <_EncodeStr+0x6e>
  }
  return pPayload;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3304      	adds	r3, #4
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	370c      	adds	r7, #12
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
	...

0800b90c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b912:	4b35      	ldr	r3, [pc, #212]	@ (800b9e8 <_HandleIncomingPacket+0xdc>)
 800b914:	7e1b      	ldrb	r3, [r3, #24]
 800b916:	4618      	mov	r0, r3
 800b918:	1cfb      	adds	r3, r7, #3
 800b91a:	2201      	movs	r2, #1
 800b91c:	4619      	mov	r1, r3
 800b91e:	f7ff fdab 	bl	800b478 <SEGGER_RTT_ReadNoLock>
 800b922:	4603      	mov	r3, r0
 800b924:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dd59      	ble.n	800b9e0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800b92c:	78fb      	ldrb	r3, [r7, #3]
 800b92e:	2b80      	cmp	r3, #128	@ 0x80
 800b930:	d032      	beq.n	800b998 <_HandleIncomingPacket+0x8c>
 800b932:	2b80      	cmp	r3, #128	@ 0x80
 800b934:	dc42      	bgt.n	800b9bc <_HandleIncomingPacket+0xb0>
 800b936:	2b07      	cmp	r3, #7
 800b938:	dc16      	bgt.n	800b968 <_HandleIncomingPacket+0x5c>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	dd3e      	ble.n	800b9bc <_HandleIncomingPacket+0xb0>
 800b93e:	3b01      	subs	r3, #1
 800b940:	2b06      	cmp	r3, #6
 800b942:	d83b      	bhi.n	800b9bc <_HandleIncomingPacket+0xb0>
 800b944:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <_HandleIncomingPacket+0x40>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b96f 	.word	0x0800b96f
 800b950:	0800b975 	.word	0x0800b975
 800b954:	0800b97b 	.word	0x0800b97b
 800b958:	0800b981 	.word	0x0800b981
 800b95c:	0800b987 	.word	0x0800b987
 800b960:	0800b98d 	.word	0x0800b98d
 800b964:	0800b993 	.word	0x0800b993
 800b968:	2b7f      	cmp	r3, #127	@ 0x7f
 800b96a:	d034      	beq.n	800b9d6 <_HandleIncomingPacket+0xca>
 800b96c:	e026      	b.n	800b9bc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b96e:	f000 fba5 	bl	800c0bc <SEGGER_SYSVIEW_Start>
      break;
 800b972:	e035      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b974:	f000 fc5c 	bl	800c230 <SEGGER_SYSVIEW_Stop>
      break;
 800b978:	e032      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b97a:	f000 fe35 	bl	800c5e8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b97e:	e02f      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b980:	f000 fdfa 	bl	800c578 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b984:	e02c      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b986:	f000 fc79 	bl	800c27c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b98a:	e029      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b98c:	f001 f8c8 	bl	800cb20 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b990:	e026      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b992:	f001 f8a7 	bl	800cae4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b996:	e023      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b998:	4b13      	ldr	r3, [pc, #76]	@ (800b9e8 <_HandleIncomingPacket+0xdc>)
 800b99a:	7e1b      	ldrb	r3, [r3, #24]
 800b99c:	4618      	mov	r0, r3
 800b99e:	1cfb      	adds	r3, r7, #3
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f7ff fd68 	bl	800b478 <SEGGER_RTT_ReadNoLock>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	dd13      	ble.n	800b9da <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 f815 	bl	800c9e4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b9ba:	e00e      	b.n	800b9da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b9bc:	78fb      	ldrb	r3, [r7, #3]
 800b9be:	b25b      	sxtb	r3, r3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	da0c      	bge.n	800b9de <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b9c4:	4b08      	ldr	r3, [pc, #32]	@ (800b9e8 <_HandleIncomingPacket+0xdc>)
 800b9c6:	7e1b      	ldrb	r3, [r3, #24]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	1cfb      	adds	r3, r7, #3
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	f7ff fd52 	bl	800b478 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b9d4:	e003      	b.n	800b9de <_HandleIncomingPacket+0xd2>
      break;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
      break;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <_HandleIncomingPacket+0xd4>
      break;
 800b9de:	bf00      	nop
    }
  }
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20014924 	.word	0x20014924

0800b9ec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08c      	sub	sp, #48	@ 0x30
 800b9f0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b9f6:	1d3b      	adds	r3, r7, #4
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba00:	4b31      	ldr	r3, [pc, #196]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba06:	e00b      	b.n	800ba20 <_TrySendOverflowPacket+0x34>
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0e:	1c59      	adds	r1, r3, #1
 800ba10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ba12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1c:	09db      	lsrs	r3, r3, #7
 800ba1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba24:	d8f0      	bhi.n	800ba08 <_TrySendOverflowPacket+0x1c>
 800ba26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba34:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ba36:	4b25      	ldr	r3, [pc, #148]	@ (800bacc <_TrySendOverflowPacket+0xe0>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ba3c:	4b22      	ldr	r3, [pc, #136]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	623b      	str	r3, [r7, #32]
 800ba4e:	e00b      	b.n	800ba68 <_TrySendOverflowPacket+0x7c>
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba56:	1c59      	adds	r1, r3, #1
 800ba58:	6279      	str	r1, [r7, #36]	@ 0x24
 800ba5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba5e:	b2d2      	uxtb	r2, r2
 800ba60:	701a      	strb	r2, [r3, #0]
 800ba62:	6a3b      	ldr	r3, [r7, #32]
 800ba64:	09db      	lsrs	r3, r3, #7
 800ba66:	623b      	str	r3, [r7, #32]
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba6c:	d8f0      	bhi.n	800ba50 <_TrySendOverflowPacket+0x64>
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba74:	6a3a      	ldr	r2, [r7, #32]
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800ba7e:	4b12      	ldr	r3, [pc, #72]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800ba80:	785b      	ldrb	r3, [r3, #1]
 800ba82:	4618      	mov	r0, r3
 800ba84:	1d3b      	adds	r3, r7, #4
 800ba86:	69fa      	ldr	r2, [r7, #28]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	1d3b      	adds	r3, r7, #4
 800ba8e:	4619      	mov	r1, r3
 800ba90:	f7f4 fbbe 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ba94:	4603      	mov	r3, r0
 800ba96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d009      	beq.n	800bab2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ba9e:	4a0a      	ldr	r2, [pc, #40]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800baa4:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	4b06      	ldr	r3, [pc, #24]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800baae:	701a      	strb	r2, [r3, #0]
 800bab0:	e004      	b.n	800babc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800bab2:	4b05      	ldr	r3, [pc, #20]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	3301      	adds	r3, #1
 800bab8:	4a03      	ldr	r2, [pc, #12]	@ (800bac8 <_TrySendOverflowPacket+0xdc>)
 800baba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800babc:	693b      	ldr	r3, [r7, #16]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3730      	adds	r7, #48	@ 0x30
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20014924 	.word	0x20014924
 800bacc:	e0001004 	.word	0xe0001004

0800bad0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08a      	sub	sp, #40	@ 0x28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800badc:	4b6c      	ldr	r3, [pc, #432]	@ (800bc90 <_SendPacket+0x1c0>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d010      	beq.n	800bb06 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bae4:	4b6a      	ldr	r3, [pc, #424]	@ (800bc90 <_SendPacket+0x1c0>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 80a3 	beq.w	800bc34 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800baee:	4b68      	ldr	r3, [pc, #416]	@ (800bc90 <_SendPacket+0x1c0>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d109      	bne.n	800bb0a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800baf6:	f7ff ff79 	bl	800b9ec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800bafa:	4b65      	ldr	r3, [pc, #404]	@ (800bc90 <_SendPacket+0x1c0>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	f040 809a 	bne.w	800bc38 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800bb04:	e001      	b.n	800bb0a <_SendPacket+0x3a>
    goto Send;
 800bb06:	bf00      	nop
 800bb08:	e000      	b.n	800bb0c <_SendPacket+0x3c>
Send:
 800bb0a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b1f      	cmp	r3, #31
 800bb10:	d809      	bhi.n	800bb26 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800bb12:	4b5f      	ldr	r3, [pc, #380]	@ (800bc90 <_SendPacket+0x1c0>)
 800bb14:	69da      	ldr	r2, [r3, #28]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	fa22 f303 	lsr.w	r3, r2, r3
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f040 808b 	bne.w	800bc3c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b17      	cmp	r3, #23
 800bb2a:	d807      	bhi.n	800bb3c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	e03d      	b.n	800bbb8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb48:	d912      	bls.n	800bb70 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800bb4a:	69fb      	ldr	r3, [r7, #28]
 800bb4c:	09da      	lsrs	r2, r3, #7
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	b2d2      	uxtb	r2, r2
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	3a01      	subs	r2, #1
 800bb62:	60fa      	str	r2, [r7, #12]
 800bb64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	701a      	strb	r2, [r3, #0]
 800bb6e:	e006      	b.n	800bb7e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3b01      	subs	r3, #1
 800bb74:	60fb      	str	r3, [r7, #12]
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb82:	d912      	bls.n	800bbaa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	09da      	lsrs	r2, r3, #7
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	b2d2      	uxtb	r2, r2
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	3a01      	subs	r2, #1
 800bb9c:	60fa      	str	r2, [r7, #12]
 800bb9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	701a      	strb	r2, [r3, #0]
 800bba8:	e006      	b.n	800bbb8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bbb8:	4b36      	ldr	r3, [pc, #216]	@ (800bc94 <_SendPacket+0x1c4>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bbbe:	4b34      	ldr	r3, [pc, #208]	@ (800bc90 <_SendPacket+0x1c0>)
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	69ba      	ldr	r2, [r7, #24]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	623b      	str	r3, [r7, #32]
 800bbd0:	e00b      	b.n	800bbea <_SendPacket+0x11a>
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd8:	1c59      	adds	r1, r3, #1
 800bbda:	6279      	str	r1, [r7, #36]	@ 0x24
 800bbdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bbe0:	b2d2      	uxtb	r2, r2
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	09db      	lsrs	r3, r3, #7
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbee:	d8f0      	bhi.n	800bbd2 <_SendPacket+0x102>
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbf6:	6a3a      	ldr	r2, [r7, #32]
 800bbf8:	b2d2      	uxtb	r2, r2
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800bc00:	4b23      	ldr	r3, [pc, #140]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc02:	785b      	ldrb	r3, [r3, #1]
 800bc04:	4618      	mov	r0, r3
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	68f9      	ldr	r1, [r7, #12]
 800bc10:	f7f4 fafe 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bc14:	4603      	mov	r3, r0
 800bc16:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d003      	beq.n	800bc26 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bc1e:	4a1c      	ldr	r2, [pc, #112]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	60d3      	str	r3, [r2, #12]
 800bc24:	e00b      	b.n	800bc3e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800bc26:	4b1a      	ldr	r3, [pc, #104]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b18      	ldr	r3, [pc, #96]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc30:	701a      	strb	r2, [r3, #0]
 800bc32:	e004      	b.n	800bc3e <_SendPacket+0x16e>
    goto SendDone;
 800bc34:	bf00      	nop
 800bc36:	e002      	b.n	800bc3e <_SendPacket+0x16e>
      goto SendDone;
 800bc38:	bf00      	nop
 800bc3a:	e000      	b.n	800bc3e <_SendPacket+0x16e>
      goto SendDone;
 800bc3c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800bc3e:	4b14      	ldr	r3, [pc, #80]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc40:	7e1b      	ldrb	r3, [r3, #24]
 800bc42:	4619      	mov	r1, r3
 800bc44:	4a14      	ldr	r2, [pc, #80]	@ (800bc98 <_SendPacket+0x1c8>)
 800bc46:	460b      	mov	r3, r1
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	440b      	add	r3, r1
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	4413      	add	r3, r2
 800bc50:	336c      	adds	r3, #108	@ 0x6c
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b0e      	ldr	r3, [pc, #56]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc56:	7e1b      	ldrb	r3, [r3, #24]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	490f      	ldr	r1, [pc, #60]	@ (800bc98 <_SendPacket+0x1c8>)
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	4403      	add	r3, r0
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	440b      	add	r3, r1
 800bc66:	3370      	adds	r3, #112	@ 0x70
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d00b      	beq.n	800bc86 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800bc6e:	4b08      	ldr	r3, [pc, #32]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc70:	789b      	ldrb	r3, [r3, #2]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d107      	bne.n	800bc86 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800bc76:	4b06      	ldr	r3, [pc, #24]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc78:	2201      	movs	r2, #1
 800bc7a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800bc7c:	f7ff fe46 	bl	800b90c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800bc80:	4b03      	ldr	r3, [pc, #12]	@ (800bc90 <_SendPacket+0x1c0>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800bc86:	bf00      	nop
 800bc88:	3728      	adds	r7, #40	@ 0x28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	20014924 	.word	0x20014924
 800bc94:	e0001004 	.word	0xe0001004
 800bc98:	20013464 	.word	0x20013464

0800bc9c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
 800bca8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800bcb0:	4917      	ldr	r1, [pc, #92]	@ (800bd10 <SEGGER_SYSVIEW_Init+0x74>)
 800bcb2:	4818      	ldr	r0, [pc, #96]	@ (800bd14 <SEGGER_SYSVIEW_Init+0x78>)
 800bcb4:	f7ff fcdc 	bl	800b670 <SEGGER_RTT_AllocUpBuffer>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	4b16      	ldr	r3, [pc, #88]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcbe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800bcc0:	4b15      	ldr	r3, [pc, #84]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcc2:	785a      	ldrb	r2, [r3, #1]
 800bcc4:	4b14      	ldr	r3, [pc, #80]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcc6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800bcc8:	4b13      	ldr	r3, [pc, #76]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcca:	7e1b      	ldrb	r3, [r3, #24]
 800bccc:	4618      	mov	r0, r3
 800bcce:	2300      	movs	r3, #0
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	2308      	movs	r3, #8
 800bcd4:	4a11      	ldr	r2, [pc, #68]	@ (800bd1c <SEGGER_SYSVIEW_Init+0x80>)
 800bcd6:	490f      	ldr	r1, [pc, #60]	@ (800bd14 <SEGGER_SYSVIEW_Init+0x78>)
 800bcd8:	f7ff fd4e 	bl	800b778 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800bcdc:	4b0e      	ldr	r3, [pc, #56]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bce2:	4b0f      	ldr	r3, [pc, #60]	@ (800bd20 <SEGGER_SYSVIEW_Init+0x84>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bce8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800bcea:	4a0b      	ldr	r2, [pc, #44]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800bcf0:	4a09      	ldr	r2, [pc, #36]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800bcf6:	4a08      	ldr	r2, [pc, #32]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800bcfc:	4a06      	ldr	r2, [pc, #24]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800bd02:	4b05      	ldr	r3, [pc, #20]	@ (800bd18 <SEGGER_SYSVIEW_Init+0x7c>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	2001391c 	.word	0x2001391c
 800bd14:	0800e4cc 	.word	0x0800e4cc
 800bd18:	20014924 	.word	0x20014924
 800bd1c:	2001491c 	.word	0x2001491c
 800bd20:	e0001004 	.word	0xe0001004

0800bd24 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800bd2c:	4a04      	ldr	r2, [pc, #16]	@ (800bd40 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6113      	str	r3, [r2, #16]
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	20014924 	.word	0x20014924

0800bd44 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bd4c:	f3ef 8311 	mrs	r3, BASEPRI
 800bd50:	f04f 0120 	mov.w	r1, #32
 800bd54:	f381 8811 	msr	BASEPRI, r1
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	4808      	ldr	r0, [pc, #32]	@ (800bd7c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800bd5c:	f7ff fdc9 	bl	800b8f2 <_PreparePacket>
 800bd60:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	68b9      	ldr	r1, [r7, #8]
 800bd66:	68b8      	ldr	r0, [r7, #8]
 800bd68:	f7ff feb2 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f383 8811 	msr	BASEPRI, r3
}
 800bd72:	bf00      	nop
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20014954 	.word	0x20014954

0800bd80 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bd8a:	f3ef 8311 	mrs	r3, BASEPRI
 800bd8e:	f04f 0120 	mov.w	r1, #32
 800bd92:	f381 8811 	msr	BASEPRI, r1
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	4816      	ldr	r0, [pc, #88]	@ (800bdf4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800bd9a:	f7ff fdaa 	bl	800b8f2 <_PreparePacket>
 800bd9e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	61fb      	str	r3, [r7, #28]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	61bb      	str	r3, [r7, #24]
 800bdac:	e00b      	b.n	800bdc6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	1c59      	adds	r1, r3, #1
 800bdb6:	61f9      	str	r1, [r7, #28]
 800bdb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	701a      	strb	r2, [r3, #0]
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	09db      	lsrs	r3, r3, #7
 800bdc4:	61bb      	str	r3, [r7, #24]
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdca:	d8f0      	bhi.n	800bdae <SEGGER_SYSVIEW_RecordU32+0x2e>
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	61fa      	str	r2, [r7, #28]
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	701a      	strb	r2, [r3, #0]
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	68f9      	ldr	r1, [r7, #12]
 800bde0:	6938      	ldr	r0, [r7, #16]
 800bde2:	f7ff fe75 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f383 8811 	msr	BASEPRI, r3
}
 800bdec:	bf00      	nop
 800bdee:	3720      	adds	r7, #32
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20014954 	.word	0x20014954

0800bdf8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08c      	sub	sp, #48	@ 0x30
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800be04:	f3ef 8311 	mrs	r3, BASEPRI
 800be08:	f04f 0120 	mov.w	r1, #32
 800be0c:	f381 8811 	msr	BASEPRI, r1
 800be10:	61fb      	str	r3, [r7, #28]
 800be12:	4825      	ldr	r0, [pc, #148]	@ (800bea8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800be14:	f7ff fd6d 	bl	800b8f2 <_PreparePacket>
 800be18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be26:	e00b      	b.n	800be40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800be28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2e:	1c59      	adds	r1, r3, #1
 800be30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800be32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	701a      	strb	r2, [r3, #0]
 800be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3c:	09db      	lsrs	r3, r3, #7
 800be3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be42:	2b7f      	cmp	r3, #127	@ 0x7f
 800be44:	d8f0      	bhi.n	800be28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800be46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be48:	1c5a      	adds	r2, r3, #1
 800be4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]
 800be52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	627b      	str	r3, [r7, #36]	@ 0x24
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	623b      	str	r3, [r7, #32]
 800be5e:	e00b      	b.n	800be78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	b2da      	uxtb	r2, r3
 800be64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be66:	1c59      	adds	r1, r3, #1
 800be68:	6279      	str	r1, [r7, #36]	@ 0x24
 800be6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	09db      	lsrs	r3, r3, #7
 800be76:	623b      	str	r3, [r7, #32]
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	2b7f      	cmp	r3, #127	@ 0x7f
 800be7c:	d8f0      	bhi.n	800be60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	627a      	str	r2, [r7, #36]	@ 0x24
 800be84:	6a3a      	ldr	r2, [r7, #32]
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	6979      	ldr	r1, [r7, #20]
 800be92:	69b8      	ldr	r0, [r7, #24]
 800be94:	f7ff fe1c 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	f383 8811 	msr	BASEPRI, r3
}
 800be9e:	bf00      	nop
 800bea0:	3730      	adds	r7, #48	@ 0x30
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20014954 	.word	0x20014954

0800beac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800beac:	b580      	push	{r7, lr}
 800beae:	b08e      	sub	sp, #56	@ 0x38
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800beba:	f3ef 8311 	mrs	r3, BASEPRI
 800bebe:	f04f 0120 	mov.w	r1, #32
 800bec2:	f381 8811 	msr	BASEPRI, r1
 800bec6:	61fb      	str	r3, [r7, #28]
 800bec8:	4832      	ldr	r0, [pc, #200]	@ (800bf94 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800beca:	f7ff fd12 	bl	800b8f2 <_PreparePacket>
 800bece:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	633b      	str	r3, [r7, #48]	@ 0x30
 800bedc:	e00b      	b.n	800bef6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800bede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bee4:	1c59      	adds	r1, r3, #1
 800bee6:	6379      	str	r1, [r7, #52]	@ 0x34
 800bee8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]
 800bef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef2:	09db      	lsrs	r3, r3, #7
 800bef4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef8:	2b7f      	cmp	r3, #127	@ 0x7f
 800befa:	d8f0      	bhi.n	800bede <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800befc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	637a      	str	r2, [r7, #52]	@ 0x34
 800bf02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf04:	b2d2      	uxtb	r2, r2
 800bf06:	701a      	strb	r2, [r3, #0]
 800bf08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf14:	e00b      	b.n	800bf2e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1c:	1c59      	adds	r1, r3, #1
 800bf1e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bf20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	09db      	lsrs	r3, r3, #7
 800bf2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf30:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf32:	d8f0      	bhi.n	800bf16 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf3c:	b2d2      	uxtb	r2, r2
 800bf3e:	701a      	strb	r2, [r3, #0]
 800bf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	623b      	str	r3, [r7, #32]
 800bf4c:	e00b      	b.n	800bf66 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf54:	1c59      	adds	r1, r3, #1
 800bf56:	6279      	str	r1, [r7, #36]	@ 0x24
 800bf58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bf5c:	b2d2      	uxtb	r2, r2
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	09db      	lsrs	r3, r3, #7
 800bf64:	623b      	str	r3, [r7, #32]
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf6a:	d8f0      	bhi.n	800bf4e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf72:	6a3a      	ldr	r2, [r7, #32]
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	6979      	ldr	r1, [r7, #20]
 800bf80:	69b8      	ldr	r0, [r7, #24]
 800bf82:	f7ff fda5 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	f383 8811 	msr	BASEPRI, r3
}
 800bf8c:	bf00      	nop
 800bf8e:	3738      	adds	r7, #56	@ 0x38
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20014954 	.word	0x20014954

0800bf98 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b090      	sub	sp, #64	@ 0x40
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bfa6:	f3ef 8311 	mrs	r3, BASEPRI
 800bfaa:	f04f 0120 	mov.w	r1, #32
 800bfae:	f381 8811 	msr	BASEPRI, r1
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	4840      	ldr	r0, [pc, #256]	@ (800c0b8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bfb6:	f7ff fc9c 	bl	800b8f2 <_PreparePacket>
 800bfba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bfc8:	e00b      	b.n	800bfe2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd0:	1c59      	adds	r1, r3, #1
 800bfd2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800bfd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bfd8:	b2d2      	uxtb	r2, r2
 800bfda:	701a      	strb	r2, [r3, #0]
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfde:	09db      	lsrs	r3, r3, #7
 800bfe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfe6:	d8f0      	bhi.n	800bfca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bfe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bfee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bff0:	b2d2      	uxtb	r2, r2
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bff6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	637b      	str	r3, [r7, #52]	@ 0x34
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	633b      	str	r3, [r7, #48]	@ 0x30
 800c000:	e00b      	b.n	800c01a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	b2da      	uxtb	r2, r3
 800c006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c008:	1c59      	adds	r1, r3, #1
 800c00a:	6379      	str	r1, [r7, #52]	@ 0x34
 800c00c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c016:	09db      	lsrs	r3, r3, #7
 800c018:	633b      	str	r3, [r7, #48]	@ 0x30
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c01e:	d8f0      	bhi.n	800c002 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	637a      	str	r2, [r7, #52]	@ 0x34
 800c026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c028:	b2d2      	uxtb	r2, r2
 800c02a:	701a      	strb	r2, [r3, #0]
 800c02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c038:	e00b      	b.n	800c052 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c040:	1c59      	adds	r1, r3, #1
 800c042:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c044:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c048:	b2d2      	uxtb	r2, r2
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04e:	09db      	lsrs	r3, r3, #7
 800c050:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	2b7f      	cmp	r3, #127	@ 0x7f
 800c056:	d8f0      	bhi.n	800c03a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c05e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
 800c064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c066:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c06c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c06e:	623b      	str	r3, [r7, #32]
 800c070:	e00b      	b.n	800c08a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	b2da      	uxtb	r2, r3
 800c076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c078:	1c59      	adds	r1, r3, #1
 800c07a:	6279      	str	r1, [r7, #36]	@ 0x24
 800c07c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c080:	b2d2      	uxtb	r2, r2
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	09db      	lsrs	r3, r3, #7
 800c088:	623b      	str	r3, [r7, #32]
 800c08a:	6a3b      	ldr	r3, [r7, #32]
 800c08c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c08e:	d8f0      	bhi.n	800c072 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	627a      	str	r2, [r7, #36]	@ 0x24
 800c096:	6a3a      	ldr	r2, [r7, #32]
 800c098:	b2d2      	uxtb	r2, r2
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	6979      	ldr	r1, [r7, #20]
 800c0a4:	69b8      	ldr	r0, [r7, #24]
 800c0a6:	f7ff fd13 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	f383 8811 	msr	BASEPRI, r3
}
 800c0b0:	bf00      	nop
 800c0b2:	3740      	adds	r7, #64	@ 0x40
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	20014954 	.word	0x20014954

0800c0bc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	@ 0x30
 800c0c0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c0c2:	4b58      	ldr	r3, [pc, #352]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c0c8:	f3ef 8311 	mrs	r3, BASEPRI
 800c0cc:	f04f 0120 	mov.w	r1, #32
 800c0d0:	f381 8811 	msr	BASEPRI, r1
 800c0d4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c0d6:	4b53      	ldr	r3, [pc, #332]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c0d8:	785b      	ldrb	r3, [r3, #1]
 800c0da:	220a      	movs	r2, #10
 800c0dc:	4952      	ldr	r1, [pc, #328]	@ (800c228 <SEGGER_SYSVIEW_Start+0x16c>)
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7f4 f896 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c0ea:	200a      	movs	r0, #10
 800c0ec:	f7ff fe2a 	bl	800bd44 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c0f0:	f3ef 8311 	mrs	r3, BASEPRI
 800c0f4:	f04f 0120 	mov.w	r1, #32
 800c0f8:	f381 8811 	msr	BASEPRI, r1
 800c0fc:	60bb      	str	r3, [r7, #8]
 800c0fe:	484b      	ldr	r0, [pc, #300]	@ (800c22c <SEGGER_SYSVIEW_Start+0x170>)
 800c100:	f7ff fbf7 	bl	800b8f2 <_PreparePacket>
 800c104:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c10e:	4b45      	ldr	r3, [pc, #276]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c114:	e00b      	b.n	800c12e <SEGGER_SYSVIEW_Start+0x72>
 800c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11c:	1c59      	adds	r1, r3, #1
 800c11e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c120:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c124:	b2d2      	uxtb	r2, r2
 800c126:	701a      	strb	r2, [r3, #0]
 800c128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12a:	09db      	lsrs	r3, r3, #7
 800c12c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	2b7f      	cmp	r3, #127	@ 0x7f
 800c132:	d8f0      	bhi.n	800c116 <SEGGER_SYSVIEW_Start+0x5a>
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	1c5a      	adds	r2, r3, #1
 800c138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c13a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c13c:	b2d2      	uxtb	r2, r2
 800c13e:	701a      	strb	r2, [r3, #0]
 800c140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c142:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	627b      	str	r3, [r7, #36]	@ 0x24
 800c148:	4b36      	ldr	r3, [pc, #216]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	623b      	str	r3, [r7, #32]
 800c14e:	e00b      	b.n	800c168 <SEGGER_SYSVIEW_Start+0xac>
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	b2da      	uxtb	r2, r3
 800c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c156:	1c59      	adds	r1, r3, #1
 800c158:	6279      	str	r1, [r7, #36]	@ 0x24
 800c15a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c15e:	b2d2      	uxtb	r2, r2
 800c160:	701a      	strb	r2, [r3, #0]
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	09db      	lsrs	r3, r3, #7
 800c166:	623b      	str	r3, [r7, #32]
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c16c:	d8f0      	bhi.n	800c150 <SEGGER_SYSVIEW_Start+0x94>
 800c16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	627a      	str	r2, [r7, #36]	@ 0x24
 800c174:	6a3a      	ldr	r2, [r7, #32]
 800c176:	b2d2      	uxtb	r2, r2
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	61fb      	str	r3, [r7, #28]
 800c182:	4b28      	ldr	r3, [pc, #160]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	61bb      	str	r3, [r7, #24]
 800c188:	e00b      	b.n	800c1a2 <SEGGER_SYSVIEW_Start+0xe6>
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	1c59      	adds	r1, r3, #1
 800c192:	61f9      	str	r1, [r7, #28]
 800c194:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c198:	b2d2      	uxtb	r2, r2
 800c19a:	701a      	strb	r2, [r3, #0]
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	09db      	lsrs	r3, r3, #7
 800c1a0:	61bb      	str	r3, [r7, #24]
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1a6:	d8f0      	bhi.n	800c18a <SEGGER_SYSVIEW_Start+0xce>
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	61fa      	str	r2, [r7, #28]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	613b      	str	r3, [r7, #16]
 800c1c0:	e00b      	b.n	800c1da <SEGGER_SYSVIEW_Start+0x11e>
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	1c59      	adds	r1, r3, #1
 800c1ca:	6179      	str	r1, [r7, #20]
 800c1cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c1d0:	b2d2      	uxtb	r2, r2
 800c1d2:	701a      	strb	r2, [r3, #0]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	09db      	lsrs	r3, r3, #7
 800c1d8:	613b      	str	r3, [r7, #16]
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1de:	d8f0      	bhi.n	800c1c2 <SEGGER_SYSVIEW_Start+0x106>
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	617a      	str	r2, [r7, #20]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c1f0:	2218      	movs	r2, #24
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fc6b 	bl	800bad0 <_SendPacket>
      RECORD_END();
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c200:	4b08      	ldr	r3, [pc, #32]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c208:	4b06      	ldr	r3, [pc, #24]	@ (800c224 <SEGGER_SYSVIEW_Start+0x168>)
 800c20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c20c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c20e:	f000 f9eb 	bl	800c5e8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c212:	f000 f9b1 	bl	800c578 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c216:	f000 fc83 	bl	800cb20 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c21a:	bf00      	nop
 800c21c:	3730      	adds	r7, #48	@ 0x30
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	20014924 	.word	0x20014924
 800c228:	0800e4fc 	.word	0x0800e4fc
 800c22c:	20014954 	.word	0x20014954

0800c230 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c236:	f3ef 8311 	mrs	r3, BASEPRI
 800c23a:	f04f 0120 	mov.w	r1, #32
 800c23e:	f381 8811 	msr	BASEPRI, r1
 800c242:	607b      	str	r3, [r7, #4]
 800c244:	480b      	ldr	r0, [pc, #44]	@ (800c274 <SEGGER_SYSVIEW_Stop+0x44>)
 800c246:	f7ff fb54 	bl	800b8f2 <_PreparePacket>
 800c24a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c24c:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <SEGGER_SYSVIEW_Stop+0x48>)
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d007      	beq.n	800c264 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c254:	220b      	movs	r2, #11
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6838      	ldr	r0, [r7, #0]
 800c25a:	f7ff fc39 	bl	800bad0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c25e:	4b06      	ldr	r3, [pc, #24]	@ (800c278 <SEGGER_SYSVIEW_Stop+0x48>)
 800c260:	2200      	movs	r2, #0
 800c262:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f383 8811 	msr	BASEPRI, r3
}
 800c26a:	bf00      	nop
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20014954 	.word	0x20014954
 800c278:	20014924 	.word	0x20014924

0800c27c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08c      	sub	sp, #48	@ 0x30
 800c280:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c282:	f3ef 8311 	mrs	r3, BASEPRI
 800c286:	f04f 0120 	mov.w	r1, #32
 800c28a:	f381 8811 	msr	BASEPRI, r1
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	4845      	ldr	r0, [pc, #276]	@ (800c3a8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c292:	f7ff fb2e 	bl	800b8f2 <_PreparePacket>
 800c296:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2a0:	4b42      	ldr	r3, [pc, #264]	@ (800c3ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2a6:	e00b      	b.n	800c2c0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ae:	1c59      	adds	r1, r3, #1
 800c2b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c2b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c2b6:	b2d2      	uxtb	r2, r2
 800c2b8:	701a      	strb	r2, [r3, #0]
 800c2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2bc:	09db      	lsrs	r3, r3, #7
 800c2be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2c4:	d8f0      	bhi.n	800c2a8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ce:	b2d2      	uxtb	r2, r2
 800c2d0:	701a      	strb	r2, [r3, #0]
 800c2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2da:	4b34      	ldr	r3, [pc, #208]	@ (800c3ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	623b      	str	r3, [r7, #32]
 800c2e0:	e00b      	b.n	800c2fa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c2e2:	6a3b      	ldr	r3, [r7, #32]
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	1c59      	adds	r1, r3, #1
 800c2ea:	6279      	str	r1, [r7, #36]	@ 0x24
 800c2ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
 800c2f4:	6a3b      	ldr	r3, [r7, #32]
 800c2f6:	09db      	lsrs	r3, r3, #7
 800c2f8:	623b      	str	r3, [r7, #32]
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2fe:	d8f0      	bhi.n	800c2e2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	627a      	str	r2, [r7, #36]	@ 0x24
 800c306:	6a3a      	ldr	r2, [r7, #32]
 800c308:	b2d2      	uxtb	r2, r2
 800c30a:	701a      	strb	r2, [r3, #0]
 800c30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	61fb      	str	r3, [r7, #28]
 800c314:	4b25      	ldr	r3, [pc, #148]	@ (800c3ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	61bb      	str	r3, [r7, #24]
 800c31a:	e00b      	b.n	800c334 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	1c59      	adds	r1, r3, #1
 800c324:	61f9      	str	r1, [r7, #28]
 800c326:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c32a:	b2d2      	uxtb	r2, r2
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	09db      	lsrs	r3, r3, #7
 800c332:	61bb      	str	r3, [r7, #24]
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	2b7f      	cmp	r3, #127	@ 0x7f
 800c338:	d8f0      	bhi.n	800c31c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	1c5a      	adds	r2, r3, #1
 800c33e:	61fa      	str	r2, [r7, #28]
 800c340:	69ba      	ldr	r2, [r7, #24]
 800c342:	b2d2      	uxtb	r2, r2
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	2300      	movs	r3, #0
 800c350:	613b      	str	r3, [r7, #16]
 800c352:	e00b      	b.n	800c36c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	b2da      	uxtb	r2, r3
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	1c59      	adds	r1, r3, #1
 800c35c:	6179      	str	r1, [r7, #20]
 800c35e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c362:	b2d2      	uxtb	r2, r2
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	09db      	lsrs	r3, r3, #7
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c370:	d8f0      	bhi.n	800c354 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	617a      	str	r2, [r7, #20]
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	b2d2      	uxtb	r2, r2
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c382:	2218      	movs	r2, #24
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	68b8      	ldr	r0, [r7, #8]
 800c388:	f7ff fba2 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c392:	4b06      	ldr	r3, [pc, #24]	@ (800c3ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c39a:	4b04      	ldr	r3, [pc, #16]	@ (800c3ac <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c39e:	4798      	blx	r3
  }
}
 800c3a0:	bf00      	nop
 800c3a2:	3730      	adds	r7, #48	@ 0x30
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	20014954 	.word	0x20014954
 800c3ac:	20014924 	.word	0x20014924

0800c3b0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b092      	sub	sp, #72	@ 0x48
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c3b8:	f3ef 8311 	mrs	r3, BASEPRI
 800c3bc:	f04f 0120 	mov.w	r1, #32
 800c3c0:	f381 8811 	msr	BASEPRI, r1
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	486a      	ldr	r0, [pc, #424]	@ (800c570 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c3c8:	f7ff fa93 	bl	800b8f2 <_PreparePacket>
 800c3cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b66      	ldr	r3, [pc, #408]	@ (800c574 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3e2:	e00b      	b.n	800c3fc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c3e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3ea:	1c59      	adds	r1, r3, #1
 800c3ec:	6479      	str	r1, [r7, #68]	@ 0x44
 800c3ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c3f2:	b2d2      	uxtb	r2, r2
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f8:	09db      	lsrs	r3, r3, #7
 800c3fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c400:	d8f0      	bhi.n	800c3e4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	647a      	str	r2, [r7, #68]	@ 0x44
 800c408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c40a:	b2d2      	uxtb	r2, r2
 800c40c:	701a      	strb	r2, [r3, #0]
 800c40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c41c:	e00b      	b.n	800c436 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c420:	b2da      	uxtb	r2, r3
 800c422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c424:	1c59      	adds	r1, r3, #1
 800c426:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c428:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c42c:	b2d2      	uxtb	r2, r2
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c432:	09db      	lsrs	r3, r3, #7
 800c434:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c438:	2b7f      	cmp	r3, #127	@ 0x7f
 800c43a:	d8f0      	bhi.n	800c41e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	701a      	strb	r2, [r3, #0]
 800c448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c44a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	2220      	movs	r2, #32
 800c452:	4619      	mov	r1, r3
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f7ff f9ff 	bl	800b858 <_EncodeStr>
 800c45a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c45c:	2209      	movs	r2, #9
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	6938      	ldr	r0, [r7, #16]
 800c462:	f7ff fb35 	bl	800bad0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	4b40      	ldr	r3, [pc, #256]	@ (800c574 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	633b      	str	r3, [r7, #48]	@ 0x30
 800c47a:	e00b      	b.n	800c494 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c482:	1c59      	adds	r1, r3, #1
 800c484:	6379      	str	r1, [r7, #52]	@ 0x34
 800c486:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c48a:	b2d2      	uxtb	r2, r2
 800c48c:	701a      	strb	r2, [r3, #0]
 800c48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c490:	09db      	lsrs	r3, r3, #7
 800c492:	633b      	str	r3, [r7, #48]	@ 0x30
 800c494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c496:	2b7f      	cmp	r3, #127	@ 0x7f
 800c498:	d8f0      	bhi.n	800c47c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	637a      	str	r2, [r7, #52]	@ 0x34
 800c4a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4a2:	b2d2      	uxtb	r2, r2
 800c4a4:	701a      	strb	r2, [r3, #0]
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4b4:	e00b      	b.n	800c4ce <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4bc:	1c59      	adds	r1, r3, #1
 800c4be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c4c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c4c4:	b2d2      	uxtb	r2, r2
 800c4c6:	701a      	strb	r2, [r3, #0]
 800c4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ca:	09db      	lsrs	r3, r3, #7
 800c4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4d2:	d8f0      	bhi.n	800c4b6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4dc:	b2d2      	uxtb	r2, r2
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	623b      	str	r3, [r7, #32]
 800c4ee:	e00b      	b.n	800c508 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f6:	1c59      	adds	r1, r3, #1
 800c4f8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c4fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c4fe:	b2d2      	uxtb	r2, r2
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	09db      	lsrs	r3, r3, #7
 800c506:	623b      	str	r3, [r7, #32]
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c50c:	d8f0      	bhi.n	800c4f0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c510:	1c5a      	adds	r2, r3, #1
 800c512:	627a      	str	r2, [r7, #36]	@ 0x24
 800c514:	6a3a      	ldr	r2, [r7, #32]
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	61fb      	str	r3, [r7, #28]
 800c522:	2300      	movs	r3, #0
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	e00b      	b.n	800c540 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	1c59      	adds	r1, r3, #1
 800c530:	61f9      	str	r1, [r7, #28]
 800c532:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c536:	b2d2      	uxtb	r2, r2
 800c538:	701a      	strb	r2, [r3, #0]
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	09db      	lsrs	r3, r3, #7
 800c53e:	61bb      	str	r3, [r7, #24]
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	2b7f      	cmp	r3, #127	@ 0x7f
 800c544:	d8f0      	bhi.n	800c528 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	61fa      	str	r2, [r7, #28]
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	b2d2      	uxtb	r2, r2
 800c550:	701a      	strb	r2, [r3, #0]
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c556:	2215      	movs	r2, #21
 800c558:	68f9      	ldr	r1, [r7, #12]
 800c55a:	6938      	ldr	r0, [r7, #16]
 800c55c:	f7ff fab8 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f383 8811 	msr	BASEPRI, r3
}
 800c566:	bf00      	nop
 800c568:	3748      	adds	r7, #72	@ 0x48
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20014954 	.word	0x20014954
 800c574:	20014924 	.word	0x20014924

0800c578 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c57c:	4b07      	ldr	r3, [pc, #28]	@ (800c59c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c584:	4b05      	ldr	r3, [pc, #20]	@ (800c59c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c586:	6a1b      	ldr	r3, [r3, #32]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d003      	beq.n	800c596 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c58e:	4b03      	ldr	r3, [pc, #12]	@ (800c59c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4798      	blx	r3
  }
}
 800c596:	bf00      	nop
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20014924 	.word	0x20014924

0800c5a0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c5a8:	f3ef 8311 	mrs	r3, BASEPRI
 800c5ac:	f04f 0120 	mov.w	r1, #32
 800c5b0:	f381 8811 	msr	BASEPRI, r1
 800c5b4:	617b      	str	r3, [r7, #20]
 800c5b6:	480b      	ldr	r0, [pc, #44]	@ (800c5e4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800c5b8:	f7ff f99b 	bl	800b8f2 <_PreparePacket>
 800c5bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c5be:	2280      	movs	r2, #128	@ 0x80
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	6938      	ldr	r0, [r7, #16]
 800c5c4:	f7ff f948 	bl	800b858 <_EncodeStr>
 800c5c8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800c5ca:	220e      	movs	r2, #14
 800c5cc:	68f9      	ldr	r1, [r7, #12]
 800c5ce:	6938      	ldr	r0, [r7, #16]
 800c5d0:	f7ff fa7e 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f383 8811 	msr	BASEPRI, r3
}
 800c5da:	bf00      	nop
 800c5dc:	3718      	adds	r7, #24
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20014954 	.word	0x20014954

0800c5e8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c5e8:	b590      	push	{r4, r7, lr}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c5ee:	4b15      	ldr	r3, [pc, #84]	@ (800c644 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d01a      	beq.n	800c62c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c5f6:	4b13      	ldr	r3, [pc, #76]	@ (800c644 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d015      	beq.n	800c62c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c600:	4b10      	ldr	r3, [pc, #64]	@ (800c644 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c602:	6a1b      	ldr	r3, [r3, #32]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4798      	blx	r3
 800c608:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c60c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c60e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	f04f 0300 	mov.w	r3, #0
 800c61a:	000a      	movs	r2, r1
 800c61c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c61e:	4613      	mov	r3, r2
 800c620:	461a      	mov	r2, r3
 800c622:	4621      	mov	r1, r4
 800c624:	200d      	movs	r0, #13
 800c626:	f7ff fbe7 	bl	800bdf8 <SEGGER_SYSVIEW_RecordU32x2>
 800c62a:	e006      	b.n	800c63a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4619      	mov	r1, r3
 800c632:	200c      	movs	r0, #12
 800c634:	f7ff fba4 	bl	800bd80 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd90      	pop	{r4, r7, pc}
 800c642:	bf00      	nop
 800c644:	20014924 	.word	0x20014924
 800c648:	e0001004 	.word	0xe0001004

0800c64c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c652:	f3ef 8311 	mrs	r3, BASEPRI
 800c656:	f04f 0120 	mov.w	r1, #32
 800c65a:	f381 8811 	msr	BASEPRI, r1
 800c65e:	60fb      	str	r3, [r7, #12]
 800c660:	4819      	ldr	r0, [pc, #100]	@ (800c6c8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c662:	f7ff f946 	bl	800b8f2 <_PreparePacket>
 800c666:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c66c:	4b17      	ldr	r3, [pc, #92]	@ (800c6cc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c674:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	617b      	str	r3, [r7, #20]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	613b      	str	r3, [r7, #16]
 800c67e:	e00b      	b.n	800c698 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	b2da      	uxtb	r2, r3
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	1c59      	adds	r1, r3, #1
 800c688:	6179      	str	r1, [r7, #20]
 800c68a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c68e:	b2d2      	uxtb	r2, r2
 800c690:	701a      	strb	r2, [r3, #0]
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	09db      	lsrs	r3, r3, #7
 800c696:	613b      	str	r3, [r7, #16]
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c69c:	d8f0      	bhi.n	800c680 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	1c5a      	adds	r2, r3, #1
 800c6a2:	617a      	str	r2, [r7, #20]
 800c6a4:	693a      	ldr	r2, [r7, #16]
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	68b8      	ldr	r0, [r7, #8]
 800c6b4:	f7ff fa0c 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f383 8811 	msr	BASEPRI, r3
}
 800c6be:	bf00      	nop
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20014954 	.word	0x20014954
 800c6cc:	e000ed04 	.word	0xe000ed04

0800c6d0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c6d6:	f3ef 8311 	mrs	r3, BASEPRI
 800c6da:	f04f 0120 	mov.w	r1, #32
 800c6de:	f381 8811 	msr	BASEPRI, r1
 800c6e2:	607b      	str	r3, [r7, #4]
 800c6e4:	4807      	ldr	r0, [pc, #28]	@ (800c704 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c6e6:	f7ff f904 	bl	800b8f2 <_PreparePacket>
 800c6ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6838      	ldr	r0, [r7, #0]
 800c6f2:	f7ff f9ed 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f383 8811 	msr	BASEPRI, r3
}
 800c6fc:	bf00      	nop
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	20014954 	.word	0x20014954

0800c708 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c70e:	f3ef 8311 	mrs	r3, BASEPRI
 800c712:	f04f 0120 	mov.w	r1, #32
 800c716:	f381 8811 	msr	BASEPRI, r1
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	4807      	ldr	r0, [pc, #28]	@ (800c73c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c71e:	f7ff f8e8 	bl	800b8f2 <_PreparePacket>
 800c722:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c724:	2212      	movs	r2, #18
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6838      	ldr	r0, [r7, #0]
 800c72a:	f7ff f9d1 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f383 8811 	msr	BASEPRI, r3
}
 800c734:	bf00      	nop
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20014954 	.word	0x20014954

0800c740 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c746:	f3ef 8311 	mrs	r3, BASEPRI
 800c74a:	f04f 0120 	mov.w	r1, #32
 800c74e:	f381 8811 	msr	BASEPRI, r1
 800c752:	607b      	str	r3, [r7, #4]
 800c754:	4807      	ldr	r0, [pc, #28]	@ (800c774 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c756:	f7ff f8cc 	bl	800b8f2 <_PreparePacket>
 800c75a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c75c:	2211      	movs	r2, #17
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6838      	ldr	r0, [r7, #0]
 800c762:	f7ff f9b5 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f383 8811 	msr	BASEPRI, r3
}
 800c76c:	bf00      	nop
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	20014954 	.word	0x20014954

0800c778 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c780:	f3ef 8311 	mrs	r3, BASEPRI
 800c784:	f04f 0120 	mov.w	r1, #32
 800c788:	f381 8811 	msr	BASEPRI, r1
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	4819      	ldr	r0, [pc, #100]	@ (800c7f4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c790:	f7ff f8af 	bl	800b8f2 <_PreparePacket>
 800c794:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c79a:	4b17      	ldr	r3, [pc, #92]	@ (800c7f8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	1ad3      	subs	r3, r2, r3
 800c7a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	61fb      	str	r3, [r7, #28]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	61bb      	str	r3, [r7, #24]
 800c7ac:	e00b      	b.n	800c7c6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	1c59      	adds	r1, r3, #1
 800c7b6:	61f9      	str	r1, [r7, #28]
 800c7b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	701a      	strb	r2, [r3, #0]
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	09db      	lsrs	r3, r3, #7
 800c7c4:	61bb      	str	r3, [r7, #24]
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7ca:	d8f0      	bhi.n	800c7ae <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	61fa      	str	r2, [r7, #28]
 800c7d2:	69ba      	ldr	r2, [r7, #24]
 800c7d4:	b2d2      	uxtb	r2, r2
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c7dc:	2208      	movs	r2, #8
 800c7de:	68f9      	ldr	r1, [r7, #12]
 800c7e0:	6938      	ldr	r0, [r7, #16]
 800c7e2:	f7ff f975 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	f383 8811 	msr	BASEPRI, r3
}
 800c7ec:	bf00      	nop
 800c7ee:	3720      	adds	r7, #32
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20014954 	.word	0x20014954
 800c7f8:	20014924 	.word	0x20014924

0800c7fc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c804:	f3ef 8311 	mrs	r3, BASEPRI
 800c808:	f04f 0120 	mov.w	r1, #32
 800c80c:	f381 8811 	msr	BASEPRI, r1
 800c810:	617b      	str	r3, [r7, #20]
 800c812:	4819      	ldr	r0, [pc, #100]	@ (800c878 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c814:	f7ff f86d 	bl	800b8f2 <_PreparePacket>
 800c818:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c81e:	4b17      	ldr	r3, [pc, #92]	@ (800c87c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	61fb      	str	r3, [r7, #28]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	61bb      	str	r3, [r7, #24]
 800c830:	e00b      	b.n	800c84a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	b2da      	uxtb	r2, r3
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	1c59      	adds	r1, r3, #1
 800c83a:	61f9      	str	r1, [r7, #28]
 800c83c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c840:	b2d2      	uxtb	r2, r2
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	09db      	lsrs	r3, r3, #7
 800c848:	61bb      	str	r3, [r7, #24]
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c84e:	d8f0      	bhi.n	800c832 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	61fa      	str	r2, [r7, #28]
 800c856:	69ba      	ldr	r2, [r7, #24]
 800c858:	b2d2      	uxtb	r2, r2
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c860:	2204      	movs	r2, #4
 800c862:	68f9      	ldr	r1, [r7, #12]
 800c864:	6938      	ldr	r0, [r7, #16]
 800c866:	f7ff f933 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f383 8811 	msr	BASEPRI, r3
}
 800c870:	bf00      	nop
 800c872:	3720      	adds	r7, #32
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20014954 	.word	0x20014954
 800c87c:	20014924 	.word	0x20014924

0800c880 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c888:	f3ef 8311 	mrs	r3, BASEPRI
 800c88c:	f04f 0120 	mov.w	r1, #32
 800c890:	f381 8811 	msr	BASEPRI, r1
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	4819      	ldr	r0, [pc, #100]	@ (800c8fc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c898:	f7ff f82b 	bl	800b8f2 <_PreparePacket>
 800c89c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c8a2:	4b17      	ldr	r3, [pc, #92]	@ (800c900 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	61fb      	str	r3, [r7, #28]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	61bb      	str	r3, [r7, #24]
 800c8b4:	e00b      	b.n	800c8ce <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	1c59      	adds	r1, r3, #1
 800c8be:	61f9      	str	r1, [r7, #28]
 800c8c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8c4:	b2d2      	uxtb	r2, r2
 800c8c6:	701a      	strb	r2, [r3, #0]
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	09db      	lsrs	r3, r3, #7
 800c8cc:	61bb      	str	r3, [r7, #24]
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8d2:	d8f0      	bhi.n	800c8b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	61fa      	str	r2, [r7, #28]
 800c8da:	69ba      	ldr	r2, [r7, #24]
 800c8dc:	b2d2      	uxtb	r2, r2
 800c8de:	701a      	strb	r2, [r3, #0]
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c8e4:	2206      	movs	r2, #6
 800c8e6:	68f9      	ldr	r1, [r7, #12]
 800c8e8:	6938      	ldr	r0, [r7, #16]
 800c8ea:	f7ff f8f1 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f383 8811 	msr	BASEPRI, r3
}
 800c8f4:	bf00      	nop
 800c8f6:	3720      	adds	r7, #32
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20014954 	.word	0x20014954
 800c900:	20014924 	.word	0x20014924

0800c904 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c904:	b580      	push	{r7, lr}
 800c906:	b08a      	sub	sp, #40	@ 0x28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c90e:	f3ef 8311 	mrs	r3, BASEPRI
 800c912:	f04f 0120 	mov.w	r1, #32
 800c916:	f381 8811 	msr	BASEPRI, r1
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	4827      	ldr	r0, [pc, #156]	@ (800c9bc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c91e:	f7fe ffe8 	bl	800b8f2 <_PreparePacket>
 800c922:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c928:	4b25      	ldr	r3, [pc, #148]	@ (800c9c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	627b      	str	r3, [r7, #36]	@ 0x24
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	623b      	str	r3, [r7, #32]
 800c93a:	e00b      	b.n	800c954 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c942:	1c59      	adds	r1, r3, #1
 800c944:	6279      	str	r1, [r7, #36]	@ 0x24
 800c946:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c94a:	b2d2      	uxtb	r2, r2
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	09db      	lsrs	r3, r3, #7
 800c952:	623b      	str	r3, [r7, #32]
 800c954:	6a3b      	ldr	r3, [r7, #32]
 800c956:	2b7f      	cmp	r3, #127	@ 0x7f
 800c958:	d8f0      	bhi.n	800c93c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c960:	6a3a      	ldr	r2, [r7, #32]
 800c962:	b2d2      	uxtb	r2, r2
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c968:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e00b      	b.n	800c98c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	b2da      	uxtb	r2, r3
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	1c59      	adds	r1, r3, #1
 800c97c:	61f9      	str	r1, [r7, #28]
 800c97e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c982:	b2d2      	uxtb	r2, r2
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	09db      	lsrs	r3, r3, #7
 800c98a:	61bb      	str	r3, [r7, #24]
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c990:	d8f0      	bhi.n	800c974 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	1c5a      	adds	r2, r3, #1
 800c996:	61fa      	str	r2, [r7, #28]
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	b2d2      	uxtb	r2, r2
 800c99c:	701a      	strb	r2, [r3, #0]
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c9a2:	2207      	movs	r2, #7
 800c9a4:	68f9      	ldr	r1, [r7, #12]
 800c9a6:	6938      	ldr	r0, [r7, #16]
 800c9a8:	f7ff f892 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f383 8811 	msr	BASEPRI, r3
}
 800c9b2:	bf00      	nop
 800c9b4:	3728      	adds	r7, #40	@ 0x28
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	20014954 	.word	0x20014954
 800c9c0:	20014924 	.word	0x20014924

0800c9c4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c9cc:	4b04      	ldr	r3, [pc, #16]	@ (800c9e0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	1ad3      	subs	r3, r2, r3
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	20014924 	.word	0x20014924

0800c9e4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08c      	sub	sp, #48	@ 0x30
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c9ee:	4b3b      	ldr	r3, [pc, #236]	@ (800cadc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d06d      	beq.n	800cad2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c9f6:	4b39      	ldr	r3, [pc, #228]	@ (800cadc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca00:	e008      	b.n	800ca14 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800ca02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800ca08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d007      	beq.n	800ca1e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800ca0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca10:	3301      	adds	r3, #1
 800ca12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d3f2      	bcc.n	800ca02 <SEGGER_SYSVIEW_SendModule+0x1e>
 800ca1c:	e000      	b.n	800ca20 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800ca1e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800ca20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d055      	beq.n	800cad2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ca26:	f3ef 8311 	mrs	r3, BASEPRI
 800ca2a:	f04f 0120 	mov.w	r1, #32
 800ca2e:	f381 8811 	msr	BASEPRI, r1
 800ca32:	617b      	str	r3, [r7, #20]
 800ca34:	482a      	ldr	r0, [pc, #168]	@ (800cae0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800ca36:	f7fe ff5c 	bl	800b8f2 <_PreparePacket>
 800ca3a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	623b      	str	r3, [r7, #32]
 800ca48:	e00b      	b.n	800ca62 <SEGGER_SYSVIEW_SendModule+0x7e>
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	1c59      	adds	r1, r3, #1
 800ca52:	6279      	str	r1, [r7, #36]	@ 0x24
 800ca54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	09db      	lsrs	r3, r3, #7
 800ca60:	623b      	str	r3, [r7, #32]
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca66:	d8f0      	bhi.n	800ca4a <SEGGER_SYSVIEW_SendModule+0x66>
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca6e:	6a3a      	ldr	r2, [r7, #32]
 800ca70:	b2d2      	uxtb	r2, r2
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	61fb      	str	r3, [r7, #28]
 800ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	61bb      	str	r3, [r7, #24]
 800ca82:	e00b      	b.n	800ca9c <SEGGER_SYSVIEW_SendModule+0xb8>
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	1c59      	adds	r1, r3, #1
 800ca8c:	61f9      	str	r1, [r7, #28]
 800ca8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca92:	b2d2      	uxtb	r2, r2
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	09db      	lsrs	r3, r3, #7
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800caa0:	d8f0      	bhi.n	800ca84 <SEGGER_SYSVIEW_SendModule+0xa0>
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	1c5a      	adds	r2, r3, #1
 800caa6:	61fa      	str	r2, [r7, #28]
 800caa8:	69ba      	ldr	r2, [r7, #24]
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	701a      	strb	r2, [r3, #0]
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2280      	movs	r2, #128	@ 0x80
 800cab8:	4619      	mov	r1, r3
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f7fe fecc 	bl	800b858 <_EncodeStr>
 800cac0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800cac2:	2216      	movs	r2, #22
 800cac4:	68f9      	ldr	r1, [r7, #12]
 800cac6:	6938      	ldr	r0, [r7, #16]
 800cac8:	f7ff f802 	bl	800bad0 <_SendPacket>
      RECORD_END();
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800cad2:	bf00      	nop
 800cad4:	3730      	adds	r7, #48	@ 0x30
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	2001494c 	.word	0x2001494c
 800cae0:	20014954 	.word	0x20014954

0800cae4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800caea:	4b0c      	ldr	r3, [pc, #48]	@ (800cb1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00f      	beq.n	800cb12 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800caf2:	4b0a      	ldr	r3, [pc, #40]	@ (800cb1c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1f2      	bne.n	800caf8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	2001494c 	.word	0x2001494c

0800cb20 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800cb26:	f3ef 8311 	mrs	r3, BASEPRI
 800cb2a:	f04f 0120 	mov.w	r1, #32
 800cb2e:	f381 8811 	msr	BASEPRI, r1
 800cb32:	60fb      	str	r3, [r7, #12]
 800cb34:	4817      	ldr	r0, [pc, #92]	@ (800cb94 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800cb36:	f7fe fedc 	bl	800b8f2 <_PreparePacket>
 800cb3a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	617b      	str	r3, [r7, #20]
 800cb44:	4b14      	ldr	r3, [pc, #80]	@ (800cb98 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	613b      	str	r3, [r7, #16]
 800cb4a:	e00b      	b.n	800cb64 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	1c59      	adds	r1, r3, #1
 800cb54:	6179      	str	r1, [r7, #20]
 800cb56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb5a:	b2d2      	uxtb	r2, r2
 800cb5c:	701a      	strb	r2, [r3, #0]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	09db      	lsrs	r3, r3, #7
 800cb62:	613b      	str	r3, [r7, #16]
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb68:	d8f0      	bhi.n	800cb4c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	617a      	str	r2, [r7, #20]
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	701a      	strb	r2, [r3, #0]
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800cb7a:	221b      	movs	r2, #27
 800cb7c:	6879      	ldr	r1, [r7, #4]
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f7fe ffa6 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f383 8811 	msr	BASEPRI, r3
}
 800cb8a:	bf00      	nop
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	20014954 	.word	0x20014954
 800cb98:	20014950 	.word	0x20014950

0800cb9c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08a      	sub	sp, #40	@ 0x28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cba4:	f3ef 8311 	mrs	r3, BASEPRI
 800cba8:	f04f 0120 	mov.w	r1, #32
 800cbac:	f381 8811 	msr	BASEPRI, r1
 800cbb0:	617b      	str	r3, [r7, #20]
 800cbb2:	4827      	ldr	r0, [pc, #156]	@ (800cc50 <SEGGER_SYSVIEW_Warn+0xb4>)
 800cbb4:	f7fe fe9d 	bl	800b8f2 <_PreparePacket>
 800cbb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cbba:	2280      	movs	r2, #128	@ 0x80
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	6938      	ldr	r0, [r7, #16]
 800cbc0:	f7fe fe4a 	bl	800b858 <_EncodeStr>
 800cbc4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbca:	2301      	movs	r3, #1
 800cbcc:	623b      	str	r3, [r7, #32]
 800cbce:	e00b      	b.n	800cbe8 <SEGGER_SYSVIEW_Warn+0x4c>
 800cbd0:	6a3b      	ldr	r3, [r7, #32]
 800cbd2:	b2da      	uxtb	r2, r3
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd6:	1c59      	adds	r1, r3, #1
 800cbd8:	6279      	str	r1, [r7, #36]	@ 0x24
 800cbda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbde:	b2d2      	uxtb	r2, r2
 800cbe0:	701a      	strb	r2, [r3, #0]
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	09db      	lsrs	r3, r3, #7
 800cbe6:	623b      	str	r3, [r7, #32]
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbec:	d8f0      	bhi.n	800cbd0 <SEGGER_SYSVIEW_Warn+0x34>
 800cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbf4:	6a3a      	ldr	r2, [r7, #32]
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	701a      	strb	r2, [r3, #0]
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	61fb      	str	r3, [r7, #28]
 800cc02:	2300      	movs	r3, #0
 800cc04:	61bb      	str	r3, [r7, #24]
 800cc06:	e00b      	b.n	800cc20 <SEGGER_SYSVIEW_Warn+0x84>
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	1c59      	adds	r1, r3, #1
 800cc10:	61f9      	str	r1, [r7, #28]
 800cc12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	701a      	strb	r2, [r3, #0]
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	09db      	lsrs	r3, r3, #7
 800cc1e:	61bb      	str	r3, [r7, #24]
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc24:	d8f0      	bhi.n	800cc08 <SEGGER_SYSVIEW_Warn+0x6c>
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	61fa      	str	r2, [r7, #28]
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	b2d2      	uxtb	r2, r2
 800cc30:	701a      	strb	r2, [r3, #0]
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800cc36:	221a      	movs	r2, #26
 800cc38:	68f9      	ldr	r1, [r7, #12]
 800cc3a:	6938      	ldr	r0, [r7, #16]
 800cc3c:	f7fe ff48 	bl	800bad0 <_SendPacket>
  RECORD_END();
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f383 8811 	msr	BASEPRI, r3
}
 800cc46:	bf00      	nop
 800cc48:	3728      	adds	r7, #40	@ 0x28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20014954 	.word	0x20014954

0800cc54 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	6879      	ldr	r1, [r7, #4]
 800cc66:	2000      	movs	r0, #0
 800cc68:	f7fe fcdc 	bl	800b624 <SEGGER_RTT_Write>
  return len;
 800cc6c:	683b      	ldr	r3, [r7, #0]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <std>:
 800cc78:	2300      	movs	r3, #0
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc86:	6083      	str	r3, [r0, #8]
 800cc88:	8181      	strh	r1, [r0, #12]
 800cc8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc8c:	81c2      	strh	r2, [r0, #14]
 800cc8e:	6183      	str	r3, [r0, #24]
 800cc90:	4619      	mov	r1, r3
 800cc92:	2208      	movs	r2, #8
 800cc94:	305c      	adds	r0, #92	@ 0x5c
 800cc96:	f000 fa29 	bl	800d0ec <memset>
 800cc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd0 <std+0x58>)
 800cc9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd4 <std+0x5c>)
 800cca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ccd8 <std+0x60>)
 800cca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cca6:	4b0d      	ldr	r3, [pc, #52]	@ (800ccdc <std+0x64>)
 800cca8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cce0 <std+0x68>)
 800ccac:	6224      	str	r4, [r4, #32]
 800ccae:	429c      	cmp	r4, r3
 800ccb0:	d006      	beq.n	800ccc0 <std+0x48>
 800ccb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccb6:	4294      	cmp	r4, r2
 800ccb8:	d002      	beq.n	800ccc0 <std+0x48>
 800ccba:	33d0      	adds	r3, #208	@ 0xd0
 800ccbc:	429c      	cmp	r4, r3
 800ccbe:	d105      	bne.n	800cccc <std+0x54>
 800ccc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc8:	f000 ba70 	b.w	800d1ac <__retarget_lock_init_recursive>
 800cccc:	bd10      	pop	{r4, pc}
 800ccce:	bf00      	nop
 800ccd0:	0800cf1d 	.word	0x0800cf1d
 800ccd4:	0800cf3f 	.word	0x0800cf3f
 800ccd8:	0800cf77 	.word	0x0800cf77
 800ccdc:	0800cf9b 	.word	0x0800cf9b
 800cce0:	20014a38 	.word	0x20014a38

0800cce4 <stdio_exit_handler>:
 800cce4:	4a02      	ldr	r2, [pc, #8]	@ (800ccf0 <stdio_exit_handler+0xc>)
 800cce6:	4903      	ldr	r1, [pc, #12]	@ (800ccf4 <stdio_exit_handler+0x10>)
 800cce8:	4803      	ldr	r0, [pc, #12]	@ (800ccf8 <stdio_exit_handler+0x14>)
 800ccea:	f000 b869 	b.w	800cdc0 <_fwalk_sglue>
 800ccee:	bf00      	nop
 800ccf0:	200000b4 	.word	0x200000b4
 800ccf4:	0800dd19 	.word	0x0800dd19
 800ccf8:	200000c4 	.word	0x200000c4

0800ccfc <cleanup_stdio>:
 800ccfc:	6841      	ldr	r1, [r0, #4]
 800ccfe:	4b0c      	ldr	r3, [pc, #48]	@ (800cd30 <cleanup_stdio+0x34>)
 800cd00:	4299      	cmp	r1, r3
 800cd02:	b510      	push	{r4, lr}
 800cd04:	4604      	mov	r4, r0
 800cd06:	d001      	beq.n	800cd0c <cleanup_stdio+0x10>
 800cd08:	f001 f806 	bl	800dd18 <_fflush_r>
 800cd0c:	68a1      	ldr	r1, [r4, #8]
 800cd0e:	4b09      	ldr	r3, [pc, #36]	@ (800cd34 <cleanup_stdio+0x38>)
 800cd10:	4299      	cmp	r1, r3
 800cd12:	d002      	beq.n	800cd1a <cleanup_stdio+0x1e>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 ffff 	bl	800dd18 <_fflush_r>
 800cd1a:	68e1      	ldr	r1, [r4, #12]
 800cd1c:	4b06      	ldr	r3, [pc, #24]	@ (800cd38 <cleanup_stdio+0x3c>)
 800cd1e:	4299      	cmp	r1, r3
 800cd20:	d004      	beq.n	800cd2c <cleanup_stdio+0x30>
 800cd22:	4620      	mov	r0, r4
 800cd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd28:	f000 bff6 	b.w	800dd18 <_fflush_r>
 800cd2c:	bd10      	pop	{r4, pc}
 800cd2e:	bf00      	nop
 800cd30:	20014a38 	.word	0x20014a38
 800cd34:	20014aa0 	.word	0x20014aa0
 800cd38:	20014b08 	.word	0x20014b08

0800cd3c <global_stdio_init.part.0>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd6c <global_stdio_init.part.0+0x30>)
 800cd40:	4c0b      	ldr	r4, [pc, #44]	@ (800cd70 <global_stdio_init.part.0+0x34>)
 800cd42:	4a0c      	ldr	r2, [pc, #48]	@ (800cd74 <global_stdio_init.part.0+0x38>)
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	4620      	mov	r0, r4
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2104      	movs	r1, #4
 800cd4c:	f7ff ff94 	bl	800cc78 <std>
 800cd50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd54:	2201      	movs	r2, #1
 800cd56:	2109      	movs	r1, #9
 800cd58:	f7ff ff8e 	bl	800cc78 <std>
 800cd5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd60:	2202      	movs	r2, #2
 800cd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd66:	2112      	movs	r1, #18
 800cd68:	f7ff bf86 	b.w	800cc78 <std>
 800cd6c:	20014b70 	.word	0x20014b70
 800cd70:	20014a38 	.word	0x20014a38
 800cd74:	0800cce5 	.word	0x0800cce5

0800cd78 <__sfp_lock_acquire>:
 800cd78:	4801      	ldr	r0, [pc, #4]	@ (800cd80 <__sfp_lock_acquire+0x8>)
 800cd7a:	f000 ba18 	b.w	800d1ae <__retarget_lock_acquire_recursive>
 800cd7e:	bf00      	nop
 800cd80:	20014b79 	.word	0x20014b79

0800cd84 <__sfp_lock_release>:
 800cd84:	4801      	ldr	r0, [pc, #4]	@ (800cd8c <__sfp_lock_release+0x8>)
 800cd86:	f000 ba13 	b.w	800d1b0 <__retarget_lock_release_recursive>
 800cd8a:	bf00      	nop
 800cd8c:	20014b79 	.word	0x20014b79

0800cd90 <__sinit>:
 800cd90:	b510      	push	{r4, lr}
 800cd92:	4604      	mov	r4, r0
 800cd94:	f7ff fff0 	bl	800cd78 <__sfp_lock_acquire>
 800cd98:	6a23      	ldr	r3, [r4, #32]
 800cd9a:	b11b      	cbz	r3, 800cda4 <__sinit+0x14>
 800cd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda0:	f7ff bff0 	b.w	800cd84 <__sfp_lock_release>
 800cda4:	4b04      	ldr	r3, [pc, #16]	@ (800cdb8 <__sinit+0x28>)
 800cda6:	6223      	str	r3, [r4, #32]
 800cda8:	4b04      	ldr	r3, [pc, #16]	@ (800cdbc <__sinit+0x2c>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f5      	bne.n	800cd9c <__sinit+0xc>
 800cdb0:	f7ff ffc4 	bl	800cd3c <global_stdio_init.part.0>
 800cdb4:	e7f2      	b.n	800cd9c <__sinit+0xc>
 800cdb6:	bf00      	nop
 800cdb8:	0800ccfd 	.word	0x0800ccfd
 800cdbc:	20014b70 	.word	0x20014b70

0800cdc0 <_fwalk_sglue>:
 800cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	4688      	mov	r8, r1
 800cdc8:	4614      	mov	r4, r2
 800cdca:	2600      	movs	r6, #0
 800cdcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdd0:	f1b9 0901 	subs.w	r9, r9, #1
 800cdd4:	d505      	bpl.n	800cde2 <_fwalk_sglue+0x22>
 800cdd6:	6824      	ldr	r4, [r4, #0]
 800cdd8:	2c00      	cmp	r4, #0
 800cdda:	d1f7      	bne.n	800cdcc <_fwalk_sglue+0xc>
 800cddc:	4630      	mov	r0, r6
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d907      	bls.n	800cdf8 <_fwalk_sglue+0x38>
 800cde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdec:	3301      	adds	r3, #1
 800cdee:	d003      	beq.n	800cdf8 <_fwalk_sglue+0x38>
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	47c0      	blx	r8
 800cdf6:	4306      	orrs	r6, r0
 800cdf8:	3568      	adds	r5, #104	@ 0x68
 800cdfa:	e7e9      	b.n	800cdd0 <_fwalk_sglue+0x10>

0800cdfc <iprintf>:
 800cdfc:	b40f      	push	{r0, r1, r2, r3}
 800cdfe:	b507      	push	{r0, r1, r2, lr}
 800ce00:	4906      	ldr	r1, [pc, #24]	@ (800ce1c <iprintf+0x20>)
 800ce02:	ab04      	add	r3, sp, #16
 800ce04:	6808      	ldr	r0, [r1, #0]
 800ce06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce0a:	6881      	ldr	r1, [r0, #8]
 800ce0c:	9301      	str	r3, [sp, #4]
 800ce0e:	f000 fc59 	bl	800d6c4 <_vfiprintf_r>
 800ce12:	b003      	add	sp, #12
 800ce14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce18:	b004      	add	sp, #16
 800ce1a:	4770      	bx	lr
 800ce1c:	200000c0 	.word	0x200000c0

0800ce20 <_puts_r>:
 800ce20:	6a03      	ldr	r3, [r0, #32]
 800ce22:	b570      	push	{r4, r5, r6, lr}
 800ce24:	6884      	ldr	r4, [r0, #8]
 800ce26:	4605      	mov	r5, r0
 800ce28:	460e      	mov	r6, r1
 800ce2a:	b90b      	cbnz	r3, 800ce30 <_puts_r+0x10>
 800ce2c:	f7ff ffb0 	bl	800cd90 <__sinit>
 800ce30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce32:	07db      	lsls	r3, r3, #31
 800ce34:	d405      	bmi.n	800ce42 <_puts_r+0x22>
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	0598      	lsls	r0, r3, #22
 800ce3a:	d402      	bmi.n	800ce42 <_puts_r+0x22>
 800ce3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce3e:	f000 f9b6 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	0719      	lsls	r1, r3, #28
 800ce46:	d502      	bpl.n	800ce4e <_puts_r+0x2e>
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d135      	bne.n	800ceba <_puts_r+0x9a>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4628      	mov	r0, r5
 800ce52:	f000 f8e5 	bl	800d020 <__swsetup_r>
 800ce56:	b380      	cbz	r0, 800ceba <_puts_r+0x9a>
 800ce58:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ce5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce5e:	07da      	lsls	r2, r3, #31
 800ce60:	d405      	bmi.n	800ce6e <_puts_r+0x4e>
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	059b      	lsls	r3, r3, #22
 800ce66:	d402      	bmi.n	800ce6e <_puts_r+0x4e>
 800ce68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce6a:	f000 f9a1 	bl	800d1b0 <__retarget_lock_release_recursive>
 800ce6e:	4628      	mov	r0, r5
 800ce70:	bd70      	pop	{r4, r5, r6, pc}
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	da04      	bge.n	800ce80 <_puts_r+0x60>
 800ce76:	69a2      	ldr	r2, [r4, #24]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	dc17      	bgt.n	800ceac <_puts_r+0x8c>
 800ce7c:	290a      	cmp	r1, #10
 800ce7e:	d015      	beq.n	800ceac <_puts_r+0x8c>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	6022      	str	r2, [r4, #0]
 800ce86:	7019      	strb	r1, [r3, #0]
 800ce88:	68a3      	ldr	r3, [r4, #8]
 800ce8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	60a3      	str	r3, [r4, #8]
 800ce92:	2900      	cmp	r1, #0
 800ce94:	d1ed      	bne.n	800ce72 <_puts_r+0x52>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	da11      	bge.n	800cebe <_puts_r+0x9e>
 800ce9a:	4622      	mov	r2, r4
 800ce9c:	210a      	movs	r1, #10
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 f87f 	bl	800cfa2 <__swbuf_r>
 800cea4:	3001      	adds	r0, #1
 800cea6:	d0d7      	beq.n	800ce58 <_puts_r+0x38>
 800cea8:	250a      	movs	r5, #10
 800ceaa:	e7d7      	b.n	800ce5c <_puts_r+0x3c>
 800ceac:	4622      	mov	r2, r4
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 f877 	bl	800cfa2 <__swbuf_r>
 800ceb4:	3001      	adds	r0, #1
 800ceb6:	d1e7      	bne.n	800ce88 <_puts_r+0x68>
 800ceb8:	e7ce      	b.n	800ce58 <_puts_r+0x38>
 800ceba:	3e01      	subs	r6, #1
 800cebc:	e7e4      	b.n	800ce88 <_puts_r+0x68>
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	220a      	movs	r2, #10
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	e7ee      	b.n	800cea8 <_puts_r+0x88>
	...

0800cecc <puts>:
 800cecc:	4b02      	ldr	r3, [pc, #8]	@ (800ced8 <puts+0xc>)
 800cece:	4601      	mov	r1, r0
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	f7ff bfa5 	b.w	800ce20 <_puts_r>
 800ced6:	bf00      	nop
 800ced8:	200000c0 	.word	0x200000c0

0800cedc <siprintf>:
 800cedc:	b40e      	push	{r1, r2, r3}
 800cede:	b500      	push	{lr}
 800cee0:	b09c      	sub	sp, #112	@ 0x70
 800cee2:	ab1d      	add	r3, sp, #116	@ 0x74
 800cee4:	9002      	str	r0, [sp, #8]
 800cee6:	9006      	str	r0, [sp, #24]
 800cee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ceec:	4809      	ldr	r0, [pc, #36]	@ (800cf14 <siprintf+0x38>)
 800ceee:	9107      	str	r1, [sp, #28]
 800cef0:	9104      	str	r1, [sp, #16]
 800cef2:	4909      	ldr	r1, [pc, #36]	@ (800cf18 <siprintf+0x3c>)
 800cef4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef8:	9105      	str	r1, [sp, #20]
 800cefa:	6800      	ldr	r0, [r0, #0]
 800cefc:	9301      	str	r3, [sp, #4]
 800cefe:	a902      	add	r1, sp, #8
 800cf00:	f000 faba 	bl	800d478 <_svfiprintf_r>
 800cf04:	9b02      	ldr	r3, [sp, #8]
 800cf06:	2200      	movs	r2, #0
 800cf08:	701a      	strb	r2, [r3, #0]
 800cf0a:	b01c      	add	sp, #112	@ 0x70
 800cf0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf10:	b003      	add	sp, #12
 800cf12:	4770      	bx	lr
 800cf14:	200000c0 	.word	0x200000c0
 800cf18:	ffff0208 	.word	0xffff0208

0800cf1c <__sread>:
 800cf1c:	b510      	push	{r4, lr}
 800cf1e:	460c      	mov	r4, r1
 800cf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf24:	f000 f90c 	bl	800d140 <_read_r>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	bfab      	itete	ge
 800cf2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf2e:	89a3      	ldrhlt	r3, [r4, #12]
 800cf30:	181b      	addge	r3, r3, r0
 800cf32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf36:	bfac      	ite	ge
 800cf38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf3a:	81a3      	strhlt	r3, [r4, #12]
 800cf3c:	bd10      	pop	{r4, pc}

0800cf3e <__swrite>:
 800cf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf42:	461f      	mov	r7, r3
 800cf44:	898b      	ldrh	r3, [r1, #12]
 800cf46:	05db      	lsls	r3, r3, #23
 800cf48:	4605      	mov	r5, r0
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	4616      	mov	r6, r2
 800cf4e:	d505      	bpl.n	800cf5c <__swrite+0x1e>
 800cf50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf54:	2302      	movs	r3, #2
 800cf56:	2200      	movs	r2, #0
 800cf58:	f000 f8e0 	bl	800d11c <_lseek_r>
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf66:	81a3      	strh	r3, [r4, #12]
 800cf68:	4632      	mov	r2, r6
 800cf6a:	463b      	mov	r3, r7
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf72:	f7ff be6f 	b.w	800cc54 <_write_r>

0800cf76 <__sseek>:
 800cf76:	b510      	push	{r4, lr}
 800cf78:	460c      	mov	r4, r1
 800cf7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf7e:	f000 f8cd 	bl	800d11c <_lseek_r>
 800cf82:	1c43      	adds	r3, r0, #1
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	bf15      	itete	ne
 800cf88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf92:	81a3      	strheq	r3, [r4, #12]
 800cf94:	bf18      	it	ne
 800cf96:	81a3      	strhne	r3, [r4, #12]
 800cf98:	bd10      	pop	{r4, pc}

0800cf9a <__sclose>:
 800cf9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9e:	f000 b8ad 	b.w	800d0fc <_close_r>

0800cfa2 <__swbuf_r>:
 800cfa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa4:	460e      	mov	r6, r1
 800cfa6:	4614      	mov	r4, r2
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	b118      	cbz	r0, 800cfb4 <__swbuf_r+0x12>
 800cfac:	6a03      	ldr	r3, [r0, #32]
 800cfae:	b90b      	cbnz	r3, 800cfb4 <__swbuf_r+0x12>
 800cfb0:	f7ff feee 	bl	800cd90 <__sinit>
 800cfb4:	69a3      	ldr	r3, [r4, #24]
 800cfb6:	60a3      	str	r3, [r4, #8]
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	071a      	lsls	r2, r3, #28
 800cfbc:	d501      	bpl.n	800cfc2 <__swbuf_r+0x20>
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	b943      	cbnz	r3, 800cfd4 <__swbuf_r+0x32>
 800cfc2:	4621      	mov	r1, r4
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	f000 f82b 	bl	800d020 <__swsetup_r>
 800cfca:	b118      	cbz	r0, 800cfd4 <__swbuf_r+0x32>
 800cfcc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	6922      	ldr	r2, [r4, #16]
 800cfd8:	1a98      	subs	r0, r3, r2
 800cfda:	6963      	ldr	r3, [r4, #20]
 800cfdc:	b2f6      	uxtb	r6, r6
 800cfde:	4283      	cmp	r3, r0
 800cfe0:	4637      	mov	r7, r6
 800cfe2:	dc05      	bgt.n	800cff0 <__swbuf_r+0x4e>
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f000 fe96 	bl	800dd18 <_fflush_r>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d1ed      	bne.n	800cfcc <__swbuf_r+0x2a>
 800cff0:	68a3      	ldr	r3, [r4, #8]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	60a3      	str	r3, [r4, #8]
 800cff6:	6823      	ldr	r3, [r4, #0]
 800cff8:	1c5a      	adds	r2, r3, #1
 800cffa:	6022      	str	r2, [r4, #0]
 800cffc:	701e      	strb	r6, [r3, #0]
 800cffe:	6962      	ldr	r2, [r4, #20]
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	429a      	cmp	r2, r3
 800d004:	d004      	beq.n	800d010 <__swbuf_r+0x6e>
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	07db      	lsls	r3, r3, #31
 800d00a:	d5e1      	bpl.n	800cfd0 <__swbuf_r+0x2e>
 800d00c:	2e0a      	cmp	r6, #10
 800d00e:	d1df      	bne.n	800cfd0 <__swbuf_r+0x2e>
 800d010:	4621      	mov	r1, r4
 800d012:	4628      	mov	r0, r5
 800d014:	f000 fe80 	bl	800dd18 <_fflush_r>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d0d9      	beq.n	800cfd0 <__swbuf_r+0x2e>
 800d01c:	e7d6      	b.n	800cfcc <__swbuf_r+0x2a>
	...

0800d020 <__swsetup_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	4b29      	ldr	r3, [pc, #164]	@ (800d0c8 <__swsetup_r+0xa8>)
 800d024:	4605      	mov	r5, r0
 800d026:	6818      	ldr	r0, [r3, #0]
 800d028:	460c      	mov	r4, r1
 800d02a:	b118      	cbz	r0, 800d034 <__swsetup_r+0x14>
 800d02c:	6a03      	ldr	r3, [r0, #32]
 800d02e:	b90b      	cbnz	r3, 800d034 <__swsetup_r+0x14>
 800d030:	f7ff feae 	bl	800cd90 <__sinit>
 800d034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d038:	0719      	lsls	r1, r3, #28
 800d03a:	d422      	bmi.n	800d082 <__swsetup_r+0x62>
 800d03c:	06da      	lsls	r2, r3, #27
 800d03e:	d407      	bmi.n	800d050 <__swsetup_r+0x30>
 800d040:	2209      	movs	r2, #9
 800d042:	602a      	str	r2, [r5, #0]
 800d044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d048:	81a3      	strh	r3, [r4, #12]
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d04e:	e033      	b.n	800d0b8 <__swsetup_r+0x98>
 800d050:	0758      	lsls	r0, r3, #29
 800d052:	d512      	bpl.n	800d07a <__swsetup_r+0x5a>
 800d054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d056:	b141      	cbz	r1, 800d06a <__swsetup_r+0x4a>
 800d058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d05c:	4299      	cmp	r1, r3
 800d05e:	d002      	beq.n	800d066 <__swsetup_r+0x46>
 800d060:	4628      	mov	r0, r5
 800d062:	f000 f8b5 	bl	800d1d0 <_free_r>
 800d066:	2300      	movs	r3, #0
 800d068:	6363      	str	r3, [r4, #52]	@ 0x34
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d070:	81a3      	strh	r3, [r4, #12]
 800d072:	2300      	movs	r3, #0
 800d074:	6063      	str	r3, [r4, #4]
 800d076:	6923      	ldr	r3, [r4, #16]
 800d078:	6023      	str	r3, [r4, #0]
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	f043 0308 	orr.w	r3, r3, #8
 800d080:	81a3      	strh	r3, [r4, #12]
 800d082:	6923      	ldr	r3, [r4, #16]
 800d084:	b94b      	cbnz	r3, 800d09a <__swsetup_r+0x7a>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d08c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d090:	d003      	beq.n	800d09a <__swsetup_r+0x7a>
 800d092:	4621      	mov	r1, r4
 800d094:	4628      	mov	r0, r5
 800d096:	f000 fe8d 	bl	800ddb4 <__smakebuf_r>
 800d09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d09e:	f013 0201 	ands.w	r2, r3, #1
 800d0a2:	d00a      	beq.n	800d0ba <__swsetup_r+0x9a>
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	60a2      	str	r2, [r4, #8]
 800d0a8:	6962      	ldr	r2, [r4, #20]
 800d0aa:	4252      	negs	r2, r2
 800d0ac:	61a2      	str	r2, [r4, #24]
 800d0ae:	6922      	ldr	r2, [r4, #16]
 800d0b0:	b942      	cbnz	r2, 800d0c4 <__swsetup_r+0xa4>
 800d0b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0b6:	d1c5      	bne.n	800d044 <__swsetup_r+0x24>
 800d0b8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ba:	0799      	lsls	r1, r3, #30
 800d0bc:	bf58      	it	pl
 800d0be:	6962      	ldrpl	r2, [r4, #20]
 800d0c0:	60a2      	str	r2, [r4, #8]
 800d0c2:	e7f4      	b.n	800d0ae <__swsetup_r+0x8e>
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e7f7      	b.n	800d0b8 <__swsetup_r+0x98>
 800d0c8:	200000c0 	.word	0x200000c0

0800d0cc <memcmp>:
 800d0cc:	b510      	push	{r4, lr}
 800d0ce:	3901      	subs	r1, #1
 800d0d0:	4402      	add	r2, r0
 800d0d2:	4290      	cmp	r0, r2
 800d0d4:	d101      	bne.n	800d0da <memcmp+0xe>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e005      	b.n	800d0e6 <memcmp+0x1a>
 800d0da:	7803      	ldrb	r3, [r0, #0]
 800d0dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	d001      	beq.n	800d0e8 <memcmp+0x1c>
 800d0e4:	1b18      	subs	r0, r3, r4
 800d0e6:	bd10      	pop	{r4, pc}
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	e7f2      	b.n	800d0d2 <memcmp+0x6>

0800d0ec <memset>:
 800d0ec:	4402      	add	r2, r0
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d100      	bne.n	800d0f6 <memset+0xa>
 800d0f4:	4770      	bx	lr
 800d0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0fa:	e7f9      	b.n	800d0f0 <memset+0x4>

0800d0fc <_close_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d06      	ldr	r5, [pc, #24]	@ (800d118 <_close_r+0x1c>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f5 fca3 	bl	8002a52 <_close>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_close_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_close_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	20014b74 	.word	0x20014b74

0800d11c <_lseek_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4d07      	ldr	r5, [pc, #28]	@ (800d13c <_lseek_r+0x20>)
 800d120:	4604      	mov	r4, r0
 800d122:	4608      	mov	r0, r1
 800d124:	4611      	mov	r1, r2
 800d126:	2200      	movs	r2, #0
 800d128:	602a      	str	r2, [r5, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f7f5 fcb8 	bl	8002aa0 <_lseek>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_lseek_r+0x1e>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_lseek_r+0x1e>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	20014b74 	.word	0x20014b74

0800d140 <_read_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4d07      	ldr	r5, [pc, #28]	@ (800d160 <_read_r+0x20>)
 800d144:	4604      	mov	r4, r0
 800d146:	4608      	mov	r0, r1
 800d148:	4611      	mov	r1, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	602a      	str	r2, [r5, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	f7f5 fc62 	bl	8002a18 <_read>
 800d154:	1c43      	adds	r3, r0, #1
 800d156:	d102      	bne.n	800d15e <_read_r+0x1e>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b103      	cbz	r3, 800d15e <_read_r+0x1e>
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
 800d160:	20014b74 	.word	0x20014b74

0800d164 <__libc_init_array>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	4d0d      	ldr	r5, [pc, #52]	@ (800d19c <__libc_init_array+0x38>)
 800d168:	4c0d      	ldr	r4, [pc, #52]	@ (800d1a0 <__libc_init_array+0x3c>)
 800d16a:	1b64      	subs	r4, r4, r5
 800d16c:	10a4      	asrs	r4, r4, #2
 800d16e:	2600      	movs	r6, #0
 800d170:	42a6      	cmp	r6, r4
 800d172:	d109      	bne.n	800d188 <__libc_init_array+0x24>
 800d174:	4d0b      	ldr	r5, [pc, #44]	@ (800d1a4 <__libc_init_array+0x40>)
 800d176:	4c0c      	ldr	r4, [pc, #48]	@ (800d1a8 <__libc_init_array+0x44>)
 800d178:	f000 ff0c 	bl	800df94 <_init>
 800d17c:	1b64      	subs	r4, r4, r5
 800d17e:	10a4      	asrs	r4, r4, #2
 800d180:	2600      	movs	r6, #0
 800d182:	42a6      	cmp	r6, r4
 800d184:	d105      	bne.n	800d192 <__libc_init_array+0x2e>
 800d186:	bd70      	pop	{r4, r5, r6, pc}
 800d188:	f855 3b04 	ldr.w	r3, [r5], #4
 800d18c:	4798      	blx	r3
 800d18e:	3601      	adds	r6, #1
 800d190:	e7ee      	b.n	800d170 <__libc_init_array+0xc>
 800d192:	f855 3b04 	ldr.w	r3, [r5], #4
 800d196:	4798      	blx	r3
 800d198:	3601      	adds	r6, #1
 800d19a:	e7f2      	b.n	800d182 <__libc_init_array+0x1e>
 800d19c:	0800e544 	.word	0x0800e544
 800d1a0:	0800e544 	.word	0x0800e544
 800d1a4:	0800e544 	.word	0x0800e544
 800d1a8:	0800e548 	.word	0x0800e548

0800d1ac <__retarget_lock_init_recursive>:
 800d1ac:	4770      	bx	lr

0800d1ae <__retarget_lock_acquire_recursive>:
 800d1ae:	4770      	bx	lr

0800d1b0 <__retarget_lock_release_recursive>:
 800d1b0:	4770      	bx	lr

0800d1b2 <memcpy>:
 800d1b2:	440a      	add	r2, r1
 800d1b4:	4291      	cmp	r1, r2
 800d1b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1ba:	d100      	bne.n	800d1be <memcpy+0xc>
 800d1bc:	4770      	bx	lr
 800d1be:	b510      	push	{r4, lr}
 800d1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1c8:	4291      	cmp	r1, r2
 800d1ca:	d1f9      	bne.n	800d1c0 <memcpy+0xe>
 800d1cc:	bd10      	pop	{r4, pc}
	...

0800d1d0 <_free_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	d041      	beq.n	800d25c <_free_r+0x8c>
 800d1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1dc:	1f0c      	subs	r4, r1, #4
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	bfb8      	it	lt
 800d1e2:	18e4      	addlt	r4, r4, r3
 800d1e4:	f000 f8e0 	bl	800d3a8 <__malloc_lock>
 800d1e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d260 <_free_r+0x90>)
 800d1ea:	6813      	ldr	r3, [r2, #0]
 800d1ec:	b933      	cbnz	r3, 800d1fc <_free_r+0x2c>
 800d1ee:	6063      	str	r3, [r4, #4]
 800d1f0:	6014      	str	r4, [r2, #0]
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f8:	f000 b8dc 	b.w	800d3b4 <__malloc_unlock>
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	d908      	bls.n	800d212 <_free_r+0x42>
 800d200:	6820      	ldr	r0, [r4, #0]
 800d202:	1821      	adds	r1, r4, r0
 800d204:	428b      	cmp	r3, r1
 800d206:	bf01      	itttt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	1809      	addeq	r1, r1, r0
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	e7ed      	b.n	800d1ee <_free_r+0x1e>
 800d212:	461a      	mov	r2, r3
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	b10b      	cbz	r3, 800d21c <_free_r+0x4c>
 800d218:	42a3      	cmp	r3, r4
 800d21a:	d9fa      	bls.n	800d212 <_free_r+0x42>
 800d21c:	6811      	ldr	r1, [r2, #0]
 800d21e:	1850      	adds	r0, r2, r1
 800d220:	42a0      	cmp	r0, r4
 800d222:	d10b      	bne.n	800d23c <_free_r+0x6c>
 800d224:	6820      	ldr	r0, [r4, #0]
 800d226:	4401      	add	r1, r0
 800d228:	1850      	adds	r0, r2, r1
 800d22a:	4283      	cmp	r3, r0
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	d1e0      	bne.n	800d1f2 <_free_r+0x22>
 800d230:	6818      	ldr	r0, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	6053      	str	r3, [r2, #4]
 800d236:	4408      	add	r0, r1
 800d238:	6010      	str	r0, [r2, #0]
 800d23a:	e7da      	b.n	800d1f2 <_free_r+0x22>
 800d23c:	d902      	bls.n	800d244 <_free_r+0x74>
 800d23e:	230c      	movs	r3, #12
 800d240:	602b      	str	r3, [r5, #0]
 800d242:	e7d6      	b.n	800d1f2 <_free_r+0x22>
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	1821      	adds	r1, r4, r0
 800d248:	428b      	cmp	r3, r1
 800d24a:	bf04      	itt	eq
 800d24c:	6819      	ldreq	r1, [r3, #0]
 800d24e:	685b      	ldreq	r3, [r3, #4]
 800d250:	6063      	str	r3, [r4, #4]
 800d252:	bf04      	itt	eq
 800d254:	1809      	addeq	r1, r1, r0
 800d256:	6021      	streq	r1, [r4, #0]
 800d258:	6054      	str	r4, [r2, #4]
 800d25a:	e7ca      	b.n	800d1f2 <_free_r+0x22>
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
 800d25e:	bf00      	nop
 800d260:	20014b80 	.word	0x20014b80

0800d264 <sbrk_aligned>:
 800d264:	b570      	push	{r4, r5, r6, lr}
 800d266:	4e0f      	ldr	r6, [pc, #60]	@ (800d2a4 <sbrk_aligned+0x40>)
 800d268:	460c      	mov	r4, r1
 800d26a:	6831      	ldr	r1, [r6, #0]
 800d26c:	4605      	mov	r5, r0
 800d26e:	b911      	cbnz	r1, 800d276 <sbrk_aligned+0x12>
 800d270:	f000 fe18 	bl	800dea4 <_sbrk_r>
 800d274:	6030      	str	r0, [r6, #0]
 800d276:	4621      	mov	r1, r4
 800d278:	4628      	mov	r0, r5
 800d27a:	f000 fe13 	bl	800dea4 <_sbrk_r>
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	d103      	bne.n	800d28a <sbrk_aligned+0x26>
 800d282:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d286:	4620      	mov	r0, r4
 800d288:	bd70      	pop	{r4, r5, r6, pc}
 800d28a:	1cc4      	adds	r4, r0, #3
 800d28c:	f024 0403 	bic.w	r4, r4, #3
 800d290:	42a0      	cmp	r0, r4
 800d292:	d0f8      	beq.n	800d286 <sbrk_aligned+0x22>
 800d294:	1a21      	subs	r1, r4, r0
 800d296:	4628      	mov	r0, r5
 800d298:	f000 fe04 	bl	800dea4 <_sbrk_r>
 800d29c:	3001      	adds	r0, #1
 800d29e:	d1f2      	bne.n	800d286 <sbrk_aligned+0x22>
 800d2a0:	e7ef      	b.n	800d282 <sbrk_aligned+0x1e>
 800d2a2:	bf00      	nop
 800d2a4:	20014b7c 	.word	0x20014b7c

0800d2a8 <_malloc_r>:
 800d2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2ac:	1ccd      	adds	r5, r1, #3
 800d2ae:	f025 0503 	bic.w	r5, r5, #3
 800d2b2:	3508      	adds	r5, #8
 800d2b4:	2d0c      	cmp	r5, #12
 800d2b6:	bf38      	it	cc
 800d2b8:	250c      	movcc	r5, #12
 800d2ba:	2d00      	cmp	r5, #0
 800d2bc:	4606      	mov	r6, r0
 800d2be:	db01      	blt.n	800d2c4 <_malloc_r+0x1c>
 800d2c0:	42a9      	cmp	r1, r5
 800d2c2:	d904      	bls.n	800d2ce <_malloc_r+0x26>
 800d2c4:	230c      	movs	r3, #12
 800d2c6:	6033      	str	r3, [r6, #0]
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3a4 <_malloc_r+0xfc>
 800d2d2:	f000 f869 	bl	800d3a8 <__malloc_lock>
 800d2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800d2da:	461c      	mov	r4, r3
 800d2dc:	bb44      	cbnz	r4, 800d330 <_malloc_r+0x88>
 800d2de:	4629      	mov	r1, r5
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f7ff ffbf 	bl	800d264 <sbrk_aligned>
 800d2e6:	1c43      	adds	r3, r0, #1
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	d158      	bne.n	800d39e <_malloc_r+0xf6>
 800d2ec:	f8d8 4000 	ldr.w	r4, [r8]
 800d2f0:	4627      	mov	r7, r4
 800d2f2:	2f00      	cmp	r7, #0
 800d2f4:	d143      	bne.n	800d37e <_malloc_r+0xd6>
 800d2f6:	2c00      	cmp	r4, #0
 800d2f8:	d04b      	beq.n	800d392 <_malloc_r+0xea>
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	4639      	mov	r1, r7
 800d2fe:	4630      	mov	r0, r6
 800d300:	eb04 0903 	add.w	r9, r4, r3
 800d304:	f000 fdce 	bl	800dea4 <_sbrk_r>
 800d308:	4581      	cmp	r9, r0
 800d30a:	d142      	bne.n	800d392 <_malloc_r+0xea>
 800d30c:	6821      	ldr	r1, [r4, #0]
 800d30e:	1a6d      	subs	r5, r5, r1
 800d310:	4629      	mov	r1, r5
 800d312:	4630      	mov	r0, r6
 800d314:	f7ff ffa6 	bl	800d264 <sbrk_aligned>
 800d318:	3001      	adds	r0, #1
 800d31a:	d03a      	beq.n	800d392 <_malloc_r+0xea>
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	442b      	add	r3, r5
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	f8d8 3000 	ldr.w	r3, [r8]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	bb62      	cbnz	r2, 800d384 <_malloc_r+0xdc>
 800d32a:	f8c8 7000 	str.w	r7, [r8]
 800d32e:	e00f      	b.n	800d350 <_malloc_r+0xa8>
 800d330:	6822      	ldr	r2, [r4, #0]
 800d332:	1b52      	subs	r2, r2, r5
 800d334:	d420      	bmi.n	800d378 <_malloc_r+0xd0>
 800d336:	2a0b      	cmp	r2, #11
 800d338:	d917      	bls.n	800d36a <_malloc_r+0xc2>
 800d33a:	1961      	adds	r1, r4, r5
 800d33c:	42a3      	cmp	r3, r4
 800d33e:	6025      	str	r5, [r4, #0]
 800d340:	bf18      	it	ne
 800d342:	6059      	strne	r1, [r3, #4]
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	bf08      	it	eq
 800d348:	f8c8 1000 	streq.w	r1, [r8]
 800d34c:	5162      	str	r2, [r4, r5]
 800d34e:	604b      	str	r3, [r1, #4]
 800d350:	4630      	mov	r0, r6
 800d352:	f000 f82f 	bl	800d3b4 <__malloc_unlock>
 800d356:	f104 000b 	add.w	r0, r4, #11
 800d35a:	1d23      	adds	r3, r4, #4
 800d35c:	f020 0007 	bic.w	r0, r0, #7
 800d360:	1ac2      	subs	r2, r0, r3
 800d362:	bf1c      	itt	ne
 800d364:	1a1b      	subne	r3, r3, r0
 800d366:	50a3      	strne	r3, [r4, r2]
 800d368:	e7af      	b.n	800d2ca <_malloc_r+0x22>
 800d36a:	6862      	ldr	r2, [r4, #4]
 800d36c:	42a3      	cmp	r3, r4
 800d36e:	bf0c      	ite	eq
 800d370:	f8c8 2000 	streq.w	r2, [r8]
 800d374:	605a      	strne	r2, [r3, #4]
 800d376:	e7eb      	b.n	800d350 <_malloc_r+0xa8>
 800d378:	4623      	mov	r3, r4
 800d37a:	6864      	ldr	r4, [r4, #4]
 800d37c:	e7ae      	b.n	800d2dc <_malloc_r+0x34>
 800d37e:	463c      	mov	r4, r7
 800d380:	687f      	ldr	r7, [r7, #4]
 800d382:	e7b6      	b.n	800d2f2 <_malloc_r+0x4a>
 800d384:	461a      	mov	r2, r3
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	42a3      	cmp	r3, r4
 800d38a:	d1fb      	bne.n	800d384 <_malloc_r+0xdc>
 800d38c:	2300      	movs	r3, #0
 800d38e:	6053      	str	r3, [r2, #4]
 800d390:	e7de      	b.n	800d350 <_malloc_r+0xa8>
 800d392:	230c      	movs	r3, #12
 800d394:	6033      	str	r3, [r6, #0]
 800d396:	4630      	mov	r0, r6
 800d398:	f000 f80c 	bl	800d3b4 <__malloc_unlock>
 800d39c:	e794      	b.n	800d2c8 <_malloc_r+0x20>
 800d39e:	6005      	str	r5, [r0, #0]
 800d3a0:	e7d6      	b.n	800d350 <_malloc_r+0xa8>
 800d3a2:	bf00      	nop
 800d3a4:	20014b80 	.word	0x20014b80

0800d3a8 <__malloc_lock>:
 800d3a8:	4801      	ldr	r0, [pc, #4]	@ (800d3b0 <__malloc_lock+0x8>)
 800d3aa:	f7ff bf00 	b.w	800d1ae <__retarget_lock_acquire_recursive>
 800d3ae:	bf00      	nop
 800d3b0:	20014b78 	.word	0x20014b78

0800d3b4 <__malloc_unlock>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	@ (800d3bc <__malloc_unlock+0x8>)
 800d3b6:	f7ff befb 	b.w	800d1b0 <__retarget_lock_release_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	20014b78 	.word	0x20014b78

0800d3c0 <__ssputs_r>:
 800d3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3c4:	688e      	ldr	r6, [r1, #8]
 800d3c6:	461f      	mov	r7, r3
 800d3c8:	42be      	cmp	r6, r7
 800d3ca:	680b      	ldr	r3, [r1, #0]
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	4690      	mov	r8, r2
 800d3d2:	d82d      	bhi.n	800d430 <__ssputs_r+0x70>
 800d3d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d3dc:	d026      	beq.n	800d42c <__ssputs_r+0x6c>
 800d3de:	6965      	ldr	r5, [r4, #20]
 800d3e0:	6909      	ldr	r1, [r1, #16]
 800d3e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3e6:	eba3 0901 	sub.w	r9, r3, r1
 800d3ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3ee:	1c7b      	adds	r3, r7, #1
 800d3f0:	444b      	add	r3, r9
 800d3f2:	106d      	asrs	r5, r5, #1
 800d3f4:	429d      	cmp	r5, r3
 800d3f6:	bf38      	it	cc
 800d3f8:	461d      	movcc	r5, r3
 800d3fa:	0553      	lsls	r3, r2, #21
 800d3fc:	d527      	bpl.n	800d44e <__ssputs_r+0x8e>
 800d3fe:	4629      	mov	r1, r5
 800d400:	f7ff ff52 	bl	800d2a8 <_malloc_r>
 800d404:	4606      	mov	r6, r0
 800d406:	b360      	cbz	r0, 800d462 <__ssputs_r+0xa2>
 800d408:	6921      	ldr	r1, [r4, #16]
 800d40a:	464a      	mov	r2, r9
 800d40c:	f7ff fed1 	bl	800d1b2 <memcpy>
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d41a:	81a3      	strh	r3, [r4, #12]
 800d41c:	6126      	str	r6, [r4, #16]
 800d41e:	6165      	str	r5, [r4, #20]
 800d420:	444e      	add	r6, r9
 800d422:	eba5 0509 	sub.w	r5, r5, r9
 800d426:	6026      	str	r6, [r4, #0]
 800d428:	60a5      	str	r5, [r4, #8]
 800d42a:	463e      	mov	r6, r7
 800d42c:	42be      	cmp	r6, r7
 800d42e:	d900      	bls.n	800d432 <__ssputs_r+0x72>
 800d430:	463e      	mov	r6, r7
 800d432:	6820      	ldr	r0, [r4, #0]
 800d434:	4632      	mov	r2, r6
 800d436:	4641      	mov	r1, r8
 800d438:	f000 fcf8 	bl	800de2c <memmove>
 800d43c:	68a3      	ldr	r3, [r4, #8]
 800d43e:	1b9b      	subs	r3, r3, r6
 800d440:	60a3      	str	r3, [r4, #8]
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	4433      	add	r3, r6
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	2000      	movs	r0, #0
 800d44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d44e:	462a      	mov	r2, r5
 800d450:	f000 fd38 	bl	800dec4 <_realloc_r>
 800d454:	4606      	mov	r6, r0
 800d456:	2800      	cmp	r0, #0
 800d458:	d1e0      	bne.n	800d41c <__ssputs_r+0x5c>
 800d45a:	6921      	ldr	r1, [r4, #16]
 800d45c:	4650      	mov	r0, sl
 800d45e:	f7ff feb7 	bl	800d1d0 <_free_r>
 800d462:	230c      	movs	r3, #12
 800d464:	f8ca 3000 	str.w	r3, [sl]
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d474:	e7e9      	b.n	800d44a <__ssputs_r+0x8a>
	...

0800d478 <_svfiprintf_r>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	4698      	mov	r8, r3
 800d47e:	898b      	ldrh	r3, [r1, #12]
 800d480:	061b      	lsls	r3, r3, #24
 800d482:	b09d      	sub	sp, #116	@ 0x74
 800d484:	4607      	mov	r7, r0
 800d486:	460d      	mov	r5, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	d510      	bpl.n	800d4ae <_svfiprintf_r+0x36>
 800d48c:	690b      	ldr	r3, [r1, #16]
 800d48e:	b973      	cbnz	r3, 800d4ae <_svfiprintf_r+0x36>
 800d490:	2140      	movs	r1, #64	@ 0x40
 800d492:	f7ff ff09 	bl	800d2a8 <_malloc_r>
 800d496:	6028      	str	r0, [r5, #0]
 800d498:	6128      	str	r0, [r5, #16]
 800d49a:	b930      	cbnz	r0, 800d4aa <_svfiprintf_r+0x32>
 800d49c:	230c      	movs	r3, #12
 800d49e:	603b      	str	r3, [r7, #0]
 800d4a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4a4:	b01d      	add	sp, #116	@ 0x74
 800d4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4aa:	2340      	movs	r3, #64	@ 0x40
 800d4ac:	616b      	str	r3, [r5, #20]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4b2:	2320      	movs	r3, #32
 800d4b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4bc:	2330      	movs	r3, #48	@ 0x30
 800d4be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d65c <_svfiprintf_r+0x1e4>
 800d4c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4c6:	f04f 0901 	mov.w	r9, #1
 800d4ca:	4623      	mov	r3, r4
 800d4cc:	469a      	mov	sl, r3
 800d4ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4d2:	b10a      	cbz	r2, 800d4d8 <_svfiprintf_r+0x60>
 800d4d4:	2a25      	cmp	r2, #37	@ 0x25
 800d4d6:	d1f9      	bne.n	800d4cc <_svfiprintf_r+0x54>
 800d4d8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4dc:	d00b      	beq.n	800d4f6 <_svfiprintf_r+0x7e>
 800d4de:	465b      	mov	r3, fp
 800d4e0:	4622      	mov	r2, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	f7ff ff6b 	bl	800d3c0 <__ssputs_r>
 800d4ea:	3001      	adds	r0, #1
 800d4ec:	f000 80a7 	beq.w	800d63e <_svfiprintf_r+0x1c6>
 800d4f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4f2:	445a      	add	r2, fp
 800d4f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4f6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 809f 	beq.w	800d63e <_svfiprintf_r+0x1c6>
 800d500:	2300      	movs	r3, #0
 800d502:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d50a:	f10a 0a01 	add.w	sl, sl, #1
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	9307      	str	r3, [sp, #28]
 800d512:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d516:	931a      	str	r3, [sp, #104]	@ 0x68
 800d518:	4654      	mov	r4, sl
 800d51a:	2205      	movs	r2, #5
 800d51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d520:	484e      	ldr	r0, [pc, #312]	@ (800d65c <_svfiprintf_r+0x1e4>)
 800d522:	f7f2 fed5 	bl	80002d0 <memchr>
 800d526:	9a04      	ldr	r2, [sp, #16]
 800d528:	b9d8      	cbnz	r0, 800d562 <_svfiprintf_r+0xea>
 800d52a:	06d0      	lsls	r0, r2, #27
 800d52c:	bf44      	itt	mi
 800d52e:	2320      	movmi	r3, #32
 800d530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d534:	0711      	lsls	r1, r2, #28
 800d536:	bf44      	itt	mi
 800d538:	232b      	movmi	r3, #43	@ 0x2b
 800d53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d53e:	f89a 3000 	ldrb.w	r3, [sl]
 800d542:	2b2a      	cmp	r3, #42	@ 0x2a
 800d544:	d015      	beq.n	800d572 <_svfiprintf_r+0xfa>
 800d546:	9a07      	ldr	r2, [sp, #28]
 800d548:	4654      	mov	r4, sl
 800d54a:	2000      	movs	r0, #0
 800d54c:	f04f 0c0a 	mov.w	ip, #10
 800d550:	4621      	mov	r1, r4
 800d552:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d556:	3b30      	subs	r3, #48	@ 0x30
 800d558:	2b09      	cmp	r3, #9
 800d55a:	d94b      	bls.n	800d5f4 <_svfiprintf_r+0x17c>
 800d55c:	b1b0      	cbz	r0, 800d58c <_svfiprintf_r+0x114>
 800d55e:	9207      	str	r2, [sp, #28]
 800d560:	e014      	b.n	800d58c <_svfiprintf_r+0x114>
 800d562:	eba0 0308 	sub.w	r3, r0, r8
 800d566:	fa09 f303 	lsl.w	r3, r9, r3
 800d56a:	4313      	orrs	r3, r2
 800d56c:	9304      	str	r3, [sp, #16]
 800d56e:	46a2      	mov	sl, r4
 800d570:	e7d2      	b.n	800d518 <_svfiprintf_r+0xa0>
 800d572:	9b03      	ldr	r3, [sp, #12]
 800d574:	1d19      	adds	r1, r3, #4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	9103      	str	r1, [sp, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	bfbb      	ittet	lt
 800d57e:	425b      	neglt	r3, r3
 800d580:	f042 0202 	orrlt.w	r2, r2, #2
 800d584:	9307      	strge	r3, [sp, #28]
 800d586:	9307      	strlt	r3, [sp, #28]
 800d588:	bfb8      	it	lt
 800d58a:	9204      	strlt	r2, [sp, #16]
 800d58c:	7823      	ldrb	r3, [r4, #0]
 800d58e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d590:	d10a      	bne.n	800d5a8 <_svfiprintf_r+0x130>
 800d592:	7863      	ldrb	r3, [r4, #1]
 800d594:	2b2a      	cmp	r3, #42	@ 0x2a
 800d596:	d132      	bne.n	800d5fe <_svfiprintf_r+0x186>
 800d598:	9b03      	ldr	r3, [sp, #12]
 800d59a:	1d1a      	adds	r2, r3, #4
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	9203      	str	r2, [sp, #12]
 800d5a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5a4:	3402      	adds	r4, #2
 800d5a6:	9305      	str	r3, [sp, #20]
 800d5a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d66c <_svfiprintf_r+0x1f4>
 800d5ac:	7821      	ldrb	r1, [r4, #0]
 800d5ae:	2203      	movs	r2, #3
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	f7f2 fe8d 	bl	80002d0 <memchr>
 800d5b6:	b138      	cbz	r0, 800d5c8 <_svfiprintf_r+0x150>
 800d5b8:	9b04      	ldr	r3, [sp, #16]
 800d5ba:	eba0 000a 	sub.w	r0, r0, sl
 800d5be:	2240      	movs	r2, #64	@ 0x40
 800d5c0:	4082      	lsls	r2, r0
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	3401      	adds	r4, #1
 800d5c6:	9304      	str	r3, [sp, #16]
 800d5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5cc:	4824      	ldr	r0, [pc, #144]	@ (800d660 <_svfiprintf_r+0x1e8>)
 800d5ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5d2:	2206      	movs	r2, #6
 800d5d4:	f7f2 fe7c 	bl	80002d0 <memchr>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d036      	beq.n	800d64a <_svfiprintf_r+0x1d2>
 800d5dc:	4b21      	ldr	r3, [pc, #132]	@ (800d664 <_svfiprintf_r+0x1ec>)
 800d5de:	bb1b      	cbnz	r3, 800d628 <_svfiprintf_r+0x1b0>
 800d5e0:	9b03      	ldr	r3, [sp, #12]
 800d5e2:	3307      	adds	r3, #7
 800d5e4:	f023 0307 	bic.w	r3, r3, #7
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	9303      	str	r3, [sp, #12]
 800d5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5ee:	4433      	add	r3, r6
 800d5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f2:	e76a      	b.n	800d4ca <_svfiprintf_r+0x52>
 800d5f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	e7a8      	b.n	800d550 <_svfiprintf_r+0xd8>
 800d5fe:	2300      	movs	r3, #0
 800d600:	3401      	adds	r4, #1
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	4619      	mov	r1, r3
 800d606:	f04f 0c0a 	mov.w	ip, #10
 800d60a:	4620      	mov	r0, r4
 800d60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d610:	3a30      	subs	r2, #48	@ 0x30
 800d612:	2a09      	cmp	r2, #9
 800d614:	d903      	bls.n	800d61e <_svfiprintf_r+0x1a6>
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0c6      	beq.n	800d5a8 <_svfiprintf_r+0x130>
 800d61a:	9105      	str	r1, [sp, #20]
 800d61c:	e7c4      	b.n	800d5a8 <_svfiprintf_r+0x130>
 800d61e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d622:	4604      	mov	r4, r0
 800d624:	2301      	movs	r3, #1
 800d626:	e7f0      	b.n	800d60a <_svfiprintf_r+0x192>
 800d628:	ab03      	add	r3, sp, #12
 800d62a:	9300      	str	r3, [sp, #0]
 800d62c:	462a      	mov	r2, r5
 800d62e:	4b0e      	ldr	r3, [pc, #56]	@ (800d668 <_svfiprintf_r+0x1f0>)
 800d630:	a904      	add	r1, sp, #16
 800d632:	4638      	mov	r0, r7
 800d634:	f3af 8000 	nop.w
 800d638:	1c42      	adds	r2, r0, #1
 800d63a:	4606      	mov	r6, r0
 800d63c:	d1d6      	bne.n	800d5ec <_svfiprintf_r+0x174>
 800d63e:	89ab      	ldrh	r3, [r5, #12]
 800d640:	065b      	lsls	r3, r3, #25
 800d642:	f53f af2d 	bmi.w	800d4a0 <_svfiprintf_r+0x28>
 800d646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d648:	e72c      	b.n	800d4a4 <_svfiprintf_r+0x2c>
 800d64a:	ab03      	add	r3, sp, #12
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	462a      	mov	r2, r5
 800d650:	4b05      	ldr	r3, [pc, #20]	@ (800d668 <_svfiprintf_r+0x1f0>)
 800d652:	a904      	add	r1, sp, #16
 800d654:	4638      	mov	r0, r7
 800d656:	f000 f9bb 	bl	800d9d0 <_printf_i>
 800d65a:	e7ed      	b.n	800d638 <_svfiprintf_r+0x1c0>
 800d65c:	0800e506 	.word	0x0800e506
 800d660:	0800e510 	.word	0x0800e510
 800d664:	00000000 	.word	0x00000000
 800d668:	0800d3c1 	.word	0x0800d3c1
 800d66c:	0800e50c 	.word	0x0800e50c

0800d670 <__sfputc_r>:
 800d670:	6893      	ldr	r3, [r2, #8]
 800d672:	3b01      	subs	r3, #1
 800d674:	2b00      	cmp	r3, #0
 800d676:	b410      	push	{r4}
 800d678:	6093      	str	r3, [r2, #8]
 800d67a:	da08      	bge.n	800d68e <__sfputc_r+0x1e>
 800d67c:	6994      	ldr	r4, [r2, #24]
 800d67e:	42a3      	cmp	r3, r4
 800d680:	db01      	blt.n	800d686 <__sfputc_r+0x16>
 800d682:	290a      	cmp	r1, #10
 800d684:	d103      	bne.n	800d68e <__sfputc_r+0x1e>
 800d686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d68a:	f7ff bc8a 	b.w	800cfa2 <__swbuf_r>
 800d68e:	6813      	ldr	r3, [r2, #0]
 800d690:	1c58      	adds	r0, r3, #1
 800d692:	6010      	str	r0, [r2, #0]
 800d694:	7019      	strb	r1, [r3, #0]
 800d696:	4608      	mov	r0, r1
 800d698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d69c:	4770      	bx	lr

0800d69e <__sfputs_r>:
 800d69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a0:	4606      	mov	r6, r0
 800d6a2:	460f      	mov	r7, r1
 800d6a4:	4614      	mov	r4, r2
 800d6a6:	18d5      	adds	r5, r2, r3
 800d6a8:	42ac      	cmp	r4, r5
 800d6aa:	d101      	bne.n	800d6b0 <__sfputs_r+0x12>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e007      	b.n	800d6c0 <__sfputs_r+0x22>
 800d6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b4:	463a      	mov	r2, r7
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f7ff ffda 	bl	800d670 <__sfputc_r>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d1f3      	bne.n	800d6a8 <__sfputs_r+0xa>
 800d6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6c4 <_vfiprintf_r>:
 800d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	b09d      	sub	sp, #116	@ 0x74
 800d6cc:	4614      	mov	r4, r2
 800d6ce:	4698      	mov	r8, r3
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	b118      	cbz	r0, 800d6dc <_vfiprintf_r+0x18>
 800d6d4:	6a03      	ldr	r3, [r0, #32]
 800d6d6:	b90b      	cbnz	r3, 800d6dc <_vfiprintf_r+0x18>
 800d6d8:	f7ff fb5a 	bl	800cd90 <__sinit>
 800d6dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d6de:	07d9      	lsls	r1, r3, #31
 800d6e0:	d405      	bmi.n	800d6ee <_vfiprintf_r+0x2a>
 800d6e2:	89ab      	ldrh	r3, [r5, #12]
 800d6e4:	059a      	lsls	r2, r3, #22
 800d6e6:	d402      	bmi.n	800d6ee <_vfiprintf_r+0x2a>
 800d6e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6ea:	f7ff fd60 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800d6ee:	89ab      	ldrh	r3, [r5, #12]
 800d6f0:	071b      	lsls	r3, r3, #28
 800d6f2:	d501      	bpl.n	800d6f8 <_vfiprintf_r+0x34>
 800d6f4:	692b      	ldr	r3, [r5, #16]
 800d6f6:	b99b      	cbnz	r3, 800d720 <_vfiprintf_r+0x5c>
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7ff fc90 	bl	800d020 <__swsetup_r>
 800d700:	b170      	cbz	r0, 800d720 <_vfiprintf_r+0x5c>
 800d702:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d704:	07dc      	lsls	r4, r3, #31
 800d706:	d504      	bpl.n	800d712 <_vfiprintf_r+0x4e>
 800d708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d70c:	b01d      	add	sp, #116	@ 0x74
 800d70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d712:	89ab      	ldrh	r3, [r5, #12]
 800d714:	0598      	lsls	r0, r3, #22
 800d716:	d4f7      	bmi.n	800d708 <_vfiprintf_r+0x44>
 800d718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d71a:	f7ff fd49 	bl	800d1b0 <__retarget_lock_release_recursive>
 800d71e:	e7f3      	b.n	800d708 <_vfiprintf_r+0x44>
 800d720:	2300      	movs	r3, #0
 800d722:	9309      	str	r3, [sp, #36]	@ 0x24
 800d724:	2320      	movs	r3, #32
 800d726:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d72a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d72e:	2330      	movs	r3, #48	@ 0x30
 800d730:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d8e0 <_vfiprintf_r+0x21c>
 800d734:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d738:	f04f 0901 	mov.w	r9, #1
 800d73c:	4623      	mov	r3, r4
 800d73e:	469a      	mov	sl, r3
 800d740:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d744:	b10a      	cbz	r2, 800d74a <_vfiprintf_r+0x86>
 800d746:	2a25      	cmp	r2, #37	@ 0x25
 800d748:	d1f9      	bne.n	800d73e <_vfiprintf_r+0x7a>
 800d74a:	ebba 0b04 	subs.w	fp, sl, r4
 800d74e:	d00b      	beq.n	800d768 <_vfiprintf_r+0xa4>
 800d750:	465b      	mov	r3, fp
 800d752:	4622      	mov	r2, r4
 800d754:	4629      	mov	r1, r5
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ffa1 	bl	800d69e <__sfputs_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	f000 80a7 	beq.w	800d8b0 <_vfiprintf_r+0x1ec>
 800d762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d764:	445a      	add	r2, fp
 800d766:	9209      	str	r2, [sp, #36]	@ 0x24
 800d768:	f89a 3000 	ldrb.w	r3, [sl]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f000 809f 	beq.w	800d8b0 <_vfiprintf_r+0x1ec>
 800d772:	2300      	movs	r3, #0
 800d774:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d77c:	f10a 0a01 	add.w	sl, sl, #1
 800d780:	9304      	str	r3, [sp, #16]
 800d782:	9307      	str	r3, [sp, #28]
 800d784:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d788:	931a      	str	r3, [sp, #104]	@ 0x68
 800d78a:	4654      	mov	r4, sl
 800d78c:	2205      	movs	r2, #5
 800d78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d792:	4853      	ldr	r0, [pc, #332]	@ (800d8e0 <_vfiprintf_r+0x21c>)
 800d794:	f7f2 fd9c 	bl	80002d0 <memchr>
 800d798:	9a04      	ldr	r2, [sp, #16]
 800d79a:	b9d8      	cbnz	r0, 800d7d4 <_vfiprintf_r+0x110>
 800d79c:	06d1      	lsls	r1, r2, #27
 800d79e:	bf44      	itt	mi
 800d7a0:	2320      	movmi	r3, #32
 800d7a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7a6:	0713      	lsls	r3, r2, #28
 800d7a8:	bf44      	itt	mi
 800d7aa:	232b      	movmi	r3, #43	@ 0x2b
 800d7ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b6:	d015      	beq.n	800d7e4 <_vfiprintf_r+0x120>
 800d7b8:	9a07      	ldr	r2, [sp, #28]
 800d7ba:	4654      	mov	r4, sl
 800d7bc:	2000      	movs	r0, #0
 800d7be:	f04f 0c0a 	mov.w	ip, #10
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7c8:	3b30      	subs	r3, #48	@ 0x30
 800d7ca:	2b09      	cmp	r3, #9
 800d7cc:	d94b      	bls.n	800d866 <_vfiprintf_r+0x1a2>
 800d7ce:	b1b0      	cbz	r0, 800d7fe <_vfiprintf_r+0x13a>
 800d7d0:	9207      	str	r2, [sp, #28]
 800d7d2:	e014      	b.n	800d7fe <_vfiprintf_r+0x13a>
 800d7d4:	eba0 0308 	sub.w	r3, r0, r8
 800d7d8:	fa09 f303 	lsl.w	r3, r9, r3
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	9304      	str	r3, [sp, #16]
 800d7e0:	46a2      	mov	sl, r4
 800d7e2:	e7d2      	b.n	800d78a <_vfiprintf_r+0xc6>
 800d7e4:	9b03      	ldr	r3, [sp, #12]
 800d7e6:	1d19      	adds	r1, r3, #4
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	9103      	str	r1, [sp, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	bfbb      	ittet	lt
 800d7f0:	425b      	neglt	r3, r3
 800d7f2:	f042 0202 	orrlt.w	r2, r2, #2
 800d7f6:	9307      	strge	r3, [sp, #28]
 800d7f8:	9307      	strlt	r3, [sp, #28]
 800d7fa:	bfb8      	it	lt
 800d7fc:	9204      	strlt	r2, [sp, #16]
 800d7fe:	7823      	ldrb	r3, [r4, #0]
 800d800:	2b2e      	cmp	r3, #46	@ 0x2e
 800d802:	d10a      	bne.n	800d81a <_vfiprintf_r+0x156>
 800d804:	7863      	ldrb	r3, [r4, #1]
 800d806:	2b2a      	cmp	r3, #42	@ 0x2a
 800d808:	d132      	bne.n	800d870 <_vfiprintf_r+0x1ac>
 800d80a:	9b03      	ldr	r3, [sp, #12]
 800d80c:	1d1a      	adds	r2, r3, #4
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	9203      	str	r2, [sp, #12]
 800d812:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d816:	3402      	adds	r4, #2
 800d818:	9305      	str	r3, [sp, #20]
 800d81a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d8f0 <_vfiprintf_r+0x22c>
 800d81e:	7821      	ldrb	r1, [r4, #0]
 800d820:	2203      	movs	r2, #3
 800d822:	4650      	mov	r0, sl
 800d824:	f7f2 fd54 	bl	80002d0 <memchr>
 800d828:	b138      	cbz	r0, 800d83a <_vfiprintf_r+0x176>
 800d82a:	9b04      	ldr	r3, [sp, #16]
 800d82c:	eba0 000a 	sub.w	r0, r0, sl
 800d830:	2240      	movs	r2, #64	@ 0x40
 800d832:	4082      	lsls	r2, r0
 800d834:	4313      	orrs	r3, r2
 800d836:	3401      	adds	r4, #1
 800d838:	9304      	str	r3, [sp, #16]
 800d83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83e:	4829      	ldr	r0, [pc, #164]	@ (800d8e4 <_vfiprintf_r+0x220>)
 800d840:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d844:	2206      	movs	r2, #6
 800d846:	f7f2 fd43 	bl	80002d0 <memchr>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d03f      	beq.n	800d8ce <_vfiprintf_r+0x20a>
 800d84e:	4b26      	ldr	r3, [pc, #152]	@ (800d8e8 <_vfiprintf_r+0x224>)
 800d850:	bb1b      	cbnz	r3, 800d89a <_vfiprintf_r+0x1d6>
 800d852:	9b03      	ldr	r3, [sp, #12]
 800d854:	3307      	adds	r3, #7
 800d856:	f023 0307 	bic.w	r3, r3, #7
 800d85a:	3308      	adds	r3, #8
 800d85c:	9303      	str	r3, [sp, #12]
 800d85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d860:	443b      	add	r3, r7
 800d862:	9309      	str	r3, [sp, #36]	@ 0x24
 800d864:	e76a      	b.n	800d73c <_vfiprintf_r+0x78>
 800d866:	fb0c 3202 	mla	r2, ip, r2, r3
 800d86a:	460c      	mov	r4, r1
 800d86c:	2001      	movs	r0, #1
 800d86e:	e7a8      	b.n	800d7c2 <_vfiprintf_r+0xfe>
 800d870:	2300      	movs	r3, #0
 800d872:	3401      	adds	r4, #1
 800d874:	9305      	str	r3, [sp, #20]
 800d876:	4619      	mov	r1, r3
 800d878:	f04f 0c0a 	mov.w	ip, #10
 800d87c:	4620      	mov	r0, r4
 800d87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d882:	3a30      	subs	r2, #48	@ 0x30
 800d884:	2a09      	cmp	r2, #9
 800d886:	d903      	bls.n	800d890 <_vfiprintf_r+0x1cc>
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0c6      	beq.n	800d81a <_vfiprintf_r+0x156>
 800d88c:	9105      	str	r1, [sp, #20]
 800d88e:	e7c4      	b.n	800d81a <_vfiprintf_r+0x156>
 800d890:	fb0c 2101 	mla	r1, ip, r1, r2
 800d894:	4604      	mov	r4, r0
 800d896:	2301      	movs	r3, #1
 800d898:	e7f0      	b.n	800d87c <_vfiprintf_r+0x1b8>
 800d89a:	ab03      	add	r3, sp, #12
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	462a      	mov	r2, r5
 800d8a0:	4b12      	ldr	r3, [pc, #72]	@ (800d8ec <_vfiprintf_r+0x228>)
 800d8a2:	a904      	add	r1, sp, #16
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f3af 8000 	nop.w
 800d8aa:	4607      	mov	r7, r0
 800d8ac:	1c78      	adds	r0, r7, #1
 800d8ae:	d1d6      	bne.n	800d85e <_vfiprintf_r+0x19a>
 800d8b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8b2:	07d9      	lsls	r1, r3, #31
 800d8b4:	d405      	bmi.n	800d8c2 <_vfiprintf_r+0x1fe>
 800d8b6:	89ab      	ldrh	r3, [r5, #12]
 800d8b8:	059a      	lsls	r2, r3, #22
 800d8ba:	d402      	bmi.n	800d8c2 <_vfiprintf_r+0x1fe>
 800d8bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8be:	f7ff fc77 	bl	800d1b0 <__retarget_lock_release_recursive>
 800d8c2:	89ab      	ldrh	r3, [r5, #12]
 800d8c4:	065b      	lsls	r3, r3, #25
 800d8c6:	f53f af1f 	bmi.w	800d708 <_vfiprintf_r+0x44>
 800d8ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8cc:	e71e      	b.n	800d70c <_vfiprintf_r+0x48>
 800d8ce:	ab03      	add	r3, sp, #12
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	4b05      	ldr	r3, [pc, #20]	@ (800d8ec <_vfiprintf_r+0x228>)
 800d8d6:	a904      	add	r1, sp, #16
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f000 f879 	bl	800d9d0 <_printf_i>
 800d8de:	e7e4      	b.n	800d8aa <_vfiprintf_r+0x1e6>
 800d8e0:	0800e506 	.word	0x0800e506
 800d8e4:	0800e510 	.word	0x0800e510
 800d8e8:	00000000 	.word	0x00000000
 800d8ec:	0800d69f 	.word	0x0800d69f
 800d8f0:	0800e50c 	.word	0x0800e50c

0800d8f4 <_printf_common>:
 800d8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f8:	4616      	mov	r6, r2
 800d8fa:	4698      	mov	r8, r3
 800d8fc:	688a      	ldr	r2, [r1, #8]
 800d8fe:	690b      	ldr	r3, [r1, #16]
 800d900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d904:	4293      	cmp	r3, r2
 800d906:	bfb8      	it	lt
 800d908:	4613      	movlt	r3, r2
 800d90a:	6033      	str	r3, [r6, #0]
 800d90c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d910:	4607      	mov	r7, r0
 800d912:	460c      	mov	r4, r1
 800d914:	b10a      	cbz	r2, 800d91a <_printf_common+0x26>
 800d916:	3301      	adds	r3, #1
 800d918:	6033      	str	r3, [r6, #0]
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	0699      	lsls	r1, r3, #26
 800d91e:	bf42      	ittt	mi
 800d920:	6833      	ldrmi	r3, [r6, #0]
 800d922:	3302      	addmi	r3, #2
 800d924:	6033      	strmi	r3, [r6, #0]
 800d926:	6825      	ldr	r5, [r4, #0]
 800d928:	f015 0506 	ands.w	r5, r5, #6
 800d92c:	d106      	bne.n	800d93c <_printf_common+0x48>
 800d92e:	f104 0a19 	add.w	sl, r4, #25
 800d932:	68e3      	ldr	r3, [r4, #12]
 800d934:	6832      	ldr	r2, [r6, #0]
 800d936:	1a9b      	subs	r3, r3, r2
 800d938:	42ab      	cmp	r3, r5
 800d93a:	dc26      	bgt.n	800d98a <_printf_common+0x96>
 800d93c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	3b00      	subs	r3, #0
 800d944:	bf18      	it	ne
 800d946:	2301      	movne	r3, #1
 800d948:	0692      	lsls	r2, r2, #26
 800d94a:	d42b      	bmi.n	800d9a4 <_printf_common+0xb0>
 800d94c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d950:	4641      	mov	r1, r8
 800d952:	4638      	mov	r0, r7
 800d954:	47c8      	blx	r9
 800d956:	3001      	adds	r0, #1
 800d958:	d01e      	beq.n	800d998 <_printf_common+0xa4>
 800d95a:	6823      	ldr	r3, [r4, #0]
 800d95c:	6922      	ldr	r2, [r4, #16]
 800d95e:	f003 0306 	and.w	r3, r3, #6
 800d962:	2b04      	cmp	r3, #4
 800d964:	bf02      	ittt	eq
 800d966:	68e5      	ldreq	r5, [r4, #12]
 800d968:	6833      	ldreq	r3, [r6, #0]
 800d96a:	1aed      	subeq	r5, r5, r3
 800d96c:	68a3      	ldr	r3, [r4, #8]
 800d96e:	bf0c      	ite	eq
 800d970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d974:	2500      	movne	r5, #0
 800d976:	4293      	cmp	r3, r2
 800d978:	bfc4      	itt	gt
 800d97a:	1a9b      	subgt	r3, r3, r2
 800d97c:	18ed      	addgt	r5, r5, r3
 800d97e:	2600      	movs	r6, #0
 800d980:	341a      	adds	r4, #26
 800d982:	42b5      	cmp	r5, r6
 800d984:	d11a      	bne.n	800d9bc <_printf_common+0xc8>
 800d986:	2000      	movs	r0, #0
 800d988:	e008      	b.n	800d99c <_printf_common+0xa8>
 800d98a:	2301      	movs	r3, #1
 800d98c:	4652      	mov	r2, sl
 800d98e:	4641      	mov	r1, r8
 800d990:	4638      	mov	r0, r7
 800d992:	47c8      	blx	r9
 800d994:	3001      	adds	r0, #1
 800d996:	d103      	bne.n	800d9a0 <_printf_common+0xac>
 800d998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	e7c6      	b.n	800d932 <_printf_common+0x3e>
 800d9a4:	18e1      	adds	r1, r4, r3
 800d9a6:	1c5a      	adds	r2, r3, #1
 800d9a8:	2030      	movs	r0, #48	@ 0x30
 800d9aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9ae:	4422      	add	r2, r4
 800d9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9b8:	3302      	adds	r3, #2
 800d9ba:	e7c7      	b.n	800d94c <_printf_common+0x58>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4641      	mov	r1, r8
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	47c8      	blx	r9
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	d0e6      	beq.n	800d998 <_printf_common+0xa4>
 800d9ca:	3601      	adds	r6, #1
 800d9cc:	e7d9      	b.n	800d982 <_printf_common+0x8e>
	...

0800d9d0 <_printf_i>:
 800d9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d4:	7e0f      	ldrb	r7, [r1, #24]
 800d9d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9d8:	2f78      	cmp	r7, #120	@ 0x78
 800d9da:	4691      	mov	r9, r2
 800d9dc:	4680      	mov	r8, r0
 800d9de:	460c      	mov	r4, r1
 800d9e0:	469a      	mov	sl, r3
 800d9e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9e6:	d807      	bhi.n	800d9f8 <_printf_i+0x28>
 800d9e8:	2f62      	cmp	r7, #98	@ 0x62
 800d9ea:	d80a      	bhi.n	800da02 <_printf_i+0x32>
 800d9ec:	2f00      	cmp	r7, #0
 800d9ee:	f000 80d2 	beq.w	800db96 <_printf_i+0x1c6>
 800d9f2:	2f58      	cmp	r7, #88	@ 0x58
 800d9f4:	f000 80b9 	beq.w	800db6a <_printf_i+0x19a>
 800d9f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da00:	e03a      	b.n	800da78 <_printf_i+0xa8>
 800da02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da06:	2b15      	cmp	r3, #21
 800da08:	d8f6      	bhi.n	800d9f8 <_printf_i+0x28>
 800da0a:	a101      	add	r1, pc, #4	@ (adr r1, 800da10 <_printf_i+0x40>)
 800da0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da10:	0800da69 	.word	0x0800da69
 800da14:	0800da7d 	.word	0x0800da7d
 800da18:	0800d9f9 	.word	0x0800d9f9
 800da1c:	0800d9f9 	.word	0x0800d9f9
 800da20:	0800d9f9 	.word	0x0800d9f9
 800da24:	0800d9f9 	.word	0x0800d9f9
 800da28:	0800da7d 	.word	0x0800da7d
 800da2c:	0800d9f9 	.word	0x0800d9f9
 800da30:	0800d9f9 	.word	0x0800d9f9
 800da34:	0800d9f9 	.word	0x0800d9f9
 800da38:	0800d9f9 	.word	0x0800d9f9
 800da3c:	0800db7d 	.word	0x0800db7d
 800da40:	0800daa7 	.word	0x0800daa7
 800da44:	0800db37 	.word	0x0800db37
 800da48:	0800d9f9 	.word	0x0800d9f9
 800da4c:	0800d9f9 	.word	0x0800d9f9
 800da50:	0800db9f 	.word	0x0800db9f
 800da54:	0800d9f9 	.word	0x0800d9f9
 800da58:	0800daa7 	.word	0x0800daa7
 800da5c:	0800d9f9 	.word	0x0800d9f9
 800da60:	0800d9f9 	.word	0x0800d9f9
 800da64:	0800db3f 	.word	0x0800db3f
 800da68:	6833      	ldr	r3, [r6, #0]
 800da6a:	1d1a      	adds	r2, r3, #4
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6032      	str	r2, [r6, #0]
 800da70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da78:	2301      	movs	r3, #1
 800da7a:	e09d      	b.n	800dbb8 <_printf_i+0x1e8>
 800da7c:	6833      	ldr	r3, [r6, #0]
 800da7e:	6820      	ldr	r0, [r4, #0]
 800da80:	1d19      	adds	r1, r3, #4
 800da82:	6031      	str	r1, [r6, #0]
 800da84:	0606      	lsls	r6, r0, #24
 800da86:	d501      	bpl.n	800da8c <_printf_i+0xbc>
 800da88:	681d      	ldr	r5, [r3, #0]
 800da8a:	e003      	b.n	800da94 <_printf_i+0xc4>
 800da8c:	0645      	lsls	r5, r0, #25
 800da8e:	d5fb      	bpl.n	800da88 <_printf_i+0xb8>
 800da90:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da94:	2d00      	cmp	r5, #0
 800da96:	da03      	bge.n	800daa0 <_printf_i+0xd0>
 800da98:	232d      	movs	r3, #45	@ 0x2d
 800da9a:	426d      	negs	r5, r5
 800da9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daa0:	4859      	ldr	r0, [pc, #356]	@ (800dc08 <_printf_i+0x238>)
 800daa2:	230a      	movs	r3, #10
 800daa4:	e011      	b.n	800daca <_printf_i+0xfa>
 800daa6:	6821      	ldr	r1, [r4, #0]
 800daa8:	6833      	ldr	r3, [r6, #0]
 800daaa:	0608      	lsls	r0, r1, #24
 800daac:	f853 5b04 	ldr.w	r5, [r3], #4
 800dab0:	d402      	bmi.n	800dab8 <_printf_i+0xe8>
 800dab2:	0649      	lsls	r1, r1, #25
 800dab4:	bf48      	it	mi
 800dab6:	b2ad      	uxthmi	r5, r5
 800dab8:	2f6f      	cmp	r7, #111	@ 0x6f
 800daba:	4853      	ldr	r0, [pc, #332]	@ (800dc08 <_printf_i+0x238>)
 800dabc:	6033      	str	r3, [r6, #0]
 800dabe:	bf14      	ite	ne
 800dac0:	230a      	movne	r3, #10
 800dac2:	2308      	moveq	r3, #8
 800dac4:	2100      	movs	r1, #0
 800dac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800daca:	6866      	ldr	r6, [r4, #4]
 800dacc:	60a6      	str	r6, [r4, #8]
 800dace:	2e00      	cmp	r6, #0
 800dad0:	bfa2      	ittt	ge
 800dad2:	6821      	ldrge	r1, [r4, #0]
 800dad4:	f021 0104 	bicge.w	r1, r1, #4
 800dad8:	6021      	strge	r1, [r4, #0]
 800dada:	b90d      	cbnz	r5, 800dae0 <_printf_i+0x110>
 800dadc:	2e00      	cmp	r6, #0
 800dade:	d04b      	beq.n	800db78 <_printf_i+0x1a8>
 800dae0:	4616      	mov	r6, r2
 800dae2:	fbb5 f1f3 	udiv	r1, r5, r3
 800dae6:	fb03 5711 	mls	r7, r3, r1, r5
 800daea:	5dc7      	ldrb	r7, [r0, r7]
 800daec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800daf0:	462f      	mov	r7, r5
 800daf2:	42bb      	cmp	r3, r7
 800daf4:	460d      	mov	r5, r1
 800daf6:	d9f4      	bls.n	800dae2 <_printf_i+0x112>
 800daf8:	2b08      	cmp	r3, #8
 800dafa:	d10b      	bne.n	800db14 <_printf_i+0x144>
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	07df      	lsls	r7, r3, #31
 800db00:	d508      	bpl.n	800db14 <_printf_i+0x144>
 800db02:	6923      	ldr	r3, [r4, #16]
 800db04:	6861      	ldr	r1, [r4, #4]
 800db06:	4299      	cmp	r1, r3
 800db08:	bfde      	ittt	le
 800db0a:	2330      	movle	r3, #48	@ 0x30
 800db0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800db14:	1b92      	subs	r2, r2, r6
 800db16:	6122      	str	r2, [r4, #16]
 800db18:	f8cd a000 	str.w	sl, [sp]
 800db1c:	464b      	mov	r3, r9
 800db1e:	aa03      	add	r2, sp, #12
 800db20:	4621      	mov	r1, r4
 800db22:	4640      	mov	r0, r8
 800db24:	f7ff fee6 	bl	800d8f4 <_printf_common>
 800db28:	3001      	adds	r0, #1
 800db2a:	d14a      	bne.n	800dbc2 <_printf_i+0x1f2>
 800db2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db30:	b004      	add	sp, #16
 800db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	f043 0320 	orr.w	r3, r3, #32
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	4833      	ldr	r0, [pc, #204]	@ (800dc0c <_printf_i+0x23c>)
 800db40:	2778      	movs	r7, #120	@ 0x78
 800db42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	6831      	ldr	r1, [r6, #0]
 800db4a:	061f      	lsls	r7, r3, #24
 800db4c:	f851 5b04 	ldr.w	r5, [r1], #4
 800db50:	d402      	bmi.n	800db58 <_printf_i+0x188>
 800db52:	065f      	lsls	r7, r3, #25
 800db54:	bf48      	it	mi
 800db56:	b2ad      	uxthmi	r5, r5
 800db58:	6031      	str	r1, [r6, #0]
 800db5a:	07d9      	lsls	r1, r3, #31
 800db5c:	bf44      	itt	mi
 800db5e:	f043 0320 	orrmi.w	r3, r3, #32
 800db62:	6023      	strmi	r3, [r4, #0]
 800db64:	b11d      	cbz	r5, 800db6e <_printf_i+0x19e>
 800db66:	2310      	movs	r3, #16
 800db68:	e7ac      	b.n	800dac4 <_printf_i+0xf4>
 800db6a:	4827      	ldr	r0, [pc, #156]	@ (800dc08 <_printf_i+0x238>)
 800db6c:	e7e9      	b.n	800db42 <_printf_i+0x172>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	f023 0320 	bic.w	r3, r3, #32
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	e7f6      	b.n	800db66 <_printf_i+0x196>
 800db78:	4616      	mov	r6, r2
 800db7a:	e7bd      	b.n	800daf8 <_printf_i+0x128>
 800db7c:	6833      	ldr	r3, [r6, #0]
 800db7e:	6825      	ldr	r5, [r4, #0]
 800db80:	6961      	ldr	r1, [r4, #20]
 800db82:	1d18      	adds	r0, r3, #4
 800db84:	6030      	str	r0, [r6, #0]
 800db86:	062e      	lsls	r6, r5, #24
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	d501      	bpl.n	800db90 <_printf_i+0x1c0>
 800db8c:	6019      	str	r1, [r3, #0]
 800db8e:	e002      	b.n	800db96 <_printf_i+0x1c6>
 800db90:	0668      	lsls	r0, r5, #25
 800db92:	d5fb      	bpl.n	800db8c <_printf_i+0x1bc>
 800db94:	8019      	strh	r1, [r3, #0]
 800db96:	2300      	movs	r3, #0
 800db98:	6123      	str	r3, [r4, #16]
 800db9a:	4616      	mov	r6, r2
 800db9c:	e7bc      	b.n	800db18 <_printf_i+0x148>
 800db9e:	6833      	ldr	r3, [r6, #0]
 800dba0:	1d1a      	adds	r2, r3, #4
 800dba2:	6032      	str	r2, [r6, #0]
 800dba4:	681e      	ldr	r6, [r3, #0]
 800dba6:	6862      	ldr	r2, [r4, #4]
 800dba8:	2100      	movs	r1, #0
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7f2 fb90 	bl	80002d0 <memchr>
 800dbb0:	b108      	cbz	r0, 800dbb6 <_printf_i+0x1e6>
 800dbb2:	1b80      	subs	r0, r0, r6
 800dbb4:	6060      	str	r0, [r4, #4]
 800dbb6:	6863      	ldr	r3, [r4, #4]
 800dbb8:	6123      	str	r3, [r4, #16]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbc0:	e7aa      	b.n	800db18 <_printf_i+0x148>
 800dbc2:	6923      	ldr	r3, [r4, #16]
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	4640      	mov	r0, r8
 800dbca:	47d0      	blx	sl
 800dbcc:	3001      	adds	r0, #1
 800dbce:	d0ad      	beq.n	800db2c <_printf_i+0x15c>
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	079b      	lsls	r3, r3, #30
 800dbd4:	d413      	bmi.n	800dbfe <_printf_i+0x22e>
 800dbd6:	68e0      	ldr	r0, [r4, #12]
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	4298      	cmp	r0, r3
 800dbdc:	bfb8      	it	lt
 800dbde:	4618      	movlt	r0, r3
 800dbe0:	e7a6      	b.n	800db30 <_printf_i+0x160>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	4640      	mov	r0, r8
 800dbea:	47d0      	blx	sl
 800dbec:	3001      	adds	r0, #1
 800dbee:	d09d      	beq.n	800db2c <_printf_i+0x15c>
 800dbf0:	3501      	adds	r5, #1
 800dbf2:	68e3      	ldr	r3, [r4, #12]
 800dbf4:	9903      	ldr	r1, [sp, #12]
 800dbf6:	1a5b      	subs	r3, r3, r1
 800dbf8:	42ab      	cmp	r3, r5
 800dbfa:	dcf2      	bgt.n	800dbe2 <_printf_i+0x212>
 800dbfc:	e7eb      	b.n	800dbd6 <_printf_i+0x206>
 800dbfe:	2500      	movs	r5, #0
 800dc00:	f104 0619 	add.w	r6, r4, #25
 800dc04:	e7f5      	b.n	800dbf2 <_printf_i+0x222>
 800dc06:	bf00      	nop
 800dc08:	0800e517 	.word	0x0800e517
 800dc0c:	0800e528 	.word	0x0800e528

0800dc10 <__sflush_r>:
 800dc10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc18:	0716      	lsls	r6, r2, #28
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	d454      	bmi.n	800dcca <__sflush_r+0xba>
 800dc20:	684b      	ldr	r3, [r1, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	dc02      	bgt.n	800dc2c <__sflush_r+0x1c>
 800dc26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dd48      	ble.n	800dcbe <__sflush_r+0xae>
 800dc2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc2e:	2e00      	cmp	r6, #0
 800dc30:	d045      	beq.n	800dcbe <__sflush_r+0xae>
 800dc32:	2300      	movs	r3, #0
 800dc34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc38:	682f      	ldr	r7, [r5, #0]
 800dc3a:	6a21      	ldr	r1, [r4, #32]
 800dc3c:	602b      	str	r3, [r5, #0]
 800dc3e:	d030      	beq.n	800dca2 <__sflush_r+0x92>
 800dc40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	0759      	lsls	r1, r3, #29
 800dc46:	d505      	bpl.n	800dc54 <__sflush_r+0x44>
 800dc48:	6863      	ldr	r3, [r4, #4]
 800dc4a:	1ad2      	subs	r2, r2, r3
 800dc4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc4e:	b10b      	cbz	r3, 800dc54 <__sflush_r+0x44>
 800dc50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc52:	1ad2      	subs	r2, r2, r3
 800dc54:	2300      	movs	r3, #0
 800dc56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc58:	6a21      	ldr	r1, [r4, #32]
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b0      	blx	r6
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	89a3      	ldrh	r3, [r4, #12]
 800dc62:	d106      	bne.n	800dc72 <__sflush_r+0x62>
 800dc64:	6829      	ldr	r1, [r5, #0]
 800dc66:	291d      	cmp	r1, #29
 800dc68:	d82b      	bhi.n	800dcc2 <__sflush_r+0xb2>
 800dc6a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd14 <__sflush_r+0x104>)
 800dc6c:	410a      	asrs	r2, r1
 800dc6e:	07d6      	lsls	r6, r2, #31
 800dc70:	d427      	bmi.n	800dcc2 <__sflush_r+0xb2>
 800dc72:	2200      	movs	r2, #0
 800dc74:	6062      	str	r2, [r4, #4]
 800dc76:	04d9      	lsls	r1, r3, #19
 800dc78:	6922      	ldr	r2, [r4, #16]
 800dc7a:	6022      	str	r2, [r4, #0]
 800dc7c:	d504      	bpl.n	800dc88 <__sflush_r+0x78>
 800dc7e:	1c42      	adds	r2, r0, #1
 800dc80:	d101      	bne.n	800dc86 <__sflush_r+0x76>
 800dc82:	682b      	ldr	r3, [r5, #0]
 800dc84:	b903      	cbnz	r3, 800dc88 <__sflush_r+0x78>
 800dc86:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc8a:	602f      	str	r7, [r5, #0]
 800dc8c:	b1b9      	cbz	r1, 800dcbe <__sflush_r+0xae>
 800dc8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc92:	4299      	cmp	r1, r3
 800dc94:	d002      	beq.n	800dc9c <__sflush_r+0x8c>
 800dc96:	4628      	mov	r0, r5
 800dc98:	f7ff fa9a 	bl	800d1d0 <_free_r>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800dca0:	e00d      	b.n	800dcbe <__sflush_r+0xae>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4628      	mov	r0, r5
 800dca6:	47b0      	blx	r6
 800dca8:	4602      	mov	r2, r0
 800dcaa:	1c50      	adds	r0, r2, #1
 800dcac:	d1c9      	bne.n	800dc42 <__sflush_r+0x32>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d0c6      	beq.n	800dc42 <__sflush_r+0x32>
 800dcb4:	2b1d      	cmp	r3, #29
 800dcb6:	d001      	beq.n	800dcbc <__sflush_r+0xac>
 800dcb8:	2b16      	cmp	r3, #22
 800dcba:	d11e      	bne.n	800dcfa <__sflush_r+0xea>
 800dcbc:	602f      	str	r7, [r5, #0]
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	e022      	b.n	800dd08 <__sflush_r+0xf8>
 800dcc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	e01b      	b.n	800dd02 <__sflush_r+0xf2>
 800dcca:	690f      	ldr	r7, [r1, #16]
 800dccc:	2f00      	cmp	r7, #0
 800dcce:	d0f6      	beq.n	800dcbe <__sflush_r+0xae>
 800dcd0:	0793      	lsls	r3, r2, #30
 800dcd2:	680e      	ldr	r6, [r1, #0]
 800dcd4:	bf08      	it	eq
 800dcd6:	694b      	ldreq	r3, [r1, #20]
 800dcd8:	600f      	str	r7, [r1, #0]
 800dcda:	bf18      	it	ne
 800dcdc:	2300      	movne	r3, #0
 800dcde:	eba6 0807 	sub.w	r8, r6, r7
 800dce2:	608b      	str	r3, [r1, #8]
 800dce4:	f1b8 0f00 	cmp.w	r8, #0
 800dce8:	dde9      	ble.n	800dcbe <__sflush_r+0xae>
 800dcea:	6a21      	ldr	r1, [r4, #32]
 800dcec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcee:	4643      	mov	r3, r8
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	47b0      	blx	r6
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	dc08      	bgt.n	800dd0c <__sflush_r+0xfc>
 800dcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd02:	81a3      	strh	r3, [r4, #12]
 800dd04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	4407      	add	r7, r0
 800dd0e:	eba8 0800 	sub.w	r8, r8, r0
 800dd12:	e7e7      	b.n	800dce4 <__sflush_r+0xd4>
 800dd14:	dfbffffe 	.word	0xdfbffffe

0800dd18 <_fflush_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	690b      	ldr	r3, [r1, #16]
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	460c      	mov	r4, r1
 800dd20:	b913      	cbnz	r3, 800dd28 <_fflush_r+0x10>
 800dd22:	2500      	movs	r5, #0
 800dd24:	4628      	mov	r0, r5
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	b118      	cbz	r0, 800dd32 <_fflush_r+0x1a>
 800dd2a:	6a03      	ldr	r3, [r0, #32]
 800dd2c:	b90b      	cbnz	r3, 800dd32 <_fflush_r+0x1a>
 800dd2e:	f7ff f82f 	bl	800cd90 <__sinit>
 800dd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d0f3      	beq.n	800dd22 <_fflush_r+0xa>
 800dd3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd3c:	07d0      	lsls	r0, r2, #31
 800dd3e:	d404      	bmi.n	800dd4a <_fflush_r+0x32>
 800dd40:	0599      	lsls	r1, r3, #22
 800dd42:	d402      	bmi.n	800dd4a <_fflush_r+0x32>
 800dd44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd46:	f7ff fa32 	bl	800d1ae <__retarget_lock_acquire_recursive>
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	f7ff ff5f 	bl	800dc10 <__sflush_r>
 800dd52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd54:	07da      	lsls	r2, r3, #31
 800dd56:	4605      	mov	r5, r0
 800dd58:	d4e4      	bmi.n	800dd24 <_fflush_r+0xc>
 800dd5a:	89a3      	ldrh	r3, [r4, #12]
 800dd5c:	059b      	lsls	r3, r3, #22
 800dd5e:	d4e1      	bmi.n	800dd24 <_fflush_r+0xc>
 800dd60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd62:	f7ff fa25 	bl	800d1b0 <__retarget_lock_release_recursive>
 800dd66:	e7dd      	b.n	800dd24 <_fflush_r+0xc>

0800dd68 <__swhatbuf_r>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	460c      	mov	r4, r1
 800dd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd70:	2900      	cmp	r1, #0
 800dd72:	b096      	sub	sp, #88	@ 0x58
 800dd74:	4615      	mov	r5, r2
 800dd76:	461e      	mov	r6, r3
 800dd78:	da0d      	bge.n	800dd96 <__swhatbuf_r+0x2e>
 800dd7a:	89a3      	ldrh	r3, [r4, #12]
 800dd7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd80:	f04f 0100 	mov.w	r1, #0
 800dd84:	bf14      	ite	ne
 800dd86:	2340      	movne	r3, #64	@ 0x40
 800dd88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	6031      	str	r1, [r6, #0]
 800dd90:	602b      	str	r3, [r5, #0]
 800dd92:	b016      	add	sp, #88	@ 0x58
 800dd94:	bd70      	pop	{r4, r5, r6, pc}
 800dd96:	466a      	mov	r2, sp
 800dd98:	f000 f862 	bl	800de60 <_fstat_r>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	dbec      	blt.n	800dd7a <__swhatbuf_r+0x12>
 800dda0:	9901      	ldr	r1, [sp, #4]
 800dda2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dda6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddaa:	4259      	negs	r1, r3
 800ddac:	4159      	adcs	r1, r3
 800ddae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddb2:	e7eb      	b.n	800dd8c <__swhatbuf_r+0x24>

0800ddb4 <__smakebuf_r>:
 800ddb4:	898b      	ldrh	r3, [r1, #12]
 800ddb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddb8:	079d      	lsls	r5, r3, #30
 800ddba:	4606      	mov	r6, r0
 800ddbc:	460c      	mov	r4, r1
 800ddbe:	d507      	bpl.n	800ddd0 <__smakebuf_r+0x1c>
 800ddc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	6123      	str	r3, [r4, #16]
 800ddc8:	2301      	movs	r3, #1
 800ddca:	6163      	str	r3, [r4, #20]
 800ddcc:	b003      	add	sp, #12
 800ddce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddd0:	ab01      	add	r3, sp, #4
 800ddd2:	466a      	mov	r2, sp
 800ddd4:	f7ff ffc8 	bl	800dd68 <__swhatbuf_r>
 800ddd8:	9f00      	ldr	r7, [sp, #0]
 800ddda:	4605      	mov	r5, r0
 800dddc:	4639      	mov	r1, r7
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff fa62 	bl	800d2a8 <_malloc_r>
 800dde4:	b948      	cbnz	r0, 800ddfa <__smakebuf_r+0x46>
 800dde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddea:	059a      	lsls	r2, r3, #22
 800ddec:	d4ee      	bmi.n	800ddcc <__smakebuf_r+0x18>
 800ddee:	f023 0303 	bic.w	r3, r3, #3
 800ddf2:	f043 0302 	orr.w	r3, r3, #2
 800ddf6:	81a3      	strh	r3, [r4, #12]
 800ddf8:	e7e2      	b.n	800ddc0 <__smakebuf_r+0xc>
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	6020      	str	r0, [r4, #0]
 800ddfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de02:	81a3      	strh	r3, [r4, #12]
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de0a:	b15b      	cbz	r3, 800de24 <__smakebuf_r+0x70>
 800de0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de10:	4630      	mov	r0, r6
 800de12:	f000 f837 	bl	800de84 <_isatty_r>
 800de16:	b128      	cbz	r0, 800de24 <__smakebuf_r+0x70>
 800de18:	89a3      	ldrh	r3, [r4, #12]
 800de1a:	f023 0303 	bic.w	r3, r3, #3
 800de1e:	f043 0301 	orr.w	r3, r3, #1
 800de22:	81a3      	strh	r3, [r4, #12]
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	431d      	orrs	r5, r3
 800de28:	81a5      	strh	r5, [r4, #12]
 800de2a:	e7cf      	b.n	800ddcc <__smakebuf_r+0x18>

0800de2c <memmove>:
 800de2c:	4288      	cmp	r0, r1
 800de2e:	b510      	push	{r4, lr}
 800de30:	eb01 0402 	add.w	r4, r1, r2
 800de34:	d902      	bls.n	800de3c <memmove+0x10>
 800de36:	4284      	cmp	r4, r0
 800de38:	4623      	mov	r3, r4
 800de3a:	d807      	bhi.n	800de4c <memmove+0x20>
 800de3c:	1e43      	subs	r3, r0, #1
 800de3e:	42a1      	cmp	r1, r4
 800de40:	d008      	beq.n	800de54 <memmove+0x28>
 800de42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de4a:	e7f8      	b.n	800de3e <memmove+0x12>
 800de4c:	4402      	add	r2, r0
 800de4e:	4601      	mov	r1, r0
 800de50:	428a      	cmp	r2, r1
 800de52:	d100      	bne.n	800de56 <memmove+0x2a>
 800de54:	bd10      	pop	{r4, pc}
 800de56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de5e:	e7f7      	b.n	800de50 <memmove+0x24>

0800de60 <_fstat_r>:
 800de60:	b538      	push	{r3, r4, r5, lr}
 800de62:	4d07      	ldr	r5, [pc, #28]	@ (800de80 <_fstat_r+0x20>)
 800de64:	2300      	movs	r3, #0
 800de66:	4604      	mov	r4, r0
 800de68:	4608      	mov	r0, r1
 800de6a:	4611      	mov	r1, r2
 800de6c:	602b      	str	r3, [r5, #0]
 800de6e:	f7f4 fdfc 	bl	8002a6a <_fstat>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	d102      	bne.n	800de7c <_fstat_r+0x1c>
 800de76:	682b      	ldr	r3, [r5, #0]
 800de78:	b103      	cbz	r3, 800de7c <_fstat_r+0x1c>
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	bd38      	pop	{r3, r4, r5, pc}
 800de7e:	bf00      	nop
 800de80:	20014b74 	.word	0x20014b74

0800de84 <_isatty_r>:
 800de84:	b538      	push	{r3, r4, r5, lr}
 800de86:	4d06      	ldr	r5, [pc, #24]	@ (800dea0 <_isatty_r+0x1c>)
 800de88:	2300      	movs	r3, #0
 800de8a:	4604      	mov	r4, r0
 800de8c:	4608      	mov	r0, r1
 800de8e:	602b      	str	r3, [r5, #0]
 800de90:	f7f4 fdfb 	bl	8002a8a <_isatty>
 800de94:	1c43      	adds	r3, r0, #1
 800de96:	d102      	bne.n	800de9e <_isatty_r+0x1a>
 800de98:	682b      	ldr	r3, [r5, #0]
 800de9a:	b103      	cbz	r3, 800de9e <_isatty_r+0x1a>
 800de9c:	6023      	str	r3, [r4, #0]
 800de9e:	bd38      	pop	{r3, r4, r5, pc}
 800dea0:	20014b74 	.word	0x20014b74

0800dea4 <_sbrk_r>:
 800dea4:	b538      	push	{r3, r4, r5, lr}
 800dea6:	4d06      	ldr	r5, [pc, #24]	@ (800dec0 <_sbrk_r+0x1c>)
 800dea8:	2300      	movs	r3, #0
 800deaa:	4604      	mov	r4, r0
 800deac:	4608      	mov	r0, r1
 800deae:	602b      	str	r3, [r5, #0]
 800deb0:	f000 f862 	bl	800df78 <_sbrk>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	d102      	bne.n	800debe <_sbrk_r+0x1a>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	b103      	cbz	r3, 800debe <_sbrk_r+0x1a>
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	20014b74 	.word	0x20014b74

0800dec4 <_realloc_r>:
 800dec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec8:	4680      	mov	r8, r0
 800deca:	4615      	mov	r5, r2
 800decc:	460c      	mov	r4, r1
 800dece:	b921      	cbnz	r1, 800deda <_realloc_r+0x16>
 800ded0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ded4:	4611      	mov	r1, r2
 800ded6:	f7ff b9e7 	b.w	800d2a8 <_malloc_r>
 800deda:	b92a      	cbnz	r2, 800dee8 <_realloc_r+0x24>
 800dedc:	f7ff f978 	bl	800d1d0 <_free_r>
 800dee0:	2400      	movs	r4, #0
 800dee2:	4620      	mov	r0, r4
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	f000 f81a 	bl	800df20 <_malloc_usable_size_r>
 800deec:	4285      	cmp	r5, r0
 800deee:	4606      	mov	r6, r0
 800def0:	d802      	bhi.n	800def8 <_realloc_r+0x34>
 800def2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800def6:	d8f4      	bhi.n	800dee2 <_realloc_r+0x1e>
 800def8:	4629      	mov	r1, r5
 800defa:	4640      	mov	r0, r8
 800defc:	f7ff f9d4 	bl	800d2a8 <_malloc_r>
 800df00:	4607      	mov	r7, r0
 800df02:	2800      	cmp	r0, #0
 800df04:	d0ec      	beq.n	800dee0 <_realloc_r+0x1c>
 800df06:	42b5      	cmp	r5, r6
 800df08:	462a      	mov	r2, r5
 800df0a:	4621      	mov	r1, r4
 800df0c:	bf28      	it	cs
 800df0e:	4632      	movcs	r2, r6
 800df10:	f7ff f94f 	bl	800d1b2 <memcpy>
 800df14:	4621      	mov	r1, r4
 800df16:	4640      	mov	r0, r8
 800df18:	f7ff f95a 	bl	800d1d0 <_free_r>
 800df1c:	463c      	mov	r4, r7
 800df1e:	e7e0      	b.n	800dee2 <_realloc_r+0x1e>

0800df20 <_malloc_usable_size_r>:
 800df20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df24:	1f18      	subs	r0, r3, #4
 800df26:	2b00      	cmp	r3, #0
 800df28:	bfbc      	itt	lt
 800df2a:	580b      	ldrlt	r3, [r1, r0]
 800df2c:	18c0      	addlt	r0, r0, r3
 800df2e:	4770      	bx	lr

0800df30 <roundf>:
 800df30:	ee10 0a10 	vmov	r0, s0
 800df34:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800df38:	3a7f      	subs	r2, #127	@ 0x7f
 800df3a:	2a16      	cmp	r2, #22
 800df3c:	dc15      	bgt.n	800df6a <roundf+0x3a>
 800df3e:	2a00      	cmp	r2, #0
 800df40:	da08      	bge.n	800df54 <roundf+0x24>
 800df42:	3201      	adds	r2, #1
 800df44:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800df48:	d101      	bne.n	800df4e <roundf+0x1e>
 800df4a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800df4e:	ee00 3a10 	vmov	s0, r3
 800df52:	4770      	bx	lr
 800df54:	4907      	ldr	r1, [pc, #28]	@ (800df74 <roundf+0x44>)
 800df56:	4111      	asrs	r1, r2
 800df58:	4201      	tst	r1, r0
 800df5a:	d0fa      	beq.n	800df52 <roundf+0x22>
 800df5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800df60:	4113      	asrs	r3, r2
 800df62:	4403      	add	r3, r0
 800df64:	ea23 0301 	bic.w	r3, r3, r1
 800df68:	e7f1      	b.n	800df4e <roundf+0x1e>
 800df6a:	2a80      	cmp	r2, #128	@ 0x80
 800df6c:	d1f1      	bne.n	800df52 <roundf+0x22>
 800df6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df72:	4770      	bx	lr
 800df74:	007fffff 	.word	0x007fffff

0800df78 <_sbrk>:
 800df78:	4a04      	ldr	r2, [pc, #16]	@ (800df8c <_sbrk+0x14>)
 800df7a:	6811      	ldr	r1, [r2, #0]
 800df7c:	4603      	mov	r3, r0
 800df7e:	b909      	cbnz	r1, 800df84 <_sbrk+0xc>
 800df80:	4903      	ldr	r1, [pc, #12]	@ (800df90 <_sbrk+0x18>)
 800df82:	6011      	str	r1, [r2, #0]
 800df84:	6810      	ldr	r0, [r2, #0]
 800df86:	4403      	add	r3, r0
 800df88:	6013      	str	r3, [r2, #0]
 800df8a:	4770      	bx	lr
 800df8c:	20014b84 	.word	0x20014b84
 800df90:	20014b88 	.word	0x20014b88

0800df94 <_init>:
 800df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df96:	bf00      	nop
 800df98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9a:	bc08      	pop	{r3}
 800df9c:	469e      	mov	lr, r3
 800df9e:	4770      	bx	lr

0800dfa0 <_fini>:
 800dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa2:	bf00      	nop
 800dfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfa6:	bc08      	pop	{r3}
 800dfa8:	469e      	mov	lr, r3
 800dfaa:	4770      	bx	lr
