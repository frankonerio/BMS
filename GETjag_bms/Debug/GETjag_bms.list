
GETjag_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e89c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800ea6c  0800ea6c  0000fa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efe4  0800efe4  000100c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800efe4  0800efe4  0000ffe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efec  0800efec  000100c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efec  0800efec  0000ffec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eff0  0800eff0  0000fff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800eff4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a98  200000c4  0800f0b8  000100c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014b5c  0800f0b8  00010b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002245a  00000000  00000000  000100f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005157  00000000  00000000  0003254e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f7  00000000  00000000  000396a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002892a  00000000  00000000  0003af97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002633c  00000000  00000000  000638c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee3cd  00000000  00000000  00089bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000917c  00000000  00000000  00178010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0018118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea54 	.word	0x0800ea54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	0800ea54 	.word	0x0800ea54

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013438 	.word	0x20013438

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_dmul>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000366:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800036a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800036e:	bf1d      	ittte	ne
 8000370:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000374:	ea94 0f0c 	teqne	r4, ip
 8000378:	ea95 0f0c 	teqne	r5, ip
 800037c:	f000 f8de 	bleq	800053c <__aeabi_dmul+0x1dc>
 8000380:	442c      	add	r4, r5
 8000382:	ea81 0603 	eor.w	r6, r1, r3
 8000386:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800038a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800038e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000392:	bf18      	it	ne
 8000394:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000398:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800039c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003a0:	d038      	beq.n	8000414 <__aeabi_dmul+0xb4>
 80003a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80003a6:	f04f 0500 	mov.w	r5, #0
 80003aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80003b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003b6:	f04f 0600 	mov.w	r6, #0
 80003ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003be:	f09c 0f00 	teq	ip, #0
 80003c2:	bf18      	it	ne
 80003c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80003c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80003cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80003d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80003d4:	d204      	bcs.n	80003e0 <__aeabi_dmul+0x80>
 80003d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003da:	416d      	adcs	r5, r5
 80003dc:	eb46 0606 	adc.w	r6, r6, r6
 80003e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80003f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80003f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80003f8:	bf88      	it	hi
 80003fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80003fe:	d81e      	bhi.n	800043e <__aeabi_dmul+0xde>
 8000400:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000418:	ea46 0101 	orr.w	r1, r6, r1
 800041c:	ea40 0002 	orr.w	r0, r0, r2
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000428:	bfc2      	ittt	gt
 800042a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800042e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000432:	bd70      	popgt	{r4, r5, r6, pc}
 8000434:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000438:	f04f 0e00 	mov.w	lr, #0
 800043c:	3c01      	subs	r4, #1
 800043e:	f300 80ab 	bgt.w	8000598 <__aeabi_dmul+0x238>
 8000442:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000446:	bfde      	ittt	le
 8000448:	2000      	movle	r0, #0
 800044a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd70      	pople	{r4, r5, r6, pc}
 8000450:	f1c4 0400 	rsb	r4, r4, #0
 8000454:	3c20      	subs	r4, #32
 8000456:	da35      	bge.n	80004c4 <__aeabi_dmul+0x164>
 8000458:	340c      	adds	r4, #12
 800045a:	dc1b      	bgt.n	8000494 <__aeabi_dmul+0x134>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0520 	rsb	r5, r4, #32
 8000464:	fa00 f305 	lsl.w	r3, r0, r5
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f205 	lsl.w	r2, r1, r5
 8000470:	ea40 0002 	orr.w	r0, r0, r2
 8000474:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000480:	fa21 f604 	lsr.w	r6, r1, r4
 8000484:	eb42 0106 	adc.w	r1, r2, r6
 8000488:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800048c:	bf08      	it	eq
 800048e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f1c4 040c 	rsb	r4, r4, #12
 8000498:	f1c4 0520 	rsb	r5, r4, #32
 800049c:	fa00 f304 	lsl.w	r3, r0, r4
 80004a0:	fa20 f005 	lsr.w	r0, r0, r5
 80004a4:	fa01 f204 	lsl.w	r2, r1, r4
 80004a8:	ea40 0002 	orr.w	r0, r0, r2
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004b4:	f141 0100 	adc.w	r1, r1, #0
 80004b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004bc:	bf08      	it	eq
 80004be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f1c4 0520 	rsb	r5, r4, #32
 80004c8:	fa00 f205 	lsl.w	r2, r0, r5
 80004cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80004d0:	fa20 f304 	lsr.w	r3, r0, r4
 80004d4:	fa01 f205 	lsl.w	r2, r1, r5
 80004d8:	ea43 0302 	orr.w	r3, r3, r2
 80004dc:	fa21 f004 	lsr.w	r0, r1, r4
 80004e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	fa21 f204 	lsr.w	r2, r1, r4
 80004e8:	ea20 0002 	bic.w	r0, r0, r2
 80004ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80004f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f094 0f00 	teq	r4, #0
 8000500:	d10f      	bne.n	8000522 <__aeabi_dmul+0x1c2>
 8000502:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000506:	0040      	lsls	r0, r0, #1
 8000508:	eb41 0101 	adc.w	r1, r1, r1
 800050c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000510:	bf08      	it	eq
 8000512:	3c01      	subeq	r4, #1
 8000514:	d0f7      	beq.n	8000506 <__aeabi_dmul+0x1a6>
 8000516:	ea41 0106 	orr.w	r1, r1, r6
 800051a:	f095 0f00 	teq	r5, #0
 800051e:	bf18      	it	ne
 8000520:	4770      	bxne	lr
 8000522:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000526:	0052      	lsls	r2, r2, #1
 8000528:	eb43 0303 	adc.w	r3, r3, r3
 800052c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000530:	bf08      	it	eq
 8000532:	3d01      	subeq	r5, #1
 8000534:	d0f7      	beq.n	8000526 <__aeabi_dmul+0x1c6>
 8000536:	ea43 0306 	orr.w	r3, r3, r6
 800053a:	4770      	bx	lr
 800053c:	ea94 0f0c 	teq	r4, ip
 8000540:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000544:	bf18      	it	ne
 8000546:	ea95 0f0c 	teqne	r5, ip
 800054a:	d00c      	beq.n	8000566 <__aeabi_dmul+0x206>
 800054c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000550:	bf18      	it	ne
 8000552:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000556:	d1d1      	bne.n	80004fc <__aeabi_dmul+0x19c>
 8000558:	ea81 0103 	eor.w	r1, r1, r3
 800055c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd70      	pop	{r4, r5, r6, pc}
 8000566:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800056a:	bf06      	itte	eq
 800056c:	4610      	moveq	r0, r2
 800056e:	4619      	moveq	r1, r3
 8000570:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000574:	d019      	beq.n	80005aa <__aeabi_dmul+0x24a>
 8000576:	ea94 0f0c 	teq	r4, ip
 800057a:	d102      	bne.n	8000582 <__aeabi_dmul+0x222>
 800057c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000580:	d113      	bne.n	80005aa <__aeabi_dmul+0x24a>
 8000582:	ea95 0f0c 	teq	r5, ip
 8000586:	d105      	bne.n	8000594 <__aeabi_dmul+0x234>
 8000588:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800058c:	bf1c      	itt	ne
 800058e:	4610      	movne	r0, r2
 8000590:	4619      	movne	r1, r3
 8000592:	d10a      	bne.n	80005aa <__aeabi_dmul+0x24a>
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
 80005aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80005b2:	bd70      	pop	{r4, r5, r6, pc}

080005b4 <__aeabi_drsub>:
 80005b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e002      	b.n	80005c0 <__adddf3>
 80005ba:	bf00      	nop

080005bc <__aeabi_dsub>:
 80005bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080005c0 <__adddf3>:
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	bf1f      	itttt	ne
 80005d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e6:	f000 80e2 	beq.w	80007ae <__adddf3+0x1ee>
 80005ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005f2:	bfb8      	it	lt
 80005f4:	426d      	neglt	r5, r5
 80005f6:	dd0c      	ble.n	8000612 <__adddf3+0x52>
 80005f8:	442c      	add	r4, r5
 80005fa:	ea80 0202 	eor.w	r2, r0, r2
 80005fe:	ea81 0303 	eor.w	r3, r1, r3
 8000602:	ea82 0000 	eor.w	r0, r2, r0
 8000606:	ea83 0101 	eor.w	r1, r3, r1
 800060a:	ea80 0202 	eor.w	r2, r0, r2
 800060e:	ea81 0303 	eor.w	r3, r1, r3
 8000612:	2d36      	cmp	r5, #54	@ 0x36
 8000614:	bf88      	it	hi
 8000616:	bd30      	pophi	{r4, r5, pc}
 8000618:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800061c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000620:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000624:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000628:	d002      	beq.n	8000630 <__adddf3+0x70>
 800062a:	4240      	negs	r0, r0
 800062c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000630:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000634:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000638:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800063c:	d002      	beq.n	8000644 <__adddf3+0x84>
 800063e:	4252      	negs	r2, r2
 8000640:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000644:	ea94 0f05 	teq	r4, r5
 8000648:	f000 80a7 	beq.w	800079a <__adddf3+0x1da>
 800064c:	f1a4 0401 	sub.w	r4, r4, #1
 8000650:	f1d5 0e20 	rsbs	lr, r5, #32
 8000654:	db0d      	blt.n	8000672 <__adddf3+0xb2>
 8000656:	fa02 fc0e 	lsl.w	ip, r2, lr
 800065a:	fa22 f205 	lsr.w	r2, r2, r5
 800065e:	1880      	adds	r0, r0, r2
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	fa03 f20e 	lsl.w	r2, r3, lr
 8000668:	1880      	adds	r0, r0, r2
 800066a:	fa43 f305 	asr.w	r3, r3, r5
 800066e:	4159      	adcs	r1, r3
 8000670:	e00e      	b.n	8000690 <__adddf3+0xd0>
 8000672:	f1a5 0520 	sub.w	r5, r5, #32
 8000676:	f10e 0e20 	add.w	lr, lr, #32
 800067a:	2a01      	cmp	r2, #1
 800067c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000680:	bf28      	it	cs
 8000682:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000686:	fa43 f305 	asr.w	r3, r3, r5
 800068a:	18c0      	adds	r0, r0, r3
 800068c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	d507      	bpl.n	80006a6 <__adddf3+0xe6>
 8000696:	f04f 0e00 	mov.w	lr, #0
 800069a:	f1dc 0c00 	rsbs	ip, ip, #0
 800069e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80006aa:	d31b      	bcc.n	80006e4 <__adddf3+0x124>
 80006ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80006b0:	d30c      	bcc.n	80006cc <__adddf3+0x10c>
 80006b2:	0849      	lsrs	r1, r1, #1
 80006b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006bc:	f104 0401 	add.w	r4, r4, #1
 80006c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80006c8:	f080 809a 	bcs.w	8000800 <__adddf3+0x240>
 80006cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	ea41 0105 	orr.w	r1, r1, r5
 80006e2:	bd30      	pop	{r4, r5, pc}
 80006e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006e8:	4140      	adcs	r0, r0
 80006ea:	eb41 0101 	adc.w	r1, r1, r1
 80006ee:	3c01      	subs	r4, #1
 80006f0:	bf28      	it	cs
 80006f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80006f6:	d2e9      	bcs.n	80006cc <__adddf3+0x10c>
 80006f8:	f091 0f00 	teq	r1, #0
 80006fc:	bf04      	itt	eq
 80006fe:	4601      	moveq	r1, r0
 8000700:	2000      	moveq	r0, #0
 8000702:	fab1 f381 	clz	r3, r1
 8000706:	bf08      	it	eq
 8000708:	3320      	addeq	r3, #32
 800070a:	f1a3 030b 	sub.w	r3, r3, #11
 800070e:	f1b3 0220 	subs.w	r2, r3, #32
 8000712:	da0c      	bge.n	800072e <__adddf3+0x16e>
 8000714:	320c      	adds	r2, #12
 8000716:	dd08      	ble.n	800072a <__adddf3+0x16a>
 8000718:	f102 0c14 	add.w	ip, r2, #20
 800071c:	f1c2 020c 	rsb	r2, r2, #12
 8000720:	fa01 f00c 	lsl.w	r0, r1, ip
 8000724:	fa21 f102 	lsr.w	r1, r1, r2
 8000728:	e00c      	b.n	8000744 <__adddf3+0x184>
 800072a:	f102 0214 	add.w	r2, r2, #20
 800072e:	bfd8      	it	le
 8000730:	f1c2 0c20 	rsble	ip, r2, #32
 8000734:	fa01 f102 	lsl.w	r1, r1, r2
 8000738:	fa20 fc0c 	lsr.w	ip, r0, ip
 800073c:	bfdc      	itt	le
 800073e:	ea41 010c 	orrle.w	r1, r1, ip
 8000742:	4090      	lslle	r0, r2
 8000744:	1ae4      	subs	r4, r4, r3
 8000746:	bfa2      	ittt	ge
 8000748:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800074c:	4329      	orrge	r1, r5
 800074e:	bd30      	popge	{r4, r5, pc}
 8000750:	ea6f 0404 	mvn.w	r4, r4
 8000754:	3c1f      	subs	r4, #31
 8000756:	da1c      	bge.n	8000792 <__adddf3+0x1d2>
 8000758:	340c      	adds	r4, #12
 800075a:	dc0e      	bgt.n	800077a <__adddf3+0x1ba>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0220 	rsb	r2, r4, #32
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f302 	lsl.w	r3, r1, r2
 800076c:	ea40 0003 	orr.w	r0, r0, r3
 8000770:	fa21 f304 	lsr.w	r3, r1, r4
 8000774:	ea45 0103 	orr.w	r1, r5, r3
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	f1c4 040c 	rsb	r4, r4, #12
 800077e:	f1c4 0220 	rsb	r2, r4, #32
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	fa01 f304 	lsl.w	r3, r1, r4
 800078a:	ea40 0003 	orr.w	r0, r0, r3
 800078e:	4629      	mov	r1, r5
 8000790:	bd30      	pop	{r4, r5, pc}
 8000792:	fa21 f004 	lsr.w	r0, r1, r4
 8000796:	4629      	mov	r1, r5
 8000798:	bd30      	pop	{r4, r5, pc}
 800079a:	f094 0f00 	teq	r4, #0
 800079e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80007a2:	bf06      	itte	eq
 80007a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80007a8:	3401      	addeq	r4, #1
 80007aa:	3d01      	subne	r5, #1
 80007ac:	e74e      	b.n	800064c <__adddf3+0x8c>
 80007ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007b2:	bf18      	it	ne
 80007b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007b8:	d029      	beq.n	800080e <__adddf3+0x24e>
 80007ba:	ea94 0f05 	teq	r4, r5
 80007be:	bf08      	it	eq
 80007c0:	ea90 0f02 	teqeq	r0, r2
 80007c4:	d005      	beq.n	80007d2 <__adddf3+0x212>
 80007c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80007ca:	bf04      	itt	eq
 80007cc:	4619      	moveq	r1, r3
 80007ce:	4610      	moveq	r0, r2
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	ea91 0f03 	teq	r1, r3
 80007d6:	bf1e      	ittt	ne
 80007d8:	2100      	movne	r1, #0
 80007da:	2000      	movne	r0, #0
 80007dc:	bd30      	popne	{r4, r5, pc}
 80007de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007e2:	d105      	bne.n	80007f0 <__adddf3+0x230>
 80007e4:	0040      	lsls	r0, r0, #1
 80007e6:	4149      	adcs	r1, r1
 80007e8:	bf28      	it	cs
 80007ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80007ee:	bd30      	pop	{r4, r5, pc}
 80007f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80007f4:	bf3c      	itt	cc
 80007f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80007fa:	bd30      	popcc	{r4, r5, pc}
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000800:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd30      	pop	{r4, r5, pc}
 800080e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000812:	bf1a      	itte	ne
 8000814:	4619      	movne	r1, r3
 8000816:	4610      	movne	r0, r2
 8000818:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800081c:	bf1c      	itt	ne
 800081e:	460b      	movne	r3, r1
 8000820:	4602      	movne	r2, r0
 8000822:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000826:	bf06      	itte	eq
 8000828:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800082c:	ea91 0f03 	teqeq	r1, r3
 8000830:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000834:	bd30      	pop	{r4, r5, pc}
 8000836:	bf00      	nop

08000838 <__aeabi_ui2d>:
 8000838:	f090 0f00 	teq	r0, #0
 800083c:	bf04      	itt	eq
 800083e:	2100      	moveq	r1, #0
 8000840:	4770      	bxeq	lr
 8000842:	b530      	push	{r4, r5, lr}
 8000844:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000848:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084c:	f04f 0500 	mov.w	r5, #0
 8000850:	f04f 0100 	mov.w	r1, #0
 8000854:	e750      	b.n	80006f8 <__adddf3+0x138>
 8000856:	bf00      	nop

08000858 <__aeabi_i2d>:
 8000858:	f090 0f00 	teq	r0, #0
 800085c:	bf04      	itt	eq
 800085e:	2100      	moveq	r1, #0
 8000860:	4770      	bxeq	lr
 8000862:	b530      	push	{r4, r5, lr}
 8000864:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000868:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000870:	bf48      	it	mi
 8000872:	4240      	negmi	r0, r0
 8000874:	f04f 0100 	mov.w	r1, #0
 8000878:	e73e      	b.n	80006f8 <__adddf3+0x138>
 800087a:	bf00      	nop

0800087c <__aeabi_f2d>:
 800087c:	0042      	lsls	r2, r0, #1
 800087e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000882:	ea4f 0131 	mov.w	r1, r1, rrx
 8000886:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800088a:	bf1f      	itttt	ne
 800088c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000890:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000894:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000898:	4770      	bxne	lr
 800089a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800089e:	bf08      	it	eq
 80008a0:	4770      	bxeq	lr
 80008a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80008a6:	bf04      	itt	eq
 80008a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80008ac:	4770      	bxeq	lr
 80008ae:	b530      	push	{r4, r5, lr}
 80008b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80008b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80008bc:	e71c      	b.n	80006f8 <__adddf3+0x138>
 80008be:	bf00      	nop

080008c0 <__aeabi_ul2d>:
 80008c0:	ea50 0201 	orrs.w	r2, r0, r1
 80008c4:	bf08      	it	eq
 80008c6:	4770      	bxeq	lr
 80008c8:	b530      	push	{r4, r5, lr}
 80008ca:	f04f 0500 	mov.w	r5, #0
 80008ce:	e00a      	b.n	80008e6 <__aeabi_l2d+0x16>

080008d0 <__aeabi_l2d>:
 80008d0:	ea50 0201 	orrs.w	r2, r0, r1
 80008d4:	bf08      	it	eq
 80008d6:	4770      	bxeq	lr
 80008d8:	b530      	push	{r4, r5, lr}
 80008da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80008de:	d502      	bpl.n	80008e6 <__aeabi_l2d+0x16>
 80008e0:	4240      	negs	r0, r0
 80008e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008f2:	f43f aed8 	beq.w	80006a6 <__adddf3+0xe6>
 80008f6:	f04f 0203 	mov.w	r2, #3
 80008fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008fe:	bf18      	it	ne
 8000900:	3203      	addne	r2, #3
 8000902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000906:	bf18      	it	ne
 8000908:	3203      	addne	r2, #3
 800090a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800090e:	f1c2 0320 	rsb	r3, r2, #32
 8000912:	fa00 fc03 	lsl.w	ip, r0, r3
 8000916:	fa20 f002 	lsr.w	r0, r0, r2
 800091a:	fa01 fe03 	lsl.w	lr, r1, r3
 800091e:	ea40 000e 	orr.w	r0, r0, lr
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	4414      	add	r4, r2
 8000928:	e6bd      	b.n	80006a6 <__adddf3+0xe6>
 800092a:	bf00      	nop

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b30:	f000 b96a 	b.w	8000e08 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	460c      	mov	r4, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14e      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b58:	4694      	mov	ip, r2
 8000b5a:	458c      	cmp	ip, r1
 8000b5c:	4686      	mov	lr, r0
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	d962      	bls.n	8000c2a <__udivmoddi4+0xde>
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	4091      	lsls	r1, r2
 8000b6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b74:	4319      	orrs	r1, r3
 8000b76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7e:	fa1f f68c 	uxth.w	r6, ip
 8000b82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb04 f106 	mul.w	r1, r4, r6
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ba2:	f080 8112 	bcs.w	8000dca <__udivmoddi4+0x27e>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 810f 	bls.w	8000dca <__udivmoddi4+0x27e>
 8000bac:	3c02      	subs	r4, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bba:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb00 f606 	mul.w	r6, r0, r6
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x94>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bd2:	f080 80fc 	bcs.w	8000dce <__udivmoddi4+0x282>
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	f240 80f9 	bls.w	8000dce <__udivmoddi4+0x282>
 8000bdc:	4463      	add	r3, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	1b9b      	subs	r3, r3, r6
 8000be2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11d      	cbz	r5, 8000bf2 <__udivmoddi4+0xa6>
 8000bea:	40d3      	lsrs	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d905      	bls.n	8000c06 <__udivmoddi4+0xba>
 8000bfa:	b10d      	cbz	r5, 8000c00 <__udivmoddi4+0xb4>
 8000bfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4608      	mov	r0, r1
 8000c04:	e7f5      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c06:	fab3 f183 	clz	r1, r3
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d146      	bne.n	8000c9c <__udivmoddi4+0x150>
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xcc>
 8000c12:	4290      	cmp	r0, r2
 8000c14:	f0c0 80f0 	bcc.w	8000df8 <__udivmoddi4+0x2ac>
 8000c18:	1a86      	subs	r6, r0, r2
 8000c1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2d00      	cmp	r5, #0
 8000c22:	d0e6      	beq.n	8000bf2 <__udivmoddi4+0xa6>
 8000c24:	e9c5 6300 	strd	r6, r3, [r5]
 8000c28:	e7e3      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	f040 8090 	bne.w	8000d50 <__udivmoddi4+0x204>
 8000c30:	eba1 040c 	sub.w	r4, r1, ip
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	fa1f f78c 	uxth.w	r7, ip
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb08 4416 	mls	r4, r8, r6, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb07 f006 	mul.w	r0, r7, r6
 8000c52:	4298      	cmp	r0, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x11c>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x11a>
 8000c60:	4298      	cmp	r0, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c66:	4626      	mov	r6, r4
 8000c68:	1a1c      	subs	r4, r3, r0
 8000c6a:	fa1f f38e 	uxth.w	r3, lr
 8000c6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c72:	fb08 4410 	mls	r4, r8, r0, r4
 8000c76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	429f      	cmp	r7, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x148>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x146>
 8000c8c:	429f      	cmp	r7, r3
 8000c8e:	f200 80b0 	bhi.w	8000df2 <__udivmoddi4+0x2a6>
 8000c92:	4620      	mov	r0, r4
 8000c94:	1bdb      	subs	r3, r3, r7
 8000c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0x9c>
 8000c9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ca6:	431f      	orrs	r7, r3
 8000ca8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cac:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb0:	ea43 030c 	orr.w	r3, r3, ip
 8000cb4:	40f4      	lsrs	r4, r6
 8000cb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cba:	0c38      	lsrs	r0, r7, #16
 8000cbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc4:	fa1f fc87 	uxth.w	ip, r7
 8000cc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000ccc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd4:	45a1      	cmp	r9, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x1a6>
 8000cdc:	193c      	adds	r4, r7, r4
 8000cde:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ce2:	f080 8084 	bcs.w	8000dee <__udivmoddi4+0x2a2>
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	f240 8081 	bls.w	8000dee <__udivmoddi4+0x2a2>
 8000cec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	eba4 0409 	sub.w	r4, r4, r9
 8000cf6:	fa1f f983 	uxth.w	r9, r3
 8000cfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000d02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x1d2>
 8000d0e:	193c      	adds	r4, r7, r4
 8000d10:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d14:	d267      	bcs.n	8000de6 <__udivmoddi4+0x29a>
 8000d16:	45a4      	cmp	ip, r4
 8000d18:	d965      	bls.n	8000de6 <__udivmoddi4+0x29a>
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	443c      	add	r4, r7
 8000d1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d22:	fba0 9302 	umull	r9, r3, r0, r2
 8000d26:	eba4 040c 	sub.w	r4, r4, ip
 8000d2a:	429c      	cmp	r4, r3
 8000d2c:	46ce      	mov	lr, r9
 8000d2e:	469c      	mov	ip, r3
 8000d30:	d351      	bcc.n	8000dd6 <__udivmoddi4+0x28a>
 8000d32:	d04e      	beq.n	8000dd2 <__udivmoddi4+0x286>
 8000d34:	b155      	cbz	r5, 8000d4c <__udivmoddi4+0x200>
 8000d36:	ebb8 030e 	subs.w	r3, r8, lr
 8000d3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d42:	40cb      	lsrs	r3, r1
 8000d44:	431e      	orrs	r6, r3
 8000d46:	40cc      	lsrs	r4, r1
 8000d48:	e9c5 6400 	strd	r6, r4, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e750      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f103 	lsr.w	r1, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d60:	4094      	lsls	r4, r2
 8000d62:	430c      	orrs	r4, r1
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d6c:	fa1f f78c 	uxth.w	r7, ip
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3110 	mls	r1, r8, r0, r3
 8000d78:	0c23      	lsrs	r3, r4, #16
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f107 	mul.w	r1, r0, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x24c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d8e:	d22c      	bcs.n	8000dea <__udivmoddi4+0x29e>
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d92a      	bls.n	8000dea <__udivmoddi4+0x29e>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da0:	fb08 3311 	mls	r3, r8, r1, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb01 f307 	mul.w	r3, r1, r7
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x276>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000db8:	d213      	bcs.n	8000de2 <__udivmoddi4+0x296>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d911      	bls.n	8000de2 <__udivmoddi4+0x296>
 8000dbe:	3902      	subs	r1, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	1ae4      	subs	r4, r4, r3
 8000dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc8:	e739      	b.n	8000c3e <__udivmoddi4+0xf2>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	e6f0      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e706      	b.n	8000be0 <__udivmoddi4+0x94>
 8000dd2:	45c8      	cmp	r8, r9
 8000dd4:	d2ae      	bcs.n	8000d34 <__udivmoddi4+0x1e8>
 8000dd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7a8      	b.n	8000d34 <__udivmoddi4+0x1e8>
 8000de2:	4631      	mov	r1, r6
 8000de4:	e7ed      	b.n	8000dc2 <__udivmoddi4+0x276>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e799      	b.n	8000d1e <__udivmoddi4+0x1d2>
 8000dea:	4630      	mov	r0, r6
 8000dec:	e7d4      	b.n	8000d98 <__udivmoddi4+0x24c>
 8000dee:	46d6      	mov	lr, sl
 8000df0:	e77f      	b.n	8000cf2 <__udivmoddi4+0x1a6>
 8000df2:	4463      	add	r3, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e74d      	b.n	8000c94 <__udivmoddi4+0x148>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e70f      	b.n	8000c20 <__udivmoddi4+0xd4>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	e730      	b.n	8000c68 <__udivmoddi4+0x11c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <Checksum>:
  }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
  unsigned char i;
  unsigned char checksum = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < len; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e009      	b.n	8000e36 <Checksum+0x2a>
    checksum += ptr[i];
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < len; i++)
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	3301      	adds	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f1      	bcc.n	8000e22 <Checksum+0x16>

  checksum = 0xff & ~checksum;
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	73bb      	strb	r3, [r7, #14]

  return (checksum);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <I2C_WriteReg>:
  }
  return (crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af04      	add	r7, sp, #16
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000e64:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <I2C_WriteReg+0x44>)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e6c:	c303      	stmia	r3!, {r0, r1}
 8000e6e:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
  }
#else
  HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e7c:	9102      	str	r1, [sp, #8]
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	2110      	movs	r1, #16
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <I2C_WriteReg+0x48>)
 8000e8a:	f004 fff1 	bl	8005e70 <HAL_I2C_Mem_Write>
#endif
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0800ea6c 	.word	0x0800ea6c
 8000e9c:	2000014c 	.word	0x2000014c

08000ea0 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <I2C_ReadReg+0x48>)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	c303      	stmia	r3!, {r0, r1}
 8000ebe:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    CopyArray(RX_Buffer, reg_data, crc_count);
  }
#else
  HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ecc:	9102      	str	r1, [sp, #8]
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <I2C_ReadReg+0x4c>)
 8000eda:	f005 f8c3 	bl	8006064 <HAL_I2C_Mem_Read>
#endif
  return 0;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0800ea6c 	.word	0x0800ea6c
 8000eec:	2000014c 	.word	0x2000014c

08000ef0 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	80fb      	strh	r3, [r7, #6]
 8000efc:	4613      	mov	r3, r2
 8000efe:	717b      	strb	r3, [r7, #5]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000f00:	2300      	movs	r3, #0
 8000f02:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f04:	4a62      	ldr	r2, [pc, #392]	@ (8001090 <BQ769x2_SetRegister+0x1a0>)
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0e:	6018      	str	r0, [r3, #0]
 8000f10:	3304      	adds	r3, #4
 8000f12:	8019      	strh	r1, [r3, #0]

  // TX_RegData in little endian format
  TX_RegData[0] = reg_addr & 0xff;
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = reg_data & 0xff; // 1st byte of data
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73bb      	strb	r3, [r7, #14]

  switch (datalen)
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d07d      	beq.n	800102c <BQ769x2_SetRegister+0x13c>
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	f300 80a8 	bgt.w	8001086 <BQ769x2_SetRegister+0x196>
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d002      	beq.n	8000f40 <BQ769x2_SetRegister+0x50>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d039      	beq.n	8000fb2 <BQ769x2_SetRegister+0xc2>
    TX_Buffer[1] = 0x08;              // combined length of register address and data
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
    delayUS(2000);
    break;
  }
}
 8000f3e:	e0a2      	b.n	8001086 <BQ769x2_SetRegister+0x196>
    I2C_WriteReg(0x3E, TX_RegData, 3);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2203      	movs	r2, #3
 8000f46:	4619      	mov	r1, r3
 8000f48:	203e      	movs	r0, #62	@ 0x3e
 8000f4a:	f7ff ff83 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8000f4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f52:	f000 fdc1 	bl	8001ad8 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 3);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff55 	bl	8000e0c <Checksum>
 8000f62:	4603      	mov	r3, r0
 8000f64:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x05; // combined length of register address and data
 8000f66:	2305      	movs	r3, #5
 8000f68:	757b      	strb	r3, [r7, #21]
    uint8_t statusLow = 0xFF;
 8000f6a:	23ff      	movs	r3, #255	@ 0xff
 8000f6c:	72fb      	strb	r3, [r7, #11]
    uint8_t statusHigh = 0xFF;
 8000f6e:	23ff      	movs	r3, #255	@ 0xff
 8000f70:	72bb      	strb	r3, [r7, #10]
      I2C_ReadReg(0x3E, &statusLow, 1);
 8000f72:	f107 030b 	add.w	r3, r7, #11
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	203e      	movs	r0, #62	@ 0x3e
 8000f7c:	f7ff ff90 	bl	8000ea0 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &statusHigh, 1);
 8000f80:	f107 030a 	add.w	r3, r7, #10
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	203f      	movs	r0, #63	@ 0x3f
 8000f8a:	f7ff ff89 	bl	8000ea0 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d102      	bne.n	8000f9a <BQ769x2_SetRegister+0xaa>
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	2bff      	cmp	r3, #255	@ 0xff
 8000f98:	d0eb      	beq.n	8000f72 <BQ769x2_SetRegister+0x82>
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2060      	movs	r0, #96	@ 0x60
 8000fa4:	f7ff ff56 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8000fa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fac:	f000 fd94 	bl	8001ad8 <delayUS>
    break;
 8000fb0:	e069      	b.n	8001086 <BQ769x2_SetRegister+0x196>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	73fb      	strb	r3, [r7, #15]
    I2C_WriteReg(0x3E, TX_RegData, 4);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	203e      	movs	r0, #62	@ 0x3e
 8000fc4:	f7ff ff46 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8000fc8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fcc:	f000 fd84 	bl	8001ad8 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff18 	bl	8000e0c <Checksum>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x06; // combined length of register address and data
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	757b      	strb	r3, [r7, #21]
    statusLow = 0xFF;
 8000fe4:	23ff      	movs	r3, #255	@ 0xff
 8000fe6:	72fb      	strb	r3, [r7, #11]
    statusHigh = 0xFF;
 8000fe8:	23ff      	movs	r3, #255	@ 0xff
 8000fea:	72bb      	strb	r3, [r7, #10]
      I2C_ReadReg(0x3E, &statusLow, 1);
 8000fec:	f107 030b 	add.w	r3, r7, #11
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	203e      	movs	r0, #62	@ 0x3e
 8000ff6:	f7ff ff53 	bl	8000ea0 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &statusHigh, 1);
 8000ffa:	f107 030a 	add.w	r3, r7, #10
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	203f      	movs	r0, #63	@ 0x3f
 8001004:	f7ff ff4c 	bl	8000ea0 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	2bff      	cmp	r3, #255	@ 0xff
 800100c:	d102      	bne.n	8001014 <BQ769x2_SetRegister+0x124>
 800100e:	7abb      	ldrb	r3, [r7, #10]
 8001010:	2bff      	cmp	r3, #255	@ 0xff
 8001012:	d0eb      	beq.n	8000fec <BQ769x2_SetRegister+0xfc>
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2202      	movs	r2, #2
 800101a:	4619      	mov	r1, r3
 800101c:	2060      	movs	r0, #96	@ 0x60
 800101e:	f7ff ff19 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8001022:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001026:	f000 fd57 	bl	8001ad8 <delayUS>
    break;
 800102a:	e02c      	b.n	8001086 <BQ769x2_SetRegister+0x196>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]
    TX_RegData[4] = (reg_data >> 16) & 0xff;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	b2db      	uxtb	r3, r3
 800103a:	743b      	strb	r3, [r7, #16]
    TX_RegData[5] = (reg_data >> 24) & 0xff;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	0e1b      	lsrs	r3, r3, #24
 8001040:	b2db      	uxtb	r3, r3
 8001042:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x3E, TX_RegData, 6);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2206      	movs	r2, #6
 800104a:	4619      	mov	r1, r3
 800104c:	203e      	movs	r0, #62	@ 0x3e
 800104e:	f7ff ff01 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8001052:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001056:	f000 fd3f 	bl	8001ad8 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 6);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2106      	movs	r1, #6
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fed3 	bl	8000e0c <Checksum>
 8001066:	4603      	mov	r3, r0
 8001068:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x08;              // combined length of register address and data
 800106a:	2308      	movs	r3, #8
 800106c:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2202      	movs	r2, #2
 8001074:	4619      	mov	r1, r3
 8001076:	2060      	movs	r0, #96	@ 0x60
 8001078:	f7ff feec 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 800107c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001080:	f000 fd2a 	bl	8001ad8 <delayUS>
    break;
 8001084:	bf00      	nop
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	0800ea78 	.word	0x0800ea78

08001094 <BQ769x2_ReadRegister>:

uint16_t BQ769x2_ReadRegister(uint16_t reg_addr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  uint8_t TX_RegAddr[2] = {0}; // Array to hold the register address
 800109e:	2300      	movs	r3, #0
 80010a0:	82bb      	strh	r3, [r7, #20]
  uint8_t RX_Buffer[2] = {0};  // Array to hold the received data
 80010a2:	2300      	movs	r3, #0
 80010a4:	823b      	strh	r3, [r7, #16]

  // Populate the TX_RegAddr array with the register address
  TX_RegAddr[0] = reg_addr & 0xFF;        // Lower byte of register address
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	753b      	strb	r3, [r7, #20]
  TX_RegAddr[1] = (reg_addr >> 8) & 0xFF; // Upper byte of register address
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	757b      	strb	r3, [r7, #21]

  // Write the register address to the 0x3E register
  I2C_WriteReg(0x3E, TX_RegAddr, 2);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2202      	movs	r2, #2
 80010bc:	4619      	mov	r1, r3
 80010be:	203e      	movs	r0, #62	@ 0x3e
 80010c0:	f7ff fec8 	bl	8000e54 <I2C_WriteReg>
  delayUS(2000); // Delay to allow time for the write to complete
 80010c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010c8:	f000 fd06 	bl	8001ad8 <delayUS>

  // Poll the 0x3E register until it no longer returns 0xFF
  uint8_t statusLow = 0xFF;
 80010cc:	23ff      	movs	r3, #255	@ 0xff
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint8_t statusHigh = 0xFF;
 80010d0:	23ff      	movs	r3, #255	@ 0xff
 80010d2:	73bb      	strb	r3, [r7, #14]
  do
  {
    I2C_ReadReg(0x3E, &statusLow, 1);
 80010d4:	f107 030f 	add.w	r3, r7, #15
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	203e      	movs	r0, #62	@ 0x3e
 80010de:	f7ff fedf 	bl	8000ea0 <I2C_ReadReg>
    I2C_ReadReg(0x3F, &statusHigh, 1);
 80010e2:	f107 030e 	add.w	r3, r7, #14
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	203f      	movs	r0, #63	@ 0x3f
 80010ec:	f7ff fed8 	bl	8000ea0 <I2C_ReadReg>
  } while (statusLow == 0xFF && statusHigh == 0xFF);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2bff      	cmp	r3, #255	@ 0xff
 80010f4:	d102      	bne.n	80010fc <BQ769x2_ReadRegister+0x68>
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2bff      	cmp	r3, #255	@ 0xff
 80010fa:	d0eb      	beq.n	80010d4 <BQ769x2_ReadRegister+0x40>

  // HAL_Delay(200);
  //  Read the data from the buffer starting at 0x40
  I2C_ReadReg(0x40, RX_Buffer, 2);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2202      	movs	r2, #2
 8001102:	4619      	mov	r1, r3
 8001104:	2040      	movs	r0, #64	@ 0x40
 8001106:	f7ff fecb 	bl	8000ea0 <I2C_ReadReg>

  // Combine the received bytes into a single 16-bit value
  RX_data[0] = RX_Buffer[0];
 800110a:	7c3a      	ldrb	r2, [r7, #16]
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <BQ769x2_ReadRegister+0x9c>)
 800110e:	701a      	strb	r2, [r3, #0]
  RX_data[1] = RX_Buffer[1];
 8001110:	7c7a      	ldrb	r2, [r7, #17]
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <BQ769x2_ReadRegister+0x9c>)
 8001114:	705a      	strb	r2, [r3, #1]
  uint16_t reg_data = (RX_Buffer[1] << 8) | RX_Buffer[0];
 8001116:	7c7b      	ldrb	r3, [r7, #17]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	7c3b      	ldrb	r3, [r7, #16]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	82fb      	strh	r3, [r7, #22]

  return reg_data;
 8001126:	8afb      	ldrh	r3, [r7, #22]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000e0 	.word	0x200000e0

08001134 <CommandSubcommands>:
  I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) // For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ // For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]

  uint8_t TX_Reg[2] = {0x00, 0x00};
 800113e:	2300      	movs	r3, #0
 8001140:	81bb      	strh	r3, [r7, #12]

  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]
  TX_Reg[1] = (command >> 8) & 0xff;
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	737b      	strb	r3, [r7, #13]

  I2C_WriteReg(0x3E, TX_Reg, 2);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2202      	movs	r2, #2
 8001158:	4619      	mov	r1, r3
 800115a:	203e      	movs	r0, #62	@ 0x3e
 800115c:	f7ff fe7a 	bl	8000e54 <I2C_WriteReg>
  delayUS(2000);
 8001160:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001164:	f000 fcb8 	bl	8001ad8 <delayUS>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <Subcommands>:

void Subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	460b      	mov	r3, r1
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	70fb      	strb	r3, [r7, #3]
  // security keys and Manu_data writes dont work with this function (reading these commands works)
  // max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
  uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8001186:	2300      	movs	r3, #0
 8001188:	823b      	strh	r3, [r7, #16]
  uint8_t lowByte;
  uint8_t highByte;

  I2C_ReadReg(0x3E, &lowByte, 1);
 800118a:	f107 030f 	add.w	r3, r7, #15
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	203e      	movs	r0, #62	@ 0x3e
 8001194:	f7ff fe84 	bl	8000ea0 <I2C_ReadReg>
  I2C_ReadReg(0x3F, &highByte, 1);
 8001198:	f107 030e 	add.w	r3, r7, #14
 800119c:	2201      	movs	r2, #1
 800119e:	4619      	mov	r1, r3
 80011a0:	203f      	movs	r0, #63	@ 0x3f
 80011a2:	f7ff fe7d 	bl	8000ea0 <I2C_ReadReg>
  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	753b      	strb	r3, [r7, #20]
  TX_Reg[1] = (command >> 8) & 0xff;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	757b      	strb	r3, [r7, #21]

  if (type == R)
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d120      	bne.n	80011fe <Subcommands+0x8e>
  { // read
    I2C_WriteReg(0x3E, TX_Reg, 2);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2202      	movs	r2, #2
 80011c2:	4619      	mov	r1, r3
 80011c4:	203e      	movs	r0, #62	@ 0x3e
 80011c6:	f7ff fe45 	bl	8000e54 <I2C_WriteReg>
    do
    {
      I2C_ReadReg(0x3E, &lowByte, 1);
 80011ca:	f107 030f 	add.w	r3, r7, #15
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	203e      	movs	r0, #62	@ 0x3e
 80011d4:	f7ff fe64 	bl	8000ea0 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &highByte, 1);
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	203f      	movs	r0, #63	@ 0x3f
 80011e2:	f7ff fe5d 	bl	8000ea0 <I2C_ReadReg>
    } while (lowByte == 0xFF && highByte == 0xFF);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2bff      	cmp	r3, #255	@ 0xff
 80011ea:	d102      	bne.n	80011f2 <Subcommands+0x82>
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d0eb      	beq.n	80011ca <Subcommands+0x5a>

    // delayUS(100000);

    I2C_ReadReg(0x40, RX_32Byte, 32); // RX_32Byte is a global variable
 80011f2:	2220      	movs	r2, #32
 80011f4:	492d      	ldr	r1, [pc, #180]	@ (80012ac <Subcommands+0x13c>)
 80011f6:	2040      	movs	r0, #64	@ 0x40
 80011f8:	f7ff fe52 	bl	8000ea0 <I2C_ReadReg>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
    TX_Buffer[1] = 0x06; // combined length of registers address and data
    I2C_WriteReg(0x60, TX_Buffer, 2);
    delayUS(1000);
  }
}
 80011fc:	e051      	b.n	80012a2 <Subcommands+0x132>
  else if (type == W)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d123      	bne.n	800124c <Subcommands+0xdc>
    TX_Reg[2] = data & 0xff;
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	75bb      	strb	r3, [r7, #22]
    I2C_WriteReg(0x3E, TX_Reg, 3);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2203      	movs	r2, #3
 8001210:	4619      	mov	r1, r3
 8001212:	203e      	movs	r0, #62	@ 0x3e
 8001214:	f7ff fe1e 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 8001218:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800121c:	f000 fc5c 	bl	8001ad8 <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 3);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2103      	movs	r1, #3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fdf0 	bl	8000e0c <Checksum>
 800122c:	4603      	mov	r3, r0
 800122e:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x05; // combined length of registers address and data
 8001230:	2305      	movs	r3, #5
 8001232:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2202      	movs	r2, #2
 800123a:	4619      	mov	r1, r3
 800123c:	2060      	movs	r0, #96	@ 0x60
 800123e:	f7ff fe09 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f000 fc47 	bl	8001ad8 <delayUS>
}
 800124a:	e02a      	b.n	80012a2 <Subcommands+0x132>
  else if (type == W2)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d127      	bne.n	80012a2 <Subcommands+0x132>
    TX_Reg[2] = data & 0xff;
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	75bb      	strb	r3, [r7, #22]
    TX_Reg[3] = (data >> 8) & 0xff;
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	75fb      	strb	r3, [r7, #23]
    I2C_WriteReg(0x3E, TX_Reg, 4);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	203e      	movs	r0, #62	@ 0x3e
 800126c:	f7ff fdf2 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001274:	f000 fc30 	bl	8001ad8 <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2104      	movs	r1, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fdc4 	bl	8000e0c <Checksum>
 8001284:	4603      	mov	r3, r0
 8001286:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x06; // combined length of registers address and data
 8001288:	2306      	movs	r3, #6
 800128a:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2202      	movs	r2, #2
 8001292:	4619      	mov	r1, r3
 8001294:	2060      	movs	r0, #96	@ 0x60
 8001296:	f7ff fddd 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800129e:	f000 fc1b 	bl	8001ad8 <delayUS>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000e4 	.word	0x200000e4

080012b0 <DirectCommands>:

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{ // type: R = read, W = write
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_data[2] = {0x00, 0x00};
 80012c2:	2300      	movs	r3, #0
 80012c4:	81bb      	strh	r3, [r7, #12]

  // little endian format
  TX_data[0] = data & 0xff;
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	733b      	strb	r3, [r7, #12]
  TX_data[1] = (data >> 8) & 0xff;
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	737b      	strb	r3, [r7, #13]

  if (type == R)
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <DirectCommands+0x40>
  {                                   // Read
    I2C_ReadReg(command, RX_data, 2); // RX_data is a global variable
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2202      	movs	r2, #2
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <DirectCommands+0x64>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fddc 	bl	8000ea0 <I2C_ReadReg>
    delayUS(2000);
 80012e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012ec:	f000 fbf4 	bl	8001ad8 <delayUS>
  }
  if (type == W)
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10a      	bne.n	800130c <DirectCommands+0x5c>
  { // write
    // Control_status, alarm_status, alarm_enable all 2 bytes long
    I2C_WriteReg(command, TX_data, 2);
 80012f6:	f107 010c 	add.w	r1, r7, #12
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fda8 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8001304:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001308:	f000 fbe6 	bl	8001ad8 <delayUS>
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000e0 	.word	0x200000e0

08001318 <BQ769x2_Init>:

void BQ769x2_Init()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  // Configures all parameters in device RAM

  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
  // See TRM for full description of CONFIG_UPDATE mode
  CommandSubcommands(SET_CFGUPDATE);
 800131c:	2090      	movs	r0, #144	@ 0x90
 800131e:	f7ff ff09 	bl	8001134 <CommandSubcommands>
  // a full description of the register and the bits will pop up on the screen.

  // 'Power Config' - 0x9234 = 0x2D80
  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
  // Set wake speed bits to 00 for best performance
  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 8001322:	2202      	movs	r2, #2
 8001324:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8001328:	f249 2034 	movw	r0, #37428	@ 0x9234
 800132c:	f7ff fde0 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
  BQ769x2_SetRegister(REG0Config, 0x01, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	f249 2037 	movw	r0, #37431	@ 0x9237
 8001338:	f7ff fdda 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
  BQ769x2_SetRegister(REG12Config, 0x0D, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	210d      	movs	r1, #13
 8001340:	f249 2036 	movw	r0, #37430	@ 0x9236
 8001344:	f7ff fdd4 	bl	8000ef0 <BQ769x2_SetRegister>
  // BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

  // Set up ALERT Pin - 0x92FC = 0x2A
  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
  BQ769x2_SetRegister(ALERTPinConfig, 0xAA, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	21aa      	movs	r1, #170	@ 0xaa
 800134c:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 8001350:	f7ff fdce 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
  BQ769x2_SetRegister(TS1Config, 0x07, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	2107      	movs	r1, #7
 8001358:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 800135c:	f7ff fdc8 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set TS3 to measure FET Temperature - 0x92FF = 0x0F
  BQ769x2_SetRegister(TS3Config, 0x07, 1);
 8001360:	2201      	movs	r2, #1
 8001362:	2107      	movs	r1, #7
 8001364:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8001368:	f7ff fdc2 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
  BQ769x2_SetRegister(HDQPinConfig, 0x00, 1); // No thermistor installed on EVM HDQ pin, so set to 0x00
 800136c:	2201      	movs	r2, #1
 800136e:	2100      	movs	r1, #0
 8001370:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 8001374:	f7ff fdbc 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8001378:	2202      	movs	r2, #2
 800137a:	f248 011f 	movw	r1, #32799	@ 0x801f
 800137e:	f249 3004 	movw	r0, #37636	@ 0x9304
 8001382:	f7ff fdb5 	bl	8000ef0 <BQ769x2_SetRegister>

  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
  // COV (over-voltage), CUV (under-voltage)
  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	21bc      	movs	r1, #188	@ 0xbc
 800138a:	f249 2061 	movw	r0, #37473	@ 0x9261
 800138e:	f7ff fdaf 	bl	8000ef0 <BQ769x2_SetRegister>

  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 8001392:	2201      	movs	r2, #1
 8001394:	21f7      	movs	r1, #247	@ 0xf7
 8001396:	f249 2062 	movw	r0, #37474	@ 0x9262
 800139a:	f7ff fda9 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
  BQ769x2_SetRegister(DefaultAlarmMask, 0xFFFF, 2);
 800139e:	2202      	movs	r2, #2
 80013a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013a4:	f249 206d 	movw	r0, #37485	@ 0x926d
 80013a8:	f7ff fda2 	bl	8000ef0 <BQ769x2_SetRegister>
  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
  // CUV Threshold is this value multiplied by 50.6mV

  // BQ769x2_SetRegister(CUVThreshold, 0x14, 1);

  BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2131      	movs	r1, #49	@ 0x31
 80013b0:	f249 2075 	movw	r0, #37493	@ 0x9275
 80013b4:	f7ff fd9c 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
  // COV Threshold is this value multiplied by 50.6mV
  // BQ769x2_SetRegister(COVThreshold, 0x55, 1);

  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2155      	movs	r1, #85	@ 0x55
 80013bc:	f249 2078 	movw	r0, #37496	@ 0x9278
 80013c0:	f7ff fd96 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
  BQ769x2_SetRegister(OCCThreshold, 0x05, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2105      	movs	r1, #5
 80013c8:	f249 2080 	movw	r0, #37504	@ 0x9280
 80013cc:	f7ff fd90 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
  BQ769x2_SetRegister(OCD1Threshold, 0x0A, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	210a      	movs	r1, #10
 80013d4:	f249 2082 	movw	r0, #37506	@ 0x9282
 80013d8:	f7ff fd8a 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
  BQ769x2_SetRegister(SCDThreshold, 0x01, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	f249 2086 	movw	r0, #37510	@ 0x9286
 80013e4:	f7ff fd84 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2103      	movs	r1, #3
 80013ec:	f249 2087 	movw	r0, #37511	@ 0x9287
 80013f0:	f7ff fd7e 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2101      	movs	r1, #1
 80013f8:	f249 2095 	movw	r0, #37525	@ 0x9295
 80013fc:	f7ff fd78 	bl	8000ef0 <BQ769x2_SetRegister>

  BQ769x2_SetRegister(MfgStatusInit, 0x0050, 2); // disable test mode
 8001400:	2202      	movs	r2, #2
 8001402:	2150      	movs	r1, #80	@ 0x50
 8001404:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001408:	f7ff fd72 	bl	8000ef0 <BQ769x2_SetRegister>

  BQ769x2_SetRegister(FETOptions, 0x3F, 1); // 0x3F
 800140c:	2201      	movs	r2, #1
 800140e:	213f      	movs	r1, #63	@ 0x3f
 8001410:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001414:	f7ff fd6c 	bl	8000ef0 <BQ769x2_SetRegister>

  // BQ769x2_SetRegister(TS1Config, 0x0B, 1);
  //  Exit CONFIGUPDATE mode  - Subcommand 0x0092

  // BQ769x2_SetRegister(CCGain, 0x41C9C800, 4);
  BQ769x2_SetRegister(DAConfiguration, 0x05, 1); // set user Amps to 1mA
 8001418:	2201      	movs	r2, #1
 800141a:	2105      	movs	r1, #5
 800141c:	f249 3003 	movw	r0, #37635	@ 0x9303
 8001420:	f7ff fd66 	bl	8000ef0 <BQ769x2_SetRegister>

  Subcommands(FET_CONTROL, 0x03, W);
 8001424:	2201      	movs	r2, #1
 8001426:	2103      	movs	r1, #3
 8001428:	2097      	movs	r0, #151	@ 0x97
 800142a:	f7ff fea1 	bl	8001170 <Subcommands>

  CommandSubcommands(EXIT_CFGUPDATE);
 800142e:	2092      	movs	r0, #146	@ 0x92
 8001430:	f7ff fe80 	bl	8001134 <CommandSubcommands>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************

// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  // Read this register to find out why the ALERT pin was asserted
  DirectCommands(AlarmStatus, 0x00, R);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2062      	movs	r0, #98	@ 0x62
 8001442:	f7ff ff35 	bl	80012b0 <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]);
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <BQ769x2_ReadAlarmStatus+0x24>)
 8001448:	785b      	ldrb	r3, [r3, #1]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b29b      	uxth	r3, r3
 800144e:	4a03      	ldr	r2, [pc, #12]	@ (800145c <BQ769x2_ReadAlarmStatus+0x24>)
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000e0 	.word	0x200000e0

08001460 <BQ769x2_ReadSafetyStatus>:

void BQ769x2_ReadSafetyStatus()
{ // good example functions
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  // Read Safety Status A/B/C and find which bits are set
  // This shows which primary protections have been triggered
  DirectCommands(SafetyStatusA, 0x00, R);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2003      	movs	r0, #3
 800146a:	f7ff ff21 	bl	80012b0 <DirectCommands>
  value_SafetyStatusA = (RX_data[1] * 256 + RX_data[0]);
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <BQ769x2_ReadSafetyStatus+0xb0>)
 8001474:	701a      	strb	r2, [r3, #0]
  // Example Fault Flags
  UV_Fault = ((0x4 & RX_data[0]) >> 2);
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <BQ769x2_ReadSafetyStatus+0xb4>)
 8001486:	701a      	strb	r2, [r3, #0]
  OV_Fault = ((0x8 & RX_data[0]) >> 3);
 8001488:	4b20      	ldr	r3, [pc, #128]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <BQ769x2_ReadSafetyStatus+0xb8>)
 8001498:	701a      	strb	r2, [r3, #0]
  SCD_Fault = ((0x8 & RX_data[1]) >> 3);
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <BQ769x2_ReadSafetyStatus+0xbc>)
 80014aa:	701a      	strb	r2, [r3, #0]
  OCD_Fault = ((0x2 & RX_data[1]) >> 1);
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <BQ769x2_ReadSafetyStatus+0xc0>)
 80014bc:	701a      	strb	r2, [r3, #0]
  DirectCommands(SafetyStatusB, 0x00, R);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2005      	movs	r0, #5
 80014c4:	f7ff fef4 	bl	80012b0 <DirectCommands>
  value_SafetyStatusB = (RX_data[1] * 256 + RX_data[0]);
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <BQ769x2_ReadSafetyStatus+0xc4>)
 80014ce:	701a      	strb	r2, [r3, #0]
  DirectCommands(SafetyStatusC, 0x00, R);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2007      	movs	r0, #7
 80014d6:	f7ff feeb 	bl	80012b0 <DirectCommands>
  value_SafetyStatusC = (RX_data[1] * 256 + RX_data[0]);
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <BQ769x2_ReadSafetyStatus+0xc8>)
 80014e0:	701a      	strb	r2, [r3, #0]
  if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <BQ769x2_ReadSafetyStatus+0xb0>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <BQ769x2_ReadSafetyStatus+0xc4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <BQ769x2_ReadSafetyStatus+0xc8>)
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	dd03      	ble.n	8001500 <BQ769x2_ReadSafetyStatus+0xa0>
  {
    ProtectionsTriggered = 1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <BQ769x2_ReadSafetyStatus+0xcc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    ProtectionsTriggered = 0;
  }
}
 80014fe:	e002      	b.n	8001506 <BQ769x2_ReadSafetyStatus+0xa6>
    ProtectionsTriggered = 0;
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <BQ769x2_ReadSafetyStatus+0xcc>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200000e0 	.word	0x200000e0
 8001510:	20000134 	.word	0x20000134
 8001514:	20000137 	.word	0x20000137
 8001518:	20000138 	.word	0x20000138
 800151c:	20000139 	.word	0x20000139
 8001520:	2000013a 	.word	0x2000013a
 8001524:	20000135 	.word	0x20000135
 8001528:	20000136 	.word	0x20000136
 800152c:	2000013b 	.word	0x2000013b

08001530 <BQ769x2_ReadVoltage>:

// ********************************* BQ769x2 Measurement Commands   *****************************************

uint16_t BQ769x2_ReadVoltage(uint8_t command, bms_context *bms)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  // RX_data is global var
  DirectCommands(command, 0x00, R);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff feb4 	bl	80012b0 <DirectCommands>
  if (command >= Cell1Voltage && command <= Cell16Voltage)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b13      	cmp	r3, #19
 800154c:	d90b      	bls.n	8001566 <BQ769x2_ReadVoltage+0x36>
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b32      	cmp	r3, #50	@ 0x32
 8001552:	d808      	bhi.n	8001566 <BQ769x2_ReadVoltage+0x36>
  {                                         // Cells 1 through 16 (0x14 to 0x32)
    return (RX_data[1] * 256 + RX_data[0]); // voltage is reported in mV
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	e00b      	b.n	800157e <BQ769x2_ReadVoltage+0x4e>
  }
  else
  {                                              // stack, Pack, LD
    return 10 * (RX_data[1] * 256 + RX_data[0]); // voltage is reported in 0.01V units
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	b29b      	uxth	r3, r3
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000e0 	.word	0x200000e0

0800158c <BQ769x2_ReadAllVoltages>:

void BQ769x2_ReadAllVoltages(bms_context *bms)
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  int cellvoltageholder = Cell1Voltage; // Cell1Voltage is 0x14
 8001594:	2314      	movs	r3, #20
 8001596:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 16; x++)
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	e011      	b.n	80015c2 <BQ769x2_ReadAllVoltages+0x36>
  { // Reads all cell voltages
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder, bms);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ffc3 	bl	8001530 <BQ769x2_ReadVoltage>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <BQ769x2_ReadAllVoltages+0x74>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3302      	adds	r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 16; x++)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3301      	adds	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	ddea      	ble.n	800159e <BQ769x2_ReadAllVoltages+0x12>
  }
  bms->Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage, bms);
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	2034      	movs	r0, #52	@ 0x34
 80015cc:	f7ff ffb0 	bl	8001530 <BQ769x2_ReadVoltage>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	821a      	strh	r2, [r3, #16]
  bms->Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage, bms);
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	2036      	movs	r0, #54	@ 0x36
 80015dc:	f7ff ffa8 	bl	8001530 <BQ769x2_ReadVoltage>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	825a      	strh	r2, [r3, #18]
  bms->LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage, bms);
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	2038      	movs	r0, #56	@ 0x38
 80015ec:	f7ff ffa0 	bl	8001530 <BQ769x2_ReadVoltage>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	829a      	strh	r2, [r3, #20]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000104 	.word	0x20000104

08001604 <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  DirectCommands(CC2Current, 0x00, R);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	203a      	movs	r0, #58	@ 0x3a
 800160e:	f7ff fe4f 	bl	80012b0 <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]); // current is reported in mA
 8001612:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <BQ769x2_ReadCurrent+0x24>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	4a03      	ldr	r2, [pc, #12]	@ (8001628 <BQ769x2_ReadCurrent+0x24>)
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4413      	add	r3, r2
 8001620:	b29b      	uxth	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000e0 	.word	0x200000e0
 800162c:	00000000 	.word	0x00000000

08001630 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  DirectCommands(command, 0x00, R);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe35 	bl	80012b0 <DirectCommands>
  // RX_data is a global var
  return (0.1 * (float)(RX_data[1] * 256 + RX_data[0])) - 273.15; // converts from 0.1K to Celcius
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <BQ769x2_ReadTemperature+0x80>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <BQ769x2_ReadTemperature+0x80>)
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	4413      	add	r3, r2
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee17 0a90 	vmov	r0, s15
 800165e:	f7ff f90d 	bl	800087c <__aeabi_f2d>
 8001662:	a30f      	add	r3, pc, #60	@ (adr r3, 80016a0 <BQ769x2_ReadTemperature+0x70>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe fe7a 	bl	8000360 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	a30c      	add	r3, pc, #48	@ (adr r3, 80016a8 <BQ769x2_ReadTemperature+0x78>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ff9f 	bl	80005bc <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff f9f9 	bl	8000a7c <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	ee07 3a90 	vmov	s15, r3
}
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3fb99999 	.word	0x3fb99999
 80016a8:	66666666 	.word	0x66666666
 80016ac:	40711266 	.word	0x40711266
 80016b0:	200000e0 	.word	0x200000e0

080016b4 <BQ769x2_ReadPassQ>:

float BQ769x2_ReadPassQ(){ // Read Accumulated Charge and Time from DASTATUS6
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

		Subcommands(DASTATUS6, 0x00, R);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2076      	movs	r0, #118	@ 0x76
 80016c0:	f7ff fd56 	bl	8001170 <Subcommands>

		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	061a      	lsls	r2, r3, #24
 80016ca:	4b28      	ldr	r3, [pc, #160]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016cc:	789b      	ldrb	r3, [r3, #2]
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	431a      	orrs	r2, r3
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 80016d2:	4b26      	ldr	r3, [pc, #152]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 80016d8:	4313      	orrs	r3, r2
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 80016da:	4a24      	ldr	r2, [pc, #144]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	461a      	mov	r2, r3
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 80016e2:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <BQ769x2_ReadPassQ+0xbc>)
 80016e4:	601a      	str	r2, [r3, #0]
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016e8:	79db      	ldrb	r3, [r3, #7]
 80016ea:	061a      	lsls	r2, r3, #24
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016ee:	799b      	ldrb	r3, [r3, #6]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016f6:	795b      	ldrb	r3, [r3, #5]
 80016f8:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 80016fa:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 80016fc:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 80016fe:	7912      	ldrb	r2, [r2, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	461a      	mov	r2, r3
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <BQ769x2_ReadPassQ+0xc0>)
 8001706:	601a      	str	r2, [r3, #0]
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 800170a:	7adb      	ldrb	r3, [r3, #11]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 8001710:	7a9b      	ldrb	r3, [r3, #10]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 8001718:	7a5b      	ldrb	r3, [r3, #9]
 800171a:	021b      	lsls	r3, r3, #8
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 800171c:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 800171e:	4a13      	ldr	r2, [pc, #76]	@ (800176c <BQ769x2_ReadPassQ+0xb8>)
 8001720:	7a12      	ldrb	r2, [r2, #8]
 8001722:	4313      	orrs	r3, r2
 8001724:	461a      	mov	r2, r3
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <BQ769x2_ReadPassQ+0xc4>)
 8001728:	601a      	str	r2, [r3, #0]
//	    else{
//	    	charge = AccumulatedCharge_Int;
//	    }

	    //charge = 0xFFFFFFFF - AccumulatedCharge_Int;
	    float totalAccumulatedCharge_mAh = (float)AccumulatedCharge_Int + ((float)AccumulatedCharge_Frac / FRAC_DIVISOR);
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <BQ769x2_ReadPassQ+0xbc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <BQ769x2_ReadPassQ+0xc0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001742:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 800177c <BQ769x2_ReadPassQ+0xc8>
 8001746:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	edc7 7a01 	vstr	s15, [r7, #4]
	    //float totalAccumulatedCharge_Ah = totalAccumulatedCharge_mAh / 1000.0f;

	    coulumbs = totalAccumulatedCharge_mAh;
 8001752:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <BQ769x2_ReadPassQ+0xcc>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6013      	str	r3, [r2, #0]
	    return coulumbs;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <BQ769x2_ReadPassQ+0xcc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	ee07 3a90 	vmov	s15, r3
}
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000e4 	.word	0x200000e4
 8001770:	2000013c 	.word	0x2000013c
 8001774:	20000140 	.word	0x20000140
 8001778:	20000144 	.word	0x20000144
 800177c:	4f800000 	.word	0x4f800000
 8001780:	20000148 	.word	0x20000148

08001784 <bms_charge_error>:
}

// ********************************* End of BQ769x2 Measurement Commands   *****************************************

bool bms_charge_error()
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ProtectionsTriggered && (OV_Fault || SCD_Fault || OCD_Fault);
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <bms_charge_error+0x3c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00d      	beq.n	80017ac <bms_charge_error+0x28>
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <bms_charge_error+0x40>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <bms_charge_error+0x24>
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <bms_charge_error+0x44>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d103      	bne.n	80017a8 <bms_charge_error+0x24>
 80017a0:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <bms_charge_error+0x48>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <bms_charge_error+0x28>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <bms_charge_error+0x2a>
 80017ac:	2300      	movs	r3, #0
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000013b 	.word	0x2000013b
 80017c4:	20000138 	.word	0x20000138
 80017c8:	20000139 	.word	0x20000139
 80017cc:	2000013a 	.word	0x2000013a

080017d0 <bms_discharge_error>:

bool bms_discharge_error()
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ProtectionsTriggered && (UV_Fault || SCD_Fault || OCD_Fault);
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <bms_discharge_error+0x3c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00d      	beq.n	80017f8 <bms_discharge_error+0x28>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <bms_discharge_error+0x40>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <bms_discharge_error+0x24>
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <bms_discharge_error+0x44>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <bms_discharge_error+0x24>
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <bms_discharge_error+0x48>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <bms_discharge_error+0x28>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <bms_discharge_error+0x2a>
 80017f8:	2300      	movs	r3, #0
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000013b 	.word	0x2000013b
 8001810:	20000137 	.word	0x20000137
 8001814:	20000139 	.word	0x20000139
 8001818:	2000013a 	.word	0x2000013a

0800181c <bms_charge_allowed>:

bool bms_charge_allowed(bms_context *bms)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  return !bms->battery_full && !bms_charge_error() && bms->charge_enable;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00d      	beq.n	800184e <bms_charge_allowed+0x32>
 8001832:	f7ff ffa7 	bl	8001784 <bms_charge_error>
 8001836:	4603      	mov	r3, r0
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <bms_charge_allowed+0x32>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	785b      	ldrb	r3, [r3, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <bms_charge_allowed+0x32>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <bms_charge_allowed+0x34>
 800184e:	2300      	movs	r3, #0
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	b2db      	uxtb	r3, r3
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <bms_discharge_allowed>:

bool bms_discharge_allowed(bms_context *bms)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  // Use logical AND (&&) for combining boolean conditions
  return !bms->battery_empty && !bms_discharge_error() && bms->discharge_enable;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	f083 0301 	eor.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00d      	beq.n	8001890 <bms_discharge_allowed+0x32>
 8001874:	f7ff ffac 	bl	80017d0 <bms_discharge_error>
 8001878:	4603      	mov	r3, r0
 800187a:	f083 0301 	eor.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <bms_discharge_allowed+0x32>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	789b      	ldrb	r3, [r3, #2]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <bms_discharge_allowed+0x32>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <bms_discharge_allowed+0x34>
 8001890:	2300      	movs	r3, #0
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	b2db      	uxtb	r3, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <bms_state_machine>:

void bms_state_machine(bms_context *bms)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	BQ769x2_ReadSafetyStatus();
 80018a8:	f7ff fdda 	bl	8001460 <BQ769x2_ReadSafetyStatus>
  switch (bms->bms_state)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d87e      	bhi.n	80019b2 <bms_state_machine+0x112>
 80018b4:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <bms_state_machine+0x1c>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018d1 	.word	0x080018d1
 80018c0:	08001905 	.word	0x08001905
 80018c4:	08001939 	.word	0x08001939
 80018c8:	0800196d 	.word	0x0800196d
 80018cc:	080019a1 	.word	0x080019a1
  {
  case BMS_STATE_OFF:
    if (bms_discharge_allowed(bms))
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffc4 	bl	800185e <bms_discharge_allowed>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <bms_state_machine+0x4a>
    {
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_DIS, true);
      CommandSubcommands(ALL_FETS_ON);
 80018dc:	2096      	movs	r0, #150	@ 0x96
 80018de:	f7ff fc29 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_DIS;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2202      	movs	r2, #2
 80018e6:	701a      	strb	r2, [r3, #0]
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_CHG, true);
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_CHG;
      // LOG_INF("OFF -> CHG (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 80018e8:	e05c      	b.n	80019a4 <bms_state_machine+0x104>
    else if (bms_charge_allowed(bms))
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ff96 	bl	800181c <bms_charge_allowed>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d056      	beq.n	80019a4 <bms_state_machine+0x104>
      CommandSubcommands(ALL_FETS_ON);
 80018f6:	2096      	movs	r0, #150	@ 0x96
 80018f8:	f7ff fc1c 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_CHG;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
    break;
 8001902:	e04f      	b.n	80019a4 <bms_state_machine+0x104>

  case BMS_STATE_CHG:
    if (!bms_charge_allowed(bms))
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff89 	bl	800181c <bms_charge_allowed>
 800190a:	4603      	mov	r3, r0
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <bms_state_machine+0x7e>
    {
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_CHG, false);
      /* DIS switch may be on on because of ideal diode control */
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_DIS, false);
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_OFF;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    {
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_NORMAL;
      // LOG_INF("CHG -> NORMAL (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 800191c:	e044      	b.n	80019a8 <bms_state_machine+0x108>
    else if (bms_discharge_allowed(bms))
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff9d 	bl	800185e <bms_discharge_allowed>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03e      	beq.n	80019a8 <bms_state_machine+0x108>
      CommandSubcommands(ALL_FETS_ON);
 800192a:	2096      	movs	r0, #150	@ 0x96
 800192c:	f7ff fc02 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_NORMAL;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	701a      	strb	r2, [r3, #0]
    break;
 8001936:	e037      	b.n	80019a8 <bms_state_machine+0x108>

  case BMS_STATE_DIS:
    if (!bms_discharge_allowed(bms))
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff90 	bl	800185e <bms_discharge_allowed>
 800193e:	4603      	mov	r3, r0
 8001940:	f083 0301 	eor.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <bms_state_machine+0xb2>
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_OFF;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
    {
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_NORMAL;
      // LOG_INF("DIS -> NORMAL (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001950:	e02c      	b.n	80019ac <bms_state_machine+0x10c>
    else if (bms_charge_allowed(bms))
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ff62 	bl	800181c <bms_charge_allowed>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d026      	beq.n	80019ac <bms_state_machine+0x10c>
      CommandSubcommands(ALL_FETS_ON);
 800195e:	2096      	movs	r0, #150	@ 0x96
 8001960:	f7ff fbe8 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_NORMAL;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	701a      	strb	r2, [r3, #0]
    break;
 800196a:	e01f      	b.n	80019ac <bms_state_machine+0x10c>

  case BMS_STATE_NORMAL:
    if (!bms_discharge_allowed(bms))
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff76 	bl	800185e <bms_discharge_allowed>
 8001972:	4603      	mov	r3, r0
 8001974:	f083 0301 	eor.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <bms_state_machine+0xe6>
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_CHG;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_DIS;
      // LOG_INF("NORMAL -> DIS (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001984:	e014      	b.n	80019b0 <bms_state_machine+0x110>
    else if (!bms_charge_allowed(bms))
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff48 	bl	800181c <bms_charge_allowed>
 800198c:	4603      	mov	r3, r0
 800198e:	f083 0301 	eor.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <bms_state_machine+0x110>
      bms->bms_state = BMS_STATE_DIS;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
    break;
 800199e:	e007      	b.n	80019b0 <bms_state_machine+0x110>

  case BMS_STATE_SHUTDOWN:
    /* do nothing and wait until shutdown is completed */
    break;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <bms_state_machine+0x112>
    break;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <bms_state_machine+0x112>
    break;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <bms_state_machine+0x112>
    break;
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <bms_state_machine+0x112>
    break;
 80019b0:	bf00      	nop
  }
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop

080019bc <get_val_lookup_table>:
};
// Define NUM_PAIRS based on the size of the array
const size_t NUM_PAIRS = sizeof(g_ocv_q_released_mah_table) / sizeof(g_ocv_q_released_mah_table[0]);

uint16_t get_val_lookup_table(const VoltageCapacityPair *table, size_t numPairs, uint16_t in_value)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	@ 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	4613      	mov	r3, r2
 80019c8:	80fb      	strh	r3, [r7, #6]
    uint16_t x_input_diff;
    uint16_t x_diff;
    uint16_t y_input_diff;
    uint16_t y_return;

    if (numPairs == 0)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <get_val_lookup_table+0x18>
    {
        return 0; // Handle zero pairs gracefully
 80019d0:	2300      	movs	r3, #0
 80019d2:	e07b      	b.n	8001acc <get_val_lookup_table+0x110>
    }

    if (in_value <= table[0].voltage_mV)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d802      	bhi.n	80019e4 <get_val_lookup_table+0x28>
    {
        return table[0].capacity_mAh;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	885b      	ldrh	r3, [r3, #2]
 80019e2:	e073      	b.n	8001acc <get_val_lookup_table+0x110>
    }

    if (in_value >= table[numPairs - 1].voltage_mV)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019ea:	3b01      	subs	r3, #1
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4413      	add	r3, r2
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	88fa      	ldrh	r2, [r7, #6]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d308      	bcc.n	8001a0c <get_val_lookup_table+0x50>
    {
        return table[numPairs - 1].capacity_mAh;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a00:	3b01      	subs	r3, #1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	885b      	ldrh	r3, [r3, #2]
 8001a0a:	e05f      	b.n	8001acc <get_val_lookup_table+0x110>
    }

    for (size_t i = 0; i < numPairs - 1; i++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	e055      	b.n	8001abe <get_val_lookup_table+0x102>
    {
        uint16_t x_low = table[i].voltage_mV;
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	83fb      	strh	r3, [r7, #30]
        uint16_t x_high = table[i + 1].voltage_mV;
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	3301      	adds	r3, #1
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	83bb      	strh	r3, [r7, #28]

        if (in_value >= x_low && in_value <= x_high)
 8001a2c:	88fa      	ldrh	r2, [r7, #6]
 8001a2e:	8bfb      	ldrh	r3, [r7, #30]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d341      	bcc.n	8001ab8 <get_val_lookup_table+0xfc>
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	8bbb      	ldrh	r3, [r7, #28]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d83d      	bhi.n	8001ab8 <get_val_lookup_table+0xfc>
        {
            y_low = table[i].capacity_mAh;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	885b      	ldrh	r3, [r3, #2]
 8001a46:	837b      	strh	r3, [r7, #26]
            y_high = table[i + 1].capacity_mAh;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	833b      	strh	r3, [r7, #24]

            if (in_value == x_low)
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	8bfb      	ldrh	r3, [r7, #30]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d101      	bne.n	8001a62 <get_val_lookup_table+0xa6>
            {
                return y_low; // Exact match with a known x value
 8001a5e:	8b7b      	ldrh	r3, [r7, #26]
 8001a60:	e034      	b.n	8001acc <get_val_lookup_table+0x110>
            }

            x_input_diff = in_value - x_low;
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	82fb      	strh	r3, [r7, #22]
            x_diff = x_high - x_low;
 8001a6a:	8bba      	ldrh	r2, [r7, #28]
 8001a6c:	8bfb      	ldrh	r3, [r7, #30]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	82bb      	strh	r3, [r7, #20]

            if (y_high > y_low)
 8001a72:	8b3a      	ldrh	r2, [r7, #24]
 8001a74:	8b7b      	ldrh	r3, [r7, #26]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d90e      	bls.n	8001a98 <get_val_lookup_table+0xdc>
            {
                y_input_diff = ((y_high - y_low) * x_input_diff) / x_diff;
 8001a7a:	8b3a      	ldrh	r2, [r7, #24]
 8001a7c:	8b7b      	ldrh	r3, [r7, #26]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	8afa      	ldrh	r2, [r7, #22]
 8001a82:	fb03 f202 	mul.w	r2, r3, r2
 8001a86:	8abb      	ldrh	r3, [r7, #20]
 8001a88:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a8c:	827b      	strh	r3, [r7, #18]
                y_return = y_low + y_input_diff;
 8001a8e:	8b7a      	ldrh	r2, [r7, #26]
 8001a90:	8a7b      	ldrh	r3, [r7, #18]
 8001a92:	4413      	add	r3, r2
 8001a94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001a96:	e00d      	b.n	8001ab4 <get_val_lookup_table+0xf8>
            }
            else
            {
                y_input_diff = ((y_low - y_high) * x_input_diff) / x_diff;
 8001a98:	8b7a      	ldrh	r2, [r7, #26]
 8001a9a:	8b3b      	ldrh	r3, [r7, #24]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	8afa      	ldrh	r2, [r7, #22]
 8001aa0:	fb03 f202 	mul.w	r2, r3, r2
 8001aa4:	8abb      	ldrh	r3, [r7, #20]
 8001aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aaa:	827b      	strh	r3, [r7, #18]
                y_return = y_low - y_input_diff;
 8001aac:	8b7a      	ldrh	r2, [r7, #26]
 8001aae:	8a7b      	ldrh	r3, [r7, #18]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            }

            return y_return;
 8001ab4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ab6:	e009      	b.n	8001acc <get_val_lookup_table+0x110>
    for (size_t i = 0; i < numPairs - 1; i++)
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	3301      	adds	r3, #1
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	6a3a      	ldr	r2, [r7, #32]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3a4      	bcc.n	8001a12 <get_val_lookup_table+0x56>
        }
    }

    return table[0].capacity_mAh; // Fallback return
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	885b      	ldrh	r3, [r3, #2]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	372c      	adds	r7, #44	@ 0x2c
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <delayUS>:
static void soc_task(void *parameters);
static void read_voltage_task(void *parameters);
static void bms_state_machine_task(void *parameters);

void delayUS(uint32_t us)
{                                    // Sets the delay in microseconds.
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim10, 0); // set the counter value a 0
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <delayUS+0x2c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim10) < us)
 8001ae8:	bf00      	nop
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <delayUS+0x2c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d8f9      	bhi.n	8001aea <delayUS+0x12>
    ; // wait for the counter to reach the us input in the parameter
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	200002b8 	.word	0x200002b8

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b08f      	sub	sp, #60	@ 0x3c
 8001b0c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8001b0e:	4ba2      	ldr	r3, [pc, #648]	@ (8001d98 <main+0x290>)
 8001b10:	f107 0408 	add.w	r4, r7, #8
 8001b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1a:	f003 fa6b 	bl	8004ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1e:	f000 f96f 	bl	8001e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b22:	f000 fadd 	bl	80020e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b26:	f000 fab3 	bl	8002090 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b2a:	f000 fa5d 	bl	8001fe8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b2e:	f000 fa01 	bl	8001f34 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b32:	f000 fa83 	bl	800203c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b36:	f000 f9cf 	bl	8001ed8 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001b3a:	f000 fa31 	bl	8001fa0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Enable cycle count for STM32

  DWT_CTRL |= (1 << 0);
 8001b3e:	4b97      	ldr	r3, [pc, #604]	@ (8001d9c <main+0x294>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a96      	ldr	r2, [pc, #600]	@ (8001d9c <main+0x294>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8001b4a:	f00a f8c1 	bl	800bcd0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001b4e:	f00b f92d 	bl	800cdac <SEGGER_SYSVIEW_Start>

  // Reset wiznet module
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2108      	movs	r1, #8
 8001b56:	4892      	ldr	r0, [pc, #584]	@ (8001da0 <main+0x298>)
 8001b58:	f004 f812 	bl	8005b80 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001b5c:	2064      	movs	r0, #100	@ 0x64
 8001b5e:	f003 fa8b 	bl	8005078 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2108      	movs	r1, #8
 8001b66:	488e      	ldr	r0, [pc, #568]	@ (8001da0 <main+0x298>)
 8001b68:	f004 f80a 	bl	8005b80 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001b6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b70:	f003 fa82 	bl	8005078 <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001b74:	498b      	ldr	r1, [pc, #556]	@ (8001da4 <main+0x29c>)
 8001b76:	488c      	ldr	r0, [pc, #560]	@ (8001da8 <main+0x2a0>)
 8001b78:	f002 fcfa 	bl	8004570 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001b7c:	498b      	ldr	r1, [pc, #556]	@ (8001dac <main+0x2a4>)
 8001b7e:	488c      	ldr	r0, [pc, #560]	@ (8001db0 <main+0x2a8>)
 8001b80:	f002 fd1c 	bl	80045bc <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f002 fd42 	bl	8004614 <ctlwizchip>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b96:	d101      	bne.n	8001b9c <main+0x94>
  {

    while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <main+0x90>
      ;
  }

  /* Network initialization */
  network_init();
 8001b9c:	f000 fdfe 	bl	800279c <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 8001ba0:	4884      	ldr	r0, [pc, #528]	@ (8001db4 <main+0x2ac>)
 8001ba2:	f003 f911 	bl	8004dc8 <wizchip_setnetinfo>
  // PRINT_NETINFO(gWIZNETINFO);

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8001ba6:	4983      	ldr	r1, [pc, #524]	@ (8001db4 <main+0x2ac>)
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f002 fe13 	bl	80047d4 <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	713b      	strb	r3, [r7, #4]
  phyconf.duplex = PHY_DUPLEX_FULL;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	71fb      	strb	r3, [r7, #7]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71bb      	strb	r3, [r7, #6]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 8001bba:	2301      	movs	r3, #1
 8001bbc:	717b      	strb	r3, [r7, #5]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	200a      	movs	r0, #10
 8001bc4:	f002 fd26 	bl	8004614 <ctlwizchip>
  //*** End Phy Configuration
  // Init Timer
  HAL_TIM_Base_Start(&htim10);
 8001bc8:	487b      	ldr	r0, [pc, #492]	@ (8001db8 <main+0x2b0>)
 8001bca:	f006 f9af 	bl	8007f2c <HAL_TIM_Base_Start>
  delayUS(10000);
 8001bce:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001bd2:	f7ff ff81 	bl	8001ad8 <delayUS>

  // init bms

  bms1.battery_full = 1;
 8001bd6:	4b79      	ldr	r3, [pc, #484]	@ (8001dbc <main+0x2b4>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	70da      	strb	r2, [r3, #3]
  bms1.charge_enable = 1;
 8001bdc:	4b77      	ldr	r3, [pc, #476]	@ (8001dbc <main+0x2b4>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	705a      	strb	r2, [r3, #1]
  bms1.discharge_enable = 1;
 8001be2:	4b76      	ldr	r3, [pc, #472]	@ (8001dbc <main+0x2b4>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	709a      	strb	r2, [r3, #2]

  // BQ hard and soft reset
  HAL_GPIO_WritePin(BQ_RESET_GPIO_Port, BQ_RESET_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bee:	4874      	ldr	r0, [pc, #464]	@ (8001dc0 <main+0x2b8>)
 8001bf0:	f003 ffc6 	bl	8005b80 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001bf4:	200a      	movs	r0, #10
 8001bf6:	f003 fa3f 	bl	8005078 <HAL_Delay>
  HAL_GPIO_WritePin(BQ_RESET_GPIO_Port, BQ_RESET_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c00:	486f      	ldr	r0, [pc, #444]	@ (8001dc0 <main+0x2b8>)
 8001c02:	f003 ffbd 	bl	8005b80 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8001c06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c0a:	f003 fa35 	bl	8005078 <HAL_Delay>
  CommandSubcommands(BQ769x2_RESET); // Resets the BQ769x2 registers
 8001c0e:	2012      	movs	r0, #18
 8001c10:	f7ff fa90 	bl	8001134 <CommandSubcommands>
  HAL_Delay(1200);
 8001c14:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001c18:	f003 fa2e 	bl	8005078 <HAL_Delay>
  BQ769x2_Init(); // Configure all of the BQ769x2 register settings
 8001c1c:	f7ff fb7c 	bl	8001318 <BQ769x2_Init>
  delayUS(10000);
 8001c20:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c24:	f7ff ff58 	bl	8001ad8 <delayUS>
  CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 8001c28:	209a      	movs	r0, #154	@ 0x9a
 8001c2a:	f7ff fa83 	bl	8001134 <CommandSubcommands>
                                     // demonstrate full-speed measurements in Normal mode.

  delayUS(60000);
 8001c2e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c32:	f7ff ff51 	bl	8001ad8 <delayUS>
  delayUS(60000);
 8001c36:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c3a:	f7ff ff4d 	bl	8001ad8 <delayUS>
  delayUS(60000);
 8001c3e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c42:	f7ff ff49 	bl	8001ad8 <delayUS>
  delayUS(60000);
 8001c46:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c4a:	f7ff ff45 	bl	8001ad8 <delayUS>

  uint16_t manuStatus = BQ769x2_ReadRegister(MANUFACTURINGSTATUS);
 8001c4e:	2057      	movs	r0, #87	@ 0x57
 8001c50:	f7ff fa20 	bl	8001094 <BQ769x2_ReadRegister>
 8001c54:	4603      	mov	r3, r0
 8001c56:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint16_t manuInit = BQ769x2_ReadRegister(MfgStatusInit);
 8001c58:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001c5c:	f7ff fa1a 	bl	8001094 <BQ769x2_ReadRegister>
 8001c60:	4603      	mov	r3, r0
 8001c62:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t manuData = BQ769x2_ReadRegister(MANU_DATA);
 8001c64:	2070      	movs	r0, #112	@ 0x70
 8001c66:	f7ff fa15 	bl	8001094 <BQ769x2_ReadRegister>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t FET_options = BQ769x2_ReadRegister(FETOptions);
 8001c6e:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001c72:	f7ff fa0f 	bl	8001094 <BQ769x2_ReadRegister>
 8001c76:	4603      	mov	r3, r0
 8001c78:	853b      	strh	r3, [r7, #40]	@ 0x28

  AlarmBits = BQ769x2_ReadAlarmStatus();
 8001c7a:	f7ff fbdd 	bl	8001438 <BQ769x2_ReadAlarmStatus>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <main+0x2bc>)
 8001c84:	801a      	strh	r2, [r3, #0]
  // CommandSubcommands(RESET_PASSQ);
  //CommandSubcommands(ALL_FETS_ON);
  data_ready_semaphore = xSemaphoreCreateBinary();
 8001c86:	2203      	movs	r2, #3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f007 f980 	bl	8008f90 <xQueueGenericCreate>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc8 <main+0x2c0>)
 8001c94:	6013      	str	r3, [r2, #0]
  data_ready_semaphore = xSemaphoreCreateBinary();
 8001c96:	2203      	movs	r2, #3
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f007 f978 	bl	8008f90 <xQueueGenericCreate>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a49      	ldr	r2, [pc, #292]	@ (8001dc8 <main+0x2c0>)
 8001ca4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(modbus_comm_task, "modbus_comm_task", 200, NULL, 2, &modbus_task_handle);
 8001ca6:	4b49      	ldr	r3, [pc, #292]	@ (8001dcc <main+0x2c4>)
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2302      	movs	r3, #2
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	22c8      	movs	r2, #200	@ 0xc8
 8001cb2:	4947      	ldr	r1, [pc, #284]	@ (8001dd0 <main+0x2c8>)
 8001cb4:	4847      	ldr	r0, [pc, #284]	@ (8001dd4 <main+0x2cc>)
 8001cb6:	f007 ffc5 	bl	8009c44 <xTaskCreate>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a46      	ldr	r2, [pc, #280]	@ (8001dd8 <main+0x2d0>)
 8001cbe:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001cc0:	4b45      	ldr	r3, [pc, #276]	@ (8001dd8 <main+0x2d0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d00b      	beq.n	8001ce0 <main+0x1d8>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <main+0x1d4>

  status = xTaskCreate(soc_task, "soc_handle", 200, NULL, 3, &soc_task_handle);
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ddc <main+0x2d4>)
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	22c8      	movs	r2, #200	@ 0xc8
 8001cec:	493c      	ldr	r1, [pc, #240]	@ (8001de0 <main+0x2d8>)
 8001cee:	483d      	ldr	r0, [pc, #244]	@ (8001de4 <main+0x2dc>)
 8001cf0:	f007 ffa8 	bl	8009c44 <xTaskCreate>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a38      	ldr	r2, [pc, #224]	@ (8001dd8 <main+0x2d0>)
 8001cf8:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	@ (8001dd8 <main+0x2d0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d00b      	beq.n	8001d1a <main+0x212>
        __asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	623b      	str	r3, [r7, #32]
    }
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <main+0x20e>

  status = xTaskCreate(read_voltage_task, "read_voltage_task", 200, NULL, 2, &read_voltage_task_handle);
 8001d1a:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <main+0x2e0>)
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	22c8      	movs	r2, #200	@ 0xc8
 8001d26:	4931      	ldr	r1, [pc, #196]	@ (8001dec <main+0x2e4>)
 8001d28:	4831      	ldr	r0, [pc, #196]	@ (8001df0 <main+0x2e8>)
 8001d2a:	f007 ff8b 	bl	8009c44 <xTaskCreate>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <main+0x2d0>)
 8001d32:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d34:	4b28      	ldr	r3, [pc, #160]	@ (8001dd8 <main+0x2d0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d00b      	beq.n	8001d54 <main+0x24c>
        __asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	61fb      	str	r3, [r7, #28]
    }
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <main+0x248>

  status = xTaskCreate(bms_state_machine_task, "bms_state machine_task", 200, (void *)&bms1, 3, &bms_state_machine_handle);
 8001d54:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <main+0x2ec>)
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2303      	movs	r3, #3
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <main+0x2b4>)
 8001d5e:	22c8      	movs	r2, #200	@ 0xc8
 8001d60:	4925      	ldr	r1, [pc, #148]	@ (8001df8 <main+0x2f0>)
 8001d62:	4826      	ldr	r0, [pc, #152]	@ (8001dfc <main+0x2f4>)
 8001d64:	f007 ff6e 	bl	8009c44 <xTaskCreate>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <main+0x2d0>)
 8001d6c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <main+0x2d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d00b      	beq.n	8001d8e <main+0x286>
        __asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	61bb      	str	r3, [r7, #24]
    }
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	e7fd      	b.n	8001d8a <main+0x282>


  vTaskStartScheduler();
 8001d8e:	f008 f8f7 	bl	8009f80 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <main+0x28a>
 8001d96:	bf00      	nop
 8001d98:	0800eacc 	.word	0x0800eacc
 8001d9c:	e0001000 	.word	0xe0001000
 8001da0:	40020000 	.word	0x40020000
 8001da4:	08002759 	.word	0x08002759
 8001da8:	08002741 	.word	0x08002741
 8001dac:	08002771 	.word	0x08002771
 8001db0:	0800278b 	.word	0x0800278b
 8001db4:	20000004 	.word	0x20000004
 8001db8:	200002b8 	.word	0x200002b8
 8001dbc:	20000494 	.word	0x20000494
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	20000132 	.word	0x20000132
 8001dc8:	20000568 	.word	0x20000568
 8001dcc:	20000554 	.word	0x20000554
 8001dd0:	0800ea80 	.word	0x0800ea80
 8001dd4:	08002219 	.word	0x08002219
 8001dd8:	20000564 	.word	0x20000564
 8001ddc:	20000558 	.word	0x20000558
 8001de0:	0800ea94 	.word	0x0800ea94
 8001de4:	08002465 	.word	0x08002465
 8001de8:	2000055c 	.word	0x2000055c
 8001dec:	0800eaa0 	.word	0x0800eaa0
 8001df0:	0800254d 	.word	0x0800254d
 8001df4:	20000560 	.word	0x20000560
 8001df8:	0800eab4 	.word	0x0800eab4
 8001dfc:	0800251d 	.word	0x0800251d

08001e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	@ 0x50
 8001e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	2234      	movs	r2, #52	@ 0x34
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00b ffc4 	bl	800dd9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e66:	2302      	movs	r3, #2
 8001e68:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e74:	23a8      	movs	r3, #168	@ 0xa8
 8001e76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fa4b 	bl	8007324 <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e94:	f000 fd18 	bl	80028c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e98:	230f      	movs	r3, #15
 8001e9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ea4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 feba 	bl	8006c30 <HAL_RCC_ClockConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ec2:	f000 fd01 	bl	80028c8 <Error_Handler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3750      	adds	r7, #80	@ 0x50
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	@ (8001f2c <MX_I2C1_Init+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <MX_I2C1_Init+0x58>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f16:	f003 fe67 	bl	8005be8 <HAL_I2C_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f20:	f000 fcd2 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2000014c 	.word	0x2000014c
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f3a:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <MX_SPI1_Init+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f80:	220a      	movs	r2, #10
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f86:	f005 fc6b 	bl	8007860 <HAL_SPI_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f90:	f000 fc9a 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000260 	.word	0x20000260
 8001f9c:	40013000 	.word	0x40013000

08001fa0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <MX_TIM10_Init+0x44>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fcc:	f005 ff5e 	bl	8007e8c <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fd6:	f000 fc77 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002b8 	.word	0x200002b8
 8001fe4:	40014400 	.word	0x40014400

08001fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <MX_USART1_UART_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002020:	f006 fa34 	bl	800848c <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 fc4d 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000300 	.word	0x20000300
 8002038:	40011000 	.word	0x40011000

0800203c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_USART2_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002074:	f006 fa5a 	bl	800852c <HAL_HalfDuplex_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 fc23 	bl	80028c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000348 	.word	0x20000348
 800208c:	40004400 	.word	0x40004400

08002090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_DMA_Init+0x4c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <MX_DMA_Init+0x4c>)
 80020a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_DMA_Init+0x4c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	200b      	movs	r0, #11
 80020b8:	f003 f8ba 	bl	8005230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020bc:	200b      	movs	r0, #11
 80020be:	f003 f8d3 	bl	8005268 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2011      	movs	r0, #17
 80020c8:	f003 f8b2 	bl	8005230 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020cc:	2011      	movs	r0, #17
 80020ce:	f003 f8cb 	bl	8005268 <HAL_NVIC_EnableIRQ>

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <MX_GPIO_Init+0x128>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a42      	ldr	r2, [pc, #264]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b40      	ldr	r3, [pc, #256]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a3b      	ldr	r2, [pc, #236]	@ (8002208 <MX_GPIO_Init+0x128>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b39      	ldr	r3, [pc, #228]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a34      	ldr	r2, [pc, #208]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b32      	ldr	r3, [pc, #200]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a2d      	ldr	r2, [pc, #180]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <MX_GPIO_Init+0x128>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2118      	movs	r1, #24
 800216a:	4828      	ldr	r0, [pc, #160]	@ (800220c <MX_GPIO_Init+0x12c>)
 800216c:	f003 fd08 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SPI_INT_Pin, GPIO_PIN_RESET);
 8002170:	2200      	movs	r2, #0
 8002172:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002176:	4826      	ldr	r0, [pc, #152]	@ (8002210 <MX_GPIO_Init+0x130>)
 8002178:	f003 fd02 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BQ_RESET_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8002182:	4824      	ldr	r0, [pc, #144]	@ (8002214 <MX_GPIO_Init+0x134>)
 8002184:	f003 fcfc 	bl	8005b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin;
 8002188:	2318      	movs	r3, #24
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	481b      	ldr	r0, [pc, #108]	@ (800220c <MX_GPIO_Init+0x12c>)
 80021a0:	f003 fb5a 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|SPI_INT_Pin;
 80021a4:	f248 0303 	movw	r3, #32771	@ 0x8003
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4814      	ldr	r0, [pc, #80]	@ (8002210 <MX_GPIO_Init+0x130>)
 80021be:	f003 fb4b 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_RESET_Pin */
  GPIO_InitStruct.Pin = BQ_RESET_Pin;
 80021c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BQ_RESET_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	480e      	ldr	r0, [pc, #56]	@ (8002214 <MX_GPIO_Init+0x134>)
 80021dc:	f003 fb3c 	bl	8005858 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80021e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4806      	ldr	r0, [pc, #24]	@ (8002214 <MX_GPIO_Init+0x134>)
 80021fa:	f003 fb2d 	bl	8005858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	@ 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800

08002218 <modbus_comm_task>:

/* USER CODE BEGIN 4 */

void modbus_comm_task(void *parameters)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  bool start_modbus = false;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]

  PRINT_STR("MODBUS WHILE LOOP\r\n");
 8002224:	2364      	movs	r3, #100	@ 0x64
 8002226:	2213      	movs	r2, #19
 8002228:	4975      	ldr	r1, [pc, #468]	@ (8002400 <modbus_comm_task+0x1e8>)
 800222a:	4876      	ldr	r0, [pc, #472]	@ (8002404 <modbus_comm_task+0x1ec>)
 800222c:	f006 f9d6 	bl	80085dc <HAL_UART_Transmit>

  // Keep checking for Ethernet connection before starting Modbus communication
  while (!start_modbus)
 8002230:	e010      	b.n	8002254 <modbus_comm_task+0x3c>
  {
    if (PHYStatusCheck() == Ethernet_OK)
 8002232:	f000 fac5 	bl	80027c0 <PHYStatusCheck>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <modbus_comm_task+0x2e>
    {
      PrintPHYConf();      // Print Ethernet PHY configuration
 800223c:	f000 faee 	bl	800281c <PrintPHYConf>
      start_modbus = true; // Set flag to true to start Modbus communication
 8002240:	2301      	movs	r3, #1
 8002242:	75fb      	strb	r3, [r7, #23]
 8002244:	e006      	b.n	8002254 <modbus_comm_task+0x3c>
    }
    else
    {
      // Wait for a short time before checking again to prevent busy-waiting
      printf("Waiting for Ethernet connection...\r\n");
 8002246:	4870      	ldr	r0, [pc, #448]	@ (8002408 <modbus_comm_task+0x1f0>)
 8002248:	f00b fcb8 	bl	800dbbc <puts>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second before rechecking
 800224c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002250:	f007 fe5c 	bl	8009f0c <vTaskDelay>
  while (!start_modbus)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <modbus_comm_task+0x1a>
    }
  }

  // Now start Modbus communication since Ethernet is connected
  while (start_modbus)
 8002260:	e0c5      	b.n	80023ee <modbus_comm_task+0x1d6>
  {
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002262:	2101      	movs	r1, #1
 8002264:	4869      	ldr	r0, [pc, #420]	@ (800240c <modbus_comm_task+0x1f4>)
 8002266:	f003 fca4 	bl	8005bb2 <HAL_GPIO_TogglePin>
    printf("\r\nInitializing server socket\r\n");
 800226a:	4869      	ldr	r0, [pc, #420]	@ (8002410 <modbus_comm_task+0x1f8>)
 800226c:	f00b fca6 	bl	800dbbc <puts>
    vTaskDelay(pdMS_TO_TICKS(500));
 8002270:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002274:	f007 fe4a 	bl	8009f0c <vTaskDelay>

    // Parameters in order: socket_id, protocol TCP or UDP, Port number, Flags=0
    // Return value is socket ID on success
    if (socket(1, Sn_MR_TCP, LISTEN_PORT, 0) != 1)
 8002278:	2300      	movs	r3, #0
 800227a:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 800227e:	2101      	movs	r1, #1
 8002280:	2001      	movs	r0, #1
 8002282:	f001 fc53 	bl	8003b2c <socket>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d007      	beq.n	800229c <modbus_comm_task+0x84>
    {
      // Error
      printf("Cannot create Socket!\r\n");
 800228c:	4861      	ldr	r0, [pc, #388]	@ (8002414 <modbus_comm_task+0x1fc>)
 800228e:	f00b fc95 	bl	800dbbc <puts>
      vTaskDelay(pdMS_TO_TICKS(500)); // Delay before retrying
 8002292:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002296:	f007 fe39 	bl	8009f0c <vTaskDelay>
      continue;                       // Retry initialization
 800229a:	e0a8      	b.n	80023ee <modbus_comm_task+0x1d6>
    }

    // Success
    printf("Socket Created Successfully!\r\n");
 800229c:	485e      	ldr	r0, [pc, #376]	@ (8002418 <modbus_comm_task+0x200>)
 800229e:	f00b fc8d 	bl	800dbbc <puts>

    uint8_t socket_io_mode = SOCK_IO_BLOCK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	72fb      	strb	r3, [r7, #11]
    ctlsocket(1, CS_SET_IOMODE, &socket_io_mode); // Set blocking IO mode
 80022a6:	f107 030b 	add.w	r3, r7, #11
 80022aa:	461a      	mov	r2, r3
 80022ac:	2100      	movs	r1, #0
 80022ae:	2001      	movs	r0, #1
 80022b0:	f002 f83a 	bl	8004328 <ctlsocket>

    printf("Start listening on port %d!\r\n", LISTEN_PORT);
 80022b4:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80022b8:	4858      	ldr	r0, [pc, #352]	@ (800241c <modbus_comm_task+0x204>)
 80022ba:	f00b fc17 	bl	800daec <iprintf>
    printf("Waiting for a client connection.\r\n");
 80022be:	4858      	ldr	r0, [pc, #352]	@ (8002420 <modbus_comm_task+0x208>)
 80022c0:	f00b fc7c 	bl	800dbbc <puts>

    // Make it a passive socket (i.e., listen for connection)
    if (listen(1) != SOCK_OK) // Our socket ID is 1 (W5500 has 8 sockets from 0-7)
 80022c4:	2001      	movs	r0, #1
 80022c6:	f001 fdb3 	bl	8003e30 <listen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d009      	beq.n	80022e4 <modbus_comm_task+0xcc>
    {
      // Error
      printf("Cannot listen on port %d", LISTEN_PORT);
 80022d0:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80022d4:	4853      	ldr	r0, [pc, #332]	@ (8002424 <modbus_comm_task+0x20c>)
 80022d6:	f00b fc09 	bl	800daec <iprintf>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 80022da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022de:	f007 fe15 	bl	8009f0c <vTaskDelay>
      continue;                        // Retry initialization
 80022e2:	e084      	b.n	80023ee <modbus_comm_task+0x1d6>
    }

    uint8_t sr = 0x00;                                               // Socket status register
 80022e4:	2300      	movs	r3, #0
 80022e6:	75bb      	strb	r3, [r7, #22]
    TickType_t xTimeOut = xTaskGetTickCount() + pdMS_TO_TICKS(5000); // 5-second timeout
 80022e8:	f007 ff5c 	bl	800a1a4 <xTaskGetTickCount>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80022f2:	3308      	adds	r3, #8
 80022f4:	613b      	str	r3, [r7, #16]

    // Wait for a client connection with timeout
    do
    {
      sr = getSn_SR(1);               // Read status reg (SR of socket 1)
 80022f6:	f44f 704a 	mov.w	r0, #808	@ 0x328
 80022fa:	f001 f977 	bl	80035ec <WIZCHIP_READ>
 80022fe:	4603      	mov	r3, r0
 8002300:	75bb      	strb	r3, [r7, #22]
      vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 8002302:	2064      	movs	r0, #100	@ 0x64
 8002304:	f007 fe02 	bl	8009f0c <vTaskDelay>
    } while (sr != 0x17 && sr != 0x00 && xTaskGetTickCount() < xTimeOut);
 8002308:	7dbb      	ldrb	r3, [r7, #22]
 800230a:	2b17      	cmp	r3, #23
 800230c:	d008      	beq.n	8002320 <modbus_comm_task+0x108>
 800230e:	7dbb      	ldrb	r3, [r7, #22]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <modbus_comm_task+0x108>
 8002314:	f007 ff46 	bl	800a1a4 <xTaskGetTickCount>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4293      	cmp	r3, r2
 800231e:	d8ea      	bhi.n	80022f6 <modbus_comm_task+0xde>

    if (sr == 0x00)
 8002320:	7dbb      	ldrb	r3, [r7, #22]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <modbus_comm_task+0x11e>
    {
      printf("Some error occurred on server socket. Retrying...\r\n");
 8002326:	4840      	ldr	r0, [pc, #256]	@ (8002428 <modbus_comm_task+0x210>)
 8002328:	f00b fc48 	bl	800dbbc <puts>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 800232c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002330:	f007 fdec 	bl	8009f0c <vTaskDelay>
      continue;                        // Retry initialization
 8002334:	e05b      	b.n	80023ee <modbus_comm_task+0x1d6>
    }

    if (sr == 0x17)
 8002336:	7dbb      	ldrb	r3, [r7, #22]
 8002338:	2b17      	cmp	r3, #23
 800233a:	d158      	bne.n	80023ee <modbus_comm_task+0x1d6>
    {
      // We come here only when a client has connected.
      // Now we can read data from the socket
      printf("A client connected!\r\n");
 800233c:	483b      	ldr	r0, [pc, #236]	@ (800242c <modbus_comm_task+0x214>)
 800233e:	f00b fc3d 	bl	800dbbc <puts>
      printf("Waiting for Client Data...!\r\n");
 8002342:	483b      	ldr	r0, [pc, #236]	@ (8002430 <modbus_comm_task+0x218>)
 8002344:	f00b fc3a 	bl	800dbbc <puts>

      while (1)
      {
        int len = recv(1, RX_buffer, RX_buffer_length);
 8002348:	2280      	movs	r2, #128	@ 0x80
 800234a:	493a      	ldr	r1, [pc, #232]	@ (8002434 <modbus_comm_task+0x21c>)
 800234c:	2001      	movs	r0, #1
 800234e:	f001 ff37 	bl	80041c0 <recv>
 8002352:	60f8      	str	r0, [r7, #12]
        if (len == SOCKERR_SOCKSTATUS)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f113 0f07 	cmn.w	r3, #7
 800235a:	d106      	bne.n	800236a <modbus_comm_task+0x152>
        {
          // Client has disconnected
          printf("Client has disconnected\r\n");
 800235c:	4836      	ldr	r0, [pc, #216]	@ (8002438 <modbus_comm_task+0x220>)
 800235e:	f00b fc2d 	bl	800dbbc <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8002362:	4836      	ldr	r0, [pc, #216]	@ (800243c <modbus_comm_task+0x224>)
 8002364:	f00b fc2a 	bl	800dbbc <puts>
          break; // Exit client communication loop
 8002368:	e041      	b.n	80023ee <modbus_comm_task+0x1d6>
        }

        RX_buffer[len] = '\0';
 800236a:	4a32      	ldr	r2, [pc, #200]	@ (8002434 <modbus_comm_task+0x21c>)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4413      	add	r3, r2
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
        printf("Received %d bytes from client\r\n", len);
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	4832      	ldr	r0, [pc, #200]	@ (8002440 <modbus_comm_task+0x228>)
 8002378:	f00b fbb8 	bl	800daec <iprintf>
        printf("Data Received: %s", RX_buffer);
 800237c:	492d      	ldr	r1, [pc, #180]	@ (8002434 <modbus_comm_task+0x21c>)
 800237e:	4831      	ldr	r0, [pc, #196]	@ (8002444 <modbus_comm_task+0x22c>)
 8002380:	f00b fbb4 	bl	800daec <iprintf>

        memset(TX_buffer, 0, sizeof(TX_buffer));
 8002384:	2280      	movs	r2, #128	@ 0x80
 8002386:	2100      	movs	r1, #0
 8002388:	482f      	ldr	r0, [pc, #188]	@ (8002448 <modbus_comm_task+0x230>)
 800238a:	f00b fd07 	bl	800dd9c <memset>

        if (xSemaphoreTake(data_ready_semaphore, portMAX_DELAY) == pdTRUE)
 800238e:	4b2f      	ldr	r3, [pc, #188]	@ (800244c <modbus_comm_task+0x234>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002396:	4618      	mov	r0, r3
 8002398:	f007 f986 	bl	80096a8 <xQueueSemaphoreTake>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <modbus_comm_task+0x196>
        {
        	modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 80023a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <modbus_comm_task+0x238>)
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4928      	ldr	r1, [pc, #160]	@ (8002448 <modbus_comm_task+0x230>)
 80023a8:	4822      	ldr	r0, [pc, #136]	@ (8002434 <modbus_comm_task+0x21c>)
 80023aa:	f000 fac5 	bl	8002938 <modbus_receive>
        }

        vTaskDelay(pdMS_TO_TICKS(500));
 80023ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023b2:	f007 fdab 	bl	8009f0c <vTaskDelay>

        printf("\r\nECHO sent back to client\r\n");
 80023b6:	4827      	ldr	r0, [pc, #156]	@ (8002454 <modbus_comm_task+0x23c>)
 80023b8:	f00b fc00 	bl	800dbbc <puts>

        // Look for quit message and quit if received
        if (strcmp((char *)RX_buffer, "QUIT") == 0)
 80023bc:	4926      	ldr	r1, [pc, #152]	@ (8002458 <modbus_comm_task+0x240>)
 80023be:	481d      	ldr	r0, [pc, #116]	@ (8002434 <modbus_comm_task+0x21c>)
 80023c0:	f7fd ff70 	bl	80002a4 <strcmp>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <modbus_comm_task+0x1cc>
        {
          printf("Received QUIT command from client\r\n");
 80023ca:	4824      	ldr	r0, [pc, #144]	@ (800245c <modbus_comm_task+0x244>)
 80023cc:	f00b fbf6 	bl	800dbbc <puts>
          printf("Disconnecting...\r\n");
 80023d0:	4823      	ldr	r0, [pc, #140]	@ (8002460 <modbus_comm_task+0x248>)
 80023d2:	f00b fbf3 	bl	800dbbc <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 80023d6:	4819      	ldr	r0, [pc, #100]	@ (800243c <modbus_comm_task+0x224>)
 80023d8:	f00b fbf0 	bl	800dbbc <puts>
          disconnect(1); // Disconnect from the client
 80023dc:	2001      	movs	r0, #1
 80023de:	f001 fd81 	bl	8003ee4 <disconnect>
          break;         // Exit client communication loop
 80023e2:	e004      	b.n	80023ee <modbus_comm_task+0x1d6>
        }

        vTaskDelay(pdMS_TO_TICKS(500)); // Allow other tasks to run
 80023e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023e8:	f007 fd90 	bl	8009f0c <vTaskDelay>
      {
 80023ec:	e7ac      	b.n	8002348 <modbus_comm_task+0x130>
  while (start_modbus)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f47f af36 	bne.w	8002262 <modbus_comm_task+0x4a>
      } // While loop (as long as client is connected)
    } // If block, client connect success
  } // Outer while loop
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	0800eadc 	.word	0x0800eadc
 8002404:	20000348 	.word	0x20000348
 8002408:	0800eaf0 	.word	0x0800eaf0
 800240c:	40020400 	.word	0x40020400
 8002410:	0800eb14 	.word	0x0800eb14
 8002414:	0800eb34 	.word	0x0800eb34
 8002418:	0800eb4c 	.word	0x0800eb4c
 800241c:	0800eb6c 	.word	0x0800eb6c
 8002420:	0800eb8c 	.word	0x0800eb8c
 8002424:	0800ebb0 	.word	0x0800ebb0
 8002428:	0800ebcc 	.word	0x0800ebcc
 800242c:	0800ec00 	.word	0x0800ec00
 8002430:	0800ec18 	.word	0x0800ec18
 8002434:	20000410 	.word	0x20000410
 8002438:	0800ec38 	.word	0x0800ec38
 800243c:	0800ec54 	.word	0x0800ec54
 8002440:	0800ec6c 	.word	0x0800ec6c
 8002444:	0800ec8c 	.word	0x0800ec8c
 8002448:	20000390 	.word	0x20000390
 800244c:	20000568 	.word	0x20000568
 8002450:	200004d4 	.word	0x200004d4
 8002454:	0800eca0 	.word	0x0800eca0
 8002458:	0800ecbc 	.word	0x0800ecbc
 800245c:	0800ecc4 	.word	0x0800ecc4
 8002460:	0800ece8 	.word	0x0800ece8

08002464 <soc_task>:

static void soc_task(void *parameters)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	bool start_soc = false;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
	if (xSemaphoreTake(data_ready_semaphore, portMAX_DELAY) == pdTRUE)
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <soc_task+0x98>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002478:	4618      	mov	r0, r3
 800247a:	f007 f915 	bl	80096a8 <xQueueSemaphoreTake>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d132      	bne.n	80024ea <soc_task+0x86>
	{
		BQ769x2_ReadAllVoltages(&bms1);
 8002484:	481e      	ldr	r0, [pc, #120]	@ (8002500 <soc_task+0x9c>)
 8002486:	f7ff f881 	bl	800158c <BQ769x2_ReadAllVoltages>
		get_initial_soc();
 800248a:	f000 fbcf 	bl	8002c2c <get_initial_soc>
		CommandSubcommands(RESET_PASSQ);
 800248e:	2082      	movs	r0, #130	@ 0x82
 8002490:	f7fe fe50 	bl	8001134 <CommandSubcommands>
		start_soc = true;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
	}

  while (start_soc)
 8002498:	e027      	b.n	80024ea <soc_task+0x86>
  {
	soc_ready = false;
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <soc_task+0xa0>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 80024a0:	2364      	movs	r3, #100	@ 0x64
 80024a2:	2212      	movs	r2, #18
 80024a4:	4918      	ldr	r1, [pc, #96]	@ (8002508 <soc_task+0xa4>)
 80024a6:	4819      	ldr	r0, [pc, #100]	@ (800250c <soc_task+0xa8>)
 80024a8:	f006 f898 	bl	80085dc <HAL_UART_Transmit>
    uint16_t soc = soc_k_update_get(coulumbs);
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <soc_task+0xac>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	f000 fc5f 	bl	8002d78 <soc_k_update_get>
 80024ba:	4603      	mov	r3, r0
 80024bc:	81bb      	strh	r3, [r7, #12]
    holding_register[21] = soc;
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <soc_task+0xb0>)
 80024c0:	89bb      	ldrh	r3, [r7, #12]
 80024c2:	8553      	strh	r3, [r2, #42]	@ 0x2a
    holding_register[22] = coulumbs;
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <soc_task+0xac>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ce:	ee17 3a90 	vmov	r3, s15
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <soc_task+0xb0>)
 80024d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    BQ769x2_ReadPassQ();
 80024d8:	f7ff f8ec 	bl	80016b4 <BQ769x2_ReadPassQ>
    //xSemaphoreGive(soc_ready_semaphore);
    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80024dc:	2102      	movs	r1, #2
 80024de:	480e      	ldr	r0, [pc, #56]	@ (8002518 <soc_task+0xb4>)
 80024e0:	f003 fb67 	bl	8005bb2 <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(100));
 80024e4:	2064      	movs	r0, #100	@ 0x64
 80024e6:	f007 fd11 	bl	8009f0c <vTaskDelay>
  while (start_soc)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1d4      	bne.n	800249a <soc_task+0x36>
    // HAL_Delay(500);

    // taskYIELD();
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000568 	.word	0x20000568
 8002500:	20000494 	.word	0x20000494
 8002504:	20000490 	.word	0x20000490
 8002508:	0800ecfc 	.word	0x0800ecfc
 800250c:	20000348 	.word	0x20000348
 8002510:	20000148 	.word	0x20000148
 8002514:	200004d4 	.word	0x200004d4
 8002518:	40020400 	.word	0x40020400

0800251c <bms_state_machine_task>:

static void bms_state_machine_task(void *parameters)

{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  bms_context *bms = (bms_context *)parameters;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60fb      	str	r3, [r7, #12]
  bms->bms_state = BMS_STATE_OFF;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    bms_state_machine(&bms1);
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <bms_state_machine_task+0x2c>)
 8002530:	f7ff f9b6 	bl	80018a0 <bms_state_machine>
    uint16_t current = BQ769x2_ReadCurrent();
 8002534:	f7ff f866 	bl	8001604 <BQ769x2_ReadCurrent>
 8002538:	4603      	mov	r3, r0
 800253a:	817b      	strh	r3, [r7, #10]
    vTaskDelay(pdMS_TO_TICKS(100));
 800253c:	2064      	movs	r0, #100	@ 0x64
 800253e:	f007 fce5 	bl	8009f0c <vTaskDelay>
  {
 8002542:	bf00      	nop
 8002544:	e7f3      	b.n	800252e <bms_state_machine_task+0x12>
 8002546:	bf00      	nop
 8002548:	20000494 	.word	0x20000494

0800254c <read_voltage_task>:
    // taskYIELD();
  }
}

static void read_voltage_task(void *parameters)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

	uint16_t counter = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	81fb      	strh	r3, [r7, #14]
  while (1)
  {

    BQ769x2_ReadAllVoltages(&bms1);
 8002558:	4867      	ldr	r0, [pc, #412]	@ (80026f8 <read_voltage_task+0x1ac>)
 800255a:	f7ff f817 	bl	800158c <BQ769x2_ReadAllVoltages>
    uint16_t stackVoltage = BQ769x2_ReadVoltage(StackVoltage, &bms1);
 800255e:	4966      	ldr	r1, [pc, #408]	@ (80026f8 <read_voltage_task+0x1ac>)
 8002560:	2034      	movs	r0, #52	@ 0x34
 8002562:	f7fe ffe5 	bl	8001530 <BQ769x2_ReadVoltage>
 8002566:	4603      	mov	r3, r0
 8002568:	81bb      	strh	r3, [r7, #12]
    //    holding_register[0] = CellVoltage[0];
    //    holding_register[1] = CellVoltage[1];
    // HAL_Delay(5000);
    // uint16_t alarm;
    // alarm = BQ769x2_ReadAlarmStatus();
    AlarmBits = BQ769x2_ReadAlarmStatus();
 800256a:	f7fe ff65 	bl	8001438 <BQ769x2_ReadAlarmStatus>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	4b62      	ldr	r3, [pc, #392]	@ (80026fc <read_voltage_task+0x1b0>)
 8002574:	801a      	strh	r2, [r3, #0]
        if (AlarmBits & 0x80)
 8002576:	4b61      	ldr	r3, [pc, #388]	@ (80026fc <read_voltage_task+0x1b0>)
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80b5 	beq.w	80026ee <read_voltage_task+0x1a2>
        { // Check if FULLSCAN is complete. If set, new measurements are available
          counter += 1;
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	3301      	adds	r3, #1
 8002588:	81fb      	strh	r3, [r7, #14]
        	BQ769x2_ReadAllVoltages(&bms1);
 800258a:	485b      	ldr	r0, [pc, #364]	@ (80026f8 <read_voltage_task+0x1ac>)
 800258c:	f7fe fffe 	bl	800158c <BQ769x2_ReadAllVoltages>
          // float coulombs = BQ769x2_ReadPassQ();
          Pack_Current = BQ769x2_ReadCurrent();
 8002590:	f7ff f838 	bl	8001604 <BQ769x2_ReadCurrent>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <read_voltage_task+0x1b4>)
 800259a:	801a      	strh	r2, [r3, #0]
          Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 800259c:	2070      	movs	r0, #112	@ 0x70
 800259e:	f7ff f847 	bl	8001630 <BQ769x2_ReadTemperature>
 80025a2:	eef0 7a40 	vmov.f32	s15, s0
 80025a6:	4b57      	ldr	r3, [pc, #348]	@ (8002704 <read_voltage_task+0x1b8>)
 80025a8:	edc3 7a00 	vstr	s15, [r3]
          Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 80025ac:	2074      	movs	r0, #116	@ 0x74
 80025ae:	f7ff f83f 	bl	8001630 <BQ769x2_ReadTemperature>
 80025b2:	eef0 7a40 	vmov.f32	s15, s0
 80025b6:	4b53      	ldr	r3, [pc, #332]	@ (8002704 <read_voltage_task+0x1b8>)
 80025b8:	edc3 7a01 	vstr	s15, [r3, #4]

          holding_register[0] = voltage_to_percentage(CellVoltage[0]);
 80025bc:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <read_voltage_task+0x1bc>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 fcf7 	bl	8002fb4 <voltage_to_percentage>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b50      	ldr	r3, [pc, #320]	@ (800270c <read_voltage_task+0x1c0>)
 80025cc:	801a      	strh	r2, [r3, #0]
          holding_register[1] = voltage_to_percentage(CellVoltage[1]);
 80025ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002708 <read_voltage_task+0x1bc>)
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fcee 	bl	8002fb4 <voltage_to_percentage>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4b4b      	ldr	r3, [pc, #300]	@ (800270c <read_voltage_task+0x1c0>)
 80025de:	805a      	strh	r2, [r3, #2]
          holding_register[2] = voltage_to_percentage(CellVoltage[2]);
 80025e0:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <read_voltage_task+0x1bc>)
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fce5 	bl	8002fb4 <voltage_to_percentage>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b47      	ldr	r3, [pc, #284]	@ (800270c <read_voltage_task+0x1c0>)
 80025f0:	809a      	strh	r2, [r3, #4]
          holding_register[3] = voltage_to_percentage(CellVoltage[3]);
 80025f2:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <read_voltage_task+0x1bc>)
 80025f4:	88db      	ldrh	r3, [r3, #6]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fcdc 	bl	8002fb4 <voltage_to_percentage>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	4b42      	ldr	r3, [pc, #264]	@ (800270c <read_voltage_task+0x1c0>)
 8002602:	80da      	strh	r2, [r3, #6]
          holding_register[4] = voltage_to_percentage(CellVoltage[4]);
 8002604:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <read_voltage_task+0x1bc>)
 8002606:	891b      	ldrh	r3, [r3, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fcd3 	bl	8002fb4 <voltage_to_percentage>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	4b3e      	ldr	r3, [pc, #248]	@ (800270c <read_voltage_task+0x1c0>)
 8002614:	811a      	strh	r2, [r3, #8]
          holding_register[5] = voltage_to_percentage(CellVoltage[5]);
 8002616:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <read_voltage_task+0x1bc>)
 8002618:	895b      	ldrh	r3, [r3, #10]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fcca 	bl	8002fb4 <voltage_to_percentage>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b39      	ldr	r3, [pc, #228]	@ (800270c <read_voltage_task+0x1c0>)
 8002626:	815a      	strh	r2, [r3, #10]
          holding_register[6] = voltage_to_percentage(CellVoltage[6]);
 8002628:	4b37      	ldr	r3, [pc, #220]	@ (8002708 <read_voltage_task+0x1bc>)
 800262a:	899b      	ldrh	r3, [r3, #12]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 fcc1 	bl	8002fb4 <voltage_to_percentage>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b35      	ldr	r3, [pc, #212]	@ (800270c <read_voltage_task+0x1c0>)
 8002638:	819a      	strh	r2, [r3, #12]
          holding_register[7] = voltage_to_percentage(CellVoltage[7]);
 800263a:	4b33      	ldr	r3, [pc, #204]	@ (8002708 <read_voltage_task+0x1bc>)
 800263c:	89db      	ldrh	r3, [r3, #14]
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fcb8 	bl	8002fb4 <voltage_to_percentage>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b30      	ldr	r3, [pc, #192]	@ (800270c <read_voltage_task+0x1c0>)
 800264a:	81da      	strh	r2, [r3, #14]
          holding_register[8] = voltage_to_percentage(CellVoltage[15]);
 800264c:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <read_voltage_task+0x1bc>)
 800264e:	8bdb      	ldrh	r3, [r3, #30]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fcaf 	bl	8002fb4 <voltage_to_percentage>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	4b2c      	ldr	r3, [pc, #176]	@ (800270c <read_voltage_task+0x1c0>)
 800265c:	821a      	strh	r2, [r3, #16]



          holding_register[9] = (CellVoltage[0]);
 800265e:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <read_voltage_task+0x1bc>)
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <read_voltage_task+0x1c0>)
 8002664:	825a      	strh	r2, [r3, #18]
          holding_register[10] = (CellVoltage[1]);
 8002666:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <read_voltage_task+0x1bc>)
 8002668:	885a      	ldrh	r2, [r3, #2]
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <read_voltage_task+0x1c0>)
 800266c:	829a      	strh	r2, [r3, #20]
          holding_register[11] = (CellVoltage[2]);
 800266e:	4b26      	ldr	r3, [pc, #152]	@ (8002708 <read_voltage_task+0x1bc>)
 8002670:	889a      	ldrh	r2, [r3, #4]
 8002672:	4b26      	ldr	r3, [pc, #152]	@ (800270c <read_voltage_task+0x1c0>)
 8002674:	82da      	strh	r2, [r3, #22]
          holding_register[12] = (CellVoltage[3]);
 8002676:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <read_voltage_task+0x1bc>)
 8002678:	88da      	ldrh	r2, [r3, #6]
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <read_voltage_task+0x1c0>)
 800267c:	831a      	strh	r2, [r3, #24]
          holding_register[13] = (CellVoltage[4]);
 800267e:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <read_voltage_task+0x1bc>)
 8002680:	891a      	ldrh	r2, [r3, #8]
 8002682:	4b22      	ldr	r3, [pc, #136]	@ (800270c <read_voltage_task+0x1c0>)
 8002684:	835a      	strh	r2, [r3, #26]
          holding_register[14] = (CellVoltage[5]);
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <read_voltage_task+0x1bc>)
 8002688:	895a      	ldrh	r2, [r3, #10]
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <read_voltage_task+0x1c0>)
 800268c:	839a      	strh	r2, [r3, #28]
          holding_register[15] = (CellVoltage[6]);
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <read_voltage_task+0x1bc>)
 8002690:	899a      	ldrh	r2, [r3, #12]
 8002692:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <read_voltage_task+0x1c0>)
 8002694:	83da      	strh	r2, [r3, #30]
          holding_register[16] = (CellVoltage[7]);
 8002696:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <read_voltage_task+0x1bc>)
 8002698:	89da      	ldrh	r2, [r3, #14]
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <read_voltage_task+0x1c0>)
 800269c:	841a      	strh	r2, [r3, #32]
          holding_register[17] = (CellVoltage[15]);
 800269e:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <read_voltage_task+0x1bc>)
 80026a0:	8bda      	ldrh	r2, [r3, #30]
 80026a2:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <read_voltage_task+0x1c0>)
 80026a4:	845a      	strh	r2, [r3, #34]	@ 0x22

          holding_register[18] = stackVoltage;
 80026a6:	4a19      	ldr	r2, [pc, #100]	@ (800270c <read_voltage_task+0x1c0>)
 80026a8:	89bb      	ldrh	r3, [r7, #12]
 80026aa:	8493      	strh	r3, [r2, #36]	@ 0x24
          holding_register[19] = BQ769x2_ReadCurrent();
 80026ac:	f7fe ffaa 	bl	8001604 <BQ769x2_ReadCurrent>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <read_voltage_task+0x1c0>)
 80026b6:	84da      	strh	r2, [r3, #38]	@ 0x26
          uint16_t current = BQ769x2_ReadCurrent();
 80026b8:	f7fe ffa4 	bl	8001604 <BQ769x2_ReadCurrent>
 80026bc:	4603      	mov	r3, r0
 80026be:	817b      	strh	r3, [r7, #10]
          holding_register[20] = BQ769x2_ReadVoltage(PACKPinVoltage, &bms1);
 80026c0:	490d      	ldr	r1, [pc, #52]	@ (80026f8 <read_voltage_task+0x1ac>)
 80026c2:	2036      	movs	r0, #54	@ 0x36
 80026c4:	f7fe ff34 	bl	8001530 <BQ769x2_ReadVoltage>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <read_voltage_task+0x1c0>)
 80026ce:	851a      	strh	r2, [r3, #40]	@ 0x28

          DirectCommands(AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit
 80026d0:	2201      	movs	r2, #1
 80026d2:	2180      	movs	r1, #128	@ 0x80
 80026d4:	2062      	movs	r0, #98	@ 0x62
 80026d6:	f7fe fdeb 	bl	80012b0 <DirectCommands>
                                                  //	  			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);

          //	  				  HAL_Delay(100);

          if(counter > 2){
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d906      	bls.n	80026ee <read_voltage_task+0x1a2>
        	  xSemaphoreGive(data_ready_semaphore);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <read_voltage_task+0x1c4>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	2300      	movs	r3, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	f006 fcdd 	bl	80090a8 <xQueueGenericSend>
          }

        }
    vTaskDelay(pdMS_TO_TICKS(1000));
 80026ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026f2:	f007 fc0b 	bl	8009f0c <vTaskDelay>
  {
 80026f6:	e72f      	b.n	8002558 <read_voltage_task+0xc>
 80026f8:	20000494 	.word	0x20000494
 80026fc:	20000132 	.word	0x20000132
 8002700:	20000130 	.word	0x20000130
 8002704:	20000124 	.word	0x20000124
 8002708:	20000104 	.word	0x20000104
 800270c:	200004d4 	.word	0x200004d4
 8002710:	20000568 	.word	0x20000568

08002714 <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 800271e:	f107 020f 	add.w	r2, r7, #15
 8002722:	1df9      	adds	r1, r7, #7
 8002724:	2332      	movs	r3, #50	@ 0x32
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2301      	movs	r3, #1
 800272a:	4804      	ldr	r0, [pc, #16]	@ (800273c <W5500_rxtx+0x28>)
 800272c:	f005 f921 	bl	8007972 <HAL_SPI_TransmitReceive>

  return (rxdata);
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000260 	.word	0x20000260

08002740 <wizchip_select>:

void wizchip_select(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  W5500_select();
 8002744:	2200      	movs	r2, #0
 8002746:	2110      	movs	r1, #16
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <wizchip_select+0x14>)
 800274a:	f003 fa19 	bl	8005b80 <HAL_GPIO_WritePin>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40020000 	.word	0x40020000

08002758 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  W5500_release();
 800275c:	2201      	movs	r2, #1
 800275e:	2110      	movs	r1, #16
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <wizchip_deselect+0x14>)
 8002762:	f003 fa0d 	bl	8005b80 <HAL_GPIO_WritePin>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40020000 	.word	0x40020000

08002770 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ffc9 	bl	8002714 <W5500_rxtx>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <wizchip_read>:

uint8_t wizchip_read()
{
 800278a:	b580      	push	{r7, lr}
 800278c:	af00      	add	r7, sp, #0
  return W5500_rx();
 800278e:	20ff      	movs	r0, #255	@ 0xff
 8002790:	f7ff ffc0 	bl	8002714 <W5500_rxtx>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80027a2:	4906      	ldr	r1, [pc, #24]	@ (80027bc <network_init+0x20>)
 80027a4:	2000      	movs	r0, #0
 80027a6:	f002 f815 	bl	80047d4 <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 80027aa:	463b      	mov	r3, r7
 80027ac:	4619      	mov	r1, r3
 80027ae:	2008      	movs	r0, #8
 80027b0:	f001 ff30 	bl	8004614 <ctlwizchip>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000004 	.word	0x20000004

080027c0 <PHYStatusCheck>:
  UWriteData(ch);
  return ch;
}

ErrorState PHYStatusCheck(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 80027c6:	4811      	ldr	r0, [pc, #68]	@ (800280c <PHYStatusCheck+0x4c>)
 80027c8:	f00b f990 	bl	800daec <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	4619      	mov	r1, r3
 80027d0:	200f      	movs	r0, #15
 80027d2:	f001 ff1f 	bl	8004614 <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <PHYStatusCheck+0x34>
    {
      printf("NO Cable Connected!");
 80027dc:	480c      	ldr	r0, [pc, #48]	@ (8002810 <PHYStatusCheck+0x50>)
 80027de:	f00b f985 	bl	800daec <iprintf>

      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 80027e2:	2201      	movs	r2, #1
 80027e4:	2102      	movs	r1, #2
 80027e6:	480b      	ldr	r0, [pc, #44]	@ (8002814 <PHYStatusCheck+0x54>)
 80027e8:	f003 f9ca 	bl	8005b80 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80027ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027f0:	f002 fc42 	bl	8005078 <HAL_Delay>
      // HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
      // HAL_Delay(200);
    }
  } while (tmp == PHY_LINK_OFF);
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0e5      	beq.n	80027c6 <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 80027fa:	4807      	ldr	r0, [pc, #28]	@ (8002818 <PHYStatusCheck+0x58>)
 80027fc:	f00b f976 	bl	800daec <iprintf>

  return Ethernet_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	0800ed10 	.word	0x0800ed10
 8002810:	0800ed38 	.word	0x0800ed38
 8002814:	40020400 	.word	0x40020400
 8002818:	0800ed4c 	.word	0x0800ed4c

0800281c <PrintPHYConf>:

void PrintPHYConf(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4619      	mov	r1, r3
 8002826:	200b      	movs	r0, #11
 8002828:	f001 fef4 	bl	8004614 <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 800282c:	793b      	ldrb	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 8002832:	4814      	ldr	r0, [pc, #80]	@ (8002884 <PrintPHYConf+0x68>)
 8002834:	f00b f95a 	bl	800daec <iprintf>
 8002838:	e002      	b.n	8002840 <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 800283a:	4813      	ldr	r0, [pc, #76]	@ (8002888 <PrintPHYConf+0x6c>)
 800283c:	f00b f956 	bl	800daec <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 8002840:	797b      	ldrb	r3, [r7, #5]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d103      	bne.n	800284e <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 8002846:	4811      	ldr	r0, [pc, #68]	@ (800288c <PrintPHYConf+0x70>)
 8002848:	f00b f950 	bl	800daec <iprintf>
 800284c:	e002      	b.n	8002854 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 800284e:	4810      	ldr	r0, [pc, #64]	@ (8002890 <PrintPHYConf+0x74>)
 8002850:	f00b f94c 	bl	800daec <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d103      	bne.n	8002862 <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 800285a:	480e      	ldr	r0, [pc, #56]	@ (8002894 <PrintPHYConf+0x78>)
 800285c:	f00b f946 	bl	800daec <iprintf>
 8002860:	e002      	b.n	8002868 <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 8002862:	480d      	ldr	r0, [pc, #52]	@ (8002898 <PrintPHYConf+0x7c>)
 8002864:	f00b f942 	bl	800daec <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 800286e:	480b      	ldr	r0, [pc, #44]	@ (800289c <PrintPHYConf+0x80>)
 8002870:	f00b f93c 	bl	800daec <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 8002874:	e002      	b.n	800287c <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 8002876:	480a      	ldr	r0, [pc, #40]	@ (80028a0 <PrintPHYConf+0x84>)
 8002878:	f00b f938 	bl	800daec <iprintf>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0800ed68 	.word	0x0800ed68
 8002888:	0800ed8c 	.word	0x0800ed8c
 800288c:	0800edac 	.word	0x0800edac
 8002890:	0800edc8 	.word	0x0800edc8
 8002894:	0800ede8 	.word	0x0800ede8
 8002898:	0800edfc 	.word	0x0800edfc
 800289c:	0800ee10 	.word	0x0800ee10
 80028a0:	0800ee20 	.word	0x0800ee20

080028a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028b6:	f002 fbbf 	bl	8005038 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40001000 	.word	0x40001000

080028c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
}
 80028ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <Error_Handler+0x8>

080028d4 <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 80028ea:	89fb      	ldrh	r3, [r7, #14]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	460a      	mov	r2, r1
 800290c:	71fb      	strb	r3, [r7, #7]
 800290e:	4613      	mov	r3, r2
 8002910:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 8002920:	79bb      	ldrb	r3, [r7, #6]
 8002922:	b29a      	uxth	r2, r3
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	4313      	orrs	r3, r2
 8002928:	81fb      	strh	r3, [r7, #14]

	return tmp;
 800292a:	89fb      	ldrh	r3, [r7, #14]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b08b      	sub	sp, #44	@ 0x2c
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 8002946:	2300      	movs	r3, #0
 8002948:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 800294a:	2300      	movs	r3, #0
 800294c:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 800294e:	2300      	movs	r3, #0
 8002950:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t temp4 = 0x0000;
 8002952:	2300      	movs	r3, #0
 8002954:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 8002956:	2300      	movs	r3, #0
 8002958:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 800295a:	2300      	movs	r3, #0
 800295c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t temp7 = 0x0000;
 800295e:	2300      	movs	r3, #0
 8002960:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3306      	adds	r3, #6
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 814d 	bne.w	8002c08 <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3306      	adds	r3, #6
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	7992      	ldrb	r2, [r2, #6]
 8002976:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3307      	adds	r3, #7
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	79d2      	ldrb	r2, [r2, #7]
 8002980:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	3302      	adds	r3, #2
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3303      	adds	r3, #3
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3307      	adds	r3, #7
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b10      	cmp	r3, #16
 800299a:	f000 809e 	beq.w	8002ada <modbus_receive+0x1a2>
 800299e:	2b10      	cmp	r3, #16
 80029a0:	f300 812e 	bgt.w	8002c00 <modbus_receive+0x2c8>
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d003      	beq.n	80029b0 <modbus_receive+0x78>
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	f000 8125 	beq.w	8002bf8 <modbus_receive+0x2c0>
 80029ae:	e127      	b.n	8002c00 <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3308      	adds	r3, #8
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3309      	adds	r3, #9
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f7ff ff9f 	bl	8002902 <make_word>
 80029c4:	4603      	mov	r3, r0
 80029c6:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 80029c8:	8bfb      	ldrh	r3, [r7, #30]
 80029ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80029cc:	d87e      	bhi.n	8002acc <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	330a      	adds	r3, #10
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	330b      	adds	r3, #11
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7ff ff90 	bl	8002902 <make_word>
 80029e2:	4603      	mov	r3, r0
 80029e4:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 80029e6:	8bbb      	ldrh	r3, [r7, #28]
 80029e8:	2b40      	cmp	r3, #64	@ 0x40
 80029ea:	d86b      	bhi.n	8002ac4 <modbus_receive+0x18c>
 80029ec:	8bba      	ldrh	r2, [r7, #28]
 80029ee:	8bfb      	ldrh	r3, [r7, #30]
 80029f0:	4413      	add	r3, r2
 80029f2:	2b40      	cmp	r3, #64	@ 0x40
 80029f4:	dc66      	bgt.n	8002ac4 <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	7852      	ldrb	r2, [r2, #1]
 8002a06:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 8002a08:	8bbb      	ldrh	r3, [r7, #28]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3305      	adds	r3, #5
 8002a14:	3203      	adds	r2, #3
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 8002a1a:	8bbb      	ldrh	r3, [r7, #28]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3308      	adds	r3, #8
 8002a22:	0052      	lsls	r2, r2, #1
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 8002a28:	8bbb      	ldrh	r3, [r7, #28]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d92b      	bls.n	8002a86 <modbus_receive+0x14e>
					{
						int i = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002a32:	8bfb      	ldrh	r3, [r7, #30]
 8002a34:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a36:	e021      	b.n	8002a7c <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 8002a38:	8bfa      	ldrh	r2, [r7, #30]
 8002a3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a3c:	4413      	add	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	4a72      	ldr	r2, [pc, #456]	@ (8002c10 <modbus_receive+0x2d8>)
 8002a48:	4972      	ldr	r1, [pc, #456]	@ (8002c14 <modbus_receive+0x2dc>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff42 	bl	80028d4 <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	3309      	adds	r3, #9
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <modbus_receive+0x2dc>)
 8002a5c:	7812      	ldrb	r2, [r2, #0]
 8002a5e:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	330a      	adds	r3, #10
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a69      	ldr	r2, [pc, #420]	@ (8002c10 <modbus_receive+0x2d8>)
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	701a      	strb	r2, [r3, #0]
							i += 2;
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	3302      	adds	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002a76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a78:	3301      	adds	r3, #1
 8002a7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a7c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a7e:	8bbb      	ldrh	r3, [r7, #28]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d3d9      	bcc.n	8002a38 <modbus_receive+0x100>
 8002a84:	e013      	b.n	8002aae <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 8002a86:	8bfb      	ldrh	r3, [r7, #30]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	4a5f      	ldr	r2, [pc, #380]	@ (8002c10 <modbus_receive+0x2d8>)
 8002a92:	4960      	ldr	r1, [pc, #384]	@ (8002c14 <modbus_receive+0x2dc>)
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff1d 	bl	80028d4 <get_HB_LB>
						tx_buffer[1] = high_byte;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	4a5d      	ldr	r2, [pc, #372]	@ (8002c14 <modbus_receive+0x2dc>)
 8002aa0:	7812      	ldrb	r2, [r2, #0]
 8002aa2:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	4a59      	ldr	r2, [pc, #356]	@ (8002c10 <modbus_receive+0x2d8>)
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 8002aae:	8bbb      	ldrh	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3309      	adds	r3, #9
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	2001      	movs	r0, #1
 8002abe:	f001 fa87 	bl	8003fd0 <send>
 8002ac2:	e006      	b.n	8002ad2 <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 8002ac4:	4b54      	ldr	r3, [pc, #336]	@ (8002c18 <modbus_receive+0x2e0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
 8002aca:	e002      	b.n	8002ad2 <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 8002acc:	4b52      	ldr	r3, [pc, #328]	@ (8002c18 <modbus_receive+0x2e0>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 8002ad2:	4852      	ldr	r0, [pc, #328]	@ (8002c1c <modbus_receive+0x2e4>)
 8002ad4:	f00b f872 	bl	800dbbc <puts>
			break;
 8002ad8:	e096      	b.n	8002c08 <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3308      	adds	r3, #8
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3309      	adds	r3, #9
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7ff ff0a 	bl	8002902 <make_word>
 8002aee:	4603      	mov	r3, r0
 8002af0:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8002af2:	8bfb      	ldrh	r3, [r7, #30]
 8002af4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002af6:	d878      	bhi.n	8002bea <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	330a      	adds	r3, #10
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	330b      	adds	r3, #11
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f7ff fefb 	bl	8002902 <make_word>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8002b10:	8bbb      	ldrh	r3, [r7, #28]
 8002b12:	2b40      	cmp	r3, #64	@ 0x40
 8002b14:	d865      	bhi.n	8002be2 <modbus_receive+0x2aa>
 8002b16:	8bba      	ldrh	r2, [r7, #28]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	dc60      	bgt.n	8002be2 <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	7852      	ldrb	r2, [r2, #1]
 8002b30:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3305      	adds	r3, #5
 8002b36:	2206      	movs	r2, #6
 8002b38:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 8002b3a:	8bfb      	ldrh	r3, [r7, #30]
 8002b3c:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 8002b3e:	230d      	movs	r3, #13
 8002b40:	84fb      	strh	r3, [r7, #38]	@ 0x26

					if(temp2 == 1)
 8002b42:	8bbb      	ldrh	r3, [r7, #28]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d111      	bne.n	8002b6c <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 8002b48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	7818      	ldrb	r0, [r3, #0]
 8002b50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b52:	3301      	adds	r3, #1
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	7819      	ldrb	r1, [r3, #0]
 8002b5a:	8bfb      	ldrh	r3, [r7, #30]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	18d4      	adds	r4, r2, r3
 8002b62:	f7ff fece 	bl	8002902 <make_word>
 8002b66:	4603      	mov	r3, r0
 8002b68:	8023      	strh	r3, [r4, #0]
 8002b6a:	e020      	b.n	8002bae <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002b6c:	8b3b      	ldrh	r3, [r7, #24]
 8002b6e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002b70:	e017      	b.n	8002ba2 <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 8002b72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4413      	add	r3, r2
 8002b78:	7818      	ldrb	r0, [r3, #0]
 8002b7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	7819      	ldrb	r1, [r3, #0]
 8002b86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	18d4      	adds	r4, r2, r3
 8002b8e:	f7ff feb8 	bl	8002902 <make_word>
 8002b92:	4603      	mov	r3, r0
 8002b94:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 8002b96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b98:	3302      	adds	r3, #2
 8002b9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002b9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002ba2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ba4:	8bb9      	ldrh	r1, [r7, #28]
 8002ba6:	8b3b      	ldrh	r3, [r7, #24]
 8002ba8:	440b      	add	r3, r1
 8002baa:	429a      	cmp	r2, r3
 8002bac:	dbe1      	blt.n	8002b72 <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	7a12      	ldrb	r2, [r2, #8]
 8002bb6:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	3309      	adds	r3, #9
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	7a52      	ldrb	r2, [r2, #9]
 8002bc0:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	330a      	adds	r3, #10
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	7a92      	ldrb	r2, [r2, #10]
 8002bca:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	330b      	adds	r3, #11
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	7ad2      	ldrb	r2, [r2, #11]
 8002bd4:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f001 f9f8 	bl	8003fd0 <send>
 8002be0:	e006      	b.n	8002bf0 <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <modbus_receive+0x2e0>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e002      	b.n	8002bf0 <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <modbus_receive+0x2e0>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 8002bf0:	480b      	ldr	r0, [pc, #44]	@ (8002c20 <modbus_receive+0x2e8>)
 8002bf2:	f00a ffe3 	bl	800dbbc <puts>
			break;
 8002bf6:	e007      	b.n	8002c08 <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 8002bf8:	480a      	ldr	r0, [pc, #40]	@ (8002c24 <modbus_receive+0x2ec>)
 8002bfa:	f00a ffdf 	bl	800dbbc <puts>
			break;
 8002bfe:	e003      	b.n	8002c08 <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <modbus_receive+0x2f0>)
 8002c02:	f00a ffdb 	bl	800dbbc <puts>
			break;
 8002c06:	bf00      	nop
		}
	}
}
 8002c08:	bf00      	nop
 8002c0a:	372c      	adds	r7, #44	@ 0x2c
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	2000056d 	.word	0x2000056d
 8002c14:	2000056e 	.word	0x2000056e
 8002c18:	2000056c 	.word	0x2000056c
 8002c1c:	0800ee34 	.word	0x0800ee34
 8002c20:	0800ee44 	.word	0x0800ee44
 8002c24:	0800ee54 	.word	0x0800ee54
 8002c28:	0800ee64 	.word	0x0800ee64

08002c2c <get_initial_soc>:
bool count_init = true;
float difference, difference, previous_count;

// Function definition for get_initial_soc
void get_initial_soc(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
    // Read cell measurements
    uint16_t releasable_capacity = 0; // Initialize releasable capacity
 8002c32:	2300      	movs	r3, #0
 8002c34:	81fb      	strh	r3, [r7, #14]
    get_min_max_vcell();              // Get min and max voltage
 8002c36:	f000 f971 	bl	8002f1c <get_min_max_vcell>

    //printf("Debug: Minimum Cell Voltage (mV): %u\n", min_vcell);
    //printf("Debug: Initial SOC: %f\n", initial_soc);

    /* Get initial SOC estimation */
    if (initial_soc < 0)
 8002c3a:	4b48      	ldr	r3, [pc, #288]	@ (8002d5c <get_initial_soc+0x130>)
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	d51c      	bpl.n	8002c84 <get_initial_soc+0x58>
    {
        // Calculate LUT value based on min voltage
        uint16_t lut_value = get_val_lookup_table(g_ocv_q_released_mah_table, NUM_CELLS, (uint16_t)round(min_vcell));
 8002c4a:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <get_initial_soc+0x134>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fdf2 	bl	8000838 <__aeabi_ui2d>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f7fd feee 	bl	8000a3c <__aeabi_d2uiz>
 8002c60:	4603      	mov	r3, r0
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	2110      	movs	r1, #16
 8002c68:	483e      	ldr	r0, [pc, #248]	@ (8002d64 <get_initial_soc+0x138>)
 8002c6a:	f7fe fea7 	bl	80019bc <get_val_lookup_table>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
        //printf("Debug: LUT Value from Lookup Table: %u\n", lut_value);

        if (lut_value < CELL_NOMINAL_CAPACITY_MAH)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8002c78:	d222      	bcs.n	8002cc0 <get_initial_soc+0x94>
        {
            releasable_capacity = CELL_NOMINAL_CAPACITY_MAH - lut_value;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	f5c3 5396 	rsb	r3, r3, #4800	@ 0x12c0
 8002c80:	81fb      	strh	r3, [r7, #14]
 8002c82:	e01d      	b.n	8002cc0 <get_initial_soc+0x94>
        }
    }
    else
    {
        // Calculate releasable capacity based on initial SOC
        float aux_q = (float)CELL_NOMINAL_CAPACITY_MAH * (initial_soc / 100.0f);
 8002c84:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <get_initial_soc+0x130>)
 8002c86:	ed93 7a00 	vldr	s14, [r3]
 8002c8a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002d68 <get_initial_soc+0x13c>
 8002c8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c92:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002d6c <get_initial_soc+0x140>
 8002c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9a:	edc7 7a02 	vstr	s15, [r7, #8]
        releasable_capacity = (uint16_t)round(aux_q);
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	f7fd fdec 	bl	800087c <__aeabi_f2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	ec43 2b10 	vmov	d0, r2, r3
 8002cac:	f00b fe7e 	bl	800e9ac <round>
 8002cb0:	ec53 2b10 	vmov	r2, r3, d0
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f7fd fec0 	bl	8000a3c <__aeabi_d2uiz>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	81fb      	strh	r3, [r7, #14]
    }

    // You might want to return or further use releasable_capacity here
    //printf("Debug: Final Releasable Capacity: %u\n", releasable_capacity);

    soc_coulomb_count_init.Q_max = CELL_NOMINAL_CAPACITY_MAH;
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <get_initial_soc+0x144>)
 8002cc2:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002cc6:	849a      	strh	r2, [r3, #36]	@ 0x24
    soc_coulomb_count_init.Q_rated = CELL_NOMINAL_CAPACITY_MAH;
 8002cc8:	4b29      	ldr	r3, [pc, #164]	@ (8002d70 <get_initial_soc+0x144>)
 8002cca:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002cce:	841a      	strh	r2, [r3, #32]
    soc_coulomb_count_init.Q_releasable = releasable_capacity;
 8002cd0:	4a27      	ldr	r2, [pc, #156]	@ (8002d70 <get_initial_soc+0x144>)
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	8453      	strh	r3, [r2, #34]	@ 0x22

    soc_coulomb_count_init.soc = ((float)soc_coulomb_count_init.Q_releasable / (float)soc_coulomb_count_init.Q_rated) * 100.0f;
 8002cd6:	4b26      	ldr	r3, [pc, #152]	@ (8002d70 <get_initial_soc+0x144>)
 8002cd8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ce2:	4b23      	ldr	r3, [pc, #140]	@ (8002d70 <get_initial_soc+0x144>)
 8002ce4:	8c1b      	ldrh	r3, [r3, #32]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002d68 <get_initial_soc+0x13c>
 8002cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <get_initial_soc+0x144>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
    //printf("Debug: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);

    soc_coulomb_count_init.soh = (float)((float)soc_coulomb_count_init.Q_max / (float)soc_coulomb_count_init.Q_rated) * 100.0f;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <get_initial_soc+0x144>)
 8002d02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002d04:	ee07 3a90 	vmov	s15, r3
 8002d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0c:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <get_initial_soc+0x144>)
 8002d0e:	8c1b      	ldrh	r3, [r3, #32]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d1c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002d68 <get_initial_soc+0x13c>
 8002d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <get_initial_soc+0x144>)
 8002d26:	edc3 7a01 	vstr	s15, [r3, #4]
    soc_coulomb_count_init.dod = soc_coulomb_count_init.soh - soc_coulomb_count_init.soc;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <get_initial_soc+0x144>)
 8002d2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d30:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <get_initial_soc+0x144>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <get_initial_soc+0x144>)
 8002d3c:	edc3 7a02 	vstr	s15, [r3, #8]
    soc_coulomb_count_init.charge_efficiency = CHARGE_EFFICIENCY;
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <get_initial_soc+0x144>)
 8002d42:	4a0c      	ldr	r2, [pc, #48]	@ (8002d74 <get_initial_soc+0x148>)
 8002d44:	611a      	str	r2, [r3, #16]
    soc_coulomb_count_init.discharge_efficiency = DISCHARGE_EFFICIENCY;
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <get_initial_soc+0x144>)
 8002d48:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <get_initial_soc+0x148>)
 8002d4a:	615a      	str	r2, [r3, #20]
    soc_coulomb_count_init.coulomb_count = 0;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <get_initial_soc+0x144>)
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
    //printf("Updated: dod before calculated as: %.2f%%\n", soc_coulomb_count_init.dod);
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	2000001c 	.word	0x2000001c
 8002d60:	20000570 	.word	0x20000570
 8002d64:	0800ef3c 	.word	0x0800ef3c
 8002d68:	42c80000 	.word	0x42c80000
 8002d6c:	45960000 	.word	0x45960000
 8002d70:	200004ac 	.word	0x200004ac
 8002d74:	3f733333 	.word	0x3f733333

08002d78 <soc_k_update_get>:

uint16_t soc_k_update_get(float coulombs_count)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	ed87 0a01 	vstr	s0, [r7, #4]
//
//    return (uint16_t)soc_coulomb_count_init.soc; // Return the updated SOC as an integer


	// Calculate the delta DOD based on the given coulombs_count and the rated capacity
	if (count_init) {
 8002d82:	4b61      	ldr	r3, [pc, #388]	@ (8002f08 <soc_k_update_get+0x190>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <soc_k_update_get+0x26>
	        // For the first reading, return it itself as the difference
	        previous_count = coulombs_count;
 8002d8a:	4a60      	ldr	r2, [pc, #384]	@ (8002f0c <soc_k_update_get+0x194>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6013      	str	r3, [r2, #0]
	        count_init = false;
 8002d90:	4b5d      	ldr	r3, [pc, #372]	@ (8002f08 <soc_k_update_get+0x190>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
	        difference = coulombs_count;
 8002d96:	4a5e      	ldr	r2, [pc, #376]	@ (8002f10 <soc_k_update_get+0x198>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	e00c      	b.n	8002db8 <soc_k_update_get+0x40>
	    } else {
	        // Calculate the difference for consecutive readings
	        difference = coulombs_count - previous_count;
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <soc_k_update_get+0x194>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8002da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dac:	4b58      	ldr	r3, [pc, #352]	@ (8002f10 <soc_k_update_get+0x198>)
 8002dae:	edc3 7a00 	vstr	s15, [r3]

	        // Update the previous count for next calculations
	        previous_count = coulombs_count;
 8002db2:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <soc_k_update_get+0x194>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6013      	str	r3, [r2, #0]
	    }

	    //printf("Updated: difference calculated as: %.2f\n",  difference);

	    // Calculate the delta DOD based on the given coulombs_count and the rated capacity
	    soc_coulomb_count_init.delta_dod = (-1.0f) * (float)difference / (float)soc_coulomb_count_init.Q_rated * 100.0f;
 8002db8:	4b55      	ldr	r3, [pc, #340]	@ (8002f10 <soc_k_update_get+0x198>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	eef1 6a67 	vneg.f32	s13, s15
 8002dc2:	4b54      	ldr	r3, [pc, #336]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002dc4:	8c1b      	ldrh	r3, [r3, #32]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dd2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002f18 <soc_k_update_get+0x1a0>
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	4b4e      	ldr	r3, [pc, #312]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002ddc:	edc3 7a03 	vstr	s15, [r3, #12]
	    soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod + soc_coulomb_count_init.charge_efficiency * soc_coulomb_count_init.delta_dod;
 8002de0:	4b4c      	ldr	r3, [pc, #304]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002de2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002de6:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002de8:	edd3 6a04 	vldr	s13, [r3, #16]
 8002dec:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002dee:	edd3 7a03 	vldr	s15, [r3, #12]
 8002df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfa:	4b46      	ldr	r3, [pc, #280]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002dfc:	edc3 7a07 	vstr	s15, [r3, #28]
	    // Update SOC based on the coulombs_count
	    if (difference > 0)
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <soc_k_update_get+0x198>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	dd10      	ble.n	8002e32 <soc_k_update_get+0xba>
	    {
	        // Positive coulombs_count indicates charging, which increases SOC

	        soc_coulomb_count_init.dod += soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e16:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e18:	edd3 6a05 	vldr	s13, [r3, #20]
 8002e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e2c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002e30:	e00f      	b.n	8002e52 <soc_k_update_get+0xda>
	    }
	    else
	    {
	        // Negative coulombs_count indicates discharging, which decreases SOC
	        //soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
	        soc_coulomb_count_init.dod += soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8002e32:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e34:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e3a:	edd3 6a05 	vldr	s13, [r3, #20]
 8002e3e:	4b35      	ldr	r3, [pc, #212]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	4b31      	ldr	r3, [pc, #196]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e4e:	edc3 7a02 	vstr	s15, [r3, #8]
	    }

	    // Calculate the updated SOC
	    soc_coulomb_count_init.soc = soc_coulomb_count_init.soh - soc_coulomb_count_init.dod;
 8002e52:	4b30      	ldr	r3, [pc, #192]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e54:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e58:	4b2e      	ldr	r3, [pc, #184]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e62:	4b2c      	ldr	r3, [pc, #176]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e64:	edc3 7a00 	vstr	s15, [r3]
	    soc_coulomb_count_init.soc = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.soc));
 8002e68:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8002f18 <soc_k_update_get+0x1a0>
 8002e72:	eeb0 0a67 	vmov.f32	s0, s15
 8002e76:	f00b fd5f 	bl	800e938 <fminf>
 8002e7a:	ee10 3a10 	vmov	r3, s0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fcfc 	bl	800087c <__aeabi_f2d>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8002f00 <soc_k_update_get+0x188>
 8002e8c:	ec43 2b10 	vmov	d0, r2, r3
 8002e90:	f00b fcfe 	bl	800e890 <fmax>
 8002e94:	ec53 2b10 	vmov	r2, r3, d0
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f7fd fdee 	bl	8000a7c <__aeabi_d2f>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002ea4:	6013      	str	r3, [r2, #0]
	    soc_coulomb_count_init.dod = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.dod));
 8002ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002ea8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eac:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8002f18 <soc_k_update_get+0x1a0>
 8002eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb4:	f00b fd40 	bl	800e938 <fminf>
 8002eb8:	ee10 3a10 	vmov	r3, s0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fcdd 	bl	800087c <__aeabi_f2d>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	ed9f 1b0e 	vldr	d1, [pc, #56]	@ 8002f00 <soc_k_update_get+0x188>
 8002eca:	ec43 2b10 	vmov	d0, r2, r3
 8002ece:	f00b fcdf 	bl	800e890 <fmax>
 8002ed2:	ec53 2b10 	vmov	r2, r3, d0
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fdcf 	bl	8000a7c <__aeabi_d2f>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002ee2:	6093      	str	r3, [r2, #8]
	    //printf("Updated: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);
	    //printf("Updated: dod calculated as: %.2f%%\n", soc_coulomb_count_init.dod);

	    return (uint16_t)soc_coulomb_count_init.soc; // Return the updated SOC as an integer
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <soc_k_update_get+0x19c>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eee:	ee17 3a90 	vmov	r3, s15
 8002ef2:	b29b      	uxth	r3, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	f3af 8000 	nop.w
	...
 8002f08:	20000020 	.word	0x20000020
 8002f0c:	20000578 	.word	0x20000578
 8002f10:	20000574 	.word	0x20000574
 8002f14:	200004ac 	.word	0x200004ac
 8002f18:	42c80000 	.word	0x42c80000

08002f1c <get_min_max_vcell>:
    soc_coulomb_count_init.soc = 0.0f;
    soc_coulomb_count_init.dod = 100.0f;
}
// Function to find the minimum and maximum cell voltages
void get_min_max_vcell(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
    // Initialize min and max to the first element of the array
    min_vcell = CellVoltage[0];
 8002f22:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <get_min_max_vcell+0x88>)
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <get_min_max_vcell+0x8c>)
 8002f28:	801a      	strh	r2, [r3, #0]
    max_vcell = CellVoltage[0];
 8002f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <get_min_max_vcell+0x88>)
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fac <get_min_max_vcell+0x90>)
 8002f30:	801a      	strh	r2, [r3, #0]

    // Iterate through the array of cell voltages
    for (uint8_t i = 0; i < NUM_CELLS; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	e02a      	b.n	8002f8e <get_min_max_vcell+0x72>
    {
        // Check if the current cell is selected
        if ((selected_cells.value & (0x01 << i)) == 0)
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <get_min_max_vcell+0x94>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	fa42 f303 	asr.w	r3, r2, r3
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <get_min_max_vcell+0x6a>
        {
            continue; // Skip this iteration if the cell is not selected
        }

        // Update minimum voltage if the current voltage is lower
        if (CellVoltage[i] < min_vcell)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <get_min_max_vcell+0x88>)
 8002f50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <get_min_max_vcell+0x8c>)
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d205      	bcs.n	8002f68 <get_min_max_vcell+0x4c>
        {
            min_vcell = CellVoltage[i];
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <get_min_max_vcell+0x88>)
 8002f60:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f64:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <get_min_max_vcell+0x8c>)
 8002f66:	801a      	strh	r2, [r3, #0]
        }

        // Update maximum voltage if the current voltage is higher
        if (CellVoltage[i] > max_vcell)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <get_min_max_vcell+0x88>)
 8002f6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <get_min_max_vcell+0x90>)
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d907      	bls.n	8002f88 <get_min_max_vcell+0x6c>
        {
            max_vcell = CellVoltage[i];
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <get_min_max_vcell+0x88>)
 8002f7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <get_min_max_vcell+0x90>)
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	e000      	b.n	8002f88 <get_min_max_vcell+0x6c>
            continue; // Skip this iteration if the cell is not selected
 8002f86:	bf00      	nop
    for (uint8_t i = 0; i < NUM_CELLS; i++)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d9d1      	bls.n	8002f38 <get_min_max_vcell+0x1c>
        }
    }
    // Output the results
    //printf("Min Voltage: %u mV\n", min_vcell);
    //printf("Max Voltage: %u mV\n", max_vcell);
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000104 	.word	0x20000104
 8002fa8:	20000570 	.word	0x20000570
 8002fac:	20000572 	.word	0x20000572
 8002fb0:	20000000 	.word	0x20000000

08002fb4 <voltage_to_percentage>:

uint8_t voltage_to_percentage(uint16_t voltage)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
    // Define the lower and upper limits of the voltage range in mV
    const uint16_t min_voltage = 3000;
 8002fbe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002fc2:	82fb      	strh	r3, [r7, #22]
    const uint16_t max_voltage = 4300;
 8002fc4:	f241 03cc 	movw	r3, #4300	@ 0x10cc
 8002fc8:	82bb      	strh	r3, [r7, #20]
    const uint16_t error_voltage = 4500;
 8002fca:	f241 1394 	movw	r3, #4500	@ 0x1194
 8002fce:	827b      	strh	r3, [r7, #18]

    // Guard: If the voltage is below 3000 mV, return 0%
    if ((voltage < min_voltage) || (voltage > error_voltage))
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	8afb      	ldrh	r3, [r7, #22]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d303      	bcc.n	8002fe0 <voltage_to_percentage+0x2c>
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	8a7b      	ldrh	r3, [r7, #18]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d901      	bls.n	8002fe4 <voltage_to_percentage+0x30>
    {
        return 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e023      	b.n	800302c <voltage_to_percentage+0x78>
    }

    // Guard: If the voltage is above 4300 mV, return 100%
    if (voltage > max_voltage)
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	8abb      	ldrh	r3, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d901      	bls.n	8002ff0 <voltage_to_percentage+0x3c>
    {
        return 100;
 8002fec:	2364      	movs	r3, #100	@ 0x64
 8002fee:	e01d      	b.n	800302c <voltage_to_percentage+0x78>
    }

    // Calculate the SoC percentage for voltages within the valid range
    float soc_percentage = ((float)(voltage - min_voltage) / (float)(max_voltage - min_voltage)) * 100.0f;
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ffe:	8aba      	ldrh	r2, [r7, #20]
 8003000:	8afb      	ldrh	r3, [r7, #22]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800300c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003010:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003038 <voltage_to_percentage+0x84>
 8003014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003018:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the calculated SoC percentage as an integer
    return (uint16_t)soc_percentage;
 800301c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003024:	ee17 3a90 	vmov	r3, s15
 8003028:	b29b      	uxth	r3, r3
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	42c80000 	.word	0x42c80000

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	4b10      	ldr	r3, [pc, #64]	@ (8003088 <HAL_MspInit+0x4c>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	4a0f      	ldr	r2, [pc, #60]	@ (8003088 <HAL_MspInit+0x4c>)
 800304c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003050:	6453      	str	r3, [r2, #68]	@ 0x44
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <HAL_MspInit+0x4c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <HAL_MspInit+0x4c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	4a08      	ldr	r2, [pc, #32]	@ (8003088 <HAL_MspInit+0x4c>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	@ 0x40
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_MspInit+0x4c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800307a:	f008 fa67 	bl	800b54c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800

0800308c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	@ 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a48      	ldr	r2, [pc, #288]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	f040 8089 	bne.w	80031c2 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	4b46      	ldr	r3, [pc, #280]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a45      	ldr	r2, [pc, #276]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	4b43      	ldr	r3, [pc, #268]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	2312      	movs	r3, #18
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	2303      	movs	r3, #3
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80030de:	2304      	movs	r3, #4
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	483a      	ldr	r0, [pc, #232]	@ (80031d4 <HAL_I2C_MspInit+0x148>)
 80030ea:	f002 fbb5 	bl	8005858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b37      	ldr	r3, [pc, #220]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a36      	ldr	r2, [pc, #216]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 80030f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800310a:	4b33      	ldr	r3, [pc, #204]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 800310c:	4a33      	ldr	r2, [pc, #204]	@ (80031dc <HAL_I2C_MspInit+0x150>)
 800310e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003110:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003112:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003116:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003118:	4b2f      	ldr	r3, [pc, #188]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800311e:	4b2e      	ldr	r3, [pc, #184]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003120:	2200      	movs	r2, #0
 8003122:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003124:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800312a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312c:	4b2a      	ldr	r3, [pc, #168]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003132:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003138:	4b27      	ldr	r3, [pc, #156]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800313e:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003144:	4b24      	ldr	r3, [pc, #144]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800314a:	4823      	ldr	r0, [pc, #140]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 800314c:	f002 f89a 	bl	8005284 <HAL_DMA_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003156:	f7ff fbb7 	bl	80028c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1e      	ldr	r2, [pc, #120]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003166:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 8003168:	4a1e      	ldr	r2, [pc, #120]	@ (80031e4 <HAL_I2C_MspInit+0x158>)
 800316a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800316c:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 800316e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003172:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003174:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800317a:	4b19      	ldr	r3, [pc, #100]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003180:	4b17      	ldr	r3, [pc, #92]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 8003182:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003186:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003188:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800318e:	4b14      	ldr	r3, [pc, #80]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003194:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 8003196:	2200      	movs	r2, #0
 8003198:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800319a:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80031a6:	480e      	ldr	r0, [pc, #56]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 80031a8:	f002 f86c 	bl	8005284 <HAL_DMA_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80031b2:	f7ff fb89 	bl	80028c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a09      	ldr	r2, [pc, #36]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 80031ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80031bc:	4a08      	ldr	r2, [pc, #32]	@ (80031e0 <HAL_I2C_MspInit+0x154>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031c2:	bf00      	nop
 80031c4:	3728      	adds	r7, #40	@ 0x28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40005400 	.word	0x40005400
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020400 	.word	0x40020400
 80031d8:	200001a0 	.word	0x200001a0
 80031dc:	40026010 	.word	0x40026010
 80031e0:	20000200 	.word	0x20000200
 80031e4:	400260a0 	.word	0x400260a0

080031e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a19      	ldr	r2, [pc, #100]	@ (800326c <HAL_SPI_MspInit+0x84>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d12b      	bne.n	8003262 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b18      	ldr	r3, [pc, #96]	@ (8003270 <HAL_SPI_MspInit+0x88>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <HAL_SPI_MspInit+0x88>)
 8003214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003218:	6453      	str	r3, [r2, #68]	@ 0x44
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <HAL_SPI_MspInit+0x88>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <HAL_SPI_MspInit+0x88>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	4a10      	ldr	r2, [pc, #64]	@ (8003270 <HAL_SPI_MspInit+0x88>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6313      	str	r3, [r2, #48]	@ 0x30
 8003236:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_SPI_MspInit+0x88>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003242:	23e0      	movs	r3, #224	@ 0xe0
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003252:	2305      	movs	r3, #5
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	4805      	ldr	r0, [pc, #20]	@ (8003274 <HAL_SPI_MspInit+0x8c>)
 800325e:	f002 fafb 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003262:	bf00      	nop
 8003264:	3728      	adds	r7, #40	@ 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40013000 	.word	0x40013000
 8003270:	40023800 	.word	0x40023800
 8003274:	40020000 	.word	0x40020000

08003278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0b      	ldr	r2, [pc, #44]	@ (80032b4 <HAL_TIM_Base_MspInit+0x3c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10d      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <HAL_TIM_Base_MspInit+0x40>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a09      	ldr	r2, [pc, #36]	@ (80032b8 <HAL_TIM_Base_MspInit+0x40>)
 8003294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <HAL_TIM_Base_MspInit+0x40>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40014400 	.word	0x40014400
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	@ 0x30
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 031c 	add.w	r3, r7, #28
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a32      	ldr	r2, [pc, #200]	@ (80033a4 <HAL_UART_MspInit+0xe8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d12c      	bne.n	8003338 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	4b31      	ldr	r3, [pc, #196]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	4a30      	ldr	r2, [pc, #192]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 80032e8:	f043 0310 	orr.w	r3, r3, #16
 80032ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ee:	4b2e      	ldr	r3, [pc, #184]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	4a29      	ldr	r2, [pc, #164]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003304:	f043 0302 	orr.w	r3, r3, #2
 8003308:	6313      	str	r3, [r2, #48]	@ 0x30
 800330a:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003316:	23c0      	movs	r3, #192	@ 0xc0
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003326:	2307      	movs	r3, #7
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	481e      	ldr	r0, [pc, #120]	@ (80033ac <HAL_UART_MspInit+0xf0>)
 8003332:	f002 fa91 	bl	8005858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003336:	e030      	b.n	800339a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_UART_MspInit+0xf4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d12b      	bne.n	800339a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b18      	ldr	r3, [pc, #96]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a17      	ldr	r2, [pc, #92]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b15      	ldr	r3, [pc, #84]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a10      	ldr	r2, [pc, #64]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <HAL_UART_MspInit+0xec>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800337a:	2304      	movs	r3, #4
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800337e:	2312      	movs	r3, #18
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800338a:	2307      	movs	r3, #7
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	4619      	mov	r1, r3
 8003394:	4807      	ldr	r0, [pc, #28]	@ (80033b4 <HAL_UART_MspInit+0xf8>)
 8003396:	f002 fa5f 	bl	8005858 <HAL_GPIO_Init>
}
 800339a:	bf00      	nop
 800339c:	3730      	adds	r7, #48	@ 0x30
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40011000 	.word	0x40011000
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40004400 	.word	0x40004400
 80033b4:	40020000 	.word	0x40020000

080033b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	@ 0x38
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	4b33      	ldr	r3, [pc, #204]	@ (800349c <HAL_InitTick+0xe4>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	4a32      	ldr	r2, [pc, #200]	@ (800349c <HAL_InitTick+0xe4>)
 80033d2:	f043 0310 	orr.w	r3, r3, #16
 80033d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d8:	4b30      	ldr	r3, [pc, #192]	@ (800349c <HAL_InitTick+0xe4>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033e4:	f107 0210 	add.w	r2, r7, #16
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 fd38 	bl	8006e64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033fe:	f003 fd09 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8003402:	6378      	str	r0, [r7, #52]	@ 0x34
 8003404:	e004      	b.n	8003410 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003406:	f003 fd05 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 800340a:	4603      	mov	r3, r0
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003412:	4a23      	ldr	r2, [pc, #140]	@ (80034a0 <HAL_InitTick+0xe8>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	0c9b      	lsrs	r3, r3, #18
 800341a:	3b01      	subs	r3, #1
 800341c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800341e:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_InitTick+0xec>)
 8003420:	4a21      	ldr	r2, [pc, #132]	@ (80034a8 <HAL_InitTick+0xf0>)
 8003422:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_InitTick+0xec>)
 8003426:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800342a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_InitTick+0xec>)
 800342e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003430:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003432:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <HAL_InitTick+0xec>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003438:	4b1a      	ldr	r3, [pc, #104]	@ (80034a4 <HAL_InitTick+0xec>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800343e:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_InitTick+0xec>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003444:	4817      	ldr	r0, [pc, #92]	@ (80034a4 <HAL_InitTick+0xec>)
 8003446:	f004 fd21 	bl	8007e8c <HAL_TIM_Base_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003450:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11b      	bne.n	8003490 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003458:	4812      	ldr	r0, [pc, #72]	@ (80034a4 <HAL_InitTick+0xec>)
 800345a:	f004 fdcf 	bl	8007ffc <HAL_TIM_Base_Start_IT>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003464:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800346c:	2036      	movs	r0, #54	@ 0x36
 800346e:	f001 fefb 	bl	8005268 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b0f      	cmp	r3, #15
 8003476:	d808      	bhi.n	800348a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003478:	2200      	movs	r2, #0
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	2036      	movs	r0, #54	@ 0x36
 800347e:	f001 fed7 	bl	8005230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003482:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <HAL_InitTick+0xf4>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	e002      	b.n	8003490 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003490:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003494:	4618      	mov	r0, r3
 8003496:	3738      	adds	r7, #56	@ 0x38
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	431bde83 	.word	0x431bde83
 80034a4:	2000057c 	.word	0x2000057c
 80034a8:	40001000 	.word	0x40001000
 80034ac:	20000058 	.word	0x20000058

080034b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034b4:	bf00      	nop
 80034b6:	e7fd      	b.n	80034b4 <NMI_Handler+0x4>

080034b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <HardFault_Handler+0x4>

080034c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <MemManage_Handler+0x4>

080034c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <BusFault_Handler+0x4>

080034d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <UsageFault_Handler+0x4>

080034d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80034ec:	4802      	ldr	r0, [pc, #8]	@ (80034f8 <DMA1_Stream0_IRQHandler+0x10>)
 80034ee:	f001 ff77 	bl	80053e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001a0 	.word	0x200001a0

080034fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003500:	4802      	ldr	r0, [pc, #8]	@ (800350c <DMA1_Stream6_IRQHandler+0x10>)
 8003502:	f001 ff6d 	bl	80053e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000200 	.word	0x20000200

08003510 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003514:	4802      	ldr	r0, [pc, #8]	@ (8003520 <TIM6_DAC_IRQHandler+0x10>)
 8003516:	f004 fde1 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000057c 	.word	0x2000057c

08003524 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e00a      	b.n	800354c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003536:	f3af 8000 	nop.w
 800353a:	4601      	mov	r1, r0
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	60ba      	str	r2, [r7, #8]
 8003542:	b2ca      	uxtb	r2, r1
 8003544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3301      	adds	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	dbf0      	blt.n	8003536 <_read+0x12>
  }

  return len;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_close>:
  }
  return len;
}

int _close(int file)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003586:	605a      	str	r2, [r3, #4]
  return 0;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_isatty>:

int _isatty(int file)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035cc:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <SystemInit+0x20>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	4a05      	ldr	r2, [pc, #20]	@ (80035e8 <SystemInit+0x20>)
 80035d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80035f4:	4b22      	ldr	r3, [pc, #136]	@ (8003680 <WIZCHIP_READ+0x94>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80035fa:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <WIZCHIP_READ+0x94>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003600:	4b1f      	ldr	r3, [pc, #124]	@ (8003680 <WIZCHIP_READ+0x94>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <WIZCHIP_READ+0x24>
 8003608:	4b1d      	ldr	r3, [pc, #116]	@ (8003680 <WIZCHIP_READ+0x94>)
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d114      	bne.n	800363a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003610:	4b1b      	ldr	r3, [pc, #108]	@ (8003680 <WIZCHIP_READ+0x94>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	0c12      	lsrs	r2, r2, #16
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4610      	mov	r0, r2
 800361c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800361e:	4b18      	ldr	r3, [pc, #96]	@ (8003680 <WIZCHIP_READ+0x94>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	0a12      	lsrs	r2, r2, #8
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	4610      	mov	r0, r2
 800362a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800362c:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <WIZCHIP_READ+0x94>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
 8003638:	e011      	b.n	800365e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	b2db      	uxtb	r3, r3
 8003640:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	b2db      	uxtb	r3, r3
 8003648:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <WIZCHIP_READ+0x94>)
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	f107 020c 	add.w	r2, r7, #12
 8003658:	2103      	movs	r1, #3
 800365a:	4610      	mov	r0, r2
 800365c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <WIZCHIP_READ+0x94>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	4798      	blx	r3
 8003664:	4603      	mov	r3, r0
 8003666:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <WIZCHIP_READ+0x94>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800366e:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <WIZCHIP_READ+0x94>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4798      	blx	r3
   return ret;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000002c 	.word	0x2000002c

08003684 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003690:	4b22      	ldr	r3, [pc, #136]	@ (800371c <WIZCHIP_WRITE+0x98>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <WIZCHIP_WRITE+0x98>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <WIZCHIP_WRITE+0x98>)
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d119      	bne.n	80036e0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80036ac:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <WIZCHIP_WRITE+0x98>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	0c12      	lsrs	r2, r2, #16
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4610      	mov	r0, r2
 80036b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80036ba:	4b18      	ldr	r3, [pc, #96]	@ (800371c <WIZCHIP_WRITE+0x98>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	0a12      	lsrs	r2, r2, #8
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	4610      	mov	r0, r2
 80036c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80036c8:	4b14      	ldr	r3, [pc, #80]	@ (800371c <WIZCHIP_WRITE+0x98>)
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <WIZCHIP_WRITE+0x98>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4610      	mov	r0, r2
 80036dc:	4798      	blx	r3
 80036de:	e013      	b.n	8003708 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80036fa:	4b08      	ldr	r3, [pc, #32]	@ (800371c <WIZCHIP_WRITE+0x98>)
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	f107 020c 	add.w	r2, r7, #12
 8003702:	2104      	movs	r1, #4
 8003704:	4610      	mov	r0, r2
 8003706:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003708:	4b04      	ldr	r3, [pc, #16]	@ (800371c <WIZCHIP_WRITE+0x98>)
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800370e:	4b03      	ldr	r3, [pc, #12]	@ (800371c <WIZCHIP_WRITE+0x98>)
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	4798      	blx	r3
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000002c 	.word	0x2000002c

08003720 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800372e:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003734:	4b29      	ldr	r3, [pc, #164]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800373a:	4b28      	ldr	r3, [pc, #160]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <WIZCHIP_READ_BUF+0x2a>
 8003742:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	d126      	bne.n	8003798 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	0c12      	lsrs	r2, r2, #16
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	4610      	mov	r0, r2
 8003756:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003758:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	0a12      	lsrs	r2, r2, #8
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	4610      	mov	r0, r2
 8003764:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003766:	4b1d      	ldr	r3, [pc, #116]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4610      	mov	r0, r2
 8003770:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003772:	2300      	movs	r3, #0
 8003774:	82fb      	strh	r3, [r7, #22]
 8003776:	e00a      	b.n	800378e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003778:	4b18      	ldr	r3, [pc, #96]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	8afa      	ldrh	r2, [r7, #22]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	188c      	adds	r4, r1, r2
 8003782:	4798      	blx	r3
 8003784:	4603      	mov	r3, r0
 8003786:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003788:	8afb      	ldrh	r3, [r7, #22]
 800378a:	3301      	adds	r3, #1
 800378c:	82fb      	strh	r3, [r7, #22]
 800378e:	8afa      	ldrh	r2, [r7, #22]
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3f0      	bcc.n	8003778 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003796:	e017      	b.n	80037c8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2db      	uxtb	r3, r3
 800379e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80037ae:	4b0b      	ldr	r3, [pc, #44]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	f107 0210 	add.w	r2, r7, #16
 80037b6:	2103      	movs	r1, #3
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80037bc:	4b07      	ldr	r3, [pc, #28]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	4611      	mov	r1, r2
 80037c4:	68b8      	ldr	r0, [r7, #8]
 80037c6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80037c8:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80037ce:	4b03      	ldr	r3, [pc, #12]	@ (80037dc <WIZCHIP_READ_BUF+0xbc>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4798      	blx	r3
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	2000002c 	.word	0x2000002c

080037e0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80037ee:	4b2b      	ldr	r3, [pc, #172]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	4798      	blx	r3
   WIZCHIP.CS._select();
 80037f4:	4b29      	ldr	r3, [pc, #164]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003802:	4b26      	ldr	r3, [pc, #152]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d126      	bne.n	8003858 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800380a:	4b24      	ldr	r3, [pc, #144]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	0c12      	lsrs	r2, r2, #16
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003818:	4b20      	ldr	r3, [pc, #128]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	0a12      	lsrs	r2, r2, #8
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	4610      	mov	r0, r2
 8003824:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003826:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	4610      	mov	r0, r2
 8003830:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003832:	2300      	movs	r3, #0
 8003834:	82fb      	strh	r3, [r7, #22]
 8003836:	e00a      	b.n	800384e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003838:	4b18      	ldr	r3, [pc, #96]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	8afa      	ldrh	r2, [r7, #22]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	440a      	add	r2, r1
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	4610      	mov	r0, r2
 8003846:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003848:	8afb      	ldrh	r3, [r7, #22]
 800384a:	3301      	adds	r3, #1
 800384c:	82fb      	strh	r3, [r7, #22]
 800384e:	8afa      	ldrh	r2, [r7, #22]
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	429a      	cmp	r2, r3
 8003854:	d3f0      	bcc.n	8003838 <WIZCHIP_WRITE_BUF+0x58>
 8003856:	e017      	b.n	8003888 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	0c1b      	lsrs	r3, r3, #16
 800385c:	b2db      	uxtb	r3, r3
 800385e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b2db      	uxtb	r3, r3
 8003866:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	f107 0210 	add.w	r2, r7, #16
 8003876:	2103      	movs	r1, #3
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800387c:	4b07      	ldr	r3, [pc, #28]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	4611      	mov	r1, r2
 8003884:	68b8      	ldr	r0, [r7, #8]
 8003886:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003888:	4b04      	ldr	r3, [pc, #16]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800388e:	4b03      	ldr	r3, [pc, #12]	@ (800389c <WIZCHIP_WRITE_BUF+0xbc>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	4798      	blx	r3
}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	2000002c 	.word	0x2000002c

080038a0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80038aa:	2300      	movs	r3, #0
 80038ac:	81fb      	strh	r3, [r7, #14]
 80038ae:	2300      	movs	r3, #0
 80038b0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	3301      	adds	r3, #1
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fe94 	bl	80035ec <WIZCHIP_READ>
 80038c4:	4603      	mov	r3, r0
 80038c6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80038c8:	89bb      	ldrh	r3, [r7, #12]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	b29c      	uxth	r4, r3
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3301      	adds	r3, #1
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fe86 	bl	80035ec <WIZCHIP_READ>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4423      	add	r3, r4
 80038e4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80038e6:	89bb      	ldrh	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d019      	beq.n	8003920 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	3301      	adds	r3, #1
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fe77 	bl	80035ec <WIZCHIP_READ>
 80038fe:	4603      	mov	r3, r0
 8003900:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	b29c      	uxth	r4, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	3301      	adds	r3, #1
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fe69 	bl	80035ec <WIZCHIP_READ>
 800391a:	4603      	mov	r3, r0
 800391c:	4423      	add	r3, r4
 800391e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003920:	89fa      	ldrh	r2, [r7, #14]
 8003922:	89bb      	ldrh	r3, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d1c4      	bne.n	80038b2 <getSn_TX_FSR+0x12>
   return val;
 8003928:	89fb      	ldrh	r3, [r7, #14]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003932:	b590      	push	{r4, r7, lr}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800393c:	2300      	movs	r3, #0
 800393e:	81fb      	strh	r3, [r7, #14]
 8003940:	2300      	movs	r3, #0
 8003942:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	3301      	adds	r3, #1
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fe4b 	bl	80035ec <WIZCHIP_READ>
 8003956:	4603      	mov	r3, r0
 8003958:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800395a:	89bb      	ldrh	r3, [r7, #12]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b29c      	uxth	r4, r3
 8003960:	79fb      	ldrb	r3, [r7, #7]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	3301      	adds	r3, #1
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fe3d 	bl	80035ec <WIZCHIP_READ>
 8003972:	4603      	mov	r3, r0
 8003974:	4423      	add	r3, r4
 8003976:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003978:	89bb      	ldrh	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	3301      	adds	r3, #1
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fe2e 	bl	80035ec <WIZCHIP_READ>
 8003990:	4603      	mov	r3, r0
 8003992:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003994:	89fb      	ldrh	r3, [r7, #14]
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	b29c      	uxth	r4, r3
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3301      	adds	r3, #1
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fe20 	bl	80035ec <WIZCHIP_READ>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4423      	add	r3, r4
 80039b0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80039b2:	89fa      	ldrh	r2, [r7, #14]
 80039b4:	89bb      	ldrh	r3, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d1c4      	bne.n	8003944 <getSn_RX_RSR+0x12>
   return val;
 80039ba:	89fb      	ldrh	r3, [r7, #14]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}

080039c4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80039dc:	88bb      	ldrh	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d046      	beq.n	8003a70 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3301      	adds	r3, #1
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fdfc 	bl	80035ec <WIZCHIP_READ>
 80039f4:	4603      	mov	r3, r0
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	b29c      	uxth	r4, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	3301      	adds	r3, #1
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fdf0 	bl	80035ec <WIZCHIP_READ>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4423      	add	r3, r4
 8003a10:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003a12:	89fb      	ldrh	r3, [r7, #14]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	79fa      	ldrb	r2, [r7, #7]
 8003a18:	0092      	lsls	r2, r2, #2
 8003a1a:	3202      	adds	r2, #2
 8003a1c:	00d2      	lsls	r2, r2, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003a22:	88bb      	ldrh	r3, [r7, #4]
 8003a24:	461a      	mov	r2, r3
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	68b8      	ldr	r0, [r7, #8]
 8003a2a:	f7ff fed9 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003a2e:	89fa      	ldrh	r2, [r7, #14]
 8003a30:	88bb      	ldrh	r3, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003a42:	461a      	mov	r2, r3
 8003a44:	89fb      	ldrh	r3, [r7, #14]
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	f7ff fe18 	bl	8003684 <WIZCHIP_WRITE>
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	3301      	adds	r3, #1
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003a60:	461a      	mov	r2, r3
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7ff fe0b 	bl	8003684 <WIZCHIP_WRITE>
 8003a6e:	e000      	b.n	8003a72 <wiz_send_data+0xae>
   if(len == 0)  return;
 8003a70:	bf00      	nop
}
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd90      	pop	{r4, r7, pc}

08003a78 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
 8003a84:	4613      	mov	r3, r2
 8003a86:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003a90:	88bb      	ldrh	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d046      	beq.n	8003b24 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fda2 	bl	80035ec <WIZCHIP_READ>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fd96 	bl	80035ec <WIZCHIP_READ>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4423      	add	r3, r4
 8003ac4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003ac6:	89fb      	ldrh	r3, [r7, #14]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	79fa      	ldrb	r2, [r7, #7]
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	3203      	adds	r2, #3
 8003ad0:	00d2      	lsls	r2, r2, #3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003ad6:	88bb      	ldrh	r3, [r7, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	f7ff fe1f 	bl	8003720 <WIZCHIP_READ_BUF>
   ptr += len;
 8003ae2:	89fa      	ldrh	r2, [r7, #14]
 8003ae4:	88bb      	ldrh	r3, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	3301      	adds	r3, #1
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003af6:	461a      	mov	r2, r3
 8003af8:	89fb      	ldrh	r3, [r7, #14]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7ff fdbe 	bl	8003684 <WIZCHIP_WRITE>
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003b14:	461a      	mov	r2, r3
 8003b16:	89fb      	ldrh	r3, [r7, #14]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7ff fdb1 	bl	8003684 <WIZCHIP_WRITE>
 8003b22:	e000      	b.n	8003b26 <wiz_recv_data+0xae>
   if(len == 0) return;
 8003b24:	bf00      	nop
}
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd90      	pop	{r4, r7, pc}

08003b2c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003b2c:	b590      	push	{r4, r7, lr}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	71fb      	strb	r3, [r7, #7]
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71bb      	strb	r3, [r7, #6]
 8003b42:	460b      	mov	r3, r1
 8003b44:	80bb      	strh	r3, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d902      	bls.n	8003b56 <socket+0x2a>
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b54:	e0f0      	b.n	8003d38 <socket+0x20c>
	switch(protocol)
 8003b56:	79bb      	ldrb	r3, [r7, #6]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d005      	beq.n	8003b68 <socket+0x3c>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	dd11      	ble.n	8003b84 <socket+0x58>
 8003b60:	3b02      	subs	r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d80e      	bhi.n	8003b84 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003b66:	e011      	b.n	8003b8c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003b74:	f7ff fdd4 	bl	8003720 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <socket+0x5e>
 8003b7e:	f06f 0302 	mvn.w	r3, #2
 8003b82:	e0d9      	b.n	8003d38 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003b84:	f06f 0304 	mvn.w	r3, #4
 8003b88:	e0d6      	b.n	8003d38 <socket+0x20c>
	    break;
 8003b8a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <socket+0x70>
 8003b96:	f06f 0305 	mvn.w	r3, #5
 8003b9a:	e0cd      	b.n	8003d38 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d028      	beq.n	8003bf4 <socket+0xc8>
	{
   	switch(protocol)
 8003ba2:	79bb      	ldrb	r3, [r7, #6]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d002      	beq.n	8003bae <socket+0x82>
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d008      	beq.n	8003bbe <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003bac:	e022      	b.n	8003bf4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11a      	bne.n	8003bee <socket+0xc2>
 8003bb8:	f06f 0305 	mvn.w	r3, #5
 8003bbc:	e0bc      	b.n	8003d38 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d006      	beq.n	8003bd6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db02      	blt.n	8003bd6 <socket+0xaa>
 8003bd0:	f06f 0305 	mvn.w	r3, #5
 8003bd4:	e0b0      	b.n	8003d38 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db04      	blt.n	8003bf2 <socket+0xc6>
 8003be8:	f06f 0305 	mvn.w	r3, #5
 8003bec:	e0a4      	b.n	8003d38 <socket+0x20c>
   	      break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <socket+0xc8>
   	      break;
 8003bf2:	bf00      	nop
   	}
   }
	close(sn);
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f8ac 	bl	8003d54 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3301      	adds	r3, #1
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4618      	mov	r0, r3
 8003c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c0a:	f023 030f 	bic.w	r3, r3, #15
 8003c0e:	b25a      	sxtb	r2, r3
 8003c10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b25b      	sxtb	r3, r3
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f7ff fd32 	bl	8003684 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003c20:	88bb      	ldrh	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d110      	bne.n	8003c48 <socket+0x11c>
	{
	   port = sock_any_port++;
 8003c26:	4b46      	ldr	r3, [pc, #280]	@ (8003d40 <socket+0x214>)
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	b291      	uxth	r1, r2
 8003c2e:	4a44      	ldr	r2, [pc, #272]	@ (8003d40 <socket+0x214>)
 8003c30:	8011      	strh	r1, [r2, #0]
 8003c32:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003c34:	4b42      	ldr	r3, [pc, #264]	@ (8003d40 <socket+0x214>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d103      	bne.n	8003c48 <socket+0x11c>
 8003c40:	4b3f      	ldr	r3, [pc, #252]	@ (8003d40 <socket+0x214>)
 8003c42:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003c46:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c54:	461a      	mov	r2, r3
 8003c56:	88bb      	ldrh	r3, [r7, #4]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f7ff fd0f 	bl	8003684 <WIZCHIP_WRITE>
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c72:	461a      	mov	r2, r3
 8003c74:	88bb      	ldrh	r3, [r7, #4]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7ff fd02 	bl	8003684 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	3301      	adds	r3, #1
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fcf8 	bl	8003684 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003c94:	bf00      	nop
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fca2 	bl	80035ec <WIZCHIP_READ>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f3      	bne.n	8003c96 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	b21b      	sxth	r3, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	b21a      	sxth	r2, r3
 8003cbc:	4b21      	ldr	r3, [pc, #132]	@ (8003d44 <socket+0x218>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b21b      	sxth	r3, r3
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d44 <socket+0x218>)
 8003cca:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 0201 	and.w	r2, r3, #1
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	4b1a      	ldr	r3, [pc, #104]	@ (8003d44 <socket+0x218>)
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b21b      	sxth	r3, r3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	4b17      	ldr	r3, [pc, #92]	@ (8003d44 <socket+0x218>)
 8003ce8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2201      	movs	r2, #1
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	b21b      	sxth	r3, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	b21a      	sxth	r2, r3
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <socket+0x21c>)
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b21b      	sxth	r3, r3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	4b10      	ldr	r3, [pc, #64]	@ (8003d48 <socket+0x21c>)
 8003d06:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <socket+0x220>)
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	4a0e      	ldr	r2, [pc, #56]	@ (8003d50 <socket+0x224>)
 8003d16:	2100      	movs	r1, #0
 8003d18:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003d1a:	bf00      	nop
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3301      	adds	r3, #1
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fc5f 	bl	80035ec <WIZCHIP_READ>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f3      	beq.n	8003d1c <socket+0x1f0>
   return (int8_t)sn;
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	20000028 	.word	0x20000028
 8003d44:	200005c4 	.word	0x200005c4
 8003d48:	200005c6 	.word	0x200005c6
 8003d4c:	200005c8 	.word	0x200005c8
 8003d50:	200005d8 	.word	0x200005d8

08003d54 <close>:

int8_t close(uint8_t sn)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d902      	bls.n	8003d6a <close+0x16>
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d68:	e055      	b.n	8003e16 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	3301      	adds	r3, #1
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d76:	2110      	movs	r1, #16
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fc83 	bl	8003684 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003d7e:	bf00      	nop
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3301      	adds	r3, #1
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fc2d 	bl	80035ec <WIZCHIP_READ>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f3      	bne.n	8003d80 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003da4:	211f      	movs	r1, #31
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fc6c 	bl	8003684 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	2201      	movs	r2, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	b21b      	sxth	r3, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <close+0xcc>)
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b21b      	sxth	r3, r3
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b21b      	sxth	r3, r3
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b16      	ldr	r3, [pc, #88]	@ (8003e20 <close+0xcc>)
 8003dc8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	b21b      	sxth	r3, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	b21a      	sxth	r2, r3
 8003dd8:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <close+0xd0>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	4013      	ands	r3, r2
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e24 <close+0xd0>)
 8003de6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	4a0f      	ldr	r2, [pc, #60]	@ (8003e28 <close+0xd4>)
 8003dec:	2100      	movs	r1, #0
 8003dee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e2c <close+0xd8>)
 8003df6:	2100      	movs	r1, #0
 8003df8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003dfa:	bf00      	nop
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	3301      	adds	r3, #1
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fbef 	bl	80035ec <WIZCHIP_READ>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f3      	bne.n	8003dfc <close+0xa8>
	return SOCK_OK;
 8003e14:	2301      	movs	r3, #1
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200005c4 	.word	0x200005c4
 8003e24:	200005c6 	.word	0x200005c6
 8003e28:	200005c8 	.word	0x200005c8
 8003e2c:	200005d8 	.word	0x200005d8

08003e30 <listen>:

int8_t listen(uint8_t sn)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d902      	bls.n	8003e46 <listen+0x16>
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e44:	e049      	b.n	8003eda <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fbcc 	bl	80035ec <WIZCHIP_READ>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d002      	beq.n	8003e64 <listen+0x34>
 8003e5e:	f06f 0304 	mvn.w	r3, #4
 8003e62:	e03a      	b.n	8003eda <listen+0xaa>
	CHECK_SOCKINIT();
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3301      	adds	r3, #1
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fbbb 	bl	80035ec <WIZCHIP_READ>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b13      	cmp	r3, #19
 8003e7a:	d002      	beq.n	8003e82 <listen+0x52>
 8003e7c:	f06f 0302 	mvn.w	r3, #2
 8003e80:	e02b      	b.n	8003eda <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3301      	adds	r3, #1
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e8e:	2102      	movs	r1, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fbf7 	bl	8003684 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003e96:	bf00      	nop
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fba1 	bl	80035ec <WIZCHIP_READ>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f3      	bne.n	8003e98 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003eb0:	e006      	b.n	8003ec0 <listen+0x90>
   {
         close(sn);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff4d 	bl	8003d54 <close>
         return SOCKERR_SOCKCLOSED;
 8003eba:	f06f 0303 	mvn.w	r3, #3
 8003ebe:	e00c      	b.n	8003eda <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fb8d 	bl	80035ec <WIZCHIP_READ>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b14      	cmp	r3, #20
 8003ed6:	d1ec      	bne.n	8003eb2 <listen+0x82>
   }
   return SOCK_OK;
 8003ed8:	2301      	movs	r3, #1
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d902      	bls.n	8003efa <disconnect+0x16>
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ef8:	e062      	b.n	8003fc0 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3301      	adds	r3, #1
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fb72 	bl	80035ec <WIZCHIP_READ>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d002      	beq.n	8003f18 <disconnect+0x34>
 8003f12:	f06f 0304 	mvn.w	r3, #4
 8003f16:	e053      	b.n	8003fc0 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f24:	2108      	movs	r1, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fbac 	bl	8003684 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003f2c:	bf00      	nop
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3301      	adds	r3, #1
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fb56 	bl	80035ec <WIZCHIP_READ>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f3      	bne.n	8003f2e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc8 <disconnect+0xe4>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b21b      	sxth	r3, r3
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	b21b      	sxth	r3, r3
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	4b19      	ldr	r3, [pc, #100]	@ (8003fc8 <disconnect+0xe4>)
 8003f62:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003f64:	4b19      	ldr	r3, [pc, #100]	@ (8003fcc <disconnect+0xe8>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	fa42 f303 	asr.w	r3, r2, r3
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d016      	beq.n	8003fa6 <disconnect+0xc2>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e021      	b.n	8003fc0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	3301      	adds	r3, #1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fb2f 	bl	80035ec <WIZCHIP_READ>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <disconnect+0xc2>
	   {
	      close(sn);
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff feda 	bl	8003d54 <close>
	      return SOCKERR_TIMEOUT;
 8003fa0:	f06f 030c 	mvn.w	r3, #12
 8003fa4:	e00c      	b.n	8003fc0 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3301      	adds	r3, #1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fb1a 	bl	80035ec <WIZCHIP_READ>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1de      	bne.n	8003f7c <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003fbe:	2301      	movs	r3, #1
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200005c6 	.word	0x200005c6
 8003fcc:	200005c4 	.word	0x200005c4

08003fd0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	6039      	str	r1, [r7, #0]
 8003fda:	71fb      	strb	r3, [r7, #7]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d902      	bls.n	8003ff4 <send+0x24>
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ff2:	e0dd      	b.n	80041b0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff faf5 	bl	80035ec <WIZCHIP_READ>
 8004002:	4603      	mov	r3, r0
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2b01      	cmp	r3, #1
 800400a:	d002      	beq.n	8004012 <send+0x42>
 800400c:	f06f 0304 	mvn.w	r3, #4
 8004010:	e0ce      	b.n	80041b0 <send+0x1e0>
   CHECK_SOCKDATA();
 8004012:	88bb      	ldrh	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <send+0x4e>
 8004018:	f06f 030d 	mvn.w	r3, #13
 800401c:	e0c8      	b.n	80041b0 <send+0x1e0>
   tmp = getSn_SR(sn);
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	3301      	adds	r3, #1
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fade 	bl	80035ec <WIZCHIP_READ>
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b17      	cmp	r3, #23
 8004038:	d005      	beq.n	8004046 <send+0x76>
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b1c      	cmp	r3, #28
 800403e:	d002      	beq.n	8004046 <send+0x76>
 8004040:	f06f 0306 	mvn.w	r3, #6
 8004044:	e0b4      	b.n	80041b0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8004046:	4b5c      	ldr	r3, [pc, #368]	@ (80041b8 <send+0x1e8>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	fa42 f303 	asr.w	r3, r2, r3
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d039      	beq.n	80040ce <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3301      	adds	r3, #1
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fac0 	bl	80035ec <WIZCHIP_READ>
 800406c:	4603      	mov	r3, r0
 800406e:	f003 031f 	and.w	r3, r3, #31
 8004072:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3301      	adds	r3, #1
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800408a:	2110      	movs	r1, #16
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff faf9 	bl	8003684 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	2201      	movs	r2, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	b21b      	sxth	r3, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	b21a      	sxth	r2, r3
 80040a0:	4b45      	ldr	r3, [pc, #276]	@ (80041b8 <send+0x1e8>)
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b21b      	sxth	r3, r3
 80040a6:	4013      	ands	r3, r2
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	4b42      	ldr	r3, [pc, #264]	@ (80041b8 <send+0x1e8>)
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e00d      	b.n	80040ce <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d006      	beq.n	80040ca <send+0xfa>
      {
         close(sn);
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fe48 	bl	8003d54 <close>
         return SOCKERR_TIMEOUT;
 80040c4:	f06f 030c 	mvn.w	r3, #12
 80040c8:	e072      	b.n	80041b0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e070      	b.n	80041b0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3301      	adds	r3, #1
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fa86 	bl	80035ec <WIZCHIP_READ>
 80040e0:	4603      	mov	r3, r0
 80040e2:	029b      	lsls	r3, r3, #10
 80040e4:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80040e6:	88ba      	ldrh	r2, [r7, #4]
 80040e8:	89bb      	ldrh	r3, [r7, #12]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d901      	bls.n	80040f2 <send+0x122>
 80040ee:	89bb      	ldrh	r3, [r7, #12]
 80040f0:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fbd3 	bl	80038a0 <getSn_TX_FSR>
 80040fa:	4603      	mov	r3, r0
 80040fc:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	3301      	adds	r3, #1
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fa6e 	bl	80035ec <WIZCHIP_READ>
 8004110:	4603      	mov	r3, r0
 8004112:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	2b17      	cmp	r3, #23
 8004118:	d009      	beq.n	800412e <send+0x15e>
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b1c      	cmp	r3, #28
 800411e:	d006      	beq.n	800412e <send+0x15e>
      {
         close(sn);
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fe16 	bl	8003d54 <close>
         return SOCKERR_SOCKSTATUS;
 8004128:	f06f 0306 	mvn.w	r3, #6
 800412c:	e040      	b.n	80041b0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800412e:	4b23      	ldr	r3, [pc, #140]	@ (80041bc <send+0x1ec>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	fa42 f303 	asr.w	r3, r2, r3
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <send+0x17e>
 8004142:	88ba      	ldrh	r2, [r7, #4]
 8004144:	89bb      	ldrh	r3, [r7, #12]
 8004146:	429a      	cmp	r2, r3
 8004148:	d901      	bls.n	800414e <send+0x17e>
 800414a:	2300      	movs	r3, #0
 800414c:	e030      	b.n	80041b0 <send+0x1e0>
      if(len <= freesize) break;
 800414e:	88ba      	ldrh	r2, [r7, #4]
 8004150:	89bb      	ldrh	r3, [r7, #12]
 8004152:	429a      	cmp	r2, r3
 8004154:	d900      	bls.n	8004158 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8004156:	e7cc      	b.n	80040f2 <send+0x122>
      if(len <= freesize) break;
 8004158:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800415a:	88ba      	ldrh	r2, [r7, #4]
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	6839      	ldr	r1, [r7, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff fc2f 	bl	80039c4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	3301      	adds	r3, #1
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004172:	2120      	movs	r1, #32
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fa85 	bl	8003684 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800417a:	bf00      	nop
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3301      	adds	r3, #1
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fa2f 	bl	80035ec <WIZCHIP_READ>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f3      	bne.n	800417c <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	b21a      	sxth	r2, r3
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <send+0x1e8>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b21b      	sxth	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	4b03      	ldr	r3, [pc, #12]	@ (80041b8 <send+0x1e8>)
 80041ac:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80041ae:	88bb      	ldrh	r3, [r7, #4]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200005c6 	.word	0x200005c6
 80041bc:	200005c4 	.word	0x200005c4

080041c0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d902      	bls.n	80041e4 <recv+0x24>
 80041de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041e2:	e09b      	b.n	800431c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3301      	adds	r3, #1
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff f9fd 	bl	80035ec <WIZCHIP_READ>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d002      	beq.n	8004202 <recv+0x42>
 80041fc:	f06f 0304 	mvn.w	r3, #4
 8004200:	e08c      	b.n	800431c <recv+0x15c>
   CHECK_SOCKDATA();
 8004202:	88bb      	ldrh	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <recv+0x4e>
 8004208:	f06f 030d 	mvn.w	r3, #13
 800420c:	e086      	b.n	800431c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3301      	adds	r3, #1
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f9e6 	bl	80035ec <WIZCHIP_READ>
 8004220:	4603      	mov	r3, r0
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004226:	89ba      	ldrh	r2, [r7, #12]
 8004228:	88bb      	ldrh	r3, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d201      	bcs.n	8004232 <recv+0x72>
 800422e:	89bb      	ldrh	r3, [r7, #12]
 8004230:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb7c 	bl	8003932 <getSn_RX_RSR>
 800423a:	4603      	mov	r3, r0
 800423c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	3301      	adds	r3, #1
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f9ce 	bl	80035ec <WIZCHIP_READ>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b17      	cmp	r3, #23
 8004258:	d026      	beq.n	80042a8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b1c      	cmp	r3, #28
 800425e:	d11c      	bne.n	800429a <recv+0xda>
            {
               if(recvsize != 0) break;
 8004260:	89bb      	ldrh	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d133      	bne.n	80042ce <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fb19 	bl	80038a0 <getSn_TX_FSR>
 800426e:	4603      	mov	r3, r0
 8004270:	461c      	mov	r4, r3
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	3301      	adds	r3, #1
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff f9b4 	bl	80035ec <WIZCHIP_READ>
 8004284:	4603      	mov	r3, r0
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	429c      	cmp	r4, r3
 800428a:	d10d      	bne.n	80042a8 <recv+0xe8>
               {
                  close(sn);
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fd60 	bl	8003d54 <close>
                  return SOCKERR_SOCKSTATUS;
 8004294:	f06f 0306 	mvn.w	r3, #6
 8004298:	e040      	b.n	800431c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fd59 	bl	8003d54 <close>
               return SOCKERR_SOCKSTATUS;
 80042a2:	f06f 0306 	mvn.w	r3, #6
 80042a6:	e039      	b.n	800431c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80042a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004324 <recv+0x164>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	fa42 f303 	asr.w	r3, r2, r3
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <recv+0x106>
 80042bc:	89bb      	ldrh	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <recv+0x106>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e02a      	b.n	800431c <recv+0x15c>
         if(recvsize != 0) break;
 80042c6:	89bb      	ldrh	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 80042cc:	e7b1      	b.n	8004232 <recv+0x72>
               if(recvsize != 0) break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <recv+0x114>
         if(recvsize != 0) break;
 80042d2:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80042d4:	89ba      	ldrh	r2, [r7, #12]
 80042d6:	88bb      	ldrh	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d201      	bcs.n	80042e0 <recv+0x120>
 80042dc:	89bb      	ldrh	r3, [r7, #12]
 80042de:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80042e0:	88ba      	ldrh	r2, [r7, #4]
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fbc6 	bl	8003a78 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	3301      	adds	r3, #1
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042f8:	2140      	movs	r1, #64	@ 0x40
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f9c2 	bl	8003684 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004300:	bf00      	nop
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	3301      	adds	r3, #1
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff f96c 	bl	80035ec <WIZCHIP_READ>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f3      	bne.n	8004302 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800431a:	88bb      	ldrh	r3, [r7, #4]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}
 8004324:	200005c4 	.word	0x200005c4

08004328 <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	603a      	str	r2, [r7, #0]
 8004332:	71fb      	strb	r3, [r7, #7]
 8004334:	460b      	mov	r3, r1
 8004336:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d902      	bls.n	8004348 <ctlsocket+0x20>
 8004342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004346:	e0c0      	b.n	80044ca <ctlsocket+0x1a2>
   switch(cstype)
 8004348:	79bb      	ldrb	r3, [r7, #6]
 800434a:	2b07      	cmp	r3, #7
 800434c:	f200 80b9 	bhi.w	80044c2 <ctlsocket+0x19a>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <ctlsocket+0x30>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004379 	.word	0x08004379
 800435c:	080043cd 	.word	0x080043cd
 8004360:	080043e7 	.word	0x080043e7
 8004364:	08004405 	.word	0x08004405
 8004368:	08004423 	.word	0x08004423
 800436c:	08004453 	.word	0x08004453
 8004370:	08004473 	.word	0x08004473
 8004374:	080044a3 	.word	0x080044a3
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10d      	bne.n	80043a0 <ctlsocket+0x78>
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	2201      	movs	r2, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	b21a      	sxth	r2, r3
 800438e:	4b51      	ldr	r3, [pc, #324]	@ (80044d4 <ctlsocket+0x1ac>)
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b21b      	sxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	b21b      	sxth	r3, r3
 8004398:	b29a      	uxth	r2, r3
 800439a:	4b4e      	ldr	r3, [pc, #312]	@ (80044d4 <ctlsocket+0x1ac>)
 800439c:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 800439e:	e093      	b.n	80044c8 <ctlsocket+0x1a0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10f      	bne.n	80043c6 <ctlsocket+0x9e>
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	2201      	movs	r2, #1
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	4b47      	ldr	r3, [pc, #284]	@ (80044d4 <ctlsocket+0x1ac>)
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	4013      	ands	r3, r2
 80043bc:	b21b      	sxth	r3, r3
 80043be:	b29a      	uxth	r2, r3
 80043c0:	4b44      	ldr	r3, [pc, #272]	@ (80044d4 <ctlsocket+0x1ac>)
 80043c2:	801a      	strh	r2, [r3, #0]
         break;
 80043c4:	e080      	b.n	80044c8 <ctlsocket+0x1a0>
         else return SOCKERR_ARG;
 80043c6:	f06f 0309 	mvn.w	r3, #9
 80043ca:	e07e      	b.n	80044ca <ctlsocket+0x1a2>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 80043cc:	4b41      	ldr	r3, [pc, #260]	@ (80044d4 <ctlsocket+0x1ac>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	fa42 f303 	asr.w	r3, r2, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	701a      	strb	r2, [r3, #0]
         //
         break;
 80043e4:	e070      	b.n	80044c8 <ctlsocket+0x1a0>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3301      	adds	r3, #1
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f8fa 	bl	80035ec <WIZCHIP_READ>
 80043f8:	4603      	mov	r3, r0
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	801a      	strh	r2, [r3, #0]
         break;
 8004402:	e061      	b.n	80044c8 <ctlsocket+0x1a0>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	3301      	adds	r3, #1
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff f8eb 	bl	80035ec <WIZCHIP_READ>
 8004416:	4603      	mov	r3, r0
 8004418:	029b      	lsls	r3, r3, #10
 800441a:	b29a      	uxth	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	801a      	strh	r2, [r3, #0]
         break;
 8004420:	e052      	b.n	80044c8 <ctlsocket+0x1a0>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b1f      	cmp	r3, #31
 8004428:	d902      	bls.n	8004430 <ctlsocket+0x108>
 800442a:	f06f 0309 	mvn.w	r3, #9
 800442e:	e04c      	b.n	80044ca <ctlsocket+0x1a2>
         setSn_IR(sn,*(uint8_t*)arg);
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	3301      	adds	r3, #1
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800443c:	461a      	mov	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7ff f91a 	bl	8003684 <WIZCHIP_WRITE>
         break;
 8004450:	e03a      	b.n	80044c8 <ctlsocket+0x1a0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3301      	adds	r3, #1
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f8c4 	bl	80035ec <WIZCHIP_READ>
 8004464:	4603      	mov	r3, r0
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	b2da      	uxtb	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	701a      	strb	r2, [r3, #0]
         break;
 8004470:	e02a      	b.n	80044c8 <ctlsocket+0x1a0>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b1f      	cmp	r3, #31
 8004478:	d902      	bls.n	8004480 <ctlsocket+0x158>
 800447a:	f06f 0309 	mvn.w	r3, #9
 800447e:	e024      	b.n	80044ca <ctlsocket+0x1a2>
         setSn_IMR(sn,*(uint8_t*)arg);
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	3301      	adds	r3, #1
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 800448c:	461a      	mov	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f7ff f8f2 	bl	8003684 <WIZCHIP_WRITE>
         break;
 80044a0:	e012      	b.n	80044c8 <ctlsocket+0x1a0>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	3301      	adds	r3, #1
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff f89c 	bl	80035ec <WIZCHIP_READ>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	701a      	strb	r2, [r3, #0]
         break;
 80044c0:	e002      	b.n	80044c8 <ctlsocket+0x1a0>
   #endif
      default:
         return SOCKERR_ARG;
 80044c2:	f06f 0309 	mvn.w	r3, #9
 80044c6:	e000      	b.n	80044ca <ctlsocket+0x1a2>
   }
   return SOCK_OK;
 80044c8:	2301      	movs	r3, #1
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200005c4 	.word	0x200005c4

080044d8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	70fb      	strb	r3, [r7, #3]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
 800454c:	2300      	movs	r3, #0
 800454e:	4618      	mov	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <reg_wizchip_cs_cbfunc+0x16>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004586:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <reg_wizchip_cs_cbfunc+0x40>)
 8004588:	4a0a      	ldr	r2, [pc, #40]	@ (80045b4 <reg_wizchip_cs_cbfunc+0x44>)
 800458a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800458c:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <reg_wizchip_cs_cbfunc+0x40>)
 800458e:	4a0a      	ldr	r2, [pc, #40]	@ (80045b8 <reg_wizchip_cs_cbfunc+0x48>)
 8004590:	619a      	str	r2, [r3, #24]
 8004592:	e006      	b.n	80045a2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004594:	4a06      	ldr	r2, [pc, #24]	@ (80045b0 <reg_wizchip_cs_cbfunc+0x40>)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800459a:	4a05      	ldr	r2, [pc, #20]	@ (80045b0 <reg_wizchip_cs_cbfunc+0x40>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6193      	str	r3, [r2, #24]
   }
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	2000002c 	.word	0x2000002c
 80045b4:	080044f5 	.word	0x080044f5
 80045b8:	08004503 	.word	0x08004503

080045bc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80045c6:	bf00      	nop
 80045c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <reg_wizchip_spi_cbfunc+0x4c>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f9      	beq.n	80045c8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <reg_wizchip_spi_cbfunc+0x24>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80045e0:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <reg_wizchip_spi_cbfunc+0x4c>)
 80045e2:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <reg_wizchip_spi_cbfunc+0x50>)
 80045e4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80045e6:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <reg_wizchip_spi_cbfunc+0x4c>)
 80045e8:	4a09      	ldr	r2, [pc, #36]	@ (8004610 <reg_wizchip_spi_cbfunc+0x54>)
 80045ea:	621a      	str	r2, [r3, #32]
 80045ec:	e006      	b.n	80045fc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80045ee:	4a06      	ldr	r2, [pc, #24]	@ (8004608 <reg_wizchip_spi_cbfunc+0x4c>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80045f4:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <reg_wizchip_spi_cbfunc+0x4c>)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6213      	str	r3, [r2, #32]
   }
}
 80045fa:	bf00      	nop
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	2000002c 	.word	0x2000002c
 800460c:	08004549 	.word	0x08004549
 8004610:	08004559 	.word	0x08004559

08004614 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	f200 80c5 	bhi.w	80047be <ctlwizchip+0x1aa>
 8004634:	a201      	add	r2, pc, #4	@ (adr r2, 800463c <ctlwizchip+0x28>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800467d 	.word	0x0800467d
 8004640:	08004683 	.word	0x08004683
 8004644:	080046af 	.word	0x080046af
 8004648:	080046a3 	.word	0x080046a3
 800464c:	080046bd 	.word	0x080046bd
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046d7 	.word	0x080046d7
 8004658:	080046fd 	.word	0x080046fd
 800465c:	0800471f 	.word	0x0800471f
 8004660:	08004763 	.word	0x08004763
 8004664:	08004769 	.word	0x08004769
 8004668:	08004771 	.word	0x08004771
 800466c:	080047c5 	.word	0x080047c5
 8004670:	08004779 	.word	0x08004779
 8004674:	08004787 	.word	0x08004787
 8004678:	080047a3 	.word	0x080047a3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800467c:	f000 f8e8 	bl	8004850 <wizchip_sw_reset>
         break;
 8004680:	e0a1      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d004      	beq.n	8004692 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3308      	adds	r3, #8
 8004690:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f925 	bl	80048e8 <wizchip_init>
 800469e:	4603      	mov	r3, r0
 80046a0:	e092      	b.n	80047c8 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f9aa 	bl	8004a00 <wizchip_clrinterrupt>
         break;
 80046ac:	e08b      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80046ae:	f000 f9db 	bl	8004a68 <wizchip_getinterrupt>
 80046b2:	4603      	mov	r3, r0
 80046b4:	461a      	mov	r2, r3
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	801a      	strh	r2, [r3, #0]
         break;
 80046ba:	e084      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 f9f6 	bl	8004ab2 <wizchip_setinterruptmask>
         break;         
 80046c6:	e07e      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80046c8:	f000 fa0e 	bl	8004ae8 <wizchip_getinterruptmask>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	801a      	strh	r2, [r3, #0]
         break;
 80046d4:	e077      	b.n	80047c6 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	4619      	mov	r1, r3
 80046e2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80046e6:	f7fe ffcd 	bl	8003684 <WIZCHIP_WRITE>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80046f6:	f7fe ffc5 	bl	8003684 <WIZCHIP_WRITE>
         break;
 80046fa:	e064      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80046fc:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8004700:	f7fe ff74 	bl	80035ec <WIZCHIP_READ>
 8004704:	4603      	mov	r3, r0
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	b29c      	uxth	r4, r3
 800470a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800470e:	f7fe ff6d 	bl	80035ec <WIZCHIP_READ>
 8004712:	4603      	mov	r3, r0
 8004714:	4423      	add	r3, r4
 8004716:	b29a      	uxth	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	801a      	strh	r2, [r3, #0]
         break;
 800471c:	e053      	b.n	80047c6 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <ctlwizchip+0x1bc>)
 8004720:	789a      	ldrb	r2, [r3, #2]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a29      	ldr	r2, [pc, #164]	@ (80047d0 <ctlwizchip+0x1bc>)
 800472c:	78d2      	ldrb	r2, [r2, #3]
 800472e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	3302      	adds	r3, #2
 8004734:	4a26      	ldr	r2, [pc, #152]	@ (80047d0 <ctlwizchip+0x1bc>)
 8004736:	7912      	ldrb	r2, [r2, #4]
 8004738:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3303      	adds	r3, #3
 800473e:	4a24      	ldr	r2, [pc, #144]	@ (80047d0 <ctlwizchip+0x1bc>)
 8004740:	7952      	ldrb	r2, [r2, #5]
 8004742:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	3304      	adds	r3, #4
 8004748:	4a21      	ldr	r2, [pc, #132]	@ (80047d0 <ctlwizchip+0x1bc>)
 800474a:	7992      	ldrb	r2, [r2, #6]
 800474c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	3305      	adds	r3, #5
 8004752:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <ctlwizchip+0x1bc>)
 8004754:	79d2      	ldrb	r2, [r2, #7]
 8004756:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	3306      	adds	r3, #6
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
         break;
 8004760:	e031      	b.n	80047c6 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8004762:	f000 fa13 	bl	8004b8c <wizphy_reset>
         break;
 8004766:	e02e      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f000 fa36 	bl	8004bda <wizphy_setphyconf>
         break;
 800476e:	e02a      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f000 fa75 	bl	8004c60 <wizphy_getphyconf>
         break;
 8004776:	e026      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fad9 	bl	8004d34 <wizphy_setphypmode>
 8004782:	4603      	mov	r3, r0
 8004784:	e020      	b.n	80047c8 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8004786:	f000 f9e8 	bl	8004b5a <wizphy_getphypmode>
 800478a:	4603      	mov	r3, r0
 800478c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2bff      	cmp	r3, #255	@ 0xff
 8004792:	d102      	bne.n	800479a <ctlwizchip+0x186>
 8004794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004798:	e016      	b.n	80047c8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	7dfa      	ldrb	r2, [r7, #23]
 800479e:	701a      	strb	r2, [r3, #0]
         break;
 80047a0:	e011      	b.n	80047c6 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80047a2:	f000 f9c4 	bl	8004b2e <wizphy_getphylink>
 80047a6:	4603      	mov	r3, r0
 80047a8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2bff      	cmp	r3, #255	@ 0xff
 80047ae:	d102      	bne.n	80047b6 <ctlwizchip+0x1a2>
 80047b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047b4:	e008      	b.n	80047c8 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	7dfa      	ldrb	r2, [r7, #23]
 80047ba:	701a      	strb	r2, [r3, #0]
         break;
 80047bc:	e003      	b.n	80047c6 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047c2:	e001      	b.n	80047c8 <ctlwizchip+0x1b4>
         break;
 80047c4:	bf00      	nop
   }
   return 0;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	2000002c 	.word	0x2000002c

080047d4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	6039      	str	r1, [r7, #0]
 80047de:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d82c      	bhi.n	8004840 <ctlnetwork+0x6c>
 80047e6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ec <ctlnetwork+0x18>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004805 	.word	0x08004805
 80047f0:	0800480d 	.word	0x0800480d
 80047f4:	08004815 	.word	0x08004815
 80047f8:	08004823 	.word	0x08004823
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004839 	.word	0x08004839
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004804:	6838      	ldr	r0, [r7, #0]
 8004806:	f000 fadf 	bl	8004dc8 <wizchip_setnetinfo>
         break;
 800480a:	e01c      	b.n	8004846 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800480c:	6838      	ldr	r0, [r7, #0]
 800480e:	f000 fb1b 	bl	8004e48 <wizchip_getnetinfo>
         break;
 8004812:	e018      	b.n	8004846 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fb55 	bl	8004ec8 <wizchip_setnetmode>
 800481e:	4603      	mov	r3, r0
 8004820:	e012      	b.n	8004848 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004822:	f000 fb73 	bl	8004f0c <wizchip_getnetmode>
 8004826:	4603      	mov	r3, r0
 8004828:	461a      	mov	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	701a      	strb	r2, [r3, #0]
         break;
 800482e:	e00a      	b.n	8004846 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f000 fb73 	bl	8004f1c <wizchip_settimeout>
         break;
 8004836:	e006      	b.n	8004846 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004838:	6838      	ldr	r0, [r7, #0]
 800483a:	f000 fb90 	bl	8004f5e <wizchip_gettimeout>
         break;
 800483e:	e002      	b.n	8004846 <ctlnetwork+0x72>
      default:
         return -1;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004844:	e000      	b.n	8004848 <ctlnetwork+0x74>
   }
   return 0;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	2206      	movs	r2, #6
 800485a:	4619      	mov	r1, r3
 800485c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004860:	f7fe ff5e 	bl	8003720 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	2204      	movs	r2, #4
 800486a:	4619      	mov	r1, r3
 800486c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004870:	f7fe ff56 	bl	8003720 <WIZCHIP_READ_BUF>
 8004874:	f107 0310 	add.w	r3, r7, #16
 8004878:	2204      	movs	r2, #4
 800487a:	4619      	mov	r1, r3
 800487c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004880:	f7fe ff4e 	bl	8003720 <WIZCHIP_READ_BUF>
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	2204      	movs	r2, #4
 800488a:	4619      	mov	r1, r3
 800488c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004890:	f7fe ff46 	bl	8003720 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004894:	2180      	movs	r1, #128	@ 0x80
 8004896:	2000      	movs	r0, #0
 8004898:	f7fe fef4 	bl	8003684 <WIZCHIP_WRITE>
   getMR(); // for delay
 800489c:	2000      	movs	r0, #0
 800489e:	f7fe fea5 	bl	80035ec <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	2206      	movs	r2, #6
 80048a6:	4619      	mov	r1, r3
 80048a8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80048ac:	f7fe ff98 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	2204      	movs	r2, #4
 80048b6:	4619      	mov	r1, r3
 80048b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80048bc:	f7fe ff90 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80048c0:	f107 0310 	add.w	r3, r7, #16
 80048c4:	2204      	movs	r2, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80048cc:	f7fe ff88 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	2204      	movs	r2, #4
 80048d6:	4619      	mov	r1, r3
 80048d8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80048dc:	f7fe ff80 	bl	80037e0 <WIZCHIP_WRITE_BUF>
}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80048f6:	f7ff ffab 	bl	8004850 <wizchip_sw_reset>
   if(txsize)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d03b      	beq.n	8004978 <wizchip_init+0x90>
   {
      tmp = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e015      	b.n	8004936 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800490a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	4413      	add	r3, r2
 8004918:	b2db      	uxtb	r3, r3
 800491a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800491c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004920:	2b10      	cmp	r3, #16
 8004922:	dd02      	ble.n	800492a <wizchip_init+0x42>
 8004924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004928:	e066      	b.n	80049f8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800492a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	3301      	adds	r3, #1
 8004932:	b2db      	uxtb	r3, r3
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493a:	2b07      	cmp	r3, #7
 800493c:	dde5      	ble.n	800490a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	e015      	b.n	8004970 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	3301      	adds	r3, #1
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004952:	4618      	mov	r0, r3
 8004954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4413      	add	r3, r2
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	f7fe fe90 	bl	8003684 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3301      	adds	r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004974:	2b07      	cmp	r3, #7
 8004976:	dde5      	ble.n	8004944 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03b      	beq.n	80049f6 <wizchip_init+0x10e>
   {
      tmp = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
 8004986:	e015      	b.n	80049b4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8004988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	4413      	add	r3, r2
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	7bbb      	ldrb	r3, [r7, #14]
 8004994:	4413      	add	r3, r2
 8004996:	b2db      	uxtb	r3, r3
 8004998:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800499a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800499e:	2b10      	cmp	r3, #16
 80049a0:	dd02      	ble.n	80049a8 <wizchip_init+0xc0>
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049a6:	e027      	b.n	80049f8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	3301      	adds	r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b8:	2b07      	cmp	r3, #7
 80049ba:	dde5      	ble.n	8004988 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
 80049c0:	e015      	b.n	80049ee <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80049c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	3301      	adds	r3, #1
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80049d0:	4618      	mov	r0, r3
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	4413      	add	r3, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	4619      	mov	r1, r3
 80049de:	f7fe fe51 	bl	8003684 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	3301      	adds	r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	73fb      	strb	r3, [r7, #15]
 80049ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f2:	2b07      	cmp	r3, #7
 80049f4:	dde5      	ble.n	80049c2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	f023 030f 	bic.w	r3, r3, #15
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004a24:	f7fe fe2e 	bl	8003684 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
 8004a2c:	e014      	b.n	8004a58 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004a2e:	7bba      	ldrb	r2, [r7, #14]
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	fa42 f303 	asr.w	r3, r2, r3
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <wizchip_clrinterrupt+0x52>
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	3301      	adds	r3, #1
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a4a:	211f      	movs	r1, #31
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe fe19 	bl	8003684 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	3301      	adds	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b07      	cmp	r3, #7
 8004a5c:	d9e7      	bls.n	8004a2e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004a5e:	bf00      	nop
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8004a7a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004a7e:	f7fe fdb5 	bl	80035ec <WIZCHIP_READ>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f023 030f 	bic.w	r3, r3, #15
 8004a88:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8004a8a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004a8e:	f7fe fdad 	bl	80035ec <WIZCHIP_READ>
 8004a92:	4603      	mov	r3, r0
 8004a94:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8004a96:	79bb      	ldrb	r3, [r7, #6]
 8004a98:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004a9a:	88bb      	ldrh	r3, [r7, #4]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004aa8:	88bb      	ldrh	r3, [r7, #4]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	4603      	mov	r3, r0
 8004aba:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	4619      	mov	r1, r3
 8004acc:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004ad0:	f7fe fdd8 	bl	8003684 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004ad4:	7bbb      	ldrb	r3, [r7, #14]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004adc:	f7fe fdd2 	bl	8003684 <WIZCHIP_WRITE>
#endif   
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004afa:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004afe:	f7fe fd75 	bl	80035ec <WIZCHIP_READ>
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004b06:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004b0a:	f7fe fd6f 	bl	80035ec <WIZCHIP_READ>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004b12:	79bb      	ldrb	r3, [r7, #6]
 8004b14:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004b16:	88bb      	ldrh	r3, [r7, #4]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4413      	add	r3, r2
 8004b22:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004b24:	88bb      	ldrh	r3, [r7, #4]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004b34:	2300      	movs	r3, #0
 8004b36:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004b38:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b3c:	f7fe fd56 	bl	80035ec <WIZCHIP_READ>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004b64:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b68:	f7fe fd40 	bl	80035ec <WIZCHIP_READ>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b72:	2b30      	cmp	r3, #48	@ 0x30
 8004b74:	d102      	bne.n	8004b7c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004b76:	2301      	movs	r3, #1
 8004b78:	71fb      	strb	r3, [r7, #7]
 8004b7a:	e001      	b.n	8004b80 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004b92:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b96:	f7fe fd29 	bl	80035ec <WIZCHIP_READ>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004bae:	f7fe fd69 	bl	8003684 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004bb2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004bb6:	f7fe fd19 	bl	80035ec <WIZCHIP_READ>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bc4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004bc6:	79fb      	ldrb	r3, [r7, #7]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004bce:	f7fe fd59 	bl	8003684 <WIZCHIP_WRITE>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d104      	bne.n	8004bf8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf4:	73fb      	strb	r3, [r7, #15]
 8004bf6:	e003      	b.n	8004c00 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bfe:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d104      	bne.n	8004c12 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e019      	b.n	8004c46 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10d      	bne.n	8004c36 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	789b      	ldrb	r3, [r3, #2]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d104      	bne.n	8004c2c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	f043 0318 	orr.w	r3, r3, #24
 8004c28:	73fb      	strb	r3, [r7, #15]
 8004c2a:	e00c      	b.n	8004c46 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	f043 0308 	orr.w	r3, r3, #8
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e007      	b.n	8004c46 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	789b      	ldrb	r3, [r3, #2]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d103      	bne.n	8004c46 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	f043 0310 	orr.w	r3, r3, #16
 8004c44:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004c4e:	f7fe fd19 	bl	8003684 <WIZCHIP_WRITE>
   wizphy_reset();
 8004c52:	f7ff ff9b 	bl	8004b8c <wizphy_reset>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004c6c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004c70:	f7fe fcbc 	bl	80035ec <WIZCHIP_READ>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	119b      	asrs	r3, r3, #6
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d001      	beq.n	8004c96 <wizphy_getphyconf+0x36>
 8004c92:	2b38      	cmp	r3, #56	@ 0x38
 8004c94:	d103      	bne.n	8004c9e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	705a      	strb	r2, [r3, #1]
         break;
 8004c9c:	e003      	b.n	8004ca6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	705a      	strb	r2, [r3, #1]
         break;
 8004ca4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cac:	3b10      	subs	r3, #16
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	bf8c      	ite	hi
 8004cb2:	2201      	movhi	r2, #1
 8004cb4:	2200      	movls	r2, #0
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	d10f      	bne.n	8004cdc <wizphy_getphyconf+0x7c>
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d2c <wizphy_getphyconf+0xcc>)
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	709a      	strb	r2, [r3, #2]
         break;
 8004cda:	e003      	b.n	8004ce4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	709a      	strb	r2, [r3, #2]
         break;
 8004ce2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cea:	3b08      	subs	r3, #8
 8004cec:	2b18      	cmp	r3, #24
 8004cee:	bf8c      	ite	hi
 8004cf0:	2201      	movhi	r2, #1
 8004cf2:	2200      	movls	r2, #0
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	d10f      	bne.n	8004d1a <wizphy_getphyconf+0xba>
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8004d30 <wizphy_getphyconf+0xd0>)
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf14      	ite	ne
 8004d08:	2301      	movne	r3, #1
 8004d0a:	2300      	moveq	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	70da      	strb	r2, [r3, #3]
         break;
 8004d18:	e003      	b.n	8004d22 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	70da      	strb	r2, [r3, #3]
         break;
 8004d20:	bf00      	nop
   }
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	00010101 	.word	0x00010101
 8004d30:	01010001 	.word	0x01010001

08004d34 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004d42:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d46:	f7fe fc51 	bl	80035ec <WIZCHIP_READ>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <wizphy_setphypmode+0x2a>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d5c:	e030      	b.n	8004dc0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004d64:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d104      	bne.n	8004d76 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e003      	b.n	8004d7e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004d7c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d86:	f7fe fc7d 	bl	8003684 <WIZCHIP_WRITE>
   wizphy_reset();
 8004d8a:	f7ff feff 	bl	8004b8c <wizphy_reset>
   tmp = getPHYCFGR();
 8004d8e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d92:	f7fe fc2b 	bl	80035ec <WIZCHIP_READ>
 8004d96:	4603      	mov	r3, r0
 8004d98:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <wizphy_setphypmode+0x88>
 8004daa:	2300      	movs	r3, #0
 8004dac:	e008      	b.n	8004dc0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <wizphy_setphypmode+0x88>
 8004db8:	2300      	movs	r3, #0
 8004dba:	e001      	b.n	8004dc0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2206      	movs	r2, #6
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004dda:	f7fe fd01 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	330e      	adds	r3, #14
 8004de2:	2204      	movs	r2, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004dea:	f7fe fcf9 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	330a      	adds	r3, #10
 8004df2:	2204      	movs	r2, #4
 8004df4:	4619      	mov	r1, r3
 8004df6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004dfa:	f7fe fcf1 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3306      	adds	r3, #6
 8004e02:	2204      	movs	r2, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004e0a:	f7fe fce9 	bl	80037e0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7c9a      	ldrb	r2, [r3, #18]
 8004e12:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <wizchip_setnetinfo+0x78>)
 8004e14:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	7cda      	ldrb	r2, [r3, #19]
 8004e1a:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <wizchip_setnetinfo+0x78>)
 8004e1c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	7d1a      	ldrb	r2, [r3, #20]
 8004e22:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <wizchip_setnetinfo+0x78>)
 8004e24:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7d5a      	ldrb	r2, [r3, #21]
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <wizchip_setnetinfo+0x78>)
 8004e2c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	7d9a      	ldrb	r2, [r3, #22]
 8004e32:	4b04      	ldr	r3, [pc, #16]	@ (8004e44 <wizchip_setnetinfo+0x7c>)
 8004e34:	701a      	strb	r2, [r3, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200005e0 	.word	0x200005e0
 8004e44:	200005e4 	.word	0x200005e4

08004e48 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2206      	movs	r2, #6
 8004e54:	4619      	mov	r1, r3
 8004e56:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004e5a:	f7fe fc61 	bl	8003720 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	330e      	adds	r3, #14
 8004e62:	2204      	movs	r2, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e6a:	f7fe fc59 	bl	8003720 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	330a      	adds	r3, #10
 8004e72:	2204      	movs	r2, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004e7a:	f7fe fc51 	bl	8003720 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3306      	adds	r3, #6
 8004e82:	2204      	movs	r2, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004e8a:	f7fe fc49 	bl	8003720 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <wizchip_getnetinfo+0x78>)
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <wizchip_getnetinfo+0x78>)
 8004e98:	785a      	ldrb	r2, [r3, #1]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004e9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <wizchip_getnetinfo+0x78>)
 8004ea0:	789a      	ldrb	r2, [r3, #2]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <wizchip_getnetinfo+0x78>)
 8004ea8:	78da      	ldrb	r2, [r3, #3]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004eae:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <wizchip_getnetinfo+0x7c>)
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	759a      	strb	r2, [r3, #22]
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200005e0 	.word	0x200005e0
 8004ec4:	200005e4 	.word	0x200005e4

08004ec8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <wizchip_setnetmode+0x1e>
 8004ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ee4:	e00e      	b.n	8004f04 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fe fb80 	bl	80035ec <WIZCHIP_READ>
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	4619      	mov	r1, r3
 8004efc:	2000      	movs	r0, #0
 8004efe:	f7fe fbc1 	bl	8003684 <WIZCHIP_WRITE>
   return 0;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fe fb6b 	bl	80035ec <WIZCHIP_READ>
 8004f16:	4603      	mov	r3, r0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004f2e:	f7fe fba9 	bl	8003684 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004f42:	f7fe fb9f 	bl	8003684 <WIZCHIP_WRITE>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	885b      	ldrh	r3, [r3, #2]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004f52:	f7fe fb97 	bl	8003684 <WIZCHIP_WRITE>
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004f66:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004f6a:	f7fe fb3f 	bl	80035ec <WIZCHIP_READ>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	461a      	mov	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004f76:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004f7a:	f7fe fb37 	bl	80035ec <WIZCHIP_READ>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	b29c      	uxth	r4, r3
 8004f84:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004f88:	f7fe fb30 	bl	80035ec <WIZCHIP_READ>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	4423      	add	r3, r4
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	805a      	strh	r2, [r3, #2]
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd90      	pop	{r4, r7, pc}
	...

08004fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004fd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004fa4:	f7fe fb10 	bl	80035c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fa8:	480c      	ldr	r0, [pc, #48]	@ (8004fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004faa:	490d      	ldr	r1, [pc, #52]	@ (8004fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fac:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fb0:	e002      	b.n	8004fb8 <LoopCopyDataInit>

08004fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fb6:	3304      	adds	r3, #4

08004fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fbc:	d3f9      	bcc.n	8004fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8004fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fc4:	e001      	b.n	8004fca <LoopFillZerobss>

08004fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc8:	3204      	adds	r2, #4

08004fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fcc:	d3fb      	bcc.n	8004fc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004fce:	f008 ff21 	bl	800de14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fd2:	f7fc fd99 	bl	8001b08 <main>
  bx  lr    
 8004fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fe0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8004fe4:	0800eff4 	.word	0x0800eff4
  ldr r2, =_sbss
 8004fe8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8004fec:	20014b5c 	.word	0x20014b5c

08004ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ff0:	e7fe      	b.n	8004ff0 <ADC_IRQHandler>
	...

08004ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <HAL_Init+0x40>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8005034 <HAL_Init+0x40>)
 8004ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005004:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_Init+0x40>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0a      	ldr	r2, [pc, #40]	@ (8005034 <HAL_Init+0x40>)
 800500a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800500e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005010:	4b08      	ldr	r3, [pc, #32]	@ (8005034 <HAL_Init+0x40>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a07      	ldr	r2, [pc, #28]	@ (8005034 <HAL_Init+0x40>)
 8005016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800501c:	2003      	movs	r0, #3
 800501e:	f000 f8fc 	bl	800521a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005022:	200f      	movs	r0, #15
 8005024:	f7fe f9c8 	bl	80033b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005028:	f7fe f808 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023c00 	.word	0x40023c00

08005038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800503c:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <HAL_IncTick+0x20>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <HAL_IncTick+0x24>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4413      	add	r3, r2
 8005048:	4a04      	ldr	r2, [pc, #16]	@ (800505c <HAL_IncTick+0x24>)
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000005c 	.word	0x2000005c
 800505c:	200005e8 	.word	0x200005e8

08005060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return uwTick;
 8005064:	4b03      	ldr	r3, [pc, #12]	@ (8005074 <HAL_GetTick+0x14>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	200005e8 	.word	0x200005e8

08005078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005080:	f7ff ffee 	bl	8005060 <HAL_GetTick>
 8005084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005090:	d005      	beq.n	800509e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005092:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <HAL_Delay+0x44>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800509e:	bf00      	nop
 80050a0:	f7ff ffde 	bl	8005060 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d8f7      	bhi.n	80050a0 <HAL_Delay+0x28>
  {
  }
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	2000005c 	.word	0x2000005c

080050c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <__NVIC_SetPriorityGrouping+0x44>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050dc:	4013      	ands	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050f2:	4a04      	ldr	r2, [pc, #16]	@ (8005104 <__NVIC_SetPriorityGrouping+0x44>)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	60d3      	str	r3, [r2, #12]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	e000ed00 	.word	0xe000ed00

08005108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800510c:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <__NVIC_GetPriorityGrouping+0x18>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	f003 0307 	and.w	r3, r3, #7
}
 8005116:	4618      	mov	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800512e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005132:	2b00      	cmp	r3, #0
 8005134:	db0b      	blt.n	800514e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	4907      	ldr	r1, [pc, #28]	@ (800515c <__NVIC_EnableIRQ+0x38>)
 800513e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2001      	movs	r0, #1
 8005146:	fa00 f202 	lsl.w	r2, r0, r2
 800514a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	e000e100 	.word	0xe000e100

08005160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005170:	2b00      	cmp	r3, #0
 8005172:	db0a      	blt.n	800518a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	490c      	ldr	r1, [pc, #48]	@ (80051ac <__NVIC_SetPriority+0x4c>)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	0112      	lsls	r2, r2, #4
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	440b      	add	r3, r1
 8005184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005188:	e00a      	b.n	80051a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	4908      	ldr	r1, [pc, #32]	@ (80051b0 <__NVIC_SetPriority+0x50>)
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	3b04      	subs	r3, #4
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	440b      	add	r3, r1
 800519e:	761a      	strb	r2, [r3, #24]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	e000e100 	.word	0xe000e100
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b089      	sub	sp, #36	@ 0x24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f1c3 0307 	rsb	r3, r3, #7
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	bf28      	it	cs
 80051d2:	2304      	movcs	r3, #4
 80051d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3304      	adds	r3, #4
 80051da:	2b06      	cmp	r3, #6
 80051dc:	d902      	bls.n	80051e4 <NVIC_EncodePriority+0x30>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3b03      	subs	r3, #3
 80051e2:	e000      	b.n	80051e6 <NVIC_EncodePriority+0x32>
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43da      	mvns	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	401a      	ands	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	fa01 f303 	lsl.w	r3, r1, r3
 8005206:	43d9      	mvns	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800520c:	4313      	orrs	r3, r2
         );
}
 800520e:	4618      	mov	r0, r3
 8005210:	3724      	adds	r7, #36	@ 0x24
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ff4c 	bl	80050c0 <__NVIC_SetPriorityGrouping>
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005242:	f7ff ff61 	bl	8005108 <__NVIC_GetPriorityGrouping>
 8005246:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	f7ff ffb1 	bl	80051b4 <NVIC_EncodePriority>
 8005252:	4602      	mov	r2, r0
 8005254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005258:	4611      	mov	r1, r2
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff ff80 	bl	8005160 <__NVIC_SetPriority>
}
 8005260:	bf00      	nop
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	4603      	mov	r3, r0
 8005270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff54 	bl	8005124 <__NVIC_EnableIRQ>
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005290:	f7ff fee6 	bl	8005060 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e099      	b.n	80053d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052c0:	e00f      	b.n	80052e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052c2:	f7ff fecd 	bl	8005060 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d908      	bls.n	80052e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2203      	movs	r2, #3
 80052da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e078      	b.n	80053d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e8      	bne.n	80052c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4b38      	ldr	r3, [pc, #224]	@ (80053dc <HAL_DMA_Init+0x158>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800530e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800531a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005338:	2b04      	cmp	r3, #4
 800533a:	d107      	bne.n	800534c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	4313      	orrs	r3, r2
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	2b04      	cmp	r3, #4
 8005374:	d117      	bne.n	80053a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f9e9 	bl	8005760 <DMA_CheckFifoParam>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2240      	movs	r2, #64	@ 0x40
 8005398:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80053a2:	2301      	movs	r3, #1
 80053a4:	e016      	b.n	80053d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f9a0 	bl	80056f4 <DMA_CalcBaseAndBitshift>
 80053b4:	4603      	mov	r3, r0
 80053b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053bc:	223f      	movs	r2, #63	@ 0x3f
 80053be:	409a      	lsls	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	f010803f 	.word	0xf010803f

080053e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053ec:	4b8e      	ldr	r3, [pc, #568]	@ (8005628 <HAL_DMA_IRQHandler+0x248>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a8e      	ldr	r2, [pc, #568]	@ (800562c <HAL_DMA_IRQHandler+0x24c>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800540a:	2208      	movs	r2, #8
 800540c:	409a      	lsls	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4013      	ands	r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01a      	beq.n	800544c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005438:	2208      	movs	r2, #8
 800543a:	409a      	lsls	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005444:	f043 0201 	orr.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005450:	2201      	movs	r2, #1
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4013      	ands	r3, r2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546e:	2201      	movs	r2, #1
 8005470:	409a      	lsls	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547a:	f043 0202 	orr.w	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005486:	2204      	movs	r2, #4
 8005488:	409a      	lsls	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d012      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00b      	beq.n	80054b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	2204      	movs	r2, #4
 80054a6:	409a      	lsls	r2, r3
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054bc:	2210      	movs	r2, #16
 80054be:	409a      	lsls	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d043      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d03c      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054da:	2210      	movs	r2, #16
 80054dc:	409a      	lsls	r2, r3
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d018      	beq.n	8005522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d108      	bne.n	8005510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d024      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
 800550e:	e01f      	b.n	8005550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01b      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
 8005520:	e016      	b.n	8005550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0208 	bic.w	r2, r2, #8
 800553e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005554:	2220      	movs	r2, #32
 8005556:	409a      	lsls	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 808f 	beq.w	8005680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8087 	beq.w	8005680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005576:	2220      	movs	r2, #32
 8005578:	409a      	lsls	r2, r3
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b05      	cmp	r3, #5
 8005588:	d136      	bne.n	80055f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0216 	bic.w	r2, r2, #22
 8005598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695a      	ldr	r2, [r3, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <HAL_DMA_IRQHandler+0x1da>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0208 	bic.w	r2, r2, #8
 80055c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ce:	223f      	movs	r2, #63	@ 0x3f
 80055d0:	409a      	lsls	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d07e      	beq.n	80056ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
        }
        return;
 80055f6:	e079      	b.n	80056ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01d      	beq.n	8005642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10d      	bne.n	8005630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005618:	2b00      	cmp	r3, #0
 800561a:	d031      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
 8005624:	e02c      	b.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
 8005626:	bf00      	nop
 8005628:	20000024 	.word	0x20000024
 800562c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d023      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	e01e      	b.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10f      	bne.n	8005670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0210 	bic.w	r2, r2, #16
 800565e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005684:	2b00      	cmp	r3, #0
 8005686:	d032      	beq.n	80056ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2205      	movs	r2, #5
 8005698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d307      	bcc.n	80056c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f2      	bne.n	80056ac <HAL_DMA_IRQHandler+0x2cc>
 80056c6:	e000      	b.n	80056ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
 80056ea:	e000      	b.n	80056ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80056ec:	bf00      	nop
    }
  }
}
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	3b10      	subs	r3, #16
 8005704:	4a14      	ldr	r2, [pc, #80]	@ (8005758 <DMA_CalcBaseAndBitshift+0x64>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800570e:	4a13      	ldr	r2, [pc, #76]	@ (800575c <DMA_CalcBaseAndBitshift+0x68>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b03      	cmp	r3, #3
 8005720:	d909      	bls.n	8005736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	659a      	str	r2, [r3, #88]	@ 0x58
 8005734:	e007      	b.n	8005746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800573e:	f023 0303 	bic.w	r3, r3, #3
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	aaaaaaab 	.word	0xaaaaaaab
 800575c:	0800ef94 	.word	0x0800ef94

08005760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d11f      	bne.n	80057ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d856      	bhi.n	800582e <DMA_CheckFifoParam+0xce>
 8005780:	a201      	add	r2, pc, #4	@ (adr r2, 8005788 <DMA_CheckFifoParam+0x28>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	08005799 	.word	0x08005799
 800578c:	080057ab 	.word	0x080057ab
 8005790:	08005799 	.word	0x08005799
 8005794:	0800582f 	.word	0x0800582f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d046      	beq.n	8005832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a8:	e043      	b.n	8005832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057b2:	d140      	bne.n	8005836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b8:	e03d      	b.n	8005836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057c2:	d121      	bne.n	8005808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d837      	bhi.n	800583a <DMA_CheckFifoParam+0xda>
 80057ca:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <DMA_CheckFifoParam+0x70>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e1 	.word	0x080057e1
 80057d4:	080057e7 	.word	0x080057e7
 80057d8:	080057e1 	.word	0x080057e1
 80057dc:	080057f9 	.word	0x080057f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
      break;
 80057e4:	e030      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d025      	beq.n	800583e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f6:	e022      	b.n	800583e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005800:	d11f      	bne.n	8005842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005806:	e01c      	b.n	8005842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d903      	bls.n	8005816 <DMA_CheckFifoParam+0xb6>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d003      	beq.n	800581c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005814:	e018      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
      break;
 800581a:	e015      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      break;
 800582c:	e00b      	b.n	8005846 <DMA_CheckFifoParam+0xe6>
      break;
 800582e:	bf00      	nop
 8005830:	e00a      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 8005832:	bf00      	nop
 8005834:	e008      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 8005836:	bf00      	nop
 8005838:	e006      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 800583a:	bf00      	nop
 800583c:	e004      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;   
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <DMA_CheckFifoParam+0xe8>
      break;
 8005846:	bf00      	nop
    }
  } 
  
  return status; 
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop

08005858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	@ 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	e165      	b.n	8005b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005874:	2201      	movs	r2, #1
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	f040 8154 	bne.w	8005b3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b01      	cmp	r3, #1
 800589c:	d005      	beq.n	80058aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d130      	bne.n	800590c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	2203      	movs	r2, #3
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	43db      	mvns	r3, r3
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4013      	ands	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058e0:	2201      	movs	r2, #1
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	091b      	lsrs	r3, r3, #4
 80058f6:	f003 0201 	and.w	r2, r3, #1
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	2b03      	cmp	r3, #3
 8005916:	d017      	beq.n	8005948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	2203      	movs	r2, #3
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	43db      	mvns	r3, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4013      	ands	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d123      	bne.n	800599c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	08da      	lsrs	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3208      	adds	r2, #8
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	220f      	movs	r2, #15
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	08da      	lsrs	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3208      	adds	r2, #8
 8005996:	69b9      	ldr	r1, [r7, #24]
 8005998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	2203      	movs	r2, #3
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f003 0203 	and.w	r2, r3, #3
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80ae 	beq.w	8005b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b58 <HAL_GPIO_Init+0x300>)
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005b58 <HAL_GPIO_Init+0x300>)
 80059e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80059ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005b58 <HAL_GPIO_Init+0x300>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059fa:	4a58      	ldr	r2, [pc, #352]	@ (8005b5c <HAL_GPIO_Init+0x304>)
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	089b      	lsrs	r3, r3, #2
 8005a00:	3302      	adds	r3, #2
 8005a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	220f      	movs	r2, #15
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4f      	ldr	r2, [pc, #316]	@ (8005b60 <HAL_GPIO_Init+0x308>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d025      	beq.n	8005a72 <HAL_GPIO_Init+0x21a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a4e      	ldr	r2, [pc, #312]	@ (8005b64 <HAL_GPIO_Init+0x30c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01f      	beq.n	8005a6e <HAL_GPIO_Init+0x216>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a4d      	ldr	r2, [pc, #308]	@ (8005b68 <HAL_GPIO_Init+0x310>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d019      	beq.n	8005a6a <HAL_GPIO_Init+0x212>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a4c      	ldr	r2, [pc, #304]	@ (8005b6c <HAL_GPIO_Init+0x314>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d013      	beq.n	8005a66 <HAL_GPIO_Init+0x20e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4b      	ldr	r2, [pc, #300]	@ (8005b70 <HAL_GPIO_Init+0x318>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00d      	beq.n	8005a62 <HAL_GPIO_Init+0x20a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a4a      	ldr	r2, [pc, #296]	@ (8005b74 <HAL_GPIO_Init+0x31c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <HAL_GPIO_Init+0x206>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a49      	ldr	r2, [pc, #292]	@ (8005b78 <HAL_GPIO_Init+0x320>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <HAL_GPIO_Init+0x202>
 8005a56:	2306      	movs	r3, #6
 8005a58:	e00c      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a5a:	2307      	movs	r3, #7
 8005a5c:	e00a      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a5e:	2305      	movs	r3, #5
 8005a60:	e008      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a62:	2304      	movs	r3, #4
 8005a64:	e006      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a66:	2303      	movs	r3, #3
 8005a68:	e004      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e002      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <HAL_GPIO_Init+0x21c>
 8005a72:	2300      	movs	r3, #0
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	f002 0203 	and.w	r2, r2, #3
 8005a7a:	0092      	lsls	r2, r2, #2
 8005a7c:	4093      	lsls	r3, r2
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a84:	4935      	ldr	r1, [pc, #212]	@ (8005b5c <HAL_GPIO_Init+0x304>)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	089b      	lsrs	r3, r3, #2
 8005a8a:	3302      	adds	r3, #2
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a92:	4b3a      	ldr	r3, [pc, #232]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ab6:	4a31      	ldr	r2, [pc, #196]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005abc:	4b2f      	ldr	r3, [pc, #188]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ae0:	4a26      	ldr	r2, [pc, #152]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ae6:	4b25      	ldr	r3, [pc, #148]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b10:	4b1a      	ldr	r3, [pc, #104]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b34:	4a11      	ldr	r2, [pc, #68]	@ (8005b7c <HAL_GPIO_Init+0x324>)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2b0f      	cmp	r3, #15
 8005b44:	f67f ae96 	bls.w	8005874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3724      	adds	r7, #36	@ 0x24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	40020000 	.word	0x40020000
 8005b64:	40020400 	.word	0x40020400
 8005b68:	40020800 	.word	0x40020800
 8005b6c:	40020c00 	.word	0x40020c00
 8005b70:	40021000 	.word	0x40021000
 8005b74:	40021400 	.word	0x40021400
 8005b78:	40021800 	.word	0x40021800
 8005b7c:	40013c00 	.word	0x40013c00

08005b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b90:	787b      	ldrb	r3, [r7, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b96:	887a      	ldrh	r2, [r7, #2]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b9c:	e003      	b.n	8005ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	041a      	lsls	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	619a      	str	r2, [r3, #24]
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bc4:	887a      	ldrh	r2, [r7, #2]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	041a      	lsls	r2, r3, #16
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43d9      	mvns	r1, r3
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	400b      	ands	r3, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	619a      	str	r2, [r3, #24]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e12b      	b.n	8005e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fd fa3c 	bl	800308c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	@ 0x24
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f001 f8e2 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8005c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4a81      	ldr	r2, [pc, #516]	@ (8005e5c <HAL_I2C_Init+0x274>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d807      	bhi.n	8005c6c <HAL_I2C_Init+0x84>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a80      	ldr	r2, [pc, #512]	@ (8005e60 <HAL_I2C_Init+0x278>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	bf94      	ite	ls
 8005c64:	2301      	movls	r3, #1
 8005c66:	2300      	movhi	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e006      	b.n	8005c7a <HAL_I2C_Init+0x92>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4a7d      	ldr	r2, [pc, #500]	@ (8005e64 <HAL_I2C_Init+0x27c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bf94      	ite	ls
 8005c74:	2301      	movls	r3, #1
 8005c76:	2300      	movhi	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e0e7      	b.n	8005e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a78      	ldr	r2, [pc, #480]	@ (8005e68 <HAL_I2C_Init+0x280>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0c9b      	lsrs	r3, r3, #18
 8005c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a6a      	ldr	r2, [pc, #424]	@ (8005e5c <HAL_I2C_Init+0x274>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d802      	bhi.n	8005cbc <HAL_I2C_Init+0xd4>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	e009      	b.n	8005cd0 <HAL_I2C_Init+0xe8>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	4a69      	ldr	r2, [pc, #420]	@ (8005e6c <HAL_I2C_Init+0x284>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	099b      	lsrs	r3, r3, #6
 8005cce:	3301      	adds	r3, #1
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ce2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	495c      	ldr	r1, [pc, #368]	@ (8005e5c <HAL_I2C_Init+0x274>)
 8005cec:	428b      	cmp	r3, r1
 8005cee:	d819      	bhi.n	8005d24 <HAL_I2C_Init+0x13c>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	1e59      	subs	r1, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d04:	400b      	ands	r3, r1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_I2C_Init+0x138>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1e59      	subs	r1, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d1e:	e051      	b.n	8005dc4 <HAL_I2C_Init+0x1dc>
 8005d20:	2304      	movs	r3, #4
 8005d22:	e04f      	b.n	8005dc4 <HAL_I2C_Init+0x1dc>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d111      	bne.n	8005d50 <HAL_I2C_Init+0x168>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1e58      	subs	r0, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6859      	ldr	r1, [r3, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	440b      	add	r3, r1
 8005d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3e:	3301      	adds	r3, #1
 8005d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf0c      	ite	eq
 8005d48:	2301      	moveq	r3, #1
 8005d4a:	2300      	movne	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	e012      	b.n	8005d76 <HAL_I2C_Init+0x18e>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1e58      	subs	r0, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	0099      	lsls	r1, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d66:	3301      	adds	r3, #1
 8005d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_I2C_Init+0x196>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e022      	b.n	8005dc4 <HAL_I2C_Init+0x1dc>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10e      	bne.n	8005da4 <HAL_I2C_Init+0x1bc>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1e58      	subs	r0, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	440b      	add	r3, r1
 8005d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da2:	e00f      	b.n	8005dc4 <HAL_I2C_Init+0x1dc>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	1e58      	subs	r0, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	0099      	lsls	r1, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dba:	3301      	adds	r3, #1
 8005dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	6809      	ldr	r1, [r1, #0]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005df2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6911      	ldr	r1, [r2, #16]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	4311      	orrs	r1, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	695a      	ldr	r2, [r3, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	000186a0 	.word	0x000186a0
 8005e60:	001e847f 	.word	0x001e847f
 8005e64:	003d08ff 	.word	0x003d08ff
 8005e68:	431bde83 	.word	0x431bde83
 8005e6c:	10624dd3 	.word	0x10624dd3

08005e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	817b      	strh	r3, [r7, #10]
 8005e82:	460b      	mov	r3, r1
 8005e84:	813b      	strh	r3, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e8a:	f7ff f8e9 	bl	8005060 <HAL_GetTick>
 8005e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	f040 80d9 	bne.w	8006050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2319      	movs	r3, #25
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	496d      	ldr	r1, [pc, #436]	@ (800605c <HAL_I2C_Mem_Write+0x1ec>)
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 fc8b 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e0cc      	b.n	8006052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_I2C_Mem_Write+0x56>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e0c5      	b.n	8006052 <HAL_I2C_Mem_Write+0x1e2>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d007      	beq.n	8005eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2221      	movs	r2, #33	@ 0x21
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2240      	movs	r2, #64	@ 0x40
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a3a      	ldr	r2, [r7, #32]
 8005f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8006060 <HAL_I2C_Mem_Write+0x1f0>)
 8005f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f2e:	88f8      	ldrh	r0, [r7, #6]
 8005f30:	893a      	ldrh	r2, [r7, #8]
 8005f32:	8979      	ldrh	r1, [r7, #10]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fac2 	bl	80064c8 <I2C_RequestMemoryWrite>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d052      	beq.n	8005ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e081      	b.n	8006052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fd50 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d107      	bne.n	8005f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e06b      	b.n	8006052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_I2C_Mem_Write+0x180>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc4:	781a      	ldrb	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1aa      	bne.n	8005f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fd43 	bl	8006a88 <I2C_WaitOnBTFFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00d      	beq.n	8006024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600c:	2b04      	cmp	r3, #4
 800600e:	d107      	bne.n	8006020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800601e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e016      	b.n	8006052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	e000      	b.n	8006052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	00100002 	.word	0x00100002
 8006060:	ffff0000 	.word	0xffff0000

08006064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08c      	sub	sp, #48	@ 0x30
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	4608      	mov	r0, r1
 800606e:	4611      	mov	r1, r2
 8006070:	461a      	mov	r2, r3
 8006072:	4603      	mov	r3, r0
 8006074:	817b      	strh	r3, [r7, #10]
 8006076:	460b      	mov	r3, r1
 8006078:	813b      	strh	r3, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800607e:	f7fe ffef 	bl	8005060 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b20      	cmp	r3, #32
 800608e:	f040 8214 	bne.w	80064ba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2319      	movs	r3, #25
 8006098:	2201      	movs	r2, #1
 800609a:	497b      	ldr	r1, [pc, #492]	@ (8006288 <HAL_I2C_Mem_Read+0x224>)
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 fb91 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
 80060aa:	e207      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_I2C_Mem_Read+0x56>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e200      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d007      	beq.n	80060e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2222      	movs	r2, #34	@ 0x22
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2240      	movs	r2, #64	@ 0x40
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a5b      	ldr	r2, [pc, #364]	@ (800628c <HAL_I2C_Mem_Read+0x228>)
 8006120:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006122:	88f8      	ldrh	r0, [r7, #6]
 8006124:	893a      	ldrh	r2, [r7, #8]
 8006126:	8979      	ldrh	r1, [r7, #10]
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	9301      	str	r3, [sp, #4]
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	4603      	mov	r3, r0
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fa5e 	bl	80065f4 <I2C_RequestMemoryRead>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e1bc      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d113      	bne.n	8006172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e190      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006176:	2b01      	cmp	r3, #1
 8006178:	d11b      	bne.n	80061b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e170      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d11b      	bne.n	80061f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	e150      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006208:	e144      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620e:	2b03      	cmp	r3, #3
 8006210:	f200 80f1 	bhi.w	80063f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006218:	2b01      	cmp	r3, #1
 800621a:	d123      	bne.n	8006264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800621c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fc79 	bl	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e145      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006262:	e117      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006268:	2b02      	cmp	r3, #2
 800626a:	d14e      	bne.n	800630a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006272:	2200      	movs	r2, #0
 8006274:	4906      	ldr	r1, [pc, #24]	@ (8006290 <HAL_I2C_Mem_Read+0x22c>)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 faa4 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e11a      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
 8006286:	bf00      	nop
 8006288:	00100002 	.word	0x00100002
 800628c:	ffff0000 	.word	0xffff0000
 8006290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006308:	e0c4      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	2200      	movs	r2, #0
 8006312:	496c      	ldr	r1, [pc, #432]	@ (80064c4 <HAL_I2C_Mem_Read+0x460>)
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fa55 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0cb      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	2200      	movs	r2, #0
 800636e:	4955      	ldr	r1, [pc, #340]	@ (80064c4 <HAL_I2C_Mem_Read+0x460>)
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fa27 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e09d      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800638e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	1c5a      	adds	r2, r3, #1
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063f4:	e04e      	b.n	8006494 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fb8c 	bl	8006b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e058      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006426:	3b01      	subs	r3, #1
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d124      	bne.n	8006494 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644e:	2b03      	cmp	r3, #3
 8006450:	d107      	bne.n	8006462 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006460:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	2b00      	cmp	r3, #0
 800649a:	f47f aeb6 	bne.w	800620a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3728      	adds	r7, #40	@ 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	00010004 	.word	0x00010004

080064c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 f960 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006518:	d103      	bne.n	8006522 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006520:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e05f      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	492d      	ldr	r1, [pc, #180]	@ (80065f0 <I2C_RequestMemoryWrite+0x128>)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f9bb 	bl	80068b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e04c      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006564:	6a39      	ldr	r1, [r7, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa46 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	2b04      	cmp	r3, #4
 8006578:	d107      	bne.n	800658a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e02b      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d105      	bne.n	80065a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e021      	b.n	80065e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	0a1b      	lsrs	r3, r3, #8
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b0:	6a39      	ldr	r1, [r7, #32]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fa20 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d107      	bne.n	80065d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e005      	b.n	80065e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065da:	893b      	ldrh	r3, [r7, #8]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	00010002 	.word	0x00010002

080065f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	817b      	strh	r3, [r7, #10]
 8006606:	460b      	mov	r3, r1
 8006608:	813b      	strh	r3, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800661c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800662c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2200      	movs	r2, #0
 8006636:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f8c2 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00d      	beq.n	8006662 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006650:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006654:	d103      	bne.n	800665e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800665c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e0aa      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006662:	897b      	ldrh	r3, [r7, #10]
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006670:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	4952      	ldr	r1, [pc, #328]	@ (80067c0 <I2C_RequestMemoryRead+0x1cc>)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f91d 	bl	80068b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e097      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800669e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066a0:	6a39      	ldr	r1, [r7, #32]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f9a8 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d107      	bne.n	80066c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e076      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d105      	bne.n	80066dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	e021      	b.n	8006720 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ec:	6a39      	ldr	r1, [r7, #32]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f982 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d107      	bne.n	8006712 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006710:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e050      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006716:	893b      	ldrh	r3, [r7, #8]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006722:	6a39      	ldr	r1, [r7, #32]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f967 	bl	80069f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	2b04      	cmp	r3, #4
 8006736:	d107      	bne.n	8006748 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006746:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e035      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800675a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2200      	movs	r2, #0
 8006764:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 f82b 	bl	80067c4 <I2C_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006782:	d103      	bne.n	800678c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800678a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e013      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006790:	897b      	ldrh	r3, [r7, #10]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	b2da      	uxtb	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	4906      	ldr	r1, [pc, #24]	@ (80067c0 <I2C_RequestMemoryRead+0x1cc>)
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f886 	bl	80068b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	00010002 	.word	0x00010002

080067c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067d4:	e048      	b.n	8006868 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067dc:	d044      	beq.n	8006868 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fe fc3f 	bl	8005060 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d139      	bne.n	8006868 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	0c1b      	lsrs	r3, r3, #16
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d10d      	bne.n	800681a <I2C_WaitOnFlagUntilTimeout+0x56>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	43da      	mvns	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	4013      	ands	r3, r2
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	461a      	mov	r2, r3
 8006818:	e00c      	b.n	8006834 <I2C_WaitOnFlagUntilTimeout+0x70>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	43da      	mvns	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	429a      	cmp	r2, r3
 8006838:	d116      	bne.n	8006868 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e023      	b.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	0c1b      	lsrs	r3, r3, #16
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b01      	cmp	r3, #1
 8006870:	d10d      	bne.n	800688e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	43da      	mvns	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4013      	ands	r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	461a      	mov	r2, r3
 800688c:	e00c      	b.n	80068a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	43da      	mvns	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d093      	beq.n	80067d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068c6:	e071      	b.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d6:	d123      	bne.n	8006920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690c:	f043 0204 	orr.w	r2, r3, #4
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e067      	b.n	80069f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006926:	d041      	beq.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006928:	f7fe fb9a 	bl	8005060 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d136      	bne.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	0c1b      	lsrs	r3, r3, #16
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d10c      	bne.n	8006962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	43da      	mvns	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4013      	ands	r3, r2
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	bf14      	ite	ne
 800695a:	2301      	movne	r3, #1
 800695c:	2300      	moveq	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	e00b      	b.n	800697a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	43da      	mvns	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf14      	ite	ne
 8006974:	2301      	movne	r3, #1
 8006976:	2300      	moveq	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e021      	b.n	80069f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	0c1b      	lsrs	r3, r3, #16
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d10c      	bne.n	80069d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	43da      	mvns	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4013      	ands	r3, r2
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	e00b      	b.n	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	43da      	mvns	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4013      	ands	r3, r2
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf14      	ite	ne
 80069e2:	2301      	movne	r3, #1
 80069e4:	2300      	moveq	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f47f af6d 	bne.w	80068c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a04:	e034      	b.n	8006a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f8e3 	bl	8006bd2 <I2C_IsAcknowledgeFailed>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e034      	b.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a1c:	d028      	beq.n	8006a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fe fb1f 	bl	8005060 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11d      	bne.n	8006a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a3e:	2b80      	cmp	r3, #128	@ 0x80
 8006a40:	d016      	beq.n	8006a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5c:	f043 0220 	orr.w	r2, r3, #32
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e007      	b.n	8006a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7a:	2b80      	cmp	r3, #128	@ 0x80
 8006a7c:	d1c3      	bne.n	8006a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a94:	e034      	b.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f89b 	bl	8006bd2 <I2C_IsAcknowledgeFailed>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e034      	b.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aac:	d028      	beq.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aae:	f7fe fad7 	bl	8005060 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11d      	bne.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d016      	beq.n	8006b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e007      	b.n	8006b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d1c3      	bne.n	8006a96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b24:	e049      	b.n	8006bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d119      	bne.n	8006b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0210 	mvn.w	r2, #16
 8006b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e030      	b.n	8006bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b68:	f7fe fa7a 	bl	8005060 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d11d      	bne.n	8006bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d016      	beq.n	8006bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e007      	b.n	8006bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc4:	2b40      	cmp	r3, #64	@ 0x40
 8006bc6:	d1ae      	bne.n	8006b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be8:	d11b      	bne.n	8006c22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0e:	f043 0204 	orr.w	r2, r3, #4
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0cc      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b68      	ldr	r3, [pc, #416]	@ (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d90c      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b65      	ldr	r3, [pc, #404]	@ (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b63      	ldr	r3, [pc, #396]	@ (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e0b8      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d020      	beq.n	8006cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c84:	4b59      	ldr	r3, [pc, #356]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4a58      	ldr	r2, [pc, #352]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c9c:	4b53      	ldr	r3, [pc, #332]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	4a52      	ldr	r2, [pc, #328]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca8:	4b50      	ldr	r3, [pc, #320]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	494d      	ldr	r1, [pc, #308]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d044      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cce:	4b47      	ldr	r3, [pc, #284]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d119      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e07f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d003      	beq.n	8006cee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d107      	bne.n	8006cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cee:	4b3f      	ldr	r3, [pc, #252]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e06f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e067      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d0e:	4b37      	ldr	r3, [pc, #220]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f023 0203 	bic.w	r2, r3, #3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	4934      	ldr	r1, [pc, #208]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d20:	f7fe f99e 	bl	8005060 <HAL_GetTick>
 8006d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d26:	e00a      	b.n	8006d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d28:	f7fe f99a 	bl	8005060 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e04f      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 020c 	and.w	r2, r3, #12
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d1eb      	bne.n	8006d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d50:	4b25      	ldr	r3, [pc, #148]	@ (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d20c      	bcs.n	8006d78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d5e:	4b22      	ldr	r3, [pc, #136]	@ (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d66:	4b20      	ldr	r3, [pc, #128]	@ (8006de8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d001      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e032      	b.n	8006dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d84:	4b19      	ldr	r3, [pc, #100]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	4916      	ldr	r1, [pc, #88]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	490e      	ldr	r1, [pc, #56]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006db6:	f000 f887 	bl	8006ec8 <HAL_RCC_GetSysClockFreq>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	091b      	lsrs	r3, r3, #4
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	490a      	ldr	r1, [pc, #40]	@ (8006df0 <HAL_RCC_ClockConfig+0x1c0>)
 8006dc8:	5ccb      	ldrb	r3, [r1, r3]
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	4a09      	ldr	r2, [pc, #36]	@ (8006df4 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dd2:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fc faee 	bl	80033b8 <HAL_InitTick>

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40023c00 	.word	0x40023c00
 8006dec:	40023800 	.word	0x40023800
 8006df0:	0800ef7c 	.word	0x0800ef7c
 8006df4:	20000024 	.word	0x20000024
 8006df8:	20000058 	.word	0x20000058

08006dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e00:	4b03      	ldr	r3, [pc, #12]	@ (8006e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e02:	681b      	ldr	r3, [r3, #0]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000024 	.word	0x20000024

08006e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e18:	f7ff fff0 	bl	8006dfc <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	0a9b      	lsrs	r3, r3, #10
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4903      	ldr	r1, [pc, #12]	@ (8006e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40023800 	.word	0x40023800
 8006e38:	0800ef8c 	.word	0x0800ef8c

08006e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e40:	f7ff ffdc 	bl	8006dfc <HAL_RCC_GetHCLKFreq>
 8006e44:	4602      	mov	r2, r0
 8006e46:	4b05      	ldr	r3, [pc, #20]	@ (8006e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	0b5b      	lsrs	r3, r3, #13
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	4903      	ldr	r1, [pc, #12]	@ (8006e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e52:	5ccb      	ldrb	r3, [r1, r3]
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	0800ef8c 	.word	0x0800ef8c

08006e64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220f      	movs	r2, #15
 8006e72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e74:	4b12      	ldr	r3, [pc, #72]	@ (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 0203 	and.w	r2, r3, #3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e98:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ea6:	4b07      	ldr	r3, [pc, #28]	@ (8006ec4 <HAL_RCC_GetClockConfig+0x60>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 020f 	and.w	r2, r3, #15
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40023c00 	.word	0x40023c00

08006ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ecc:	b0ae      	sub	sp, #184	@ 0xb8
 8006ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eee:	4bcb      	ldr	r3, [pc, #812]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b0c      	cmp	r3, #12
 8006ef8:	f200 8204 	bhi.w	8007304 <HAL_RCC_GetSysClockFreq+0x43c>
 8006efc:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f02:	bf00      	nop
 8006f04:	08006f39 	.word	0x08006f39
 8006f08:	08007305 	.word	0x08007305
 8006f0c:	08007305 	.word	0x08007305
 8006f10:	08007305 	.word	0x08007305
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08007305 	.word	0x08007305
 8006f1c:	08007305 	.word	0x08007305
 8006f20:	08007305 	.word	0x08007305
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08007305 	.word	0x08007305
 8006f2c:	08007305 	.word	0x08007305
 8006f30:	08007305 	.word	0x08007305
 8006f34:	08007139 	.word	0x08007139
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f38:	4bb9      	ldr	r3, [pc, #740]	@ (8007220 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8006f3e:	e1e5      	b.n	800730c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f40:	4bb7      	ldr	r3, [pc, #732]	@ (8007220 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f46:	e1e1      	b.n	800730c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f48:	4bb4      	ldr	r3, [pc, #720]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f54:	4bb1      	ldr	r3, [pc, #708]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d071      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f60:	4bae      	ldr	r3, [pc, #696]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	099b      	lsrs	r3, r3, #6
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f86:	4622      	mov	r2, r4
 8006f88:	462b      	mov	r3, r5
 8006f8a:	f04f 0000 	mov.w	r0, #0
 8006f8e:	f04f 0100 	mov.w	r1, #0
 8006f92:	0159      	lsls	r1, r3, #5
 8006f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f98:	0150      	lsls	r0, r2, #5
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	1a51      	subs	r1, r2, r1
 8006fa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8006faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006fb8:	4649      	mov	r1, r9
 8006fba:	018b      	lsls	r3, r1, #6
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	018a      	lsls	r2, r1, #6
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	1a51      	subs	r1, r2, r1
 8006fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fcc:	4649      	mov	r1, r9
 8006fce:	eb63 0301 	sbc.w	r3, r3, r1
 8006fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	00cb      	lsls	r3, r1, #3
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fea:	4641      	mov	r1, r8
 8006fec:	00ca      	lsls	r2, r1, #3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	189b      	adds	r3, r3, r2
 8006ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	eb42 0303 	adc.w	r3, r2, r3
 8007002:	637b      	str	r3, [r7, #52]	@ 0x34
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007010:	4629      	mov	r1, r5
 8007012:	028b      	lsls	r3, r1, #10
 8007014:	4621      	mov	r1, r4
 8007016:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800701a:	4621      	mov	r1, r4
 800701c:	028a      	lsls	r2, r1, #10
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007026:	2200      	movs	r2, #0
 8007028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800702c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007030:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007034:	f7f9 fd72 	bl	8000b1c <__aeabi_uldivmod>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4613      	mov	r3, r2
 800703e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007042:	e067      	b.n	8007114 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007044:	4b75      	ldr	r3, [pc, #468]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	2200      	movs	r2, #0
 800704c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007050:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007054:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800705e:	2300      	movs	r3, #0
 8007060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007062:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	f04f 0000 	mov.w	r0, #0
 800706e:	f04f 0100 	mov.w	r1, #0
 8007072:	0159      	lsls	r1, r3, #5
 8007074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007078:	0150      	lsls	r0, r2, #5
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4621      	mov	r1, r4
 8007080:	1a51      	subs	r1, r2, r1
 8007082:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007084:	4629      	mov	r1, r5
 8007086:	eb63 0301 	sbc.w	r3, r3, r1
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007098:	4649      	mov	r1, r9
 800709a:	018b      	lsls	r3, r1, #6
 800709c:	4641      	mov	r1, r8
 800709e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070a2:	4641      	mov	r1, r8
 80070a4:	018a      	lsls	r2, r1, #6
 80070a6:	4641      	mov	r1, r8
 80070a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80070ac:	4649      	mov	r1, r9
 80070ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070c6:	4692      	mov	sl, r2
 80070c8:	469b      	mov	fp, r3
 80070ca:	4623      	mov	r3, r4
 80070cc:	eb1a 0303 	adds.w	r3, sl, r3
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	462b      	mov	r3, r5
 80070d4:	eb4b 0303 	adc.w	r3, fp, r3
 80070d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80070e6:	4629      	mov	r1, r5
 80070e8:	028b      	lsls	r3, r1, #10
 80070ea:	4621      	mov	r1, r4
 80070ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070f0:	4621      	mov	r1, r4
 80070f2:	028a      	lsls	r2, r1, #10
 80070f4:	4610      	mov	r0, r2
 80070f6:	4619      	mov	r1, r3
 80070f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070fc:	2200      	movs	r2, #0
 80070fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8007100:	677a      	str	r2, [r7, #116]	@ 0x74
 8007102:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007106:	f7f9 fd09 	bl	8000b1c <__aeabi_uldivmod>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	4613      	mov	r3, r2
 8007110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007114:	4b41      	ldr	r3, [pc, #260]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	0c1b      	lsrs	r3, r3, #16
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	3301      	adds	r3, #1
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8007126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800712a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007136:	e0e9      	b.n	800730c <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007138:	4b38      	ldr	r3, [pc, #224]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007144:	4b35      	ldr	r3, [pc, #212]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d069      	beq.n	8007224 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007150:	4b32      	ldr	r3, [pc, #200]	@ (800721c <HAL_RCC_GetSysClockFreq+0x354>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	099b      	lsrs	r3, r3, #6
 8007156:	2200      	movs	r2, #0
 8007158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800715a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800715c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	663b      	str	r3, [r7, #96]	@ 0x60
 8007164:	2300      	movs	r3, #0
 8007166:	667b      	str	r3, [r7, #100]	@ 0x64
 8007168:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800716c:	4622      	mov	r2, r4
 800716e:	462b      	mov	r3, r5
 8007170:	f04f 0000 	mov.w	r0, #0
 8007174:	f04f 0100 	mov.w	r1, #0
 8007178:	0159      	lsls	r1, r3, #5
 800717a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800717e:	0150      	lsls	r0, r2, #5
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4621      	mov	r1, r4
 8007186:	1a51      	subs	r1, r2, r1
 8007188:	61b9      	str	r1, [r7, #24]
 800718a:	4629      	mov	r1, r5
 800718c:	eb63 0301 	sbc.w	r3, r3, r1
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800719e:	4659      	mov	r1, fp
 80071a0:	018b      	lsls	r3, r1, #6
 80071a2:	4651      	mov	r1, sl
 80071a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071a8:	4651      	mov	r1, sl
 80071aa:	018a      	lsls	r2, r1, #6
 80071ac:	4651      	mov	r1, sl
 80071ae:	ebb2 0801 	subs.w	r8, r2, r1
 80071b2:	4659      	mov	r1, fp
 80071b4:	eb63 0901 	sbc.w	r9, r3, r1
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071cc:	4690      	mov	r8, r2
 80071ce:	4699      	mov	r9, r3
 80071d0:	4623      	mov	r3, r4
 80071d2:	eb18 0303 	adds.w	r3, r8, r3
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	462b      	mov	r3, r5
 80071da:	eb49 0303 	adc.w	r3, r9, r3
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80071ec:	4629      	mov	r1, r5
 80071ee:	028b      	lsls	r3, r1, #10
 80071f0:	4621      	mov	r1, r4
 80071f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071f6:	4621      	mov	r1, r4
 80071f8:	028a      	lsls	r2, r1, #10
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007202:	2200      	movs	r2, #0
 8007204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007206:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007208:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800720c:	f7f9 fc86 	bl	8000b1c <__aeabi_uldivmod>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4613      	mov	r3, r2
 8007216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800721a:	e063      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x41c>
 800721c:	40023800 	.word	0x40023800
 8007220:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007224:	4b3d      	ldr	r3, [pc, #244]	@ (800731c <HAL_RCC_GetSysClockFreq+0x454>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	099b      	lsrs	r3, r3, #6
 800722a:	2200      	movs	r2, #0
 800722c:	4618      	mov	r0, r3
 800722e:	4611      	mov	r1, r2
 8007230:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007234:	653b      	str	r3, [r7, #80]	@ 0x50
 8007236:	2300      	movs	r3, #0
 8007238:	657b      	str	r3, [r7, #84]	@ 0x54
 800723a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f04f 0100 	mov.w	r1, #0
 800724a:	0159      	lsls	r1, r3, #5
 800724c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007250:	0150      	lsls	r0, r2, #5
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4641      	mov	r1, r8
 8007258:	1a51      	subs	r1, r2, r1
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	4649      	mov	r1, r9
 800725e:	eb63 0301 	sbc.w	r3, r3, r1
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007270:	4659      	mov	r1, fp
 8007272:	018b      	lsls	r3, r1, #6
 8007274:	4651      	mov	r1, sl
 8007276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800727a:	4651      	mov	r1, sl
 800727c:	018a      	lsls	r2, r1, #6
 800727e:	4651      	mov	r1, sl
 8007280:	1a54      	subs	r4, r2, r1
 8007282:	4659      	mov	r1, fp
 8007284:	eb63 0501 	sbc.w	r5, r3, r1
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	00eb      	lsls	r3, r5, #3
 8007292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007296:	00e2      	lsls	r2, r4, #3
 8007298:	4614      	mov	r4, r2
 800729a:	461d      	mov	r5, r3
 800729c:	4643      	mov	r3, r8
 800729e:	18e3      	adds	r3, r4, r3
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	464b      	mov	r3, r9
 80072a4:	eb45 0303 	adc.w	r3, r5, r3
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b6:	4629      	mov	r1, r5
 80072b8:	028b      	lsls	r3, r1, #10
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c0:	4621      	mov	r1, r4
 80072c2:	028a      	lsls	r2, r1, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072cc:	2200      	movs	r2, #0
 80072ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072d0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80072d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072d6:	f7f9 fc21 	bl	8000b1c <__aeabi_uldivmod>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	4613      	mov	r3, r2
 80072e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80072e4:	4b0d      	ldr	r3, [pc, #52]	@ (800731c <HAL_RCC_GetSysClockFreq+0x454>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	0f1b      	lsrs	r3, r3, #28
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80072f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007302:	e003      	b.n	800730c <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007304:	4b06      	ldr	r3, [pc, #24]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x458>)
 8007306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800730a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800730c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8007310:	4618      	mov	r0, r3
 8007312:	37b8      	adds	r7, #184	@ 0xb8
 8007314:	46bd      	mov	sp, r7
 8007316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731a:	bf00      	nop
 800731c:	40023800 	.word	0x40023800
 8007320:	00f42400 	.word	0x00f42400

08007324 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e28d      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8083 	beq.w	800744a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007344:	4b94      	ldr	r3, [pc, #592]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 030c 	and.w	r3, r3, #12
 800734c:	2b04      	cmp	r3, #4
 800734e:	d019      	beq.n	8007384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007350:	4b91      	ldr	r3, [pc, #580]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007358:	2b08      	cmp	r3, #8
 800735a:	d106      	bne.n	800736a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800735c:	4b8e      	ldr	r3, [pc, #568]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007368:	d00c      	beq.n	8007384 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800736a:	4b8b      	ldr	r3, [pc, #556]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007372:	2b0c      	cmp	r3, #12
 8007374:	d112      	bne.n	800739c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007376:	4b88      	ldr	r3, [pc, #544]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800737e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007382:	d10b      	bne.n	800739c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007384:	4b84      	ldr	r3, [pc, #528]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d05b      	beq.n	8007448 <HAL_RCC_OscConfig+0x124>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d157      	bne.n	8007448 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e25a      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a4:	d106      	bne.n	80073b4 <HAL_RCC_OscConfig+0x90>
 80073a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7b      	ldr	r2, [pc, #492]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	e01d      	b.n	80073f0 <HAL_RCC_OscConfig+0xcc>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073bc:	d10c      	bne.n	80073d8 <HAL_RCC_OscConfig+0xb4>
 80073be:	4b76      	ldr	r3, [pc, #472]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a75      	ldr	r2, [pc, #468]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	4b73      	ldr	r3, [pc, #460]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a72      	ldr	r2, [pc, #456]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e00b      	b.n	80073f0 <HAL_RCC_OscConfig+0xcc>
 80073d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80073ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d013      	beq.n	8007420 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f8:	f7fd fe32 	bl	8005060 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007400:	f7fd fe2e 	bl	8005060 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b64      	cmp	r3, #100	@ 0x64
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e21f      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007412:	4b61      	ldr	r3, [pc, #388]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0f0      	beq.n	8007400 <HAL_RCC_OscConfig+0xdc>
 800741e:	e014      	b.n	800744a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fd fe1e 	bl	8005060 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007428:	f7fd fe1a 	bl	8005060 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b64      	cmp	r3, #100	@ 0x64
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e20b      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800743a:	4b57      	ldr	r3, [pc, #348]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x104>
 8007446:	e000      	b.n	800744a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d06f      	beq.n	8007536 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007456:	4b50      	ldr	r3, [pc, #320]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 030c 	and.w	r3, r3, #12
 800745e:	2b00      	cmp	r3, #0
 8007460:	d017      	beq.n	8007492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007462:	4b4d      	ldr	r3, [pc, #308]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800746a:	2b08      	cmp	r3, #8
 800746c:	d105      	bne.n	800747a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800746e:	4b4a      	ldr	r3, [pc, #296]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800747a:	4b47      	ldr	r3, [pc, #284]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007482:	2b0c      	cmp	r3, #12
 8007484:	d11c      	bne.n	80074c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007486:	4b44      	ldr	r3, [pc, #272]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d116      	bne.n	80074c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007492:	4b41      	ldr	r3, [pc, #260]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <HAL_RCC_OscConfig+0x186>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d001      	beq.n	80074aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e1d3      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4937      	ldr	r1, [pc, #220]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074be:	e03a      	b.n	8007536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c8:	4b34      	ldr	r3, [pc, #208]	@ (800759c <HAL_RCC_OscConfig+0x278>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ce:	f7fd fdc7 	bl	8005060 <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d6:	f7fd fdc3 	bl	8005060 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e1b4      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0f0      	beq.n	80074d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f4:	4b28      	ldr	r3, [pc, #160]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4925      	ldr	r1, [pc, #148]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]
 8007508:	e015      	b.n	8007536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750a:	4b24      	ldr	r3, [pc, #144]	@ (800759c <HAL_RCC_OscConfig+0x278>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fd fda6 	bl	8005060 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007518:	f7fd fda2 	bl	8005060 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e193      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752a:	4b1b      	ldr	r3, [pc, #108]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d036      	beq.n	80075b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d016      	beq.n	8007578 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800754a:	4b15      	ldr	r3, [pc, #84]	@ (80075a0 <HAL_RCC_OscConfig+0x27c>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007550:	f7fd fd86 	bl	8005060 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007558:	f7fd fd82 	bl	8005060 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e173      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800756a:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <HAL_RCC_OscConfig+0x274>)
 800756c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x234>
 8007576:	e01b      	b.n	80075b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007578:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <HAL_RCC_OscConfig+0x27c>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800757e:	f7fd fd6f 	bl	8005060 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007584:	e00e      	b.n	80075a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007586:	f7fd fd6b 	bl	8005060 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d907      	bls.n	80075a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e15c      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
 8007598:	40023800 	.word	0x40023800
 800759c:	42470000 	.word	0x42470000
 80075a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075a4:	4b8a      	ldr	r3, [pc, #552]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80075a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1ea      	bne.n	8007586 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8097 	beq.w	80076ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c2:	4b83      	ldr	r3, [pc, #524]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ce:	2300      	movs	r3, #0
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	4b7f      	ldr	r3, [pc, #508]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	4a7e      	ldr	r2, [pc, #504]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80075de:	4b7c      	ldr	r3, [pc, #496]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ea:	2301      	movs	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ee:	4b79      	ldr	r3, [pc, #484]	@ (80077d4 <HAL_RCC_OscConfig+0x4b0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d118      	bne.n	800762c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075fa:	4b76      	ldr	r3, [pc, #472]	@ (80077d4 <HAL_RCC_OscConfig+0x4b0>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a75      	ldr	r2, [pc, #468]	@ (80077d4 <HAL_RCC_OscConfig+0x4b0>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007606:	f7fd fd2b 	bl	8005060 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760e:	f7fd fd27 	bl	8005060 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e118      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007620:	4b6c      	ldr	r3, [pc, #432]	@ (80077d4 <HAL_RCC_OscConfig+0x4b0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d106      	bne.n	8007642 <HAL_RCC_OscConfig+0x31e>
 8007634:	4b66      	ldr	r3, [pc, #408]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007638:	4a65      	ldr	r2, [pc, #404]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007640:	e01c      	b.n	800767c <HAL_RCC_OscConfig+0x358>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b05      	cmp	r3, #5
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x340>
 800764a:	4b61      	ldr	r3, [pc, #388]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764e:	4a60      	ldr	r2, [pc, #384]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007650:	f043 0304 	orr.w	r3, r3, #4
 8007654:	6713      	str	r3, [r2, #112]	@ 0x70
 8007656:	4b5e      	ldr	r3, [pc, #376]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765a:	4a5d      	ldr	r2, [pc, #372]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 800765c:	f043 0301 	orr.w	r3, r3, #1
 8007660:	6713      	str	r3, [r2, #112]	@ 0x70
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0x358>
 8007664:	4b5a      	ldr	r3, [pc, #360]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007668:	4a59      	ldr	r2, [pc, #356]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007670:	4b57      	ldr	r3, [pc, #348]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007674:	4a56      	ldr	r2, [pc, #344]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007676:	f023 0304 	bic.w	r3, r3, #4
 800767a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007684:	f7fd fcec 	bl	8005060 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768c:	f7fd fce8 	bl	8005060 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e0d7      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a2:	4b4b      	ldr	r3, [pc, #300]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0ee      	beq.n	800768c <HAL_RCC_OscConfig+0x368>
 80076ae:	e014      	b.n	80076da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076b0:	f7fd fcd6 	bl	8005060 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b6:	e00a      	b.n	80076ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076b8:	f7fd fcd2 	bl	8005060 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e0c1      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ce:	4b40      	ldr	r3, [pc, #256]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80076d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ee      	bne.n	80076b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d105      	bne.n	80076ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e0:	4b3b      	ldr	r3, [pc, #236]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80076e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e4:	4a3a      	ldr	r2, [pc, #232]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80076e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80ad 	beq.w	8007850 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076f6:	4b36      	ldr	r3, [pc, #216]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f003 030c 	and.w	r3, r3, #12
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d060      	beq.n	80077c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d145      	bne.n	8007796 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770a:	4b33      	ldr	r3, [pc, #204]	@ (80077d8 <HAL_RCC_OscConfig+0x4b4>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fd fca6 	bl	8005060 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007718:	f7fd fca2 	bl	8005060 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e093      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772a:	4b29      	ldr	r3, [pc, #164]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007744:	019b      	lsls	r3, r3, #6
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	3b01      	subs	r3, #1
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	061b      	lsls	r3, r3, #24
 800775a:	431a      	orrs	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007760:	071b      	lsls	r3, r3, #28
 8007762:	491b      	ldr	r1, [pc, #108]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 8007764:	4313      	orrs	r3, r2
 8007766:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007768:	4b1b      	ldr	r3, [pc, #108]	@ (80077d8 <HAL_RCC_OscConfig+0x4b4>)
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800776e:	f7fd fc77 	bl	8005060 <HAL_GetTick>
 8007772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007774:	e008      	b.n	8007788 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007776:	f7fd fc73 	bl	8005060 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e064      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007788:	4b11      	ldr	r3, [pc, #68]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0f0      	beq.n	8007776 <HAL_RCC_OscConfig+0x452>
 8007794:	e05c      	b.n	8007850 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <HAL_RCC_OscConfig+0x4b4>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fd fc60 	bl	8005060 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077a4:	f7fd fc5c 	bl	8005060 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e04d      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b6:	4b06      	ldr	r3, [pc, #24]	@ (80077d0 <HAL_RCC_OscConfig+0x4ac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x480>
 80077c2:	e045      	b.n	8007850 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d107      	bne.n	80077dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e040      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
 80077d0:	40023800 	.word	0x40023800
 80077d4:	40007000 	.word	0x40007000
 80077d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077dc:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <HAL_RCC_OscConfig+0x538>)
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d030      	beq.n	800784c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d129      	bne.n	800784c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007802:	429a      	cmp	r2, r3
 8007804:	d122      	bne.n	800784c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800780c:	4013      	ands	r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007812:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007814:	4293      	cmp	r3, r2
 8007816:	d119      	bne.n	800784c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007822:	085b      	lsrs	r3, r3, #1
 8007824:	3b01      	subs	r3, #1
 8007826:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007828:	429a      	cmp	r2, r3
 800782a:	d10f      	bne.n	800784c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007838:	429a      	cmp	r2, r3
 800783a:	d107      	bne.n	800784c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007846:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007848:	429a      	cmp	r2, r3
 800784a:	d001      	beq.n	8007850 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800

08007860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e07b      	b.n	800796a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d108      	bne.n	800788c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007882:	d009      	beq.n	8007898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	61da      	str	r2, [r3, #28]
 800788a:	e005      	b.n	8007898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d106      	bne.n	80078b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fb fc98 	bl	80031e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	431a      	orrs	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791c:	ea42 0103 	orr.w	r1, r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007924:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	f003 0104 	and.w	r1, r3, #4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793e:	f003 0210 	and.w	r2, r3, #16
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b08c      	sub	sp, #48	@ 0x30
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007980:	2301      	movs	r3, #1
 8007982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_SPI_TransmitReceive+0x26>
 8007994:	2302      	movs	r3, #2
 8007996:	e198      	b.n	8007cca <HAL_SPI_TransmitReceive+0x358>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079a0:	f7fd fb5e 	bl	8005060 <HAL_GetTick>
 80079a4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079b6:	887b      	ldrh	r3, [r7, #2]
 80079b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d00f      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x70>
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079c8:	d107      	bne.n	80079da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d103      	bne.n	80079da <HAL_SPI_TransmitReceive+0x68>
 80079d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d003      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079da:	2302      	movs	r3, #2
 80079dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80079e0:	e16d      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0x82>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_SPI_TransmitReceive+0x82>
 80079ee:	887b      	ldrh	r3, [r7, #2]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80079fa:	e160      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d003      	beq.n	8007a10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	887a      	ldrh	r2, [r7, #2]
 8007a26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	887a      	ldrh	r2, [r7, #2]
 8007a32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	887a      	ldrh	r2, [r7, #2]
 8007a38:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a50:	2b40      	cmp	r3, #64	@ 0x40
 8007a52:	d007      	beq.n	8007a64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a6c:	d17c      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d002      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x10a>
 8007a76:	8b7b      	ldrh	r3, [r7, #26]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d16a      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a80:	881a      	ldrh	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	1c9a      	adds	r2, r3, #2
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aa0:	e057      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d11b      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x176>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d016      	beq.n	8007ae8 <HAL_SPI_TransmitReceive+0x176>
 8007aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d113      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac4:	881a      	ldrh	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad0:	1c9a      	adds	r2, r3, #2
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d119      	bne.n	8007b2a <HAL_SPI_TransmitReceive+0x1b8>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d014      	beq.n	8007b2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68da      	ldr	r2, [r3, #12]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	1c9a      	adds	r2, r3, #2
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b26:	2301      	movs	r3, #1
 8007b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b2a:	f7fd fa99 	bl	8005060 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d80b      	bhi.n	8007b52 <HAL_SPI_TransmitReceive+0x1e0>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b40:	d007      	beq.n	8007b52 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007b50:	e0b5      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1a2      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x130>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d19d      	bne.n	8007aa2 <HAL_SPI_TransmitReceive+0x130>
 8007b66:	e080      	b.n	8007c6a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_TransmitReceive+0x204>
 8007b70:	8b7b      	ldrh	r3, [r7, #26]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d16f      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	7812      	ldrb	r2, [r2, #0]
 8007b82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b9c:	e05b      	b.n	8007c56 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d11c      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x274>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d017      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x274>
 8007bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d114      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d119      	bne.n	8007c28 <HAL_SPI_TransmitReceive+0x2b6>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d014      	beq.n	8007c28 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c24:	2301      	movs	r3, #1
 8007c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c28:	f7fd fa1a 	bl	8005060 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d803      	bhi.n	8007c40 <HAL_SPI_TransmitReceive+0x2ce>
 8007c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c3e:	d102      	bne.n	8007c46 <HAL_SPI_TransmitReceive+0x2d4>
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d107      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007c54:	e033      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d19e      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x22c>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d199      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f8b8 	bl	8007de4 <SPI_EndRxTxTransaction>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d006      	beq.n	8007c88 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2220      	movs	r2, #32
 8007c84:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007c86:	e01a      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c90:	2300      	movs	r3, #0
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb4:	e003      	b.n	8007cbe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3730      	adds	r7, #48	@ 0x30
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ce4:	f7fd f9bc 	bl	8005060 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cf4:	f7fd f9b4 	bl	8005060 <HAL_GetTick>
 8007cf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cfa:	4b39      	ldr	r3, [pc, #228]	@ (8007de0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	015b      	lsls	r3, r3, #5
 8007d00:	0d1b      	lsrs	r3, r3, #20
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d0a:	e054      	b.n	8007db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d12:	d050      	beq.n	8007db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d14:	f7fd f9a4 	bl	8005060 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d902      	bls.n	8007d2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d13d      	bne.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d42:	d111      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d4c:	d004      	beq.n	8007d58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d56:	d107      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d70:	d10f      	bne.n	8007d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e017      	b.n	8007dd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	bf0c      	ite	eq
 8007dc6:	2301      	moveq	r3, #1
 8007dc8:	2300      	movne	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d19b      	bne.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000024 	.word	0x20000024

08007de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2201      	movs	r2, #1
 8007df8:	2102      	movs	r1, #2
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff ff6a 	bl	8007cd4 <SPI_WaitFlagStateUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e0a:	f043 0220 	orr.w	r2, r3, #32
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e032      	b.n	8007e7c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e16:	4b1b      	ldr	r3, [pc, #108]	@ (8007e84 <SPI_EndRxTxTransaction+0xa0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e88 <SPI_EndRxTxTransaction+0xa4>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	0d5b      	lsrs	r3, r3, #21
 8007e22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007e26:	fb02 f303 	mul.w	r3, r2, r3
 8007e2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e34:	d112      	bne.n	8007e5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2180      	movs	r1, #128	@ 0x80
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff ff47 	bl	8007cd4 <SPI_WaitFlagStateUntilTimeout>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d016      	beq.n	8007e7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e00f      	b.n	8007e7c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e72:	2b80      	cmp	r3, #128	@ 0x80
 8007e74:	d0f2      	beq.n	8007e5c <SPI_EndRxTxTransaction+0x78>
 8007e76:	e000      	b.n	8007e7a <SPI_EndRxTxTransaction+0x96>
        break;
 8007e78:	bf00      	nop
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000024 	.word	0x20000024
 8007e88:	165e9f81 	.word	0x165e9f81

08007e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e041      	b.n	8007f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fb f9e0 	bl	8003278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f000 fa1e 	bl	800830c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d001      	beq.n	8007f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e046      	b.n	8007fd2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a23      	ldr	r2, [pc, #140]	@ (8007fe0 <HAL_TIM_Base_Start+0xb4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d022      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5e:	d01d      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1f      	ldr	r2, [pc, #124]	@ (8007fe4 <HAL_TIM_Base_Start+0xb8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d018      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007fe8 <HAL_TIM_Base_Start+0xbc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d013      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1c      	ldr	r2, [pc, #112]	@ (8007fec <HAL_TIM_Base_Start+0xc0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d00e      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff0 <HAL_TIM_Base_Start+0xc4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d009      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a19      	ldr	r2, [pc, #100]	@ (8007ff4 <HAL_TIM_Base_Start+0xc8>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d004      	beq.n	8007f9c <HAL_TIM_Base_Start+0x70>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a18      	ldr	r2, [pc, #96]	@ (8007ff8 <HAL_TIM_Base_Start+0xcc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d111      	bne.n	8007fc0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b06      	cmp	r3, #6
 8007fac:	d010      	beq.n	8007fd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbe:	e007      	b.n	8007fd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	40010400 	.word	0x40010400
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40001800 	.word	0x40001800

08007ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e04e      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	@ (80080c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d022      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803e:	d01d      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1f      	ldr	r2, [pc, #124]	@ (80080c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d018      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1e      	ldr	r2, [pc, #120]	@ (80080c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1c      	ldr	r2, [pc, #112]	@ (80080cc <HAL_TIM_Base_Start_IT+0xd0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00e      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1b      	ldr	r2, [pc, #108]	@ (80080d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d009      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	@ (80080d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d111      	bne.n	80080a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b06      	cmp	r3, #6
 800808c:	d010      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	e007      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40010400 	.word	0x40010400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40001800 	.word	0x40001800

080080dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d020      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0202 	mvn.w	r2, #2
 8008110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f8d2 	bl	80082d0 <HAL_TIM_IC_CaptureCallback>
 800812c:	e005      	b.n	800813a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8c4 	bl	80082bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f8d5 	bl	80082e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0204 	mvn.w	r2, #4
 800815c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8ac 	bl	80082d0 <HAL_TIM_IC_CaptureCallback>
 8008178:	e005      	b.n	8008186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f89e 	bl	80082bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8af 	bl	80082e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d020      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01b      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0208 	mvn.w	r2, #8
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f886 	bl	80082d0 <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f878 	bl	80082bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f889 	bl	80082e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d020      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01b      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f860 	bl	80082d0 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f852 	bl	80082bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f863 	bl	80082e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0201 	mvn.w	r2, #1
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fa fb2e 	bl	80028a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00c      	beq.n	800826c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f906 	bl	8008478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f834 	bl	80082f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0220 	mvn.w	r2, #32
 80082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8d8 	bl	8008464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a46      	ldr	r2, [pc, #280]	@ (8008438 <TIM_Base_SetConfig+0x12c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d013      	beq.n	800834c <TIM_Base_SetConfig+0x40>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800832a:	d00f      	beq.n	800834c <TIM_Base_SetConfig+0x40>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a43      	ldr	r2, [pc, #268]	@ (800843c <TIM_Base_SetConfig+0x130>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00b      	beq.n	800834c <TIM_Base_SetConfig+0x40>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a42      	ldr	r2, [pc, #264]	@ (8008440 <TIM_Base_SetConfig+0x134>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <TIM_Base_SetConfig+0x40>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a41      	ldr	r2, [pc, #260]	@ (8008444 <TIM_Base_SetConfig+0x138>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_Base_SetConfig+0x40>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a40      	ldr	r2, [pc, #256]	@ (8008448 <TIM_Base_SetConfig+0x13c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d108      	bne.n	800835e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a35      	ldr	r2, [pc, #212]	@ (8008438 <TIM_Base_SetConfig+0x12c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d02b      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800836c:	d027      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a32      	ldr	r2, [pc, #200]	@ (800843c <TIM_Base_SetConfig+0x130>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d023      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a31      	ldr	r2, [pc, #196]	@ (8008440 <TIM_Base_SetConfig+0x134>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d01f      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a30      	ldr	r2, [pc, #192]	@ (8008444 <TIM_Base_SetConfig+0x138>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01b      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a2f      	ldr	r2, [pc, #188]	@ (8008448 <TIM_Base_SetConfig+0x13c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d017      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a2e      	ldr	r2, [pc, #184]	@ (800844c <TIM_Base_SetConfig+0x140>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a2d      	ldr	r2, [pc, #180]	@ (8008450 <TIM_Base_SetConfig+0x144>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00f      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008454 <TIM_Base_SetConfig+0x148>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00b      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008458 <TIM_Base_SetConfig+0x14c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d007      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	@ (800845c <TIM_Base_SetConfig+0x150>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d003      	beq.n	80083be <TIM_Base_SetConfig+0xb2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a29      	ldr	r2, [pc, #164]	@ (8008460 <TIM_Base_SetConfig+0x154>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d108      	bne.n	80083d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a10      	ldr	r2, [pc, #64]	@ (8008438 <TIM_Base_SetConfig+0x12c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_Base_SetConfig+0xf8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a12      	ldr	r2, [pc, #72]	@ (8008448 <TIM_Base_SetConfig+0x13c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d103      	bne.n	800840c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	691a      	ldr	r2, [r3, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b01      	cmp	r3, #1
 800841c:	d105      	bne.n	800842a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	611a      	str	r2, [r3, #16]
  }
}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40010000 	.word	0x40010000
 800843c:	40000400 	.word	0x40000400
 8008440:	40000800 	.word	0x40000800
 8008444:	40000c00 	.word	0x40000c00
 8008448:	40010400 	.word	0x40010400
 800844c:	40014000 	.word	0x40014000
 8008450:	40014400 	.word	0x40014400
 8008454:	40014800 	.word	0x40014800
 8008458:	40001800 	.word	0x40001800
 800845c:	40001c00 	.word	0x40001c00
 8008460:	40002000 	.word	0x40002000

08008464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e042      	b.n	8008524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fa ff02 	bl	80032bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2224      	movs	r2, #36	@ 0x24
 80084bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f9cb 	bl	800886c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	695a      	ldr	r2, [r3, #20]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e04a      	b.n	80085d4 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fa feb2 	bl	80032bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2224      	movs	r2, #36	@ 0x24
 800855c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800856e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f97b 	bl	800886c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008594:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695a      	ldr	r2, [r3, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0208 	orr.w	r2, r2, #8
 80085a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08a      	sub	sp, #40	@ 0x28
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d175      	bne.n	80086e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <HAL_UART_Transmit+0x2c>
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e06e      	b.n	80086ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2221      	movs	r2, #33	@ 0x21
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800861a:	f7fc fd21 	bl	8005060 <HAL_GetTick>
 800861e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008634:	d108      	bne.n	8008648 <HAL_UART_Transmit+0x6c>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d104      	bne.n	8008648 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	e003      	b.n	8008650 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800864c:	2300      	movs	r3, #0
 800864e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008650:	e02e      	b.n	80086b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2200      	movs	r2, #0
 800865a:	2180      	movs	r1, #128	@ 0x80
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f848 	bl	80086f2 <UART_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e03a      	b.n	80086ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	3302      	adds	r3, #2
 800868e:	61bb      	str	r3, [r7, #24]
 8008690:	e007      	b.n	80086a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	3301      	adds	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1cb      	bne.n	8008652 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2200      	movs	r2, #0
 80086c2:	2140      	movs	r1, #64	@ 0x40
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f814 	bl	80086f2 <UART_WaitOnFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e006      	b.n	80086ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e000      	b.n	80086ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
  }
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b086      	sub	sp, #24
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	603b      	str	r3, [r7, #0]
 80086fe:	4613      	mov	r3, r2
 8008700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008702:	e03b      	b.n	800877c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800870a:	d037      	beq.n	800877c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800870c:	f7fc fca8 	bl	8005060 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	6a3a      	ldr	r2, [r7, #32]
 8008718:	429a      	cmp	r2, r3
 800871a:	d302      	bcc.n	8008722 <UART_WaitOnFlagUntilTimeout+0x30>
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e03a      	b.n	800879c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d023      	beq.n	800877c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b80      	cmp	r3, #128	@ 0x80
 8008738:	d020      	beq.n	800877c <UART_WaitOnFlagUntilTimeout+0x8a>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b40      	cmp	r3, #64	@ 0x40
 800873e:	d01d      	beq.n	800877c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0308 	and.w	r3, r3, #8
 800874a:	2b08      	cmp	r3, #8
 800874c:	d116      	bne.n	800877c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f81d 	bl	80087a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2208      	movs	r2, #8
 800876e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e00f      	b.n	800879c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4013      	ands	r3, r2
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	bf0c      	ite	eq
 800878c:	2301      	moveq	r3, #1
 800878e:	2300      	movne	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	429a      	cmp	r2, r3
 8008798:	d0b4      	beq.n	8008704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b095      	sub	sp, #84	@ 0x54
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	330c      	adds	r3, #12
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80087ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3314      	adds	r3, #20
 80087e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3314      	adds	r3, #20
 80087fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e5      	bne.n	80087e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008818:	2b01      	cmp	r3, #1
 800881a:	d119      	bne.n	8008850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	330c      	adds	r3, #12
 8008822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	60bb      	str	r3, [r7, #8]
   return(result);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f023 0310 	bic.w	r3, r3, #16
 8008832:	647b      	str	r3, [r7, #68]	@ 0x44
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	330c      	adds	r3, #12
 800883a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800883c:	61ba      	str	r2, [r7, #24]
 800883e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	613b      	str	r3, [r7, #16]
   return(result);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e5      	bne.n	800881c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800885e:	bf00      	nop
 8008860:	3754      	adds	r7, #84	@ 0x54
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
	...

0800886c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800886c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008870:	b0c0      	sub	sp, #256	@ 0x100
 8008872:	af00      	add	r7, sp, #0
 8008874:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008888:	68d9      	ldr	r1, [r3, #12]
 800888a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	ea40 0301 	orr.w	r3, r0, r1
 8008894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800889a:	689a      	ldr	r2, [r3, #8]
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088c4:	f021 010c 	bic.w	r1, r1, #12
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088d2:	430b      	orrs	r3, r1
 80088d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e6:	6999      	ldr	r1, [r3, #24]
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	ea40 0301 	orr.w	r3, r0, r1
 80088f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b8f      	ldr	r3, [pc, #572]	@ (8008b38 <UART_SetConfig+0x2cc>)
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d005      	beq.n	800890c <UART_SetConfig+0xa0>
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	4b8d      	ldr	r3, [pc, #564]	@ (8008b3c <UART_SetConfig+0x2d0>)
 8008908:	429a      	cmp	r2, r3
 800890a:	d104      	bne.n	8008916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800890c:	f7fe fa96 	bl	8006e3c <HAL_RCC_GetPCLK2Freq>
 8008910:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008914:	e003      	b.n	800891e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008916:	f7fe fa7d 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 800891a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800891e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008928:	f040 810c 	bne.w	8008b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800892c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008930:	2200      	movs	r2, #0
 8008932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008936:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800893a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800893e:	4622      	mov	r2, r4
 8008940:	462b      	mov	r3, r5
 8008942:	1891      	adds	r1, r2, r2
 8008944:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008946:	415b      	adcs	r3, r3
 8008948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800894a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800894e:	4621      	mov	r1, r4
 8008950:	eb12 0801 	adds.w	r8, r2, r1
 8008954:	4629      	mov	r1, r5
 8008956:	eb43 0901 	adc.w	r9, r3, r1
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800896a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800896e:	4690      	mov	r8, r2
 8008970:	4699      	mov	r9, r3
 8008972:	4623      	mov	r3, r4
 8008974:	eb18 0303 	adds.w	r3, r8, r3
 8008978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800897c:	462b      	mov	r3, r5
 800897e:	eb49 0303 	adc.w	r3, r9, r3
 8008982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008992:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800899a:	460b      	mov	r3, r1
 800899c:	18db      	adds	r3, r3, r3
 800899e:	653b      	str	r3, [r7, #80]	@ 0x50
 80089a0:	4613      	mov	r3, r2
 80089a2:	eb42 0303 	adc.w	r3, r2, r3
 80089a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80089a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089b0:	f7f8 f8b4 	bl	8000b1c <__aeabi_uldivmod>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4b61      	ldr	r3, [pc, #388]	@ (8008b40 <UART_SetConfig+0x2d4>)
 80089ba:	fba3 2302 	umull	r2, r3, r3, r2
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	011c      	lsls	r4, r3, #4
 80089c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	1891      	adds	r1, r2, r2
 80089da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089dc:	415b      	adcs	r3, r3
 80089de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089e4:	4641      	mov	r1, r8
 80089e6:	eb12 0a01 	adds.w	sl, r2, r1
 80089ea:	4649      	mov	r1, r9
 80089ec:	eb43 0b01 	adc.w	fp, r3, r1
 80089f0:	f04f 0200 	mov.w	r2, #0
 80089f4:	f04f 0300 	mov.w	r3, #0
 80089f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a04:	4692      	mov	sl, r2
 8008a06:	469b      	mov	fp, r3
 8008a08:	4643      	mov	r3, r8
 8008a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8008a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a12:	464b      	mov	r3, r9
 8008a14:	eb4b 0303 	adc.w	r3, fp, r3
 8008a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a30:	460b      	mov	r3, r1
 8008a32:	18db      	adds	r3, r3, r3
 8008a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a36:	4613      	mov	r3, r2
 8008a38:	eb42 0303 	adc.w	r3, r2, r3
 8008a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a46:	f7f8 f869 	bl	8000b1c <__aeabi_uldivmod>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4611      	mov	r1, r2
 8008a50:	4b3b      	ldr	r3, [pc, #236]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008a52:	fba3 2301 	umull	r2, r3, r3, r1
 8008a56:	095b      	lsrs	r3, r3, #5
 8008a58:	2264      	movs	r2, #100	@ 0x64
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
 8008a5e:	1acb      	subs	r3, r1, r3
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a66:	4b36      	ldr	r3, [pc, #216]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008a68:	fba3 2302 	umull	r2, r3, r3, r2
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a74:	441c      	add	r4, r3
 8008a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	1891      	adds	r1, r2, r2
 8008a8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a90:	415b      	adcs	r3, r3
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a98:	4641      	mov	r1, r8
 8008a9a:	1851      	adds	r1, r2, r1
 8008a9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	414b      	adcs	r3, r1
 8008aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ab0:	4659      	mov	r1, fp
 8008ab2:	00cb      	lsls	r3, r1, #3
 8008ab4:	4651      	mov	r1, sl
 8008ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aba:	4651      	mov	r1, sl
 8008abc:	00ca      	lsls	r2, r1, #3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	189b      	adds	r3, r3, r2
 8008ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008acc:	464b      	mov	r3, r9
 8008ace:	460a      	mov	r2, r1
 8008ad0:	eb42 0303 	adc.w	r3, r2, r3
 8008ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008aec:	460b      	mov	r3, r1
 8008aee:	18db      	adds	r3, r3, r3
 8008af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008af2:	4613      	mov	r3, r2
 8008af4:	eb42 0303 	adc.w	r3, r2, r3
 8008af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b02:	f7f8 f80b 	bl	8000b1c <__aeabi_uldivmod>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b10:	095b      	lsrs	r3, r3, #5
 8008b12:	2164      	movs	r1, #100	@ 0x64
 8008b14:	fb01 f303 	mul.w	r3, r1, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	3332      	adds	r3, #50	@ 0x32
 8008b1e:	4a08      	ldr	r2, [pc, #32]	@ (8008b40 <UART_SetConfig+0x2d4>)
 8008b20:	fba2 2303 	umull	r2, r3, r2, r3
 8008b24:	095b      	lsrs	r3, r3, #5
 8008b26:	f003 0207 	and.w	r2, r3, #7
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4422      	add	r2, r4
 8008b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b34:	e106      	b.n	8008d44 <UART_SetConfig+0x4d8>
 8008b36:	bf00      	nop
 8008b38:	40011000 	.word	0x40011000
 8008b3c:	40011400 	.word	0x40011400
 8008b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b56:	4642      	mov	r2, r8
 8008b58:	464b      	mov	r3, r9
 8008b5a:	1891      	adds	r1, r2, r2
 8008b5c:	6239      	str	r1, [r7, #32]
 8008b5e:	415b      	adcs	r3, r3
 8008b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b66:	4641      	mov	r1, r8
 8008b68:	1854      	adds	r4, r2, r1
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	eb43 0501 	adc.w	r5, r3, r1
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	00eb      	lsls	r3, r5, #3
 8008b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b7e:	00e2      	lsls	r2, r4, #3
 8008b80:	4614      	mov	r4, r2
 8008b82:	461d      	mov	r5, r3
 8008b84:	4643      	mov	r3, r8
 8008b86:	18e3      	adds	r3, r4, r3
 8008b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	eb45 0303 	adc.w	r3, r5, r3
 8008b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	008b      	lsls	r3, r1, #2
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	008a      	lsls	r2, r1, #2
 8008bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bc4:	f7f7 ffaa 	bl	8000b1c <__aeabi_uldivmod>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4b60      	ldr	r3, [pc, #384]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008bce:	fba3 2302 	umull	r2, r3, r3, r2
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	011c      	lsls	r4, r3, #4
 8008bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	1891      	adds	r1, r2, r2
 8008bee:	61b9      	str	r1, [r7, #24]
 8008bf0:	415b      	adcs	r3, r3
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	1851      	adds	r1, r2, r1
 8008bfc:	6139      	str	r1, [r7, #16]
 8008bfe:	4649      	mov	r1, r9
 8008c00:	414b      	adcs	r3, r1
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	f04f 0200 	mov.w	r2, #0
 8008c08:	f04f 0300 	mov.w	r3, #0
 8008c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c10:	4659      	mov	r1, fp
 8008c12:	00cb      	lsls	r3, r1, #3
 8008c14:	4651      	mov	r1, sl
 8008c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1a:	4651      	mov	r1, sl
 8008c1c:	00ca      	lsls	r2, r1, #3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	4642      	mov	r2, r8
 8008c26:	189b      	adds	r3, r3, r2
 8008c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	460a      	mov	r2, r1
 8008c30:	eb42 0303 	adc.w	r3, r2, r3
 8008c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c50:	4649      	mov	r1, r9
 8008c52:	008b      	lsls	r3, r1, #2
 8008c54:	4641      	mov	r1, r8
 8008c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	008a      	lsls	r2, r1, #2
 8008c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c62:	f7f7 ff5b 	bl	8000b1c <__aeabi_uldivmod>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4611      	mov	r1, r2
 8008c6c:	4b38      	ldr	r3, [pc, #224]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	2264      	movs	r2, #100	@ 0x64
 8008c76:	fb02 f303 	mul.w	r3, r2, r3
 8008c7a:	1acb      	subs	r3, r1, r3
 8008c7c:	011b      	lsls	r3, r3, #4
 8008c7e:	3332      	adds	r3, #50	@ 0x32
 8008c80:	4a33      	ldr	r2, [pc, #204]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c8c:	441c      	add	r4, r3
 8008c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c92:	2200      	movs	r2, #0
 8008c94:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c96:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	1891      	adds	r1, r2, r2
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	415b      	adcs	r3, r3
 8008ca6:	60fb      	str	r3, [r7, #12]
 8008ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cac:	4641      	mov	r1, r8
 8008cae:	1851      	adds	r1, r2, r1
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	414b      	adcs	r3, r1
 8008cb6:	607b      	str	r3, [r7, #4]
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	00cb      	lsls	r3, r1, #3
 8008cc8:	4651      	mov	r1, sl
 8008cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cce:	4651      	mov	r1, sl
 8008cd0:	00ca      	lsls	r2, r1, #3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	4642      	mov	r2, r8
 8008cda:	189b      	adds	r3, r3, r2
 8008cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cde:	464b      	mov	r3, r9
 8008ce0:	460a      	mov	r2, r1
 8008ce2:	eb42 0303 	adc.w	r3, r2, r3
 8008ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d00:	4649      	mov	r1, r9
 8008d02:	008b      	lsls	r3, r1, #2
 8008d04:	4641      	mov	r1, r8
 8008d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	008a      	lsls	r2, r1, #2
 8008d0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d12:	f7f7 ff03 	bl	8000b1c <__aeabi_uldivmod>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d20:	095b      	lsrs	r3, r3, #5
 8008d22:	2164      	movs	r1, #100	@ 0x64
 8008d24:	fb01 f303 	mul.w	r3, r1, r3
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	3332      	adds	r3, #50	@ 0x32
 8008d2e:	4a08      	ldr	r2, [pc, #32]	@ (8008d50 <UART_SetConfig+0x4e4>)
 8008d30:	fba2 2303 	umull	r2, r3, r2, r3
 8008d34:	095b      	lsrs	r3, r3, #5
 8008d36:	f003 020f 	and.w	r2, r3, #15
 8008d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4422      	add	r2, r4
 8008d42:	609a      	str	r2, [r3, #8]
}
 8008d44:	bf00      	nop
 8008d46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d50:	51eb851f 	.word	0x51eb851f

08008d54 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f103 0208 	add.w	r2, r3, #8
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d6c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f103 0208 	add.w	r2, r3, #8
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f103 0208 	add.w	r2, r3, #8
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008dae:	b480      	push	{r7}
 8008db0:	b085      	sub	sp, #20
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	689a      	ldr	r2, [r3, #8]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	601a      	str	r2, [r3, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr

08008df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008df6:	b480      	push	{r7}
 8008df8:	b085      	sub	sp, #20
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e0c:	d103      	bne.n	8008e16 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e00c      	b.n	8008e30 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	e002      	b.n	8008e24 <vListInsert+0x2e>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d2f6      	bcs.n	8008e1e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6892      	ldr	r2, [r2, #8]
 8008e7e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6852      	ldr	r2, [r2, #4]
 8008e88:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d103      	bne.n	8008e9c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10b      	bne.n	8008ee8 <xQueueGenericReset+0x2c>
        __asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60bb      	str	r3, [r7, #8]
    }
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8008ee8:	f002 fbb0 	bl	800b64c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef4:	68f9      	ldr	r1, [r7, #12]
 8008ef6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	441a      	add	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	68f9      	ldr	r1, [r7, #12]
 8008f1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008f1e:	fb01 f303 	mul.w	r3, r1, r3
 8008f22:	441a      	add	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	22ff      	movs	r2, #255	@ 0xff
 8008f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	22ff      	movs	r2, #255	@ 0xff
 8008f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d114      	bne.n	8008f68 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d01a      	beq.n	8008f7c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3310      	adds	r3, #16
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 faca 	bl	800a4e4 <xTaskRemoveFromEventList>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d012      	beq.n	8008f7c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <xQueueGenericReset+0xd0>)
 8008f58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	e009      	b.n	8008f7c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3310      	adds	r3, #16
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff fef1 	bl	8008d54 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3324      	adds	r3, #36	@ 0x24
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7ff feec 	bl	8008d54 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008f7c:	f002 fb98 	bl	800b6b0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008f80:	2301      	movs	r3, #1
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08c      	sub	sp, #48	@ 0x30
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10b      	bne.n	8008fbc <xQueueGenericCreate+0x2c>
        __asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	61bb      	str	r3, [r7, #24]
    }
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	fb02 f303 	mul.w	r3, r2, r3
 8008fc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <xQueueGenericCreate+0x4a>
 8008fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d101      	bne.n	8008fde <xQueueGenericCreate+0x4e>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <xQueueGenericCreate+0x50>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10b      	bne.n	8008ffc <xQueueGenericCreate+0x6c>
        __asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	617b      	str	r3, [r7, #20]
    }
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	e7fd      	b.n	8008ff8 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8009002:	d90b      	bls.n	800901c <xQueueGenericCreate+0x8c>
        __asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	613b      	str	r3, [r7, #16]
    }
 8009016:	bf00      	nop
 8009018:	bf00      	nop
 800901a:	e7fd      	b.n	8009018 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	3350      	adds	r3, #80	@ 0x50
 8009020:	4618      	mov	r0, r3
 8009022:	f002 fc45 	bl	800b8b0 <pvPortMalloc>
 8009026:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00d      	beq.n	800904a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	3350      	adds	r3, #80	@ 0x50
 8009036:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009038:	79fa      	ldrb	r2, [r7, #7]
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	4613      	mov	r3, r2
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f805 	bl	8009054 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800904a:	6a3b      	ldr	r3, [r7, #32]
    }
 800904c:	4618      	mov	r0, r3
 800904e:	3728      	adds	r7, #40	@ 0x28
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e002      	b.n	8009076 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009082:	2101      	movs	r1, #1
 8009084:	69b8      	ldr	r0, [r7, #24]
 8009086:	f7ff ff19 	bl	8008ebc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	78fa      	ldrb	r2, [r7, #3]
 800908e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	2073      	movs	r0, #115	@ 0x73
 800909a:	f003 fd7f 	bl	800cb9c <SEGGER_SYSVIEW_RecordU32x3>
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b090      	sub	sp, #64	@ 0x40
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090b6:	2300      	movs	r3, #0
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80090be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d10b      	bne.n	80090dc <xQueueGenericSend+0x34>
        __asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	e7fd      	b.n	80090d8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <xQueueGenericSend+0x42>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <xQueueGenericSend+0x46>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <xQueueGenericSend+0x48>
 80090ee:	2300      	movs	r3, #0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <xQueueGenericSend+0x64>
        __asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	e7fd      	b.n	8009108 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d103      	bne.n	800911a <xQueueGenericSend+0x72>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <xQueueGenericSend+0x76>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <xQueueGenericSend+0x78>
 800911e:	2300      	movs	r3, #0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <xQueueGenericSend+0x94>
        __asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	623b      	str	r3, [r7, #32]
    }
 8009136:	bf00      	nop
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800913c:	f001 fb76 	bl	800a82c <xTaskGetSchedulerState>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <xQueueGenericSend+0xa4>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <xQueueGenericSend+0xa8>
 800914c:	2301      	movs	r3, #1
 800914e:	e000      	b.n	8009152 <xQueueGenericSend+0xaa>
 8009150:	2300      	movs	r3, #0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10b      	bne.n	800916e <xQueueGenericSend+0xc6>
        __asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	61fb      	str	r3, [r7, #28]
    }
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	e7fd      	b.n	800916a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800916e:	f002 fa6d 	bl	800b64c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917a:	429a      	cmp	r2, r3
 800917c:	d302      	bcc.n	8009184 <xQueueGenericSend+0xdc>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d136      	bne.n	80091f2 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	4618      	mov	r0, r3
 8009188:	f004 fa94 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	460b      	mov	r3, r1
 8009196:	4601      	mov	r1, r0
 8009198:	205a      	movs	r0, #90	@ 0x5a
 800919a:	f003 fd75 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80091a4:	f000 fbd8 	bl	8009958 <prvCopyDataToQueue>
 80091a8:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d010      	beq.n	80091d4 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b4:	3324      	adds	r3, #36	@ 0x24
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 f994 	bl	800a4e4 <xTaskRemoveFromEventList>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d013      	beq.n	80091ea <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80091c2:	4b4d      	ldr	r3, [pc, #308]	@ (80092f8 <xQueueGenericSend+0x250>)
 80091c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	e00a      	b.n	80091ea <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80091d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80091da:	4b47      	ldr	r3, [pc, #284]	@ (80092f8 <xQueueGenericSend+0x250>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80091ea:	f002 fa61 	bl	800b6b0 <vPortExitCritical>
                return pdPASS;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e07d      	b.n	80092ee <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d110      	bne.n	800921a <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80091f8:	f002 fa5a 	bl	800b6b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	4618      	mov	r0, r3
 8009200:	f004 fa58 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	460b      	mov	r3, r1
 800920e:	4601      	mov	r1, r0
 8009210:	205a      	movs	r0, #90	@ 0x5a
 8009212:	f003 fd39 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8009216:	2300      	movs	r3, #0
 8009218:	e069      	b.n	80092ee <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 800921a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009220:	f107 0314 	add.w	r3, r7, #20
 8009224:	4618      	mov	r0, r3
 8009226:	f001 f9c5 	bl	800a5b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800922a:	2301      	movs	r3, #1
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800922e:	f002 fa3f 	bl	800b6b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009232:	f000 ff07 	bl	800a044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009236:	f002 fa09 	bl	800b64c <vPortEnterCritical>
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009240:	b25b      	sxtb	r3, r3
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009246:	d103      	bne.n	8009250 <xQueueGenericSend+0x1a8>
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009256:	b25b      	sxtb	r3, r3
 8009258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800925c:	d103      	bne.n	8009266 <xQueueGenericSend+0x1be>
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009266:	f002 fa23 	bl	800b6b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800926a:	1d3a      	adds	r2, r7, #4
 800926c:	f107 0314 	add.w	r3, r7, #20
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f001 f9b4 	bl	800a5e0 <xTaskCheckForTimeOut>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d124      	bne.n	80092c8 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800927e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009280:	f000 fc62 	bl	8009b48 <prvIsQueueFull>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d018      	beq.n	80092bc <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	3310      	adds	r3, #16
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f001 f8d0 	bl	800a438 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800929a:	f000 fbed 	bl	8009a78 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800929e:	f000 fedf 	bl	800a060 <xTaskResumeAll>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f47f af62 	bne.w	800916e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80092aa:	4b13      	ldr	r3, [pc, #76]	@ (80092f8 <xQueueGenericSend+0x250>)
 80092ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	e758      	b.n	800916e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80092bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092be:	f000 fbdb 	bl	8009a78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80092c2:	f000 fecd 	bl	800a060 <xTaskResumeAll>
 80092c6:	e752      	b.n	800916e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80092c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092ca:	f000 fbd5 	bl	8009a78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80092ce:	f000 fec7 	bl	800a060 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	4618      	mov	r0, r3
 80092d6:	f004 f9ed 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	460b      	mov	r3, r1
 80092e4:	4601      	mov	r1, r0
 80092e6:	205a      	movs	r0, #90	@ 0x5a
 80092e8:	f003 fcce 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80092ec:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3738      	adds	r7, #56	@ 0x38
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b090      	sub	sp, #64	@ 0x40
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d103      	bne.n	800933a <xQueueGenericSendFromISR+0x3e>
 8009332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <xQueueGenericSendFromISR+0x42>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <xQueueGenericSendFromISR+0x44>
 800933e:	2300      	movs	r3, #0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d103      	bne.n	800936a <xQueueGenericSendFromISR+0x6e>
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009366:	2b01      	cmp	r3, #1
 8009368:	d101      	bne.n	800936e <xQueueGenericSendFromISR+0x72>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <xQueueGenericSendFromISR+0x74>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10b      	bne.n	800938c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	623b      	str	r3, [r7, #32]
    }
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	e7fd      	b.n	8009388 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800938c:	f002 fa4e 	bl	800b82c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009390:	f3ef 8211 	mrs	r2, BASEPRI
 8009394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	61fa      	str	r2, [r7, #28]
 80093a6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80093a8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d302      	bcc.n	80093be <xQueueGenericSendFromISR+0xc2>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d149      	bne.n	8009452 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80093be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	4618      	mov	r0, r3
 80093d2:	f004 f96f 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 80093d6:	4601      	mov	r1, r0
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	461a      	mov	r2, r3
 80093dc:	2060      	movs	r0, #96	@ 0x60
 80093de:	f003 fb83 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093e8:	f000 fab6 	bl	8009958 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80093ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093f4:	d112      	bne.n	800941c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d026      	beq.n	800944c <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009400:	3324      	adds	r3, #36	@ 0x24
 8009402:	4618      	mov	r0, r3
 8009404:	f001 f86e 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01e      	beq.n	800944c <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01b      	beq.n	800944c <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e017      	b.n	800944c <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800941c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009420:	2b7f      	cmp	r3, #127	@ 0x7f
 8009422:	d10b      	bne.n	800943c <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	617b      	str	r3, [r7, #20]
    }
 8009436:	bf00      	nop
 8009438:	bf00      	nop
 800943a:	e7fd      	b.n	8009438 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800943c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009440:	3301      	adds	r3, #1
 8009442:	b2db      	uxtb	r3, r3
 8009444:	b25a      	sxtb	r2, r3
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800944c:	2301      	movs	r3, #1
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8009450:	e00b      	b.n	800946a <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	4618      	mov	r0, r3
 8009456:	f004 f92d 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800945a:	4601      	mov	r1, r0
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	461a      	mov	r2, r3
 8009460:	2060      	movs	r0, #96	@ 0x60
 8009462:	f003 fb41 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009466:	2300      	movs	r3, #0
 8009468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800946c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009474:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009478:	4618      	mov	r0, r3
 800947a:	3740      	adds	r7, #64	@ 0x40
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b08f      	sub	sp, #60	@ 0x3c
 8009484:	af02      	add	r7, sp, #8
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800948c:	2300      	movs	r3, #0
 800948e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d10b      	bne.n	80094b2 <xQueueReceive+0x32>
        __asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	623b      	str	r3, [r7, #32]
    }
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d103      	bne.n	80094c0 <xQueueReceive+0x40>
 80094b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <xQueueReceive+0x44>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e000      	b.n	80094c6 <xQueueReceive+0x46>
 80094c4:	2300      	movs	r3, #0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10b      	bne.n	80094e2 <xQueueReceive+0x62>
        __asm volatile
 80094ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ce:	f383 8811 	msr	BASEPRI, r3
 80094d2:	f3bf 8f6f 	isb	sy
 80094d6:	f3bf 8f4f 	dsb	sy
 80094da:	61fb      	str	r3, [r7, #28]
    }
 80094dc:	bf00      	nop
 80094de:	bf00      	nop
 80094e0:	e7fd      	b.n	80094de <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094e2:	f001 f9a3 	bl	800a82c <xTaskGetSchedulerState>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <xQueueReceive+0x72>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <xQueueReceive+0x76>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <xQueueReceive+0x78>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10b      	bne.n	8009514 <xQueueReceive+0x94>
        __asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	61bb      	str	r3, [r7, #24]
    }
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009514:	f002 f89a 	bl	800b64c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02f      	beq.n	8009584 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009528:	f000 fa80 	bl	8009a2c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	4618      	mov	r0, r3
 8009530:	f004 f8c0 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009534:	4604      	mov	r4, r0
 8009536:	2000      	movs	r0, #0
 8009538:	f004 f8bc 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800953c:	4602      	mov	r2, r0
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2101      	movs	r1, #1
 8009542:	9100      	str	r1, [sp, #0]
 8009544:	4621      	mov	r1, r4
 8009546:	205c      	movs	r0, #92	@ 0x5c
 8009548:	f003 fb9e 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	1e5a      	subs	r2, r3, #1
 8009550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009552:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00f      	beq.n	800957c <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800955c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955e:	3310      	adds	r3, #16
 8009560:	4618      	mov	r0, r3
 8009562:	f000 ffbf 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d007      	beq.n	800957c <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800956c:	4b4d      	ldr	r3, [pc, #308]	@ (80096a4 <xQueueReceive+0x224>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800957c:	f002 f898 	bl	800b6b0 <vPortExitCritical>
                return pdPASS;
 8009580:	2301      	movs	r3, #1
 8009582:	e08a      	b.n	800969a <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d113      	bne.n	80095b2 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800958a:	f002 f891 	bl	800b6b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	4618      	mov	r0, r3
 8009592:	f004 f88f 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009596:	4604      	mov	r4, r0
 8009598:	2000      	movs	r0, #0
 800959a:	f004 f88b 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800959e:	4602      	mov	r2, r0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2101      	movs	r1, #1
 80095a4:	9100      	str	r1, [sp, #0]
 80095a6:	4621      	mov	r1, r4
 80095a8:	205c      	movs	r0, #92	@ 0x5c
 80095aa:	f003 fb6d 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e073      	b.n	800969a <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80095b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fff9 	bl	800a5b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80095c2:	2301      	movs	r3, #1
 80095c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80095c6:	f002 f873 	bl	800b6b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80095ca:	f000 fd3b 	bl	800a044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80095ce:	f002 f83d 	bl	800b64c <vPortEnterCritical>
 80095d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095d8:	b25b      	sxtb	r3, r3
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095de:	d103      	bne.n	80095e8 <xQueueReceive+0x168>
 80095e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095ee:	b25b      	sxtb	r3, r3
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f4:	d103      	bne.n	80095fe <xQueueReceive+0x17e>
 80095f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095fe:	f002 f857 	bl	800b6b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009602:	1d3a      	adds	r2, r7, #4
 8009604:	f107 0310 	add.w	r3, r7, #16
 8009608:	4611      	mov	r1, r2
 800960a:	4618      	mov	r0, r3
 800960c:	f000 ffe8 	bl	800a5e0 <xTaskCheckForTimeOut>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d124      	bne.n	8009660 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009618:	f000 fa80 	bl	8009b1c <prvIsQueueEmpty>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d018      	beq.n	8009654 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	3324      	adds	r3, #36	@ 0x24
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f000 ff04 	bl	800a438 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009632:	f000 fa21 	bl	8009a78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009636:	f000 fd13 	bl	800a060 <xTaskResumeAll>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	f47f af69 	bne.w	8009514 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8009642:	4b18      	ldr	r3, [pc, #96]	@ (80096a4 <xQueueReceive+0x224>)
 8009644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	e75f      	b.n	8009514 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009656:	f000 fa0f 	bl	8009a78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800965a:	f000 fd01 	bl	800a060 <xTaskResumeAll>
 800965e:	e759      	b.n	8009514 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009662:	f000 fa09 	bl	8009a78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009666:	f000 fcfb 	bl	800a060 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800966a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800966c:	f000 fa56 	bl	8009b1c <prvIsQueueEmpty>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	f43f af4e 	beq.w	8009514 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	4618      	mov	r0, r3
 800967c:	f004 f81a 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009680:	4604      	mov	r4, r0
 8009682:	2000      	movs	r0, #0
 8009684:	f004 f816 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2101      	movs	r1, #1
 800968e:	9100      	str	r1, [sp, #0]
 8009690:	4621      	mov	r1, r4
 8009692:	205c      	movs	r0, #92	@ 0x5c
 8009694:	f003 faf8 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009698:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800969a:	4618      	mov	r0, r3
 800969c:	3734      	adds	r7, #52	@ 0x34
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd90      	pop	{r4, r7, pc}
 80096a2:	bf00      	nop
 80096a4:	e000ed04 	.word	0xe000ed04

080096a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80096a8:	b590      	push	{r4, r7, lr}
 80096aa:	b091      	sub	sp, #68	@ 0x44
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10b      	bne.n	80096dc <xQueueSemaphoreTake+0x34>
        __asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	623b      	str	r3, [r7, #32]
    }
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	e7fd      	b.n	80096d8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <xQueueSemaphoreTake+0x54>
        __asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	61fb      	str	r3, [r7, #28]
    }
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	e7fd      	b.n	80096f8 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096fc:	f001 f896 	bl	800a82c <xTaskGetSchedulerState>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <xQueueSemaphoreTake+0x64>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <xQueueSemaphoreTake+0x68>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <xQueueSemaphoreTake+0x6a>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10b      	bne.n	800972e <xQueueSemaphoreTake+0x86>
        __asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	61bb      	str	r3, [r7, #24]
    }
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	e7fd      	b.n	800972a <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800972e:	f001 ff8d 	bl	800b64c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009736:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973a:	2b00      	cmp	r3, #0
 800973c:	d034      	beq.n	80097a8 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	4618      	mov	r0, r3
 8009742:	f003 ffb7 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009746:	4604      	mov	r4, r0
 8009748:	2000      	movs	r0, #0
 800974a:	f003 ffb3 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 800974e:	4602      	mov	r2, r0
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2101      	movs	r1, #1
 8009754:	9100      	str	r1, [sp, #0]
 8009756:	4621      	mov	r1, r4
 8009758:	205c      	movs	r0, #92	@ 0x5c
 800975a:	f003 fa95 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800975e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009760:	1e5a      	subs	r2, r3, #1
 8009762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009764:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d104      	bne.n	8009778 <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800976e:	f001 fa11 	bl	800ab94 <pvTaskIncrementMutexHeldCount>
 8009772:	4602      	mov	r2, r0
 8009774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009776:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00f      	beq.n	80097a0 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	3310      	adds	r3, #16
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fead 	bl	800a4e4 <xTaskRemoveFromEventList>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009790:	4b64      	ldr	r3, [pc, #400]	@ (8009924 <xQueueSemaphoreTake+0x27c>)
 8009792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80097a0:	f001 ff86 	bl	800b6b0 <vPortExitCritical>
                return pdPASS;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e0b8      	b.n	800991a <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d122      	bne.n	80097f4 <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00b      	beq.n	80097cc <xQueueSemaphoreTake+0x124>
        __asm volatile
 80097b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b8:	f383 8811 	msr	BASEPRI, r3
 80097bc:	f3bf 8f6f 	isb	sy
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	617b      	str	r3, [r7, #20]
    }
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	e7fd      	b.n	80097c8 <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80097cc:	f001 ff70 	bl	800b6b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80097d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d2:	4618      	mov	r0, r3
 80097d4:	f003 ff6e 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 80097d8:	4604      	mov	r4, r0
 80097da:	2000      	movs	r0, #0
 80097dc:	f003 ff6a 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 80097e0:	4602      	mov	r2, r0
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2101      	movs	r1, #1
 80097e6:	9100      	str	r1, [sp, #0]
 80097e8:	4621      	mov	r1, r4
 80097ea:	205c      	movs	r0, #92	@ 0x5c
 80097ec:	f003 fa4c 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80097f0:	2300      	movs	r3, #0
 80097f2:	e092      	b.n	800991a <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 80097f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fed8 	bl	800a5b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009808:	f001 ff52 	bl	800b6b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800980c:	f000 fc1a 	bl	800a044 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009810:	f001 ff1c 	bl	800b64c <vPortEnterCritical>
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800981a:	b25b      	sxtb	r3, r3
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009820:	d103      	bne.n	800982a <xQueueSemaphoreTake+0x182>
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800982a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009830:	b25b      	sxtb	r3, r3
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009836:	d103      	bne.n	8009840 <xQueueSemaphoreTake+0x198>
 8009838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009840:	f001 ff36 	bl	800b6b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009844:	463a      	mov	r2, r7
 8009846:	f107 030c 	add.w	r3, r7, #12
 800984a:	4611      	mov	r1, r2
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fec7 	bl	800a5e0 <xTaskCheckForTimeOut>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d132      	bne.n	80098be <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009858:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800985a:	f000 f95f 	bl	8009b1c <prvIsQueueEmpty>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d026      	beq.n	80098b2 <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d109      	bne.n	8009880 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 800986c:	f001 feee 	bl	800b64c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	4618      	mov	r0, r3
 8009876:	f000 fff7 	bl	800a868 <xTaskPriorityInherit>
 800987a:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 800987c:	f001 ff18 	bl	800b6b0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009882:	3324      	adds	r3, #36	@ 0x24
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fdd5 	bl	800a438 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800988e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009890:	f000 f8f2 	bl	8009a78 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009894:	f000 fbe4 	bl	800a060 <xTaskResumeAll>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	f47f af47 	bne.w	800972e <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80098a0:	4b20      	ldr	r3, [pc, #128]	@ (8009924 <xQueueSemaphoreTake+0x27c>)
 80098a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	e73d      	b.n	800972e <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80098b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098b4:	f000 f8e0 	bl	8009a78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80098b8:	f000 fbd2 	bl	800a060 <xTaskResumeAll>
 80098bc:	e737      	b.n	800972e <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80098be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098c0:	f000 f8da 	bl	8009a78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80098c4:	f000 fbcc 	bl	800a060 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098ca:	f000 f927 	bl	8009b1c <prvIsQueueEmpty>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f43f af2c 	beq.w	800972e <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 80098dc:	f001 feb6 	bl	800b64c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80098e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098e2:	f000 f821 	bl	8009928 <prvGetDisinheritPriorityAfterTimeout>
 80098e6:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80098e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 f8b6 	bl	800aa60 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80098f4:	f001 fedc 	bl	800b6b0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	4618      	mov	r0, r3
 80098fc:	f003 feda 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009900:	4604      	mov	r4, r0
 8009902:	2000      	movs	r0, #0
 8009904:	f003 fed6 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009908:	4602      	mov	r2, r0
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2101      	movs	r1, #1
 800990e:	9100      	str	r1, [sp, #0]
 8009910:	4621      	mov	r1, r4
 8009912:	205c      	movs	r0, #92	@ 0x5c
 8009914:	f003 f9b8 	bl	800cc88 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009918:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800991a:	4618      	mov	r0, r3
 800991c:	373c      	adds	r7, #60	@ 0x3c
 800991e:	46bd      	mov	sp, r7
 8009920:	bd90      	pop	{r4, r7, pc}
 8009922:	bf00      	nop
 8009924:	e000ed04 	.word	0xe000ed04

08009928 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009934:	2b00      	cmp	r3, #0
 8009936:	d006      	beq.n	8009946 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1c3 0305 	rsb	r3, r3, #5
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e001      	b.n	800994a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800994a:	68fb      	ldr	r3, [r7, #12]
    }
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800996c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10d      	bne.n	8009992 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d14d      	bne.n	8009a1a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 ffea 	bl	800a95c <xTaskPriorityDisinherit>
 8009988:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	609a      	str	r2, [r3, #8]
 8009990:	e043      	b.n	8009a1a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d119      	bne.n	80099cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6858      	ldr	r0, [r3, #4]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a0:	461a      	mov	r2, r3
 80099a2:	68b9      	ldr	r1, [r7, #8]
 80099a4:	f004 fa5d 	bl	800de62 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b0:	441a      	add	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d32b      	bcc.n	8009a1a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]
 80099ca:	e026      	b.n	8009a1a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	68d8      	ldr	r0, [r3, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d4:	461a      	mov	r2, r3
 80099d6:	68b9      	ldr	r1, [r7, #8]
 80099d8:	f004 fa43 	bl	800de62 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	425b      	negs	r3, r3
 80099e6:	441a      	add	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d207      	bcs.n	8009a08 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a00:	425b      	negs	r3, r3
 8009a02:	441a      	add	r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d105      	bne.n	8009a1a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009a22:	697b      	ldr	r3, [r7, #20]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d018      	beq.n	8009a70 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a46:	441a      	add	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d303      	bcc.n	8009a60 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68d9      	ldr	r1, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a68:	461a      	mov	r2, r3
 8009a6a:	6838      	ldr	r0, [r7, #0]
 8009a6c:	f004 f9f9 	bl	800de62 <memcpy>
    }
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009a80:	f001 fde4 	bl	800b64c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a8a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a8c:	e011      	b.n	8009ab2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d012      	beq.n	8009abc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	3324      	adds	r3, #36	@ 0x24
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fd22 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009aa6:	f000 fe03 	bl	800a6b0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dce9      	bgt.n	8009a8e <prvUnlockQueue+0x16>
 8009aba:	e000      	b.n	8009abe <prvUnlockQueue+0x46>
                        break;
 8009abc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	22ff      	movs	r2, #255	@ 0xff
 8009ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009ac6:	f001 fdf3 	bl	800b6b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009aca:	f001 fdbf 	bl	800b64c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ad4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ad6:	e011      	b.n	8009afc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d012      	beq.n	8009b06 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3310      	adds	r3, #16
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fcfd 	bl	800a4e4 <xTaskRemoveFromEventList>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009af0:	f000 fdde 	bl	800a6b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dce9      	bgt.n	8009ad8 <prvUnlockQueue+0x60>
 8009b04:	e000      	b.n	8009b08 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009b06:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	22ff      	movs	r2, #255	@ 0xff
 8009b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009b10:	f001 fdce 	bl	800b6b0 <vPortExitCritical>
}
 8009b14:	bf00      	nop
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009b24:	f001 fd92 	bl	800b64c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009b30:	2301      	movs	r3, #1
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	e001      	b.n	8009b3a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009b3a:	f001 fdb9 	bl	800b6b0 <vPortExitCritical>

    return xReturn;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009b50:	f001 fd7c 	bl	800b64c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d102      	bne.n	8009b66 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009b60:	2301      	movs	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	e001      	b.n	8009b6a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009b6a:	f001 fda1 	bl	800b6b0 <vPortExitCritical>

    return xReturn;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]
 8009b86:	e01e      	b.n	8009bc6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b88:	4a13      	ldr	r2, [pc, #76]	@ (8009bd8 <vQueueAddToRegistry+0x60>)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d115      	bne.n	8009bc0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b94:	4910      	ldr	r1, [pc, #64]	@ (8009bd8 <vQueueAddToRegistry+0x60>)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8009b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd8 <vQueueAddToRegistry+0x60>)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f003 fd81 	bl	800d6b4 <SEGGER_SYSVIEW_ShrinkId>
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2071      	movs	r0, #113	@ 0x71
 8009bba:	f002 ff95 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8009bbe:	e006      	b.n	8009bce <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	d9dd      	bls.n	8009b88 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	200005ec 	.word	0x200005ec

08009bdc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009bec:	f001 fd2e 	bl	800b64c <vPortEnterCritical>
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bfc:	d103      	bne.n	8009c06 <vQueueWaitForMessageRestricted+0x2a>
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c12:	d103      	bne.n	8009c1c <vQueueWaitForMessageRestricted+0x40>
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c1c:	f001 fd48 	bl	800b6b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	3324      	adds	r3, #36	@ 0x24
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fc27 	bl	800a484 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009c36:	6978      	ldr	r0, [r7, #20]
 8009c38:	f7ff ff1e 	bl	8009a78 <prvUnlockQueue>
    }
 8009c3c:	bf00      	nop
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08c      	sub	sp, #48	@ 0x30
 8009c48:	af04      	add	r7, sp, #16
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	4613      	mov	r3, r2
 8009c52:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c54:	88fb      	ldrh	r3, [r7, #6]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 fe29 	bl	800b8b0 <pvPortMalloc>
 8009c5e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00e      	beq.n	8009c84 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c66:	2058      	movs	r0, #88	@ 0x58
 8009c68:	f001 fe22 	bl	800b8b0 <pvPortMalloc>
 8009c6c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c7a:	e005      	b.n	8009c88 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009c7c:	6978      	ldr	r0, [r7, #20]
 8009c7e:	f001 fef9 	bl	800ba74 <vPortFree>
 8009c82:	e001      	b.n	8009c88 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d013      	beq.n	8009cb6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c8e:	88fa      	ldrh	r2, [r7, #6]
 8009c90:	2300      	movs	r3, #0
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f80e 	bl	8009cc6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009caa:	69f8      	ldr	r0, [r7, #28]
 8009cac:	f000 f8a2 	bl	8009df4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e002      	b.n	8009cbc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cba:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009cbc:	69bb      	ldr	r3, [r7, #24]
    }
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3720      	adds	r7, #32
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b088      	sub	sp, #32
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	607a      	str	r2, [r7, #4]
 8009cd2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	461a      	mov	r2, r3
 8009cde:	21a5      	movs	r1, #165	@ 0xa5
 8009ce0:	f004 f85c 	bl	800dd9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	f023 0307 	bic.w	r3, r3, #7
 8009cfc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00b      	beq.n	8009d20 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	617b      	str	r3, [r7, #20]
    }
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	e7fd      	b.n	8009d1c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d01f      	beq.n	8009d66 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d26:	2300      	movs	r3, #0
 8009d28:	61fb      	str	r3, [r7, #28]
 8009d2a:	e012      	b.n	8009d52 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	4413      	add	r3, r2
 8009d32:	7819      	ldrb	r1, [r3, #0]
 8009d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	4413      	add	r3, r2
 8009d3a:	3334      	adds	r3, #52	@ 0x34
 8009d3c:	460a      	mov	r2, r1
 8009d3e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	4413      	add	r3, r2
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d006      	beq.n	8009d5a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	61fb      	str	r3, [r7, #28]
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	d9e9      	bls.n	8009d2c <prvInitialiseNewTask+0x66>
 8009d58:	e000      	b.n	8009d5c <prvInitialiseNewTask+0x96>
            {
                break;
 8009d5a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d64:	e003      	b.n	8009d6e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d901      	bls.n	8009d78 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d74:	2304      	movs	r3, #4
 8009d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d82:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	2200      	movs	r2, #0
 8009d88:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff f800 	bl	8008d94 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d96:	3318      	adds	r3, #24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fffb 	bl	8008d94 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da6:	f1c3 0205 	rsb	r2, r3, #5
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db6:	3350      	adds	r3, #80	@ 0x50
 8009db8:	2204      	movs	r2, #4
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f003 ffed 	bl	800dd9c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc4:	3354      	adds	r3, #84	@ 0x54
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	2100      	movs	r1, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f003 ffe6 	bl	800dd9c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	69b8      	ldr	r0, [r7, #24]
 8009dd6:	f001 fa87 	bl	800b2e8 <pxPortInitialiseStack>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dea:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009dec:	bf00      	nop
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009df4:	b5b0      	push	{r4, r5, r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009dfc:	f001 fc26 	bl	800b64c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009e00:	4b3b      	ldr	r3, [pc, #236]	@ (8009ef0 <prvAddNewTaskToReadyList+0xfc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	4a3a      	ldr	r2, [pc, #232]	@ (8009ef0 <prvAddNewTaskToReadyList+0xfc>)
 8009e08:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8009ef4 <prvAddNewTaskToReadyList+0x100>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d109      	bne.n	8009e26 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009e12:	4a38      	ldr	r2, [pc, #224]	@ (8009ef4 <prvAddNewTaskToReadyList+0x100>)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e18:	4b35      	ldr	r3, [pc, #212]	@ (8009ef0 <prvAddNewTaskToReadyList+0xfc>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d110      	bne.n	8009e42 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009e20:	f000 fc6a 	bl	800a6f8 <prvInitialiseTaskLists>
 8009e24:	e00d      	b.n	8009e42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009e26:	4b34      	ldr	r3, [pc, #208]	@ (8009ef8 <prvAddNewTaskToReadyList+0x104>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d109      	bne.n	8009e42 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e2e:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <prvAddNewTaskToReadyList+0x100>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d802      	bhi.n	8009e42 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8009ef4 <prvAddNewTaskToReadyList+0x100>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009e42:	4b2e      	ldr	r3, [pc, #184]	@ (8009efc <prvAddNewTaskToReadyList+0x108>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a2c      	ldr	r2, [pc, #176]	@ (8009efc <prvAddNewTaskToReadyList+0x108>)
 8009e4a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8009efc <prvAddNewTaskToReadyList+0x108>)
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d016      	beq.n	8009e88 <prvAddNewTaskToReadyList+0x94>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f003 fb03 	bl	800d468 <SEGGER_SYSVIEW_OnTaskCreate>
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e72:	461d      	mov	r5, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	461c      	mov	r4, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7e:	1ae3      	subs	r3, r4, r3
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462b      	mov	r3, r5
 8009e84:	f001 ffc6 	bl	800be14 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f003 fb70 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	2201      	movs	r2, #1
 8009e96:	409a      	lsls	r2, r3
 8009e98:	4b19      	ldr	r3, [pc, #100]	@ (8009f00 <prvAddNewTaskToReadyList+0x10c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	4a18      	ldr	r2, [pc, #96]	@ (8009f00 <prvAddNewTaskToReadyList+0x10c>)
 8009ea0:	6013      	str	r3, [r2, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4a15      	ldr	r2, [pc, #84]	@ (8009f04 <prvAddNewTaskToReadyList+0x110>)
 8009eb0:	441a      	add	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4610      	mov	r0, r2
 8009eba:	f7fe ff78 	bl	8008dae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009ebe:	f001 fbf7 	bl	800b6b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef8 <prvAddNewTaskToReadyList+0x104>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00e      	beq.n	8009ee8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009eca:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef4 <prvAddNewTaskToReadyList+0x100>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d207      	bcs.n	8009ee8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <prvAddNewTaskToReadyList+0x114>)
 8009eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bdb0      	pop	{r4, r5, r7, pc}
 8009ef0:	20000704 	.word	0x20000704
 8009ef4:	2000062c 	.word	0x2000062c
 8009ef8:	20000710 	.word	0x20000710
 8009efc:	20000720 	.word	0x20000720
 8009f00:	2000070c 	.word	0x2000070c
 8009f04:	20000630 	.word	0x20000630
 8009f08:	e000ed04 	.word	0xe000ed04

08009f0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d01c      	beq.n	8009f58 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009f1e:	4b16      	ldr	r3, [pc, #88]	@ (8009f78 <vTaskDelay+0x6c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00b      	beq.n	8009f3e <vTaskDelay+0x32>
        __asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60bb      	str	r3, [r7, #8]
    }
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009f3e:	f000 f881 	bl	800a044 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	2023      	movs	r0, #35	@ 0x23
 8009f46:	f002 fd93 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fe35 	bl	800abbc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009f52:	f000 f885 	bl	800a060 <xTaskResumeAll>
 8009f56:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8009f5e:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <vTaskDelay+0x70>)
 8009f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	2000072c 	.word	0x2000072c
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009f86:	4b27      	ldr	r3, [pc, #156]	@ (800a024 <vTaskStartScheduler+0xa4>)
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	2282      	movs	r2, #130	@ 0x82
 8009f92:	4925      	ldr	r1, [pc, #148]	@ (800a028 <vTaskStartScheduler+0xa8>)
 8009f94:	4825      	ldr	r0, [pc, #148]	@ (800a02c <vTaskStartScheduler+0xac>)
 8009f96:	f7ff fe55 	bl	8009c44 <xTaskCreate>
 8009f9a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d102      	bne.n	8009fa8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009fa2:	f000 fe83 	bl	800acac <xTimerCreateTimerTask>
 8009fa6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d124      	bne.n	8009ff8 <vTaskStartScheduler+0x78>
        __asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	60bb      	str	r3, [r7, #8]
    }
 8009fc0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009fc2:	4b1b      	ldr	r3, [pc, #108]	@ (800a030 <vTaskStartScheduler+0xb0>)
 8009fc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fc8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009fca:	4b1a      	ldr	r3, [pc, #104]	@ (800a034 <vTaskStartScheduler+0xb4>)
 8009fcc:	2201      	movs	r2, #1
 8009fce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fd0:	4b19      	ldr	r3, [pc, #100]	@ (800a038 <vTaskStartScheduler+0xb8>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009fd6:	4b19      	ldr	r3, [pc, #100]	@ (800a03c <vTaskStartScheduler+0xbc>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b12      	ldr	r3, [pc, #72]	@ (800a024 <vTaskStartScheduler+0xa4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d102      	bne.n	8009fe8 <vTaskStartScheduler+0x68>
 8009fe2:	f003 fa25 	bl	800d430 <SEGGER_SYSVIEW_OnIdle>
 8009fe6:	e004      	b.n	8009ff2 <vTaskStartScheduler+0x72>
 8009fe8:	4b14      	ldr	r3, [pc, #80]	@ (800a03c <vTaskStartScheduler+0xbc>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f003 fa7d 	bl	800d4ec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009ff2:	f001 fa07 	bl	800b404 <xPortStartScheduler>
 8009ff6:	e00f      	b.n	800a018 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ffe:	d10b      	bne.n	800a018 <vTaskStartScheduler+0x98>
        __asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	607b      	str	r3, [r7, #4]
    }
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a018:	4b09      	ldr	r3, [pc, #36]	@ (800a040 <vTaskStartScheduler+0xc0>)
 800a01a:	681b      	ldr	r3, [r3, #0]
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20000728 	.word	0x20000728
 800a028:	0800ee74 	.word	0x0800ee74
 800a02c:	0800a6c9 	.word	0x0800a6c9
 800a030:	20000724 	.word	0x20000724
 800a034:	20000710 	.word	0x20000710
 800a038:	20000708 	.word	0x20000708
 800a03c:	2000062c 	.word	0x2000062c
 800a040:	20000060 	.word	0x20000060

0800a044 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a048:	4b04      	ldr	r3, [pc, #16]	@ (800a05c <vTaskSuspendAll+0x18>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3301      	adds	r3, #1
 800a04e:	4a03      	ldr	r2, [pc, #12]	@ (800a05c <vTaskSuspendAll+0x18>)
 800a050:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a052:	bf00      	nop
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	2000072c 	.word	0x2000072c

0800a060 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a06e:	4b44      	ldr	r3, [pc, #272]	@ (800a180 <xTaskResumeAll+0x120>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10b      	bne.n	800a08e <xTaskResumeAll+0x2e>
        __asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	603b      	str	r3, [r7, #0]
    }
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	e7fd      	b.n	800a08a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a08e:	f001 fadd 	bl	800b64c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a092:	4b3b      	ldr	r3, [pc, #236]	@ (800a180 <xTaskResumeAll+0x120>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3b01      	subs	r3, #1
 800a098:	4a39      	ldr	r2, [pc, #228]	@ (800a180 <xTaskResumeAll+0x120>)
 800a09a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a09c:	4b38      	ldr	r3, [pc, #224]	@ (800a180 <xTaskResumeAll+0x120>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d165      	bne.n	800a170 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0a4:	4b37      	ldr	r3, [pc, #220]	@ (800a184 <xTaskResumeAll+0x124>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d061      	beq.n	800a170 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0ac:	e032      	b.n	800a114 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0ae:	4b36      	ldr	r3, [pc, #216]	@ (800a188 <xTaskResumeAll+0x128>)
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3318      	adds	r3, #24
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fed4 	bl	8008e68 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fe fecf 	bl	8008e68 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f003 fa4f 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	409a      	lsls	r2, r3
 800a0da:	4b2c      	ldr	r3, [pc, #176]	@ (800a18c <xTaskResumeAll+0x12c>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	4a2a      	ldr	r2, [pc, #168]	@ (800a18c <xTaskResumeAll+0x12c>)
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4413      	add	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4a27      	ldr	r2, [pc, #156]	@ (800a190 <xTaskResumeAll+0x130>)
 800a0f2:	441a      	add	r2, r3
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fe fe57 	bl	8008dae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a104:	4b23      	ldr	r3, [pc, #140]	@ (800a194 <xTaskResumeAll+0x134>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d302      	bcc.n	800a114 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a10e:	4b22      	ldr	r3, [pc, #136]	@ (800a198 <xTaskResumeAll+0x138>)
 800a110:	2201      	movs	r2, #1
 800a112:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a114:	4b1c      	ldr	r3, [pc, #112]	@ (800a188 <xTaskResumeAll+0x128>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1c8      	bne.n	800a0ae <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a122:	f000 fb67 	bl	800a7f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a126:	4b1d      	ldr	r3, [pc, #116]	@ (800a19c <xTaskResumeAll+0x13c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d010      	beq.n	800a154 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a132:	f000 f859 	bl	800a1e8 <xTaskIncrementTick>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a13c:	4b16      	ldr	r3, [pc, #88]	@ (800a198 <xTaskResumeAll+0x138>)
 800a13e:	2201      	movs	r2, #1
 800a140:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3b01      	subs	r3, #1
 800a146:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f1      	bne.n	800a132 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a14e:	4b13      	ldr	r3, [pc, #76]	@ (800a19c <xTaskResumeAll+0x13c>)
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a154:	4b10      	ldr	r3, [pc, #64]	@ (800a198 <xTaskResumeAll+0x138>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a160:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a0 <xTaskResumeAll+0x140>)
 800a162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a170:	f001 fa9e 	bl	800b6b0 <vPortExitCritical>

    return xAlreadyYielded;
 800a174:	68bb      	ldr	r3, [r7, #8]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	2000072c 	.word	0x2000072c
 800a184:	20000704 	.word	0x20000704
 800a188:	200006c4 	.word	0x200006c4
 800a18c:	2000070c 	.word	0x2000070c
 800a190:	20000630 	.word	0x20000630
 800a194:	2000062c 	.word	0x2000062c
 800a198:	20000718 	.word	0x20000718
 800a19c:	20000714 	.word	0x20000714
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a1aa:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <xTaskGetTickCount+0x1c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a1b0:	687b      	ldr	r3, [r7, #4]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	20000708 	.word	0x20000708

0800a1c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ca:	f001 fb2f 	bl	800b82c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a1d2:	4b04      	ldr	r3, [pc, #16]	@ (800a1e4 <xTaskGetTickCountFromISR+0x20>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a1d8:	683b      	ldr	r3, [r7, #0]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20000708 	.word	0x20000708

0800a1e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f2:	4b51      	ldr	r3, [pc, #324]	@ (800a338 <xTaskIncrementTick+0x150>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f040 8093 	bne.w	800a322 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1fc:	4b4f      	ldr	r3, [pc, #316]	@ (800a33c <xTaskIncrementTick+0x154>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a204:	4a4d      	ldr	r2, [pc, #308]	@ (800a33c <xTaskIncrementTick+0x154>)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d121      	bne.n	800a254 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800a210:	4b4b      	ldr	r3, [pc, #300]	@ (800a340 <xTaskIncrementTick+0x158>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00b      	beq.n	800a232 <xTaskIncrementTick+0x4a>
        __asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	603b      	str	r3, [r7, #0]
    }
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	e7fd      	b.n	800a22e <xTaskIncrementTick+0x46>
 800a232:	4b43      	ldr	r3, [pc, #268]	@ (800a340 <xTaskIncrementTick+0x158>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	4b42      	ldr	r3, [pc, #264]	@ (800a344 <xTaskIncrementTick+0x15c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a40      	ldr	r2, [pc, #256]	@ (800a340 <xTaskIncrementTick+0x158>)
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	4a40      	ldr	r2, [pc, #256]	@ (800a344 <xTaskIncrementTick+0x15c>)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	4b40      	ldr	r3, [pc, #256]	@ (800a348 <xTaskIncrementTick+0x160>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	4a3e      	ldr	r2, [pc, #248]	@ (800a348 <xTaskIncrementTick+0x160>)
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	f000 fad0 	bl	800a7f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a254:	4b3d      	ldr	r3, [pc, #244]	@ (800a34c <xTaskIncrementTick+0x164>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d34c      	bcc.n	800a2f8 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a25e:	4b38      	ldr	r3, [pc, #224]	@ (800a340 <xTaskIncrementTick+0x158>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d104      	bne.n	800a272 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a268:	4b38      	ldr	r3, [pc, #224]	@ (800a34c <xTaskIncrementTick+0x164>)
 800a26a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a26e:	601a      	str	r2, [r3, #0]
                    break;
 800a270:	e042      	b.n	800a2f8 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a272:	4b33      	ldr	r3, [pc, #204]	@ (800a340 <xTaskIncrementTick+0x158>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d203      	bcs.n	800a292 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a28a:	4a30      	ldr	r2, [pc, #192]	@ (800a34c <xTaskIncrementTick+0x164>)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a290:	e032      	b.n	800a2f8 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	3304      	adds	r3, #4
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fde6 	bl	8008e68 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	3318      	adds	r3, #24
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fe fddd 	bl	8008e68 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f003 f95d 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	409a      	lsls	r2, r3
 800a2be:	4b24      	ldr	r3, [pc, #144]	@ (800a350 <xTaskIncrementTick+0x168>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	4a22      	ldr	r2, [pc, #136]	@ (800a350 <xTaskIncrementTick+0x168>)
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a354 <xTaskIncrementTick+0x16c>)
 800a2d6:	441a      	add	r2, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	3304      	adds	r3, #4
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f7fe fd65 	bl	8008dae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a358 <xTaskIncrementTick+0x170>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d3b5      	bcc.n	800a25e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2f6:	e7b2      	b.n	800a25e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2f8:	4b17      	ldr	r3, [pc, #92]	@ (800a358 <xTaskIncrementTick+0x170>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	4915      	ldr	r1, [pc, #84]	@ (800a354 <xTaskIncrementTick+0x16c>)
 800a300:	4613      	mov	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	440b      	add	r3, r1
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d901      	bls.n	800a314 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a310:	2301      	movs	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a314:	4b11      	ldr	r3, [pc, #68]	@ (800a35c <xTaskIncrementTick+0x174>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d007      	beq.n	800a32c <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a31c:	2301      	movs	r3, #1
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e004      	b.n	800a32c <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a322:	4b0f      	ldr	r3, [pc, #60]	@ (800a360 <xTaskIncrementTick+0x178>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3301      	adds	r3, #1
 800a328:	4a0d      	ldr	r2, [pc, #52]	@ (800a360 <xTaskIncrementTick+0x178>)
 800a32a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a32c:	697b      	ldr	r3, [r7, #20]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3718      	adds	r7, #24
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	2000072c 	.word	0x2000072c
 800a33c:	20000708 	.word	0x20000708
 800a340:	200006bc 	.word	0x200006bc
 800a344:	200006c0 	.word	0x200006c0
 800a348:	2000071c 	.word	0x2000071c
 800a34c:	20000724 	.word	0x20000724
 800a350:	2000070c 	.word	0x2000070c
 800a354:	20000630 	.word	0x20000630
 800a358:	2000062c 	.word	0x2000062c
 800a35c:	20000718 	.word	0x20000718
 800a360:	20000714 	.word	0x20000714

0800a364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a36a:	4b2d      	ldr	r3, [pc, #180]	@ (800a420 <vTaskSwitchContext+0xbc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a372:	4b2c      	ldr	r3, [pc, #176]	@ (800a424 <vTaskSwitchContext+0xc0>)
 800a374:	2201      	movs	r2, #1
 800a376:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a378:	e04e      	b.n	800a418 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800a37a:	4b2a      	ldr	r3, [pc, #168]	@ (800a424 <vTaskSwitchContext+0xc0>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a380:	4b29      	ldr	r3, [pc, #164]	@ (800a428 <vTaskSwitchContext+0xc4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	fab3 f383 	clz	r3, r3
 800a38c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	f1c3 031f 	rsb	r3, r3, #31
 800a394:	617b      	str	r3, [r7, #20]
 800a396:	4925      	ldr	r1, [pc, #148]	@ (800a42c <vTaskSwitchContext+0xc8>)
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	4613      	mov	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10b      	bne.n	800a3c2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	607b      	str	r3, [r7, #4]
    }
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
 800a3c0:	e7fd      	b.n	800a3be <vTaskSwitchContext+0x5a>
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4a17      	ldr	r2, [pc, #92]	@ (800a42c <vTaskSwitchContext+0xc8>)
 800a3ce:	4413      	add	r3, r2
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	605a      	str	r2, [r3, #4]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d104      	bne.n	800a3f2 <vTaskSwitchContext+0x8e>
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	605a      	str	r2, [r3, #4]
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	4a0d      	ldr	r2, [pc, #52]	@ (800a430 <vTaskSwitchContext+0xcc>)
 800a3fa:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a3fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a430 <vTaskSwitchContext+0xcc>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <vTaskSwitchContext+0xd0>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d102      	bne.n	800a40e <vTaskSwitchContext+0xaa>
 800a408:	f003 f812 	bl	800d430 <SEGGER_SYSVIEW_OnIdle>
}
 800a40c:	e004      	b.n	800a418 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800a40e:	4b08      	ldr	r3, [pc, #32]	@ (800a430 <vTaskSwitchContext+0xcc>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f003 f86a 	bl	800d4ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a418:	bf00      	nop
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	2000072c 	.word	0x2000072c
 800a424:	20000718 	.word	0x20000718
 800a428:	2000070c 	.word	0x2000070c
 800a42c:	20000630 	.word	0x20000630
 800a430:	2000062c 	.word	0x2000062c
 800a434:	20000728 	.word	0x20000728

0800a438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d10b      	bne.n	800a460 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	60fb      	str	r3, [r7, #12]
    }
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	e7fd      	b.n	800a45c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a460:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <vTaskPlaceOnEventList+0x48>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3318      	adds	r3, #24
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7fe fcc4 	bl	8008df6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a46e:	2101      	movs	r1, #1
 800a470:	6838      	ldr	r0, [r7, #0]
 800a472:	f000 fba3 	bl	800abbc <prvAddCurrentTaskToDelayedList>
}
 800a476:	bf00      	nop
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	2000062c 	.word	0x2000062c

0800a484 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10b      	bne.n	800a4ae <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	617b      	str	r3, [r7, #20]
    }
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <vTaskPlaceOnEventListRestricted+0x5c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3318      	adds	r3, #24
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f7fe fc79 	bl	8008dae <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800a4c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4c6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a4c8:	2024      	movs	r0, #36	@ 0x24
 800a4ca:	f002 fab3 	bl	800ca34 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a4ce:	6879      	ldr	r1, [r7, #4]
 800a4d0:	68b8      	ldr	r0, [r7, #8]
 800a4d2:	f000 fb73 	bl	800abbc <prvAddCurrentTaskToDelayedList>
    }
 800a4d6:	bf00      	nop
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	2000062c 	.word	0x2000062c

0800a4e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10b      	bne.n	800a512 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	60fb      	str	r3, [r7, #12]
    }
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	e7fd      	b.n	800a50e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	3318      	adds	r3, #24
 800a516:	4618      	mov	r0, r3
 800a518:	f7fe fca6 	bl	8008e68 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a51c:	4b1f      	ldr	r3, [pc, #124]	@ (800a59c <xTaskRemoveFromEventList+0xb8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d120      	bne.n	800a566 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	3304      	adds	r3, #4
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fc9d 	bl	8008e68 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	4618      	mov	r0, r3
 800a532:	f003 f81d 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53a:	2201      	movs	r2, #1
 800a53c:	409a      	lsls	r2, r3
 800a53e:	4b18      	ldr	r3, [pc, #96]	@ (800a5a0 <xTaskRemoveFromEventList+0xbc>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4313      	orrs	r3, r2
 800a544:	4a16      	ldr	r2, [pc, #88]	@ (800a5a0 <xTaskRemoveFromEventList+0xbc>)
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4a13      	ldr	r2, [pc, #76]	@ (800a5a4 <xTaskRemoveFromEventList+0xc0>)
 800a556:	441a      	add	r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	3304      	adds	r3, #4
 800a55c:	4619      	mov	r1, r3
 800a55e:	4610      	mov	r0, r2
 800a560:	f7fe fc25 	bl	8008dae <vListInsertEnd>
 800a564:	e005      	b.n	800a572 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	3318      	adds	r3, #24
 800a56a:	4619      	mov	r1, r3
 800a56c:	480e      	ldr	r0, [pc, #56]	@ (800a5a8 <xTaskRemoveFromEventList+0xc4>)
 800a56e:	f7fe fc1e 	bl	8008dae <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a576:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ac <xTaskRemoveFromEventList+0xc8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d905      	bls.n	800a58c <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a580:	2301      	movs	r3, #1
 800a582:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a584:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b0 <xTaskRemoveFromEventList+0xcc>)
 800a586:	2201      	movs	r2, #1
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e001      	b.n	800a590 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a590:	697b      	ldr	r3, [r7, #20]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3718      	adds	r7, #24
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	2000072c 	.word	0x2000072c
 800a5a0:	2000070c 	.word	0x2000070c
 800a5a4:	20000630 	.word	0x20000630
 800a5a8:	200006c4 	.word	0x200006c4
 800a5ac:	2000062c 	.word	0x2000062c
 800a5b0:	20000718 	.word	0x20000718

0800a5b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a5bc:	4b06      	ldr	r3, [pc, #24]	@ (800a5d8 <vTaskInternalSetTimeOutState+0x24>)
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a5c4:	4b05      	ldr	r3, [pc, #20]	@ (800a5dc <vTaskInternalSetTimeOutState+0x28>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	2000071c 	.word	0x2000071c
 800a5dc:	20000708 	.word	0x20000708

0800a5e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10b      	bne.n	800a608 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	613b      	str	r3, [r7, #16]
    }
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10b      	bne.n	800a626 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	60fb      	str	r3, [r7, #12]
    }
 800a620:	bf00      	nop
 800a622:	bf00      	nop
 800a624:	e7fd      	b.n	800a622 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a626:	f001 f811 	bl	800b64c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a62a:	4b1f      	ldr	r3, [pc, #124]	@ (800a6a8 <xTaskCheckForTimeOut+0xc8>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a642:	d102      	bne.n	800a64a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a644:	2300      	movs	r3, #0
 800a646:	61fb      	str	r3, [r7, #28]
 800a648:	e026      	b.n	800a698 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b17      	ldr	r3, [pc, #92]	@ (800a6ac <xTaskCheckForTimeOut+0xcc>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d00a      	beq.n	800a66c <xTaskCheckForTimeOut+0x8c>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d305      	bcc.n	800a66c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a660:	2301      	movs	r3, #1
 800a662:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e015      	b.n	800a698 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	429a      	cmp	r2, r3
 800a674:	d20b      	bcs.n	800a68e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	1ad2      	subs	r2, r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff ff96 	bl	800a5b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a688:	2300      	movs	r3, #0
 800a68a:	61fb      	str	r3, [r7, #28]
 800a68c:	e004      	b.n	800a698 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a694:	2301      	movs	r3, #1
 800a696:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a698:	f001 f80a 	bl	800b6b0 <vPortExitCritical>

    return xReturn;
 800a69c:	69fb      	ldr	r3, [r7, #28]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3720      	adds	r7, #32
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20000708 	.word	0x20000708
 800a6ac:	2000071c 	.word	0x2000071c

0800a6b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a6b4:	4b03      	ldr	r3, [pc, #12]	@ (800a6c4 <vTaskMissedYield+0x14>)
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	601a      	str	r2, [r3, #0]
}
 800a6ba:	bf00      	nop
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	20000718 	.word	0x20000718

0800a6c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a6d0:	f000 f852 	bl	800a778 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a6d4:	4b06      	ldr	r3, [pc, #24]	@ (800a6f0 <prvIdleTask+0x28>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d9f9      	bls.n	800a6d0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800a6dc:	4b05      	ldr	r3, [pc, #20]	@ (800a6f4 <prvIdleTask+0x2c>)
 800a6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a6ec:	e7f0      	b.n	800a6d0 <prvIdleTask+0x8>
 800a6ee:	bf00      	nop
 800a6f0:	20000630 	.word	0x20000630
 800a6f4:	e000ed04 	.word	0xe000ed04

0800a6f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6fe:	2300      	movs	r3, #0
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	e00c      	b.n	800a71e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4a12      	ldr	r2, [pc, #72]	@ (800a758 <prvInitialiseTaskLists+0x60>)
 800a710:	4413      	add	r3, r2
 800a712:	4618      	mov	r0, r3
 800a714:	f7fe fb1e 	bl	8008d54 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3301      	adds	r3, #1
 800a71c:	607b      	str	r3, [r7, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b04      	cmp	r3, #4
 800a722:	d9ef      	bls.n	800a704 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a724:	480d      	ldr	r0, [pc, #52]	@ (800a75c <prvInitialiseTaskLists+0x64>)
 800a726:	f7fe fb15 	bl	8008d54 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a72a:	480d      	ldr	r0, [pc, #52]	@ (800a760 <prvInitialiseTaskLists+0x68>)
 800a72c:	f7fe fb12 	bl	8008d54 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a730:	480c      	ldr	r0, [pc, #48]	@ (800a764 <prvInitialiseTaskLists+0x6c>)
 800a732:	f7fe fb0f 	bl	8008d54 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800a736:	480c      	ldr	r0, [pc, #48]	@ (800a768 <prvInitialiseTaskLists+0x70>)
 800a738:	f7fe fb0c 	bl	8008d54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800a73c:	480b      	ldr	r0, [pc, #44]	@ (800a76c <prvInitialiseTaskLists+0x74>)
 800a73e:	f7fe fb09 	bl	8008d54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a742:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <prvInitialiseTaskLists+0x78>)
 800a744:	4a05      	ldr	r2, [pc, #20]	@ (800a75c <prvInitialiseTaskLists+0x64>)
 800a746:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a748:	4b0a      	ldr	r3, [pc, #40]	@ (800a774 <prvInitialiseTaskLists+0x7c>)
 800a74a:	4a05      	ldr	r2, [pc, #20]	@ (800a760 <prvInitialiseTaskLists+0x68>)
 800a74c:	601a      	str	r2, [r3, #0]
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000630 	.word	0x20000630
 800a75c:	20000694 	.word	0x20000694
 800a760:	200006a8 	.word	0x200006a8
 800a764:	200006c4 	.word	0x200006c4
 800a768:	200006d8 	.word	0x200006d8
 800a76c:	200006f0 	.word	0x200006f0
 800a770:	200006bc 	.word	0x200006bc
 800a774:	200006c0 	.word	0x200006c0

0800a778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a77e:	e019      	b.n	800a7b4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800a780:	f000 ff64 	bl	800b64c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a784:	4b10      	ldr	r3, [pc, #64]	@ (800a7c8 <prvCheckTasksWaitingTermination+0x50>)
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3304      	adds	r3, #4
 800a790:	4618      	mov	r0, r3
 800a792:	f7fe fb69 	bl	8008e68 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800a796:	4b0d      	ldr	r3, [pc, #52]	@ (800a7cc <prvCheckTasksWaitingTermination+0x54>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	4a0b      	ldr	r2, [pc, #44]	@ (800a7cc <prvCheckTasksWaitingTermination+0x54>)
 800a79e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800a7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d0 <prvCheckTasksWaitingTermination+0x58>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a7d0 <prvCheckTasksWaitingTermination+0x58>)
 800a7a8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800a7aa:	f000 ff81 	bl	800b6b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f810 	bl	800a7d4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7b4:	4b06      	ldr	r3, [pc, #24]	@ (800a7d0 <prvCheckTasksWaitingTermination+0x58>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e1      	bne.n	800a780 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	200006d8 	.word	0x200006d8
 800a7cc:	20000704 	.word	0x20000704
 800a7d0:	200006ec 	.word	0x200006ec

0800a7d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f001 f947 	bl	800ba74 <vPortFree>
                vPortFree( pxTCB );
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f001 f944 	bl	800ba74 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a824 <prvResetNextTaskUnblockTime+0x30>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d104      	bne.n	800a80c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a802:	4b09      	ldr	r3, [pc, #36]	@ (800a828 <prvResetNextTaskUnblockTime+0x34>)
 800a804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a808:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a80a:	e005      	b.n	800a818 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a80c:	4b05      	ldr	r3, [pc, #20]	@ (800a824 <prvResetNextTaskUnblockTime+0x30>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a04      	ldr	r2, [pc, #16]	@ (800a828 <prvResetNextTaskUnblockTime+0x34>)
 800a816:	6013      	str	r3, [r2, #0]
}
 800a818:	bf00      	nop
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	200006bc 	.word	0x200006bc
 800a828:	20000724 	.word	0x20000724

0800a82c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a832:	4b0b      	ldr	r3, [pc, #44]	@ (800a860 <xTaskGetSchedulerState+0x34>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d102      	bne.n	800a840 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a83a:	2301      	movs	r3, #1
 800a83c:	607b      	str	r3, [r7, #4]
 800a83e:	e008      	b.n	800a852 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a840:	4b08      	ldr	r3, [pc, #32]	@ (800a864 <xTaskGetSchedulerState+0x38>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a848:	2302      	movs	r3, #2
 800a84a:	607b      	str	r3, [r7, #4]
 800a84c:	e001      	b.n	800a852 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a84e:	2300      	movs	r3, #0
 800a850:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a852:	687b      	ldr	r3, [r7, #4]
    }
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	20000710 	.word	0x20000710
 800a864:	2000072c 	.word	0x2000072c

0800a868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d063      	beq.n	800a946 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a882:	4b33      	ldr	r3, [pc, #204]	@ (800a950 <xTaskPriorityInherit+0xe8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a888:	429a      	cmp	r2, r3
 800a88a:	d253      	bcs.n	800a934 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	db06      	blt.n	800a8a2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a894:	4b2e      	ldr	r3, [pc, #184]	@ (800a950 <xTaskPriorityInherit+0xe8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89a:	f1c3 0205 	rsb	r2, r3, #5
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	6959      	ldr	r1, [r3, #20]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4a28      	ldr	r2, [pc, #160]	@ (800a954 <xTaskPriorityInherit+0xec>)
 800a8b4:	4413      	add	r3, r2
 800a8b6:	4299      	cmp	r1, r3
 800a8b8:	d12f      	bne.n	800a91a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fe fad2 	bl	8008e68 <uxListRemove>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d4:	43da      	mvns	r2, r3
 800a8d6:	4b20      	ldr	r3, [pc, #128]	@ (800a958 <xTaskPriorityInherit+0xf0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4013      	ands	r3, r2
 800a8dc:	4a1e      	ldr	r2, [pc, #120]	@ (800a958 <xTaskPriorityInherit+0xf0>)
 800a8de:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a950 <xTaskPriorityInherit+0xe8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	409a      	lsls	r2, r3
 800a8f2:	4b19      	ldr	r3, [pc, #100]	@ (800a958 <xTaskPriorityInherit+0xf0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	4a17      	ldr	r2, [pc, #92]	@ (800a958 <xTaskPriorityInherit+0xf0>)
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4a12      	ldr	r2, [pc, #72]	@ (800a954 <xTaskPriorityInherit+0xec>)
 800a90a:	441a      	add	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	3304      	adds	r3, #4
 800a910:	4619      	mov	r1, r3
 800a912:	4610      	mov	r0, r2
 800a914:	f7fe fa4b 	bl	8008dae <vListInsertEnd>
 800a918:	e004      	b.n	800a924 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a91a:	4b0d      	ldr	r3, [pc, #52]	@ (800a950 <xTaskPriorityInherit+0xe8>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4619      	mov	r1, r3
 800a928:	2049      	movs	r0, #73	@ 0x49
 800a92a:	f002 f8a1 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a92e:	2301      	movs	r3, #1
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	e008      	b.n	800a946 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a938:	4b05      	ldr	r3, [pc, #20]	@ (800a950 <xTaskPriorityInherit+0xe8>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93e:	429a      	cmp	r2, r3
 800a940:	d201      	bcs.n	800a946 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a942:	2301      	movs	r3, #1
 800a944:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a946:	68fb      	ldr	r3, [r7, #12]
    }
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	2000062c 	.word	0x2000062c
 800a954:	20000630 	.word	0x20000630
 800a958:	2000070c 	.word	0x2000070c

0800a95c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b086      	sub	sp, #24
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d06a      	beq.n	800aa48 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a972:	4b38      	ldr	r3, [pc, #224]	@ (800aa54 <xTaskPriorityDisinherit+0xf8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d00b      	beq.n	800a994 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	60fb      	str	r3, [r7, #12]
    }
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	e7fd      	b.n	800a990 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10b      	bne.n	800a9b4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	60bb      	str	r3, [r7, #8]
    }
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	e7fd      	b.n	800a9b0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b8:	1e5a      	subs	r2, r3, #1
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d03e      	beq.n	800aa48 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d13a      	bne.n	800aa48 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fa46 	bl	8008e68 <uxListRemove>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d10a      	bne.n	800a9f8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	43da      	mvns	r2, r3
 800a9ee:	4b1a      	ldr	r3, [pc, #104]	@ (800aa58 <xTaskPriorityDisinherit+0xfc>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	4a18      	ldr	r2, [pc, #96]	@ (800aa58 <xTaskPriorityDisinherit+0xfc>)
 800a9f6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	204a      	movs	r0, #74	@ 0x4a
 800a9fe:	f002 f837 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0e:	f1c3 0205 	rsb	r2, r3, #5
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	409a      	lsls	r2, r3
 800aa1e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa58 <xTaskPriorityDisinherit+0xfc>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	4a0c      	ldr	r2, [pc, #48]	@ (800aa58 <xTaskPriorityDisinherit+0xfc>)
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4a09      	ldr	r2, [pc, #36]	@ (800aa5c <xTaskPriorityDisinherit+0x100>)
 800aa36:	441a      	add	r2, r3
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4610      	mov	r0, r2
 800aa40:	f7fe f9b5 	bl	8008dae <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800aa44:	2301      	movs	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800aa48:	697b      	ldr	r3, [r7, #20]
    }
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	2000062c 	.word	0x2000062c
 800aa58:	2000070c 	.word	0x2000070c
 800aa5c:	20000630 	.word	0x20000630

0800aa60 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8083 	beq.w	800ab80 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10b      	bne.n	800aa9a <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	60fb      	str	r3, [r7, #12]
    }
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d902      	bls.n	800aaaa <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	61fb      	str	r3, [r7, #28]
 800aaa8:	e002      	b.n	800aab0 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaae:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab4:	69fa      	ldr	r2, [r7, #28]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d062      	beq.n	800ab80 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d15d      	bne.n	800ab80 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800aac4:	4b30      	ldr	r3, [pc, #192]	@ (800ab88 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d10b      	bne.n	800aae6 <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60bb      	str	r3, [r7, #8]
    }
 800aae0:	bf00      	nop
 800aae2:	bf00      	nop
 800aae4:	e7fd      	b.n	800aae2 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4619      	mov	r1, r3
 800aaea:	204a      	movs	r0, #74	@ 0x4a
 800aaec:	f001 ffc0 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	db04      	blt.n	800ab0e <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	f1c3 0205 	rsb	r2, r3, #5
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	6959      	ldr	r1, [r3, #20]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4a1b      	ldr	r2, [pc, #108]	@ (800ab8c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ab1e:	4413      	add	r3, r2
 800ab20:	4299      	cmp	r1, r3
 800ab22:	d12d      	bne.n	800ab80 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe f99d 	bl	8008e68 <uxListRemove>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab38:	2201      	movs	r2, #1
 800ab3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3e:	43da      	mvns	r2, r3
 800ab40:	4b13      	ldr	r3, [pc, #76]	@ (800ab90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4013      	ands	r3, r2
 800ab46:	4a12      	ldr	r2, [pc, #72]	@ (800ab90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ab48:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f002 fd0f 	bl	800d570 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab56:	2201      	movs	r2, #1
 800ab58:	409a      	lsls	r2, r3
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	4a0b      	ldr	r2, [pc, #44]	@ (800ab90 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4a06      	ldr	r2, [pc, #24]	@ (800ab8c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ab72:	441a      	add	r2, r3
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f7fe f917 	bl	8008dae <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ab80:	bf00      	nop
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	2000062c 	.word	0x2000062c
 800ab8c:	20000630 	.word	0x20000630
 800ab90:	2000070c 	.word	0x2000070c

0800ab94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800ab94:	b480      	push	{r7}
 800ab96:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800ab98:	4b07      	ldr	r3, [pc, #28]	@ (800abb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800aba0:	4b05      	ldr	r3, [pc, #20]	@ (800abb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aba6:	3201      	adds	r2, #1
 800aba8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800abaa:	4b03      	ldr	r3, [pc, #12]	@ (800abb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800abac:	681b      	ldr	r3, [r3, #0]
    }
 800abae:	4618      	mov	r0, r3
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	2000062c 	.word	0x2000062c

0800abbc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800abc6:	4b32      	ldr	r3, [pc, #200]	@ (800ac90 <prvAddCurrentTaskToDelayedList+0xd4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abcc:	4b31      	ldr	r3, [pc, #196]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3304      	adds	r3, #4
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fe f948 	bl	8008e68 <uxListRemove>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10b      	bne.n	800abf6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800abde:	4b2d      	ldr	r3, [pc, #180]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abe4:	2201      	movs	r2, #1
 800abe6:	fa02 f303 	lsl.w	r3, r2, r3
 800abea:	43da      	mvns	r2, r3
 800abec:	4b2a      	ldr	r3, [pc, #168]	@ (800ac98 <prvAddCurrentTaskToDelayedList+0xdc>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4013      	ands	r3, r2
 800abf2:	4a29      	ldr	r2, [pc, #164]	@ (800ac98 <prvAddCurrentTaskToDelayedList+0xdc>)
 800abf4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abfc:	d110      	bne.n	800ac20 <prvAddCurrentTaskToDelayedList+0x64>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00d      	beq.n	800ac20 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800ac04:	4b23      	ldr	r3, [pc, #140]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	211b      	movs	r1, #27
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 fcf2 	bl	800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac10:	4b20      	ldr	r3, [pc, #128]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4820      	ldr	r0, [pc, #128]	@ (800ac9c <prvAddCurrentTaskToDelayedList+0xe0>)
 800ac1a:	f7fe f8c8 	bl	8008dae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ac1e:	e032      	b.n	800ac86 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4413      	add	r3, r2
 800ac26:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac28:	4b1a      	ldr	r3, [pc, #104]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d20f      	bcs.n	800ac58 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800ac38:	4b16      	ldr	r3, [pc, #88]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2104      	movs	r1, #4
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f002 fcd8 	bl	800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac44:	4b16      	ldr	r3, [pc, #88]	@ (800aca0 <prvAddCurrentTaskToDelayedList+0xe4>)
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	4b12      	ldr	r3, [pc, #72]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4610      	mov	r0, r2
 800ac52:	f7fe f8d0 	bl	8008df6 <vListInsert>
}
 800ac56:	e016      	b.n	800ac86 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800ac58:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2104      	movs	r1, #4
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f002 fcc8 	bl	800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac64:	4b0f      	ldr	r3, [pc, #60]	@ (800aca4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	4b0a      	ldr	r3, [pc, #40]	@ (800ac94 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7fe f8c0 	bl	8008df6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800ac76:	4b0c      	ldr	r3, [pc, #48]	@ (800aca8 <prvAddCurrentTaskToDelayedList+0xec>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d202      	bcs.n	800ac86 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800ac80:	4a09      	ldr	r2, [pc, #36]	@ (800aca8 <prvAddCurrentTaskToDelayedList+0xec>)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	6013      	str	r3, [r2, #0]
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000708 	.word	0x20000708
 800ac94:	2000062c 	.word	0x2000062c
 800ac98:	2000070c 	.word	0x2000070c
 800ac9c:	200006f0 	.word	0x200006f0
 800aca0:	200006c0 	.word	0x200006c0
 800aca4:	200006bc 	.word	0x200006bc
 800aca8:	20000724 	.word	0x20000724

0800acac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800acb6:	f000 fae1 	bl	800b27c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800acba:	4b12      	ldr	r3, [pc, #72]	@ (800ad04 <xTimerCreateTimerTask+0x58>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00b      	beq.n	800acda <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800acc2:	4b11      	ldr	r3, [pc, #68]	@ (800ad08 <xTimerCreateTimerTask+0x5c>)
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	2302      	movs	r3, #2
 800acc8:	9300      	str	r3, [sp, #0]
 800acca:	2300      	movs	r3, #0
 800accc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800acd0:	490e      	ldr	r1, [pc, #56]	@ (800ad0c <xTimerCreateTimerTask+0x60>)
 800acd2:	480f      	ldr	r0, [pc, #60]	@ (800ad10 <xTimerCreateTimerTask+0x64>)
 800acd4:	f7fe ffb6 	bl	8009c44 <xTaskCreate>
 800acd8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	603b      	str	r3, [r7, #0]
    }
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800acf8:	687b      	ldr	r3, [r7, #4]
    }
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20000760 	.word	0x20000760
 800ad08:	20000764 	.word	0x20000764
 800ad0c:	0800ee7c 	.word	0x0800ee7c
 800ad10:	0800ae4d 	.word	0x0800ae4d

0800ad14 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08a      	sub	sp, #40	@ 0x28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10b      	bne.n	800ad44 <xTimerGenericCommand+0x30>
        __asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	623b      	str	r3, [r7, #32]
    }
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	e7fd      	b.n	800ad40 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800ad44:	4b19      	ldr	r3, [pc, #100]	@ (800adac <xTimerGenericCommand+0x98>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d02a      	beq.n	800ada2 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b05      	cmp	r3, #5
 800ad5c:	dc18      	bgt.n	800ad90 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad5e:	f7ff fd65 	bl	800a82c <xTaskGetSchedulerState>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d109      	bne.n	800ad7c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad68:	4b10      	ldr	r3, [pc, #64]	@ (800adac <xTimerGenericCommand+0x98>)
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	f107 0114 	add.w	r1, r7, #20
 800ad70:	2300      	movs	r3, #0
 800ad72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad74:	f7fe f998 	bl	80090a8 <xQueueGenericSend>
 800ad78:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad7a:	e012      	b.n	800ada2 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad7c:	4b0b      	ldr	r3, [pc, #44]	@ (800adac <xTimerGenericCommand+0x98>)
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	f107 0114 	add.w	r1, r7, #20
 800ad84:	2300      	movs	r3, #0
 800ad86:	2200      	movs	r2, #0
 800ad88:	f7fe f98e 	bl	80090a8 <xQueueGenericSend>
 800ad8c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad8e:	e008      	b.n	800ada2 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad90:	4b06      	ldr	r3, [pc, #24]	@ (800adac <xTimerGenericCommand+0x98>)
 800ad92:	6818      	ldr	r0, [r3, #0]
 800ad94:	f107 0114 	add.w	r1, r7, #20
 800ad98:	2300      	movs	r3, #0
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	f7fe faae 	bl	80092fc <xQueueGenericSendFromISR>
 800ada0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800ada4:	4618      	mov	r0, r3
 800ada6:	3728      	adds	r7, #40	@ 0x28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20000760 	.word	0x20000760

0800adb0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adba:	4b23      	ldr	r3, [pc, #140]	@ (800ae48 <prvProcessExpiredTimer+0x98>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	3304      	adds	r3, #4
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fe f84d 	bl	8008e68 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d023      	beq.n	800ae24 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	699a      	ldr	r2, [r3, #24]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	18d1      	adds	r1, r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	6978      	ldr	r0, [r7, #20]
 800adea:	f000 f8d5 	bl	800af98 <prvInsertTimerInActiveList>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d020      	beq.n	800ae36 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adf4:	2300      	movs	r3, #0
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	2300      	movs	r3, #0
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	2100      	movs	r1, #0
 800adfe:	6978      	ldr	r0, [r7, #20]
 800ae00:	f7ff ff88 	bl	800ad14 <xTimerGenericCommand>
 800ae04:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d114      	bne.n	800ae36 <prvProcessExpiredTimer+0x86>
        __asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	60fb      	str	r3, [r7, #12]
    }
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae2a:	f023 0301 	bic.w	r3, r3, #1
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	6978      	ldr	r0, [r7, #20]
 800ae3c:	4798      	blx	r3
    }
 800ae3e:	bf00      	nop
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20000758 	.word	0x20000758

0800ae4c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae54:	f107 0308 	add.w	r3, r7, #8
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f859 	bl	800af10 <prvGetNextExpireTime>
 800ae5e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	4619      	mov	r1, r3
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f805 	bl	800ae74 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800ae6a:	f000 f8d7 	bl	800b01c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae6e:	bf00      	nop
 800ae70:	e7f0      	b.n	800ae54 <prvTimerTask+0x8>
	...

0800ae74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ae7e:	f7ff f8e1 	bl	800a044 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 f866 	bl	800af58 <prvSampleTimeNow>
 800ae8c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d130      	bne.n	800aef6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <prvProcessTimerOrBlockTask+0x3c>
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d806      	bhi.n	800aeb0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800aea2:	f7ff f8dd 	bl	800a060 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aea6:	68f9      	ldr	r1, [r7, #12]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff ff81 	bl	800adb0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800aeae:	e024      	b.n	800aefa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d008      	beq.n	800aec8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aeb6:	4b13      	ldr	r3, [pc, #76]	@ (800af04 <prvProcessTimerOrBlockTask+0x90>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <prvProcessTimerOrBlockTask+0x50>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e000      	b.n	800aec6 <prvProcessTimerOrBlockTask+0x52>
 800aec4:	2300      	movs	r3, #0
 800aec6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aec8:	4b0f      	ldr	r3, [pc, #60]	@ (800af08 <prvProcessTimerOrBlockTask+0x94>)
 800aeca:	6818      	ldr	r0, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	4619      	mov	r1, r3
 800aed6:	f7fe fe81 	bl	8009bdc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800aeda:	f7ff f8c1 	bl	800a060 <xTaskResumeAll>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10a      	bne.n	800aefa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800aee4:	4b09      	ldr	r3, [pc, #36]	@ (800af0c <prvProcessTimerOrBlockTask+0x98>)
 800aee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	f3bf 8f6f 	isb	sy
    }
 800aef4:	e001      	b.n	800aefa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800aef6:	f7ff f8b3 	bl	800a060 <xTaskResumeAll>
    }
 800aefa:	bf00      	nop
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	2000075c 	.word	0x2000075c
 800af08:	20000760 	.word	0x20000760
 800af0c:	e000ed04 	.word	0xe000ed04

0800af10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af18:	4b0e      	ldr	r3, [pc, #56]	@ (800af54 <prvGetNextExpireTime+0x44>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <prvGetNextExpireTime+0x16>
 800af22:	2201      	movs	r2, #1
 800af24:	e000      	b.n	800af28 <prvGetNextExpireTime+0x18>
 800af26:	2200      	movs	r2, #0
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d105      	bne.n	800af40 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af34:	4b07      	ldr	r3, [pc, #28]	@ (800af54 <prvGetNextExpireTime+0x44>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e001      	b.n	800af44 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800af44:	68fb      	ldr	r3, [r7, #12]
    }
 800af46:	4618      	mov	r0, r3
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20000758 	.word	0x20000758

0800af58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800af60:	f7ff f920 	bl	800a1a4 <xTaskGetTickCount>
 800af64:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800af66:	4b0b      	ldr	r3, [pc, #44]	@ (800af94 <prvSampleTimeNow+0x3c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d205      	bcs.n	800af7c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800af70:	f000 f91e 	bl	800b1b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	e002      	b.n	800af82 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800af82:	4a04      	ldr	r2, [pc, #16]	@ (800af94 <prvSampleTimeNow+0x3c>)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800af88:	68fb      	ldr	r3, [r7, #12]
    }
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20000768 	.word	0x20000768

0800af98 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d812      	bhi.n	800afe4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	1ad2      	subs	r2, r2, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d302      	bcc.n	800afd2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800afcc:	2301      	movs	r3, #1
 800afce:	617b      	str	r3, [r7, #20]
 800afd0:	e01b      	b.n	800b00a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afd2:	4b10      	ldr	r3, [pc, #64]	@ (800b014 <prvInsertTimerInActiveList+0x7c>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3304      	adds	r3, #4
 800afda:	4619      	mov	r1, r3
 800afdc:	4610      	mov	r0, r2
 800afde:	f7fd ff0a 	bl	8008df6 <vListInsert>
 800afe2:	e012      	b.n	800b00a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d206      	bcs.n	800affa <prvInsertTimerInActiveList+0x62>
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d302      	bcc.n	800affa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800aff4:	2301      	movs	r3, #1
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	e007      	b.n	800b00a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800affa:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <prvInsertTimerInActiveList+0x80>)
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3304      	adds	r3, #4
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f7fd fef6 	bl	8008df6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b00a:	697b      	ldr	r3, [r7, #20]
    }
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	2000075c 	.word	0x2000075c
 800b018:	20000758 	.word	0x20000758

0800b01c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08c      	sub	sp, #48	@ 0x30
 800b020:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b022:	e0b2      	b.n	800b18a <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f2c0 80af 	blt.w	800b18a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	3304      	adds	r3, #4
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fd ff13 	bl	8008e68 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b042:	1d3b      	adds	r3, r7, #4
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff ff87 	bl	800af58 <prvSampleTimeNow>
 800b04a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b09      	cmp	r3, #9
 800b050:	f200 8098 	bhi.w	800b184 <prvProcessReceivedCommands+0x168>
 800b054:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <prvProcessReceivedCommands+0x40>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b085 	.word	0x0800b085
 800b060:	0800b085 	.word	0x0800b085
 800b064:	0800b085 	.word	0x0800b085
 800b068:	0800b0fb 	.word	0x0800b0fb
 800b06c:	0800b10f 	.word	0x0800b10f
 800b070:	0800b15b 	.word	0x0800b15b
 800b074:	0800b085 	.word	0x0800b085
 800b078:	0800b085 	.word	0x0800b085
 800b07c:	0800b0fb 	.word	0x0800b0fb
 800b080:	0800b10f 	.word	0x0800b10f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	18d1      	adds	r1, r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a3a      	ldr	r2, [r7, #32]
 800b0a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0a4:	f7ff ff78 	bl	800af98 <prvInsertTimerInActiveList>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d06c      	beq.n	800b188 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0b4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d061      	beq.n	800b188 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	441a      	add	r2, r3
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0d6:	f7ff fe1d 	bl	800ad14 <xTimerGenericCommand>
 800b0da:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d152      	bne.n	800b188 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	61bb      	str	r3, [r7, #24]
    }
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop
 800b0f8:	e7fd      	b.n	800b0f6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b100:	f023 0301 	bic.w	r3, r3, #1
 800b104:	b2da      	uxtb	r2, r3
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b10c:	e03d      	b.n	800b18a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10b      	bne.n	800b146 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	617b      	str	r3, [r7, #20]
    }
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	e7fd      	b.n	800b142 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b148:	699a      	ldr	r2, [r3, #24]
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	18d1      	adds	r1, r2, r3
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	6a3a      	ldr	r2, [r7, #32]
 800b152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b154:	f7ff ff20 	bl	800af98 <prvInsertTimerInActiveList>
                        break;
 800b158:	e017      	b.n	800b18a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b160:	f003 0302 	and.w	r3, r3, #2
 800b164:	2b00      	cmp	r3, #0
 800b166:	d103      	bne.n	800b170 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800b168:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b16a:	f000 fc83 	bl	800ba74 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b16e:	e00c      	b.n	800b18a <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b176:	f023 0301 	bic.w	r3, r3, #1
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b182:	e002      	b.n	800b18a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b184:	bf00      	nop
 800b186:	e000      	b.n	800b18a <prvProcessReceivedCommands+0x16e>
                        break;
 800b188:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b18a:	4b08      	ldr	r3, [pc, #32]	@ (800b1ac <prvProcessReceivedCommands+0x190>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f107 0108 	add.w	r1, r7, #8
 800b192:	2200      	movs	r2, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f7fe f973 	bl	8009480 <xQueueReceive>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f47f af41 	bne.w	800b024 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b1a2:	bf00      	nop
 800b1a4:	bf00      	nop
 800b1a6:	3728      	adds	r7, #40	@ 0x28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20000760 	.word	0x20000760

0800b1b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1b6:	e049      	b.n	800b24c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1b8:	4b2e      	ldr	r3, [pc, #184]	@ (800b274 <prvSwitchTimerLists+0xc4>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800b274 <prvSwitchTimerLists+0xc4>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fd fe49 	bl	8008e68 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02f      	beq.n	800b24c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d90e      	bls.n	800b21c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b20a:	4b1a      	ldr	r3, [pc, #104]	@ (800b274 <prvSwitchTimerLists+0xc4>)
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3304      	adds	r3, #4
 800b212:	4619      	mov	r1, r3
 800b214:	4610      	mov	r0, r2
 800b216:	f7fd fdee 	bl	8008df6 <vListInsert>
 800b21a:	e017      	b.n	800b24c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b21c:	2300      	movs	r3, #0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	2300      	movs	r3, #0
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	2100      	movs	r1, #0
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff fd74 	bl	800ad14 <xTimerGenericCommand>
 800b22c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10b      	bne.n	800b24c <prvSwitchTimerLists+0x9c>
        __asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	603b      	str	r3, [r7, #0]
    }
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	e7fd      	b.n	800b248 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b24c:	4b09      	ldr	r3, [pc, #36]	@ (800b274 <prvSwitchTimerLists+0xc4>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1b0      	bne.n	800b1b8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b256:	4b07      	ldr	r3, [pc, #28]	@ (800b274 <prvSwitchTimerLists+0xc4>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b25c:	4b06      	ldr	r3, [pc, #24]	@ (800b278 <prvSwitchTimerLists+0xc8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a04      	ldr	r2, [pc, #16]	@ (800b274 <prvSwitchTimerLists+0xc4>)
 800b262:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b264:	4a04      	ldr	r2, [pc, #16]	@ (800b278 <prvSwitchTimerLists+0xc8>)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	6013      	str	r3, [r2, #0]
    }
 800b26a:	bf00      	nop
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20000758 	.word	0x20000758
 800b278:	2000075c 	.word	0x2000075c

0800b27c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b280:	f000 f9e4 	bl	800b64c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b284:	4b12      	ldr	r3, [pc, #72]	@ (800b2d0 <prvCheckForValidListAndQueue+0x54>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d11d      	bne.n	800b2c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b28c:	4811      	ldr	r0, [pc, #68]	@ (800b2d4 <prvCheckForValidListAndQueue+0x58>)
 800b28e:	f7fd fd61 	bl	8008d54 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b292:	4811      	ldr	r0, [pc, #68]	@ (800b2d8 <prvCheckForValidListAndQueue+0x5c>)
 800b294:	f7fd fd5e 	bl	8008d54 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b298:	4b10      	ldr	r3, [pc, #64]	@ (800b2dc <prvCheckForValidListAndQueue+0x60>)
 800b29a:	4a0e      	ldr	r2, [pc, #56]	@ (800b2d4 <prvCheckForValidListAndQueue+0x58>)
 800b29c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b29e:	4b10      	ldr	r3, [pc, #64]	@ (800b2e0 <prvCheckForValidListAndQueue+0x64>)
 800b2a0:	4a0d      	ldr	r2, [pc, #52]	@ (800b2d8 <prvCheckForValidListAndQueue+0x5c>)
 800b2a2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	210c      	movs	r1, #12
 800b2a8:	200a      	movs	r0, #10
 800b2aa:	f7fd fe71 	bl	8008f90 <xQueueGenericCreate>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	4a07      	ldr	r2, [pc, #28]	@ (800b2d0 <prvCheckForValidListAndQueue+0x54>)
 800b2b2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b2b4:	4b06      	ldr	r3, [pc, #24]	@ (800b2d0 <prvCheckForValidListAndQueue+0x54>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2bc:	4b04      	ldr	r3, [pc, #16]	@ (800b2d0 <prvCheckForValidListAndQueue+0x54>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4908      	ldr	r1, [pc, #32]	@ (800b2e4 <prvCheckForValidListAndQueue+0x68>)
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fc58 	bl	8009b78 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b2c8:	f000 f9f2 	bl	800b6b0 <vPortExitCritical>
    }
 800b2cc:	bf00      	nop
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20000760 	.word	0x20000760
 800b2d4:	20000730 	.word	0x20000730
 800b2d8:	20000744 	.word	0x20000744
 800b2dc:	20000758 	.word	0x20000758
 800b2e0:	2000075c 	.word	0x2000075c
 800b2e4:	0800ee84 	.word	0x0800ee84

0800b2e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	3b04      	subs	r3, #4
 800b2f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b300:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3b04      	subs	r3, #4
 800b306:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f023 0201 	bic.w	r2, r3, #1
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3b04      	subs	r3, #4
 800b316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b318:	4a0c      	ldr	r2, [pc, #48]	@ (800b34c <pxPortInitialiseStack+0x64>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3b14      	subs	r3, #20
 800b322:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3b04      	subs	r3, #4
 800b32e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f06f 0202 	mvn.w	r2, #2
 800b336:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	3b20      	subs	r3, #32
 800b33c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b33e:	68fb      	ldr	r3, [r7, #12]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	0800b351 	.word	0x0800b351

0800b350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b35a:	4b13      	ldr	r3, [pc, #76]	@ (800b3a8 <prvTaskExitError+0x58>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b362:	d00b      	beq.n	800b37c <prvTaskExitError+0x2c>
        __asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	60fb      	str	r3, [r7, #12]
    }
 800b376:	bf00      	nop
 800b378:	bf00      	nop
 800b37a:	e7fd      	b.n	800b378 <prvTaskExitError+0x28>
        __asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	60bb      	str	r3, [r7, #8]
    }
 800b38e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b390:	bf00      	nop
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d0fc      	beq.n	800b392 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	20000064 	.word	0x20000064
 800b3ac:	00000000 	.word	0x00000000

0800b3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b3b0:	4b07      	ldr	r3, [pc, #28]	@ (800b3d0 <pxCurrentTCBConst2>)
 800b3b2:	6819      	ldr	r1, [r3, #0]
 800b3b4:	6808      	ldr	r0, [r1, #0]
 800b3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ba:	f380 8809 	msr	PSP, r0
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f380 8811 	msr	BASEPRI, r0
 800b3ca:	4770      	bx	lr
 800b3cc:	f3af 8000 	nop.w

0800b3d0 <pxCurrentTCBConst2>:
 800b3d0:	2000062c 	.word	0x2000062c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b3d4:	bf00      	nop
 800b3d6:	bf00      	nop

0800b3d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b3d8:	4808      	ldr	r0, [pc, #32]	@ (800b3fc <prvPortStartFirstTask+0x24>)
 800b3da:	6800      	ldr	r0, [r0, #0]
 800b3dc:	6800      	ldr	r0, [r0, #0]
 800b3de:	f380 8808 	msr	MSP, r0
 800b3e2:	f04f 0000 	mov.w	r0, #0
 800b3e6:	f380 8814 	msr	CONTROL, r0
 800b3ea:	b662      	cpsie	i
 800b3ec:	b661      	cpsie	f
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	df00      	svc	0
 800b3f8:	bf00      	nop
 800b3fa:	0000      	.short	0x0000
 800b3fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b400:	bf00      	nop
 800b402:	bf00      	nop

0800b404 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b40a:	4b47      	ldr	r3, [pc, #284]	@ (800b528 <xPortStartScheduler+0x124>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a47      	ldr	r2, [pc, #284]	@ (800b52c <xPortStartScheduler+0x128>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d10b      	bne.n	800b42c <xPortStartScheduler+0x28>
        __asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	613b      	str	r3, [r7, #16]
    }
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	e7fd      	b.n	800b428 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b42c:	4b3e      	ldr	r3, [pc, #248]	@ (800b528 <xPortStartScheduler+0x124>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a3f      	ldr	r2, [pc, #252]	@ (800b530 <xPortStartScheduler+0x12c>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d10b      	bne.n	800b44e <xPortStartScheduler+0x4a>
        __asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60fb      	str	r3, [r7, #12]
    }
 800b448:	bf00      	nop
 800b44a:	bf00      	nop
 800b44c:	e7fd      	b.n	800b44a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b44e:	4b39      	ldr	r3, [pc, #228]	@ (800b534 <xPortStartScheduler+0x130>)
 800b450:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	22ff      	movs	r2, #255	@ 0xff
 800b45e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	b2db      	uxtb	r3, r3
 800b466:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b468:	78fb      	ldrb	r3, [r7, #3]
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b470:	b2da      	uxtb	r2, r3
 800b472:	4b31      	ldr	r3, [pc, #196]	@ (800b538 <xPortStartScheduler+0x134>)
 800b474:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b476:	4b31      	ldr	r3, [pc, #196]	@ (800b53c <xPortStartScheduler+0x138>)
 800b478:	2207      	movs	r2, #7
 800b47a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b47c:	e009      	b.n	800b492 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b47e:	4b2f      	ldr	r3, [pc, #188]	@ (800b53c <xPortStartScheduler+0x138>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3b01      	subs	r3, #1
 800b484:	4a2d      	ldr	r2, [pc, #180]	@ (800b53c <xPortStartScheduler+0x138>)
 800b486:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b492:	78fb      	ldrb	r3, [r7, #3]
 800b494:	b2db      	uxtb	r3, r3
 800b496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b49a:	2b80      	cmp	r3, #128	@ 0x80
 800b49c:	d0ef      	beq.n	800b47e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b49e:	4b27      	ldr	r3, [pc, #156]	@ (800b53c <xPortStartScheduler+0x138>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f1c3 0307 	rsb	r3, r3, #7
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d00b      	beq.n	800b4c2 <xPortStartScheduler+0xbe>
        __asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	60bb      	str	r3, [r7, #8]
    }
 800b4bc:	bf00      	nop
 800b4be:	bf00      	nop
 800b4c0:	e7fd      	b.n	800b4be <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4c2:	4b1e      	ldr	r3, [pc, #120]	@ (800b53c <xPortStartScheduler+0x138>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	021b      	lsls	r3, r3, #8
 800b4c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b53c <xPortStartScheduler+0x138>)
 800b4ca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b53c <xPortStartScheduler+0x138>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4d4:	4a19      	ldr	r2, [pc, #100]	@ (800b53c <xPortStartScheduler+0x138>)
 800b4d6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b4e0:	4b17      	ldr	r3, [pc, #92]	@ (800b540 <xPortStartScheduler+0x13c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a16      	ldr	r2, [pc, #88]	@ (800b540 <xPortStartScheduler+0x13c>)
 800b4e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b4ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b4ec:	4b14      	ldr	r3, [pc, #80]	@ (800b540 <xPortStartScheduler+0x13c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a13      	ldr	r2, [pc, #76]	@ (800b540 <xPortStartScheduler+0x13c>)
 800b4f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b4f6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b4f8:	f000 f968 	bl	800b7cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b4fc:	4b11      	ldr	r3, [pc, #68]	@ (800b544 <xPortStartScheduler+0x140>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b502:	f000 f987 	bl	800b814 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b506:	4b10      	ldr	r3, [pc, #64]	@ (800b548 <xPortStartScheduler+0x144>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a0f      	ldr	r2, [pc, #60]	@ (800b548 <xPortStartScheduler+0x144>)
 800b50c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b510:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b512:	f7ff ff61 	bl	800b3d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b516:	f7fe ff25 	bl	800a364 <vTaskSwitchContext>
    prvTaskExitError();
 800b51a:	f7ff ff19 	bl	800b350 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	e000ed00 	.word	0xe000ed00
 800b52c:	410fc271 	.word	0x410fc271
 800b530:	410fc270 	.word	0x410fc270
 800b534:	e000e400 	.word	0xe000e400
 800b538:	2000076c 	.word	0x2000076c
 800b53c:	20000770 	.word	0x20000770
 800b540:	e000ed20 	.word	0xe000ed20
 800b544:	20000064 	.word	0x20000064
 800b548:	e000ef34 	.word	0xe000ef34

0800b54c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b552:	4b38      	ldr	r3, [pc, #224]	@ (800b634 <vInitPrioGroupValue+0xe8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a38      	ldr	r2, [pc, #224]	@ (800b638 <vInitPrioGroupValue+0xec>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d10b      	bne.n	800b574 <vInitPrioGroupValue+0x28>
        __asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	613b      	str	r3, [r7, #16]
    }
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	e7fd      	b.n	800b570 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b574:	4b2f      	ldr	r3, [pc, #188]	@ (800b634 <vInitPrioGroupValue+0xe8>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a30      	ldr	r2, [pc, #192]	@ (800b63c <vInitPrioGroupValue+0xf0>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d10b      	bne.n	800b596 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	60fb      	str	r3, [r7, #12]
    }
 800b590:	bf00      	nop
 800b592:	bf00      	nop
 800b594:	e7fd      	b.n	800b592 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b596:	4b2a      	ldr	r3, [pc, #168]	@ (800b640 <vInitPrioGroupValue+0xf4>)
 800b598:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	22ff      	movs	r2, #255	@ 0xff
 800b5a6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	4b22      	ldr	r3, [pc, #136]	@ (800b644 <vInitPrioGroupValue+0xf8>)
 800b5bc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5be:	4b22      	ldr	r3, [pc, #136]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b5c0:	2207      	movs	r2, #7
 800b5c2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5c4:	e009      	b.n	800b5da <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b5c6:	4b20      	ldr	r3, [pc, #128]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b5ce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5e2:	2b80      	cmp	r3, #128	@ 0x80
 800b5e4:	d0ef      	beq.n	800b5c6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5e6:	4b18      	ldr	r3, [pc, #96]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f1c3 0307 	rsb	r3, r3, #7
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d00b      	beq.n	800b60a <vInitPrioGroupValue+0xbe>
        __asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	60bb      	str	r3, [r7, #8]
    }
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b60a:	4b0f      	ldr	r3, [pc, #60]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	021b      	lsls	r3, r3, #8
 800b610:	4a0d      	ldr	r2, [pc, #52]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b612:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b614:	4b0c      	ldr	r3, [pc, #48]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b61c:	4a0a      	ldr	r2, [pc, #40]	@ (800b648 <vInitPrioGroupValue+0xfc>)
 800b61e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	b2da      	uxtb	r2, r3
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800b628:	bf00      	nop
 800b62a:	371c      	adds	r7, #28
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	e000ed00 	.word	0xe000ed00
 800b638:	410fc271 	.word	0x410fc271
 800b63c:	410fc270 	.word	0x410fc270
 800b640:	e000e400 	.word	0xe000e400
 800b644:	2000076c 	.word	0x2000076c
 800b648:	20000770 	.word	0x20000770

0800b64c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
        __asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	607b      	str	r3, [r7, #4]
    }
 800b664:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b666:	4b10      	ldr	r3, [pc, #64]	@ (800b6a8 <vPortEnterCritical+0x5c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3301      	adds	r3, #1
 800b66c:	4a0e      	ldr	r2, [pc, #56]	@ (800b6a8 <vPortEnterCritical+0x5c>)
 800b66e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b670:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a8 <vPortEnterCritical+0x5c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d110      	bne.n	800b69a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b678:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ac <vPortEnterCritical+0x60>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00b      	beq.n	800b69a <vPortEnterCritical+0x4e>
        __asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	603b      	str	r3, [r7, #0]
    }
 800b694:	bf00      	nop
 800b696:	bf00      	nop
 800b698:	e7fd      	b.n	800b696 <vPortEnterCritical+0x4a>
    }
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	20000064 	.word	0x20000064
 800b6ac:	e000ed04 	.word	0xe000ed04

0800b6b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b6b6:	4b12      	ldr	r3, [pc, #72]	@ (800b700 <vPortExitCritical+0x50>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10b      	bne.n	800b6d6 <vPortExitCritical+0x26>
        __asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	607b      	str	r3, [r7, #4]
    }
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop
 800b6d4:	e7fd      	b.n	800b6d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b6d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b700 <vPortExitCritical+0x50>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	4a08      	ldr	r2, [pc, #32]	@ (800b700 <vPortExitCritical+0x50>)
 800b6de:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b6e0:	4b07      	ldr	r3, [pc, #28]	@ (800b700 <vPortExitCritical+0x50>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d105      	bne.n	800b6f4 <vPortExitCritical+0x44>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f383 8811 	msr	BASEPRI, r3
    }
 800b6f2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000064 	.word	0x20000064
	...

0800b710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b710:	f3ef 8009 	mrs	r0, PSP
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4b15      	ldr	r3, [pc, #84]	@ (800b770 <pxCurrentTCBConst>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f01e 0f10 	tst.w	lr, #16
 800b720:	bf08      	it	eq
 800b722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b734:	f380 8811 	msr	BASEPRI, r0
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f7fe fe10 	bl	800a364 <vTaskSwitchContext>
 800b744:	f04f 0000 	mov.w	r0, #0
 800b748:	f380 8811 	msr	BASEPRI, r0
 800b74c:	bc09      	pop	{r0, r3}
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	6808      	ldr	r0, [r1, #0]
 800b752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b756:	f01e 0f10 	tst.w	lr, #16
 800b75a:	bf08      	it	eq
 800b75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b760:	f380 8809 	msr	PSP, r0
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst>:
 800b770:	2000062c 	.word	0x2000062c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
        __asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	607b      	str	r3, [r7, #4]
    }
 800b790:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800b792:	f001 fdd3 	bl	800d33c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b796:	f7fe fd27 	bl	800a1e8 <xTaskIncrementTick>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d006      	beq.n	800b7ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800b7a0:	f001 fe2a 	bl	800d3f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7a4:	4b08      	ldr	r3, [pc, #32]	@ (800b7c8 <SysTick_Handler+0x50>)
 800b7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	e001      	b.n	800b7b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800b7ae:	f001 fe07 	bl	800d3c0 <SEGGER_SYSVIEW_RecordExitISR>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	f383 8811 	msr	BASEPRI, r3
    }
 800b7bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800b7be:	bf00      	nop
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <vPortSetupTimerInterrupt+0x34>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b804 <vPortSetupTimerInterrupt+0x38>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b808 <vPortSetupTimerInterrupt+0x3c>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b80c <vPortSetupTimerInterrupt+0x40>)
 800b7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7e6:	099b      	lsrs	r3, r3, #6
 800b7e8:	4a09      	ldr	r2, [pc, #36]	@ (800b810 <vPortSetupTimerInterrupt+0x44>)
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7ee:	4b04      	ldr	r3, [pc, #16]	@ (800b800 <vPortSetupTimerInterrupt+0x34>)
 800b7f0:	2207      	movs	r2, #7
 800b7f2:	601a      	str	r2, [r3, #0]
}
 800b7f4:	bf00      	nop
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	e000e010 	.word	0xe000e010
 800b804:	e000e018 	.word	0xe000e018
 800b808:	20000024 	.word	0x20000024
 800b80c:	10624dd3 	.word	0x10624dd3
 800b810:	e000e014 	.word	0xe000e014

0800b814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b814:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b824 <vPortEnableVFP+0x10>
 800b818:	6801      	ldr	r1, [r0, #0]
 800b81a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b81e:	6001      	str	r1, [r0, #0]
 800b820:	4770      	bx	lr
 800b822:	0000      	.short	0x0000
 800b824:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop

0800b82c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b832:	f3ef 8305 	mrs	r3, IPSR
 800b836:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b0f      	cmp	r3, #15
 800b83c:	d915      	bls.n	800b86a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b83e:	4a18      	ldr	r2, [pc, #96]	@ (800b8a0 <vPortValidateInterruptPriority+0x74>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	4413      	add	r3, r2
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b848:	4b16      	ldr	r3, [pc, #88]	@ (800b8a4 <vPortValidateInterruptPriority+0x78>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	7afa      	ldrb	r2, [r7, #11]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d20b      	bcs.n	800b86a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	607b      	str	r3, [r7, #4]
    }
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	e7fd      	b.n	800b866 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b86a:	4b0f      	ldr	r3, [pc, #60]	@ (800b8a8 <vPortValidateInterruptPriority+0x7c>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b872:	4b0e      	ldr	r3, [pc, #56]	@ (800b8ac <vPortValidateInterruptPriority+0x80>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	429a      	cmp	r2, r3
 800b878:	d90b      	bls.n	800b892 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	603b      	str	r3, [r7, #0]
    }
 800b88c:	bf00      	nop
 800b88e:	bf00      	nop
 800b890:	e7fd      	b.n	800b88e <vPortValidateInterruptPriority+0x62>
    }
 800b892:	bf00      	nop
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	e000e3f0 	.word	0xe000e3f0
 800b8a4:	2000076c 	.word	0x2000076c
 800b8a8:	e000ed0c 	.word	0xe000ed0c
 800b8ac:	20000770 	.word	0x20000770

0800b8b0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08a      	sub	sp, #40	@ 0x28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800b8bc:	f7fe fbc2 	bl	800a044 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b8c0:	4b66      	ldr	r3, [pc, #408]	@ (800ba5c <pvPortMalloc+0x1ac>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b8c8:	f000 f938 	bl	800bb3c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8cc:	4b64      	ldr	r3, [pc, #400]	@ (800ba60 <pvPortMalloc+0x1b0>)
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 80a9 	bne.w	800ba2c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d02e      	beq.n	800b93e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800b8e0:	2208      	movs	r2, #8
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d228      	bcs.n	800b93e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800b8ec:	2208      	movs	r2, #8
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d022      	beq.n	800b944 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f023 0307 	bic.w	r3, r3, #7
 800b904:	3308      	adds	r3, #8
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d215      	bcs.n	800b938 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f023 0307 	bic.w	r3, r3, #7
 800b912:	3308      	adds	r3, #8
 800b914:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d011      	beq.n	800b944 <pvPortMalloc+0x94>
        __asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	617b      	str	r3, [r7, #20]
    }
 800b932:	bf00      	nop
 800b934:	bf00      	nop
 800b936:	e7fd      	b.n	800b934 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800b938:	2300      	movs	r3, #0
 800b93a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b93c:	e002      	b.n	800b944 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800b93e:	2300      	movs	r3, #0
 800b940:	607b      	str	r3, [r7, #4]
 800b942:	e000      	b.n	800b946 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b944:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d06f      	beq.n	800ba2c <pvPortMalloc+0x17c>
 800b94c:	4b45      	ldr	r3, [pc, #276]	@ (800ba64 <pvPortMalloc+0x1b4>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	429a      	cmp	r2, r3
 800b954:	d86a      	bhi.n	800ba2c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b956:	4b44      	ldr	r3, [pc, #272]	@ (800ba68 <pvPortMalloc+0x1b8>)
 800b958:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b95a:	4b43      	ldr	r3, [pc, #268]	@ (800ba68 <pvPortMalloc+0x1b8>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b960:	e004      	b.n	800b96c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800b962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b964:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d903      	bls.n	800b97e <pvPortMalloc+0xce>
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1f1      	bne.n	800b962 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b97e:	4b37      	ldr	r3, [pc, #220]	@ (800ba5c <pvPortMalloc+0x1ac>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b984:	429a      	cmp	r2, r3
 800b986:	d051      	beq.n	800ba2c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2208      	movs	r2, #8
 800b98e:	4413      	add	r3, r2
 800b990:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	1ad2      	subs	r2, r2, r3
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d920      	bls.n	800b9ec <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	f003 0307 	and.w	r3, r3, #7
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <pvPortMalloc+0x124>
        __asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	613b      	str	r3, [r7, #16]
    }
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	1ad2      	subs	r2, r2, r3
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9e6:	69b8      	ldr	r0, [r7, #24]
 800b9e8:	f000 f90a 	bl	800bc00 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9ec:	4b1d      	ldr	r3, [pc, #116]	@ (800ba64 <pvPortMalloc+0x1b4>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	4a1b      	ldr	r2, [pc, #108]	@ (800ba64 <pvPortMalloc+0x1b4>)
 800b9f8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9fa:	4b1a      	ldr	r3, [pc, #104]	@ (800ba64 <pvPortMalloc+0x1b4>)
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	4b1b      	ldr	r3, [pc, #108]	@ (800ba6c <pvPortMalloc+0x1bc>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d203      	bcs.n	800ba0e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba06:	4b17      	ldr	r3, [pc, #92]	@ (800ba64 <pvPortMalloc+0x1b4>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a18      	ldr	r2, [pc, #96]	@ (800ba6c <pvPortMalloc+0x1bc>)
 800ba0c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	4b13      	ldr	r3, [pc, #76]	@ (800ba60 <pvPortMalloc+0x1b0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	431a      	orrs	r2, r3
 800ba18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ba22:	4b13      	ldr	r3, [pc, #76]	@ (800ba70 <pvPortMalloc+0x1c0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3301      	adds	r3, #1
 800ba28:	4a11      	ldr	r2, [pc, #68]	@ (800ba70 <pvPortMalloc+0x1c0>)
 800ba2a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ba2c:	f7fe fb18 	bl	800a060 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00b      	beq.n	800ba52 <pvPortMalloc+0x1a2>
        __asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60fb      	str	r3, [r7, #12]
    }
 800ba4c:	bf00      	nop
 800ba4e:	bf00      	nop
 800ba50:	e7fd      	b.n	800ba4e <pvPortMalloc+0x19e>
    return pvReturn;
 800ba52:	69fb      	ldr	r3, [r7, #28]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3728      	adds	r7, #40	@ 0x28
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	2001337c 	.word	0x2001337c
 800ba60:	20013390 	.word	0x20013390
 800ba64:	20013380 	.word	0x20013380
 800ba68:	20013374 	.word	0x20013374
 800ba6c:	20013384 	.word	0x20013384
 800ba70:	20013388 	.word	0x20013388

0800ba74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d04f      	beq.n	800bb26 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ba86:	2308      	movs	r3, #8
 800ba88:	425b      	negs	r3, r3
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	4b25      	ldr	r3, [pc, #148]	@ (800bb30 <vPortFree+0xbc>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10b      	bne.n	800baba <vPortFree+0x46>
        __asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	60fb      	str	r3, [r7, #12]
    }
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop
 800bab8:	e7fd      	b.n	800bab6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00b      	beq.n	800bada <vPortFree+0x66>
        __asm volatile
 800bac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac6:	f383 8811 	msr	BASEPRI, r3
 800baca:	f3bf 8f6f 	isb	sy
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	60bb      	str	r3, [r7, #8]
    }
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	e7fd      	b.n	800bad6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	4b14      	ldr	r3, [pc, #80]	@ (800bb30 <vPortFree+0xbc>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4013      	ands	r3, r2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d01e      	beq.n	800bb26 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11a      	bne.n	800bb26 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	4b0e      	ldr	r3, [pc, #56]	@ (800bb30 <vPortFree+0xbc>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	43db      	mvns	r3, r3
 800bafa:	401a      	ands	r2, r3
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800bb00:	f7fe faa0 	bl	800a044 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	4b0a      	ldr	r3, [pc, #40]	@ (800bb34 <vPortFree+0xc0>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	4a09      	ldr	r2, [pc, #36]	@ (800bb34 <vPortFree+0xc0>)
 800bb10:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb12:	6938      	ldr	r0, [r7, #16]
 800bb14:	f000 f874 	bl	800bc00 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bb18:	4b07      	ldr	r3, [pc, #28]	@ (800bb38 <vPortFree+0xc4>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	4a06      	ldr	r2, [pc, #24]	@ (800bb38 <vPortFree+0xc4>)
 800bb20:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800bb22:	f7fe fa9d 	bl	800a060 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800bb26:	bf00      	nop
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	20013390 	.word	0x20013390
 800bb34:	20013380 	.word	0x20013380
 800bb38:	2001338c 	.word	0x2001338c

0800bb3c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb42:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800bb46:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800bb48:	4b27      	ldr	r3, [pc, #156]	@ (800bbe8 <prvHeapInit+0xac>)
 800bb4a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f003 0307 	and.w	r3, r3, #7
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00c      	beq.n	800bb70 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3307      	adds	r3, #7
 800bb5a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 0307 	bic.w	r3, r3, #7
 800bb62:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	4a1f      	ldr	r2, [pc, #124]	@ (800bbe8 <prvHeapInit+0xac>)
 800bb6c:	4413      	add	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb74:	4a1d      	ldr	r2, [pc, #116]	@ (800bbec <prvHeapInit+0xb0>)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800bb7a:	4b1c      	ldr	r3, [pc, #112]	@ (800bbec <prvHeapInit+0xb0>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	4413      	add	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bb88:	2208      	movs	r2, #8
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	1a9b      	subs	r3, r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0307 	bic.w	r3, r3, #7
 800bb96:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4a15      	ldr	r2, [pc, #84]	@ (800bbf0 <prvHeapInit+0xb4>)
 800bb9c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800bb9e:	4b14      	ldr	r3, [pc, #80]	@ (800bbf0 <prvHeapInit+0xb4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2200      	movs	r2, #0
 800bba4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800bba6:	4b12      	ldr	r3, [pc, #72]	@ (800bbf0 <prvHeapInit+0xb4>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	1ad2      	subs	r2, r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbbc:	4b0c      	ldr	r3, [pc, #48]	@ (800bbf0 <prvHeapInit+0xb4>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	4a0a      	ldr	r2, [pc, #40]	@ (800bbf4 <prvHeapInit+0xb8>)
 800bbca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	4a09      	ldr	r2, [pc, #36]	@ (800bbf8 <prvHeapInit+0xbc>)
 800bbd2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbd4:	4b09      	ldr	r3, [pc, #36]	@ (800bbfc <prvHeapInit+0xc0>)
 800bbd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bbda:	601a      	str	r2, [r3, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	20000774 	.word	0x20000774
 800bbec:	20013374 	.word	0x20013374
 800bbf0:	2001337c 	.word	0x2001337c
 800bbf4:	20013384 	.word	0x20013384
 800bbf8:	20013380 	.word	0x20013380
 800bbfc:	20013390 	.word	0x20013390

0800bc00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc08:	4b28      	ldr	r3, [pc, #160]	@ (800bcac <prvInsertBlockIntoFreeList+0xac>)
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e002      	b.n	800bc14 <prvInsertBlockIntoFreeList+0x14>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d8f7      	bhi.n	800bc0e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	4413      	add	r3, r2
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d108      	bne.n	800bc42 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	441a      	add	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d118      	bne.n	800bc88 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	4b15      	ldr	r3, [pc, #84]	@ (800bcb0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d00d      	beq.n	800bc7e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	441a      	add	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	e008      	b.n	800bc90 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	601a      	str	r2, [r3, #0]
 800bc86:	e003      	b.n	800bc90 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d002      	beq.n	800bc9e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800bc9e:	bf00      	nop
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	20013374 	.word	0x20013374
 800bcb0:	2001337c 	.word	0x2001337c

0800bcb4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800bcb8:	4803      	ldr	r0, [pc, #12]	@ (800bcc8 <_cbSendSystemDesc+0x14>)
 800bcba:	f001 fae9 	bl	800d290 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800bcbe:	4803      	ldr	r0, [pc, #12]	@ (800bccc <_cbSendSystemDesc+0x18>)
 800bcc0:	f001 fae6 	bl	800d290 <SEGGER_SYSVIEW_SendSysDesc>
}
 800bcc4:	bf00      	nop
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	0800ee8c 	.word	0x0800ee8c
 800bccc:	0800eeb4 	.word	0x0800eeb4

0800bcd0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800bcd4:	4b06      	ldr	r3, [pc, #24]	@ (800bcf0 <SEGGER_SYSVIEW_Conf+0x20>)
 800bcd6:	6818      	ldr	r0, [r3, #0]
 800bcd8:	4b05      	ldr	r3, [pc, #20]	@ (800bcf0 <SEGGER_SYSVIEW_Conf+0x20>)
 800bcda:	6819      	ldr	r1, [r3, #0]
 800bcdc:	4b05      	ldr	r3, [pc, #20]	@ (800bcf4 <SEGGER_SYSVIEW_Conf+0x24>)
 800bcde:	4a06      	ldr	r2, [pc, #24]	@ (800bcf8 <SEGGER_SYSVIEW_Conf+0x28>)
 800bce0:	f000 fe54 	bl	800c98c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800bce4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800bce8:	f000 fe94 	bl	800ca14 <SEGGER_SYSVIEW_SetRAMBase>
}
 800bcec:	bf00      	nop
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20000024 	.word	0x20000024
 800bcf4:	0800bcb5 	.word	0x0800bcb5
 800bcf8:	0800ef9c 	.word	0x0800ef9c

0800bcfc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800bcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
 800bd06:	e033      	b.n	800bd70 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800bd08:	491e      	ldr	r1, [pc, #120]	@ (800bd84 <_cbSendTaskList+0x88>)
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	440b      	add	r3, r1
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	491a      	ldr	r1, [pc, #104]	@ (800bd84 <_cbSendTaskList+0x88>)
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4413      	add	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	440b      	add	r3, r1
 800bd26:	3304      	adds	r3, #4
 800bd28:	6819      	ldr	r1, [r3, #0]
 800bd2a:	4c16      	ldr	r4, [pc, #88]	@ (800bd84 <_cbSendTaskList+0x88>)
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4423      	add	r3, r4
 800bd38:	3308      	adds	r3, #8
 800bd3a:	681c      	ldr	r4, [r3, #0]
 800bd3c:	4d11      	ldr	r5, [pc, #68]	@ (800bd84 <_cbSendTaskList+0x88>)
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	442b      	add	r3, r5
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	681d      	ldr	r5, [r3, #0]
 800bd4e:	4e0d      	ldr	r6, [pc, #52]	@ (800bd84 <_cbSendTaskList+0x88>)
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4433      	add	r3, r6
 800bd5c:	3310      	adds	r3, #16
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	462b      	mov	r3, r5
 800bd64:	4622      	mov	r2, r4
 800bd66:	f000 f8bd 	bl	800bee4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	4b05      	ldr	r3, [pc, #20]	@ (800bd88 <_cbSendTaskList+0x8c>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d3c6      	bcc.n	800bd08 <_cbSendTaskList+0xc>
  }
}
 800bd7a:	bf00      	nop
 800bd7c:	bf00      	nop
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd84:	20013394 	.word	0x20013394
 800bd88:	20013434 	.word	0x20013434

0800bd8c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800bd8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800bd94:	f7fe fa16 	bl	800a1c4 <xTaskGetTickCountFromISR>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	469a      	mov	sl, r3
 800bd9e:	4693      	mov	fp, r2
 800bda0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800bda4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	f04f 0a00 	mov.w	sl, #0
 800bdb0:	f04f 0b00 	mov.w	fp, #0
 800bdb4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800bdb8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800bdbc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	465b      	mov	r3, fp
 800bdc4:	1a14      	subs	r4, r2, r0
 800bdc6:	eb63 0501 	sbc.w	r5, r3, r1
 800bdca:	f04f 0200 	mov.w	r2, #0
 800bdce:	f04f 0300 	mov.w	r3, #0
 800bdd2:	00ab      	lsls	r3, r5, #2
 800bdd4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bdd8:	00a2      	lsls	r2, r4, #2
 800bdda:	4614      	mov	r4, r2
 800bddc:	461d      	mov	r5, r3
 800bdde:	eb14 0800 	adds.w	r8, r4, r0
 800bde2:	eb45 0901 	adc.w	r9, r5, r1
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	f04f 0300 	mov.w	r3, #0
 800bdee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bdf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bdf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bdfa:	4690      	mov	r8, r2
 800bdfc:	4699      	mov	r9, r3
 800bdfe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800be02:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800be06:	4610      	mov	r0, r2
 800be08:	4619      	mov	r1, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800be14 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b086      	sub	sp, #24
 800be18:	af02      	add	r7, sp, #8
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800be22:	2205      	movs	r2, #5
 800be24:	492b      	ldr	r1, [pc, #172]	@ (800bed4 <SYSVIEW_AddTask+0xc0>)
 800be26:	68b8      	ldr	r0, [r7, #8]
 800be28:	f001 ffa8 	bl	800dd7c <memcmp>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d04b      	beq.n	800beca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800be32:	4b29      	ldr	r3, [pc, #164]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b07      	cmp	r3, #7
 800be38:	d903      	bls.n	800be42 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800be3a:	4828      	ldr	r0, [pc, #160]	@ (800bedc <SYSVIEW_AddTask+0xc8>)
 800be3c:	f001 fd26 	bl	800d88c <SEGGER_SYSVIEW_Warn>
    return;
 800be40:	e044      	b.n	800becc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800be42:	4b25      	ldr	r3, [pc, #148]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	4926      	ldr	r1, [pc, #152]	@ (800bee0 <SYSVIEW_AddTask+0xcc>)
 800be48:	4613      	mov	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	440b      	add	r3, r1
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800be56:	4b20      	ldr	r3, [pc, #128]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	4921      	ldr	r1, [pc, #132]	@ (800bee0 <SYSVIEW_AddTask+0xcc>)
 800be5c:	4613      	mov	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	440b      	add	r3, r1
 800be66:	3304      	adds	r3, #4
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800be6c:	4b1a      	ldr	r3, [pc, #104]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	491b      	ldr	r1, [pc, #108]	@ (800bee0 <SYSVIEW_AddTask+0xcc>)
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	440b      	add	r3, r1
 800be7c:	3308      	adds	r3, #8
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800be82:	4b15      	ldr	r3, [pc, #84]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	4916      	ldr	r1, [pc, #88]	@ (800bee0 <SYSVIEW_AddTask+0xcc>)
 800be88:	4613      	mov	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	440b      	add	r3, r1
 800be92:	330c      	adds	r3, #12
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800be98:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	4910      	ldr	r1, [pc, #64]	@ (800bee0 <SYSVIEW_AddTask+0xcc>)
 800be9e:	4613      	mov	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	3310      	adds	r3, #16
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800beae:	4b0a      	ldr	r3, [pc, #40]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	4a08      	ldr	r2, [pc, #32]	@ (800bed8 <SYSVIEW_AddTask+0xc4>)
 800beb6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 f80e 	bl	800bee4 <SYSVIEW_SendTaskInfo>
 800bec8:	e000      	b.n	800becc <SYSVIEW_AddTask+0xb8>
    return;
 800beca:	bf00      	nop

}
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	0800eec4 	.word	0x0800eec4
 800bed8:	20013434 	.word	0x20013434
 800bedc:	0800eecc 	.word	0x0800eecc
 800bee0:	20013394 	.word	0x20013394

0800bee4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08a      	sub	sp, #40	@ 0x28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800bef2:	f107 0314 	add.w	r3, r7, #20
 800bef6:	2214      	movs	r2, #20
 800bef8:	2100      	movs	r1, #0
 800befa:	4618      	mov	r0, r3
 800befc:	f001 ff4e 	bl	800dd9c <memset>
  TaskInfo.TaskID     = TaskID;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf12:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800bf14:	f107 0314 	add.w	r3, r7, #20
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f001 f8c1 	bl	800d0a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800bf1e:	bf00      	nop
 800bf20:	3728      	adds	r7, #40	@ 0x28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
	...

0800bf28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bf2e:	4b24      	ldr	r3, [pc, #144]	@ (800bfc0 <_DoInit+0x98>)
 800bf30:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2203      	movs	r2, #3
 800bf36:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2203      	movs	r2, #3
 800bf3c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a20      	ldr	r2, [pc, #128]	@ (800bfc4 <_DoInit+0x9c>)
 800bf42:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a20      	ldr	r2, [pc, #128]	@ (800bfc8 <_DoInit+0xa0>)
 800bf48:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bf50:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a17      	ldr	r2, [pc, #92]	@ (800bfc4 <_DoInit+0x9c>)
 800bf68:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a17      	ldr	r2, [pc, #92]	@ (800bfcc <_DoInit+0xa4>)
 800bf6e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2210      	movs	r2, #16
 800bf74:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	3307      	adds	r3, #7
 800bf8c:	4a10      	ldr	r2, [pc, #64]	@ (800bfd0 <_DoInit+0xa8>)
 800bf8e:	6810      	ldr	r0, [r2, #0]
 800bf90:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bf92:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a0e      	ldr	r2, [pc, #56]	@ (800bfd4 <_DoInit+0xac>)
 800bf9a:	6810      	ldr	r0, [r2, #0]
 800bf9c:	6018      	str	r0, [r3, #0]
 800bf9e:	8891      	ldrh	r1, [r2, #4]
 800bfa0:	7992      	ldrb	r2, [r2, #6]
 800bfa2:	8099      	strh	r1, [r3, #4]
 800bfa4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bfa6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2220      	movs	r2, #32
 800bfae:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bfb0:	f3bf 8f5f 	dmb	sy
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	20013438 	.word	0x20013438
 800bfc4:	0800ef1c 	.word	0x0800ef1c
 800bfc8:	200134e0 	.word	0x200134e0
 800bfcc:	200138e0 	.word	0x200138e0
 800bfd0:	0800ef28 	.word	0x0800ef28
 800bfd4:	0800ef2c 	.word	0x0800ef2c

0800bfd8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	@ 0x28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d905      	bls.n	800c008 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	3b01      	subs	r3, #1
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24
 800c006:	e007      	b.n	800c018 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	69b9      	ldr	r1, [r7, #24]
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	1acb      	subs	r3, r1, r3
 800c012:	4413      	add	r3, r2
 800c014:	3b01      	subs	r3, #1
 800c016:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c022:	4293      	cmp	r3, r2
 800c024:	bf28      	it	cs
 800c026:	4613      	movcs	r3, r2
 800c028:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800c02a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4293      	cmp	r3, r2
 800c030:	bf28      	it	cs
 800c032:	4613      	movcs	r3, r2
 800c034:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	4413      	add	r3, r2
 800c03e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800c040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	6978      	ldr	r0, [r7, #20]
 800c046:	f001 ff0c 	bl	800de62 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800c04a:	6a3a      	ldr	r2, [r7, #32]
 800c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04e:	4413      	add	r3, r2
 800c050:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c056:	4413      	add	r3, r2
 800c058:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c066:	4413      	add	r3, r2
 800c068:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	429a      	cmp	r2, r3
 800c072:	d101      	bne.n	800c078 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800c074:	2300      	movs	r3, #0
 800c076:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c078:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1b2      	bne.n	800bfee <_WriteBlocking+0x16>
  return NumBytesWritten;
 800c088:	6a3b      	ldr	r3, [r7, #32]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3728      	adds	r7, #40	@ 0x28
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800c092:	b580      	push	{r7, lr}
 800c094:	b088      	sub	sp, #32
 800c096:	af00      	add	r7, sp, #0
 800c098:	60f8      	str	r0, [r7, #12]
 800c09a:	60b9      	str	r1, [r7, #8]
 800c09c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	689a      	ldr	r2, [r3, #8]
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800c0ae:	69ba      	ldr	r2, [r7, #24]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d911      	bls.n	800c0da <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	4413      	add	r3, r2
 800c0be:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	68b9      	ldr	r1, [r7, #8]
 800c0c4:	6938      	ldr	r0, [r7, #16]
 800c0c6:	f001 fecc 	bl	800de62 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c0ca:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800c0ce:	69fa      	ldr	r2, [r7, #28]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800c0d8:	e01f      	b.n	800c11a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	685a      	ldr	r2, [r3, #4]
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	68b9      	ldr	r1, [r7, #8]
 800c0ec:	6938      	ldr	r0, [r7, #16]
 800c0ee:	f001 feb8 	bl	800de62 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	4413      	add	r3, r2
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	4619      	mov	r1, r3
 800c10a:	6938      	ldr	r0, [r7, #16]
 800c10c:	f001 fea9 	bl	800de62 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c110:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	60da      	str	r2, [r3, #12]
}
 800c11a:	bf00      	nop
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800c122:	b480      	push	{r7}
 800c124:	b087      	sub	sp, #28
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d808      	bhi.n	800c150 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	1ad2      	subs	r2, r2, r3
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	4413      	add	r3, r2
 800c14a:	3b01      	subs	r3, #1
 800c14c:	617b      	str	r3, [r7, #20]
 800c14e:	e004      	b.n	800c15a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	3b01      	subs	r3, #1
 800c158:	617b      	str	r3, [r7, #20]
  }
  return r;
 800c15a:	697b      	ldr	r3, [r7, #20]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	371c      	adds	r7, #28
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08c      	sub	sp, #48	@ 0x30
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c174:	4b3e      	ldr	r3, [pc, #248]	@ (800c270 <SEGGER_RTT_ReadNoLock+0x108>)
 800c176:	623b      	str	r3, [r7, #32]
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <SEGGER_RTT_ReadNoLock+0x1e>
 800c182:	f7ff fed1 	bl	800bf28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	4613      	mov	r3, r2
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	4413      	add	r3, r2
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	3360      	adds	r3, #96	@ 0x60
 800c192:	4a37      	ldr	r2, [pc, #220]	@ (800c270 <SEGGER_RTT_ReadNoLock+0x108>)
 800c194:	4413      	add	r3, r2
 800c196:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c1ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d92b      	bls.n	800c20c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	689a      	ldr	r2, [r3, #8]
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	bf28      	it	cs
 800c1c6:	4613      	movcs	r3, r2
 800c1c8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d0:	4413      	add	r3, r2
 800c1d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	6939      	ldr	r1, [r7, #16]
 800c1d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c1da:	f001 fe42 	bl	800de62 <memcpy>
    NumBytesRead += NumBytesRem;
 800c1de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c1e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c1f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c204:	429a      	cmp	r2, r3
 800c206:	d101      	bne.n	800c20c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c208:	2300      	movs	r3, #0
 800c20a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c20c:	69ba      	ldr	r2, [r7, #24]
 800c20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4293      	cmp	r3, r2
 800c21a:	bf28      	it	cs
 800c21c:	4613      	movcs	r3, r2
 800c21e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d019      	beq.n	800c25a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	4413      	add	r3, r2
 800c22e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	6939      	ldr	r1, [r7, #16]
 800c234:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c236:	f001 fe14 	bl	800de62 <memcpy>
    NumBytesRead += NumBytesRem;
 800c23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	4413      	add	r3, r2
 800c240:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	4413      	add	r3, r2
 800c248:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	4413      	add	r3, r2
 800c258:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800c25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c264:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3730      	adds	r7, #48	@ 0x30
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20013438 	.word	0x20013438

0800c274 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c274:	b580      	push	{r7, lr}
 800c276:	b088      	sub	sp, #32
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	1c5a      	adds	r2, r3, #1
 800c288:	4613      	mov	r3, r2
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	4413      	add	r3, r2
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	4a1f      	ldr	r2, [pc, #124]	@ (800c310 <SEGGER_RTT_WriteNoLock+0x9c>)
 800c292:	4413      	add	r3, r2
 800c294:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d029      	beq.n	800c2f2 <SEGGER_RTT_WriteNoLock+0x7e>
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	d82e      	bhi.n	800c300 <SEGGER_RTT_WriteNoLock+0x8c>
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <SEGGER_RTT_WriteNoLock+0x38>
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d013      	beq.n	800c2d2 <SEGGER_RTT_WriteNoLock+0x5e>
 800c2aa:	e029      	b.n	800c300 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c2ac:	6978      	ldr	r0, [r7, #20]
 800c2ae:	f7ff ff38 	bl	800c122 <_GetAvailWriteSpace>
 800c2b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d202      	bcs.n	800c2c2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800c2c0:	e021      	b.n	800c306 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	69b9      	ldr	r1, [r7, #24]
 800c2ca:	6978      	ldr	r0, [r7, #20]
 800c2cc:	f7ff fee1 	bl	800c092 <_WriteNoCheck>
    break;
 800c2d0:	e019      	b.n	800c306 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c2d2:	6978      	ldr	r0, [r7, #20]
 800c2d4:	f7ff ff25 	bl	800c122 <_GetAvailWriteSpace>
 800c2d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	bf28      	it	cs
 800c2e2:	4613      	movcs	r3, r2
 800c2e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800c2e6:	69fa      	ldr	r2, [r7, #28]
 800c2e8:	69b9      	ldr	r1, [r7, #24]
 800c2ea:	6978      	ldr	r0, [r7, #20]
 800c2ec:	f7ff fed1 	bl	800c092 <_WriteNoCheck>
    break;
 800c2f0:	e009      	b.n	800c306 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	69b9      	ldr	r1, [r7, #24]
 800c2f6:	6978      	ldr	r0, [r7, #20]
 800c2f8:	f7ff fe6e 	bl	800bfd8 <_WriteBlocking>
 800c2fc:	61f8      	str	r0, [r7, #28]
    break;
 800c2fe:	e002      	b.n	800c306 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800c300:	2300      	movs	r3, #0
 800c302:	61fb      	str	r3, [r7, #28]
    break;
 800c304:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800c306:	69fb      	ldr	r3, [r7, #28]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3720      	adds	r7, #32
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20013438 	.word	0x20013438

0800c314 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c314:	b580      	push	{r7, lr}
 800c316:	b088      	sub	sp, #32
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800c320:	4b0e      	ldr	r3, [pc, #56]	@ (800c35c <SEGGER_RTT_Write+0x48>)
 800c322:	61fb      	str	r3, [r7, #28]
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <SEGGER_RTT_Write+0x1e>
 800c32e:	f7ff fdfb 	bl	800bf28 <_DoInit>
  SEGGER_RTT_LOCK();
 800c332:	f3ef 8311 	mrs	r3, BASEPRI
 800c336:	f04f 0120 	mov.w	r1, #32
 800c33a:	f381 8811 	msr	BASEPRI, r1
 800c33e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	68b9      	ldr	r1, [r7, #8]
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f7ff ff95 	bl	800c274 <SEGGER_RTT_WriteNoLock>
 800c34a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800c352:	697b      	ldr	r3, [r7, #20]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3720      	adds	r7, #32
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	20013438 	.word	0x20013438

0800c360 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
 800c36c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c36e:	4b3d      	ldr	r3, [pc, #244]	@ (800c464 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c370:	61bb      	str	r3, [r7, #24]
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	b2db      	uxtb	r3, r3
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c37c:	f7ff fdd4 	bl	800bf28 <_DoInit>
  SEGGER_RTT_LOCK();
 800c380:	f3ef 8311 	mrs	r3, BASEPRI
 800c384:	f04f 0120 	mov.w	r1, #32
 800c388:	f381 8811 	msr	BASEPRI, r1
 800c38c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c38e:	4b35      	ldr	r3, [pc, #212]	@ (800c464 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c390:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c396:	6939      	ldr	r1, [r7, #16]
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	4613      	mov	r3, r2
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	4413      	add	r3, r2
 800c3a2:	00db      	lsls	r3, r3, #3
 800c3a4:	440b      	add	r3, r1
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d008      	beq.n	800c3c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	69fa      	ldr	r2, [r7, #28]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	dbeb      	blt.n	800c396 <SEGGER_RTT_AllocUpBuffer+0x36>
 800c3be:	e000      	b.n	800c3c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c3c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	69fa      	ldr	r2, [r7, #28]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	da3f      	bge.n	800c44c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c3cc:	6939      	ldr	r1, [r7, #16]
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	1c5a      	adds	r2, r3, #1
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	4413      	add	r3, r2
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	440b      	add	r3, r1
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c3e0:	6939      	ldr	r1, [r7, #16]
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	4413      	add	r3, r2
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	440b      	add	r3, r1
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c3f6:	6939      	ldr	r1, [r7, #16]
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4413      	add	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	440b      	add	r3, r1
 800c404:	3320      	adds	r3, #32
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c40a:	6939      	ldr	r1, [r7, #16]
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	4613      	mov	r3, r2
 800c410:	005b      	lsls	r3, r3, #1
 800c412:	4413      	add	r3, r2
 800c414:	00db      	lsls	r3, r3, #3
 800c416:	440b      	add	r3, r1
 800c418:	3328      	adds	r3, #40	@ 0x28
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c41e:	6939      	ldr	r1, [r7, #16]
 800c420:	69fa      	ldr	r2, [r7, #28]
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	440b      	add	r3, r1
 800c42c:	3324      	adds	r3, #36	@ 0x24
 800c42e:	2200      	movs	r2, #0
 800c430:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c432:	6939      	ldr	r1, [r7, #16]
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	4613      	mov	r3, r2
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	4413      	add	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	440b      	add	r3, r1
 800c440:	332c      	adds	r3, #44	@ 0x2c
 800c442:	683a      	ldr	r2, [r7, #0]
 800c444:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c446:	f3bf 8f5f 	dmb	sy
 800c44a:	e002      	b.n	800c452 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c44c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c450:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c458:	69fb      	ldr	r3, [r7, #28]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3720      	adds	r7, #32
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20013438 	.word	0x20013438

0800c468 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c476:	4b33      	ldr	r3, [pc, #204]	@ (800c544 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800c478:	61bb      	str	r3, [r7, #24]
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b00      	cmp	r3, #0
 800c482:	d101      	bne.n	800c488 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c484:	f7ff fd50 	bl	800bf28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c488:	4b2e      	ldr	r3, [pc, #184]	@ (800c544 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800c48a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	695b      	ldr	r3, [r3, #20]
 800c490:	461a      	mov	r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	4293      	cmp	r3, r2
 800c496:	d24d      	bcs.n	800c534 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800c498:	f3ef 8311 	mrs	r3, BASEPRI
 800c49c:	f04f 0120 	mov.w	r1, #32
 800c4a0:	f381 8811 	msr	BASEPRI, r1
 800c4a4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d031      	beq.n	800c510 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800c4ac:	6979      	ldr	r1, [r7, #20]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	005b      	lsls	r3, r3, #1
 800c4b4:	4413      	add	r3, r2
 800c4b6:	00db      	lsls	r3, r3, #3
 800c4b8:	440b      	add	r3, r1
 800c4ba:	3360      	adds	r3, #96	@ 0x60
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800c4c0:	6979      	ldr	r1, [r7, #20]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	4413      	add	r3, r2
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	440b      	add	r3, r1
 800c4ce:	3364      	adds	r3, #100	@ 0x64
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800c4d4:	6979      	ldr	r1, [r7, #20]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4613      	mov	r3, r2
 800c4da:	005b      	lsls	r3, r3, #1
 800c4dc:	4413      	add	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	440b      	add	r3, r1
 800c4e2:	3368      	adds	r3, #104	@ 0x68
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800c4e8:	6979      	ldr	r1, [r7, #20]
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	005b      	lsls	r3, r3, #1
 800c4f0:	4413      	add	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	440b      	add	r3, r1
 800c4f6:	3370      	adds	r3, #112	@ 0x70
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800c4fc:	6979      	ldr	r1, [r7, #20]
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	4613      	mov	r3, r2
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	4413      	add	r3, r2
 800c506:	00db      	lsls	r3, r3, #3
 800c508:	440b      	add	r3, r1
 800c50a:	336c      	adds	r3, #108	@ 0x6c
 800c50c:	2200      	movs	r2, #0
 800c50e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800c510:	6979      	ldr	r1, [r7, #20]
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	4613      	mov	r3, r2
 800c516:	005b      	lsls	r3, r3, #1
 800c518:	4413      	add	r3, r2
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	440b      	add	r3, r1
 800c51e:	3374      	adds	r3, #116	@ 0x74
 800c520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c522:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c524:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c52e:	2300      	movs	r3, #0
 800c530:	61fb      	str	r3, [r7, #28]
 800c532:	e002      	b.n	800c53a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800c534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c538:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800c53a:	69fb      	ldr	r3, [r7, #28]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20013438 	.word	0x20013438

0800c548 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c548:	b480      	push	{r7}
 800c54a:	b087      	sub	sp, #28
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c558:	e002      	b.n	800c560 <_EncodeStr+0x18>
    Len++;
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	3301      	adds	r3, #1
 800c55e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	4413      	add	r3, r2
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1f6      	bne.n	800c55a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d901      	bls.n	800c578 <_EncodeStr+0x30>
    Len = Limit;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c57c:	d806      	bhi.n	800c58c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	60fa      	str	r2, [r7, #12]
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	b2d2      	uxtb	r2, r2
 800c588:	701a      	strb	r2, [r3, #0]
 800c58a:	e011      	b.n	800c5b0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	60fa      	str	r2, [r7, #12]
 800c592:	22ff      	movs	r2, #255	@ 0xff
 800c594:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	60fa      	str	r2, [r7, #12]
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	b2d2      	uxtb	r2, r2
 800c5a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	0a19      	lsrs	r1, r3, #8
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	60fa      	str	r2, [r7, #12]
 800c5ac:	b2ca      	uxtb	r2, r1
 800c5ae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c5b4:	e00a      	b.n	800c5cc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	1c53      	adds	r3, r2, #1
 800c5ba:	60bb      	str	r3, [r7, #8]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	1c59      	adds	r1, r3, #1
 800c5c0:	60f9      	str	r1, [r7, #12]
 800c5c2:	7812      	ldrb	r2, [r2, #0]
 800c5c4:	701a      	strb	r2, [r3, #0]
    n++;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d3f0      	bcc.n	800c5b6 <_EncodeStr+0x6e>
  }
  return pPayload;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	3304      	adds	r3, #4
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
	...

0800c5fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c602:	4b35      	ldr	r3, [pc, #212]	@ (800c6d8 <_HandleIncomingPacket+0xdc>)
 800c604:	7e1b      	ldrb	r3, [r3, #24]
 800c606:	4618      	mov	r0, r3
 800c608:	1cfb      	adds	r3, r7, #3
 800c60a:	2201      	movs	r2, #1
 800c60c:	4619      	mov	r1, r3
 800c60e:	f7ff fdab 	bl	800c168 <SEGGER_RTT_ReadNoLock>
 800c612:	4603      	mov	r3, r0
 800c614:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dd59      	ble.n	800c6d0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	2b80      	cmp	r3, #128	@ 0x80
 800c620:	d032      	beq.n	800c688 <_HandleIncomingPacket+0x8c>
 800c622:	2b80      	cmp	r3, #128	@ 0x80
 800c624:	dc42      	bgt.n	800c6ac <_HandleIncomingPacket+0xb0>
 800c626:	2b07      	cmp	r3, #7
 800c628:	dc16      	bgt.n	800c658 <_HandleIncomingPacket+0x5c>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	dd3e      	ble.n	800c6ac <_HandleIncomingPacket+0xb0>
 800c62e:	3b01      	subs	r3, #1
 800c630:	2b06      	cmp	r3, #6
 800c632:	d83b      	bhi.n	800c6ac <_HandleIncomingPacket+0xb0>
 800c634:	a201      	add	r2, pc, #4	@ (adr r2, 800c63c <_HandleIncomingPacket+0x40>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c65f 	.word	0x0800c65f
 800c640:	0800c665 	.word	0x0800c665
 800c644:	0800c66b 	.word	0x0800c66b
 800c648:	0800c671 	.word	0x0800c671
 800c64c:	0800c677 	.word	0x0800c677
 800c650:	0800c67d 	.word	0x0800c67d
 800c654:	0800c683 	.word	0x0800c683
 800c658:	2b7f      	cmp	r3, #127	@ 0x7f
 800c65a:	d034      	beq.n	800c6c6 <_HandleIncomingPacket+0xca>
 800c65c:	e026      	b.n	800c6ac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c65e:	f000 fba5 	bl	800cdac <SEGGER_SYSVIEW_Start>
      break;
 800c662:	e035      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c664:	f000 fc5c 	bl	800cf20 <SEGGER_SYSVIEW_Stop>
      break;
 800c668:	e032      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c66a:	f000 fe35 	bl	800d2d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c66e:	e02f      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c670:	f000 fdfa 	bl	800d268 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c674:	e02c      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c676:	f000 fc79 	bl	800cf6c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c67a:	e029      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c67c:	f001 f8c8 	bl	800d810 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c680:	e026      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c682:	f001 f8a7 	bl	800d7d4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c686:	e023      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c688:	4b13      	ldr	r3, [pc, #76]	@ (800c6d8 <_HandleIncomingPacket+0xdc>)
 800c68a:	7e1b      	ldrb	r3, [r3, #24]
 800c68c:	4618      	mov	r0, r3
 800c68e:	1cfb      	adds	r3, r7, #3
 800c690:	2201      	movs	r2, #1
 800c692:	4619      	mov	r1, r3
 800c694:	f7ff fd68 	bl	800c168 <SEGGER_RTT_ReadNoLock>
 800c698:	4603      	mov	r3, r0
 800c69a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	dd13      	ble.n	800c6ca <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c6a2:	78fb      	ldrb	r3, [r7, #3]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f001 f815 	bl	800d6d4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c6aa:	e00e      	b.n	800c6ca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c6ac:	78fb      	ldrb	r3, [r7, #3]
 800c6ae:	b25b      	sxtb	r3, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	da0c      	bge.n	800c6ce <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c6b4:	4b08      	ldr	r3, [pc, #32]	@ (800c6d8 <_HandleIncomingPacket+0xdc>)
 800c6b6:	7e1b      	ldrb	r3, [r3, #24]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	1cfb      	adds	r3, r7, #3
 800c6bc:	2201      	movs	r2, #1
 800c6be:	4619      	mov	r1, r3
 800c6c0:	f7ff fd52 	bl	800c168 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c6c4:	e003      	b.n	800c6ce <_HandleIncomingPacket+0xd2>
      break;
 800c6c6:	bf00      	nop
 800c6c8:	e002      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
      break;
 800c6ca:	bf00      	nop
 800c6cc:	e000      	b.n	800c6d0 <_HandleIncomingPacket+0xd4>
      break;
 800c6ce:	bf00      	nop
    }
  }
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	200148f8 	.word	0x200148f8

0800c6dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08c      	sub	sp, #48	@ 0x30
 800c6e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c6e6:	1d3b      	adds	r3, r7, #4
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6f0:	4b31      	ldr	r3, [pc, #196]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6f6:	e00b      	b.n	800c710 <_TrySendOverflowPacket+0x34>
 800c6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fe:	1c59      	adds	r1, r3, #1
 800c700:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c702:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70c:	09db      	lsrs	r3, r3, #7
 800c70e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c712:	2b7f      	cmp	r3, #127	@ 0x7f
 800c714:	d8f0      	bhi.n	800c6f8 <_TrySendOverflowPacket+0x1c>
 800c716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c71c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c71e:	b2d2      	uxtb	r2, r2
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c724:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c726:	4b25      	ldr	r3, [pc, #148]	@ (800c7bc <_TrySendOverflowPacket+0xe0>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c72c:	4b22      	ldr	r3, [pc, #136]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	69ba      	ldr	r2, [r7, #24]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	627b      	str	r3, [r7, #36]	@ 0x24
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	623b      	str	r3, [r7, #32]
 800c73e:	e00b      	b.n	800c758 <_TrySendOverflowPacket+0x7c>
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	b2da      	uxtb	r2, r3
 800c744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c746:	1c59      	adds	r1, r3, #1
 800c748:	6279      	str	r1, [r7, #36]	@ 0x24
 800c74a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	09db      	lsrs	r3, r3, #7
 800c756:	623b      	str	r3, [r7, #32]
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c75c:	d8f0      	bhi.n	800c740 <_TrySendOverflowPacket+0x64>
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	627a      	str	r2, [r7, #36]	@ 0x24
 800c764:	6a3a      	ldr	r2, [r7, #32]
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	701a      	strb	r2, [r3, #0]
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c76e:	4b12      	ldr	r3, [pc, #72]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c770:	785b      	ldrb	r3, [r3, #1]
 800c772:	4618      	mov	r0, r3
 800c774:	1d3b      	adds	r3, r7, #4
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	461a      	mov	r2, r3
 800c77c:	1d3b      	adds	r3, r7, #4
 800c77e:	4619      	mov	r1, r3
 800c780:	f7f3 fd46 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c784:	4603      	mov	r3, r0
 800c786:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d009      	beq.n	800c7a2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c78e:	4a0a      	ldr	r2, [pc, #40]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c794:	4b08      	ldr	r3, [pc, #32]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	3b01      	subs	r3, #1
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	4b06      	ldr	r3, [pc, #24]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c79e:	701a      	strb	r2, [r3, #0]
 800c7a0:	e004      	b.n	800c7ac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c7a2:	4b05      	ldr	r3, [pc, #20]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	4a03      	ldr	r2, [pc, #12]	@ (800c7b8 <_TrySendOverflowPacket+0xdc>)
 800c7aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c7ac:	693b      	ldr	r3, [r7, #16]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3730      	adds	r7, #48	@ 0x30
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	200148f8 	.word	0x200148f8
 800c7bc:	e0001004 	.word	0xe0001004

0800c7c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08a      	sub	sp, #40	@ 0x28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c7cc:	4b6c      	ldr	r3, [pc, #432]	@ (800c980 <_SendPacket+0x1c0>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d010      	beq.n	800c7f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c7d4:	4b6a      	ldr	r3, [pc, #424]	@ (800c980 <_SendPacket+0x1c0>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 80a3 	beq.w	800c924 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c7de:	4b68      	ldr	r3, [pc, #416]	@ (800c980 <_SendPacket+0x1c0>)
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d109      	bne.n	800c7fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c7e6:	f7ff ff79 	bl	800c6dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c7ea:	4b65      	ldr	r3, [pc, #404]	@ (800c980 <_SendPacket+0x1c0>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	f040 809a 	bne.w	800c928 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c7f4:	e001      	b.n	800c7fa <_SendPacket+0x3a>
    goto Send;
 800c7f6:	bf00      	nop
 800c7f8:	e000      	b.n	800c7fc <_SendPacket+0x3c>
Send:
 800c7fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b1f      	cmp	r3, #31
 800c800:	d809      	bhi.n	800c816 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c802:	4b5f      	ldr	r3, [pc, #380]	@ (800c980 <_SendPacket+0x1c0>)
 800c804:	69da      	ldr	r2, [r3, #28]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	fa22 f303 	lsr.w	r3, r2, r3
 800c80c:	f003 0301 	and.w	r3, r3, #1
 800c810:	2b00      	cmp	r3, #0
 800c812:	f040 808b 	bne.w	800c92c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b17      	cmp	r3, #23
 800c81a:	d807      	bhi.n	800c82c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3b01      	subs	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	b2da      	uxtb	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	701a      	strb	r2, [r3, #0]
 800c82a:	e03d      	b.n	800c8a8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2b7f      	cmp	r3, #127	@ 0x7f
 800c838:	d912      	bls.n	800c860 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	09da      	lsrs	r2, r3, #7
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3b01      	subs	r3, #1
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	b2d2      	uxtb	r2, r2
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	3a01      	subs	r2, #1
 800c852:	60fa      	str	r2, [r7, #12]
 800c854:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	701a      	strb	r2, [r3, #0]
 800c85e:	e006      	b.n	800c86e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3b01      	subs	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b7f      	cmp	r3, #127	@ 0x7f
 800c872:	d912      	bls.n	800c89a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	09da      	lsrs	r2, r3, #7
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	60fb      	str	r3, [r7, #12]
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	3a01      	subs	r2, #1
 800c88c:	60fa      	str	r2, [r7, #12]
 800c88e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c892:	b2da      	uxtb	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	e006      	b.n	800c8a8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c8a8:	4b36      	ldr	r3, [pc, #216]	@ (800c984 <_SendPacket+0x1c4>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c8ae:	4b34      	ldr	r3, [pc, #208]	@ (800c980 <_SendPacket+0x1c0>)
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	623b      	str	r3, [r7, #32]
 800c8c0:	e00b      	b.n	800c8da <_SendPacket+0x11a>
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c8:	1c59      	adds	r1, r3, #1
 800c8ca:	6279      	str	r1, [r7, #36]	@ 0x24
 800c8cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8d0:	b2d2      	uxtb	r2, r2
 800c8d2:	701a      	strb	r2, [r3, #0]
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	09db      	lsrs	r3, r3, #7
 800c8d8:	623b      	str	r3, [r7, #32]
 800c8da:	6a3b      	ldr	r3, [r7, #32]
 800c8dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8de:	d8f0      	bhi.n	800c8c2 <_SendPacket+0x102>
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8e6:	6a3a      	ldr	r2, [r7, #32]
 800c8e8:	b2d2      	uxtb	r2, r2
 800c8ea:	701a      	strb	r2, [r3, #0]
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ee:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c8f0:	4b23      	ldr	r3, [pc, #140]	@ (800c980 <_SendPacket+0x1c0>)
 800c8f2:	785b      	ldrb	r3, [r3, #1]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	1ad3      	subs	r3, r2, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	68f9      	ldr	r1, [r7, #12]
 800c900:	f7f3 fc86 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c904:	4603      	mov	r3, r0
 800c906:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c90e:	4a1c      	ldr	r2, [pc, #112]	@ (800c980 <_SendPacket+0x1c0>)
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	60d3      	str	r3, [r2, #12]
 800c914:	e00b      	b.n	800c92e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c916:	4b1a      	ldr	r3, [pc, #104]	@ (800c980 <_SendPacket+0x1c0>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	3301      	adds	r3, #1
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	4b18      	ldr	r3, [pc, #96]	@ (800c980 <_SendPacket+0x1c0>)
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	e004      	b.n	800c92e <_SendPacket+0x16e>
    goto SendDone;
 800c924:	bf00      	nop
 800c926:	e002      	b.n	800c92e <_SendPacket+0x16e>
      goto SendDone;
 800c928:	bf00      	nop
 800c92a:	e000      	b.n	800c92e <_SendPacket+0x16e>
      goto SendDone;
 800c92c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c92e:	4b14      	ldr	r3, [pc, #80]	@ (800c980 <_SendPacket+0x1c0>)
 800c930:	7e1b      	ldrb	r3, [r3, #24]
 800c932:	4619      	mov	r1, r3
 800c934:	4a14      	ldr	r2, [pc, #80]	@ (800c988 <_SendPacket+0x1c8>)
 800c936:	460b      	mov	r3, r1
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	440b      	add	r3, r1
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	4413      	add	r3, r2
 800c940:	336c      	adds	r3, #108	@ 0x6c
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	4b0e      	ldr	r3, [pc, #56]	@ (800c980 <_SendPacket+0x1c0>)
 800c946:	7e1b      	ldrb	r3, [r3, #24]
 800c948:	4618      	mov	r0, r3
 800c94a:	490f      	ldr	r1, [pc, #60]	@ (800c988 <_SendPacket+0x1c8>)
 800c94c:	4603      	mov	r3, r0
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4403      	add	r3, r0
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	440b      	add	r3, r1
 800c956:	3370      	adds	r3, #112	@ 0x70
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d00b      	beq.n	800c976 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c95e:	4b08      	ldr	r3, [pc, #32]	@ (800c980 <_SendPacket+0x1c0>)
 800c960:	789b      	ldrb	r3, [r3, #2]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d107      	bne.n	800c976 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c966:	4b06      	ldr	r3, [pc, #24]	@ (800c980 <_SendPacket+0x1c0>)
 800c968:	2201      	movs	r2, #1
 800c96a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c96c:	f7ff fe46 	bl	800c5fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c970:	4b03      	ldr	r3, [pc, #12]	@ (800c980 <_SendPacket+0x1c0>)
 800c972:	2200      	movs	r2, #0
 800c974:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c976:	bf00      	nop
 800c978:	3728      	adds	r7, #40	@ 0x28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	200148f8 	.word	0x200148f8
 800c984:	e0001004 	.word	0xe0001004
 800c988:	20013438 	.word	0x20013438

0800c98c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af02      	add	r7, sp, #8
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c99a:	2300      	movs	r3, #0
 800c99c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c9a0:	4917      	ldr	r1, [pc, #92]	@ (800ca00 <SEGGER_SYSVIEW_Init+0x74>)
 800c9a2:	4818      	ldr	r0, [pc, #96]	@ (800ca04 <SEGGER_SYSVIEW_Init+0x78>)
 800c9a4:	f7ff fcdc 	bl	800c360 <SEGGER_RTT_AllocUpBuffer>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	b2da      	uxtb	r2, r3
 800c9ac:	4b16      	ldr	r3, [pc, #88]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c9b0:	4b15      	ldr	r3, [pc, #84]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9b2:	785a      	ldrb	r2, [r3, #1]
 800c9b4:	4b14      	ldr	r3, [pc, #80]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9b6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c9b8:	4b13      	ldr	r3, [pc, #76]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ba:	7e1b      	ldrb	r3, [r3, #24]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	4a11      	ldr	r2, [pc, #68]	@ (800ca0c <SEGGER_SYSVIEW_Init+0x80>)
 800c9c6:	490f      	ldr	r1, [pc, #60]	@ (800ca04 <SEGGER_SYSVIEW_Init+0x78>)
 800c9c8:	f7ff fd4e 	bl	800c468 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c9cc:	4b0e      	ldr	r3, [pc, #56]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800ca10 <SEGGER_SYSVIEW_Init+0x84>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a0c      	ldr	r2, [pc, #48]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9d8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c9da:	4a0b      	ldr	r2, [pc, #44]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c9e0:	4a09      	ldr	r2, [pc, #36]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c9e6:	4a08      	ldr	r2, [pc, #32]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c9ec:	4a06      	ldr	r2, [pc, #24]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c9f2:	4b05      	ldr	r3, [pc, #20]	@ (800ca08 <SEGGER_SYSVIEW_Init+0x7c>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	200138f0 	.word	0x200138f0
 800ca04:	0800ef34 	.word	0x0800ef34
 800ca08:	200148f8 	.word	0x200148f8
 800ca0c:	200148f0 	.word	0x200148f0
 800ca10:	e0001004 	.word	0xe0001004

0800ca14 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800ca1c:	4a04      	ldr	r2, [pc, #16]	@ (800ca30 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6113      	str	r3, [r2, #16]
}
 800ca22:	bf00      	nop
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	200148f8 	.word	0x200148f8

0800ca34 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ca3c:	f3ef 8311 	mrs	r3, BASEPRI
 800ca40:	f04f 0120 	mov.w	r1, #32
 800ca44:	f381 8811 	msr	BASEPRI, r1
 800ca48:	60fb      	str	r3, [r7, #12]
 800ca4a:	4808      	ldr	r0, [pc, #32]	@ (800ca6c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800ca4c:	f7ff fdc9 	bl	800c5e2 <_PreparePacket>
 800ca50:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	68b9      	ldr	r1, [r7, #8]
 800ca56:	68b8      	ldr	r0, [r7, #8]
 800ca58:	f7ff feb2 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f383 8811 	msr	BASEPRI, r3
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20014928 	.word	0x20014928

0800ca70 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ca7e:	f04f 0120 	mov.w	r1, #32
 800ca82:	f381 8811 	msr	BASEPRI, r1
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	4816      	ldr	r0, [pc, #88]	@ (800cae4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ca8a:	f7ff fdaa 	bl	800c5e2 <_PreparePacket>
 800ca8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	61fb      	str	r3, [r7, #28]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	61bb      	str	r3, [r7, #24]
 800ca9c:	e00b      	b.n	800cab6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	1c59      	adds	r1, r3, #1
 800caa6:	61f9      	str	r1, [r7, #28]
 800caa8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	09db      	lsrs	r3, r3, #7
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b7f      	cmp	r3, #127	@ 0x7f
 800caba:	d8f0      	bhi.n	800ca9e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	61fa      	str	r2, [r7, #28]
 800cac2:	69ba      	ldr	r2, [r7, #24]
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	68f9      	ldr	r1, [r7, #12]
 800cad0:	6938      	ldr	r0, [r7, #16]
 800cad2:	f7ff fe75 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f383 8811 	msr	BASEPRI, r3
}
 800cadc:	bf00      	nop
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	20014928 	.word	0x20014928

0800cae8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800cae8:	b580      	push	{r7, lr}
 800caea:	b08c      	sub	sp, #48	@ 0x30
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800caf4:	f3ef 8311 	mrs	r3, BASEPRI
 800caf8:	f04f 0120 	mov.w	r1, #32
 800cafc:	f381 8811 	msr	BASEPRI, r1
 800cb00:	61fb      	str	r3, [r7, #28]
 800cb02:	4825      	ldr	r0, [pc, #148]	@ (800cb98 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800cb04:	f7ff fd6d 	bl	800c5e2 <_PreparePacket>
 800cb08:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cb0a:	69bb      	ldr	r3, [r7, #24]
 800cb0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb16:	e00b      	b.n	800cb30 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1a:	b2da      	uxtb	r2, r3
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	1c59      	adds	r1, r3, #1
 800cb20:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cb22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
 800cb2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2c:	09db      	lsrs	r3, r3, #7
 800cb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb32:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb34:	d8f0      	bhi.n	800cb18 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800cb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb38:	1c5a      	adds	r2, r3, #1
 800cb3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb44:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	623b      	str	r3, [r7, #32]
 800cb4e:	e00b      	b.n	800cb68 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb56:	1c59      	adds	r1, r3, #1
 800cb58:	6279      	str	r1, [r7, #36]	@ 0x24
 800cb5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb5e:	b2d2      	uxtb	r2, r2
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	09db      	lsrs	r3, r3, #7
 800cb66:	623b      	str	r3, [r7, #32]
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb6c:	d8f0      	bhi.n	800cb50 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb74:	6a3a      	ldr	r2, [r7, #32]
 800cb76:	b2d2      	uxtb	r2, r2
 800cb78:	701a      	strb	r2, [r3, #0]
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	6979      	ldr	r1, [r7, #20]
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f7ff fe1c 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	f383 8811 	msr	BASEPRI, r3
}
 800cb8e:	bf00      	nop
 800cb90:	3730      	adds	r7, #48	@ 0x30
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20014928 	.word	0x20014928

0800cb9c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08e      	sub	sp, #56	@ 0x38
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800cbaa:	f3ef 8311 	mrs	r3, BASEPRI
 800cbae:	f04f 0120 	mov.w	r1, #32
 800cbb2:	f381 8811 	msr	BASEPRI, r1
 800cbb6:	61fb      	str	r3, [r7, #28]
 800cbb8:	4832      	ldr	r0, [pc, #200]	@ (800cc84 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800cbba:	f7ff fd12 	bl	800c5e2 <_PreparePacket>
 800cbbe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbcc:	e00b      	b.n	800cbe6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd4:	1c59      	adds	r1, r3, #1
 800cbd6:	6379      	str	r1, [r7, #52]	@ 0x34
 800cbd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbdc:	b2d2      	uxtb	r2, r2
 800cbde:	701a      	strb	r2, [r3, #0]
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe2:	09db      	lsrs	r3, r3, #7
 800cbe4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbea:	d8f0      	bhi.n	800cbce <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cbec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	637a      	str	r2, [r7, #52]	@ 0x34
 800cbf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbf4:	b2d2      	uxtb	r2, r2
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc04:	e00b      	b.n	800cc1e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0c:	1c59      	adds	r1, r3, #1
 800cc0e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cc10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc14:	b2d2      	uxtb	r2, r2
 800cc16:	701a      	strb	r2, [r3, #0]
 800cc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1a:	09db      	lsrs	r3, r3, #7
 800cc1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc20:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc22:	d8f0      	bhi.n	800cc06 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc2c:	b2d2      	uxtb	r2, r2
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	623b      	str	r3, [r7, #32]
 800cc3c:	e00b      	b.n	800cc56 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cc3e:	6a3b      	ldr	r3, [r7, #32]
 800cc40:	b2da      	uxtb	r2, r3
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	6279      	str	r1, [r7, #36]	@ 0x24
 800cc48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc4c:	b2d2      	uxtb	r2, r2
 800cc4e:	701a      	strb	r2, [r3, #0]
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	09db      	lsrs	r3, r3, #7
 800cc54:	623b      	str	r3, [r7, #32]
 800cc56:	6a3b      	ldr	r3, [r7, #32]
 800cc58:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc5a:	d8f0      	bhi.n	800cc3e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc62:	6a3a      	ldr	r2, [r7, #32]
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc6a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	6979      	ldr	r1, [r7, #20]
 800cc70:	69b8      	ldr	r0, [r7, #24]
 800cc72:	f7ff fda5 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	f383 8811 	msr	BASEPRI, r3
}
 800cc7c:	bf00      	nop
 800cc7e:	3738      	adds	r7, #56	@ 0x38
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	20014928 	.word	0x20014928

0800cc88 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b090      	sub	sp, #64	@ 0x40
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cc96:	f3ef 8311 	mrs	r3, BASEPRI
 800cc9a:	f04f 0120 	mov.w	r1, #32
 800cc9e:	f381 8811 	msr	BASEPRI, r1
 800cca2:	61fb      	str	r3, [r7, #28]
 800cca4:	4840      	ldr	r0, [pc, #256]	@ (800cda8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800cca6:	f7ff fc9c 	bl	800c5e2 <_PreparePacket>
 800ccaa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ccb8:	e00b      	b.n	800ccd2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccc0:	1c59      	adds	r1, r3, #1
 800ccc2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800ccc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	09db      	lsrs	r3, r3, #7
 800ccd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd4:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccd6:	d8f0      	bhi.n	800ccba <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ccde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cce0:	b2d2      	uxtb	r2, r2
 800cce2:	701a      	strb	r2, [r3, #0]
 800cce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cce6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccf0:	e00b      	b.n	800cd0a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccf8:	1c59      	adds	r1, r3, #1
 800ccfa:	6379      	str	r1, [r7, #52]	@ 0x34
 800ccfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd00:	b2d2      	uxtb	r2, r2
 800cd02:	701a      	strb	r2, [r3, #0]
 800cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd06:	09db      	lsrs	r3, r3, #7
 800cd08:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd0e:	d8f0      	bhi.n	800ccf2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800cd10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	637a      	str	r2, [r7, #52]	@ 0x34
 800cd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	701a      	strb	r2, [r3, #0]
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd28:	e00b      	b.n	800cd42 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800cd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2c:	b2da      	uxtb	r2, r3
 800cd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd30:	1c59      	adds	r1, r3, #1
 800cd32:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cd34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd38:	b2d2      	uxtb	r2, r2
 800cd3a:	701a      	strb	r2, [r3, #0]
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	09db      	lsrs	r3, r3, #7
 800cd40:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd46:	d8f0      	bhi.n	800cd2a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd50:	b2d2      	uxtb	r2, r2
 800cd52:	701a      	strb	r2, [r3, #0]
 800cd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd5e:	623b      	str	r3, [r7, #32]
 800cd60:	e00b      	b.n	800cd7a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd68:	1c59      	adds	r1, r3, #1
 800cd6a:	6279      	str	r1, [r7, #36]	@ 0x24
 800cd6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	09db      	lsrs	r3, r3, #7
 800cd78:	623b      	str	r3, [r7, #32]
 800cd7a:	6a3b      	ldr	r3, [r7, #32]
 800cd7c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd7e:	d8f0      	bhi.n	800cd62 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800cd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd86:	6a3a      	ldr	r2, [r7, #32]
 800cd88:	b2d2      	uxtb	r2, r2
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	6979      	ldr	r1, [r7, #20]
 800cd94:	69b8      	ldr	r0, [r7, #24]
 800cd96:	f7ff fd13 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	f383 8811 	msr	BASEPRI, r3
}
 800cda0:	bf00      	nop
 800cda2:	3740      	adds	r7, #64	@ 0x40
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20014928 	.word	0x20014928

0800cdac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08c      	sub	sp, #48	@ 0x30
 800cdb0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800cdb2:	4b58      	ldr	r3, [pc, #352]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800cdb8:	f3ef 8311 	mrs	r3, BASEPRI
 800cdbc:	f04f 0120 	mov.w	r1, #32
 800cdc0:	f381 8811 	msr	BASEPRI, r1
 800cdc4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800cdc6:	4b53      	ldr	r3, [pc, #332]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cdc8:	785b      	ldrb	r3, [r3, #1]
 800cdca:	220a      	movs	r2, #10
 800cdcc:	4952      	ldr	r1, [pc, #328]	@ (800cf18 <SEGGER_SYSVIEW_Start+0x16c>)
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f3 fa1e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800cdda:	200a      	movs	r0, #10
 800cddc:	f7ff fe2a 	bl	800ca34 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cde0:	f3ef 8311 	mrs	r3, BASEPRI
 800cde4:	f04f 0120 	mov.w	r1, #32
 800cde8:	f381 8811 	msr	BASEPRI, r1
 800cdec:	60bb      	str	r3, [r7, #8]
 800cdee:	484b      	ldr	r0, [pc, #300]	@ (800cf1c <SEGGER_SYSVIEW_Start+0x170>)
 800cdf0:	f7ff fbf7 	bl	800c5e2 <_PreparePacket>
 800cdf4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdfe:	4b45      	ldr	r3, [pc, #276]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce04:	e00b      	b.n	800ce1e <SEGGER_SYSVIEW_Start+0x72>
 800ce06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0c:	1c59      	adds	r1, r3, #1
 800ce0e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ce10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce14:	b2d2      	uxtb	r2, r2
 800ce16:	701a      	strb	r2, [r3, #0]
 800ce18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1a:	09db      	lsrs	r3, r3, #7
 800ce1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce20:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce22:	d8f0      	bhi.n	800ce06 <SEGGER_SYSVIEW_Start+0x5a>
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce2c:	b2d2      	uxtb	r2, r2
 800ce2e:	701a      	strb	r2, [r3, #0]
 800ce30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce32:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce38:	4b36      	ldr	r3, [pc, #216]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	623b      	str	r3, [r7, #32]
 800ce3e:	e00b      	b.n	800ce58 <SEGGER_SYSVIEW_Start+0xac>
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	1c59      	adds	r1, r3, #1
 800ce48:	6279      	str	r1, [r7, #36]	@ 0x24
 800ce4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce4e:	b2d2      	uxtb	r2, r2
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	09db      	lsrs	r3, r3, #7
 800ce56:	623b      	str	r3, [r7, #32]
 800ce58:	6a3b      	ldr	r3, [r7, #32]
 800ce5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce5c:	d8f0      	bhi.n	800ce40 <SEGGER_SYSVIEW_Start+0x94>
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce64:	6a3a      	ldr	r2, [r7, #32]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	4b28      	ldr	r3, [pc, #160]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	61bb      	str	r3, [r7, #24]
 800ce78:	e00b      	b.n	800ce92 <SEGGER_SYSVIEW_Start+0xe6>
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	1c59      	adds	r1, r3, #1
 800ce82:	61f9      	str	r1, [r7, #28]
 800ce84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce88:	b2d2      	uxtb	r2, r2
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	09db      	lsrs	r3, r3, #7
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce96:	d8f0      	bhi.n	800ce7a <SEGGER_SYSVIEW_Start+0xce>
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	1c5a      	adds	r2, r3, #1
 800ce9c:	61fa      	str	r2, [r7, #28]
 800ce9e:	69ba      	ldr	r2, [r7, #24]
 800cea0:	b2d2      	uxtb	r2, r2
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	2300      	movs	r3, #0
 800ceae:	613b      	str	r3, [r7, #16]
 800ceb0:	e00b      	b.n	800ceca <SEGGER_SYSVIEW_Start+0x11e>
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	1c59      	adds	r1, r3, #1
 800ceba:	6179      	str	r1, [r7, #20]
 800cebc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cec0:	b2d2      	uxtb	r2, r2
 800cec2:	701a      	strb	r2, [r3, #0]
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	09db      	lsrs	r3, r3, #7
 800cec8:	613b      	str	r3, [r7, #16]
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	2b7f      	cmp	r3, #127	@ 0x7f
 800cece:	d8f0      	bhi.n	800ceb2 <SEGGER_SYSVIEW_Start+0x106>
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	617a      	str	r2, [r7, #20]
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	b2d2      	uxtb	r2, r2
 800ceda:	701a      	strb	r2, [r3, #0]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cee0:	2218      	movs	r2, #24
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff fc6b 	bl	800c7c0 <_SendPacket>
      RECORD_END();
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cef0:	4b08      	ldr	r3, [pc, #32]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800cef8:	4b06      	ldr	r3, [pc, #24]	@ (800cf14 <SEGGER_SYSVIEW_Start+0x168>)
 800cefa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800cefe:	f000 f9eb 	bl	800d2d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800cf02:	f000 f9b1 	bl	800d268 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cf06:	f000 fc83 	bl	800d810 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800cf0a:	bf00      	nop
 800cf0c:	3730      	adds	r7, #48	@ 0x30
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	200148f8 	.word	0x200148f8
 800cf18:	0800efa4 	.word	0x0800efa4
 800cf1c:	20014928 	.word	0x20014928

0800cf20 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cf26:	f3ef 8311 	mrs	r3, BASEPRI
 800cf2a:	f04f 0120 	mov.w	r1, #32
 800cf2e:	f381 8811 	msr	BASEPRI, r1
 800cf32:	607b      	str	r3, [r7, #4]
 800cf34:	480b      	ldr	r0, [pc, #44]	@ (800cf64 <SEGGER_SYSVIEW_Stop+0x44>)
 800cf36:	f7ff fb54 	bl	800c5e2 <_PreparePacket>
 800cf3a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf68 <SEGGER_SYSVIEW_Stop+0x48>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d007      	beq.n	800cf54 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cf44:	220b      	movs	r2, #11
 800cf46:	6839      	ldr	r1, [r7, #0]
 800cf48:	6838      	ldr	r0, [r7, #0]
 800cf4a:	f7ff fc39 	bl	800c7c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cf4e:	4b06      	ldr	r3, [pc, #24]	@ (800cf68 <SEGGER_SYSVIEW_Stop+0x48>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f383 8811 	msr	BASEPRI, r3
}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20014928 	.word	0x20014928
 800cf68:	200148f8 	.word	0x200148f8

0800cf6c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08c      	sub	sp, #48	@ 0x30
 800cf70:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf72:	f3ef 8311 	mrs	r3, BASEPRI
 800cf76:	f04f 0120 	mov.w	r1, #32
 800cf7a:	f381 8811 	msr	BASEPRI, r1
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	4845      	ldr	r0, [pc, #276]	@ (800d098 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cf82:	f7ff fb2e 	bl	800c5e2 <_PreparePacket>
 800cf86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf90:	4b42      	ldr	r3, [pc, #264]	@ (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf96:	e00b      	b.n	800cfb0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cf98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cfa2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cfa6:	b2d2      	uxtb	r2, r2
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfac:	09db      	lsrs	r3, r3, #7
 800cfae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfb4:	d8f0      	bhi.n	800cf98 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb8:	1c5a      	adds	r2, r3, #1
 800cfba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfbe:	b2d2      	uxtb	r2, r2
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfca:	4b34      	ldr	r3, [pc, #208]	@ (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	623b      	str	r3, [r7, #32]
 800cfd0:	e00b      	b.n	800cfea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cfd2:	6a3b      	ldr	r3, [r7, #32]
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	1c59      	adds	r1, r3, #1
 800cfda:	6279      	str	r1, [r7, #36]	@ 0x24
 800cfdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cfe0:	b2d2      	uxtb	r2, r2
 800cfe2:	701a      	strb	r2, [r3, #0]
 800cfe4:	6a3b      	ldr	r3, [r7, #32]
 800cfe6:	09db      	lsrs	r3, r3, #7
 800cfe8:	623b      	str	r3, [r7, #32]
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfee:	d8f0      	bhi.n	800cfd2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	627a      	str	r2, [r7, #36]	@ 0x24
 800cff6:	6a3a      	ldr	r2, [r7, #32]
 800cff8:	b2d2      	uxtb	r2, r2
 800cffa:	701a      	strb	r2, [r3, #0]
 800cffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	61fb      	str	r3, [r7, #28]
 800d004:	4b25      	ldr	r3, [pc, #148]	@ (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	61bb      	str	r3, [r7, #24]
 800d00a:	e00b      	b.n	800d024 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	1c59      	adds	r1, r3, #1
 800d014:	61f9      	str	r1, [r7, #28]
 800d016:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d01a:	b2d2      	uxtb	r2, r2
 800d01c:	701a      	strb	r2, [r3, #0]
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	09db      	lsrs	r3, r3, #7
 800d022:	61bb      	str	r3, [r7, #24]
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	2b7f      	cmp	r3, #127	@ 0x7f
 800d028:	d8f0      	bhi.n	800d00c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	61fa      	str	r2, [r7, #28]
 800d030:	69ba      	ldr	r2, [r7, #24]
 800d032:	b2d2      	uxtb	r2, r2
 800d034:	701a      	strb	r2, [r3, #0]
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	2300      	movs	r3, #0
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	e00b      	b.n	800d05c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	b2da      	uxtb	r2, r3
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	1c59      	adds	r1, r3, #1
 800d04c:	6179      	str	r1, [r7, #20]
 800d04e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d052:	b2d2      	uxtb	r2, r2
 800d054:	701a      	strb	r2, [r3, #0]
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	09db      	lsrs	r3, r3, #7
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d060:	d8f0      	bhi.n	800d044 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	617a      	str	r2, [r7, #20]
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	b2d2      	uxtb	r2, r2
 800d06c:	701a      	strb	r2, [r3, #0]
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d072:	2218      	movs	r2, #24
 800d074:	6879      	ldr	r1, [r7, #4]
 800d076:	68b8      	ldr	r0, [r7, #8]
 800d078:	f7ff fba2 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d082:	4b06      	ldr	r3, [pc, #24]	@ (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d08a:	4b04      	ldr	r3, [pc, #16]	@ (800d09c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08e:	4798      	blx	r3
  }
}
 800d090:	bf00      	nop
 800d092:	3730      	adds	r7, #48	@ 0x30
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20014928 	.word	0x20014928
 800d09c:	200148f8 	.word	0x200148f8

0800d0a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b092      	sub	sp, #72	@ 0x48
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d0a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ac:	f04f 0120 	mov.w	r1, #32
 800d0b0:	f381 8811 	msr	BASEPRI, r1
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	486a      	ldr	r0, [pc, #424]	@ (800d260 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d0b8:	f7ff fa93 	bl	800c5e2 <_PreparePacket>
 800d0bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	4b66      	ldr	r3, [pc, #408]	@ (800d264 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0d2:	e00b      	b.n	800d0ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d0d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0d6:	b2da      	uxtb	r2, r3
 800d0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0da:	1c59      	adds	r1, r3, #1
 800d0dc:	6479      	str	r1, [r7, #68]	@ 0x44
 800d0de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d0e2:	b2d2      	uxtb	r2, r2
 800d0e4:	701a      	strb	r2, [r3, #0]
 800d0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0e8:	09db      	lsrs	r3, r3, #7
 800d0ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0f0:	d8f0      	bhi.n	800d0d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d0f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0f4:	1c5a      	adds	r2, r3, #1
 800d0f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0fa:	b2d2      	uxtb	r2, r2
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d100:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d10c:	e00b      	b.n	800d126 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d110:	b2da      	uxtb	r2, r3
 800d112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d114:	1c59      	adds	r1, r3, #1
 800d116:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d118:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d11c:	b2d2      	uxtb	r2, r2
 800d11e:	701a      	strb	r2, [r3, #0]
 800d120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d122:	09db      	lsrs	r3, r3, #7
 800d124:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d128:	2b7f      	cmp	r3, #127	@ 0x7f
 800d12a:	d8f0      	bhi.n	800d10e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d134:	b2d2      	uxtb	r2, r2
 800d136:	701a      	strb	r2, [r3, #0]
 800d138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d13a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	2220      	movs	r2, #32
 800d142:	4619      	mov	r1, r3
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff f9ff 	bl	800c548 <_EncodeStr>
 800d14a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d14c:	2209      	movs	r2, #9
 800d14e:	68f9      	ldr	r1, [r7, #12]
 800d150:	6938      	ldr	r0, [r7, #16]
 800d152:	f7ff fb35 	bl	800c7c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	4b40      	ldr	r3, [pc, #256]	@ (800d264 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	633b      	str	r3, [r7, #48]	@ 0x30
 800d16a:	e00b      	b.n	800d184 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d172:	1c59      	adds	r1, r3, #1
 800d174:	6379      	str	r1, [r7, #52]	@ 0x34
 800d176:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d17a:	b2d2      	uxtb	r2, r2
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d180:	09db      	lsrs	r3, r3, #7
 800d182:	633b      	str	r3, [r7, #48]	@ 0x30
 800d184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d186:	2b7f      	cmp	r3, #127	@ 0x7f
 800d188:	d8f0      	bhi.n	800d16c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d18c:	1c5a      	adds	r2, r3, #1
 800d18e:	637a      	str	r2, [r7, #52]	@ 0x34
 800d190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d192:	b2d2      	uxtb	r2, r2
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d198:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1a4:	e00b      	b.n	800d1be <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ac:	1c59      	adds	r1, r3, #1
 800d1ae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d1b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1b4:	b2d2      	uxtb	r2, r2
 800d1b6:	701a      	strb	r2, [r3, #0]
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	09db      	lsrs	r3, r3, #7
 800d1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1c2:	d8f0      	bhi.n	800d1a6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1cc:	b2d2      	uxtb	r2, r2
 800d1ce:	701a      	strb	r2, [r3, #0]
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	623b      	str	r3, [r7, #32]
 800d1de:	e00b      	b.n	800d1f8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	1c59      	adds	r1, r3, #1
 800d1e8:	6279      	str	r1, [r7, #36]	@ 0x24
 800d1ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1ee:	b2d2      	uxtb	r2, r2
 800d1f0:	701a      	strb	r2, [r3, #0]
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	09db      	lsrs	r3, r3, #7
 800d1f6:	623b      	str	r3, [r7, #32]
 800d1f8:	6a3b      	ldr	r3, [r7, #32]
 800d1fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1fc:	d8f0      	bhi.n	800d1e0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	627a      	str	r2, [r7, #36]	@ 0x24
 800d204:	6a3a      	ldr	r2, [r7, #32]
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	2300      	movs	r3, #0
 800d214:	61bb      	str	r3, [r7, #24]
 800d216:	e00b      	b.n	800d230 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	1c59      	adds	r1, r3, #1
 800d220:	61f9      	str	r1, [r7, #28]
 800d222:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	09db      	lsrs	r3, r3, #7
 800d22e:	61bb      	str	r3, [r7, #24]
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	2b7f      	cmp	r3, #127	@ 0x7f
 800d234:	d8f0      	bhi.n	800d218 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	61fa      	str	r2, [r7, #28]
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	b2d2      	uxtb	r2, r2
 800d240:	701a      	strb	r2, [r3, #0]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d246:	2215      	movs	r2, #21
 800d248:	68f9      	ldr	r1, [r7, #12]
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f7ff fab8 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	f383 8811 	msr	BASEPRI, r3
}
 800d256:	bf00      	nop
 800d258:	3748      	adds	r7, #72	@ 0x48
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20014928 	.word	0x20014928
 800d264:	200148f8 	.word	0x200148f8

0800d268 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d26c:	4b07      	ldr	r3, [pc, #28]	@ (800d28c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d008      	beq.n	800d286 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d274:	4b05      	ldr	r3, [pc, #20]	@ (800d28c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d003      	beq.n	800d286 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d27e:	4b03      	ldr	r3, [pc, #12]	@ (800d28c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	4798      	blx	r3
  }
}
 800d286:	bf00      	nop
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	200148f8 	.word	0x200148f8

0800d290 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d298:	f3ef 8311 	mrs	r3, BASEPRI
 800d29c:	f04f 0120 	mov.w	r1, #32
 800d2a0:	f381 8811 	msr	BASEPRI, r1
 800d2a4:	617b      	str	r3, [r7, #20]
 800d2a6:	480b      	ldr	r0, [pc, #44]	@ (800d2d4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d2a8:	f7ff f99b 	bl	800c5e2 <_PreparePacket>
 800d2ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d2ae:	2280      	movs	r2, #128	@ 0x80
 800d2b0:	6879      	ldr	r1, [r7, #4]
 800d2b2:	6938      	ldr	r0, [r7, #16]
 800d2b4:	f7ff f948 	bl	800c548 <_EncodeStr>
 800d2b8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d2ba:	220e      	movs	r2, #14
 800d2bc:	68f9      	ldr	r1, [r7, #12]
 800d2be:	6938      	ldr	r0, [r7, #16]
 800d2c0:	f7ff fa7e 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f383 8811 	msr	BASEPRI, r3
}
 800d2ca:	bf00      	nop
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20014928 	.word	0x20014928

0800d2d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d2d8:	b590      	push	{r4, r7, lr}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d2de:	4b15      	ldr	r3, [pc, #84]	@ (800d334 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d01a      	beq.n	800d31c <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d2e6:	4b13      	ldr	r3, [pc, #76]	@ (800d334 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d015      	beq.n	800d31c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d2f0:	4b10      	ldr	r3, [pc, #64]	@ (800d334 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d2f2:	6a1b      	ldr	r3, [r3, #32]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4798      	blx	r3
 800d2f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d2fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d2fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d302:	f04f 0200 	mov.w	r2, #0
 800d306:	f04f 0300 	mov.w	r3, #0
 800d30a:	000a      	movs	r2, r1
 800d30c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d30e:	4613      	mov	r3, r2
 800d310:	461a      	mov	r2, r3
 800d312:	4621      	mov	r1, r4
 800d314:	200d      	movs	r0, #13
 800d316:	f7ff fbe7 	bl	800cae8 <SEGGER_SYSVIEW_RecordU32x2>
 800d31a:	e006      	b.n	800d32a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d31c:	4b06      	ldr	r3, [pc, #24]	@ (800d338 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4619      	mov	r1, r3
 800d322:	200c      	movs	r0, #12
 800d324:	f7ff fba4 	bl	800ca70 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d328:	bf00      	nop
 800d32a:	bf00      	nop
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd90      	pop	{r4, r7, pc}
 800d332:	bf00      	nop
 800d334:	200148f8 	.word	0x200148f8
 800d338:	e0001004 	.word	0xe0001004

0800d33c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d342:	f3ef 8311 	mrs	r3, BASEPRI
 800d346:	f04f 0120 	mov.w	r1, #32
 800d34a:	f381 8811 	msr	BASEPRI, r1
 800d34e:	60fb      	str	r3, [r7, #12]
 800d350:	4819      	ldr	r0, [pc, #100]	@ (800d3b8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d352:	f7ff f946 	bl	800c5e2 <_PreparePacket>
 800d356:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d35c:	4b17      	ldr	r3, [pc, #92]	@ (800d3bc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d364:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	617b      	str	r3, [r7, #20]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	613b      	str	r3, [r7, #16]
 800d36e:	e00b      	b.n	800d388 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	b2da      	uxtb	r2, r3
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	1c59      	adds	r1, r3, #1
 800d378:	6179      	str	r1, [r7, #20]
 800d37a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d37e:	b2d2      	uxtb	r2, r2
 800d380:	701a      	strb	r2, [r3, #0]
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	09db      	lsrs	r3, r3, #7
 800d386:	613b      	str	r3, [r7, #16]
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d38c:	d8f0      	bhi.n	800d370 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	617a      	str	r2, [r7, #20]
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	b2d2      	uxtb	r2, r2
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d39e:	2202      	movs	r2, #2
 800d3a0:	6879      	ldr	r1, [r7, #4]
 800d3a2:	68b8      	ldr	r0, [r7, #8]
 800d3a4:	f7ff fa0c 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f383 8811 	msr	BASEPRI, r3
}
 800d3ae:	bf00      	nop
 800d3b0:	3718      	adds	r7, #24
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20014928 	.word	0x20014928
 800d3bc:	e000ed04 	.word	0xe000ed04

0800d3c0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3c6:	f3ef 8311 	mrs	r3, BASEPRI
 800d3ca:	f04f 0120 	mov.w	r1, #32
 800d3ce:	f381 8811 	msr	BASEPRI, r1
 800d3d2:	607b      	str	r3, [r7, #4]
 800d3d4:	4807      	ldr	r0, [pc, #28]	@ (800d3f4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d3d6:	f7ff f904 	bl	800c5e2 <_PreparePacket>
 800d3da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d3dc:	2203      	movs	r2, #3
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6838      	ldr	r0, [r7, #0]
 800d3e2:	f7ff f9ed 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f383 8811 	msr	BASEPRI, r3
}
 800d3ec:	bf00      	nop
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	20014928 	.word	0x20014928

0800d3f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3fe:	f3ef 8311 	mrs	r3, BASEPRI
 800d402:	f04f 0120 	mov.w	r1, #32
 800d406:	f381 8811 	msr	BASEPRI, r1
 800d40a:	607b      	str	r3, [r7, #4]
 800d40c:	4807      	ldr	r0, [pc, #28]	@ (800d42c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d40e:	f7ff f8e8 	bl	800c5e2 <_PreparePacket>
 800d412:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d414:	2212      	movs	r2, #18
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6838      	ldr	r0, [r7, #0]
 800d41a:	f7ff f9d1 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f383 8811 	msr	BASEPRI, r3
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20014928 	.word	0x20014928

0800d430 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d436:	f3ef 8311 	mrs	r3, BASEPRI
 800d43a:	f04f 0120 	mov.w	r1, #32
 800d43e:	f381 8811 	msr	BASEPRI, r1
 800d442:	607b      	str	r3, [r7, #4]
 800d444:	4807      	ldr	r0, [pc, #28]	@ (800d464 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d446:	f7ff f8cc 	bl	800c5e2 <_PreparePacket>
 800d44a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d44c:	2211      	movs	r2, #17
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6838      	ldr	r0, [r7, #0]
 800d452:	f7ff f9b5 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f383 8811 	msr	BASEPRI, r3
}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	20014928 	.word	0x20014928

0800d468 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d468:	b580      	push	{r7, lr}
 800d46a:	b088      	sub	sp, #32
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d470:	f3ef 8311 	mrs	r3, BASEPRI
 800d474:	f04f 0120 	mov.w	r1, #32
 800d478:	f381 8811 	msr	BASEPRI, r1
 800d47c:	617b      	str	r3, [r7, #20]
 800d47e:	4819      	ldr	r0, [pc, #100]	@ (800d4e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d480:	f7ff f8af 	bl	800c5e2 <_PreparePacket>
 800d484:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d48a:	4b17      	ldr	r3, [pc, #92]	@ (800d4e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	61fb      	str	r3, [r7, #28]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	61bb      	str	r3, [r7, #24]
 800d49c:	e00b      	b.n	800d4b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	1c59      	adds	r1, r3, #1
 800d4a6:	61f9      	str	r1, [r7, #28]
 800d4a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d4ac:	b2d2      	uxtb	r2, r2
 800d4ae:	701a      	strb	r2, [r3, #0]
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	09db      	lsrs	r3, r3, #7
 800d4b4:	61bb      	str	r3, [r7, #24]
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4ba:	d8f0      	bhi.n	800d49e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	1c5a      	adds	r2, r3, #1
 800d4c0:	61fa      	str	r2, [r7, #28]
 800d4c2:	69ba      	ldr	r2, [r7, #24]
 800d4c4:	b2d2      	uxtb	r2, r2
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d4cc:	2208      	movs	r2, #8
 800d4ce:	68f9      	ldr	r1, [r7, #12]
 800d4d0:	6938      	ldr	r0, [r7, #16]
 800d4d2:	f7ff f975 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f383 8811 	msr	BASEPRI, r3
}
 800d4dc:	bf00      	nop
 800d4de:	3720      	adds	r7, #32
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	20014928 	.word	0x20014928
 800d4e8:	200148f8 	.word	0x200148f8

0800d4ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d4f4:	f3ef 8311 	mrs	r3, BASEPRI
 800d4f8:	f04f 0120 	mov.w	r1, #32
 800d4fc:	f381 8811 	msr	BASEPRI, r1
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	4819      	ldr	r0, [pc, #100]	@ (800d568 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d504:	f7ff f86d 	bl	800c5e2 <_PreparePacket>
 800d508:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d50e:	4b17      	ldr	r3, [pc, #92]	@ (800d56c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	61fb      	str	r3, [r7, #28]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	61bb      	str	r3, [r7, #24]
 800d520:	e00b      	b.n	800d53a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	b2da      	uxtb	r2, r3
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	1c59      	adds	r1, r3, #1
 800d52a:	61f9      	str	r1, [r7, #28]
 800d52c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	701a      	strb	r2, [r3, #0]
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	09db      	lsrs	r3, r3, #7
 800d538:	61bb      	str	r3, [r7, #24]
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d53e:	d8f0      	bhi.n	800d522 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	61fa      	str	r2, [r7, #28]
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d550:	2204      	movs	r2, #4
 800d552:	68f9      	ldr	r1, [r7, #12]
 800d554:	6938      	ldr	r0, [r7, #16]
 800d556:	f7ff f933 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	f383 8811 	msr	BASEPRI, r3
}
 800d560:	bf00      	nop
 800d562:	3720      	adds	r7, #32
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	20014928 	.word	0x20014928
 800d56c:	200148f8 	.word	0x200148f8

0800d570 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b088      	sub	sp, #32
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d578:	f3ef 8311 	mrs	r3, BASEPRI
 800d57c:	f04f 0120 	mov.w	r1, #32
 800d580:	f381 8811 	msr	BASEPRI, r1
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	4819      	ldr	r0, [pc, #100]	@ (800d5ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d588:	f7ff f82b 	bl	800c5e2 <_PreparePacket>
 800d58c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d592:	4b17      	ldr	r3, [pc, #92]	@ (800d5f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	61fb      	str	r3, [r7, #28]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	61bb      	str	r3, [r7, #24]
 800d5a4:	e00b      	b.n	800d5be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	1c59      	adds	r1, r3, #1
 800d5ae:	61f9      	str	r1, [r7, #28]
 800d5b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d5b4:	b2d2      	uxtb	r2, r2
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	09db      	lsrs	r3, r3, #7
 800d5bc:	61bb      	str	r3, [r7, #24]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5c2:	d8f0      	bhi.n	800d5a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	61fa      	str	r2, [r7, #28]
 800d5ca:	69ba      	ldr	r2, [r7, #24]
 800d5cc:	b2d2      	uxtb	r2, r2
 800d5ce:	701a      	strb	r2, [r3, #0]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d5d4:	2206      	movs	r2, #6
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	6938      	ldr	r0, [r7, #16]
 800d5da:	f7ff f8f1 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f383 8811 	msr	BASEPRI, r3
}
 800d5e4:	bf00      	nop
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20014928 	.word	0x20014928
 800d5f0:	200148f8 	.word	0x200148f8

0800d5f4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08a      	sub	sp, #40	@ 0x28
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d5fe:	f3ef 8311 	mrs	r3, BASEPRI
 800d602:	f04f 0120 	mov.w	r1, #32
 800d606:	f381 8811 	msr	BASEPRI, r1
 800d60a:	617b      	str	r3, [r7, #20]
 800d60c:	4827      	ldr	r0, [pc, #156]	@ (800d6ac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d60e:	f7fe ffe8 	bl	800c5e2 <_PreparePacket>
 800d612:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d618:	4b25      	ldr	r3, [pc, #148]	@ (800d6b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	627b      	str	r3, [r7, #36]	@ 0x24
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	623b      	str	r3, [r7, #32]
 800d62a:	e00b      	b.n	800d644 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	1c59      	adds	r1, r3, #1
 800d634:	6279      	str	r1, [r7, #36]	@ 0x24
 800d636:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d63a:	b2d2      	uxtb	r2, r2
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	09db      	lsrs	r3, r3, #7
 800d642:	623b      	str	r3, [r7, #32]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	2b7f      	cmp	r3, #127	@ 0x7f
 800d648:	d8f0      	bhi.n	800d62c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d650:	6a3a      	ldr	r2, [r7, #32]
 800d652:	b2d2      	uxtb	r2, r2
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	61fb      	str	r3, [r7, #28]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	61bb      	str	r3, [r7, #24]
 800d662:	e00b      	b.n	800d67c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	b2da      	uxtb	r2, r3
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	61f9      	str	r1, [r7, #28]
 800d66e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	09db      	lsrs	r3, r3, #7
 800d67a:	61bb      	str	r3, [r7, #24]
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d680:	d8f0      	bhi.n	800d664 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	61fa      	str	r2, [r7, #28]
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d692:	2207      	movs	r2, #7
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	6938      	ldr	r0, [r7, #16]
 800d698:	f7ff f892 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f383 8811 	msr	BASEPRI, r3
}
 800d6a2:	bf00      	nop
 800d6a4:	3728      	adds	r7, #40	@ 0x28
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20014928 	.word	0x20014928
 800d6b0:	200148f8 	.word	0x200148f8

0800d6b4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d6bc:	4b04      	ldr	r3, [pc, #16]	@ (800d6d0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	1ad3      	subs	r3, r2, r3
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	200148f8 	.word	0x200148f8

0800d6d4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08c      	sub	sp, #48	@ 0x30
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d6de:	4b3b      	ldr	r3, [pc, #236]	@ (800d7cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d06d      	beq.n	800d7c2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d6e6:	4b39      	ldr	r3, [pc, #228]	@ (800d7cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d6f0:	e008      	b.n	800d704 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d007      	beq.n	800d70e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d700:	3301      	adds	r3, #1
 800d702:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d704:	79fb      	ldrb	r3, [r7, #7]
 800d706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d708:	429a      	cmp	r2, r3
 800d70a:	d3f2      	bcc.n	800d6f2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800d70c:	e000      	b.n	800d710 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d70e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d712:	2b00      	cmp	r3, #0
 800d714:	d055      	beq.n	800d7c2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d716:	f3ef 8311 	mrs	r3, BASEPRI
 800d71a:	f04f 0120 	mov.w	r1, #32
 800d71e:	f381 8811 	msr	BASEPRI, r1
 800d722:	617b      	str	r3, [r7, #20]
 800d724:	482a      	ldr	r0, [pc, #168]	@ (800d7d0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d726:	f7fe ff5c 	bl	800c5e2 <_PreparePacket>
 800d72a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	627b      	str	r3, [r7, #36]	@ 0x24
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	623b      	str	r3, [r7, #32]
 800d738:	e00b      	b.n	800d752 <SEGGER_SYSVIEW_SendModule+0x7e>
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d740:	1c59      	adds	r1, r3, #1
 800d742:	6279      	str	r1, [r7, #36]	@ 0x24
 800d744:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d748:	b2d2      	uxtb	r2, r2
 800d74a:	701a      	strb	r2, [r3, #0]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	09db      	lsrs	r3, r3, #7
 800d750:	623b      	str	r3, [r7, #32]
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	2b7f      	cmp	r3, #127	@ 0x7f
 800d756:	d8f0      	bhi.n	800d73a <SEGGER_SYSVIEW_SendModule+0x66>
 800d758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75a:	1c5a      	adds	r2, r3, #1
 800d75c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d75e:	6a3a      	ldr	r2, [r7, #32]
 800d760:	b2d2      	uxtb	r2, r2
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d766:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	61bb      	str	r3, [r7, #24]
 800d772:	e00b      	b.n	800d78c <SEGGER_SYSVIEW_SendModule+0xb8>
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	b2da      	uxtb	r2, r3
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	1c59      	adds	r1, r3, #1
 800d77c:	61f9      	str	r1, [r7, #28]
 800d77e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d782:	b2d2      	uxtb	r2, r2
 800d784:	701a      	strb	r2, [r3, #0]
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	09db      	lsrs	r3, r3, #7
 800d78a:	61bb      	str	r3, [r7, #24]
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d790:	d8f0      	bhi.n	800d774 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	61fa      	str	r2, [r7, #28]
 800d798:	69ba      	ldr	r2, [r7, #24]
 800d79a:	b2d2      	uxtb	r2, r2
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2280      	movs	r2, #128	@ 0x80
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7fe fecc 	bl	800c548 <_EncodeStr>
 800d7b0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d7b2:	2216      	movs	r2, #22
 800d7b4:	68f9      	ldr	r1, [r7, #12]
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f7ff f802 	bl	800c7c0 <_SendPacket>
      RECORD_END();
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d7c2:	bf00      	nop
 800d7c4:	3730      	adds	r7, #48	@ 0x30
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20014920 	.word	0x20014920
 800d7d0:	20014928 	.word	0x20014928

0800d7d4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d7da:	4b0c      	ldr	r3, [pc, #48]	@ (800d80c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00f      	beq.n	800d802 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d7e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d80c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f2      	bne.n	800d7e8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d802:	bf00      	nop
 800d804:	3708      	adds	r7, #8
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	20014920 	.word	0x20014920

0800d810 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d816:	f3ef 8311 	mrs	r3, BASEPRI
 800d81a:	f04f 0120 	mov.w	r1, #32
 800d81e:	f381 8811 	msr	BASEPRI, r1
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	4817      	ldr	r0, [pc, #92]	@ (800d884 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d826:	f7fe fedc 	bl	800c5e2 <_PreparePacket>
 800d82a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	4b14      	ldr	r3, [pc, #80]	@ (800d888 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	613b      	str	r3, [r7, #16]
 800d83a:	e00b      	b.n	800d854 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	1c59      	adds	r1, r3, #1
 800d844:	6179      	str	r1, [r7, #20]
 800d846:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d84a:	b2d2      	uxtb	r2, r2
 800d84c:	701a      	strb	r2, [r3, #0]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	09db      	lsrs	r3, r3, #7
 800d852:	613b      	str	r3, [r7, #16]
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	2b7f      	cmp	r3, #127	@ 0x7f
 800d858:	d8f0      	bhi.n	800d83c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	1c5a      	adds	r2, r3, #1
 800d85e:	617a      	str	r2, [r7, #20]
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	701a      	strb	r2, [r3, #0]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d86a:	221b      	movs	r2, #27
 800d86c:	6879      	ldr	r1, [r7, #4]
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f7fe ffa6 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f383 8811 	msr	BASEPRI, r3
}
 800d87a:	bf00      	nop
 800d87c:	3718      	adds	r7, #24
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	20014928 	.word	0x20014928
 800d888:	20014924 	.word	0x20014924

0800d88c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	@ 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d894:	f3ef 8311 	mrs	r3, BASEPRI
 800d898:	f04f 0120 	mov.w	r1, #32
 800d89c:	f381 8811 	msr	BASEPRI, r1
 800d8a0:	617b      	str	r3, [r7, #20]
 800d8a2:	4827      	ldr	r0, [pc, #156]	@ (800d940 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d8a4:	f7fe fe9d 	bl	800c5e2 <_PreparePacket>
 800d8a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d8aa:	2280      	movs	r2, #128	@ 0x80
 800d8ac:	6879      	ldr	r1, [r7, #4]
 800d8ae:	6938      	ldr	r0, [r7, #16]
 800d8b0:	f7fe fe4a 	bl	800c548 <_EncodeStr>
 800d8b4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	623b      	str	r3, [r7, #32]
 800d8be:	e00b      	b.n	800d8d8 <SEGGER_SYSVIEW_Warn+0x4c>
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c6:	1c59      	adds	r1, r3, #1
 800d8c8:	6279      	str	r1, [r7, #36]	@ 0x24
 800d8ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	09db      	lsrs	r3, r3, #7
 800d8d6:	623b      	str	r3, [r7, #32]
 800d8d8:	6a3b      	ldr	r3, [r7, #32]
 800d8da:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8dc:	d8f0      	bhi.n	800d8c0 <SEGGER_SYSVIEW_Warn+0x34>
 800d8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8e4:	6a3a      	ldr	r2, [r7, #32]
 800d8e6:	b2d2      	uxtb	r2, r2
 800d8e8:	701a      	strb	r2, [r3, #0]
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61bb      	str	r3, [r7, #24]
 800d8f6:	e00b      	b.n	800d910 <SEGGER_SYSVIEW_Warn+0x84>
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	1c59      	adds	r1, r3, #1
 800d900:	61f9      	str	r1, [r7, #28]
 800d902:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	09db      	lsrs	r3, r3, #7
 800d90e:	61bb      	str	r3, [r7, #24]
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	2b7f      	cmp	r3, #127	@ 0x7f
 800d914:	d8f0      	bhi.n	800d8f8 <SEGGER_SYSVIEW_Warn+0x6c>
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	1c5a      	adds	r2, r3, #1
 800d91a:	61fa      	str	r2, [r7, #28]
 800d91c:	69ba      	ldr	r2, [r7, #24]
 800d91e:	b2d2      	uxtb	r2, r2
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d926:	221a      	movs	r2, #26
 800d928:	68f9      	ldr	r1, [r7, #12]
 800d92a:	6938      	ldr	r0, [r7, #16]
 800d92c:	f7fe ff48 	bl	800c7c0 <_SendPacket>
  RECORD_END();
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f383 8811 	msr	BASEPRI, r3
}
 800d936:	bf00      	nop
 800d938:	3728      	adds	r7, #40	@ 0x28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20014928 	.word	0x20014928

0800d944 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	6879      	ldr	r1, [r7, #4]
 800d956:	2000      	movs	r0, #0
 800d958:	f7fe fcdc 	bl	800c314 <SEGGER_RTT_Write>
  return len;
 800d95c:	683b      	ldr	r3, [r7, #0]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <std>:
 800d968:	2300      	movs	r3, #0
 800d96a:	b510      	push	{r4, lr}
 800d96c:	4604      	mov	r4, r0
 800d96e:	e9c0 3300 	strd	r3, r3, [r0]
 800d972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d976:	6083      	str	r3, [r0, #8]
 800d978:	8181      	strh	r1, [r0, #12]
 800d97a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d97c:	81c2      	strh	r2, [r0, #14]
 800d97e:	6183      	str	r3, [r0, #24]
 800d980:	4619      	mov	r1, r3
 800d982:	2208      	movs	r2, #8
 800d984:	305c      	adds	r0, #92	@ 0x5c
 800d986:	f000 fa09 	bl	800dd9c <memset>
 800d98a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c0 <std+0x58>)
 800d98c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d98e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c4 <std+0x5c>)
 800d990:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d992:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c8 <std+0x60>)
 800d994:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d996:	4b0d      	ldr	r3, [pc, #52]	@ (800d9cc <std+0x64>)
 800d998:	6323      	str	r3, [r4, #48]	@ 0x30
 800d99a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d0 <std+0x68>)
 800d99c:	6224      	str	r4, [r4, #32]
 800d99e:	429c      	cmp	r4, r3
 800d9a0:	d006      	beq.n	800d9b0 <std+0x48>
 800d9a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9a6:	4294      	cmp	r4, r2
 800d9a8:	d002      	beq.n	800d9b0 <std+0x48>
 800d9aa:	33d0      	adds	r3, #208	@ 0xd0
 800d9ac:	429c      	cmp	r4, r3
 800d9ae:	d105      	bne.n	800d9bc <std+0x54>
 800d9b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b8:	f000 ba50 	b.w	800de5c <__retarget_lock_init_recursive>
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	bf00      	nop
 800d9c0:	0800dbcd 	.word	0x0800dbcd
 800d9c4:	0800dbef 	.word	0x0800dbef
 800d9c8:	0800dc27 	.word	0x0800dc27
 800d9cc:	0800dc4b 	.word	0x0800dc4b
 800d9d0:	20014a0c 	.word	0x20014a0c

0800d9d4 <stdio_exit_handler>:
 800d9d4:	4a02      	ldr	r2, [pc, #8]	@ (800d9e0 <stdio_exit_handler+0xc>)
 800d9d6:	4903      	ldr	r1, [pc, #12]	@ (800d9e4 <stdio_exit_handler+0x10>)
 800d9d8:	4803      	ldr	r0, [pc, #12]	@ (800d9e8 <stdio_exit_handler+0x14>)
 800d9da:	f000 b869 	b.w	800dab0 <_fwalk_sglue>
 800d9de:	bf00      	nop
 800d9e0:	20000068 	.word	0x20000068
 800d9e4:	0800e719 	.word	0x0800e719
 800d9e8:	20000078 	.word	0x20000078

0800d9ec <cleanup_stdio>:
 800d9ec:	6841      	ldr	r1, [r0, #4]
 800d9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800da20 <cleanup_stdio+0x34>)
 800d9f0:	4299      	cmp	r1, r3
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	d001      	beq.n	800d9fc <cleanup_stdio+0x10>
 800d9f8:	f000 fe8e 	bl	800e718 <_fflush_r>
 800d9fc:	68a1      	ldr	r1, [r4, #8]
 800d9fe:	4b09      	ldr	r3, [pc, #36]	@ (800da24 <cleanup_stdio+0x38>)
 800da00:	4299      	cmp	r1, r3
 800da02:	d002      	beq.n	800da0a <cleanup_stdio+0x1e>
 800da04:	4620      	mov	r0, r4
 800da06:	f000 fe87 	bl	800e718 <_fflush_r>
 800da0a:	68e1      	ldr	r1, [r4, #12]
 800da0c:	4b06      	ldr	r3, [pc, #24]	@ (800da28 <cleanup_stdio+0x3c>)
 800da0e:	4299      	cmp	r1, r3
 800da10:	d004      	beq.n	800da1c <cleanup_stdio+0x30>
 800da12:	4620      	mov	r0, r4
 800da14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da18:	f000 be7e 	b.w	800e718 <_fflush_r>
 800da1c:	bd10      	pop	{r4, pc}
 800da1e:	bf00      	nop
 800da20:	20014a0c 	.word	0x20014a0c
 800da24:	20014a74 	.word	0x20014a74
 800da28:	20014adc 	.word	0x20014adc

0800da2c <global_stdio_init.part.0>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	4b0b      	ldr	r3, [pc, #44]	@ (800da5c <global_stdio_init.part.0+0x30>)
 800da30:	4c0b      	ldr	r4, [pc, #44]	@ (800da60 <global_stdio_init.part.0+0x34>)
 800da32:	4a0c      	ldr	r2, [pc, #48]	@ (800da64 <global_stdio_init.part.0+0x38>)
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	4620      	mov	r0, r4
 800da38:	2200      	movs	r2, #0
 800da3a:	2104      	movs	r1, #4
 800da3c:	f7ff ff94 	bl	800d968 <std>
 800da40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da44:	2201      	movs	r2, #1
 800da46:	2109      	movs	r1, #9
 800da48:	f7ff ff8e 	bl	800d968 <std>
 800da4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da50:	2202      	movs	r2, #2
 800da52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da56:	2112      	movs	r1, #18
 800da58:	f7ff bf86 	b.w	800d968 <std>
 800da5c:	20014b44 	.word	0x20014b44
 800da60:	20014a0c 	.word	0x20014a0c
 800da64:	0800d9d5 	.word	0x0800d9d5

0800da68 <__sfp_lock_acquire>:
 800da68:	4801      	ldr	r0, [pc, #4]	@ (800da70 <__sfp_lock_acquire+0x8>)
 800da6a:	f000 b9f8 	b.w	800de5e <__retarget_lock_acquire_recursive>
 800da6e:	bf00      	nop
 800da70:	20014b4d 	.word	0x20014b4d

0800da74 <__sfp_lock_release>:
 800da74:	4801      	ldr	r0, [pc, #4]	@ (800da7c <__sfp_lock_release+0x8>)
 800da76:	f000 b9f3 	b.w	800de60 <__retarget_lock_release_recursive>
 800da7a:	bf00      	nop
 800da7c:	20014b4d 	.word	0x20014b4d

0800da80 <__sinit>:
 800da80:	b510      	push	{r4, lr}
 800da82:	4604      	mov	r4, r0
 800da84:	f7ff fff0 	bl	800da68 <__sfp_lock_acquire>
 800da88:	6a23      	ldr	r3, [r4, #32]
 800da8a:	b11b      	cbz	r3, 800da94 <__sinit+0x14>
 800da8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da90:	f7ff bff0 	b.w	800da74 <__sfp_lock_release>
 800da94:	4b04      	ldr	r3, [pc, #16]	@ (800daa8 <__sinit+0x28>)
 800da96:	6223      	str	r3, [r4, #32]
 800da98:	4b04      	ldr	r3, [pc, #16]	@ (800daac <__sinit+0x2c>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1f5      	bne.n	800da8c <__sinit+0xc>
 800daa0:	f7ff ffc4 	bl	800da2c <global_stdio_init.part.0>
 800daa4:	e7f2      	b.n	800da8c <__sinit+0xc>
 800daa6:	bf00      	nop
 800daa8:	0800d9ed 	.word	0x0800d9ed
 800daac:	20014b44 	.word	0x20014b44

0800dab0 <_fwalk_sglue>:
 800dab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab4:	4607      	mov	r7, r0
 800dab6:	4688      	mov	r8, r1
 800dab8:	4614      	mov	r4, r2
 800daba:	2600      	movs	r6, #0
 800dabc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dac0:	f1b9 0901 	subs.w	r9, r9, #1
 800dac4:	d505      	bpl.n	800dad2 <_fwalk_sglue+0x22>
 800dac6:	6824      	ldr	r4, [r4, #0]
 800dac8:	2c00      	cmp	r4, #0
 800daca:	d1f7      	bne.n	800dabc <_fwalk_sglue+0xc>
 800dacc:	4630      	mov	r0, r6
 800dace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dad2:	89ab      	ldrh	r3, [r5, #12]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d907      	bls.n	800dae8 <_fwalk_sglue+0x38>
 800dad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dadc:	3301      	adds	r3, #1
 800dade:	d003      	beq.n	800dae8 <_fwalk_sglue+0x38>
 800dae0:	4629      	mov	r1, r5
 800dae2:	4638      	mov	r0, r7
 800dae4:	47c0      	blx	r8
 800dae6:	4306      	orrs	r6, r0
 800dae8:	3568      	adds	r5, #104	@ 0x68
 800daea:	e7e9      	b.n	800dac0 <_fwalk_sglue+0x10>

0800daec <iprintf>:
 800daec:	b40f      	push	{r0, r1, r2, r3}
 800daee:	b507      	push	{r0, r1, r2, lr}
 800daf0:	4906      	ldr	r1, [pc, #24]	@ (800db0c <iprintf+0x20>)
 800daf2:	ab04      	add	r3, sp, #16
 800daf4:	6808      	ldr	r0, [r1, #0]
 800daf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dafa:	6881      	ldr	r1, [r0, #8]
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	f000 fae1 	bl	800e0c4 <_vfiprintf_r>
 800db02:	b003      	add	sp, #12
 800db04:	f85d eb04 	ldr.w	lr, [sp], #4
 800db08:	b004      	add	sp, #16
 800db0a:	4770      	bx	lr
 800db0c:	20000074 	.word	0x20000074

0800db10 <_puts_r>:
 800db10:	6a03      	ldr	r3, [r0, #32]
 800db12:	b570      	push	{r4, r5, r6, lr}
 800db14:	6884      	ldr	r4, [r0, #8]
 800db16:	4605      	mov	r5, r0
 800db18:	460e      	mov	r6, r1
 800db1a:	b90b      	cbnz	r3, 800db20 <_puts_r+0x10>
 800db1c:	f7ff ffb0 	bl	800da80 <__sinit>
 800db20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db22:	07db      	lsls	r3, r3, #31
 800db24:	d405      	bmi.n	800db32 <_puts_r+0x22>
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	0598      	lsls	r0, r3, #22
 800db2a:	d402      	bmi.n	800db32 <_puts_r+0x22>
 800db2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db2e:	f000 f996 	bl	800de5e <__retarget_lock_acquire_recursive>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	0719      	lsls	r1, r3, #28
 800db36:	d502      	bpl.n	800db3e <_puts_r+0x2e>
 800db38:	6923      	ldr	r3, [r4, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d135      	bne.n	800dbaa <_puts_r+0x9a>
 800db3e:	4621      	mov	r1, r4
 800db40:	4628      	mov	r0, r5
 800db42:	f000 f8c5 	bl	800dcd0 <__swsetup_r>
 800db46:	b380      	cbz	r0, 800dbaa <_puts_r+0x9a>
 800db48:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800db4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db4e:	07da      	lsls	r2, r3, #31
 800db50:	d405      	bmi.n	800db5e <_puts_r+0x4e>
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	059b      	lsls	r3, r3, #22
 800db56:	d402      	bmi.n	800db5e <_puts_r+0x4e>
 800db58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db5a:	f000 f981 	bl	800de60 <__retarget_lock_release_recursive>
 800db5e:	4628      	mov	r0, r5
 800db60:	bd70      	pop	{r4, r5, r6, pc}
 800db62:	2b00      	cmp	r3, #0
 800db64:	da04      	bge.n	800db70 <_puts_r+0x60>
 800db66:	69a2      	ldr	r2, [r4, #24]
 800db68:	429a      	cmp	r2, r3
 800db6a:	dc17      	bgt.n	800db9c <_puts_r+0x8c>
 800db6c:	290a      	cmp	r1, #10
 800db6e:	d015      	beq.n	800db9c <_puts_r+0x8c>
 800db70:	6823      	ldr	r3, [r4, #0]
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	6022      	str	r2, [r4, #0]
 800db76:	7019      	strb	r1, [r3, #0]
 800db78:	68a3      	ldr	r3, [r4, #8]
 800db7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db7e:	3b01      	subs	r3, #1
 800db80:	60a3      	str	r3, [r4, #8]
 800db82:	2900      	cmp	r1, #0
 800db84:	d1ed      	bne.n	800db62 <_puts_r+0x52>
 800db86:	2b00      	cmp	r3, #0
 800db88:	da11      	bge.n	800dbae <_puts_r+0x9e>
 800db8a:	4622      	mov	r2, r4
 800db8c:	210a      	movs	r1, #10
 800db8e:	4628      	mov	r0, r5
 800db90:	f000 f85f 	bl	800dc52 <__swbuf_r>
 800db94:	3001      	adds	r0, #1
 800db96:	d0d7      	beq.n	800db48 <_puts_r+0x38>
 800db98:	250a      	movs	r5, #10
 800db9a:	e7d7      	b.n	800db4c <_puts_r+0x3c>
 800db9c:	4622      	mov	r2, r4
 800db9e:	4628      	mov	r0, r5
 800dba0:	f000 f857 	bl	800dc52 <__swbuf_r>
 800dba4:	3001      	adds	r0, #1
 800dba6:	d1e7      	bne.n	800db78 <_puts_r+0x68>
 800dba8:	e7ce      	b.n	800db48 <_puts_r+0x38>
 800dbaa:	3e01      	subs	r6, #1
 800dbac:	e7e4      	b.n	800db78 <_puts_r+0x68>
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	1c5a      	adds	r2, r3, #1
 800dbb2:	6022      	str	r2, [r4, #0]
 800dbb4:	220a      	movs	r2, #10
 800dbb6:	701a      	strb	r2, [r3, #0]
 800dbb8:	e7ee      	b.n	800db98 <_puts_r+0x88>
	...

0800dbbc <puts>:
 800dbbc:	4b02      	ldr	r3, [pc, #8]	@ (800dbc8 <puts+0xc>)
 800dbbe:	4601      	mov	r1, r0
 800dbc0:	6818      	ldr	r0, [r3, #0]
 800dbc2:	f7ff bfa5 	b.w	800db10 <_puts_r>
 800dbc6:	bf00      	nop
 800dbc8:	20000074 	.word	0x20000074

0800dbcc <__sread>:
 800dbcc:	b510      	push	{r4, lr}
 800dbce:	460c      	mov	r4, r1
 800dbd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd4:	f000 f90c 	bl	800ddf0 <_read_r>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	bfab      	itete	ge
 800dbdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dbde:	89a3      	ldrhlt	r3, [r4, #12]
 800dbe0:	181b      	addge	r3, r3, r0
 800dbe2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dbe6:	bfac      	ite	ge
 800dbe8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dbea:	81a3      	strhlt	r3, [r4, #12]
 800dbec:	bd10      	pop	{r4, pc}

0800dbee <__swrite>:
 800dbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf2:	461f      	mov	r7, r3
 800dbf4:	898b      	ldrh	r3, [r1, #12]
 800dbf6:	05db      	lsls	r3, r3, #23
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	4616      	mov	r6, r2
 800dbfe:	d505      	bpl.n	800dc0c <__swrite+0x1e>
 800dc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc04:	2302      	movs	r3, #2
 800dc06:	2200      	movs	r2, #0
 800dc08:	f000 f8e0 	bl	800ddcc <_lseek_r>
 800dc0c:	89a3      	ldrh	r3, [r4, #12]
 800dc0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc16:	81a3      	strh	r3, [r4, #12]
 800dc18:	4632      	mov	r2, r6
 800dc1a:	463b      	mov	r3, r7
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc22:	f7ff be8f 	b.w	800d944 <_write_r>

0800dc26 <__sseek>:
 800dc26:	b510      	push	{r4, lr}
 800dc28:	460c      	mov	r4, r1
 800dc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc2e:	f000 f8cd 	bl	800ddcc <_lseek_r>
 800dc32:	1c43      	adds	r3, r0, #1
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	bf15      	itete	ne
 800dc38:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc42:	81a3      	strheq	r3, [r4, #12]
 800dc44:	bf18      	it	ne
 800dc46:	81a3      	strhne	r3, [r4, #12]
 800dc48:	bd10      	pop	{r4, pc}

0800dc4a <__sclose>:
 800dc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc4e:	f000 b8ad 	b.w	800ddac <_close_r>

0800dc52 <__swbuf_r>:
 800dc52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc54:	460e      	mov	r6, r1
 800dc56:	4614      	mov	r4, r2
 800dc58:	4605      	mov	r5, r0
 800dc5a:	b118      	cbz	r0, 800dc64 <__swbuf_r+0x12>
 800dc5c:	6a03      	ldr	r3, [r0, #32]
 800dc5e:	b90b      	cbnz	r3, 800dc64 <__swbuf_r+0x12>
 800dc60:	f7ff ff0e 	bl	800da80 <__sinit>
 800dc64:	69a3      	ldr	r3, [r4, #24]
 800dc66:	60a3      	str	r3, [r4, #8]
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	071a      	lsls	r2, r3, #28
 800dc6c:	d501      	bpl.n	800dc72 <__swbuf_r+0x20>
 800dc6e:	6923      	ldr	r3, [r4, #16]
 800dc70:	b943      	cbnz	r3, 800dc84 <__swbuf_r+0x32>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4628      	mov	r0, r5
 800dc76:	f000 f82b 	bl	800dcd0 <__swsetup_r>
 800dc7a:	b118      	cbz	r0, 800dc84 <__swbuf_r+0x32>
 800dc7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dc80:	4638      	mov	r0, r7
 800dc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	6922      	ldr	r2, [r4, #16]
 800dc88:	1a98      	subs	r0, r3, r2
 800dc8a:	6963      	ldr	r3, [r4, #20]
 800dc8c:	b2f6      	uxtb	r6, r6
 800dc8e:	4283      	cmp	r3, r0
 800dc90:	4637      	mov	r7, r6
 800dc92:	dc05      	bgt.n	800dca0 <__swbuf_r+0x4e>
 800dc94:	4621      	mov	r1, r4
 800dc96:	4628      	mov	r0, r5
 800dc98:	f000 fd3e 	bl	800e718 <_fflush_r>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d1ed      	bne.n	800dc7c <__swbuf_r+0x2a>
 800dca0:	68a3      	ldr	r3, [r4, #8]
 800dca2:	3b01      	subs	r3, #1
 800dca4:	60a3      	str	r3, [r4, #8]
 800dca6:	6823      	ldr	r3, [r4, #0]
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	6022      	str	r2, [r4, #0]
 800dcac:	701e      	strb	r6, [r3, #0]
 800dcae:	6962      	ldr	r2, [r4, #20]
 800dcb0:	1c43      	adds	r3, r0, #1
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d004      	beq.n	800dcc0 <__swbuf_r+0x6e>
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	07db      	lsls	r3, r3, #31
 800dcba:	d5e1      	bpl.n	800dc80 <__swbuf_r+0x2e>
 800dcbc:	2e0a      	cmp	r6, #10
 800dcbe:	d1df      	bne.n	800dc80 <__swbuf_r+0x2e>
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	f000 fd28 	bl	800e718 <_fflush_r>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d0d9      	beq.n	800dc80 <__swbuf_r+0x2e>
 800dccc:	e7d6      	b.n	800dc7c <__swbuf_r+0x2a>
	...

0800dcd0 <__swsetup_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4b29      	ldr	r3, [pc, #164]	@ (800dd78 <__swsetup_r+0xa8>)
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	460c      	mov	r4, r1
 800dcda:	b118      	cbz	r0, 800dce4 <__swsetup_r+0x14>
 800dcdc:	6a03      	ldr	r3, [r0, #32]
 800dcde:	b90b      	cbnz	r3, 800dce4 <__swsetup_r+0x14>
 800dce0:	f7ff fece 	bl	800da80 <__sinit>
 800dce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dce8:	0719      	lsls	r1, r3, #28
 800dcea:	d422      	bmi.n	800dd32 <__swsetup_r+0x62>
 800dcec:	06da      	lsls	r2, r3, #27
 800dcee:	d407      	bmi.n	800dd00 <__swsetup_r+0x30>
 800dcf0:	2209      	movs	r2, #9
 800dcf2:	602a      	str	r2, [r5, #0]
 800dcf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcfe:	e033      	b.n	800dd68 <__swsetup_r+0x98>
 800dd00:	0758      	lsls	r0, r3, #29
 800dd02:	d512      	bpl.n	800dd2a <__swsetup_r+0x5a>
 800dd04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd06:	b141      	cbz	r1, 800dd1a <__swsetup_r+0x4a>
 800dd08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd0c:	4299      	cmp	r1, r3
 800dd0e:	d002      	beq.n	800dd16 <__swsetup_r+0x46>
 800dd10:	4628      	mov	r0, r5
 800dd12:	f000 f8b5 	bl	800de80 <_free_r>
 800dd16:	2300      	movs	r3, #0
 800dd18:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd20:	81a3      	strh	r3, [r4, #12]
 800dd22:	2300      	movs	r3, #0
 800dd24:	6063      	str	r3, [r4, #4]
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	89a3      	ldrh	r3, [r4, #12]
 800dd2c:	f043 0308 	orr.w	r3, r3, #8
 800dd30:	81a3      	strh	r3, [r4, #12]
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	b94b      	cbnz	r3, 800dd4a <__swsetup_r+0x7a>
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd40:	d003      	beq.n	800dd4a <__swsetup_r+0x7a>
 800dd42:	4621      	mov	r1, r4
 800dd44:	4628      	mov	r0, r5
 800dd46:	f000 fd35 	bl	800e7b4 <__smakebuf_r>
 800dd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd4e:	f013 0201 	ands.w	r2, r3, #1
 800dd52:	d00a      	beq.n	800dd6a <__swsetup_r+0x9a>
 800dd54:	2200      	movs	r2, #0
 800dd56:	60a2      	str	r2, [r4, #8]
 800dd58:	6962      	ldr	r2, [r4, #20]
 800dd5a:	4252      	negs	r2, r2
 800dd5c:	61a2      	str	r2, [r4, #24]
 800dd5e:	6922      	ldr	r2, [r4, #16]
 800dd60:	b942      	cbnz	r2, 800dd74 <__swsetup_r+0xa4>
 800dd62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd66:	d1c5      	bne.n	800dcf4 <__swsetup_r+0x24>
 800dd68:	bd38      	pop	{r3, r4, r5, pc}
 800dd6a:	0799      	lsls	r1, r3, #30
 800dd6c:	bf58      	it	pl
 800dd6e:	6962      	ldrpl	r2, [r4, #20]
 800dd70:	60a2      	str	r2, [r4, #8]
 800dd72:	e7f4      	b.n	800dd5e <__swsetup_r+0x8e>
 800dd74:	2000      	movs	r0, #0
 800dd76:	e7f7      	b.n	800dd68 <__swsetup_r+0x98>
 800dd78:	20000074 	.word	0x20000074

0800dd7c <memcmp>:
 800dd7c:	b510      	push	{r4, lr}
 800dd7e:	3901      	subs	r1, #1
 800dd80:	4402      	add	r2, r0
 800dd82:	4290      	cmp	r0, r2
 800dd84:	d101      	bne.n	800dd8a <memcmp+0xe>
 800dd86:	2000      	movs	r0, #0
 800dd88:	e005      	b.n	800dd96 <memcmp+0x1a>
 800dd8a:	7803      	ldrb	r3, [r0, #0]
 800dd8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dd90:	42a3      	cmp	r3, r4
 800dd92:	d001      	beq.n	800dd98 <memcmp+0x1c>
 800dd94:	1b18      	subs	r0, r3, r4
 800dd96:	bd10      	pop	{r4, pc}
 800dd98:	3001      	adds	r0, #1
 800dd9a:	e7f2      	b.n	800dd82 <memcmp+0x6>

0800dd9c <memset>:
 800dd9c:	4402      	add	r2, r0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d100      	bne.n	800dda6 <memset+0xa>
 800dda4:	4770      	bx	lr
 800dda6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddaa:	e7f9      	b.n	800dda0 <memset+0x4>

0800ddac <_close_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d06      	ldr	r5, [pc, #24]	@ (800ddc8 <_close_r+0x1c>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	f7f5 fbd1 	bl	800355e <_close>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_close_r+0x1a>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_close_r+0x1a>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20014b48 	.word	0x20014b48

0800ddcc <_lseek_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4d07      	ldr	r5, [pc, #28]	@ (800ddec <_lseek_r+0x20>)
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	4608      	mov	r0, r1
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	602a      	str	r2, [r5, #0]
 800ddda:	461a      	mov	r2, r3
 800dddc:	f7f5 fbe6 	bl	80035ac <_lseek>
 800dde0:	1c43      	adds	r3, r0, #1
 800dde2:	d102      	bne.n	800ddea <_lseek_r+0x1e>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	b103      	cbz	r3, 800ddea <_lseek_r+0x1e>
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	bd38      	pop	{r3, r4, r5, pc}
 800ddec:	20014b48 	.word	0x20014b48

0800ddf0 <_read_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_read_r+0x20>)
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	4608      	mov	r0, r1
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	602a      	str	r2, [r5, #0]
 800ddfe:	461a      	mov	r2, r3
 800de00:	f7f5 fb90 	bl	8003524 <_read>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_read_r+0x1e>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_read_r+0x1e>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20014b48 	.word	0x20014b48

0800de14 <__libc_init_array>:
 800de14:	b570      	push	{r4, r5, r6, lr}
 800de16:	4d0d      	ldr	r5, [pc, #52]	@ (800de4c <__libc_init_array+0x38>)
 800de18:	4c0d      	ldr	r4, [pc, #52]	@ (800de50 <__libc_init_array+0x3c>)
 800de1a:	1b64      	subs	r4, r4, r5
 800de1c:	10a4      	asrs	r4, r4, #2
 800de1e:	2600      	movs	r6, #0
 800de20:	42a6      	cmp	r6, r4
 800de22:	d109      	bne.n	800de38 <__libc_init_array+0x24>
 800de24:	4d0b      	ldr	r5, [pc, #44]	@ (800de54 <__libc_init_array+0x40>)
 800de26:	4c0c      	ldr	r4, [pc, #48]	@ (800de58 <__libc_init_array+0x44>)
 800de28:	f000 fe14 	bl	800ea54 <_init>
 800de2c:	1b64      	subs	r4, r4, r5
 800de2e:	10a4      	asrs	r4, r4, #2
 800de30:	2600      	movs	r6, #0
 800de32:	42a6      	cmp	r6, r4
 800de34:	d105      	bne.n	800de42 <__libc_init_array+0x2e>
 800de36:	bd70      	pop	{r4, r5, r6, pc}
 800de38:	f855 3b04 	ldr.w	r3, [r5], #4
 800de3c:	4798      	blx	r3
 800de3e:	3601      	adds	r6, #1
 800de40:	e7ee      	b.n	800de20 <__libc_init_array+0xc>
 800de42:	f855 3b04 	ldr.w	r3, [r5], #4
 800de46:	4798      	blx	r3
 800de48:	3601      	adds	r6, #1
 800de4a:	e7f2      	b.n	800de32 <__libc_init_array+0x1e>
 800de4c:	0800efec 	.word	0x0800efec
 800de50:	0800efec 	.word	0x0800efec
 800de54:	0800efec 	.word	0x0800efec
 800de58:	0800eff0 	.word	0x0800eff0

0800de5c <__retarget_lock_init_recursive>:
 800de5c:	4770      	bx	lr

0800de5e <__retarget_lock_acquire_recursive>:
 800de5e:	4770      	bx	lr

0800de60 <__retarget_lock_release_recursive>:
 800de60:	4770      	bx	lr

0800de62 <memcpy>:
 800de62:	440a      	add	r2, r1
 800de64:	4291      	cmp	r1, r2
 800de66:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de6a:	d100      	bne.n	800de6e <memcpy+0xc>
 800de6c:	4770      	bx	lr
 800de6e:	b510      	push	{r4, lr}
 800de70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de78:	4291      	cmp	r1, r2
 800de7a:	d1f9      	bne.n	800de70 <memcpy+0xe>
 800de7c:	bd10      	pop	{r4, pc}
	...

0800de80 <_free_r>:
 800de80:	b538      	push	{r3, r4, r5, lr}
 800de82:	4605      	mov	r5, r0
 800de84:	2900      	cmp	r1, #0
 800de86:	d041      	beq.n	800df0c <_free_r+0x8c>
 800de88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de8c:	1f0c      	subs	r4, r1, #4
 800de8e:	2b00      	cmp	r3, #0
 800de90:	bfb8      	it	lt
 800de92:	18e4      	addlt	r4, r4, r3
 800de94:	f000 f8e0 	bl	800e058 <__malloc_lock>
 800de98:	4a1d      	ldr	r2, [pc, #116]	@ (800df10 <_free_r+0x90>)
 800de9a:	6813      	ldr	r3, [r2, #0]
 800de9c:	b933      	cbnz	r3, 800deac <_free_r+0x2c>
 800de9e:	6063      	str	r3, [r4, #4]
 800dea0:	6014      	str	r4, [r2, #0]
 800dea2:	4628      	mov	r0, r5
 800dea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea8:	f000 b8dc 	b.w	800e064 <__malloc_unlock>
 800deac:	42a3      	cmp	r3, r4
 800deae:	d908      	bls.n	800dec2 <_free_r+0x42>
 800deb0:	6820      	ldr	r0, [r4, #0]
 800deb2:	1821      	adds	r1, r4, r0
 800deb4:	428b      	cmp	r3, r1
 800deb6:	bf01      	itttt	eq
 800deb8:	6819      	ldreq	r1, [r3, #0]
 800deba:	685b      	ldreq	r3, [r3, #4]
 800debc:	1809      	addeq	r1, r1, r0
 800debe:	6021      	streq	r1, [r4, #0]
 800dec0:	e7ed      	b.n	800de9e <_free_r+0x1e>
 800dec2:	461a      	mov	r2, r3
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	b10b      	cbz	r3, 800decc <_free_r+0x4c>
 800dec8:	42a3      	cmp	r3, r4
 800deca:	d9fa      	bls.n	800dec2 <_free_r+0x42>
 800decc:	6811      	ldr	r1, [r2, #0]
 800dece:	1850      	adds	r0, r2, r1
 800ded0:	42a0      	cmp	r0, r4
 800ded2:	d10b      	bne.n	800deec <_free_r+0x6c>
 800ded4:	6820      	ldr	r0, [r4, #0]
 800ded6:	4401      	add	r1, r0
 800ded8:	1850      	adds	r0, r2, r1
 800deda:	4283      	cmp	r3, r0
 800dedc:	6011      	str	r1, [r2, #0]
 800dede:	d1e0      	bne.n	800dea2 <_free_r+0x22>
 800dee0:	6818      	ldr	r0, [r3, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	6053      	str	r3, [r2, #4]
 800dee6:	4408      	add	r0, r1
 800dee8:	6010      	str	r0, [r2, #0]
 800deea:	e7da      	b.n	800dea2 <_free_r+0x22>
 800deec:	d902      	bls.n	800def4 <_free_r+0x74>
 800deee:	230c      	movs	r3, #12
 800def0:	602b      	str	r3, [r5, #0]
 800def2:	e7d6      	b.n	800dea2 <_free_r+0x22>
 800def4:	6820      	ldr	r0, [r4, #0]
 800def6:	1821      	adds	r1, r4, r0
 800def8:	428b      	cmp	r3, r1
 800defa:	bf04      	itt	eq
 800defc:	6819      	ldreq	r1, [r3, #0]
 800defe:	685b      	ldreq	r3, [r3, #4]
 800df00:	6063      	str	r3, [r4, #4]
 800df02:	bf04      	itt	eq
 800df04:	1809      	addeq	r1, r1, r0
 800df06:	6021      	streq	r1, [r4, #0]
 800df08:	6054      	str	r4, [r2, #4]
 800df0a:	e7ca      	b.n	800dea2 <_free_r+0x22>
 800df0c:	bd38      	pop	{r3, r4, r5, pc}
 800df0e:	bf00      	nop
 800df10:	20014b54 	.word	0x20014b54

0800df14 <sbrk_aligned>:
 800df14:	b570      	push	{r4, r5, r6, lr}
 800df16:	4e0f      	ldr	r6, [pc, #60]	@ (800df54 <sbrk_aligned+0x40>)
 800df18:	460c      	mov	r4, r1
 800df1a:	6831      	ldr	r1, [r6, #0]
 800df1c:	4605      	mov	r5, r0
 800df1e:	b911      	cbnz	r1, 800df26 <sbrk_aligned+0x12>
 800df20:	f000 fca6 	bl	800e870 <_sbrk_r>
 800df24:	6030      	str	r0, [r6, #0]
 800df26:	4621      	mov	r1, r4
 800df28:	4628      	mov	r0, r5
 800df2a:	f000 fca1 	bl	800e870 <_sbrk_r>
 800df2e:	1c43      	adds	r3, r0, #1
 800df30:	d103      	bne.n	800df3a <sbrk_aligned+0x26>
 800df32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800df36:	4620      	mov	r0, r4
 800df38:	bd70      	pop	{r4, r5, r6, pc}
 800df3a:	1cc4      	adds	r4, r0, #3
 800df3c:	f024 0403 	bic.w	r4, r4, #3
 800df40:	42a0      	cmp	r0, r4
 800df42:	d0f8      	beq.n	800df36 <sbrk_aligned+0x22>
 800df44:	1a21      	subs	r1, r4, r0
 800df46:	4628      	mov	r0, r5
 800df48:	f000 fc92 	bl	800e870 <_sbrk_r>
 800df4c:	3001      	adds	r0, #1
 800df4e:	d1f2      	bne.n	800df36 <sbrk_aligned+0x22>
 800df50:	e7ef      	b.n	800df32 <sbrk_aligned+0x1e>
 800df52:	bf00      	nop
 800df54:	20014b50 	.word	0x20014b50

0800df58 <_malloc_r>:
 800df58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df5c:	1ccd      	adds	r5, r1, #3
 800df5e:	f025 0503 	bic.w	r5, r5, #3
 800df62:	3508      	adds	r5, #8
 800df64:	2d0c      	cmp	r5, #12
 800df66:	bf38      	it	cc
 800df68:	250c      	movcc	r5, #12
 800df6a:	2d00      	cmp	r5, #0
 800df6c:	4606      	mov	r6, r0
 800df6e:	db01      	blt.n	800df74 <_malloc_r+0x1c>
 800df70:	42a9      	cmp	r1, r5
 800df72:	d904      	bls.n	800df7e <_malloc_r+0x26>
 800df74:	230c      	movs	r3, #12
 800df76:	6033      	str	r3, [r6, #0]
 800df78:	2000      	movs	r0, #0
 800df7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e054 <_malloc_r+0xfc>
 800df82:	f000 f869 	bl	800e058 <__malloc_lock>
 800df86:	f8d8 3000 	ldr.w	r3, [r8]
 800df8a:	461c      	mov	r4, r3
 800df8c:	bb44      	cbnz	r4, 800dfe0 <_malloc_r+0x88>
 800df8e:	4629      	mov	r1, r5
 800df90:	4630      	mov	r0, r6
 800df92:	f7ff ffbf 	bl	800df14 <sbrk_aligned>
 800df96:	1c43      	adds	r3, r0, #1
 800df98:	4604      	mov	r4, r0
 800df9a:	d158      	bne.n	800e04e <_malloc_r+0xf6>
 800df9c:	f8d8 4000 	ldr.w	r4, [r8]
 800dfa0:	4627      	mov	r7, r4
 800dfa2:	2f00      	cmp	r7, #0
 800dfa4:	d143      	bne.n	800e02e <_malloc_r+0xd6>
 800dfa6:	2c00      	cmp	r4, #0
 800dfa8:	d04b      	beq.n	800e042 <_malloc_r+0xea>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	4639      	mov	r1, r7
 800dfae:	4630      	mov	r0, r6
 800dfb0:	eb04 0903 	add.w	r9, r4, r3
 800dfb4:	f000 fc5c 	bl	800e870 <_sbrk_r>
 800dfb8:	4581      	cmp	r9, r0
 800dfba:	d142      	bne.n	800e042 <_malloc_r+0xea>
 800dfbc:	6821      	ldr	r1, [r4, #0]
 800dfbe:	1a6d      	subs	r5, r5, r1
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7ff ffa6 	bl	800df14 <sbrk_aligned>
 800dfc8:	3001      	adds	r0, #1
 800dfca:	d03a      	beq.n	800e042 <_malloc_r+0xea>
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	442b      	add	r3, r5
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	f8d8 3000 	ldr.w	r3, [r8]
 800dfd6:	685a      	ldr	r2, [r3, #4]
 800dfd8:	bb62      	cbnz	r2, 800e034 <_malloc_r+0xdc>
 800dfda:	f8c8 7000 	str.w	r7, [r8]
 800dfde:	e00f      	b.n	800e000 <_malloc_r+0xa8>
 800dfe0:	6822      	ldr	r2, [r4, #0]
 800dfe2:	1b52      	subs	r2, r2, r5
 800dfe4:	d420      	bmi.n	800e028 <_malloc_r+0xd0>
 800dfe6:	2a0b      	cmp	r2, #11
 800dfe8:	d917      	bls.n	800e01a <_malloc_r+0xc2>
 800dfea:	1961      	adds	r1, r4, r5
 800dfec:	42a3      	cmp	r3, r4
 800dfee:	6025      	str	r5, [r4, #0]
 800dff0:	bf18      	it	ne
 800dff2:	6059      	strne	r1, [r3, #4]
 800dff4:	6863      	ldr	r3, [r4, #4]
 800dff6:	bf08      	it	eq
 800dff8:	f8c8 1000 	streq.w	r1, [r8]
 800dffc:	5162      	str	r2, [r4, r5]
 800dffe:	604b      	str	r3, [r1, #4]
 800e000:	4630      	mov	r0, r6
 800e002:	f000 f82f 	bl	800e064 <__malloc_unlock>
 800e006:	f104 000b 	add.w	r0, r4, #11
 800e00a:	1d23      	adds	r3, r4, #4
 800e00c:	f020 0007 	bic.w	r0, r0, #7
 800e010:	1ac2      	subs	r2, r0, r3
 800e012:	bf1c      	itt	ne
 800e014:	1a1b      	subne	r3, r3, r0
 800e016:	50a3      	strne	r3, [r4, r2]
 800e018:	e7af      	b.n	800df7a <_malloc_r+0x22>
 800e01a:	6862      	ldr	r2, [r4, #4]
 800e01c:	42a3      	cmp	r3, r4
 800e01e:	bf0c      	ite	eq
 800e020:	f8c8 2000 	streq.w	r2, [r8]
 800e024:	605a      	strne	r2, [r3, #4]
 800e026:	e7eb      	b.n	800e000 <_malloc_r+0xa8>
 800e028:	4623      	mov	r3, r4
 800e02a:	6864      	ldr	r4, [r4, #4]
 800e02c:	e7ae      	b.n	800df8c <_malloc_r+0x34>
 800e02e:	463c      	mov	r4, r7
 800e030:	687f      	ldr	r7, [r7, #4]
 800e032:	e7b6      	b.n	800dfa2 <_malloc_r+0x4a>
 800e034:	461a      	mov	r2, r3
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	42a3      	cmp	r3, r4
 800e03a:	d1fb      	bne.n	800e034 <_malloc_r+0xdc>
 800e03c:	2300      	movs	r3, #0
 800e03e:	6053      	str	r3, [r2, #4]
 800e040:	e7de      	b.n	800e000 <_malloc_r+0xa8>
 800e042:	230c      	movs	r3, #12
 800e044:	6033      	str	r3, [r6, #0]
 800e046:	4630      	mov	r0, r6
 800e048:	f000 f80c 	bl	800e064 <__malloc_unlock>
 800e04c:	e794      	b.n	800df78 <_malloc_r+0x20>
 800e04e:	6005      	str	r5, [r0, #0]
 800e050:	e7d6      	b.n	800e000 <_malloc_r+0xa8>
 800e052:	bf00      	nop
 800e054:	20014b54 	.word	0x20014b54

0800e058 <__malloc_lock>:
 800e058:	4801      	ldr	r0, [pc, #4]	@ (800e060 <__malloc_lock+0x8>)
 800e05a:	f7ff bf00 	b.w	800de5e <__retarget_lock_acquire_recursive>
 800e05e:	bf00      	nop
 800e060:	20014b4c 	.word	0x20014b4c

0800e064 <__malloc_unlock>:
 800e064:	4801      	ldr	r0, [pc, #4]	@ (800e06c <__malloc_unlock+0x8>)
 800e066:	f7ff befb 	b.w	800de60 <__retarget_lock_release_recursive>
 800e06a:	bf00      	nop
 800e06c:	20014b4c 	.word	0x20014b4c

0800e070 <__sfputc_r>:
 800e070:	6893      	ldr	r3, [r2, #8]
 800e072:	3b01      	subs	r3, #1
 800e074:	2b00      	cmp	r3, #0
 800e076:	b410      	push	{r4}
 800e078:	6093      	str	r3, [r2, #8]
 800e07a:	da08      	bge.n	800e08e <__sfputc_r+0x1e>
 800e07c:	6994      	ldr	r4, [r2, #24]
 800e07e:	42a3      	cmp	r3, r4
 800e080:	db01      	blt.n	800e086 <__sfputc_r+0x16>
 800e082:	290a      	cmp	r1, #10
 800e084:	d103      	bne.n	800e08e <__sfputc_r+0x1e>
 800e086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08a:	f7ff bde2 	b.w	800dc52 <__swbuf_r>
 800e08e:	6813      	ldr	r3, [r2, #0]
 800e090:	1c58      	adds	r0, r3, #1
 800e092:	6010      	str	r0, [r2, #0]
 800e094:	7019      	strb	r1, [r3, #0]
 800e096:	4608      	mov	r0, r1
 800e098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <__sfputs_r>:
 800e09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	460f      	mov	r7, r1
 800e0a4:	4614      	mov	r4, r2
 800e0a6:	18d5      	adds	r5, r2, r3
 800e0a8:	42ac      	cmp	r4, r5
 800e0aa:	d101      	bne.n	800e0b0 <__sfputs_r+0x12>
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e007      	b.n	800e0c0 <__sfputs_r+0x22>
 800e0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b4:	463a      	mov	r2, r7
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7ff ffda 	bl	800e070 <__sfputc_r>
 800e0bc:	1c43      	adds	r3, r0, #1
 800e0be:	d1f3      	bne.n	800e0a8 <__sfputs_r+0xa>
 800e0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0c4 <_vfiprintf_r>:
 800e0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c8:	460d      	mov	r5, r1
 800e0ca:	b09d      	sub	sp, #116	@ 0x74
 800e0cc:	4614      	mov	r4, r2
 800e0ce:	4698      	mov	r8, r3
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	b118      	cbz	r0, 800e0dc <_vfiprintf_r+0x18>
 800e0d4:	6a03      	ldr	r3, [r0, #32]
 800e0d6:	b90b      	cbnz	r3, 800e0dc <_vfiprintf_r+0x18>
 800e0d8:	f7ff fcd2 	bl	800da80 <__sinit>
 800e0dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0de:	07d9      	lsls	r1, r3, #31
 800e0e0:	d405      	bmi.n	800e0ee <_vfiprintf_r+0x2a>
 800e0e2:	89ab      	ldrh	r3, [r5, #12]
 800e0e4:	059a      	lsls	r2, r3, #22
 800e0e6:	d402      	bmi.n	800e0ee <_vfiprintf_r+0x2a>
 800e0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ea:	f7ff feb8 	bl	800de5e <__retarget_lock_acquire_recursive>
 800e0ee:	89ab      	ldrh	r3, [r5, #12]
 800e0f0:	071b      	lsls	r3, r3, #28
 800e0f2:	d501      	bpl.n	800e0f8 <_vfiprintf_r+0x34>
 800e0f4:	692b      	ldr	r3, [r5, #16]
 800e0f6:	b99b      	cbnz	r3, 800e120 <_vfiprintf_r+0x5c>
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f7ff fde8 	bl	800dcd0 <__swsetup_r>
 800e100:	b170      	cbz	r0, 800e120 <_vfiprintf_r+0x5c>
 800e102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e104:	07dc      	lsls	r4, r3, #31
 800e106:	d504      	bpl.n	800e112 <_vfiprintf_r+0x4e>
 800e108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e10c:	b01d      	add	sp, #116	@ 0x74
 800e10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e112:	89ab      	ldrh	r3, [r5, #12]
 800e114:	0598      	lsls	r0, r3, #22
 800e116:	d4f7      	bmi.n	800e108 <_vfiprintf_r+0x44>
 800e118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e11a:	f7ff fea1 	bl	800de60 <__retarget_lock_release_recursive>
 800e11e:	e7f3      	b.n	800e108 <_vfiprintf_r+0x44>
 800e120:	2300      	movs	r3, #0
 800e122:	9309      	str	r3, [sp, #36]	@ 0x24
 800e124:	2320      	movs	r3, #32
 800e126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e12a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e12e:	2330      	movs	r3, #48	@ 0x30
 800e130:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2e0 <_vfiprintf_r+0x21c>
 800e134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e138:	f04f 0901 	mov.w	r9, #1
 800e13c:	4623      	mov	r3, r4
 800e13e:	469a      	mov	sl, r3
 800e140:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e144:	b10a      	cbz	r2, 800e14a <_vfiprintf_r+0x86>
 800e146:	2a25      	cmp	r2, #37	@ 0x25
 800e148:	d1f9      	bne.n	800e13e <_vfiprintf_r+0x7a>
 800e14a:	ebba 0b04 	subs.w	fp, sl, r4
 800e14e:	d00b      	beq.n	800e168 <_vfiprintf_r+0xa4>
 800e150:	465b      	mov	r3, fp
 800e152:	4622      	mov	r2, r4
 800e154:	4629      	mov	r1, r5
 800e156:	4630      	mov	r0, r6
 800e158:	f7ff ffa1 	bl	800e09e <__sfputs_r>
 800e15c:	3001      	adds	r0, #1
 800e15e:	f000 80a7 	beq.w	800e2b0 <_vfiprintf_r+0x1ec>
 800e162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e164:	445a      	add	r2, fp
 800e166:	9209      	str	r2, [sp, #36]	@ 0x24
 800e168:	f89a 3000 	ldrb.w	r3, [sl]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 809f 	beq.w	800e2b0 <_vfiprintf_r+0x1ec>
 800e172:	2300      	movs	r3, #0
 800e174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e17c:	f10a 0a01 	add.w	sl, sl, #1
 800e180:	9304      	str	r3, [sp, #16]
 800e182:	9307      	str	r3, [sp, #28]
 800e184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e188:	931a      	str	r3, [sp, #104]	@ 0x68
 800e18a:	4654      	mov	r4, sl
 800e18c:	2205      	movs	r2, #5
 800e18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e192:	4853      	ldr	r0, [pc, #332]	@ (800e2e0 <_vfiprintf_r+0x21c>)
 800e194:	f7f2 f894 	bl	80002c0 <memchr>
 800e198:	9a04      	ldr	r2, [sp, #16]
 800e19a:	b9d8      	cbnz	r0, 800e1d4 <_vfiprintf_r+0x110>
 800e19c:	06d1      	lsls	r1, r2, #27
 800e19e:	bf44      	itt	mi
 800e1a0:	2320      	movmi	r3, #32
 800e1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a6:	0713      	lsls	r3, r2, #28
 800e1a8:	bf44      	itt	mi
 800e1aa:	232b      	movmi	r3, #43	@ 0x2b
 800e1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1b6:	d015      	beq.n	800e1e4 <_vfiprintf_r+0x120>
 800e1b8:	9a07      	ldr	r2, [sp, #28]
 800e1ba:	4654      	mov	r4, sl
 800e1bc:	2000      	movs	r0, #0
 800e1be:	f04f 0c0a 	mov.w	ip, #10
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1c8:	3b30      	subs	r3, #48	@ 0x30
 800e1ca:	2b09      	cmp	r3, #9
 800e1cc:	d94b      	bls.n	800e266 <_vfiprintf_r+0x1a2>
 800e1ce:	b1b0      	cbz	r0, 800e1fe <_vfiprintf_r+0x13a>
 800e1d0:	9207      	str	r2, [sp, #28]
 800e1d2:	e014      	b.n	800e1fe <_vfiprintf_r+0x13a>
 800e1d4:	eba0 0308 	sub.w	r3, r0, r8
 800e1d8:	fa09 f303 	lsl.w	r3, r9, r3
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	9304      	str	r3, [sp, #16]
 800e1e0:	46a2      	mov	sl, r4
 800e1e2:	e7d2      	b.n	800e18a <_vfiprintf_r+0xc6>
 800e1e4:	9b03      	ldr	r3, [sp, #12]
 800e1e6:	1d19      	adds	r1, r3, #4
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	9103      	str	r1, [sp, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	bfbb      	ittet	lt
 800e1f0:	425b      	neglt	r3, r3
 800e1f2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1f6:	9307      	strge	r3, [sp, #28]
 800e1f8:	9307      	strlt	r3, [sp, #28]
 800e1fa:	bfb8      	it	lt
 800e1fc:	9204      	strlt	r2, [sp, #16]
 800e1fe:	7823      	ldrb	r3, [r4, #0]
 800e200:	2b2e      	cmp	r3, #46	@ 0x2e
 800e202:	d10a      	bne.n	800e21a <_vfiprintf_r+0x156>
 800e204:	7863      	ldrb	r3, [r4, #1]
 800e206:	2b2a      	cmp	r3, #42	@ 0x2a
 800e208:	d132      	bne.n	800e270 <_vfiprintf_r+0x1ac>
 800e20a:	9b03      	ldr	r3, [sp, #12]
 800e20c:	1d1a      	adds	r2, r3, #4
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	9203      	str	r2, [sp, #12]
 800e212:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e216:	3402      	adds	r4, #2
 800e218:	9305      	str	r3, [sp, #20]
 800e21a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2f0 <_vfiprintf_r+0x22c>
 800e21e:	7821      	ldrb	r1, [r4, #0]
 800e220:	2203      	movs	r2, #3
 800e222:	4650      	mov	r0, sl
 800e224:	f7f2 f84c 	bl	80002c0 <memchr>
 800e228:	b138      	cbz	r0, 800e23a <_vfiprintf_r+0x176>
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	eba0 000a 	sub.w	r0, r0, sl
 800e230:	2240      	movs	r2, #64	@ 0x40
 800e232:	4082      	lsls	r2, r0
 800e234:	4313      	orrs	r3, r2
 800e236:	3401      	adds	r4, #1
 800e238:	9304      	str	r3, [sp, #16]
 800e23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23e:	4829      	ldr	r0, [pc, #164]	@ (800e2e4 <_vfiprintf_r+0x220>)
 800e240:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e244:	2206      	movs	r2, #6
 800e246:	f7f2 f83b 	bl	80002c0 <memchr>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d03f      	beq.n	800e2ce <_vfiprintf_r+0x20a>
 800e24e:	4b26      	ldr	r3, [pc, #152]	@ (800e2e8 <_vfiprintf_r+0x224>)
 800e250:	bb1b      	cbnz	r3, 800e29a <_vfiprintf_r+0x1d6>
 800e252:	9b03      	ldr	r3, [sp, #12]
 800e254:	3307      	adds	r3, #7
 800e256:	f023 0307 	bic.w	r3, r3, #7
 800e25a:	3308      	adds	r3, #8
 800e25c:	9303      	str	r3, [sp, #12]
 800e25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e260:	443b      	add	r3, r7
 800e262:	9309      	str	r3, [sp, #36]	@ 0x24
 800e264:	e76a      	b.n	800e13c <_vfiprintf_r+0x78>
 800e266:	fb0c 3202 	mla	r2, ip, r2, r3
 800e26a:	460c      	mov	r4, r1
 800e26c:	2001      	movs	r0, #1
 800e26e:	e7a8      	b.n	800e1c2 <_vfiprintf_r+0xfe>
 800e270:	2300      	movs	r3, #0
 800e272:	3401      	adds	r4, #1
 800e274:	9305      	str	r3, [sp, #20]
 800e276:	4619      	mov	r1, r3
 800e278:	f04f 0c0a 	mov.w	ip, #10
 800e27c:	4620      	mov	r0, r4
 800e27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e282:	3a30      	subs	r2, #48	@ 0x30
 800e284:	2a09      	cmp	r2, #9
 800e286:	d903      	bls.n	800e290 <_vfiprintf_r+0x1cc>
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d0c6      	beq.n	800e21a <_vfiprintf_r+0x156>
 800e28c:	9105      	str	r1, [sp, #20]
 800e28e:	e7c4      	b.n	800e21a <_vfiprintf_r+0x156>
 800e290:	fb0c 2101 	mla	r1, ip, r1, r2
 800e294:	4604      	mov	r4, r0
 800e296:	2301      	movs	r3, #1
 800e298:	e7f0      	b.n	800e27c <_vfiprintf_r+0x1b8>
 800e29a:	ab03      	add	r3, sp, #12
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	462a      	mov	r2, r5
 800e2a0:	4b12      	ldr	r3, [pc, #72]	@ (800e2ec <_vfiprintf_r+0x228>)
 800e2a2:	a904      	add	r1, sp, #16
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f3af 8000 	nop.w
 800e2aa:	4607      	mov	r7, r0
 800e2ac:	1c78      	adds	r0, r7, #1
 800e2ae:	d1d6      	bne.n	800e25e <_vfiprintf_r+0x19a>
 800e2b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2b2:	07d9      	lsls	r1, r3, #31
 800e2b4:	d405      	bmi.n	800e2c2 <_vfiprintf_r+0x1fe>
 800e2b6:	89ab      	ldrh	r3, [r5, #12]
 800e2b8:	059a      	lsls	r2, r3, #22
 800e2ba:	d402      	bmi.n	800e2c2 <_vfiprintf_r+0x1fe>
 800e2bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2be:	f7ff fdcf 	bl	800de60 <__retarget_lock_release_recursive>
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	065b      	lsls	r3, r3, #25
 800e2c6:	f53f af1f 	bmi.w	800e108 <_vfiprintf_r+0x44>
 800e2ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2cc:	e71e      	b.n	800e10c <_vfiprintf_r+0x48>
 800e2ce:	ab03      	add	r3, sp, #12
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	4b05      	ldr	r3, [pc, #20]	@ (800e2ec <_vfiprintf_r+0x228>)
 800e2d6:	a904      	add	r1, sp, #16
 800e2d8:	4630      	mov	r0, r6
 800e2da:	f000 f879 	bl	800e3d0 <_printf_i>
 800e2de:	e7e4      	b.n	800e2aa <_vfiprintf_r+0x1e6>
 800e2e0:	0800efae 	.word	0x0800efae
 800e2e4:	0800efb8 	.word	0x0800efb8
 800e2e8:	00000000 	.word	0x00000000
 800e2ec:	0800e09f 	.word	0x0800e09f
 800e2f0:	0800efb4 	.word	0x0800efb4

0800e2f4 <_printf_common>:
 800e2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f8:	4616      	mov	r6, r2
 800e2fa:	4698      	mov	r8, r3
 800e2fc:	688a      	ldr	r2, [r1, #8]
 800e2fe:	690b      	ldr	r3, [r1, #16]
 800e300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e304:	4293      	cmp	r3, r2
 800e306:	bfb8      	it	lt
 800e308:	4613      	movlt	r3, r2
 800e30a:	6033      	str	r3, [r6, #0]
 800e30c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e310:	4607      	mov	r7, r0
 800e312:	460c      	mov	r4, r1
 800e314:	b10a      	cbz	r2, 800e31a <_printf_common+0x26>
 800e316:	3301      	adds	r3, #1
 800e318:	6033      	str	r3, [r6, #0]
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	0699      	lsls	r1, r3, #26
 800e31e:	bf42      	ittt	mi
 800e320:	6833      	ldrmi	r3, [r6, #0]
 800e322:	3302      	addmi	r3, #2
 800e324:	6033      	strmi	r3, [r6, #0]
 800e326:	6825      	ldr	r5, [r4, #0]
 800e328:	f015 0506 	ands.w	r5, r5, #6
 800e32c:	d106      	bne.n	800e33c <_printf_common+0x48>
 800e32e:	f104 0a19 	add.w	sl, r4, #25
 800e332:	68e3      	ldr	r3, [r4, #12]
 800e334:	6832      	ldr	r2, [r6, #0]
 800e336:	1a9b      	subs	r3, r3, r2
 800e338:	42ab      	cmp	r3, r5
 800e33a:	dc26      	bgt.n	800e38a <_printf_common+0x96>
 800e33c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e340:	6822      	ldr	r2, [r4, #0]
 800e342:	3b00      	subs	r3, #0
 800e344:	bf18      	it	ne
 800e346:	2301      	movne	r3, #1
 800e348:	0692      	lsls	r2, r2, #26
 800e34a:	d42b      	bmi.n	800e3a4 <_printf_common+0xb0>
 800e34c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e350:	4641      	mov	r1, r8
 800e352:	4638      	mov	r0, r7
 800e354:	47c8      	blx	r9
 800e356:	3001      	adds	r0, #1
 800e358:	d01e      	beq.n	800e398 <_printf_common+0xa4>
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	6922      	ldr	r2, [r4, #16]
 800e35e:	f003 0306 	and.w	r3, r3, #6
 800e362:	2b04      	cmp	r3, #4
 800e364:	bf02      	ittt	eq
 800e366:	68e5      	ldreq	r5, [r4, #12]
 800e368:	6833      	ldreq	r3, [r6, #0]
 800e36a:	1aed      	subeq	r5, r5, r3
 800e36c:	68a3      	ldr	r3, [r4, #8]
 800e36e:	bf0c      	ite	eq
 800e370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e374:	2500      	movne	r5, #0
 800e376:	4293      	cmp	r3, r2
 800e378:	bfc4      	itt	gt
 800e37a:	1a9b      	subgt	r3, r3, r2
 800e37c:	18ed      	addgt	r5, r5, r3
 800e37e:	2600      	movs	r6, #0
 800e380:	341a      	adds	r4, #26
 800e382:	42b5      	cmp	r5, r6
 800e384:	d11a      	bne.n	800e3bc <_printf_common+0xc8>
 800e386:	2000      	movs	r0, #0
 800e388:	e008      	b.n	800e39c <_printf_common+0xa8>
 800e38a:	2301      	movs	r3, #1
 800e38c:	4652      	mov	r2, sl
 800e38e:	4641      	mov	r1, r8
 800e390:	4638      	mov	r0, r7
 800e392:	47c8      	blx	r9
 800e394:	3001      	adds	r0, #1
 800e396:	d103      	bne.n	800e3a0 <_printf_common+0xac>
 800e398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	e7c6      	b.n	800e332 <_printf_common+0x3e>
 800e3a4:	18e1      	adds	r1, r4, r3
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	2030      	movs	r0, #48	@ 0x30
 800e3aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e3ae:	4422      	add	r2, r4
 800e3b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e3b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e3b8:	3302      	adds	r3, #2
 800e3ba:	e7c7      	b.n	800e34c <_printf_common+0x58>
 800e3bc:	2301      	movs	r3, #1
 800e3be:	4622      	mov	r2, r4
 800e3c0:	4641      	mov	r1, r8
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	47c8      	blx	r9
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	d0e6      	beq.n	800e398 <_printf_common+0xa4>
 800e3ca:	3601      	adds	r6, #1
 800e3cc:	e7d9      	b.n	800e382 <_printf_common+0x8e>
	...

0800e3d0 <_printf_i>:
 800e3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d4:	7e0f      	ldrb	r7, [r1, #24]
 800e3d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3d8:	2f78      	cmp	r7, #120	@ 0x78
 800e3da:	4691      	mov	r9, r2
 800e3dc:	4680      	mov	r8, r0
 800e3de:	460c      	mov	r4, r1
 800e3e0:	469a      	mov	sl, r3
 800e3e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3e6:	d807      	bhi.n	800e3f8 <_printf_i+0x28>
 800e3e8:	2f62      	cmp	r7, #98	@ 0x62
 800e3ea:	d80a      	bhi.n	800e402 <_printf_i+0x32>
 800e3ec:	2f00      	cmp	r7, #0
 800e3ee:	f000 80d2 	beq.w	800e596 <_printf_i+0x1c6>
 800e3f2:	2f58      	cmp	r7, #88	@ 0x58
 800e3f4:	f000 80b9 	beq.w	800e56a <_printf_i+0x19a>
 800e3f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e400:	e03a      	b.n	800e478 <_printf_i+0xa8>
 800e402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e406:	2b15      	cmp	r3, #21
 800e408:	d8f6      	bhi.n	800e3f8 <_printf_i+0x28>
 800e40a:	a101      	add	r1, pc, #4	@ (adr r1, 800e410 <_printf_i+0x40>)
 800e40c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e410:	0800e469 	.word	0x0800e469
 800e414:	0800e47d 	.word	0x0800e47d
 800e418:	0800e3f9 	.word	0x0800e3f9
 800e41c:	0800e3f9 	.word	0x0800e3f9
 800e420:	0800e3f9 	.word	0x0800e3f9
 800e424:	0800e3f9 	.word	0x0800e3f9
 800e428:	0800e47d 	.word	0x0800e47d
 800e42c:	0800e3f9 	.word	0x0800e3f9
 800e430:	0800e3f9 	.word	0x0800e3f9
 800e434:	0800e3f9 	.word	0x0800e3f9
 800e438:	0800e3f9 	.word	0x0800e3f9
 800e43c:	0800e57d 	.word	0x0800e57d
 800e440:	0800e4a7 	.word	0x0800e4a7
 800e444:	0800e537 	.word	0x0800e537
 800e448:	0800e3f9 	.word	0x0800e3f9
 800e44c:	0800e3f9 	.word	0x0800e3f9
 800e450:	0800e59f 	.word	0x0800e59f
 800e454:	0800e3f9 	.word	0x0800e3f9
 800e458:	0800e4a7 	.word	0x0800e4a7
 800e45c:	0800e3f9 	.word	0x0800e3f9
 800e460:	0800e3f9 	.word	0x0800e3f9
 800e464:	0800e53f 	.word	0x0800e53f
 800e468:	6833      	ldr	r3, [r6, #0]
 800e46a:	1d1a      	adds	r2, r3, #4
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	6032      	str	r2, [r6, #0]
 800e470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e478:	2301      	movs	r3, #1
 800e47a:	e09d      	b.n	800e5b8 <_printf_i+0x1e8>
 800e47c:	6833      	ldr	r3, [r6, #0]
 800e47e:	6820      	ldr	r0, [r4, #0]
 800e480:	1d19      	adds	r1, r3, #4
 800e482:	6031      	str	r1, [r6, #0]
 800e484:	0606      	lsls	r6, r0, #24
 800e486:	d501      	bpl.n	800e48c <_printf_i+0xbc>
 800e488:	681d      	ldr	r5, [r3, #0]
 800e48a:	e003      	b.n	800e494 <_printf_i+0xc4>
 800e48c:	0645      	lsls	r5, r0, #25
 800e48e:	d5fb      	bpl.n	800e488 <_printf_i+0xb8>
 800e490:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e494:	2d00      	cmp	r5, #0
 800e496:	da03      	bge.n	800e4a0 <_printf_i+0xd0>
 800e498:	232d      	movs	r3, #45	@ 0x2d
 800e49a:	426d      	negs	r5, r5
 800e49c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4a0:	4859      	ldr	r0, [pc, #356]	@ (800e608 <_printf_i+0x238>)
 800e4a2:	230a      	movs	r3, #10
 800e4a4:	e011      	b.n	800e4ca <_printf_i+0xfa>
 800e4a6:	6821      	ldr	r1, [r4, #0]
 800e4a8:	6833      	ldr	r3, [r6, #0]
 800e4aa:	0608      	lsls	r0, r1, #24
 800e4ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4b0:	d402      	bmi.n	800e4b8 <_printf_i+0xe8>
 800e4b2:	0649      	lsls	r1, r1, #25
 800e4b4:	bf48      	it	mi
 800e4b6:	b2ad      	uxthmi	r5, r5
 800e4b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e4ba:	4853      	ldr	r0, [pc, #332]	@ (800e608 <_printf_i+0x238>)
 800e4bc:	6033      	str	r3, [r6, #0]
 800e4be:	bf14      	ite	ne
 800e4c0:	230a      	movne	r3, #10
 800e4c2:	2308      	moveq	r3, #8
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e4ca:	6866      	ldr	r6, [r4, #4]
 800e4cc:	60a6      	str	r6, [r4, #8]
 800e4ce:	2e00      	cmp	r6, #0
 800e4d0:	bfa2      	ittt	ge
 800e4d2:	6821      	ldrge	r1, [r4, #0]
 800e4d4:	f021 0104 	bicge.w	r1, r1, #4
 800e4d8:	6021      	strge	r1, [r4, #0]
 800e4da:	b90d      	cbnz	r5, 800e4e0 <_printf_i+0x110>
 800e4dc:	2e00      	cmp	r6, #0
 800e4de:	d04b      	beq.n	800e578 <_printf_i+0x1a8>
 800e4e0:	4616      	mov	r6, r2
 800e4e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4e6:	fb03 5711 	mls	r7, r3, r1, r5
 800e4ea:	5dc7      	ldrb	r7, [r0, r7]
 800e4ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4f0:	462f      	mov	r7, r5
 800e4f2:	42bb      	cmp	r3, r7
 800e4f4:	460d      	mov	r5, r1
 800e4f6:	d9f4      	bls.n	800e4e2 <_printf_i+0x112>
 800e4f8:	2b08      	cmp	r3, #8
 800e4fa:	d10b      	bne.n	800e514 <_printf_i+0x144>
 800e4fc:	6823      	ldr	r3, [r4, #0]
 800e4fe:	07df      	lsls	r7, r3, #31
 800e500:	d508      	bpl.n	800e514 <_printf_i+0x144>
 800e502:	6923      	ldr	r3, [r4, #16]
 800e504:	6861      	ldr	r1, [r4, #4]
 800e506:	4299      	cmp	r1, r3
 800e508:	bfde      	ittt	le
 800e50a:	2330      	movle	r3, #48	@ 0x30
 800e50c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e510:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e514:	1b92      	subs	r2, r2, r6
 800e516:	6122      	str	r2, [r4, #16]
 800e518:	f8cd a000 	str.w	sl, [sp]
 800e51c:	464b      	mov	r3, r9
 800e51e:	aa03      	add	r2, sp, #12
 800e520:	4621      	mov	r1, r4
 800e522:	4640      	mov	r0, r8
 800e524:	f7ff fee6 	bl	800e2f4 <_printf_common>
 800e528:	3001      	adds	r0, #1
 800e52a:	d14a      	bne.n	800e5c2 <_printf_i+0x1f2>
 800e52c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e530:	b004      	add	sp, #16
 800e532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	f043 0320 	orr.w	r3, r3, #32
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	4833      	ldr	r0, [pc, #204]	@ (800e60c <_printf_i+0x23c>)
 800e540:	2778      	movs	r7, #120	@ 0x78
 800e542:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	6831      	ldr	r1, [r6, #0]
 800e54a:	061f      	lsls	r7, r3, #24
 800e54c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e550:	d402      	bmi.n	800e558 <_printf_i+0x188>
 800e552:	065f      	lsls	r7, r3, #25
 800e554:	bf48      	it	mi
 800e556:	b2ad      	uxthmi	r5, r5
 800e558:	6031      	str	r1, [r6, #0]
 800e55a:	07d9      	lsls	r1, r3, #31
 800e55c:	bf44      	itt	mi
 800e55e:	f043 0320 	orrmi.w	r3, r3, #32
 800e562:	6023      	strmi	r3, [r4, #0]
 800e564:	b11d      	cbz	r5, 800e56e <_printf_i+0x19e>
 800e566:	2310      	movs	r3, #16
 800e568:	e7ac      	b.n	800e4c4 <_printf_i+0xf4>
 800e56a:	4827      	ldr	r0, [pc, #156]	@ (800e608 <_printf_i+0x238>)
 800e56c:	e7e9      	b.n	800e542 <_printf_i+0x172>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	f023 0320 	bic.w	r3, r3, #32
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	e7f6      	b.n	800e566 <_printf_i+0x196>
 800e578:	4616      	mov	r6, r2
 800e57a:	e7bd      	b.n	800e4f8 <_printf_i+0x128>
 800e57c:	6833      	ldr	r3, [r6, #0]
 800e57e:	6825      	ldr	r5, [r4, #0]
 800e580:	6961      	ldr	r1, [r4, #20]
 800e582:	1d18      	adds	r0, r3, #4
 800e584:	6030      	str	r0, [r6, #0]
 800e586:	062e      	lsls	r6, r5, #24
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	d501      	bpl.n	800e590 <_printf_i+0x1c0>
 800e58c:	6019      	str	r1, [r3, #0]
 800e58e:	e002      	b.n	800e596 <_printf_i+0x1c6>
 800e590:	0668      	lsls	r0, r5, #25
 800e592:	d5fb      	bpl.n	800e58c <_printf_i+0x1bc>
 800e594:	8019      	strh	r1, [r3, #0]
 800e596:	2300      	movs	r3, #0
 800e598:	6123      	str	r3, [r4, #16]
 800e59a:	4616      	mov	r6, r2
 800e59c:	e7bc      	b.n	800e518 <_printf_i+0x148>
 800e59e:	6833      	ldr	r3, [r6, #0]
 800e5a0:	1d1a      	adds	r2, r3, #4
 800e5a2:	6032      	str	r2, [r6, #0]
 800e5a4:	681e      	ldr	r6, [r3, #0]
 800e5a6:	6862      	ldr	r2, [r4, #4]
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7f1 fe88 	bl	80002c0 <memchr>
 800e5b0:	b108      	cbz	r0, 800e5b6 <_printf_i+0x1e6>
 800e5b2:	1b80      	subs	r0, r0, r6
 800e5b4:	6060      	str	r0, [r4, #4]
 800e5b6:	6863      	ldr	r3, [r4, #4]
 800e5b8:	6123      	str	r3, [r4, #16]
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5c0:	e7aa      	b.n	800e518 <_printf_i+0x148>
 800e5c2:	6923      	ldr	r3, [r4, #16]
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	4649      	mov	r1, r9
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	47d0      	blx	sl
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	d0ad      	beq.n	800e52c <_printf_i+0x15c>
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	079b      	lsls	r3, r3, #30
 800e5d4:	d413      	bmi.n	800e5fe <_printf_i+0x22e>
 800e5d6:	68e0      	ldr	r0, [r4, #12]
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	4298      	cmp	r0, r3
 800e5dc:	bfb8      	it	lt
 800e5de:	4618      	movlt	r0, r3
 800e5e0:	e7a6      	b.n	800e530 <_printf_i+0x160>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	4640      	mov	r0, r8
 800e5ea:	47d0      	blx	sl
 800e5ec:	3001      	adds	r0, #1
 800e5ee:	d09d      	beq.n	800e52c <_printf_i+0x15c>
 800e5f0:	3501      	adds	r5, #1
 800e5f2:	68e3      	ldr	r3, [r4, #12]
 800e5f4:	9903      	ldr	r1, [sp, #12]
 800e5f6:	1a5b      	subs	r3, r3, r1
 800e5f8:	42ab      	cmp	r3, r5
 800e5fa:	dcf2      	bgt.n	800e5e2 <_printf_i+0x212>
 800e5fc:	e7eb      	b.n	800e5d6 <_printf_i+0x206>
 800e5fe:	2500      	movs	r5, #0
 800e600:	f104 0619 	add.w	r6, r4, #25
 800e604:	e7f5      	b.n	800e5f2 <_printf_i+0x222>
 800e606:	bf00      	nop
 800e608:	0800efbf 	.word	0x0800efbf
 800e60c:	0800efd0 	.word	0x0800efd0

0800e610 <__sflush_r>:
 800e610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e618:	0716      	lsls	r6, r2, #28
 800e61a:	4605      	mov	r5, r0
 800e61c:	460c      	mov	r4, r1
 800e61e:	d454      	bmi.n	800e6ca <__sflush_r+0xba>
 800e620:	684b      	ldr	r3, [r1, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	dc02      	bgt.n	800e62c <__sflush_r+0x1c>
 800e626:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e628:	2b00      	cmp	r3, #0
 800e62a:	dd48      	ble.n	800e6be <__sflush_r+0xae>
 800e62c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e62e:	2e00      	cmp	r6, #0
 800e630:	d045      	beq.n	800e6be <__sflush_r+0xae>
 800e632:	2300      	movs	r3, #0
 800e634:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e638:	682f      	ldr	r7, [r5, #0]
 800e63a:	6a21      	ldr	r1, [r4, #32]
 800e63c:	602b      	str	r3, [r5, #0]
 800e63e:	d030      	beq.n	800e6a2 <__sflush_r+0x92>
 800e640:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	0759      	lsls	r1, r3, #29
 800e646:	d505      	bpl.n	800e654 <__sflush_r+0x44>
 800e648:	6863      	ldr	r3, [r4, #4]
 800e64a:	1ad2      	subs	r2, r2, r3
 800e64c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e64e:	b10b      	cbz	r3, 800e654 <__sflush_r+0x44>
 800e650:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e652:	1ad2      	subs	r2, r2, r3
 800e654:	2300      	movs	r3, #0
 800e656:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e658:	6a21      	ldr	r1, [r4, #32]
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b0      	blx	r6
 800e65e:	1c43      	adds	r3, r0, #1
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	d106      	bne.n	800e672 <__sflush_r+0x62>
 800e664:	6829      	ldr	r1, [r5, #0]
 800e666:	291d      	cmp	r1, #29
 800e668:	d82b      	bhi.n	800e6c2 <__sflush_r+0xb2>
 800e66a:	4a2a      	ldr	r2, [pc, #168]	@ (800e714 <__sflush_r+0x104>)
 800e66c:	410a      	asrs	r2, r1
 800e66e:	07d6      	lsls	r6, r2, #31
 800e670:	d427      	bmi.n	800e6c2 <__sflush_r+0xb2>
 800e672:	2200      	movs	r2, #0
 800e674:	6062      	str	r2, [r4, #4]
 800e676:	04d9      	lsls	r1, r3, #19
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	6022      	str	r2, [r4, #0]
 800e67c:	d504      	bpl.n	800e688 <__sflush_r+0x78>
 800e67e:	1c42      	adds	r2, r0, #1
 800e680:	d101      	bne.n	800e686 <__sflush_r+0x76>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	b903      	cbnz	r3, 800e688 <__sflush_r+0x78>
 800e686:	6560      	str	r0, [r4, #84]	@ 0x54
 800e688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e68a:	602f      	str	r7, [r5, #0]
 800e68c:	b1b9      	cbz	r1, 800e6be <__sflush_r+0xae>
 800e68e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e692:	4299      	cmp	r1, r3
 800e694:	d002      	beq.n	800e69c <__sflush_r+0x8c>
 800e696:	4628      	mov	r0, r5
 800e698:	f7ff fbf2 	bl	800de80 <_free_r>
 800e69c:	2300      	movs	r3, #0
 800e69e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6a0:	e00d      	b.n	800e6be <__sflush_r+0xae>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	47b0      	blx	r6
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	1c50      	adds	r0, r2, #1
 800e6ac:	d1c9      	bne.n	800e642 <__sflush_r+0x32>
 800e6ae:	682b      	ldr	r3, [r5, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d0c6      	beq.n	800e642 <__sflush_r+0x32>
 800e6b4:	2b1d      	cmp	r3, #29
 800e6b6:	d001      	beq.n	800e6bc <__sflush_r+0xac>
 800e6b8:	2b16      	cmp	r3, #22
 800e6ba:	d11e      	bne.n	800e6fa <__sflush_r+0xea>
 800e6bc:	602f      	str	r7, [r5, #0]
 800e6be:	2000      	movs	r0, #0
 800e6c0:	e022      	b.n	800e708 <__sflush_r+0xf8>
 800e6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	e01b      	b.n	800e702 <__sflush_r+0xf2>
 800e6ca:	690f      	ldr	r7, [r1, #16]
 800e6cc:	2f00      	cmp	r7, #0
 800e6ce:	d0f6      	beq.n	800e6be <__sflush_r+0xae>
 800e6d0:	0793      	lsls	r3, r2, #30
 800e6d2:	680e      	ldr	r6, [r1, #0]
 800e6d4:	bf08      	it	eq
 800e6d6:	694b      	ldreq	r3, [r1, #20]
 800e6d8:	600f      	str	r7, [r1, #0]
 800e6da:	bf18      	it	ne
 800e6dc:	2300      	movne	r3, #0
 800e6de:	eba6 0807 	sub.w	r8, r6, r7
 800e6e2:	608b      	str	r3, [r1, #8]
 800e6e4:	f1b8 0f00 	cmp.w	r8, #0
 800e6e8:	dde9      	ble.n	800e6be <__sflush_r+0xae>
 800e6ea:	6a21      	ldr	r1, [r4, #32]
 800e6ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6ee:	4643      	mov	r3, r8
 800e6f0:	463a      	mov	r2, r7
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	47b0      	blx	r6
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	dc08      	bgt.n	800e70c <__sflush_r+0xfc>
 800e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e70c:	4407      	add	r7, r0
 800e70e:	eba8 0800 	sub.w	r8, r8, r0
 800e712:	e7e7      	b.n	800e6e4 <__sflush_r+0xd4>
 800e714:	dfbffffe 	.word	0xdfbffffe

0800e718 <_fflush_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	690b      	ldr	r3, [r1, #16]
 800e71c:	4605      	mov	r5, r0
 800e71e:	460c      	mov	r4, r1
 800e720:	b913      	cbnz	r3, 800e728 <_fflush_r+0x10>
 800e722:	2500      	movs	r5, #0
 800e724:	4628      	mov	r0, r5
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	b118      	cbz	r0, 800e732 <_fflush_r+0x1a>
 800e72a:	6a03      	ldr	r3, [r0, #32]
 800e72c:	b90b      	cbnz	r3, 800e732 <_fflush_r+0x1a>
 800e72e:	f7ff f9a7 	bl	800da80 <__sinit>
 800e732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d0f3      	beq.n	800e722 <_fflush_r+0xa>
 800e73a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e73c:	07d0      	lsls	r0, r2, #31
 800e73e:	d404      	bmi.n	800e74a <_fflush_r+0x32>
 800e740:	0599      	lsls	r1, r3, #22
 800e742:	d402      	bmi.n	800e74a <_fflush_r+0x32>
 800e744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e746:	f7ff fb8a 	bl	800de5e <__retarget_lock_acquire_recursive>
 800e74a:	4628      	mov	r0, r5
 800e74c:	4621      	mov	r1, r4
 800e74e:	f7ff ff5f 	bl	800e610 <__sflush_r>
 800e752:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e754:	07da      	lsls	r2, r3, #31
 800e756:	4605      	mov	r5, r0
 800e758:	d4e4      	bmi.n	800e724 <_fflush_r+0xc>
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	059b      	lsls	r3, r3, #22
 800e75e:	d4e1      	bmi.n	800e724 <_fflush_r+0xc>
 800e760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e762:	f7ff fb7d 	bl	800de60 <__retarget_lock_release_recursive>
 800e766:	e7dd      	b.n	800e724 <_fflush_r+0xc>

0800e768 <__swhatbuf_r>:
 800e768:	b570      	push	{r4, r5, r6, lr}
 800e76a:	460c      	mov	r4, r1
 800e76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e770:	2900      	cmp	r1, #0
 800e772:	b096      	sub	sp, #88	@ 0x58
 800e774:	4615      	mov	r5, r2
 800e776:	461e      	mov	r6, r3
 800e778:	da0d      	bge.n	800e796 <__swhatbuf_r+0x2e>
 800e77a:	89a3      	ldrh	r3, [r4, #12]
 800e77c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e780:	f04f 0100 	mov.w	r1, #0
 800e784:	bf14      	ite	ne
 800e786:	2340      	movne	r3, #64	@ 0x40
 800e788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e78c:	2000      	movs	r0, #0
 800e78e:	6031      	str	r1, [r6, #0]
 800e790:	602b      	str	r3, [r5, #0]
 800e792:	b016      	add	sp, #88	@ 0x58
 800e794:	bd70      	pop	{r4, r5, r6, pc}
 800e796:	466a      	mov	r2, sp
 800e798:	f000 f848 	bl	800e82c <_fstat_r>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	dbec      	blt.n	800e77a <__swhatbuf_r+0x12>
 800e7a0:	9901      	ldr	r1, [sp, #4]
 800e7a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7aa:	4259      	negs	r1, r3
 800e7ac:	4159      	adcs	r1, r3
 800e7ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7b2:	e7eb      	b.n	800e78c <__swhatbuf_r+0x24>

0800e7b4 <__smakebuf_r>:
 800e7b4:	898b      	ldrh	r3, [r1, #12]
 800e7b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7b8:	079d      	lsls	r5, r3, #30
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460c      	mov	r4, r1
 800e7be:	d507      	bpl.n	800e7d0 <__smakebuf_r+0x1c>
 800e7c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	6123      	str	r3, [r4, #16]
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	6163      	str	r3, [r4, #20]
 800e7cc:	b003      	add	sp, #12
 800e7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7d0:	ab01      	add	r3, sp, #4
 800e7d2:	466a      	mov	r2, sp
 800e7d4:	f7ff ffc8 	bl	800e768 <__swhatbuf_r>
 800e7d8:	9f00      	ldr	r7, [sp, #0]
 800e7da:	4605      	mov	r5, r0
 800e7dc:	4639      	mov	r1, r7
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f7ff fbba 	bl	800df58 <_malloc_r>
 800e7e4:	b948      	cbnz	r0, 800e7fa <__smakebuf_r+0x46>
 800e7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ea:	059a      	lsls	r2, r3, #22
 800e7ec:	d4ee      	bmi.n	800e7cc <__smakebuf_r+0x18>
 800e7ee:	f023 0303 	bic.w	r3, r3, #3
 800e7f2:	f043 0302 	orr.w	r3, r3, #2
 800e7f6:	81a3      	strh	r3, [r4, #12]
 800e7f8:	e7e2      	b.n	800e7c0 <__smakebuf_r+0xc>
 800e7fa:	89a3      	ldrh	r3, [r4, #12]
 800e7fc:	6020      	str	r0, [r4, #0]
 800e7fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e802:	81a3      	strh	r3, [r4, #12]
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e80a:	b15b      	cbz	r3, 800e824 <__smakebuf_r+0x70>
 800e80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e810:	4630      	mov	r0, r6
 800e812:	f000 f81d 	bl	800e850 <_isatty_r>
 800e816:	b128      	cbz	r0, 800e824 <__smakebuf_r+0x70>
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	f023 0303 	bic.w	r3, r3, #3
 800e81e:	f043 0301 	orr.w	r3, r3, #1
 800e822:	81a3      	strh	r3, [r4, #12]
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	431d      	orrs	r5, r3
 800e828:	81a5      	strh	r5, [r4, #12]
 800e82a:	e7cf      	b.n	800e7cc <__smakebuf_r+0x18>

0800e82c <_fstat_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d07      	ldr	r5, [pc, #28]	@ (800e84c <_fstat_r+0x20>)
 800e830:	2300      	movs	r3, #0
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	4611      	mov	r1, r2
 800e838:	602b      	str	r3, [r5, #0]
 800e83a:	f7f4 fe9c 	bl	8003576 <_fstat>
 800e83e:	1c43      	adds	r3, r0, #1
 800e840:	d102      	bne.n	800e848 <_fstat_r+0x1c>
 800e842:	682b      	ldr	r3, [r5, #0]
 800e844:	b103      	cbz	r3, 800e848 <_fstat_r+0x1c>
 800e846:	6023      	str	r3, [r4, #0]
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	bf00      	nop
 800e84c:	20014b48 	.word	0x20014b48

0800e850 <_isatty_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d06      	ldr	r5, [pc, #24]	@ (800e86c <_isatty_r+0x1c>)
 800e854:	2300      	movs	r3, #0
 800e856:	4604      	mov	r4, r0
 800e858:	4608      	mov	r0, r1
 800e85a:	602b      	str	r3, [r5, #0]
 800e85c:	f7f4 fe9b 	bl	8003596 <_isatty>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d102      	bne.n	800e86a <_isatty_r+0x1a>
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	b103      	cbz	r3, 800e86a <_isatty_r+0x1a>
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	20014b48 	.word	0x20014b48

0800e870 <_sbrk_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4d06      	ldr	r5, [pc, #24]	@ (800e88c <_sbrk_r+0x1c>)
 800e874:	2300      	movs	r3, #0
 800e876:	4604      	mov	r4, r0
 800e878:	4608      	mov	r0, r1
 800e87a:	602b      	str	r3, [r5, #0]
 800e87c:	f000 f8dc 	bl	800ea38 <_sbrk>
 800e880:	1c43      	adds	r3, r0, #1
 800e882:	d102      	bne.n	800e88a <_sbrk_r+0x1a>
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	b103      	cbz	r3, 800e88a <_sbrk_r+0x1a>
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	20014b48 	.word	0x20014b48

0800e890 <fmax>:
 800e890:	b508      	push	{r3, lr}
 800e892:	ed2d 8b04 	vpush	{d8-d9}
 800e896:	eeb0 8a40 	vmov.f32	s16, s0
 800e89a:	eef0 8a60 	vmov.f32	s17, s1
 800e89e:	eeb0 9a41 	vmov.f32	s18, s2
 800e8a2:	eef0 9a61 	vmov.f32	s19, s3
 800e8a6:	f000 f81d 	bl	800e8e4 <__fpclassifyd>
 800e8aa:	b950      	cbnz	r0, 800e8c2 <fmax+0x32>
 800e8ac:	eeb0 8a49 	vmov.f32	s16, s18
 800e8b0:	eef0 8a69 	vmov.f32	s17, s19
 800e8b4:	eeb0 0a48 	vmov.f32	s0, s16
 800e8b8:	eef0 0a68 	vmov.f32	s1, s17
 800e8bc:	ecbd 8b04 	vpop	{d8-d9}
 800e8c0:	bd08      	pop	{r3, pc}
 800e8c2:	eeb0 0a49 	vmov.f32	s0, s18
 800e8c6:	eef0 0a69 	vmov.f32	s1, s19
 800e8ca:	f000 f80b 	bl	800e8e4 <__fpclassifyd>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d0f0      	beq.n	800e8b4 <fmax+0x24>
 800e8d2:	ec53 2b19 	vmov	r2, r3, d9
 800e8d6:	ec51 0b18 	vmov	r0, r1, d8
 800e8da:	f7f2 f8a5 	bl	8000a28 <__aeabi_dcmpgt>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d0e4      	beq.n	800e8ac <fmax+0x1c>
 800e8e2:	e7e7      	b.n	800e8b4 <fmax+0x24>

0800e8e4 <__fpclassifyd>:
 800e8e4:	ec51 0b10 	vmov	r0, r1, d0
 800e8e8:	b510      	push	{r4, lr}
 800e8ea:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	d019      	beq.n	800e926 <__fpclassifyd+0x42>
 800e8f2:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800e8f6:	490e      	ldr	r1, [pc, #56]	@ (800e930 <__fpclassifyd+0x4c>)
 800e8f8:	428a      	cmp	r2, r1
 800e8fa:	d90e      	bls.n	800e91a <__fpclassifyd+0x36>
 800e8fc:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800e900:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800e904:	428a      	cmp	r2, r1
 800e906:	d908      	bls.n	800e91a <__fpclassifyd+0x36>
 800e908:	4a0a      	ldr	r2, [pc, #40]	@ (800e934 <__fpclassifyd+0x50>)
 800e90a:	4213      	tst	r3, r2
 800e90c:	d007      	beq.n	800e91e <__fpclassifyd+0x3a>
 800e90e:	4294      	cmp	r4, r2
 800e910:	d107      	bne.n	800e922 <__fpclassifyd+0x3e>
 800e912:	fab0 f080 	clz	r0, r0
 800e916:	0940      	lsrs	r0, r0, #5
 800e918:	bd10      	pop	{r4, pc}
 800e91a:	2004      	movs	r0, #4
 800e91c:	e7fc      	b.n	800e918 <__fpclassifyd+0x34>
 800e91e:	2003      	movs	r0, #3
 800e920:	e7fa      	b.n	800e918 <__fpclassifyd+0x34>
 800e922:	2000      	movs	r0, #0
 800e924:	e7f8      	b.n	800e918 <__fpclassifyd+0x34>
 800e926:	2800      	cmp	r0, #0
 800e928:	d1ee      	bne.n	800e908 <__fpclassifyd+0x24>
 800e92a:	2002      	movs	r0, #2
 800e92c:	e7f4      	b.n	800e918 <__fpclassifyd+0x34>
 800e92e:	bf00      	nop
 800e930:	7fdfffff 	.word	0x7fdfffff
 800e934:	7ff00000 	.word	0x7ff00000

0800e938 <fminf>:
 800e938:	b508      	push	{r3, lr}
 800e93a:	ed2d 8b02 	vpush	{d8}
 800e93e:	eeb0 8a40 	vmov.f32	s16, s0
 800e942:	eef0 8a60 	vmov.f32	s17, s1
 800e946:	f000 f815 	bl	800e974 <__fpclassifyf>
 800e94a:	b930      	cbnz	r0, 800e95a <fminf+0x22>
 800e94c:	eeb0 8a68 	vmov.f32	s16, s17
 800e950:	eeb0 0a48 	vmov.f32	s0, s16
 800e954:	ecbd 8b02 	vpop	{d8}
 800e958:	bd08      	pop	{r3, pc}
 800e95a:	eeb0 0a68 	vmov.f32	s0, s17
 800e95e:	f000 f809 	bl	800e974 <__fpclassifyf>
 800e962:	2800      	cmp	r0, #0
 800e964:	d0f4      	beq.n	800e950 <fminf+0x18>
 800e966:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96e:	d5ed      	bpl.n	800e94c <fminf+0x14>
 800e970:	e7ee      	b.n	800e950 <fminf+0x18>
	...

0800e974 <__fpclassifyf>:
 800e974:	ee10 3a10 	vmov	r3, s0
 800e978:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800e97c:	d00d      	beq.n	800e99a <__fpclassifyf+0x26>
 800e97e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e982:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e986:	d30a      	bcc.n	800e99e <__fpclassifyf+0x2a>
 800e988:	4b07      	ldr	r3, [pc, #28]	@ (800e9a8 <__fpclassifyf+0x34>)
 800e98a:	1e42      	subs	r2, r0, #1
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d908      	bls.n	800e9a2 <__fpclassifyf+0x2e>
 800e990:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e994:	4258      	negs	r0, r3
 800e996:	4158      	adcs	r0, r3
 800e998:	4770      	bx	lr
 800e99a:	2002      	movs	r0, #2
 800e99c:	4770      	bx	lr
 800e99e:	2004      	movs	r0, #4
 800e9a0:	4770      	bx	lr
 800e9a2:	2003      	movs	r0, #3
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	007ffffe 	.word	0x007ffffe

0800e9ac <round>:
 800e9ac:	ec51 0b10 	vmov	r0, r1, d0
 800e9b0:	b570      	push	{r4, r5, r6, lr}
 800e9b2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e9b6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800e9ba:	2a13      	cmp	r2, #19
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4605      	mov	r5, r0
 800e9c0:	dc1b      	bgt.n	800e9fa <round+0x4e>
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	da0b      	bge.n	800e9de <round+0x32>
 800e9c6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e9ca:	3201      	adds	r2, #1
 800e9cc:	bf04      	itt	eq
 800e9ce:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800e9d2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	e015      	b.n	800ea0a <round+0x5e>
 800e9de:	4c15      	ldr	r4, [pc, #84]	@ (800ea34 <round+0x88>)
 800e9e0:	4114      	asrs	r4, r2
 800e9e2:	ea04 0601 	and.w	r6, r4, r1
 800e9e6:	4306      	orrs	r6, r0
 800e9e8:	d00f      	beq.n	800ea0a <round+0x5e>
 800e9ea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800e9ee:	fa41 f202 	asr.w	r2, r1, r2
 800e9f2:	4413      	add	r3, r2
 800e9f4:	ea23 0304 	bic.w	r3, r3, r4
 800e9f8:	e7ed      	b.n	800e9d6 <round+0x2a>
 800e9fa:	2a33      	cmp	r2, #51	@ 0x33
 800e9fc:	dd08      	ble.n	800ea10 <round+0x64>
 800e9fe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ea02:	d102      	bne.n	800ea0a <round+0x5e>
 800ea04:	4602      	mov	r2, r0
 800ea06:	f7f1 fddb 	bl	80005c0 <__adddf3>
 800ea0a:	ec41 0b10 	vmov	d0, r0, r1
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}
 800ea10:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ea14:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ea18:	40f4      	lsrs	r4, r6
 800ea1a:	4204      	tst	r4, r0
 800ea1c:	d0f5      	beq.n	800ea0a <round+0x5e>
 800ea1e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ea22:	2201      	movs	r2, #1
 800ea24:	408a      	lsls	r2, r1
 800ea26:	1952      	adds	r2, r2, r5
 800ea28:	bf28      	it	cs
 800ea2a:	3301      	addcs	r3, #1
 800ea2c:	ea22 0204 	bic.w	r2, r2, r4
 800ea30:	e7d2      	b.n	800e9d8 <round+0x2c>
 800ea32:	bf00      	nop
 800ea34:	000fffff 	.word	0x000fffff

0800ea38 <_sbrk>:
 800ea38:	4a04      	ldr	r2, [pc, #16]	@ (800ea4c <_sbrk+0x14>)
 800ea3a:	6811      	ldr	r1, [r2, #0]
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	b909      	cbnz	r1, 800ea44 <_sbrk+0xc>
 800ea40:	4903      	ldr	r1, [pc, #12]	@ (800ea50 <_sbrk+0x18>)
 800ea42:	6011      	str	r1, [r2, #0]
 800ea44:	6810      	ldr	r0, [r2, #0]
 800ea46:	4403      	add	r3, r0
 800ea48:	6013      	str	r3, [r2, #0]
 800ea4a:	4770      	bx	lr
 800ea4c:	20014b58 	.word	0x20014b58
 800ea50:	20014b60 	.word	0x20014b60

0800ea54 <_init>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr

0800ea60 <_fini>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr
