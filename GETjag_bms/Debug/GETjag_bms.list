
GETjag_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e83c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800ea0c  0800ea0c  0000fa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef84  0800ef84  000100c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef84  0800ef84  0000ff84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef8c  0800ef8c  000100c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef8c  0800ef8c  0000ff8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef90  0800ef90  0000ff90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800ef94  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a8c  200000c0  0800f054  000100c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014b4c  0800f054  00010b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002241a  00000000  00000000  000100f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000515a  00000000  00000000  0003250a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  00037668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f7  00000000  00000000  00039660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028927  00000000  00000000  0003af57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002631a  00000000  00000000  0006387e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee3b5  00000000  00000000  00089b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177f4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000917c  00000000  00000000  00177f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0018110c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e9f4 	.word	0x0800e9f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800e9f4 	.word	0x0800e9f4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013428 	.word	0x20013428

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_dmul>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000366:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800036a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800036e:	bf1d      	ittte	ne
 8000370:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000374:	ea94 0f0c 	teqne	r4, ip
 8000378:	ea95 0f0c 	teqne	r5, ip
 800037c:	f000 f8de 	bleq	800053c <__aeabi_dmul+0x1dc>
 8000380:	442c      	add	r4, r5
 8000382:	ea81 0603 	eor.w	r6, r1, r3
 8000386:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800038a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800038e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000392:	bf18      	it	ne
 8000394:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000398:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800039c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003a0:	d038      	beq.n	8000414 <__aeabi_dmul+0xb4>
 80003a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80003a6:	f04f 0500 	mov.w	r5, #0
 80003aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80003ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80003b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80003b6:	f04f 0600 	mov.w	r6, #0
 80003ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80003be:	f09c 0f00 	teq	ip, #0
 80003c2:	bf18      	it	ne
 80003c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80003c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80003cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80003d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80003d4:	d204      	bcs.n	80003e0 <__aeabi_dmul+0x80>
 80003d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80003da:	416d      	adcs	r5, r5
 80003dc:	eb46 0606 	adc.w	r6, r6, r6
 80003e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80003e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80003e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80003ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80003f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80003f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80003f8:	bf88      	it	hi
 80003fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80003fe:	d81e      	bhi.n	800043e <__aeabi_dmul+0xde>
 8000400:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000418:	ea46 0101 	orr.w	r1, r6, r1
 800041c:	ea40 0002 	orr.w	r0, r0, r2
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000428:	bfc2      	ittt	gt
 800042a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800042e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000432:	bd70      	popgt	{r4, r5, r6, pc}
 8000434:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000438:	f04f 0e00 	mov.w	lr, #0
 800043c:	3c01      	subs	r4, #1
 800043e:	f300 80ab 	bgt.w	8000598 <__aeabi_dmul+0x238>
 8000442:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000446:	bfde      	ittt	le
 8000448:	2000      	movle	r0, #0
 800044a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800044e:	bd70      	pople	{r4, r5, r6, pc}
 8000450:	f1c4 0400 	rsb	r4, r4, #0
 8000454:	3c20      	subs	r4, #32
 8000456:	da35      	bge.n	80004c4 <__aeabi_dmul+0x164>
 8000458:	340c      	adds	r4, #12
 800045a:	dc1b      	bgt.n	8000494 <__aeabi_dmul+0x134>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0520 	rsb	r5, r4, #32
 8000464:	fa00 f305 	lsl.w	r3, r0, r5
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f205 	lsl.w	r2, r1, r5
 8000470:	ea40 0002 	orr.w	r0, r0, r2
 8000474:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000480:	fa21 f604 	lsr.w	r6, r1, r4
 8000484:	eb42 0106 	adc.w	r1, r2, r6
 8000488:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800048c:	bf08      	it	eq
 800048e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	f1c4 040c 	rsb	r4, r4, #12
 8000498:	f1c4 0520 	rsb	r5, r4, #32
 800049c:	fa00 f304 	lsl.w	r3, r0, r4
 80004a0:	fa20 f005 	lsr.w	r0, r0, r5
 80004a4:	fa01 f204 	lsl.w	r2, r1, r4
 80004a8:	ea40 0002 	orr.w	r0, r0, r2
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80004b4:	f141 0100 	adc.w	r1, r1, #0
 80004b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004bc:	bf08      	it	eq
 80004be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	f1c4 0520 	rsb	r5, r4, #32
 80004c8:	fa00 f205 	lsl.w	r2, r0, r5
 80004cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80004d0:	fa20 f304 	lsr.w	r3, r0, r4
 80004d4:	fa01 f205 	lsl.w	r2, r1, r5
 80004d8:	ea43 0302 	orr.w	r3, r3, r2
 80004dc:	fa21 f004 	lsr.w	r0, r1, r4
 80004e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e4:	fa21 f204 	lsr.w	r2, r1, r4
 80004e8:	ea20 0002 	bic.w	r0, r0, r2
 80004ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80004f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80004fa:	bd70      	pop	{r4, r5, r6, pc}
 80004fc:	f094 0f00 	teq	r4, #0
 8000500:	d10f      	bne.n	8000522 <__aeabi_dmul+0x1c2>
 8000502:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000506:	0040      	lsls	r0, r0, #1
 8000508:	eb41 0101 	adc.w	r1, r1, r1
 800050c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000510:	bf08      	it	eq
 8000512:	3c01      	subeq	r4, #1
 8000514:	d0f7      	beq.n	8000506 <__aeabi_dmul+0x1a6>
 8000516:	ea41 0106 	orr.w	r1, r1, r6
 800051a:	f095 0f00 	teq	r5, #0
 800051e:	bf18      	it	ne
 8000520:	4770      	bxne	lr
 8000522:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000526:	0052      	lsls	r2, r2, #1
 8000528:	eb43 0303 	adc.w	r3, r3, r3
 800052c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000530:	bf08      	it	eq
 8000532:	3d01      	subeq	r5, #1
 8000534:	d0f7      	beq.n	8000526 <__aeabi_dmul+0x1c6>
 8000536:	ea43 0306 	orr.w	r3, r3, r6
 800053a:	4770      	bx	lr
 800053c:	ea94 0f0c 	teq	r4, ip
 8000540:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000544:	bf18      	it	ne
 8000546:	ea95 0f0c 	teqne	r5, ip
 800054a:	d00c      	beq.n	8000566 <__aeabi_dmul+0x206>
 800054c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000550:	bf18      	it	ne
 8000552:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000556:	d1d1      	bne.n	80004fc <__aeabi_dmul+0x19c>
 8000558:	ea81 0103 	eor.w	r1, r1, r3
 800055c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000560:	f04f 0000 	mov.w	r0, #0
 8000564:	bd70      	pop	{r4, r5, r6, pc}
 8000566:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800056a:	bf06      	itte	eq
 800056c:	4610      	moveq	r0, r2
 800056e:	4619      	moveq	r1, r3
 8000570:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000574:	d019      	beq.n	80005aa <__aeabi_dmul+0x24a>
 8000576:	ea94 0f0c 	teq	r4, ip
 800057a:	d102      	bne.n	8000582 <__aeabi_dmul+0x222>
 800057c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000580:	d113      	bne.n	80005aa <__aeabi_dmul+0x24a>
 8000582:	ea95 0f0c 	teq	r5, ip
 8000586:	d105      	bne.n	8000594 <__aeabi_dmul+0x234>
 8000588:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800058c:	bf1c      	itt	ne
 800058e:	4610      	movne	r0, r2
 8000590:	4619      	movne	r1, r3
 8000592:	d10a      	bne.n	80005aa <__aeabi_dmul+0x24a>
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd70      	pop	{r4, r5, r6, pc}
 80005aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80005ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80005b2:	bd70      	pop	{r4, r5, r6, pc}

080005b4 <__aeabi_drsub>:
 80005b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e002      	b.n	80005c0 <__adddf3>
 80005ba:	bf00      	nop

080005bc <__aeabi_dsub>:
 80005bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080005c0 <__adddf3>:
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	bf1f      	itttt	ne
 80005d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e6:	f000 80e2 	beq.w	80007ae <__adddf3+0x1ee>
 80005ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005f2:	bfb8      	it	lt
 80005f4:	426d      	neglt	r5, r5
 80005f6:	dd0c      	ble.n	8000612 <__adddf3+0x52>
 80005f8:	442c      	add	r4, r5
 80005fa:	ea80 0202 	eor.w	r2, r0, r2
 80005fe:	ea81 0303 	eor.w	r3, r1, r3
 8000602:	ea82 0000 	eor.w	r0, r2, r0
 8000606:	ea83 0101 	eor.w	r1, r3, r1
 800060a:	ea80 0202 	eor.w	r2, r0, r2
 800060e:	ea81 0303 	eor.w	r3, r1, r3
 8000612:	2d36      	cmp	r5, #54	@ 0x36
 8000614:	bf88      	it	hi
 8000616:	bd30      	pophi	{r4, r5, pc}
 8000618:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800061c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000620:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000624:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000628:	d002      	beq.n	8000630 <__adddf3+0x70>
 800062a:	4240      	negs	r0, r0
 800062c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000630:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000634:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000638:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800063c:	d002      	beq.n	8000644 <__adddf3+0x84>
 800063e:	4252      	negs	r2, r2
 8000640:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000644:	ea94 0f05 	teq	r4, r5
 8000648:	f000 80a7 	beq.w	800079a <__adddf3+0x1da>
 800064c:	f1a4 0401 	sub.w	r4, r4, #1
 8000650:	f1d5 0e20 	rsbs	lr, r5, #32
 8000654:	db0d      	blt.n	8000672 <__adddf3+0xb2>
 8000656:	fa02 fc0e 	lsl.w	ip, r2, lr
 800065a:	fa22 f205 	lsr.w	r2, r2, r5
 800065e:	1880      	adds	r0, r0, r2
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	fa03 f20e 	lsl.w	r2, r3, lr
 8000668:	1880      	adds	r0, r0, r2
 800066a:	fa43 f305 	asr.w	r3, r3, r5
 800066e:	4159      	adcs	r1, r3
 8000670:	e00e      	b.n	8000690 <__adddf3+0xd0>
 8000672:	f1a5 0520 	sub.w	r5, r5, #32
 8000676:	f10e 0e20 	add.w	lr, lr, #32
 800067a:	2a01      	cmp	r2, #1
 800067c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000680:	bf28      	it	cs
 8000682:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000686:	fa43 f305 	asr.w	r3, r3, r5
 800068a:	18c0      	adds	r0, r0, r3
 800068c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	d507      	bpl.n	80006a6 <__adddf3+0xe6>
 8000696:	f04f 0e00 	mov.w	lr, #0
 800069a:	f1dc 0c00 	rsbs	ip, ip, #0
 800069e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80006a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80006a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80006aa:	d31b      	bcc.n	80006e4 <__adddf3+0x124>
 80006ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80006b0:	d30c      	bcc.n	80006cc <__adddf3+0x10c>
 80006b2:	0849      	lsrs	r1, r1, #1
 80006b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80006b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006bc:	f104 0401 	add.w	r4, r4, #1
 80006c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80006c8:	f080 809a 	bcs.w	8000800 <__adddf3+0x240>
 80006cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	ea41 0105 	orr.w	r1, r1, r5
 80006e2:	bd30      	pop	{r4, r5, pc}
 80006e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006e8:	4140      	adcs	r0, r0
 80006ea:	eb41 0101 	adc.w	r1, r1, r1
 80006ee:	3c01      	subs	r4, #1
 80006f0:	bf28      	it	cs
 80006f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80006f6:	d2e9      	bcs.n	80006cc <__adddf3+0x10c>
 80006f8:	f091 0f00 	teq	r1, #0
 80006fc:	bf04      	itt	eq
 80006fe:	4601      	moveq	r1, r0
 8000700:	2000      	moveq	r0, #0
 8000702:	fab1 f381 	clz	r3, r1
 8000706:	bf08      	it	eq
 8000708:	3320      	addeq	r3, #32
 800070a:	f1a3 030b 	sub.w	r3, r3, #11
 800070e:	f1b3 0220 	subs.w	r2, r3, #32
 8000712:	da0c      	bge.n	800072e <__adddf3+0x16e>
 8000714:	320c      	adds	r2, #12
 8000716:	dd08      	ble.n	800072a <__adddf3+0x16a>
 8000718:	f102 0c14 	add.w	ip, r2, #20
 800071c:	f1c2 020c 	rsb	r2, r2, #12
 8000720:	fa01 f00c 	lsl.w	r0, r1, ip
 8000724:	fa21 f102 	lsr.w	r1, r1, r2
 8000728:	e00c      	b.n	8000744 <__adddf3+0x184>
 800072a:	f102 0214 	add.w	r2, r2, #20
 800072e:	bfd8      	it	le
 8000730:	f1c2 0c20 	rsble	ip, r2, #32
 8000734:	fa01 f102 	lsl.w	r1, r1, r2
 8000738:	fa20 fc0c 	lsr.w	ip, r0, ip
 800073c:	bfdc      	itt	le
 800073e:	ea41 010c 	orrle.w	r1, r1, ip
 8000742:	4090      	lslle	r0, r2
 8000744:	1ae4      	subs	r4, r4, r3
 8000746:	bfa2      	ittt	ge
 8000748:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800074c:	4329      	orrge	r1, r5
 800074e:	bd30      	popge	{r4, r5, pc}
 8000750:	ea6f 0404 	mvn.w	r4, r4
 8000754:	3c1f      	subs	r4, #31
 8000756:	da1c      	bge.n	8000792 <__adddf3+0x1d2>
 8000758:	340c      	adds	r4, #12
 800075a:	dc0e      	bgt.n	800077a <__adddf3+0x1ba>
 800075c:	f104 0414 	add.w	r4, r4, #20
 8000760:	f1c4 0220 	rsb	r2, r4, #32
 8000764:	fa20 f004 	lsr.w	r0, r0, r4
 8000768:	fa01 f302 	lsl.w	r3, r1, r2
 800076c:	ea40 0003 	orr.w	r0, r0, r3
 8000770:	fa21 f304 	lsr.w	r3, r1, r4
 8000774:	ea45 0103 	orr.w	r1, r5, r3
 8000778:	bd30      	pop	{r4, r5, pc}
 800077a:	f1c4 040c 	rsb	r4, r4, #12
 800077e:	f1c4 0220 	rsb	r2, r4, #32
 8000782:	fa20 f002 	lsr.w	r0, r0, r2
 8000786:	fa01 f304 	lsl.w	r3, r1, r4
 800078a:	ea40 0003 	orr.w	r0, r0, r3
 800078e:	4629      	mov	r1, r5
 8000790:	bd30      	pop	{r4, r5, pc}
 8000792:	fa21 f004 	lsr.w	r0, r1, r4
 8000796:	4629      	mov	r1, r5
 8000798:	bd30      	pop	{r4, r5, pc}
 800079a:	f094 0f00 	teq	r4, #0
 800079e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80007a2:	bf06      	itte	eq
 80007a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80007a8:	3401      	addeq	r4, #1
 80007aa:	3d01      	subne	r5, #1
 80007ac:	e74e      	b.n	800064c <__adddf3+0x8c>
 80007ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007b2:	bf18      	it	ne
 80007b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007b8:	d029      	beq.n	800080e <__adddf3+0x24e>
 80007ba:	ea94 0f05 	teq	r4, r5
 80007be:	bf08      	it	eq
 80007c0:	ea90 0f02 	teqeq	r0, r2
 80007c4:	d005      	beq.n	80007d2 <__adddf3+0x212>
 80007c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80007ca:	bf04      	itt	eq
 80007cc:	4619      	moveq	r1, r3
 80007ce:	4610      	moveq	r0, r2
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	ea91 0f03 	teq	r1, r3
 80007d6:	bf1e      	ittt	ne
 80007d8:	2100      	movne	r1, #0
 80007da:	2000      	movne	r0, #0
 80007dc:	bd30      	popne	{r4, r5, pc}
 80007de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007e2:	d105      	bne.n	80007f0 <__adddf3+0x230>
 80007e4:	0040      	lsls	r0, r0, #1
 80007e6:	4149      	adcs	r1, r1
 80007e8:	bf28      	it	cs
 80007ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80007ee:	bd30      	pop	{r4, r5, pc}
 80007f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80007f4:	bf3c      	itt	cc
 80007f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80007fa:	bd30      	popcc	{r4, r5, pc}
 80007fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000800:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd30      	pop	{r4, r5, pc}
 800080e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000812:	bf1a      	itte	ne
 8000814:	4619      	movne	r1, r3
 8000816:	4610      	movne	r0, r2
 8000818:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800081c:	bf1c      	itt	ne
 800081e:	460b      	movne	r3, r1
 8000820:	4602      	movne	r2, r0
 8000822:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000826:	bf06      	itte	eq
 8000828:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800082c:	ea91 0f03 	teqeq	r1, r3
 8000830:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000834:	bd30      	pop	{r4, r5, pc}
 8000836:	bf00      	nop

08000838 <__aeabi_ui2d>:
 8000838:	f090 0f00 	teq	r0, #0
 800083c:	bf04      	itt	eq
 800083e:	2100      	moveq	r1, #0
 8000840:	4770      	bxeq	lr
 8000842:	b530      	push	{r4, r5, lr}
 8000844:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000848:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084c:	f04f 0500 	mov.w	r5, #0
 8000850:	f04f 0100 	mov.w	r1, #0
 8000854:	e750      	b.n	80006f8 <__adddf3+0x138>
 8000856:	bf00      	nop

08000858 <__aeabi_i2d>:
 8000858:	f090 0f00 	teq	r0, #0
 800085c:	bf04      	itt	eq
 800085e:	2100      	moveq	r1, #0
 8000860:	4770      	bxeq	lr
 8000862:	b530      	push	{r4, r5, lr}
 8000864:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000868:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000870:	bf48      	it	mi
 8000872:	4240      	negmi	r0, r0
 8000874:	f04f 0100 	mov.w	r1, #0
 8000878:	e73e      	b.n	80006f8 <__adddf3+0x138>
 800087a:	bf00      	nop

0800087c <__aeabi_f2d>:
 800087c:	0042      	lsls	r2, r0, #1
 800087e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000882:	ea4f 0131 	mov.w	r1, r1, rrx
 8000886:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800088a:	bf1f      	itttt	ne
 800088c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000890:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000894:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000898:	4770      	bxne	lr
 800089a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800089e:	bf08      	it	eq
 80008a0:	4770      	bxeq	lr
 80008a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80008a6:	bf04      	itt	eq
 80008a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80008ac:	4770      	bxeq	lr
 80008ae:	b530      	push	{r4, r5, lr}
 80008b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80008b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80008bc:	e71c      	b.n	80006f8 <__adddf3+0x138>
 80008be:	bf00      	nop

080008c0 <__aeabi_ul2d>:
 80008c0:	ea50 0201 	orrs.w	r2, r0, r1
 80008c4:	bf08      	it	eq
 80008c6:	4770      	bxeq	lr
 80008c8:	b530      	push	{r4, r5, lr}
 80008ca:	f04f 0500 	mov.w	r5, #0
 80008ce:	e00a      	b.n	80008e6 <__aeabi_l2d+0x16>

080008d0 <__aeabi_l2d>:
 80008d0:	ea50 0201 	orrs.w	r2, r0, r1
 80008d4:	bf08      	it	eq
 80008d6:	4770      	bxeq	lr
 80008d8:	b530      	push	{r4, r5, lr}
 80008da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80008de:	d502      	bpl.n	80008e6 <__aeabi_l2d+0x16>
 80008e0:	4240      	negs	r0, r0
 80008e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80008ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80008ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008f2:	f43f aed8 	beq.w	80006a6 <__adddf3+0xe6>
 80008f6:	f04f 0203 	mov.w	r2, #3
 80008fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008fe:	bf18      	it	ne
 8000900:	3203      	addne	r2, #3
 8000902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000906:	bf18      	it	ne
 8000908:	3203      	addne	r2, #3
 800090a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800090e:	f1c2 0320 	rsb	r3, r2, #32
 8000912:	fa00 fc03 	lsl.w	ip, r0, r3
 8000916:	fa20 f002 	lsr.w	r0, r0, r2
 800091a:	fa01 fe03 	lsl.w	lr, r1, r3
 800091e:	ea40 000e 	orr.w	r0, r0, lr
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	4414      	add	r4, r2
 8000928:	e6bd      	b.n	80006a6 <__adddf3+0xe6>
 800092a:	bf00      	nop

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b30:	f000 b96a 	b.w	8000e08 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	460c      	mov	r4, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14e      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b58:	4694      	mov	ip, r2
 8000b5a:	458c      	cmp	ip, r1
 8000b5c:	4686      	mov	lr, r0
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	d962      	bls.n	8000c2a <__udivmoddi4+0xde>
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	4091      	lsls	r1, r2
 8000b6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b74:	4319      	orrs	r1, r3
 8000b76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7e:	fa1f f68c 	uxth.w	r6, ip
 8000b82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb04 f106 	mul.w	r1, r4, r6
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ba2:	f080 8112 	bcs.w	8000dca <__udivmoddi4+0x27e>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 810f 	bls.w	8000dca <__udivmoddi4+0x27e>
 8000bac:	3c02      	subs	r4, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bba:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb00 f606 	mul.w	r6, r0, r6
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x94>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bd2:	f080 80fc 	bcs.w	8000dce <__udivmoddi4+0x282>
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	f240 80f9 	bls.w	8000dce <__udivmoddi4+0x282>
 8000bdc:	4463      	add	r3, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	1b9b      	subs	r3, r3, r6
 8000be2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11d      	cbz	r5, 8000bf2 <__udivmoddi4+0xa6>
 8000bea:	40d3      	lsrs	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d905      	bls.n	8000c06 <__udivmoddi4+0xba>
 8000bfa:	b10d      	cbz	r5, 8000c00 <__udivmoddi4+0xb4>
 8000bfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4608      	mov	r0, r1
 8000c04:	e7f5      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c06:	fab3 f183 	clz	r1, r3
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d146      	bne.n	8000c9c <__udivmoddi4+0x150>
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xcc>
 8000c12:	4290      	cmp	r0, r2
 8000c14:	f0c0 80f0 	bcc.w	8000df8 <__udivmoddi4+0x2ac>
 8000c18:	1a86      	subs	r6, r0, r2
 8000c1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2d00      	cmp	r5, #0
 8000c22:	d0e6      	beq.n	8000bf2 <__udivmoddi4+0xa6>
 8000c24:	e9c5 6300 	strd	r6, r3, [r5]
 8000c28:	e7e3      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	f040 8090 	bne.w	8000d50 <__udivmoddi4+0x204>
 8000c30:	eba1 040c 	sub.w	r4, r1, ip
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	fa1f f78c 	uxth.w	r7, ip
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb08 4416 	mls	r4, r8, r6, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb07 f006 	mul.w	r0, r7, r6
 8000c52:	4298      	cmp	r0, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x11c>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x11a>
 8000c60:	4298      	cmp	r0, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c66:	4626      	mov	r6, r4
 8000c68:	1a1c      	subs	r4, r3, r0
 8000c6a:	fa1f f38e 	uxth.w	r3, lr
 8000c6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c72:	fb08 4410 	mls	r4, r8, r0, r4
 8000c76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	429f      	cmp	r7, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x148>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x146>
 8000c8c:	429f      	cmp	r7, r3
 8000c8e:	f200 80b0 	bhi.w	8000df2 <__udivmoddi4+0x2a6>
 8000c92:	4620      	mov	r0, r4
 8000c94:	1bdb      	subs	r3, r3, r7
 8000c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0x9c>
 8000c9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ca6:	431f      	orrs	r7, r3
 8000ca8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cac:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb0:	ea43 030c 	orr.w	r3, r3, ip
 8000cb4:	40f4      	lsrs	r4, r6
 8000cb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cba:	0c38      	lsrs	r0, r7, #16
 8000cbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc4:	fa1f fc87 	uxth.w	ip, r7
 8000cc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000ccc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd4:	45a1      	cmp	r9, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x1a6>
 8000cdc:	193c      	adds	r4, r7, r4
 8000cde:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ce2:	f080 8084 	bcs.w	8000dee <__udivmoddi4+0x2a2>
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	f240 8081 	bls.w	8000dee <__udivmoddi4+0x2a2>
 8000cec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	eba4 0409 	sub.w	r4, r4, r9
 8000cf6:	fa1f f983 	uxth.w	r9, r3
 8000cfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000d02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x1d2>
 8000d0e:	193c      	adds	r4, r7, r4
 8000d10:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d14:	d267      	bcs.n	8000de6 <__udivmoddi4+0x29a>
 8000d16:	45a4      	cmp	ip, r4
 8000d18:	d965      	bls.n	8000de6 <__udivmoddi4+0x29a>
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	443c      	add	r4, r7
 8000d1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d22:	fba0 9302 	umull	r9, r3, r0, r2
 8000d26:	eba4 040c 	sub.w	r4, r4, ip
 8000d2a:	429c      	cmp	r4, r3
 8000d2c:	46ce      	mov	lr, r9
 8000d2e:	469c      	mov	ip, r3
 8000d30:	d351      	bcc.n	8000dd6 <__udivmoddi4+0x28a>
 8000d32:	d04e      	beq.n	8000dd2 <__udivmoddi4+0x286>
 8000d34:	b155      	cbz	r5, 8000d4c <__udivmoddi4+0x200>
 8000d36:	ebb8 030e 	subs.w	r3, r8, lr
 8000d3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d42:	40cb      	lsrs	r3, r1
 8000d44:	431e      	orrs	r6, r3
 8000d46:	40cc      	lsrs	r4, r1
 8000d48:	e9c5 6400 	strd	r6, r4, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e750      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f103 	lsr.w	r1, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d60:	4094      	lsls	r4, r2
 8000d62:	430c      	orrs	r4, r1
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d6c:	fa1f f78c 	uxth.w	r7, ip
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3110 	mls	r1, r8, r0, r3
 8000d78:	0c23      	lsrs	r3, r4, #16
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f107 	mul.w	r1, r0, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x24c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d8e:	d22c      	bcs.n	8000dea <__udivmoddi4+0x29e>
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d92a      	bls.n	8000dea <__udivmoddi4+0x29e>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da0:	fb08 3311 	mls	r3, r8, r1, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb01 f307 	mul.w	r3, r1, r7
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x276>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000db8:	d213      	bcs.n	8000de2 <__udivmoddi4+0x296>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d911      	bls.n	8000de2 <__udivmoddi4+0x296>
 8000dbe:	3902      	subs	r1, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	1ae4      	subs	r4, r4, r3
 8000dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc8:	e739      	b.n	8000c3e <__udivmoddi4+0xf2>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	e6f0      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e706      	b.n	8000be0 <__udivmoddi4+0x94>
 8000dd2:	45c8      	cmp	r8, r9
 8000dd4:	d2ae      	bcs.n	8000d34 <__udivmoddi4+0x1e8>
 8000dd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7a8      	b.n	8000d34 <__udivmoddi4+0x1e8>
 8000de2:	4631      	mov	r1, r6
 8000de4:	e7ed      	b.n	8000dc2 <__udivmoddi4+0x276>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e799      	b.n	8000d1e <__udivmoddi4+0x1d2>
 8000dea:	4630      	mov	r0, r6
 8000dec:	e7d4      	b.n	8000d98 <__udivmoddi4+0x24c>
 8000dee:	46d6      	mov	lr, sl
 8000df0:	e77f      	b.n	8000cf2 <__udivmoddi4+0x1a6>
 8000df2:	4463      	add	r3, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e74d      	b.n	8000c94 <__udivmoddi4+0x148>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e70f      	b.n	8000c20 <__udivmoddi4+0xd4>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	e730      	b.n	8000c68 <__udivmoddi4+0x11c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <Checksum>:
  }
}

unsigned char Checksum(unsigned char *ptr, unsigned char len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
  unsigned char i;
  unsigned char checksum = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < len; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e009      	b.n	8000e36 <Checksum+0x2a>
    checksum += ptr[i];
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	781a      	ldrb	r2, [r3, #0]
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < len; i++)
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	3301      	adds	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f1      	bcc.n	8000e22 <Checksum+0x16>

  checksum = 0xff & ~checksum;
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	73bb      	strb	r3, [r7, #14]

  return (checksum);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <I2C_WriteReg>:
  }
  return (crc);
}

void I2C_WriteReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af04      	add	r7, sp, #16
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000e64:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <I2C_WriteReg+0x44>)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e6c:	c303      	stmia	r3!, {r0, r1}
 8000e6e:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, TX_Buffer, crc_count, 1000);
  }
#else
  HAL_I2C_Mem_Write(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e7c:	9102      	str	r1, [sp, #8]
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	2110      	movs	r1, #16
 8000e88:	4804      	ldr	r0, [pc, #16]	@ (8000e9c <I2C_WriteReg+0x48>)
 8000e8a:	f004 ffc3 	bl	8005e14 <HAL_I2C_Mem_Write>
#endif
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0800ea0c 	.word	0x0800ea0c
 8000e9c:	20000148 	.word	0x20000148

08000ea0 <I2C_ReadReg>:

int I2C_ReadReg(uint8_t reg_addr, uint8_t *reg_data, uint8_t count)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  unsigned int RX_CRC_Fail = 0; // reset to 0. If in CRC Mode and CRC fails, this will be incremented.
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  uint8_t RX_Buffer[MAX_BUFFER_SIZE] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <I2C_ReadReg+0x48>)
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	c303      	stmia	r3!, {r0, r1}
 8000ebe:	801a      	strh	r2, [r3, #0]
      j = j + 1;
    }
    CopyArray(RX_Buffer, reg_data, crc_count);
  }
#else
  HAL_I2C_Mem_Read(&hi2c1, DEV_ADDR, reg_addr, 1, reg_data, count, HAL_MAX_DELAY);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ecc:	9102      	str	r1, [sp, #8]
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <I2C_ReadReg+0x4c>)
 8000eda:	f005 f895 	bl	8006008 <HAL_I2C_Mem_Read>
#endif
  return 0;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0800ea0c 	.word	0x0800ea0c
 8000eec:	20000148 	.word	0x20000148

08000ef0 <BQ769x2_SetRegister>:

void BQ769x2_SetRegister(uint16_t reg_addr, uint32_t reg_data, uint8_t datalen)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	80fb      	strh	r3, [r7, #6]
 8000efc:	4613      	mov	r3, r2
 8000efe:	717b      	strb	r3, [r7, #5]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8000f00:	2300      	movs	r3, #0
 8000f02:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_RegData[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000f04:	4a62      	ldr	r2, [pc, #392]	@ (8001090 <BQ769x2_SetRegister+0x1a0>)
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f0e:	6018      	str	r0, [r3, #0]
 8000f10:	3304      	adds	r3, #4
 8000f12:	8019      	strh	r1, [r3, #0]

  // TX_RegData in little endian format
  TX_RegData[0] = reg_addr & 0xff;
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_addr >> 8) & 0xff;
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = reg_data & 0xff; // 1st byte of data
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73bb      	strb	r3, [r7, #14]

  switch (datalen)
 8000f2a:	797b      	ldrb	r3, [r7, #5]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d07d      	beq.n	800102c <BQ769x2_SetRegister+0x13c>
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	f300 80a8 	bgt.w	8001086 <BQ769x2_SetRegister+0x196>
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d002      	beq.n	8000f40 <BQ769x2_SetRegister+0x50>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d039      	beq.n	8000fb2 <BQ769x2_SetRegister+0xc2>
    TX_Buffer[1] = 0x08;              // combined length of register address and data
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
    delayUS(2000);
    break;
  }
}
 8000f3e:	e0a2      	b.n	8001086 <BQ769x2_SetRegister+0x196>
    I2C_WriteReg(0x3E, TX_RegData, 3);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2203      	movs	r2, #3
 8000f46:	4619      	mov	r1, r3
 8000f48:	203e      	movs	r0, #62	@ 0x3e
 8000f4a:	f7ff ff83 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8000f4e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f52:	f000 fdc9 	bl	8001ae8 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 3);
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2103      	movs	r1, #3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff55 	bl	8000e0c <Checksum>
 8000f62:	4603      	mov	r3, r0
 8000f64:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x05; // combined length of register address and data
 8000f66:	2305      	movs	r3, #5
 8000f68:	757b      	strb	r3, [r7, #21]
    uint8_t statusLow = 0xFF;
 8000f6a:	23ff      	movs	r3, #255	@ 0xff
 8000f6c:	72fb      	strb	r3, [r7, #11]
    uint8_t statusHigh = 0xFF;
 8000f6e:	23ff      	movs	r3, #255	@ 0xff
 8000f70:	72bb      	strb	r3, [r7, #10]
      I2C_ReadReg(0x3E, &statusLow, 1);
 8000f72:	f107 030b 	add.w	r3, r7, #11
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	203e      	movs	r0, #62	@ 0x3e
 8000f7c:	f7ff ff90 	bl	8000ea0 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &statusHigh, 1);
 8000f80:	f107 030a 	add.w	r3, r7, #10
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	203f      	movs	r0, #63	@ 0x3f
 8000f8a:	f7ff ff89 	bl	8000ea0 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	2bff      	cmp	r3, #255	@ 0xff
 8000f92:	d102      	bne.n	8000f9a <BQ769x2_SetRegister+0xaa>
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	2bff      	cmp	r3, #255	@ 0xff
 8000f98:	d0eb      	beq.n	8000f72 <BQ769x2_SetRegister+0x82>
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2060      	movs	r0, #96	@ 0x60
 8000fa4:	f7ff ff56 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8000fa8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fac:	f000 fd9c 	bl	8001ae8 <delayUS>
    break;
 8000fb0:	e069      	b.n	8001086 <BQ769x2_SetRegister+0x196>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	73fb      	strb	r3, [r7, #15]
    I2C_WriteReg(0x3E, TX_RegData, 4);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	203e      	movs	r0, #62	@ 0x3e
 8000fc4:	f7ff ff46 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8000fc8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fcc:	f000 fd8c 	bl	8001ae8 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 4);
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff18 	bl	8000e0c <Checksum>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x06; // combined length of register address and data
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	757b      	strb	r3, [r7, #21]
    statusLow = 0xFF;
 8000fe4:	23ff      	movs	r3, #255	@ 0xff
 8000fe6:	72fb      	strb	r3, [r7, #11]
    statusHigh = 0xFF;
 8000fe8:	23ff      	movs	r3, #255	@ 0xff
 8000fea:	72bb      	strb	r3, [r7, #10]
      I2C_ReadReg(0x3E, &statusLow, 1);
 8000fec:	f107 030b 	add.w	r3, r7, #11
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	203e      	movs	r0, #62	@ 0x3e
 8000ff6:	f7ff ff53 	bl	8000ea0 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &statusHigh, 1);
 8000ffa:	f107 030a 	add.w	r3, r7, #10
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	203f      	movs	r0, #63	@ 0x3f
 8001004:	f7ff ff4c 	bl	8000ea0 <I2C_ReadReg>
    } while (statusLow == 0xFF && statusHigh == 0xFF);
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	2bff      	cmp	r3, #255	@ 0xff
 800100c:	d102      	bne.n	8001014 <BQ769x2_SetRegister+0x124>
 800100e:	7abb      	ldrb	r3, [r7, #10]
 8001010:	2bff      	cmp	r3, #255	@ 0xff
 8001012:	d0eb      	beq.n	8000fec <BQ769x2_SetRegister+0xfc>
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2202      	movs	r2, #2
 800101a:	4619      	mov	r1, r3
 800101c:	2060      	movs	r0, #96	@ 0x60
 800101e:	f7ff ff19 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8001022:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001026:	f000 fd5f 	bl	8001ae8 <delayUS>
    break;
 800102a:	e02c      	b.n	8001086 <BQ769x2_SetRegister+0x196>
    TX_RegData[3] = (reg_data >> 8) & 0xff;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]
    TX_RegData[4] = (reg_data >> 16) & 0xff;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	b2db      	uxtb	r3, r3
 800103a:	743b      	strb	r3, [r7, #16]
    TX_RegData[5] = (reg_data >> 24) & 0xff;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	0e1b      	lsrs	r3, r3, #24
 8001040:	b2db      	uxtb	r3, r3
 8001042:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x3E, TX_RegData, 6);
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2206      	movs	r2, #6
 800104a:	4619      	mov	r1, r3
 800104c:	203e      	movs	r0, #62	@ 0x3e
 800104e:	f7ff ff01 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8001052:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001056:	f000 fd47 	bl	8001ae8 <delayUS>
    TX_Buffer[0] = Checksum(TX_RegData, 6);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2106      	movs	r1, #6
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fed3 	bl	8000e0c <Checksum>
 8001066:	4603      	mov	r3, r0
 8001068:	753b      	strb	r3, [r7, #20]
    TX_Buffer[1] = 0x08;              // combined length of register address and data
 800106a:	2308      	movs	r3, #8
 800106c:	757b      	strb	r3, [r7, #21]
    I2C_WriteReg(0x60, TX_Buffer, 2); // Write the checksum and length
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	2202      	movs	r2, #2
 8001074:	4619      	mov	r1, r3
 8001076:	2060      	movs	r0, #96	@ 0x60
 8001078:	f7ff feec 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 800107c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001080:	f000 fd32 	bl	8001ae8 <delayUS>
    break;
 8001084:	bf00      	nop
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	0800ea18 	.word	0x0800ea18

08001094 <BQ769x2_ReadRegister>:

uint16_t BQ769x2_ReadRegister(uint16_t reg_addr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  uint8_t TX_RegAddr[2] = {0}; // Array to hold the register address
 800109e:	2300      	movs	r3, #0
 80010a0:	82bb      	strh	r3, [r7, #20]
  uint8_t RX_Buffer[2] = {0};  // Array to hold the received data
 80010a2:	2300      	movs	r3, #0
 80010a4:	823b      	strh	r3, [r7, #16]

  // Populate the TX_RegAddr array with the register address
  TX_RegAddr[0] = reg_addr & 0xFF;        // Lower byte of register address
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	753b      	strb	r3, [r7, #20]
  TX_RegAddr[1] = (reg_addr >> 8) & 0xFF; // Upper byte of register address
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	757b      	strb	r3, [r7, #21]

  // Write the register address to the 0x3E register
  I2C_WriteReg(0x3E, TX_RegAddr, 2);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2202      	movs	r2, #2
 80010bc:	4619      	mov	r1, r3
 80010be:	203e      	movs	r0, #62	@ 0x3e
 80010c0:	f7ff fec8 	bl	8000e54 <I2C_WriteReg>
  delayUS(2000); // Delay to allow time for the write to complete
 80010c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010c8:	f000 fd0e 	bl	8001ae8 <delayUS>

  // Poll the 0x3E register until it no longer returns 0xFF
  uint8_t statusLow = 0xFF;
 80010cc:	23ff      	movs	r3, #255	@ 0xff
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint8_t statusHigh = 0xFF;
 80010d0:	23ff      	movs	r3, #255	@ 0xff
 80010d2:	73bb      	strb	r3, [r7, #14]
  do
  {
    I2C_ReadReg(0x3E, &statusLow, 1);
 80010d4:	f107 030f 	add.w	r3, r7, #15
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	203e      	movs	r0, #62	@ 0x3e
 80010de:	f7ff fedf 	bl	8000ea0 <I2C_ReadReg>
    I2C_ReadReg(0x3F, &statusHigh, 1);
 80010e2:	f107 030e 	add.w	r3, r7, #14
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	203f      	movs	r0, #63	@ 0x3f
 80010ec:	f7ff fed8 	bl	8000ea0 <I2C_ReadReg>
  } while (statusLow == 0xFF && statusHigh == 0xFF);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	2bff      	cmp	r3, #255	@ 0xff
 80010f4:	d102      	bne.n	80010fc <BQ769x2_ReadRegister+0x68>
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	2bff      	cmp	r3, #255	@ 0xff
 80010fa:	d0eb      	beq.n	80010d4 <BQ769x2_ReadRegister+0x40>

  // HAL_Delay(200);
  //  Read the data from the buffer starting at 0x40
  I2C_ReadReg(0x40, RX_Buffer, 2);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2202      	movs	r2, #2
 8001102:	4619      	mov	r1, r3
 8001104:	2040      	movs	r0, #64	@ 0x40
 8001106:	f7ff fecb 	bl	8000ea0 <I2C_ReadReg>

  // Combine the received bytes into a single 16-bit value
  RX_data[0] = RX_Buffer[0];
 800110a:	7c3a      	ldrb	r2, [r7, #16]
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <BQ769x2_ReadRegister+0x9c>)
 800110e:	701a      	strb	r2, [r3, #0]
  RX_data[1] = RX_Buffer[1];
 8001110:	7c7a      	ldrb	r2, [r7, #17]
 8001112:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <BQ769x2_ReadRegister+0x9c>)
 8001114:	705a      	strb	r2, [r3, #1]
  uint16_t reg_data = (RX_Buffer[1] << 8) | RX_Buffer[0];
 8001116:	7c7b      	ldrb	r3, [r7, #17]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	7c3b      	ldrb	r3, [r7, #16]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	82fb      	strh	r3, [r7, #22]

  return reg_data;
 8001126:	8afb      	ldrh	r3, [r7, #22]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000dc 	.word	0x200000dc

08001134 <CommandSubcommands>:
  I2C_WriteReg(0x3E, TX_RegData, datalen + 2);
}

void CommandSubcommands(uint16_t command) // For Command only Subcommands
// See the TRM or the BQ76952 header file for a full list of Command-only subcommands
{ // For DEEPSLEEP/SHUTDOWN subcommand you will need to call this function twice consecutively
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]

  uint8_t TX_Reg[2] = {0x00, 0x00};
 800113e:	2300      	movs	r3, #0
 8001140:	81bb      	strh	r3, [r7, #12]

  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]
  TX_Reg[1] = (command >> 8) & 0xff;
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	737b      	strb	r3, [r7, #13]

  I2C_WriteReg(0x3E, TX_Reg, 2);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2202      	movs	r2, #2
 8001158:	4619      	mov	r1, r3
 800115a:	203e      	movs	r0, #62	@ 0x3e
 800115c:	f7ff fe7a 	bl	8000e54 <I2C_WriteReg>
  delayUS(2000);
 8001160:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001164:	f000 fcc0 	bl	8001ae8 <delayUS>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <Subcommands>:

void Subcommands(uint16_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Subcommands
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	460b      	mov	r3, r1
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	70fb      	strb	r3, [r7, #3]
  // security keys and Manu_data writes dont work with this function (reading these commands works)
  // max readback size is 32 bytes i.e. DASTATUS, CUV/COV snapshot
  uint8_t TX_Reg[4] = {0x00, 0x00, 0x00, 0x00};
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint8_t TX_Buffer[2] = {0x00, 0x00};
 8001186:	2300      	movs	r3, #0
 8001188:	823b      	strh	r3, [r7, #16]
  uint8_t lowByte;
  uint8_t highByte;

  I2C_ReadReg(0x3E, &lowByte, 1);
 800118a:	f107 030f 	add.w	r3, r7, #15
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	203e      	movs	r0, #62	@ 0x3e
 8001194:	f7ff fe84 	bl	8000ea0 <I2C_ReadReg>
  I2C_ReadReg(0x3F, &highByte, 1);
 8001198:	f107 030e 	add.w	r3, r7, #14
 800119c:	2201      	movs	r2, #1
 800119e:	4619      	mov	r1, r3
 80011a0:	203f      	movs	r0, #63	@ 0x3f
 80011a2:	f7ff fe7d 	bl	8000ea0 <I2C_ReadReg>
  // TX_Reg in little endian format
  TX_Reg[0] = command & 0xff;
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	753b      	strb	r3, [r7, #20]
  TX_Reg[1] = (command >> 8) & 0xff;
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	757b      	strb	r3, [r7, #21]

  if (type == R)
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d120      	bne.n	80011fe <Subcommands+0x8e>
  { // read
    I2C_WriteReg(0x3E, TX_Reg, 2);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2202      	movs	r2, #2
 80011c2:	4619      	mov	r1, r3
 80011c4:	203e      	movs	r0, #62	@ 0x3e
 80011c6:	f7ff fe45 	bl	8000e54 <I2C_WriteReg>
    do
    {
      I2C_ReadReg(0x3E, &lowByte, 1);
 80011ca:	f107 030f 	add.w	r3, r7, #15
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	203e      	movs	r0, #62	@ 0x3e
 80011d4:	f7ff fe64 	bl	8000ea0 <I2C_ReadReg>
      I2C_ReadReg(0x3F, &highByte, 1);
 80011d8:	f107 030e 	add.w	r3, r7, #14
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	203f      	movs	r0, #63	@ 0x3f
 80011e2:	f7ff fe5d 	bl	8000ea0 <I2C_ReadReg>
    } while (lowByte == 0xFF && highByte == 0xFF);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2bff      	cmp	r3, #255	@ 0xff
 80011ea:	d102      	bne.n	80011f2 <Subcommands+0x82>
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d0eb      	beq.n	80011ca <Subcommands+0x5a>

    // delayUS(100000);

    I2C_ReadReg(0x40, RX_32Byte, 32); // RX_32Byte is a global variable
 80011f2:	2220      	movs	r2, #32
 80011f4:	492d      	ldr	r1, [pc, #180]	@ (80012ac <Subcommands+0x13c>)
 80011f6:	2040      	movs	r0, #64	@ 0x40
 80011f8:	f7ff fe52 	bl	8000ea0 <I2C_ReadReg>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
    TX_Buffer[1] = 0x06; // combined length of registers address and data
    I2C_WriteReg(0x60, TX_Buffer, 2);
    delayUS(1000);
  }
}
 80011fc:	e051      	b.n	80012a2 <Subcommands+0x132>
  else if (type == W)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d123      	bne.n	800124c <Subcommands+0xdc>
    TX_Reg[2] = data & 0xff;
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	75bb      	strb	r3, [r7, #22]
    I2C_WriteReg(0x3E, TX_Reg, 3);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2203      	movs	r2, #3
 8001210:	4619      	mov	r1, r3
 8001212:	203e      	movs	r0, #62	@ 0x3e
 8001214:	f7ff fe1e 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 8001218:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800121c:	f000 fc64 	bl	8001ae8 <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 3);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2103      	movs	r1, #3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fdf0 	bl	8000e0c <Checksum>
 800122c:	4603      	mov	r3, r0
 800122e:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x05; // combined length of registers address and data
 8001230:	2305      	movs	r3, #5
 8001232:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2202      	movs	r2, #2
 800123a:	4619      	mov	r1, r3
 800123c:	2060      	movs	r0, #96	@ 0x60
 800123e:	f7ff fe09 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001246:	f000 fc4f 	bl	8001ae8 <delayUS>
}
 800124a:	e02a      	b.n	80012a2 <Subcommands+0x132>
  else if (type == W2)
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d127      	bne.n	80012a2 <Subcommands+0x132>
    TX_Reg[2] = data & 0xff;
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	75bb      	strb	r3, [r7, #22]
    TX_Reg[3] = (data >> 8) & 0xff;
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	75fb      	strb	r3, [r7, #23]
    I2C_WriteReg(0x3E, TX_Reg, 4);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	203e      	movs	r0, #62	@ 0x3e
 800126c:	f7ff fdf2 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001274:	f000 fc38 	bl	8001ae8 <delayUS>
    TX_Buffer[0] = Checksum(TX_Reg, 4);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2104      	movs	r1, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fdc4 	bl	8000e0c <Checksum>
 8001284:	4603      	mov	r3, r0
 8001286:	743b      	strb	r3, [r7, #16]
    TX_Buffer[1] = 0x06; // combined length of registers address and data
 8001288:	2306      	movs	r3, #6
 800128a:	747b      	strb	r3, [r7, #17]
    I2C_WriteReg(0x60, TX_Buffer, 2);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2202      	movs	r2, #2
 8001292:	4619      	mov	r1, r3
 8001294:	2060      	movs	r0, #96	@ 0x60
 8001296:	f7ff fddd 	bl	8000e54 <I2C_WriteReg>
    delayUS(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800129e:	f000 fc23 	bl	8001ae8 <delayUS>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000e0 	.word	0x200000e0

080012b0 <DirectCommands>:

void DirectCommands(uint8_t command, uint16_t data, uint8_t type)
// See the TRM or the BQ76952 header file for a full list of Direct Commands
{ // type: R = read, W = write
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	71bb      	strb	r3, [r7, #6]
  uint8_t TX_data[2] = {0x00, 0x00};
 80012c2:	2300      	movs	r3, #0
 80012c4:	81bb      	strh	r3, [r7, #12]

  // little endian format
  TX_data[0] = data & 0xff;
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	733b      	strb	r3, [r7, #12]
  TX_data[1] = (data >> 8) & 0xff;
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	737b      	strb	r3, [r7, #13]

  if (type == R)
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <DirectCommands+0x40>
  {                                   // Read
    I2C_ReadReg(command, RX_data, 2); // RX_data is a global variable
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2202      	movs	r2, #2
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <DirectCommands+0x64>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fddc 	bl	8000ea0 <I2C_ReadReg>
    delayUS(2000);
 80012e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012ec:	f000 fbfc 	bl	8001ae8 <delayUS>
  }
  if (type == W)
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10a      	bne.n	800130c <DirectCommands+0x5c>
  { // write
    // Control_status, alarm_status, alarm_enable all 2 bytes long
    I2C_WriteReg(command, TX_data, 2);
 80012f6:	f107 010c 	add.w	r1, r7, #12
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fda8 	bl	8000e54 <I2C_WriteReg>
    delayUS(2000);
 8001304:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001308:	f000 fbee 	bl	8001ae8 <delayUS>
  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200000dc 	.word	0x200000dc

08001318 <BQ769x2_Init>:

void BQ769x2_Init()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  // Configures all parameters in device RAM

  // Enter CONFIGUPDATE mode (Subcommand 0x0090) - It is required to be in CONFIG_UPDATE mode to program the device RAM settings
  // See TRM for full description of CONFIG_UPDATE mode
  CommandSubcommands(SET_CFGUPDATE);
 800131c:	2090      	movs	r0, #144	@ 0x90
 800131e:	f7ff ff09 	bl	8001134 <CommandSubcommands>
  // a full description of the register and the bits will pop up on the screen.

  // 'Power Config' - 0x9234 = 0x2D80
  // Setting the DSLP_LDO bit allows the LDOs to remain active when the device goes into Deep Sleep mode
  // Set wake speed bits to 00 for best performance
  BQ769x2_SetRegister(PowerConfig, 0x2D80, 2);
 8001322:	2202      	movs	r2, #2
 8001324:	f44f 5136 	mov.w	r1, #11648	@ 0x2d80
 8001328:	f249 2034 	movw	r0, #37428	@ 0x9234
 800132c:	f7ff fde0 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'REG0 Config' - set REG0_EN bit to enable pre-regulator
  BQ769x2_SetRegister(REG0Config, 0x01, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	2101      	movs	r1, #1
 8001334:	f249 2037 	movw	r0, #37431	@ 0x9237
 8001338:	f7ff fdda 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'REG12 Config' - Enable REG1 with 3.3V output (0x0D for 3.3V, 0x0F for 5V)
  BQ769x2_SetRegister(REG12Config, 0x0D, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	210d      	movs	r1, #13
 8001340:	f249 2036 	movw	r0, #37430	@ 0x9236
 8001344:	f7ff fdd4 	bl	8000ef0 <BQ769x2_SetRegister>
  // BQ769x2_SetRegister(DFETOFFPinConfig, 0x42, 1);

  // Set up ALERT Pin - 0x92FC = 0x2A
  // This configures the ALERT pin to drive high (REG1 voltage) when enabled.
  // The ALERT pin can be used as an interrupt to the MCU when a protection has triggered or new measurements are available
  BQ769x2_SetRegister(ALERTPinConfig, 0xAA, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	21aa      	movs	r1, #170	@ 0xaa
 800134c:	f249 20fc 	movw	r0, #37628	@ 0x92fc
 8001350:	f7ff fdce 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set TS1 to measure Cell Temperature - 0x92FD = 0x07
  BQ769x2_SetRegister(TS1Config, 0x07, 1);
 8001354:	2201      	movs	r2, #1
 8001356:	2107      	movs	r1, #7
 8001358:	f249 20fd 	movw	r0, #37629	@ 0x92fd
 800135c:	f7ff fdc8 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set TS3 to measure FET Temperature - 0x92FF = 0x0F
  BQ769x2_SetRegister(TS3Config, 0x07, 1);
 8001360:	2201      	movs	r2, #1
 8001362:	2107      	movs	r1, #7
 8001364:	f249 20ff 	movw	r0, #37631	@ 0x92ff
 8001368:	f7ff fdc2 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set HDQ to measure Cell Temperature - 0x9300 = 0x07
  BQ769x2_SetRegister(HDQPinConfig, 0x00, 1); // No thermistor installed on EVM HDQ pin, so set to 0x00
 800136c:	2201      	movs	r2, #1
 800136e:	2100      	movs	r1, #0
 8001370:	f44f 4013 	mov.w	r0, #37632	@ 0x9300
 8001374:	f7ff fdbc 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'VCell Mode' - Enable 16 cells - 0x9304 = 0x0000; Writing 0x0000 sets the default of 16 cells
  BQ769x2_SetRegister(VCellMode, 0x801F, 2); // default 0x0000
 8001378:	2202      	movs	r2, #2
 800137a:	f248 011f 	movw	r1, #32799	@ 0x801f
 800137e:	f249 3004 	movw	r0, #37636	@ 0x9304
 8001382:	f7ff fdb5 	bl	8000ef0 <BQ769x2_SetRegister>

  // Enable protections in 'Enabled Protections A' 0x9261 = 0xBC
  // Enables SCD (short-circuit), OCD1 (over-current in discharge), OCC (over-current in charge),
  // COV (over-voltage), CUV (under-voltage)
  BQ769x2_SetRegister(EnabledProtectionsA, 0xBC, 1);
 8001386:	2201      	movs	r2, #1
 8001388:	21bc      	movs	r1, #188	@ 0xbc
 800138a:	f249 2061 	movw	r0, #37473	@ 0x9261
 800138e:	f7ff fdaf 	bl	8000ef0 <BQ769x2_SetRegister>

  // Enable all protections in 'Enabled Protections B' 0x9262 = 0xF7
  // Enables OTF (over-temperature FET), OTINT (internal over-temperature), OTD (over-temperature in discharge),
  // OTC (over-temperature in charge), UTINT (internal under-temperature), UTD (under-temperature in discharge), UTC (under-temperature in charge)
  BQ769x2_SetRegister(EnabledProtectionsB, 0xF7, 1);
 8001392:	2201      	movs	r2, #1
 8001394:	21f7      	movs	r1, #247	@ 0xf7
 8001396:	f249 2062 	movw	r0, #37474	@ 0x9262
 800139a:	f7ff fda9 	bl	8000ef0 <BQ769x2_SetRegister>

  // 'Default Alarm Mask' - 0x..82 Enables the FullScan and ADScan bits, default value = 0xF800
  BQ769x2_SetRegister(DefaultAlarmMask, 0xFFFF, 2);
 800139e:	2202      	movs	r2, #2
 80013a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013a4:	f249 206d 	movw	r0, #37485	@ 0x926d
 80013a8:	f7ff fda2 	bl	8000ef0 <BQ769x2_SetRegister>
  // Set up CUV (under-voltage) Threshold - 0x9275 = 0x31 (2479 mV)
  // CUV Threshold is this value multiplied by 50.6mV

  // BQ769x2_SetRegister(CUVThreshold, 0x14, 1);

  BQ769x2_SetRegister(CUVThreshold, 0x31, 1);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2131      	movs	r1, #49	@ 0x31
 80013b0:	f249 2075 	movw	r0, #37493	@ 0x9275
 80013b4:	f7ff fd9c 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up COV (over-voltage) Threshold - 0x9278 = 0x55 (4301 mV)
  // COV Threshold is this value multiplied by 50.6mV
  // BQ769x2_SetRegister(COVThreshold, 0x55, 1);

  BQ769x2_SetRegister(COVThreshold, 0x55, 1);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2155      	movs	r1, #85	@ 0x55
 80013bc:	f249 2078 	movw	r0, #37496	@ 0x9278
 80013c0:	f7ff fd96 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up OCC (over-current in charge) Threshold - 0x9280 = 0x05 (10 mV = 10A across 1mOhm sense resistor) Units in 2mV
  BQ769x2_SetRegister(OCCThreshold, 0x02, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2102      	movs	r1, #2
 80013c8:	f249 2080 	movw	r0, #37504	@ 0x9280
 80013cc:	f7ff fd90 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up OCD1 Threshold - 0x9282 = 0x0A (20 mV = 20A across 1mOhm sense resistor) units of 2mV
  BQ769x2_SetRegister(OCD1Threshold, 0x03, 1);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2103      	movs	r1, #3
 80013d4:	f249 2082 	movw	r0, #37506	@ 0x9282
 80013d8:	f7ff fd8a 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up SCD Threshold - 0x9286 = 0x05 (100 mV = 100A across 1mOhm sense resistor)  0x05=100mV
  BQ769x2_SetRegister(SCDThreshold, 0x01, 1);
 80013dc:	2201      	movs	r2, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	f249 2086 	movw	r0, #37510	@ 0x9286
 80013e4:	f7ff fd84 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up SCD Delay - 0x9287 = 0x03 (30 us) Enabled with a delay of (value - 1) * 15 µs; min value of 1
  BQ769x2_SetRegister(SCDDelay, 0x03, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2103      	movs	r1, #3
 80013ec:	f249 2087 	movw	r0, #37511	@ 0x9287
 80013f0:	f7ff fd7e 	bl	8000ef0 <BQ769x2_SetRegister>

  // Set up SCDL Latch Limit to 1 to set SCD recovery only with load removal 0x9295 = 0x01
  // If this is not set, then SCD will recover based on time (SCD Recovery Time parameter).
  BQ769x2_SetRegister(SCDLLatchLimit, 0x01, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2101      	movs	r1, #1
 80013f8:	f249 2095 	movw	r0, #37525	@ 0x9295
 80013fc:	f7ff fd78 	bl	8000ef0 <BQ769x2_SetRegister>

  BQ769x2_SetRegister(MfgStatusInit, 0x0050, 2); // disable test mode
 8001400:	2202      	movs	r2, #2
 8001402:	2150      	movs	r1, #80	@ 0x50
 8001404:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001408:	f7ff fd72 	bl	8000ef0 <BQ769x2_SetRegister>

  BQ769x2_SetRegister(FETOptions, 0x3F, 1); // 0x3F
 800140c:	2201      	movs	r2, #1
 800140e:	213f      	movs	r1, #63	@ 0x3f
 8001410:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001414:	f7ff fd6c 	bl	8000ef0 <BQ769x2_SetRegister>

  // BQ769x2_SetRegister(TS1Config, 0x0B, 1);
  //  Exit CONFIGUPDATE mode  - Subcommand 0x0092

  // BQ769x2_SetRegister(CCGain, 0x41C9C800, 4);
  BQ769x2_SetRegister(DAConfiguration, 0x05, 1); // set user Amps to 1mA
 8001418:	2201      	movs	r2, #1
 800141a:	2105      	movs	r1, #5
 800141c:	f249 3003 	movw	r0, #37635	@ 0x9303
 8001420:	f7ff fd66 	bl	8000ef0 <BQ769x2_SetRegister>

  Subcommands(FET_CONTROL, 0x03, W);
 8001424:	2201      	movs	r2, #1
 8001426:	2103      	movs	r1, #3
 8001428:	2097      	movs	r0, #151	@ 0x97
 800142a:	f7ff fea1 	bl	8001170 <Subcommands>

  CommandSubcommands(EXIT_CFGUPDATE);
 800142e:	2092      	movs	r0, #146	@ 0x92
 8001430:	f7ff fe80 	bl	8001134 <CommandSubcommands>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <BQ769x2_ReadAlarmStatus>:
// ********************************* End of BQ769x2 Power Commands   *****************************************

// ********************************* BQ769x2 Status and Fault Commands   *****************************************

uint16_t BQ769x2_ReadAlarmStatus()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  // Read this register to find out why the ALERT pin was asserted
  DirectCommands(AlarmStatus, 0x00, R);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2062      	movs	r0, #98	@ 0x62
 8001442:	f7ff ff35 	bl	80012b0 <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]);
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <BQ769x2_ReadAlarmStatus+0x24>)
 8001448:	785b      	ldrb	r3, [r3, #1]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b29b      	uxth	r3, r3
 800144e:	4a03      	ldr	r2, [pc, #12]	@ (800145c <BQ769x2_ReadAlarmStatus+0x24>)
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000dc 	.word	0x200000dc

08001460 <BQ769x2_ReadSafetyStatus>:

void BQ769x2_ReadSafetyStatus()
{ // good example functions
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  // Read Safety Status A/B/C and find which bits are set
  // This shows which primary protections have been triggered
  DirectCommands(SafetyStatusA, 0x00, R);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2003      	movs	r0, #3
 800146a:	f7ff ff21 	bl	80012b0 <DirectCommands>
  value_SafetyStatusA = (RX_data[1] * 256 + RX_data[0]);
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <BQ769x2_ReadSafetyStatus+0xb0>)
 8001474:	701a      	strb	r2, [r3, #0]
  // Example Fault Flags
  UV_Fault = ((0x4 & RX_data[0]) >> 2);
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <BQ769x2_ReadSafetyStatus+0xb4>)
 8001486:	701a      	strb	r2, [r3, #0]
  OV_Fault = ((0x8 & RX_data[0]) >> 3);
 8001488:	4b20      	ldr	r3, [pc, #128]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <BQ769x2_ReadSafetyStatus+0xb8>)
 8001498:	701a      	strb	r2, [r3, #0]
  SCD_Fault = ((0x8 & RX_data[1]) >> 3);
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <BQ769x2_ReadSafetyStatus+0xbc>)
 80014aa:	701a      	strb	r2, [r3, #0]
  OCD_Fault = ((0x2 & RX_data[1]) >> 1);
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <BQ769x2_ReadSafetyStatus+0xc0>)
 80014bc:	701a      	strb	r2, [r3, #0]
  DirectCommands(SafetyStatusB, 0x00, R);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2005      	movs	r0, #5
 80014c4:	f7ff fef4 	bl	80012b0 <DirectCommands>
  value_SafetyStatusB = (RX_data[1] * 256 + RX_data[0]);
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <BQ769x2_ReadSafetyStatus+0xc4>)
 80014ce:	701a      	strb	r2, [r3, #0]
  DirectCommands(SafetyStatusC, 0x00, R);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2007      	movs	r0, #7
 80014d6:	f7ff feeb 	bl	80012b0 <DirectCommands>
  value_SafetyStatusC = (RX_data[1] * 256 + RX_data[0]);
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <BQ769x2_ReadSafetyStatus+0xac>)
 80014dc:	781a      	ldrb	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <BQ769x2_ReadSafetyStatus+0xc8>)
 80014e0:	701a      	strb	r2, [r3, #0]
  if ((value_SafetyStatusA + value_SafetyStatusB + value_SafetyStatusC) > 1)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <BQ769x2_ReadSafetyStatus+0xb0>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <BQ769x2_ReadSafetyStatus+0xc4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001528 <BQ769x2_ReadSafetyStatus+0xc8>)
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	dd03      	ble.n	8001500 <BQ769x2_ReadSafetyStatus+0xa0>
  {
    ProtectionsTriggered = 1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <BQ769x2_ReadSafetyStatus+0xcc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    ProtectionsTriggered = 0;
  }
}
 80014fe:	e002      	b.n	8001506 <BQ769x2_ReadSafetyStatus+0xa6>
    ProtectionsTriggered = 0;
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <BQ769x2_ReadSafetyStatus+0xcc>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200000dc 	.word	0x200000dc
 8001510:	20000130 	.word	0x20000130
 8001514:	20000133 	.word	0x20000133
 8001518:	20000134 	.word	0x20000134
 800151c:	20000135 	.word	0x20000135
 8001520:	20000136 	.word	0x20000136
 8001524:	20000131 	.word	0x20000131
 8001528:	20000132 	.word	0x20000132
 800152c:	20000137 	.word	0x20000137

08001530 <BQ769x2_ReadVoltage>:

// ********************************* BQ769x2 Measurement Commands   *****************************************

uint16_t BQ769x2_ReadVoltage(uint8_t command, bms_context *bms)
// This function can be used to read a specific cell voltage or stack / pack / LD voltage
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  // RX_data is global var
  DirectCommands(command, 0x00, R);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff feb4 	bl	80012b0 <DirectCommands>
  if (command >= Cell1Voltage && command <= Cell16Voltage)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b13      	cmp	r3, #19
 800154c:	d90b      	bls.n	8001566 <BQ769x2_ReadVoltage+0x36>
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b32      	cmp	r3, #50	@ 0x32
 8001552:	d808      	bhi.n	8001566 <BQ769x2_ReadVoltage+0x36>
  {                                         // Cells 1 through 16 (0x14 to 0x32)
    return (RX_data[1] * 256 + RX_data[0]); // voltage is reported in mV
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	4413      	add	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	e00b      	b.n	800157e <BQ769x2_ReadVoltage+0x4e>
  }
  else
  {                                              // stack, Pack, LD
    return 10 * (RX_data[1] * 256 + RX_data[0]); // voltage is reported in 0.01V units
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <BQ769x2_ReadVoltage+0x58>)
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4413      	add	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	b29b      	uxth	r3, r3
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000dc 	.word	0x200000dc

0800158c <BQ769x2_ReadAllVoltages>:

void BQ769x2_ReadAllVoltages(bms_context *bms)
// Reads all cell voltages, Stack voltage, PACK pin voltage, and LD pin voltage
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  int cellvoltageholder = Cell1Voltage; // Cell1Voltage is 0x14
 8001594:	2314      	movs	r3, #20
 8001596:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 16; x++)
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	e011      	b.n	80015c2 <BQ769x2_ReadAllVoltages+0x36>
  { // Reads all cell voltages
    CellVoltage[x] = BQ769x2_ReadVoltage(cellvoltageholder, bms);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ffc3 	bl	8001530 <BQ769x2_ReadVoltage>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <BQ769x2_ReadAllVoltages+0x74>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    cellvoltageholder = cellvoltageholder + 2;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3302      	adds	r3, #2
 80015ba:	60fb      	str	r3, [r7, #12]
  for (int x = 0; x < 16; x++)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3301      	adds	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	ddea      	ble.n	800159e <BQ769x2_ReadAllVoltages+0x12>
  }
  bms->Stack_Voltage = BQ769x2_ReadVoltage(StackVoltage, bms);
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	2034      	movs	r0, #52	@ 0x34
 80015cc:	f7ff ffb0 	bl	8001530 <BQ769x2_ReadVoltage>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	821a      	strh	r2, [r3, #16]
  bms->Pack_Voltage = BQ769x2_ReadVoltage(PACKPinVoltage, bms);
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	2036      	movs	r0, #54	@ 0x36
 80015dc:	f7ff ffa8 	bl	8001530 <BQ769x2_ReadVoltage>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	825a      	strh	r2, [r3, #18]
  bms->LD_Voltage = BQ769x2_ReadVoltage(LDPinVoltage, bms);
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	2038      	movs	r0, #56	@ 0x38
 80015ec:	f7ff ffa0 	bl	8001530 <BQ769x2_ReadVoltage>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	829a      	strh	r2, [r3, #20]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000100 	.word	0x20000100

08001604 <BQ769x2_ReadCurrent>:

uint16_t BQ769x2_ReadCurrent()
// Reads PACK current
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  DirectCommands(CC2Current, 0x00, R);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	203a      	movs	r0, #58	@ 0x3a
 800160e:	f7ff fe4f 	bl	80012b0 <DirectCommands>
  return (RX_data[1] * 256 + RX_data[0]); // current is reported in mA
 8001612:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <BQ769x2_ReadCurrent+0x24>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	4a03      	ldr	r2, [pc, #12]	@ (8001628 <BQ769x2_ReadCurrent+0x24>)
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4413      	add	r3, r2
 8001620:	b29b      	uxth	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200000dc 	.word	0x200000dc
 800162c:	00000000 	.word	0x00000000

08001630 <BQ769x2_ReadTemperature>:

float BQ769x2_ReadTemperature(uint8_t command)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  DirectCommands(command, 0x00, R);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe35 	bl	80012b0 <DirectCommands>
  // RX_data is a global var
  return (0.1 * (float)(RX_data[1] * 256 + RX_data[0])) - 273.15; // converts from 0.1K to Celcius
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <BQ769x2_ReadTemperature+0x80>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <BQ769x2_ReadTemperature+0x80>)
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	4413      	add	r3, r2
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee17 0a90 	vmov	r0, s15
 800165e:	f7ff f90d 	bl	800087c <__aeabi_f2d>
 8001662:	a30f      	add	r3, pc, #60	@ (adr r3, 80016a0 <BQ769x2_ReadTemperature+0x70>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7fe fe7a 	bl	8000360 <__aeabi_dmul>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	a30c      	add	r3, pc, #48	@ (adr r3, 80016a8 <BQ769x2_ReadTemperature+0x78>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ff9f 	bl	80005bc <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff f9f9 	bl	8000a7c <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	ee07 3a90 	vmov	s15, r3
}
 8001690:	eeb0 0a67 	vmov.f32	s0, s15
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	f3af 8000 	nop.w
 80016a0:	9999999a 	.word	0x9999999a
 80016a4:	3fb99999 	.word	0x3fb99999
 80016a8:	66666666 	.word	0x66666666
 80016ac:	40711266 	.word	0x40711266
 80016b0:	200000dc 	.word	0x200000dc

080016b4 <BQ769x2_ReadPassQ>:

float BQ769x2_ReadPassQ(){ // Read Accumulated Charge and Time from DASTATUS6
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

		Subcommands(DASTATUS6, 0x00, R);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2076      	movs	r0, #118	@ 0x76
 80016c0:	f7ff fd56 	bl	8001170 <Subcommands>

		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	061a      	lsls	r2, r3, #24
 80016ca:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016cc:	789b      	ldrb	r3, [r3, #2]
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	431a      	orrs	r2, r3
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 80016d2:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016d4:	785b      	ldrb	r3, [r3, #1]
 80016d6:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 80016d8:	4313      	orrs	r3, r2
	                            ((uint32_t)RX_32Byte[1] << 8) | RX_32Byte[0];
 80016da:	4a28      	ldr	r2, [pc, #160]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	461a      	mov	r2, r3
		AccumulatedCharge_Int = ((uint32_t)RX_32Byte[3] << 24) | ((uint32_t)RX_32Byte[2] << 16) |
 80016e2:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <BQ769x2_ReadPassQ+0xcc>)
 80016e4:	601a      	str	r2, [r3, #0]
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016e8:	79db      	ldrb	r3, [r3, #7]
 80016ea:	061a      	lsls	r2, r3, #24
 80016ec:	4b23      	ldr	r3, [pc, #140]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016ee:	799b      	ldrb	r3, [r3, #6]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 80016f4:	4b21      	ldr	r3, [pc, #132]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016f6:	795b      	ldrb	r3, [r3, #5]
 80016f8:	021b      	lsls	r3, r3, #8
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 80016fa:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[5] << 8) | RX_32Byte[4];
 80016fc:	4a1f      	ldr	r2, [pc, #124]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 80016fe:	7912      	ldrb	r2, [r2, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	461a      	mov	r2, r3
		AccumulatedCharge_Frac = ((uint32_t)RX_32Byte[7] << 24) | ((uint32_t)RX_32Byte[6] << 16) |
 8001704:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <BQ769x2_ReadPassQ+0xd0>)
 8001706:	601a      	str	r2, [r3, #0]
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 8001708:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 800170a:	7adb      	ldrb	r3, [r3, #11]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 8001710:	7a9b      	ldrb	r3, [r3, #10]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	431a      	orrs	r2, r3
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 8001718:	7a5b      	ldrb	r3, [r3, #9]
 800171a:	021b      	lsls	r3, r3, #8
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 800171c:	4313      	orrs	r3, r2
	                             ((uint32_t)RX_32Byte[9] << 8) | RX_32Byte[8];
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <BQ769x2_ReadPassQ+0xc8>)
 8001720:	7a12      	ldrb	r2, [r2, #8]
 8001722:	4313      	orrs	r3, r2
 8001724:	461a      	mov	r2, r3
	    AccumulatedCharge_Time = ((uint32_t)RX_32Byte[11] << 24) | ((uint32_t)RX_32Byte[10] << 16) |
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <BQ769x2_ReadPassQ+0xd4>)
 8001728:	601a      	str	r2, [r3, #0]
//	    else{
//	    	charge = AccumulatedCharge_Int;
//	    }

	    //charge = 0xFFFFFFFF - AccumulatedCharge_Int;
	    float totalAccumulatedCharge_mAh = (float)AccumulatedCharge_Int + ((float)AccumulatedCharge_Frac / FRAC_DIVISOR);
 800172a:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <BQ769x2_ReadPassQ+0xcc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <BQ769x2_ReadPassQ+0xd0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001742:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 800178c <BQ769x2_ReadPassQ+0xd8>
 8001746:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	edc7 7a01 	vstr	s15, [r7, #4]
	    float totalAccumulatedCharge_Ah = totalAccumulatedCharge_mAh / 1000.0f;
 8001752:	ed97 7a01 	vldr	s14, [r7, #4]
 8001756:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001790 <BQ769x2_ReadPassQ+0xdc>
 800175a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175e:	edc7 7a00 	vstr	s15, [r7]

	    coulumbs = totalAccumulatedCharge_mAh;
 8001762:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <BQ769x2_ReadPassQ+0xe0>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6013      	str	r3, [r2, #0]
	    return coulumbs;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <BQ769x2_ReadPassQ+0xe0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ee07 3a90 	vmov	s15, r3
}
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000e0 	.word	0x200000e0
 8001780:	20000138 	.word	0x20000138
 8001784:	2000013c 	.word	0x2000013c
 8001788:	20000140 	.word	0x20000140
 800178c:	4f800000 	.word	0x4f800000
 8001790:	447a0000 	.word	0x447a0000
 8001794:	20000144 	.word	0x20000144

08001798 <bms_charge_error>:
}

// ********************************* End of BQ769x2 Measurement Commands   *****************************************

bool bms_charge_error()
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ProtectionsTriggered && (OV_Fault || SCD_Fault || OCD_Fault);
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <bms_charge_error+0x3c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00d      	beq.n	80017c0 <bms_charge_error+0x28>
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <bms_charge_error+0x40>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <bms_charge_error+0x24>
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <bms_charge_error+0x44>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <bms_charge_error+0x24>
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <bms_charge_error+0x48>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <bms_charge_error+0x28>
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <bms_charge_error+0x2a>
 80017c0:	2300      	movs	r3, #0
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000137 	.word	0x20000137
 80017d8:	20000134 	.word	0x20000134
 80017dc:	20000135 	.word	0x20000135
 80017e0:	20000136 	.word	0x20000136

080017e4 <bms_discharge_error>:

bool bms_discharge_error()
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ProtectionsTriggered && (UV_Fault || SCD_Fault || OCD_Fault);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <bms_discharge_error+0x3c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <bms_discharge_error+0x28>
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <bms_discharge_error+0x40>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <bms_discharge_error+0x24>
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <bms_discharge_error+0x44>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <bms_discharge_error+0x24>
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <bms_discharge_error+0x48>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <bms_discharge_error+0x28>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <bms_discharge_error+0x2a>
 800180c:	2300      	movs	r3, #0
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000137 	.word	0x20000137
 8001824:	20000133 	.word	0x20000133
 8001828:	20000135 	.word	0x20000135
 800182c:	20000136 	.word	0x20000136

08001830 <bms_charge_allowed>:

bool bms_charge_allowed(bms_context *bms)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  return !bms->battery_full && !bms_charge_error() && bms->charge_enable;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	78db      	ldrb	r3, [r3, #3]
 800183c:	f083 0301 	eor.w	r3, r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <bms_charge_allowed+0x32>
 8001846:	f7ff ffa7 	bl	8001798 <bms_charge_error>
 800184a:	4603      	mov	r3, r0
 800184c:	f083 0301 	eor.w	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <bms_charge_allowed+0x32>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <bms_charge_allowed+0x32>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <bms_charge_allowed+0x34>
 8001862:	2300      	movs	r3, #0
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <bms_discharge_allowed>:

bool bms_discharge_allowed(bms_context *bms)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  // Use logical AND (&&) for combining boolean conditions
  return !bms->battery_empty && !bms_discharge_error() && bms->discharge_enable;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	791b      	ldrb	r3, [r3, #4]
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00d      	beq.n	80018a4 <bms_discharge_allowed+0x32>
 8001888:	f7ff ffac 	bl	80017e4 <bms_discharge_error>
 800188c:	4603      	mov	r3, r0
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <bms_discharge_allowed+0x32>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	789b      	ldrb	r3, [r3, #2]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <bms_discharge_allowed+0x32>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <bms_discharge_allowed+0x34>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <bms_state_machine>:

void bms_state_machine(bms_context *bms)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  switch (bms->bms_state)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d87e      	bhi.n	80019c2 <bms_state_machine+0x10e>
 80018c4:	a201      	add	r2, pc, #4	@ (adr r2, 80018cc <bms_state_machine+0x18>)
 80018c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ca:	bf00      	nop
 80018cc:	080018e1 	.word	0x080018e1
 80018d0:	08001915 	.word	0x08001915
 80018d4:	08001949 	.word	0x08001949
 80018d8:	0800197d 	.word	0x0800197d
 80018dc:	080019b1 	.word	0x080019b1
  {
  case BMS_STATE_OFF:
    if (bms_discharge_allowed(bms))
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffc6 	bl	8001872 <bms_discharge_allowed>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <bms_state_machine+0x46>
    {
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_DIS, true);
      CommandSubcommands(ALL_FETS_ON);
 80018ec:	2096      	movs	r0, #150	@ 0x96
 80018ee:	f7ff fc21 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_DIS;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	701a      	strb	r2, [r3, #0]
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_CHG, true);
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_CHG;
      // LOG_INF("OFF -> CHG (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 80018f8:	e05c      	b.n	80019b4 <bms_state_machine+0x100>
    else if (bms_charge_allowed(bms))
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff98 	bl	8001830 <bms_charge_allowed>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d056      	beq.n	80019b4 <bms_state_machine+0x100>
      CommandSubcommands(ALL_FETS_ON);
 8001906:	2096      	movs	r0, #150	@ 0x96
 8001908:	f7ff fc14 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_CHG;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
    break;
 8001912:	e04f      	b.n	80019b4 <bms_state_machine+0x100>

  case BMS_STATE_CHG:
    if (!bms_charge_allowed(bms))
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff8b 	bl	8001830 <bms_charge_allowed>
 800191a:	4603      	mov	r3, r0
 800191c:	f083 0301 	eor.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <bms_state_machine+0x7a>
    {
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_CHG, false);
      /* DIS switch may be on on because of ideal diode control */
      // bms_ic_set_switches(bms->ic_dev, BMS_SWITCH_DIS, false);
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_OFF;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
    {
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_NORMAL;
      // LOG_INF("CHG -> NORMAL (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 800192c:	e044      	b.n	80019b8 <bms_state_machine+0x104>
    else if (bms_discharge_allowed(bms))
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff9f 	bl	8001872 <bms_discharge_allowed>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d03e      	beq.n	80019b8 <bms_state_machine+0x104>
      CommandSubcommands(ALL_FETS_ON);
 800193a:	2096      	movs	r0, #150	@ 0x96
 800193c:	f7ff fbfa 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_NORMAL;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	701a      	strb	r2, [r3, #0]
    break;
 8001946:	e037      	b.n	80019b8 <bms_state_machine+0x104>

  case BMS_STATE_DIS:
    if (!bms_discharge_allowed(bms))
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff92 	bl	8001872 <bms_discharge_allowed>
 800194e:	4603      	mov	r3, r0
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <bms_state_machine+0xae>
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_OFF;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    {
      CommandSubcommands(ALL_FETS_ON);
      bms->bms_state = BMS_STATE_NORMAL;
      // LOG_INF("DIS -> NORMAL (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001960:	e02c      	b.n	80019bc <bms_state_machine+0x108>
    else if (bms_charge_allowed(bms))
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff64 	bl	8001830 <bms_charge_allowed>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d026      	beq.n	80019bc <bms_state_machine+0x108>
      CommandSubcommands(ALL_FETS_ON);
 800196e:	2096      	movs	r0, #150	@ 0x96
 8001970:	f7ff fbe0 	bl	8001134 <CommandSubcommands>
      bms->bms_state = BMS_STATE_NORMAL;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	701a      	strb	r2, [r3, #0]
    break;
 800197a:	e01f      	b.n	80019bc <bms_state_machine+0x108>

  case BMS_STATE_NORMAL:
    if (!bms_discharge_allowed(bms))
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff78 	bl	8001872 <bms_discharge_allowed>
 8001982:	4603      	mov	r3, r0
 8001984:	f083 0301 	eor.w	r3, r3, #1
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <bms_state_machine+0xe2>
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_CHG;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
    {
      // CommandSubcommands(ALL_FETS_OFF);
      bms->bms_state = BMS_STATE_DIS;
      // LOG_INF("NORMAL -> DIS (error flags: 0x%08x)", bms->ic_data.error_flags);
    }
    break;
 8001994:	e014      	b.n	80019c0 <bms_state_machine+0x10c>
    else if (!bms_charge_allowed(bms))
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff4a 	bl	8001830 <bms_charge_allowed>
 800199c:	4603      	mov	r3, r0
 800199e:	f083 0301 	eor.w	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <bms_state_machine+0x10c>
      bms->bms_state = BMS_STATE_DIS;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
    break;
 80019ae:	e007      	b.n	80019c0 <bms_state_machine+0x10c>

  case BMS_STATE_SHUTDOWN:
    /* do nothing and wait until shutdown is completed */
    break;
 80019b0:	bf00      	nop
 80019b2:	e006      	b.n	80019c2 <bms_state_machine+0x10e>
    break;
 80019b4:	bf00      	nop
 80019b6:	e004      	b.n	80019c2 <bms_state_machine+0x10e>
    break;
 80019b8:	bf00      	nop
 80019ba:	e002      	b.n	80019c2 <bms_state_machine+0x10e>
    break;
 80019bc:	bf00      	nop
 80019be:	e000      	b.n	80019c2 <bms_state_machine+0x10e>
    break;
 80019c0:	bf00      	nop
  }
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop

080019cc <get_val_lookup_table>:

// Define NUM_PAIRS based on the size of the array
const size_t NUM_PAIRS = sizeof(g_ocv_q_released_mah_table) / sizeof(g_ocv_q_released_mah_table[0]);

uint16_t get_val_lookup_table(const VoltageCapacityPair *table, size_t numPairs, uint16_t in_value)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b08b      	sub	sp, #44	@ 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	80fb      	strh	r3, [r7, #6]
    uint16_t x_input_diff;
    uint16_t x_diff;
    uint16_t y_input_diff;
    uint16_t y_return;

    if (numPairs == 0)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <get_val_lookup_table+0x18>
    {
        return 0; // Handle zero pairs gracefully
 80019e0:	2300      	movs	r3, #0
 80019e2:	e07b      	b.n	8001adc <get_val_lookup_table+0x110>
    }

    if (in_value <= table[0].voltage_mV)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d802      	bhi.n	80019f4 <get_val_lookup_table+0x28>
    {
        return table[0].capacity_mAh;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	885b      	ldrh	r3, [r3, #2]
 80019f2:	e073      	b.n	8001adc <get_val_lookup_table+0x110>
    }

    if (in_value >= table[numPairs - 1].voltage_mV)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019fa:	3b01      	subs	r3, #1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4413      	add	r3, r2
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d308      	bcc.n	8001a1c <get_val_lookup_table+0x50>
    {
        return table[numPairs - 1].capacity_mAh;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a10:	3b01      	subs	r3, #1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	885b      	ldrh	r3, [r3, #2]
 8001a1a:	e05f      	b.n	8001adc <get_val_lookup_table+0x110>
    }

    for (size_t i = 0; i < numPairs - 1; i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	e055      	b.n	8001ace <get_val_lookup_table+0x102>
    {
        uint16_t x_low = table[i].voltage_mV;
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	83fb      	strh	r3, [r7, #30]
        uint16_t x_high = table[i + 1].voltage_mV;
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	3301      	adds	r3, #1
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	83bb      	strh	r3, [r7, #28]

        if (in_value >= x_low && in_value <= x_high)
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	8bfb      	ldrh	r3, [r7, #30]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d341      	bcc.n	8001ac8 <get_val_lookup_table+0xfc>
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	8bbb      	ldrh	r3, [r7, #28]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d83d      	bhi.n	8001ac8 <get_val_lookup_table+0xfc>
        {
            y_low = table[i].capacity_mAh;
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	885b      	ldrh	r3, [r3, #2]
 8001a56:	837b      	strh	r3, [r7, #26]
            y_high = table[i + 1].capacity_mAh;
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	833b      	strh	r3, [r7, #24]

            if (in_value == x_low)
 8001a66:	88fa      	ldrh	r2, [r7, #6]
 8001a68:	8bfb      	ldrh	r3, [r7, #30]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d101      	bne.n	8001a72 <get_val_lookup_table+0xa6>
            {
                return y_low; // Exact match with a known x value
 8001a6e:	8b7b      	ldrh	r3, [r7, #26]
 8001a70:	e034      	b.n	8001adc <get_val_lookup_table+0x110>
            }

            x_input_diff = in_value - x_low;
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	8bfb      	ldrh	r3, [r7, #30]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	82fb      	strh	r3, [r7, #22]
            x_diff = x_high - x_low;
 8001a7a:	8bba      	ldrh	r2, [r7, #28]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	82bb      	strh	r3, [r7, #20]

            if (y_high > y_low)
 8001a82:	8b3a      	ldrh	r2, [r7, #24]
 8001a84:	8b7b      	ldrh	r3, [r7, #26]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d90e      	bls.n	8001aa8 <get_val_lookup_table+0xdc>
            {
                y_input_diff = ((y_high - y_low) * x_input_diff) / x_diff;
 8001a8a:	8b3a      	ldrh	r2, [r7, #24]
 8001a8c:	8b7b      	ldrh	r3, [r7, #26]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	8afa      	ldrh	r2, [r7, #22]
 8001a92:	fb03 f202 	mul.w	r2, r3, r2
 8001a96:	8abb      	ldrh	r3, [r7, #20]
 8001a98:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a9c:	827b      	strh	r3, [r7, #18]
                y_return = y_low + y_input_diff;
 8001a9e:	8b7a      	ldrh	r2, [r7, #26]
 8001aa0:	8a7b      	ldrh	r3, [r7, #18]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001aa6:	e00d      	b.n	8001ac4 <get_val_lookup_table+0xf8>
            }
            else
            {
                y_input_diff = ((y_low - y_high) * x_input_diff) / x_diff;
 8001aa8:	8b7a      	ldrh	r2, [r7, #26]
 8001aaa:	8b3b      	ldrh	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	8afa      	ldrh	r2, [r7, #22]
 8001ab0:	fb03 f202 	mul.w	r2, r3, r2
 8001ab4:	8abb      	ldrh	r3, [r7, #20]
 8001ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aba:	827b      	strh	r3, [r7, #18]
                y_return = y_low - y_input_diff;
 8001abc:	8b7a      	ldrh	r2, [r7, #26]
 8001abe:	8a7b      	ldrh	r3, [r7, #18]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            }

            return y_return;
 8001ac4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ac6:	e009      	b.n	8001adc <get_val_lookup_table+0x110>
    for (size_t i = 0; i < numPairs - 1; i++)
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	3301      	adds	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3a4      	bcc.n	8001a22 <get_val_lookup_table+0x56>
        }
    }

    return table[0].capacity_mAh; // Fallback return
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	885b      	ldrh	r3, [r3, #2]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	372c      	adds	r7, #44	@ 0x2c
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <delayUS>:
static void soc_task(void *parameters);
static void read_voltage_task(void *parameters);
static void bms_state_machine_task(void *parameters);

void delayUS(uint32_t us)
{                                    // Sets the delay in microseconds.
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim10, 0); // set the counter value a 0
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <delayUS+0x2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim10) < us)
 8001af8:	bf00      	nop
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <delayUS+0x2c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d8f9      	bhi.n	8001afa <delayUS+0x12>
    ; // wait for the counter to reach the us input in the parameter
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	200002b4 	.word	0x200002b4

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b08f      	sub	sp, #60	@ 0x3c
 8001b1c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8001b1e:	4b9e      	ldr	r3, [pc, #632]	@ (8001d98 <main+0x280>)
 8001b20:	f107 0408 	add.w	r4, r7, #8
 8001b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2a:	f003 fa35 	bl	8004f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2e:	f000 f967 	bl	8001e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b32:	f000 fad5 	bl	80020e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b36:	f000 faab 	bl	8002090 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b3a:	f000 fa55 	bl	8001fe8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001b3e:	f000 f9f9 	bl	8001f34 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b42:	f000 fa7b 	bl	800203c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b46:	f000 f9c7 	bl	8001ed8 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001b4a:	f000 fa29 	bl	8001fa0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Enable cycle count for STM32

  DWT_CTRL |= (1 << 0);
 8001b4e:	4b93      	ldr	r3, [pc, #588]	@ (8001d9c <main+0x284>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a92      	ldr	r2, [pc, #584]	@ (8001d9c <main+0x284>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8001b5a:	f00a f889 	bl	800bc70 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8001b5e:	f00b f8f5 	bl	800cd4c <SEGGER_SYSVIEW_Start>

  // Reset wiznet module
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2108      	movs	r1, #8
 8001b66:	488e      	ldr	r0, [pc, #568]	@ (8001da0 <main+0x288>)
 8001b68:	f003 ffdc 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001b6c:	2064      	movs	r0, #100	@ 0x64
 8001b6e:	f003 fa55 	bl	800501c <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2108      	movs	r1, #8
 8001b76:	488a      	ldr	r0, [pc, #552]	@ (8001da0 <main+0x288>)
 8001b78:	f003 ffd4 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b80:	f003 fa4c 	bl	800501c <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001b84:	4987      	ldr	r1, [pc, #540]	@ (8001da4 <main+0x28c>)
 8001b86:	4888      	ldr	r0, [pc, #544]	@ (8001da8 <main+0x290>)
 8001b88:	f002 fcc4 	bl	8004514 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001b8c:	4987      	ldr	r1, [pc, #540]	@ (8001dac <main+0x294>)
 8001b8e:	4888      	ldr	r0, [pc, #544]	@ (8001db0 <main+0x298>)
 8001b90:	f002 fce6 	bl	8004560 <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4619      	mov	r1, r3
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f002 fd0c 	bl	80045b8 <ctlwizchip>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ba6:	d101      	bne.n	8001bac <main+0x94>
  {

    while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <main+0x90>
      ;
  }

  /* Network initialization */
  network_init();
 8001bac:	f000 fdde 	bl	800276c <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 8001bb0:	4880      	ldr	r0, [pc, #512]	@ (8001db4 <main+0x29c>)
 8001bb2:	f003 f8db 	bl	8004d6c <wizchip_setnetinfo>
  // PRINT_NETINFO(gWIZNETINFO);

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8001bb6:	497f      	ldr	r1, [pc, #508]	@ (8001db4 <main+0x29c>)
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f002 fddd 	bl	8004778 <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	713b      	strb	r3, [r7, #4]
  phyconf.duplex = PHY_DUPLEX_FULL;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	71fb      	strb	r3, [r7, #7]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71bb      	strb	r3, [r7, #6]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 8001bca:	2301      	movs	r3, #1
 8001bcc:	717b      	strb	r3, [r7, #5]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f002 fcf0 	bl	80045b8 <ctlwizchip>
  //*** End Phy Configuration
  // Init Timer
  HAL_TIM_Base_Start(&htim10);
 8001bd8:	4877      	ldr	r0, [pc, #476]	@ (8001db8 <main+0x2a0>)
 8001bda:	f006 f979 	bl	8007ed0 <HAL_TIM_Base_Start>
  delayUS(10000);
 8001bde:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001be2:	f7ff ff81 	bl	8001ae8 <delayUS>

  // init bms

  bms1.battery_full = 1;
 8001be6:	4b75      	ldr	r3, [pc, #468]	@ (8001dbc <main+0x2a4>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	70da      	strb	r2, [r3, #3]
  bms1.charge_enable = 1;
 8001bec:	4b73      	ldr	r3, [pc, #460]	@ (8001dbc <main+0x2a4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	705a      	strb	r2, [r3, #1]
  bms1.discharge_enable = 1;
 8001bf2:	4b72      	ldr	r3, [pc, #456]	@ (8001dbc <main+0x2a4>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	709a      	strb	r2, [r3, #2]

  // BQ hard and soft reset
  HAL_GPIO_WritePin(BQ_RESET_GPIO_Port, BQ_RESET_Pin, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bfe:	4870      	ldr	r0, [pc, #448]	@ (8001dc0 <main+0x2a8>)
 8001c00:	f003 ff90 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001c04:	200a      	movs	r0, #10
 8001c06:	f003 fa09 	bl	800501c <HAL_Delay>
  HAL_GPIO_WritePin(BQ_RESET_GPIO_Port, BQ_RESET_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c10:	486b      	ldr	r0, [pc, #428]	@ (8001dc0 <main+0x2a8>)
 8001c12:	f003 ff87 	bl	8005b24 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c1a:	f003 f9ff 	bl	800501c <HAL_Delay>
  CommandSubcommands(BQ769x2_RESET); // Resets the BQ769x2 registers
 8001c1e:	2012      	movs	r0, #18
 8001c20:	f7ff fa88 	bl	8001134 <CommandSubcommands>
  HAL_Delay(1000);
 8001c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c28:	f003 f9f8 	bl	800501c <HAL_Delay>
  BQ769x2_Init(); // Configure all of the BQ769x2 register settings
 8001c2c:	f7ff fb74 	bl	8001318 <BQ769x2_Init>
  delayUS(10000);
 8001c30:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c34:	f7ff ff58 	bl	8001ae8 <delayUS>
  CommandSubcommands(SLEEP_DISABLE); // Sleep mode is enabled by default. For this example, Sleep is disabled to
 8001c38:	209a      	movs	r0, #154	@ 0x9a
 8001c3a:	f7ff fa7b 	bl	8001134 <CommandSubcommands>
                                     // demonstrate full-speed measurements in Normal mode.

  delayUS(60000);
 8001c3e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c42:	f7ff ff51 	bl	8001ae8 <delayUS>
  delayUS(60000);
 8001c46:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c4a:	f7ff ff4d 	bl	8001ae8 <delayUS>
  delayUS(60000);
 8001c4e:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c52:	f7ff ff49 	bl	8001ae8 <delayUS>
  delayUS(60000);
 8001c56:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001c5a:	f7ff ff45 	bl	8001ae8 <delayUS>

  uint16_t manuStatus = BQ769x2_ReadRegister(MANUFACTURINGSTATUS);
 8001c5e:	2057      	movs	r0, #87	@ 0x57
 8001c60:	f7ff fa18 	bl	8001094 <BQ769x2_ReadRegister>
 8001c64:	4603      	mov	r3, r0
 8001c66:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint16_t manuInit = BQ769x2_ReadRegister(MfgStatusInit);
 8001c68:	f249 3043 	movw	r0, #37699	@ 0x9343
 8001c6c:	f7ff fa12 	bl	8001094 <BQ769x2_ReadRegister>
 8001c70:	4603      	mov	r3, r0
 8001c72:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint16_t manuData = BQ769x2_ReadRegister(MANU_DATA);
 8001c74:	2070      	movs	r0, #112	@ 0x70
 8001c76:	f7ff fa0d 	bl	8001094 <BQ769x2_ReadRegister>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t FET_options = BQ769x2_ReadRegister(FETOptions);
 8001c7e:	f249 3008 	movw	r0, #37640	@ 0x9308
 8001c82:	f7ff fa07 	bl	8001094 <BQ769x2_ReadRegister>
 8001c86:	4603      	mov	r3, r0
 8001c88:	853b      	strh	r3, [r7, #40]	@ 0x28

  AlarmBits = BQ769x2_ReadAlarmStatus();
 8001c8a:	f7ff fbd5 	bl	8001438 <BQ769x2_ReadAlarmStatus>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc4 <main+0x2ac>)
 8001c94:	801a      	strh	r2, [r3, #0]
  // CommandSubcommands(RESET_PASSQ);
  //CommandSubcommands(ALL_FETS_ON);
  data_ready_semaphore = xSemaphoreCreateBinary();
 8001c96:	2203      	movs	r2, #3
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f007 f94a 	bl	8008f34 <xQueueGenericCreate>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a49      	ldr	r2, [pc, #292]	@ (8001dc8 <main+0x2b0>)
 8001ca4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(modbus_comm_task, "modbus_comm_task", 200, NULL, 1, &modbus_task_handle);
 8001ca6:	4b49      	ldr	r3, [pc, #292]	@ (8001dcc <main+0x2b4>)
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2301      	movs	r3, #1
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	22c8      	movs	r2, #200	@ 0xc8
 8001cb2:	4947      	ldr	r1, [pc, #284]	@ (8001dd0 <main+0x2b8>)
 8001cb4:	4847      	ldr	r0, [pc, #284]	@ (8001dd4 <main+0x2bc>)
 8001cb6:	f007 ff97 	bl	8009be8 <xTaskCreate>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a46      	ldr	r2, [pc, #280]	@ (8001dd8 <main+0x2c0>)
 8001cbe:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001cc0:	4b45      	ldr	r3, [pc, #276]	@ (8001dd8 <main+0x2c0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d00b      	beq.n	8001ce0 <main+0x1c8>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <main+0x1c4>

  status = xTaskCreate(soc_task, "soc_handle", 200, NULL, 3, &soc_task_handle);
 8001ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ddc <main+0x2c4>)
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	22c8      	movs	r2, #200	@ 0xc8
 8001cec:	493c      	ldr	r1, [pc, #240]	@ (8001de0 <main+0x2c8>)
 8001cee:	483d      	ldr	r0, [pc, #244]	@ (8001de4 <main+0x2cc>)
 8001cf0:	f007 ff7a 	bl	8009be8 <xTaskCreate>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a38      	ldr	r2, [pc, #224]	@ (8001dd8 <main+0x2c0>)
 8001cf8:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	@ (8001dd8 <main+0x2c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d00b      	beq.n	8001d1a <main+0x202>
        __asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	623b      	str	r3, [r7, #32]
    }
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <main+0x1fe>

  status = xTaskCreate(read_voltage_task, "read_voltage_task", 200, NULL, 2, &read_voltage_task_handle);
 8001d1a:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <main+0x2d0>)
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2300      	movs	r3, #0
 8001d24:	22c8      	movs	r2, #200	@ 0xc8
 8001d26:	4931      	ldr	r1, [pc, #196]	@ (8001dec <main+0x2d4>)
 8001d28:	4831      	ldr	r0, [pc, #196]	@ (8001df0 <main+0x2d8>)
 8001d2a:	f007 ff5d 	bl	8009be8 <xTaskCreate>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <main+0x2c0>)
 8001d32:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d34:	4b28      	ldr	r3, [pc, #160]	@ (8001dd8 <main+0x2c0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d00b      	beq.n	8001d54 <main+0x23c>
        __asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	61fb      	str	r3, [r7, #28]
    }
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <main+0x238>

  status = xTaskCreate(bms_state_machine_task, "bms_state machine_task", 200, (void *)&bms1, 3, &bms_state_machine_handle);
 8001d54:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <main+0x2dc>)
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2303      	movs	r3, #3
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <main+0x2a4>)
 8001d5e:	22c8      	movs	r2, #200	@ 0xc8
 8001d60:	4925      	ldr	r1, [pc, #148]	@ (8001df8 <main+0x2e0>)
 8001d62:	4826      	ldr	r0, [pc, #152]	@ (8001dfc <main+0x2e4>)
 8001d64:	f007 ff40 	bl	8009be8 <xTaskCreate>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <main+0x2c0>)
 8001d6c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <main+0x2c0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d00b      	beq.n	8001d8e <main+0x276>
        __asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	61bb      	str	r3, [r7, #24]
    }
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	e7fd      	b.n	8001d8a <main+0x272>


  vTaskStartScheduler();
 8001d8e:	f008 f8c9 	bl	8009f24 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d92:	bf00      	nop
 8001d94:	e7fd      	b.n	8001d92 <main+0x27a>
 8001d96:	bf00      	nop
 8001d98:	0800ea6c 	.word	0x0800ea6c
 8001d9c:	e0001000 	.word	0xe0001000
 8001da0:	40020000 	.word	0x40020000
 8001da4:	08002729 	.word	0x08002729
 8001da8:	08002711 	.word	0x08002711
 8001dac:	08002741 	.word	0x08002741
 8001db0:	0800275b 	.word	0x0800275b
 8001db4:	20000004 	.word	0x20000004
 8001db8:	200002b4 	.word	0x200002b4
 8001dbc:	2000048c 	.word	0x2000048c
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	2000012e 	.word	0x2000012e
 8001dc8:	20000560 	.word	0x20000560
 8001dcc:	2000054c 	.word	0x2000054c
 8001dd0:	0800ea20 	.word	0x0800ea20
 8001dd4:	08002219 	.word	0x08002219
 8001dd8:	2000055c 	.word	0x2000055c
 8001ddc:	20000550 	.word	0x20000550
 8001de0:	0800ea34 	.word	0x0800ea34
 8001de4:	08002459 	.word	0x08002459
 8001de8:	20000554 	.word	0x20000554
 8001dec:	0800ea40 	.word	0x0800ea40
 8001df0:	0800252d 	.word	0x0800252d
 8001df4:	20000558 	.word	0x20000558
 8001df8:	0800ea54 	.word	0x0800ea54
 8001dfc:	080024f9 	.word	0x080024f9

08001e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	@ 0x50
 8001e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	2234      	movs	r2, #52	@ 0x34
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00b ff94 	bl	800dd3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e66:	2302      	movs	r3, #2
 8001e68:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e74:	23a8      	movs	r3, #168	@ 0xa8
 8001e76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fa1d 	bl	80072c8 <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e94:	f000 fd00 	bl	8002898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e98:	230f      	movs	r3, #15
 8001e9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ea4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 fe8c 	bl	8006bd4 <HAL_RCC_ClockConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ec2:	f000 fce9 	bl	8002898 <Error_Handler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3750      	adds	r7, #80	@ 0x50
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	@ (8001f2c <MX_I2C1_Init+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <MX_I2C1_Init+0x58>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f16:	f003 fe39 	bl	8005b8c <HAL_I2C_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f20:	f000 fcba 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000148 	.word	0x20000148
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f3a:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <MX_SPI1_Init+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f80:	220a      	movs	r2, #10
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_SPI1_Init+0x64>)
 8001f86:	f005 fc3d 	bl	8007804 <HAL_SPI_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f90:	f000 fc82 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000025c 	.word	0x2000025c
 8001f9c:	40013000 	.word	0x40013000

08001fa0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <MX_TIM10_Init+0x44>)
 8001fa8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <MX_TIM10_Init+0x40>)
 8001fcc:	f005 ff30 	bl	8007e30 <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fd6:	f000 fc5f 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200002b4 	.word	0x200002b4
 8001fe4:	40014400 	.word	0x40014400

08001fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <MX_USART1_UART_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <MX_USART1_UART_Init+0x4c>)
 8002020:	f006 fa06 	bl	8008430 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 fc35 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002fc 	.word	0x200002fc
 8002038:	40011000 	.word	0x40011000

0800203c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <MX_USART2_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <MX_USART2_UART_Init+0x4c>)
 8002074:	f006 fa2c 	bl	80084d0 <HAL_HalfDuplex_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 fc0b 	bl	8002898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000344 	.word	0x20000344
 800208c:	40004400 	.word	0x40004400

08002090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_DMA_Init+0x4c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <MX_DMA_Init+0x4c>)
 80020a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_DMA_Init+0x4c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	200b      	movs	r0, #11
 80020b8:	f003 f88c 	bl	80051d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020bc:	200b      	movs	r0, #11
 80020be:	f003 f8a5 	bl	800520c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2011      	movs	r0, #17
 80020c8:	f003 f884 	bl	80051d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80020cc:	2011      	movs	r0, #17
 80020ce:	f003 f89d 	bl	800520c <HAL_NVIC_EnableIRQ>

}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <MX_GPIO_Init+0x128>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a42      	ldr	r2, [pc, #264]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b40      	ldr	r3, [pc, #256]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a3b      	ldr	r2, [pc, #236]	@ (8002208 <MX_GPIO_Init+0x128>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b39      	ldr	r3, [pc, #228]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a34      	ldr	r2, [pc, #208]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b32      	ldr	r3, [pc, #200]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a2d      	ldr	r2, [pc, #180]	@ (8002208 <MX_GPIO_Init+0x128>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <MX_GPIO_Init+0x128>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2118      	movs	r1, #24
 800216a:	4828      	ldr	r0, [pc, #160]	@ (800220c <MX_GPIO_Init+0x12c>)
 800216c:	f003 fcda 	bl	8005b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|SPI_INT_Pin, GPIO_PIN_RESET);
 8002170:	2200      	movs	r2, #0
 8002172:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002176:	4826      	ldr	r0, [pc, #152]	@ (8002210 <MX_GPIO_Init+0x130>)
 8002178:	f003 fcd4 	bl	8005b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BQ_RESET_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8002182:	4824      	ldr	r0, [pc, #144]	@ (8002214 <MX_GPIO_Init+0x134>)
 8002184:	f003 fcce 	bl	8005b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin;
 8002188:	2318      	movs	r3, #24
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	481b      	ldr	r0, [pc, #108]	@ (800220c <MX_GPIO_Init+0x12c>)
 80021a0:	f003 fb2c 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|SPI_INT_Pin;
 80021a4:	f248 0303 	movw	r3, #32771	@ 0x8003
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4814      	ldr	r0, [pc, #80]	@ (8002210 <MX_GPIO_Init+0x130>)
 80021be:	f003 fb1d 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BQ_RESET_Pin */
  GPIO_InitStruct.Pin = BQ_RESET_Pin;
 80021c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BQ_RESET_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	480e      	ldr	r0, [pc, #56]	@ (8002214 <MX_GPIO_Init+0x134>)
 80021dc:	f003 fb0e 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80021e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4806      	ldr	r0, [pc, #24]	@ (8002214 <MX_GPIO_Init+0x134>)
 80021fa:	f003 faff 	bl	80057fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	@ 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40020000 	.word	0x40020000
 8002210:	40020400 	.word	0x40020400
 8002214:	40020800 	.word	0x40020800

08002218 <modbus_comm_task>:

/* USER CODE BEGIN 4 */

static void modbus_comm_task(void *parameters)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  bool start_modbus = false;
 8002220:	2300      	movs	r3, #0
 8002222:	75fb      	strb	r3, [r7, #23]

  PRINT_STR("MODBUS WHILE LOOP\r\n");
 8002224:	2364      	movs	r3, #100	@ 0x64
 8002226:	2213      	movs	r2, #19
 8002228:	4972      	ldr	r1, [pc, #456]	@ (80023f4 <modbus_comm_task+0x1dc>)
 800222a:	4873      	ldr	r0, [pc, #460]	@ (80023f8 <modbus_comm_task+0x1e0>)
 800222c:	f006 f9a8 	bl	8008580 <HAL_UART_Transmit>

  // Keep checking for Ethernet connection before starting Modbus communication
  while (!start_modbus)
 8002230:	e010      	b.n	8002254 <modbus_comm_task+0x3c>
  {
    if (PHYStatusCheck() == Ethernet_OK)
 8002232:	f000 faad 	bl	8002790 <PHYStatusCheck>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <modbus_comm_task+0x2e>
    {
      PrintPHYConf();      // Print Ethernet PHY configuration
 800223c:	f000 fad6 	bl	80027ec <PrintPHYConf>
      start_modbus = true; // Set flag to true to start Modbus communication
 8002240:	2301      	movs	r3, #1
 8002242:	75fb      	strb	r3, [r7, #23]
 8002244:	e006      	b.n	8002254 <modbus_comm_task+0x3c>
    }
    else
    {
      // Wait for a short time before checking again to prevent busy-waiting
      printf("Waiting for Ethernet connection...\r\n");
 8002246:	486d      	ldr	r0, [pc, #436]	@ (80023fc <modbus_comm_task+0x1e4>)
 8002248:	f00b fc88 	bl	800db5c <puts>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay 1 second before rechecking
 800224c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002250:	f007 fe2e 	bl	8009eb0 <vTaskDelay>
  while (!start_modbus)
 8002254:	7dfb      	ldrb	r3, [r7, #23]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e8      	bne.n	8002232 <modbus_comm_task+0x1a>
    }
  }

  // Now start Modbus communication since Ethernet is connected
  while (start_modbus)
 8002260:	e0be      	b.n	80023e0 <modbus_comm_task+0x1c8>
  {
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002262:	2101      	movs	r1, #1
 8002264:	4866      	ldr	r0, [pc, #408]	@ (8002400 <modbus_comm_task+0x1e8>)
 8002266:	f003 fc76 	bl	8005b56 <HAL_GPIO_TogglePin>
    printf("\r\nInitializing server socket\r\n");
 800226a:	4866      	ldr	r0, [pc, #408]	@ (8002404 <modbus_comm_task+0x1ec>)
 800226c:	f00b fc76 	bl	800db5c <puts>
    vTaskDelay(pdMS_TO_TICKS(100));
 8002270:	2064      	movs	r0, #100	@ 0x64
 8002272:	f007 fe1d 	bl	8009eb0 <vTaskDelay>

    // Parameters in order: socket_id, protocol TCP or UDP, Port number, Flags=0
    // Return value is socket ID on success
    if (socket(1, Sn_MR_TCP, LISTEN_PORT, 0) != 1)
 8002276:	2300      	movs	r3, #0
 8002278:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 800227c:	2101      	movs	r1, #1
 800227e:	2001      	movs	r0, #1
 8002280:	f001 fc26 	bl	8003ad0 <socket>
 8002284:	4603      	mov	r3, r0
 8002286:	2b01      	cmp	r3, #1
 8002288:	d006      	beq.n	8002298 <modbus_comm_task+0x80>
    {
      // Error
      printf("Cannot create Socket!\r\n");
 800228a:	485f      	ldr	r0, [pc, #380]	@ (8002408 <modbus_comm_task+0x1f0>)
 800228c:	f00b fc66 	bl	800db5c <puts>
      vTaskDelay(pdMS_TO_TICKS(200)); // Delay before retrying
 8002290:	20c8      	movs	r0, #200	@ 0xc8
 8002292:	f007 fe0d 	bl	8009eb0 <vTaskDelay>
      continue;                       // Retry initialization
 8002296:	e0a3      	b.n	80023e0 <modbus_comm_task+0x1c8>
    }

    // Success
    printf("Socket Created Successfully!\r\n");
 8002298:	485c      	ldr	r0, [pc, #368]	@ (800240c <modbus_comm_task+0x1f4>)
 800229a:	f00b fc5f 	bl	800db5c <puts>

    uint8_t socket_io_mode = SOCK_IO_BLOCK;
 800229e:	2300      	movs	r3, #0
 80022a0:	72fb      	strb	r3, [r7, #11]
    ctlsocket(1, CS_SET_IOMODE, &socket_io_mode); // Set blocking IO mode
 80022a2:	f107 030b 	add.w	r3, r7, #11
 80022a6:	461a      	mov	r2, r3
 80022a8:	2100      	movs	r1, #0
 80022aa:	2001      	movs	r0, #1
 80022ac:	f002 f80e 	bl	80042cc <ctlsocket>

    printf("Start listening on port %d!\r\n", LISTEN_PORT);
 80022b0:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80022b4:	4856      	ldr	r0, [pc, #344]	@ (8002410 <modbus_comm_task+0x1f8>)
 80022b6:	f00b fbe9 	bl	800da8c <iprintf>
    printf("Waiting for a client connection.\r\n");
 80022ba:	4856      	ldr	r0, [pc, #344]	@ (8002414 <modbus_comm_task+0x1fc>)
 80022bc:	f00b fc4e 	bl	800db5c <puts>

    // Make it a passive socket (i.e., listen for connection)
    if (listen(1) != SOCK_OK) // Our socket ID is 1 (W5500 has 8 sockets from 0-7)
 80022c0:	2001      	movs	r0, #1
 80022c2:	f001 fd87 	bl	8003dd4 <listen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d009      	beq.n	80022e0 <modbus_comm_task+0xc8>
    {
      // Error
      printf("Cannot listen on port %d", LISTEN_PORT);
 80022cc:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80022d0:	4851      	ldr	r0, [pc, #324]	@ (8002418 <modbus_comm_task+0x200>)
 80022d2:	f00b fbdb 	bl	800da8c <iprintf>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 80022d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022da:	f007 fde9 	bl	8009eb0 <vTaskDelay>
      continue;                        // Retry initialization
 80022de:	e07f      	b.n	80023e0 <modbus_comm_task+0x1c8>
    }

    uint8_t sr = 0x00;                                               // Socket status register
 80022e0:	2300      	movs	r3, #0
 80022e2:	75bb      	strb	r3, [r7, #22]
    TickType_t xTimeOut = xTaskGetTickCount() + pdMS_TO_TICKS(5000); // 5-second timeout
 80022e4:	f007 ff30 	bl	800a148 <xTaskGetTickCount>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80022ee:	3308      	adds	r3, #8
 80022f0:	613b      	str	r3, [r7, #16]

    // Wait for a client connection with timeout
    do
    {
      sr = getSn_SR(1);               // Read status reg (SR of socket 1)
 80022f2:	f44f 704a 	mov.w	r0, #808	@ 0x328
 80022f6:	f001 f94b 	bl	8003590 <WIZCHIP_READ>
 80022fa:	4603      	mov	r3, r0
 80022fc:	75bb      	strb	r3, [r7, #22]
      vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 80022fe:	2064      	movs	r0, #100	@ 0x64
 8002300:	f007 fdd6 	bl	8009eb0 <vTaskDelay>
    } while (sr != 0x17 && sr != 0x00 && xTaskGetTickCount() < xTimeOut);
 8002304:	7dbb      	ldrb	r3, [r7, #22]
 8002306:	2b17      	cmp	r3, #23
 8002308:	d008      	beq.n	800231c <modbus_comm_task+0x104>
 800230a:	7dbb      	ldrb	r3, [r7, #22]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <modbus_comm_task+0x104>
 8002310:	f007 ff1a 	bl	800a148 <xTaskGetTickCount>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4293      	cmp	r3, r2
 800231a:	d8ea      	bhi.n	80022f2 <modbus_comm_task+0xda>

    if (sr == 0x00)
 800231c:	7dbb      	ldrb	r3, [r7, #22]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <modbus_comm_task+0x11a>
    {
      printf("Some error occurred on server socket. Retrying...\r\n");
 8002322:	483e      	ldr	r0, [pc, #248]	@ (800241c <modbus_comm_task+0x204>)
 8002324:	f00b fc1a 	bl	800db5c <puts>
      vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before retrying
 8002328:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800232c:	f007 fdc0 	bl	8009eb0 <vTaskDelay>
      continue;                        // Retry initialization
 8002330:	e056      	b.n	80023e0 <modbus_comm_task+0x1c8>
    }

    if (sr == 0x17)
 8002332:	7dbb      	ldrb	r3, [r7, #22]
 8002334:	2b17      	cmp	r3, #23
 8002336:	d153      	bne.n	80023e0 <modbus_comm_task+0x1c8>
    {
      // We come here only when a client has connected.
      // Now we can read data from the socket
      printf("A client connected!\r\n");
 8002338:	4839      	ldr	r0, [pc, #228]	@ (8002420 <modbus_comm_task+0x208>)
 800233a:	f00b fc0f 	bl	800db5c <puts>
      printf("Waiting for Client Data...!\r\n");
 800233e:	4839      	ldr	r0, [pc, #228]	@ (8002424 <modbus_comm_task+0x20c>)
 8002340:	f00b fc0c 	bl	800db5c <puts>

      while (1)
      {
        int len = recv(1, RX_buffer, RX_buffer_length);
 8002344:	2280      	movs	r2, #128	@ 0x80
 8002346:	4938      	ldr	r1, [pc, #224]	@ (8002428 <modbus_comm_task+0x210>)
 8002348:	2001      	movs	r0, #1
 800234a:	f001 ff0b 	bl	8004164 <recv>
 800234e:	60f8      	str	r0, [r7, #12]
        if (len == SOCKERR_SOCKSTATUS)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f113 0f07 	cmn.w	r3, #7
 8002356:	d106      	bne.n	8002366 <modbus_comm_task+0x14e>
        {
          // Client has disconnected
          printf("Client has disconnected\r\n");
 8002358:	4834      	ldr	r0, [pc, #208]	@ (800242c <modbus_comm_task+0x214>)
 800235a:	f00b fbff 	bl	800db5c <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 800235e:	4834      	ldr	r0, [pc, #208]	@ (8002430 <modbus_comm_task+0x218>)
 8002360:	f00b fbfc 	bl	800db5c <puts>
          break; // Exit client communication loop
 8002364:	e03c      	b.n	80023e0 <modbus_comm_task+0x1c8>
        }

        RX_buffer[len] = '\0';
 8002366:	4a30      	ldr	r2, [pc, #192]	@ (8002428 <modbus_comm_task+0x210>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
        printf("Received %d bytes from client\r\n", len);
 8002370:	68f9      	ldr	r1, [r7, #12]
 8002372:	4830      	ldr	r0, [pc, #192]	@ (8002434 <modbus_comm_task+0x21c>)
 8002374:	f00b fb8a 	bl	800da8c <iprintf>
        printf("Data Received: %s", RX_buffer);
 8002378:	492b      	ldr	r1, [pc, #172]	@ (8002428 <modbus_comm_task+0x210>)
 800237a:	482f      	ldr	r0, [pc, #188]	@ (8002438 <modbus_comm_task+0x220>)
 800237c:	f00b fb86 	bl	800da8c <iprintf>

        memset(TX_buffer, 0, sizeof(TX_buffer));
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	2100      	movs	r1, #0
 8002384:	482d      	ldr	r0, [pc, #180]	@ (800243c <modbus_comm_task+0x224>)
 8002386:	f00b fcd9 	bl	800dd3c <memset>

        if (xSemaphoreTake(data_ready_semaphore, portMAX_DELAY) == pdTRUE)
 800238a:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <modbus_comm_task+0x228>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002392:	4618      	mov	r0, r3
 8002394:	f007 f95a 	bl	800964c <xQueueSemaphoreTake>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <modbus_comm_task+0x192>
        {
        	modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 800239e:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <modbus_comm_task+0x22c>)
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4926      	ldr	r1, [pc, #152]	@ (800243c <modbus_comm_task+0x224>)
 80023a4:	4820      	ldr	r0, [pc, #128]	@ (8002428 <modbus_comm_task+0x210>)
 80023a6:	f000 faaf 	bl	8002908 <modbus_receive>
        }


        printf("\r\nECHO sent back to client\r\n");
 80023aa:	4827      	ldr	r0, [pc, #156]	@ (8002448 <modbus_comm_task+0x230>)
 80023ac:	f00b fbd6 	bl	800db5c <puts>

        // Look for quit message and quit if received
        if (strcmp((char *)RX_buffer, "QUIT") == 0)
 80023b0:	4926      	ldr	r1, [pc, #152]	@ (800244c <modbus_comm_task+0x234>)
 80023b2:	481d      	ldr	r0, [pc, #116]	@ (8002428 <modbus_comm_task+0x210>)
 80023b4:	f7fd ff76 	bl	80002a4 <strcmp>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <modbus_comm_task+0x1c0>
        {
          printf("Received QUIT command from client\r\n");
 80023be:	4824      	ldr	r0, [pc, #144]	@ (8002450 <modbus_comm_task+0x238>)
 80023c0:	f00b fbcc 	bl	800db5c <puts>
          printf("Disconnecting...\r\n");
 80023c4:	4823      	ldr	r0, [pc, #140]	@ (8002454 <modbus_comm_task+0x23c>)
 80023c6:	f00b fbc9 	bl	800db5c <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 80023ca:	4819      	ldr	r0, [pc, #100]	@ (8002430 <modbus_comm_task+0x218>)
 80023cc:	f00b fbc6 	bl	800db5c <puts>
          disconnect(1); // Disconnect from the client
 80023d0:	2001      	movs	r0, #1
 80023d2:	f001 fd59 	bl	8003e88 <disconnect>
          break;         // Exit client communication loop
 80023d6:	e003      	b.n	80023e0 <modbus_comm_task+0x1c8>
        }

        vTaskDelay(pdMS_TO_TICKS(100)); // Allow other tasks to run
 80023d8:	2064      	movs	r0, #100	@ 0x64
 80023da:	f007 fd69 	bl	8009eb0 <vTaskDelay>
      {
 80023de:	e7b1      	b.n	8002344 <modbus_comm_task+0x12c>
  while (start_modbus)
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f af3d 	bne.w	8002262 <modbus_comm_task+0x4a>
      } // While loop (as long as client is connected)
    } // If block, client connect success
  } // Outer while loop
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	0800ea7c 	.word	0x0800ea7c
 80023f8:	20000344 	.word	0x20000344
 80023fc:	0800ea90 	.word	0x0800ea90
 8002400:	40020400 	.word	0x40020400
 8002404:	0800eab4 	.word	0x0800eab4
 8002408:	0800ead4 	.word	0x0800ead4
 800240c:	0800eaec 	.word	0x0800eaec
 8002410:	0800eb0c 	.word	0x0800eb0c
 8002414:	0800eb2c 	.word	0x0800eb2c
 8002418:	0800eb50 	.word	0x0800eb50
 800241c:	0800eb6c 	.word	0x0800eb6c
 8002420:	0800eba0 	.word	0x0800eba0
 8002424:	0800ebb8 	.word	0x0800ebb8
 8002428:	2000040c 	.word	0x2000040c
 800242c:	0800ebd8 	.word	0x0800ebd8
 8002430:	0800ebf4 	.word	0x0800ebf4
 8002434:	0800ec0c 	.word	0x0800ec0c
 8002438:	0800ec2c 	.word	0x0800ec2c
 800243c:	2000038c 	.word	0x2000038c
 8002440:	20000560 	.word	0x20000560
 8002444:	200004cc 	.word	0x200004cc
 8002448:	0800ec40 	.word	0x0800ec40
 800244c:	0800ec5c 	.word	0x0800ec5c
 8002450:	0800ec64 	.word	0x0800ec64
 8002454:	0800ec88 	.word	0x0800ec88

08002458 <soc_task>:

static void soc_task(void *parameters)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	bool start_soc = false;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
	if (xSemaphoreTake(data_ready_semaphore, portMAX_DELAY) == pdTRUE)
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <soc_task+0x84>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800246c:	4618      	mov	r0, r3
 800246e:	f007 f8ed 	bl	800964c <xQueueSemaphoreTake>
 8002472:	4603      	mov	r3, r0
 8002474:	2b01      	cmp	r3, #1
 8002476:	d129      	bne.n	80024cc <soc_task+0x74>
	{
		BQ769x2_ReadAllVoltages(&bms1);
 8002478:	4819      	ldr	r0, [pc, #100]	@ (80024e0 <soc_task+0x88>)
 800247a:	f7ff f887 	bl	800158c <BQ769x2_ReadAllVoltages>
		get_initial_soc();
 800247e:	f000 fbbd 	bl	8002bfc <get_initial_soc>
		CommandSubcommands(RESET_PASSQ);
 8002482:	2082      	movs	r0, #130	@ 0x82
 8002484:	f7fe fe56 	bl	8001134 <CommandSubcommands>
		start_soc = true;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
	}

  while (start_soc)
 800248c:	e01e      	b.n	80024cc <soc_task+0x74>
  {
    PRINT_STR("TASK2 WHILE LOOP\r\n");
 800248e:	2364      	movs	r3, #100	@ 0x64
 8002490:	2212      	movs	r2, #18
 8002492:	4914      	ldr	r1, [pc, #80]	@ (80024e4 <soc_task+0x8c>)
 8002494:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <soc_task+0x90>)
 8002496:	f006 f873 	bl	8008580 <HAL_UART_Transmit>
    uint16_t soc = soc_k_update_get(coulumbs);
 800249a:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <soc_task+0x94>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a4:	ee17 3a90 	vmov	r3, s15
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fc4c 	bl	8002d48 <soc_k_update_get>
 80024b0:	4603      	mov	r3, r0
 80024b2:	81bb      	strh	r3, [r7, #12]
    holding_register[21] = soc;
 80024b4:	4a0e      	ldr	r2, [pc, #56]	@ (80024f0 <soc_task+0x98>)
 80024b6:	89bb      	ldrh	r3, [r7, #12]
 80024b8:	8553      	strh	r3, [r2, #42]	@ 0x2a
    BQ769x2_ReadPassQ();
 80024ba:	f7ff f8fb 	bl	80016b4 <BQ769x2_ReadPassQ>
    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80024be:	2102      	movs	r1, #2
 80024c0:	480c      	ldr	r0, [pc, #48]	@ (80024f4 <soc_task+0x9c>)
 80024c2:	f003 fb48 	bl	8005b56 <HAL_GPIO_TogglePin>
    vTaskDelay(pdMS_TO_TICKS(100));
 80024c6:	2064      	movs	r0, #100	@ 0x64
 80024c8:	f007 fcf2 	bl	8009eb0 <vTaskDelay>
  while (start_soc)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1dd      	bne.n	800248e <soc_task+0x36>
    // HAL_Delay(500);

    // taskYIELD();
  }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000560 	.word	0x20000560
 80024e0:	2000048c 	.word	0x2000048c
 80024e4:	0800ec9c 	.word	0x0800ec9c
 80024e8:	20000344 	.word	0x20000344
 80024ec:	20000144 	.word	0x20000144
 80024f0:	200004cc 	.word	0x200004cc
 80024f4:	40020400 	.word	0x40020400

080024f8 <bms_state_machine_task>:

static void bms_state_machine_task(void *parameters)

{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  bms_context *bms = (bms_context *)parameters;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60fb      	str	r3, [r7, #12]
  bms->bms_state = BMS_STATE_OFF;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    bms_state_machine(&bms1);
 800250a:	4807      	ldr	r0, [pc, #28]	@ (8002528 <bms_state_machine_task+0x30>)
 800250c:	f7ff f9d2 	bl	80018b4 <bms_state_machine>
    BQ769x2_ReadSafetyStatus();
 8002510:	f7fe ffa6 	bl	8001460 <BQ769x2_ReadSafetyStatus>
    uint16_t current = BQ769x2_ReadCurrent();
 8002514:	f7ff f876 	bl	8001604 <BQ769x2_ReadCurrent>
 8002518:	4603      	mov	r3, r0
 800251a:	817b      	strh	r3, [r7, #10]
    vTaskDelay(pdMS_TO_TICKS(200));
 800251c:	20c8      	movs	r0, #200	@ 0xc8
 800251e:	f007 fcc7 	bl	8009eb0 <vTaskDelay>
  {
 8002522:	bf00      	nop
 8002524:	e7f1      	b.n	800250a <bms_state_machine_task+0x12>
 8002526:	bf00      	nop
 8002528:	2000048c 	.word	0x2000048c

0800252c <read_voltage_task>:
    // taskYIELD();
  }
}

static void read_voltage_task(void *parameters)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  while (1)
  {

    BQ769x2_ReadAllVoltages(&bms1);
 8002534:	4864      	ldr	r0, [pc, #400]	@ (80026c8 <read_voltage_task+0x19c>)
 8002536:	f7ff f829 	bl	800158c <BQ769x2_ReadAllVoltages>
    uint16_t stackVoltage = BQ769x2_ReadVoltage(StackVoltage, &bms1);
 800253a:	4963      	ldr	r1, [pc, #396]	@ (80026c8 <read_voltage_task+0x19c>)
 800253c:	2034      	movs	r0, #52	@ 0x34
 800253e:	f7fe fff7 	bl	8001530 <BQ769x2_ReadVoltage>
 8002542:	4603      	mov	r3, r0
 8002544:	81fb      	strh	r3, [r7, #14]
    //    holding_register[0] = CellVoltage[0];
    //    holding_register[1] = CellVoltage[1];
    // HAL_Delay(5000);
    // uint16_t alarm;
    // alarm = BQ769x2_ReadAlarmStatus();
    AlarmBits = BQ769x2_ReadAlarmStatus();
 8002546:	f7fe ff77 	bl	8001438 <BQ769x2_ReadAlarmStatus>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4b5f      	ldr	r3, [pc, #380]	@ (80026cc <read_voltage_task+0x1a0>)
 8002550:	801a      	strh	r2, [r3, #0]
    if (AlarmBits & 0x80)
 8002552:	4b5e      	ldr	r3, [pc, #376]	@ (80026cc <read_voltage_task+0x1a0>)
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80af 	beq.w	80026be <read_voltage_task+0x192>
    { // Check if FULLSCAN is complete. If set, new measurements are available
      BQ769x2_ReadAllVoltages(&bms1);
 8002560:	4859      	ldr	r0, [pc, #356]	@ (80026c8 <read_voltage_task+0x19c>)
 8002562:	f7ff f813 	bl	800158c <BQ769x2_ReadAllVoltages>
      // float coulombs = BQ769x2_ReadPassQ();
      Pack_Current = BQ769x2_ReadCurrent();
 8002566:	f7ff f84d 	bl	8001604 <BQ769x2_ReadCurrent>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	4b58      	ldr	r3, [pc, #352]	@ (80026d0 <read_voltage_task+0x1a4>)
 8002570:	801a      	strh	r2, [r3, #0]
      Temperature[0] = BQ769x2_ReadTemperature(TS1Temperature);
 8002572:	2070      	movs	r0, #112	@ 0x70
 8002574:	f7ff f85c 	bl	8001630 <BQ769x2_ReadTemperature>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	4b55      	ldr	r3, [pc, #340]	@ (80026d4 <read_voltage_task+0x1a8>)
 800257e:	edc3 7a00 	vstr	s15, [r3]
      Temperature[1] = BQ769x2_ReadTemperature(TS3Temperature);
 8002582:	2074      	movs	r0, #116	@ 0x74
 8002584:	f7ff f854 	bl	8001630 <BQ769x2_ReadTemperature>
 8002588:	eef0 7a40 	vmov.f32	s15, s0
 800258c:	4b51      	ldr	r3, [pc, #324]	@ (80026d4 <read_voltage_task+0x1a8>)
 800258e:	edc3 7a01 	vstr	s15, [r3, #4]

      holding_register[0] = voltage_to_percentage(CellVoltage[0]);
 8002592:	4b51      	ldr	r3, [pc, #324]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fcde 	bl	8002f58 <voltage_to_percentage>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b4e      	ldr	r3, [pc, #312]	@ (80026dc <read_voltage_task+0x1b0>)
 80025a2:	801a      	strh	r2, [r3, #0]
      holding_register[1] = voltage_to_percentage(CellVoltage[1]);
 80025a4:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <read_voltage_task+0x1ac>)
 80025a6:	885b      	ldrh	r3, [r3, #2]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fcd5 	bl	8002f58 <voltage_to_percentage>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <read_voltage_task+0x1b0>)
 80025b4:	805a      	strh	r2, [r3, #2]
      holding_register[2] = voltage_to_percentage(CellVoltage[2]);
 80025b6:	4b48      	ldr	r3, [pc, #288]	@ (80026d8 <read_voltage_task+0x1ac>)
 80025b8:	889b      	ldrh	r3, [r3, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fccc 	bl	8002f58 <voltage_to_percentage>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b45      	ldr	r3, [pc, #276]	@ (80026dc <read_voltage_task+0x1b0>)
 80025c6:	809a      	strh	r2, [r3, #4]
      holding_register[3] = voltage_to_percentage(CellVoltage[3]);
 80025c8:	4b43      	ldr	r3, [pc, #268]	@ (80026d8 <read_voltage_task+0x1ac>)
 80025ca:	88db      	ldrh	r3, [r3, #6]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fcc3 	bl	8002f58 <voltage_to_percentage>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <read_voltage_task+0x1b0>)
 80025d8:	80da      	strh	r2, [r3, #6]
      holding_register[4] = voltage_to_percentage(CellVoltage[4]);
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <read_voltage_task+0x1ac>)
 80025dc:	891b      	ldrh	r3, [r3, #8]
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 fcba 	bl	8002f58 <voltage_to_percentage>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	4b3c      	ldr	r3, [pc, #240]	@ (80026dc <read_voltage_task+0x1b0>)
 80025ea:	811a      	strh	r2, [r3, #8]
      holding_register[5] = voltage_to_percentage(CellVoltage[5]);
 80025ec:	4b3a      	ldr	r3, [pc, #232]	@ (80026d8 <read_voltage_task+0x1ac>)
 80025ee:	895b      	ldrh	r3, [r3, #10]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fcb1 	bl	8002f58 <voltage_to_percentage>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <read_voltage_task+0x1b0>)
 80025fc:	815a      	strh	r2, [r3, #10]
      holding_register[6] = voltage_to_percentage(CellVoltage[6]);
 80025fe:	4b36      	ldr	r3, [pc, #216]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002600:	899b      	ldrh	r3, [r3, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fca8 	bl	8002f58 <voltage_to_percentage>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b33      	ldr	r3, [pc, #204]	@ (80026dc <read_voltage_task+0x1b0>)
 800260e:	819a      	strh	r2, [r3, #12]
      holding_register[7] = voltage_to_percentage(CellVoltage[7]);
 8002610:	4b31      	ldr	r3, [pc, #196]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002612:	89db      	ldrh	r3, [r3, #14]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fc9f 	bl	8002f58 <voltage_to_percentage>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	4b2f      	ldr	r3, [pc, #188]	@ (80026dc <read_voltage_task+0x1b0>)
 8002620:	81da      	strh	r2, [r3, #14]
      holding_register[8] = voltage_to_percentage(CellVoltage[15]);
 8002622:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002624:	8bdb      	ldrh	r3, [r3, #30]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fc96 	bl	8002f58 <voltage_to_percentage>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <read_voltage_task+0x1b0>)
 8002632:	821a      	strh	r2, [r3, #16]



      holding_register[9] = (CellVoltage[0]);
 8002634:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <read_voltage_task+0x1b0>)
 800263a:	825a      	strh	r2, [r3, #18]
      holding_register[10] = (CellVoltage[1]);
 800263c:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <read_voltage_task+0x1ac>)
 800263e:	885a      	ldrh	r2, [r3, #2]
 8002640:	4b26      	ldr	r3, [pc, #152]	@ (80026dc <read_voltage_task+0x1b0>)
 8002642:	829a      	strh	r2, [r3, #20]
      holding_register[11] = (CellVoltage[2]);
 8002644:	4b24      	ldr	r3, [pc, #144]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002646:	889a      	ldrh	r2, [r3, #4]
 8002648:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <read_voltage_task+0x1b0>)
 800264a:	82da      	strh	r2, [r3, #22]
      holding_register[12] = (CellVoltage[3]);
 800264c:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <read_voltage_task+0x1ac>)
 800264e:	88da      	ldrh	r2, [r3, #6]
 8002650:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <read_voltage_task+0x1b0>)
 8002652:	831a      	strh	r2, [r3, #24]
      holding_register[13] = (CellVoltage[4]);
 8002654:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002656:	891a      	ldrh	r2, [r3, #8]
 8002658:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <read_voltage_task+0x1b0>)
 800265a:	835a      	strh	r2, [r3, #26]
      holding_register[14] = (CellVoltage[5]);
 800265c:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <read_voltage_task+0x1ac>)
 800265e:	895a      	ldrh	r2, [r3, #10]
 8002660:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <read_voltage_task+0x1b0>)
 8002662:	839a      	strh	r2, [r3, #28]
      holding_register[15] = (CellVoltage[6]);
 8002664:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002666:	899a      	ldrh	r2, [r3, #12]
 8002668:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <read_voltage_task+0x1b0>)
 800266a:	83da      	strh	r2, [r3, #30]
      holding_register[16] = (CellVoltage[7]);
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <read_voltage_task+0x1ac>)
 800266e:	89da      	ldrh	r2, [r3, #14]
 8002670:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <read_voltage_task+0x1b0>)
 8002672:	841a      	strh	r2, [r3, #32]
      holding_register[17] = (CellVoltage[15]);
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <read_voltage_task+0x1ac>)
 8002676:	8bda      	ldrh	r2, [r3, #30]
 8002678:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <read_voltage_task+0x1b0>)
 800267a:	845a      	strh	r2, [r3, #34]	@ 0x22

      holding_register[18] = stackVoltage;
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <read_voltage_task+0x1b0>)
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	8493      	strh	r3, [r2, #36]	@ 0x24
      holding_register[19] = BQ769x2_ReadCurrent();
 8002682:	f7fe ffbf 	bl	8001604 <BQ769x2_ReadCurrent>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <read_voltage_task+0x1b0>)
 800268c:	84da      	strh	r2, [r3, #38]	@ 0x26
      uint16_t current = BQ769x2_ReadCurrent();
 800268e:	f7fe ffb9 	bl	8001604 <BQ769x2_ReadCurrent>
 8002692:	4603      	mov	r3, r0
 8002694:	81bb      	strh	r3, [r7, #12]
      holding_register[20] = BQ769x2_ReadVoltage(PACKPinVoltage, &bms1);
 8002696:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <read_voltage_task+0x19c>)
 8002698:	2036      	movs	r0, #54	@ 0x36
 800269a:	f7fe ff49 	bl	8001530 <BQ769x2_ReadVoltage>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <read_voltage_task+0x1b0>)
 80026a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      DirectCommands(AlarmStatus, 0x0080, W); // Clear the FULLSCAN bit
 80026a6:	2201      	movs	r2, #1
 80026a8:	2180      	movs	r1, #128	@ 0x80
 80026aa:	2062      	movs	r0, #98	@ 0x62
 80026ac:	f7fe fe00 	bl	80012b0 <DirectCommands>
                                              //	  			HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);

      //	  				  HAL_Delay(100);
      xSemaphoreGive(data_ready_semaphore);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <read_voltage_task+0x1b4>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	2300      	movs	r3, #0
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	f006 fcc7 	bl	800904c <xQueueGenericSend>
    }
    vTaskDelay(pdMS_TO_TICKS(500));
 80026be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026c2:	f007 fbf5 	bl	8009eb0 <vTaskDelay>
  {
 80026c6:	e735      	b.n	8002534 <read_voltage_task+0x8>
 80026c8:	2000048c 	.word	0x2000048c
 80026cc:	2000012e 	.word	0x2000012e
 80026d0:	2000012c 	.word	0x2000012c
 80026d4:	20000120 	.word	0x20000120
 80026d8:	20000100 	.word	0x20000100
 80026dc:	200004cc 	.word	0x200004cc
 80026e0:	20000560 	.word	0x20000560

080026e4 <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 80026ee:	f107 020f 	add.w	r2, r7, #15
 80026f2:	1df9      	adds	r1, r7, #7
 80026f4:	2332      	movs	r3, #50	@ 0x32
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2301      	movs	r3, #1
 80026fa:	4804      	ldr	r0, [pc, #16]	@ (800270c <W5500_rxtx+0x28>)
 80026fc:	f005 f90b 	bl	8007916 <HAL_SPI_TransmitReceive>

  return (rxdata);
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000025c 	.word	0x2000025c

08002710 <wizchip_select>:

void wizchip_select(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  W5500_select();
 8002714:	2200      	movs	r2, #0
 8002716:	2110      	movs	r1, #16
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <wizchip_select+0x14>)
 800271a:	f003 fa03 	bl	8005b24 <HAL_GPIO_WritePin>
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40020000 	.word	0x40020000

08002728 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  W5500_release();
 800272c:	2201      	movs	r2, #1
 800272e:	2110      	movs	r1, #16
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <wizchip_deselect+0x14>)
 8002732:	f003 f9f7 	bl	8005b24 <HAL_GPIO_WritePin>
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40020000 	.word	0x40020000

08002740 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ffc9 	bl	80026e4 <W5500_rxtx>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <wizchip_read>:

uint8_t wizchip_read()
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  return W5500_rx();
 800275e:	20ff      	movs	r0, #255	@ 0xff
 8002760:	f7ff ffc0 	bl	80026e4 <W5500_rxtx>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8002772:	4906      	ldr	r1, [pc, #24]	@ (800278c <network_init+0x20>)
 8002774:	2000      	movs	r0, #0
 8002776:	f001 ffff 	bl	8004778 <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 800277a:	463b      	mov	r3, r7
 800277c:	4619      	mov	r1, r3
 800277e:	2008      	movs	r0, #8
 8002780:	f001 ff1a 	bl	80045b8 <ctlwizchip>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000004 	.word	0x20000004

08002790 <PHYStatusCheck>:
  UWriteData(ch);
  return ch;
}

ErrorState PHYStatusCheck(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 8002796:	4811      	ldr	r0, [pc, #68]	@ (80027dc <PHYStatusCheck+0x4c>)
 8002798:	f00b f978 	bl	800da8c <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 800279c:	1dfb      	adds	r3, r7, #7
 800279e:	4619      	mov	r1, r3
 80027a0:	200f      	movs	r0, #15
 80027a2:	f001 ff09 	bl	80045b8 <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10b      	bne.n	80027c4 <PHYStatusCheck+0x34>
    {
      printf("NO Cable Connected!");
 80027ac:	480c      	ldr	r0, [pc, #48]	@ (80027e0 <PHYStatusCheck+0x50>)
 80027ae:	f00b f96d 	bl	800da8c <iprintf>

      HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 80027b2:	2201      	movs	r2, #1
 80027b4:	2102      	movs	r1, #2
 80027b6:	480b      	ldr	r0, [pc, #44]	@ (80027e4 <PHYStatusCheck+0x54>)
 80027b8:	f003 f9b4 	bl	8005b24 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80027bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027c0:	f002 fc2c 	bl	800501c <HAL_Delay>
      // HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
      // HAL_Delay(200);
    }
  } while (tmp == PHY_LINK_OFF);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0e5      	beq.n	8002796 <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 80027ca:	4807      	ldr	r0, [pc, #28]	@ (80027e8 <PHYStatusCheck+0x58>)
 80027cc:	f00b f95e 	bl	800da8c <iprintf>

  return Ethernet_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	0800ecb0 	.word	0x0800ecb0
 80027e0:	0800ecd8 	.word	0x0800ecd8
 80027e4:	40020400 	.word	0x40020400
 80027e8:	0800ecec 	.word	0x0800ecec

080027ec <PrintPHYConf>:

void PrintPHYConf(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	200b      	movs	r0, #11
 80027f8:	f001 fede 	bl	80045b8 <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 80027fc:	793b      	ldrb	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 8002802:	4814      	ldr	r0, [pc, #80]	@ (8002854 <PrintPHYConf+0x68>)
 8002804:	f00b f942 	bl	800da8c <iprintf>
 8002808:	e002      	b.n	8002810 <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 800280a:	4813      	ldr	r0, [pc, #76]	@ (8002858 <PrintPHYConf+0x6c>)
 800280c:	f00b f93e 	bl	800da8c <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 8002810:	797b      	ldrb	r3, [r7, #5]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d103      	bne.n	800281e <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 8002816:	4811      	ldr	r0, [pc, #68]	@ (800285c <PrintPHYConf+0x70>)
 8002818:	f00b f938 	bl	800da8c <iprintf>
 800281c:	e002      	b.n	8002824 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 800281e:	4810      	ldr	r0, [pc, #64]	@ (8002860 <PrintPHYConf+0x74>)
 8002820:	f00b f934 	bl	800da8c <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d103      	bne.n	8002832 <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 800282a:	480e      	ldr	r0, [pc, #56]	@ (8002864 <PrintPHYConf+0x78>)
 800282c:	f00b f92e 	bl	800da8c <iprintf>
 8002830:	e002      	b.n	8002838 <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 8002832:	480d      	ldr	r0, [pc, #52]	@ (8002868 <PrintPHYConf+0x7c>)
 8002834:	f00b f92a 	bl	800da8c <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 800283e:	480b      	ldr	r0, [pc, #44]	@ (800286c <PrintPHYConf+0x80>)
 8002840:	f00b f924 	bl	800da8c <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 8002844:	e002      	b.n	800284c <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 8002846:	480a      	ldr	r0, [pc, #40]	@ (8002870 <PrintPHYConf+0x84>)
 8002848:	f00b f920 	bl	800da8c <iprintf>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	0800ed08 	.word	0x0800ed08
 8002858:	0800ed2c 	.word	0x0800ed2c
 800285c:	0800ed4c 	.word	0x0800ed4c
 8002860:	0800ed68 	.word	0x0800ed68
 8002864:	0800ed88 	.word	0x0800ed88
 8002868:	0800ed9c 	.word	0x0800ed9c
 800286c:	0800edb0 	.word	0x0800edb0
 8002870:	0800edc0 	.word	0x0800edc0

08002874 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002886:	f002 fba9 	bl	8004fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40001000 	.word	0x40001000

08002898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <Error_Handler+0x8>

080028a4 <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	701a      	strb	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	460a      	mov	r2, r1
 80028dc:	71fb      	strb	r3, [r7, #7]
 80028de:	4613      	mov	r3, r2
 80028e0:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 80028ea:	89fb      	ldrh	r3, [r7, #14]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 80028f0:	79bb      	ldrb	r3, [r7, #6]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	81fb      	strh	r3, [r7, #14]

	return tmp;
 80028fa:	89fb      	ldrh	r3, [r7, #14]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b08b      	sub	sp, #44	@ 0x2c
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 8002916:	2300      	movs	r3, #0
 8002918:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 800291a:	2300      	movs	r3, #0
 800291c:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 800291e:	2300      	movs	r3, #0
 8002920:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t temp4 = 0x0000;
 8002922:	2300      	movs	r3, #0
 8002924:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 8002926:	2300      	movs	r3, #0
 8002928:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 800292a:	2300      	movs	r3, #0
 800292c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t temp7 = 0x0000;
 800292e:	2300      	movs	r3, #0
 8002930:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3306      	adds	r3, #6
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	f040 814d 	bne.w	8002bd8 <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3306      	adds	r3, #6
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	7992      	ldrb	r2, [r2, #6]
 8002946:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3307      	adds	r3, #7
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	79d2      	ldrb	r2, [r2, #7]
 8002950:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3302      	adds	r3, #2
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3303      	adds	r3, #3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3307      	adds	r3, #7
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b10      	cmp	r3, #16
 800296a:	f000 809e 	beq.w	8002aaa <modbus_receive+0x1a2>
 800296e:	2b10      	cmp	r3, #16
 8002970:	f300 812e 	bgt.w	8002bd0 <modbus_receive+0x2c8>
 8002974:	2b03      	cmp	r3, #3
 8002976:	d003      	beq.n	8002980 <modbus_receive+0x78>
 8002978:	2b06      	cmp	r3, #6
 800297a:	f000 8125 	beq.w	8002bc8 <modbus_receive+0x2c0>
 800297e:	e127      	b.n	8002bd0 <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3308      	adds	r3, #8
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3309      	adds	r3, #9
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7ff ff9f 	bl	80028d2 <make_word>
 8002994:	4603      	mov	r3, r0
 8002996:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8002998:	8bfb      	ldrh	r3, [r7, #30]
 800299a:	2b3f      	cmp	r3, #63	@ 0x3f
 800299c:	d87e      	bhi.n	8002a9c <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	330a      	adds	r3, #10
 80029a2:	781a      	ldrb	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	330b      	adds	r3, #11
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7ff ff90 	bl	80028d2 <make_word>
 80029b2:	4603      	mov	r3, r0
 80029b4:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 80029b6:	8bbb      	ldrh	r3, [r7, #28]
 80029b8:	2b40      	cmp	r3, #64	@ 0x40
 80029ba:	d86b      	bhi.n	8002a94 <modbus_receive+0x18c>
 80029bc:	8bba      	ldrh	r2, [r7, #28]
 80029be:	8bfb      	ldrh	r3, [r7, #30]
 80029c0:	4413      	add	r3, r2
 80029c2:	2b40      	cmp	r3, #64	@ 0x40
 80029c4:	dc66      	bgt.n	8002a94 <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	7852      	ldrb	r2, [r2, #1]
 80029d6:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 80029d8:	8bbb      	ldrh	r3, [r7, #28]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3305      	adds	r3, #5
 80029e4:	3203      	adds	r2, #3
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 80029ea:	8bbb      	ldrh	r3, [r7, #28]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3308      	adds	r3, #8
 80029f2:	0052      	lsls	r2, r2, #1
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 80029f8:	8bbb      	ldrh	r3, [r7, #28]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d92b      	bls.n	8002a56 <modbus_receive+0x14e>
					{
						int i = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002a02:	8bfb      	ldrh	r3, [r7, #30]
 8002a04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a06:	e021      	b.n	8002a4c <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 8002a08:	8bfa      	ldrh	r2, [r7, #30]
 8002a0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a0c:	4413      	add	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	4a72      	ldr	r2, [pc, #456]	@ (8002be0 <modbus_receive+0x2d8>)
 8002a18:	4972      	ldr	r1, [pc, #456]	@ (8002be4 <modbus_receive+0x2dc>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff42 	bl	80028a4 <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	3309      	adds	r3, #9
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002be4 <modbus_receive+0x2dc>)
 8002a2c:	7812      	ldrb	r2, [r2, #0]
 8002a2e:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	330a      	adds	r3, #10
 8002a34:	461a      	mov	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a69      	ldr	r2, [pc, #420]	@ (8002be0 <modbus_receive+0x2d8>)
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	701a      	strb	r2, [r3, #0]
							i += 2;
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	3302      	adds	r3, #2
 8002a44:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8002a46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a48:	3301      	adds	r3, #1
 8002a4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002a4e:	8bbb      	ldrh	r3, [r7, #28]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d3d9      	bcc.n	8002a08 <modbus_receive+0x100>
 8002a54:	e013      	b.n	8002a7e <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 8002a56:	8bfb      	ldrh	r3, [r7, #30]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	4a5f      	ldr	r2, [pc, #380]	@ (8002be0 <modbus_receive+0x2d8>)
 8002a62:	4960      	ldr	r1, [pc, #384]	@ (8002be4 <modbus_receive+0x2dc>)
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff1d 	bl	80028a4 <get_HB_LB>
						tx_buffer[1] = high_byte;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002be4 <modbus_receive+0x2dc>)
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3302      	adds	r3, #2
 8002a78:	4a59      	ldr	r2, [pc, #356]	@ (8002be0 <modbus_receive+0x2d8>)
 8002a7a:	7812      	ldrb	r2, [r2, #0]
 8002a7c:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 8002a7e:	8bbb      	ldrh	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3309      	adds	r3, #9
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f001 fa71 	bl	8003f74 <send>
 8002a92:	e006      	b.n	8002aa2 <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 8002a94:	4b54      	ldr	r3, [pc, #336]	@ (8002be8 <modbus_receive+0x2e0>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e002      	b.n	8002aa2 <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 8002a9c:	4b52      	ldr	r3, [pc, #328]	@ (8002be8 <modbus_receive+0x2e0>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 8002aa2:	4852      	ldr	r0, [pc, #328]	@ (8002bec <modbus_receive+0x2e4>)
 8002aa4:	f00b f85a 	bl	800db5c <puts>
			break;
 8002aa8:	e096      	b.n	8002bd8 <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3308      	adds	r3, #8
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3309      	adds	r3, #9
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f7ff ff0a 	bl	80028d2 <make_word>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8002ac2:	8bfb      	ldrh	r3, [r7, #30]
 8002ac4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac6:	d878      	bhi.n	8002bba <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	330a      	adds	r3, #10
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	330b      	adds	r3, #11
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7ff fefb 	bl	80028d2 <make_word>
 8002adc:	4603      	mov	r3, r0
 8002ade:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8002ae0:	8bbb      	ldrh	r3, [r7, #28]
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d865      	bhi.n	8002bb2 <modbus_receive+0x2aa>
 8002ae6:	8bba      	ldrh	r2, [r7, #28]
 8002ae8:	8bfb      	ldrh	r3, [r7, #30]
 8002aea:	4413      	add	r3, r2
 8002aec:	2b40      	cmp	r3, #64	@ 0x40
 8002aee:	dc60      	bgt.n	8002bb2 <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	7852      	ldrb	r2, [r2, #1]
 8002b00:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3305      	adds	r3, #5
 8002b06:	2206      	movs	r2, #6
 8002b08:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 8002b0a:	8bfb      	ldrh	r3, [r7, #30]
 8002b0c:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 8002b0e:	230d      	movs	r3, #13
 8002b10:	84fb      	strh	r3, [r7, #38]	@ 0x26

					if(temp2 == 1)
 8002b12:	8bbb      	ldrh	r3, [r7, #28]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d111      	bne.n	8002b3c <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 8002b18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	7818      	ldrb	r0, [r3, #0]
 8002b20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b22:	3301      	adds	r3, #1
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	7819      	ldrb	r1, [r3, #0]
 8002b2a:	8bfb      	ldrh	r3, [r7, #30]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	18d4      	adds	r4, r2, r3
 8002b32:	f7ff fece 	bl	80028d2 <make_word>
 8002b36:	4603      	mov	r3, r0
 8002b38:	8023      	strh	r3, [r4, #0]
 8002b3a:	e020      	b.n	8002b7e <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002b3c:	8b3b      	ldrh	r3, [r7, #24]
 8002b3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002b40:	e017      	b.n	8002b72 <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 8002b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	7818      	ldrb	r0, [r3, #0]
 8002b4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	7819      	ldrb	r1, [r3, #0]
 8002b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	18d4      	adds	r4, r2, r3
 8002b5e:	f7ff feb8 	bl	80028d2 <make_word>
 8002b62:	4603      	mov	r3, r0
 8002b64:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 8002b66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b68:	3302      	adds	r3, #2
 8002b6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8002b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b6e:	3301      	adds	r3, #1
 8002b70:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002b72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b74:	8bb9      	ldrh	r1, [r7, #28]
 8002b76:	8b3b      	ldrh	r3, [r7, #24]
 8002b78:	440b      	add	r3, r1
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	dbe1      	blt.n	8002b42 <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	3308      	adds	r3, #8
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	7a12      	ldrb	r2, [r2, #8]
 8002b86:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	3309      	adds	r3, #9
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	7a52      	ldrb	r2, [r2, #9]
 8002b90:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	330a      	adds	r3, #10
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	7a92      	ldrb	r2, [r2, #10]
 8002b9a:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	330b      	adds	r3, #11
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	7ad2      	ldrb	r2, [r2, #11]
 8002ba4:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	2001      	movs	r0, #1
 8002bac:	f001 f9e2 	bl	8003f74 <send>
 8002bb0:	e006      	b.n	8002bc0 <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <modbus_receive+0x2e0>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e002      	b.n	8002bc0 <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <modbus_receive+0x2e0>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 8002bc0:	480b      	ldr	r0, [pc, #44]	@ (8002bf0 <modbus_receive+0x2e8>)
 8002bc2:	f00a ffcb 	bl	800db5c <puts>
			break;
 8002bc6:	e007      	b.n	8002bd8 <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 8002bc8:	480a      	ldr	r0, [pc, #40]	@ (8002bf4 <modbus_receive+0x2ec>)
 8002bca:	f00a ffc7 	bl	800db5c <puts>
			break;
 8002bce:	e003      	b.n	8002bd8 <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 8002bd0:	4809      	ldr	r0, [pc, #36]	@ (8002bf8 <modbus_receive+0x2f0>)
 8002bd2:	f00a ffc3 	bl	800db5c <puts>
			break;
 8002bd6:	bf00      	nop
		}
	}
}
 8002bd8:	bf00      	nop
 8002bda:	372c      	adds	r7, #44	@ 0x2c
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	20000565 	.word	0x20000565
 8002be4:	20000566 	.word	0x20000566
 8002be8:	20000564 	.word	0x20000564
 8002bec:	0800edd4 	.word	0x0800edd4
 8002bf0:	0800ede4 	.word	0x0800ede4
 8002bf4:	0800edf4 	.word	0x0800edf4
 8002bf8:	0800ee04 	.word	0x0800ee04

08002bfc <get_initial_soc>:
float initial_soc = -1;        // Default soc for new battery(cell) pack
uint16_t pack_current;

// Function definition for get_initial_soc
void get_initial_soc(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
    // Read cell measurements
    uint16_t releasable_capacity = 0; // Initialize releasable capacity
 8002c02:	2300      	movs	r3, #0
 8002c04:	81fb      	strh	r3, [r7, #14]
    get_min_max_vcell();              // Get min and max voltage
 8002c06:	f000 f95b 	bl	8002ec0 <get_min_max_vcell>

    //printf("Debug: Minimum Cell Voltage (mV): %u\n", min_vcell);
    //printf("Debug: Initial SOC: %f\n", initial_soc);

    /* Get initial SOC estimation */
    if (initial_soc < 0)
 8002c0a:	4b48      	ldr	r3, [pc, #288]	@ (8002d2c <get_initial_soc+0x130>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c18:	d51c      	bpl.n	8002c54 <get_initial_soc+0x58>
    {
        // Calculate LUT value based on min voltage
        uint16_t lut_value = get_val_lookup_table(g_ocv_q_released_mah_table, 15, (uint16_t)round(min_vcell));
 8002c1a:	4b45      	ldr	r3, [pc, #276]	@ (8002d30 <get_initial_soc+0x134>)
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fe0a 	bl	8000838 <__aeabi_ui2d>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ff06 	bl	8000a3c <__aeabi_d2uiz>
 8002c30:	4603      	mov	r3, r0
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	210f      	movs	r1, #15
 8002c38:	483e      	ldr	r0, [pc, #248]	@ (8002d34 <get_initial_soc+0x138>)
 8002c3a:	f7fe fec7 	bl	80019cc <get_val_lookup_table>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
        //printf("Debug: LUT Value from Lookup Table: %u\n", lut_value);

        if (lut_value < CELL_NOMINAL_CAPACITY_MAH)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f5b3 5f96 	cmp.w	r3, #4800	@ 0x12c0
 8002c48:	d222      	bcs.n	8002c90 <get_initial_soc+0x94>
        {
            releasable_capacity = CELL_NOMINAL_CAPACITY_MAH - lut_value;
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	f5c3 5396 	rsb	r3, r3, #4800	@ 0x12c0
 8002c50:	81fb      	strh	r3, [r7, #14]
 8002c52:	e01d      	b.n	8002c90 <get_initial_soc+0x94>
        }
    }
    else
    {
        // Calculate releasable capacity based on initial SOC
        float aux_q = (float)CELL_NOMINAL_CAPACITY_MAH * (initial_soc / 100.0f);
 8002c54:	4b35      	ldr	r3, [pc, #212]	@ (8002d2c <get_initial_soc+0x130>)
 8002c56:	ed93 7a00 	vldr	s14, [r3]
 8002c5a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002d38 <get_initial_soc+0x13c>
 8002c5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c62:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002d3c <get_initial_soc+0x140>
 8002c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6a:	edc7 7a02 	vstr	s15, [r7, #8]
        releasable_capacity = (uint16_t)round(aux_q);
 8002c6e:	68b8      	ldr	r0, [r7, #8]
 8002c70:	f7fd fe04 	bl	800087c <__aeabi_f2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	ec43 2b10 	vmov	d0, r2, r3
 8002c7c:	f00b fe66 	bl	800e94c <round>
 8002c80:	ec53 2b10 	vmov	r2, r3, d0
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fd fed8 	bl	8000a3c <__aeabi_d2uiz>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	81fb      	strh	r3, [r7, #14]
    }

    // You might want to return or further use releasable_capacity here
    //printf("Debug: Final Releasable Capacity: %u\n", releasable_capacity);

    soc_coulomb_count_init.Q_max = CELL_NOMINAL_CAPACITY_MAH;
 8002c90:	4b2b      	ldr	r3, [pc, #172]	@ (8002d40 <get_initial_soc+0x144>)
 8002c92:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002c96:	849a      	strh	r2, [r3, #36]	@ 0x24
    soc_coulomb_count_init.Q_rated = CELL_NOMINAL_CAPACITY_MAH;
 8002c98:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <get_initial_soc+0x144>)
 8002c9a:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002c9e:	841a      	strh	r2, [r3, #32]
    soc_coulomb_count_init.Q_releasable = releasable_capacity;
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <get_initial_soc+0x144>)
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	8453      	strh	r3, [r2, #34]	@ 0x22

    soc_coulomb_count_init.soc = ((float)soc_coulomb_count_init.Q_releasable / (float)soc_coulomb_count_init.Q_rated) * 100.0f;
 8002ca6:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <get_initial_soc+0x144>)
 8002ca8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb2:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <get_initial_soc+0x144>)
 8002cb4:	8c1b      	ldrh	r3, [r3, #32]
 8002cb6:	ee07 3a90 	vmov	s15, r3
 8002cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002d38 <get_initial_soc+0x13c>
 8002cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <get_initial_soc+0x144>)
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
    //printf("Debug: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);

    soc_coulomb_count_init.soh = (float)((float)soc_coulomb_count_init.Q_max / (float)soc_coulomb_count_init.Q_rated) * 100.0f;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <get_initial_soc+0x144>)
 8002cd2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cdc:	4b18      	ldr	r3, [pc, #96]	@ (8002d40 <get_initial_soc+0x144>)
 8002cde:	8c1b      	ldrh	r3, [r3, #32]
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cec:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002d38 <get_initial_soc+0x13c>
 8002cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <get_initial_soc+0x144>)
 8002cf6:	edc3 7a01 	vstr	s15, [r3, #4]
    soc_coulomb_count_init.dod = soc_coulomb_count_init.soh - soc_coulomb_count_init.soc;
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <get_initial_soc+0x144>)
 8002cfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <get_initial_soc+0x144>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <get_initial_soc+0x144>)
 8002d0c:	edc3 7a02 	vstr	s15, [r3, #8]
    soc_coulomb_count_init.charge_efficiency = CHARGE_EFFICIENCY;
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <get_initial_soc+0x144>)
 8002d12:	4a0c      	ldr	r2, [pc, #48]	@ (8002d44 <get_initial_soc+0x148>)
 8002d14:	611a      	str	r2, [r3, #16]
    soc_coulomb_count_init.discharge_efficiency = DISCHARGE_EFFICIENCY;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <get_initial_soc+0x144>)
 8002d18:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <get_initial_soc+0x148>)
 8002d1a:	615a      	str	r2, [r3, #20]
    soc_coulomb_count_init.coulomb_count = 0;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <get_initial_soc+0x144>)
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
    //printf("Updated: dod before calculated as: %.2f%%\n", soc_coulomb_count_init.dod);
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000001c 	.word	0x2000001c
 8002d30:	20000568 	.word	0x20000568
 8002d34:	0800eedc 	.word	0x0800eedc
 8002d38:	42c80000 	.word	0x42c80000
 8002d3c:	45960000 	.word	0x45960000
 8002d40:	200004a4 	.word	0x200004a4
 8002d44:	3f733333 	.word	0x3f733333

08002d48 <soc_k_update_get>:

uint16_t soc_k_update_get(int16_t coulombs_count)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	80fb      	strh	r3, [r7, #6]

    // Calculate the delta DOD based on the given coulombs_count and the rated capacity
    soc_coulomb_count_init.delta_dod = (float)coulombs_count / (float)soc_coulomb_count_init.Q_rated * 100.0f;
 8002d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d5e:	4b56      	ldr	r3, [pc, #344]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002d60:	8c1b      	ldrh	r3, [r3, #32]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6e:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002ebc <soc_k_update_get+0x174>
 8002d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d76:	4b50      	ldr	r3, [pc, #320]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002d78:	edc3 7a03 	vstr	s15, [r3, #12]
    // Update SOC based on the coulombs_count
    if (coulombs_count > 0)
 8002d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	dd20      	ble.n	8002dc6 <soc_k_update_get+0x7e>
    {
        // Positive coulombs_count indicates charging, which increases SOC
        soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.charge_efficiency * soc_coulomb_count_init.delta_dod;
 8002d84:	4b4c      	ldr	r3, [pc, #304]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002d86:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002d8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002d90:	4b49      	ldr	r3, [pc, #292]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002d92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	4b46      	ldr	r3, [pc, #280]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002da0:	edc3 7a07 	vstr	s15, [r3, #28]
        soc_coulomb_count_init.dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8002da4:	4b44      	ldr	r3, [pc, #272]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002da6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002daa:	4b43      	ldr	r3, [pc, #268]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002dac:	edd3 6a05 	vldr	s13, [r3, #20]
 8002db0:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002db2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002dc0:	edc3 7a02 	vstr	s15, [r3, #8]
 8002dc4:	e01f      	b.n	8002e06 <soc_k_update_get+0xbe>
    }
    else
    {
        // Negative coulombs_count indicates discharging, which decreases SOC
        soc_coulomb_count_init.cummulative_dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8002dc6:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002dc8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002dce:	edd3 6a05 	vldr	s13, [r3, #20]
 8002dd2:	4b39      	ldr	r3, [pc, #228]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002dd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de0:	4b35      	ldr	r3, [pc, #212]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002de2:	edc3 7a07 	vstr	s15, [r3, #28]
        soc_coulomb_count_init.dod = soc_coulomb_count_init.dod - soc_coulomb_count_init.discharge_efficiency * soc_coulomb_count_init.delta_dod;
 8002de6:	4b34      	ldr	r3, [pc, #208]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002de8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dec:	4b32      	ldr	r3, [pc, #200]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002dee:	edd3 6a05 	vldr	s13, [r3, #20]
 8002df2:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002df4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002df8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e00:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e02:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    // Calculate the updated SOC
    soc_coulomb_count_init.soc = soc_coulomb_count_init.soh - soc_coulomb_count_init.cummulative_dod;
 8002e06:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e08:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e16:	4b28      	ldr	r3, [pc, #160]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e18:	edc3 7a00 	vstr	s15, [r3]
    soc_coulomb_count_init.soc = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.soc));
 8002e1c:	4b26      	ldr	r3, [pc, #152]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002ebc <soc_k_update_get+0x174>
 8002e26:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2a:	f00b fd55 	bl	800e8d8 <fminf>
 8002e2e:	ee10 3a10 	vmov	r3, s0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fd22 	bl	800087c <__aeabi_f2d>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8002eb0 <soc_k_update_get+0x168>
 8002e40:	ec43 2b10 	vmov	d0, r2, r3
 8002e44:	f00b fcf4 	bl	800e830 <fmax>
 8002e48:	ec53 2b10 	vmov	r2, r3, d0
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7fd fe14 	bl	8000a7c <__aeabi_d2f>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4a18      	ldr	r2, [pc, #96]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e58:	6013      	str	r3, [r2, #0]
    soc_coulomb_count_init.dod = fmax(0.0f, fminf(100.0f, soc_coulomb_count_init.dod));
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e60:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002ebc <soc_k_update_get+0x174>
 8002e64:	eeb0 0a67 	vmov.f32	s0, s15
 8002e68:	f00b fd36 	bl	800e8d8 <fminf>
 8002e6c:	ee10 3a10 	vmov	r3, s0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fd03 	bl	800087c <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8002eb0 <soc_k_update_get+0x168>
 8002e7e:	ec43 2b10 	vmov	d0, r2, r3
 8002e82:	f00b fcd5 	bl	800e830 <fmax>
 8002e86:	ec53 2b10 	vmov	r2, r3, d0
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f7fd fdf5 	bl	8000a7c <__aeabi_d2f>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4a08      	ldr	r2, [pc, #32]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e96:	6093      	str	r3, [r2, #8]
    //printf("Updated: SOC calculated as: %.2f%%\n", soc_coulomb_count_init.soc);
    //printf("Updated: dod calculated as: %.2f%%\n", soc_coulomb_count_init.dod);

    return (uint16_t)soc_coulomb_count_init.soc; // Return the updated SOC as an integer
 8002e98:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <soc_k_update_get+0x170>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea2:	ee17 3a90 	vmov	r3, s15
 8002ea6:	b29b      	uxth	r3, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
	...
 8002eb8:	200004a4 	.word	0x200004a4
 8002ebc:	42c80000 	.word	0x42c80000

08002ec0 <get_min_max_vcell>:
    soc_coulomb_count_init.soc = 0.0f;
    soc_coulomb_count_init.dod = 100.0f;
}
// Function to find the minimum and maximum cell voltages
void get_min_max_vcell(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
    // Initialize min and max to the first element of the array
    min_vcell = CellVoltage[0];
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <get_min_max_vcell+0x88>)
 8002ec8:	881a      	ldrh	r2, [r3, #0]
 8002eca:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <get_min_max_vcell+0x8c>)
 8002ecc:	801a      	strh	r2, [r3, #0]
    max_vcell = CellVoltage[0];
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <get_min_max_vcell+0x88>)
 8002ed0:	881a      	ldrh	r2, [r3, #0]
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f50 <get_min_max_vcell+0x90>)
 8002ed4:	801a      	strh	r2, [r3, #0]

    // Iterate through the array of cell voltages
    for (uint8_t i = 0; i < NUM_CELLS; i++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	e02a      	b.n	8002f32 <get_min_max_vcell+0x72>
    {
        // Check if the current cell is selected
        if ((selected_cells.value & (0x01 << i)) == 0)
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <get_min_max_vcell+0x94>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	fa42 f303 	asr.w	r3, r2, r3
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01c      	beq.n	8002f2a <get_min_max_vcell+0x6a>
        {
            continue; // Skip this iteration if the cell is not selected
        }

        // Update minimum voltage if the current voltage is lower
        if (CellVoltage[i] < min_vcell)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <get_min_max_vcell+0x88>)
 8002ef4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ef8:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <get_min_max_vcell+0x8c>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d205      	bcs.n	8002f0c <get_min_max_vcell+0x4c>
        {
            min_vcell = CellVoltage[i];
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <get_min_max_vcell+0x88>)
 8002f04:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f08:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <get_min_max_vcell+0x8c>)
 8002f0a:	801a      	strh	r2, [r3, #0]
        }

        // Update maximum voltage if the current voltage is higher
        if (CellVoltage[i] > max_vcell)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f48 <get_min_max_vcell+0x88>)
 8002f10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f14:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <get_min_max_vcell+0x90>)
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d907      	bls.n	8002f2c <get_min_max_vcell+0x6c>
        {
            max_vcell = CellVoltage[i];
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <get_min_max_vcell+0x88>)
 8002f20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f24:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <get_min_max_vcell+0x90>)
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e000      	b.n	8002f2c <get_min_max_vcell+0x6c>
            continue; // Skip this iteration if the cell is not selected
 8002f2a:	bf00      	nop
    for (uint8_t i = 0; i < NUM_CELLS; i++)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	71fb      	strb	r3, [r7, #7]
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b0f      	cmp	r3, #15
 8002f36:	d9d1      	bls.n	8002edc <get_min_max_vcell+0x1c>
        }
    }
    // Output the results
    //printf("Min Voltage: %u mV\n", min_vcell);
    //printf("Max Voltage: %u mV\n", max_vcell);
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000100 	.word	0x20000100
 8002f4c:	20000568 	.word	0x20000568
 8002f50:	2000056a 	.word	0x2000056a
 8002f54:	20000000 	.word	0x20000000

08002f58 <voltage_to_percentage>:

uint8_t voltage_to_percentage(uint16_t voltage)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
    // Define the lower and upper limits of the voltage range in mV
    const uint16_t min_voltage = 3000;
 8002f62:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002f66:	82fb      	strh	r3, [r7, #22]
    const uint16_t max_voltage = 4300;
 8002f68:	f241 03cc 	movw	r3, #4300	@ 0x10cc
 8002f6c:	82bb      	strh	r3, [r7, #20]
    const uint16_t error_voltage = 4500;
 8002f6e:	f241 1394 	movw	r3, #4500	@ 0x1194
 8002f72:	827b      	strh	r3, [r7, #18]

    // Guard: If the voltage is below 3000 mV, return 0%
    if ((voltage < min_voltage) || (voltage > error_voltage))
 8002f74:	88fa      	ldrh	r2, [r7, #6]
 8002f76:	8afb      	ldrh	r3, [r7, #22]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d303      	bcc.n	8002f84 <voltage_to_percentage+0x2c>
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	8a7b      	ldrh	r3, [r7, #18]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d901      	bls.n	8002f88 <voltage_to_percentage+0x30>
    {
        return 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e023      	b.n	8002fd0 <voltage_to_percentage+0x78>
    }

    // Guard: If the voltage is above 4300 mV, return 100%
    if (voltage > max_voltage)
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	8abb      	ldrh	r3, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d901      	bls.n	8002f94 <voltage_to_percentage+0x3c>
    {
        return 100;
 8002f90:	2364      	movs	r3, #100	@ 0x64
 8002f92:	e01d      	b.n	8002fd0 <voltage_to_percentage+0x78>
    }

    // Calculate the SoC percentage for voltages within the valid range
    float soc_percentage = ((float)(voltage - min_voltage) / (float)(max_voltage - min_voltage)) * 100.0f;
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	8afb      	ldrh	r3, [r7, #22]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fa2:	8aba      	ldrh	r2, [r7, #20]
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002fdc <voltage_to_percentage+0x84>
 8002fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fbc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the calculated SoC percentage as an integer
    return (uint16_t)soc_percentage;
 8002fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc8:	ee17 3a90 	vmov	r3, s15
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	371c      	adds	r7, #28
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	42c80000 	.word	0x42c80000

08002fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <HAL_MspInit+0x4c>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	4a0f      	ldr	r2, [pc, #60]	@ (800302c <HAL_MspInit+0x4c>)
 8002ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_MspInit+0x4c>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_MspInit+0x4c>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_MspInit+0x4c>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003010:	6413      	str	r3, [r2, #64]	@ 0x40
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_MspInit+0x4c>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800301e:	f008 fa65 	bl	800b4ec <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	@ 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a48      	ldr	r2, [pc, #288]	@ (8003170 <HAL_I2C_MspInit+0x140>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 8089 	bne.w	8003166 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_I2C_MspInit+0x144>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	4a45      	ldr	r2, [pc, #276]	@ (8003174 <HAL_I2C_MspInit+0x144>)
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	6313      	str	r3, [r2, #48]	@ 0x30
 8003064:	4b43      	ldr	r3, [pc, #268]	@ (8003174 <HAL_I2C_MspInit+0x144>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003070:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003076:	2312      	movs	r3, #18
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003082:	2304      	movs	r3, #4
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	483a      	ldr	r0, [pc, #232]	@ (8003178 <HAL_I2C_MspInit+0x148>)
 800308e:	f002 fbb5 	bl	80057fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b37      	ldr	r3, [pc, #220]	@ (8003174 <HAL_I2C_MspInit+0x144>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a36      	ldr	r2, [pc, #216]	@ (8003174 <HAL_I2C_MspInit+0x144>)
 800309c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b34      	ldr	r3, [pc, #208]	@ (8003174 <HAL_I2C_MspInit+0x144>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80030ae:	4b33      	ldr	r3, [pc, #204]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030b0:	4a33      	ldr	r2, [pc, #204]	@ (8003180 <HAL_I2C_MspInit+0x150>)
 80030b2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80030b4:	4b31      	ldr	r3, [pc, #196]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030bc:	4b2f      	ldr	r3, [pc, #188]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c2:	4b2e      	ldr	r3, [pc, #184]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030c8:	4b2c      	ldr	r3, [pc, #176]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ce:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d0:	4b2a      	ldr	r3, [pc, #168]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d6:	4b29      	ldr	r3, [pc, #164]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030e2:	4b26      	ldr	r3, [pc, #152]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e8:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80030ee:	4823      	ldr	r0, [pc, #140]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 80030f0:	f002 f89a 	bl	8005228 <HAL_DMA_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80030fa:	f7ff fbcd 	bl	8002898 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 8003102:	639a      	str	r2, [r3, #56]	@ 0x38
 8003104:	4a1d      	ldr	r2, [pc, #116]	@ (800317c <HAL_I2C_MspInit+0x14c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800310a:	4b1e      	ldr	r3, [pc, #120]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 800310c:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <HAL_I2C_MspInit+0x158>)
 800310e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003110:	4b1c      	ldr	r3, [pc, #112]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003112:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003116:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003118:	4b1a      	ldr	r3, [pc, #104]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800311e:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003120:	2200      	movs	r2, #0
 8003122:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800312a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800312c:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003132:	4b14      	ldr	r3, [pc, #80]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003138:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800313e:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003140:	2200      	movs	r2, #0
 8003142:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003144:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003146:	2200      	movs	r2, #0
 8003148:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800314a:	480e      	ldr	r0, [pc, #56]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 800314c:	f002 f86c 	bl	8005228 <HAL_DMA_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8003156:	f7ff fb9f 	bl	8002898 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 800315e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_I2C_MspInit+0x154>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	@ 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40005400 	.word	0x40005400
 8003174:	40023800 	.word	0x40023800
 8003178:	40020400 	.word	0x40020400
 800317c:	2000019c 	.word	0x2000019c
 8003180:	40026010 	.word	0x40026010
 8003184:	200001fc 	.word	0x200001fc
 8003188:	400260a0 	.word	0x400260a0

0800318c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	@ 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	@ (8003210 <HAL_SPI_MspInit+0x84>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d12b      	bne.n	8003206 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <HAL_SPI_MspInit+0x88>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <HAL_SPI_MspInit+0x88>)
 80031b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <HAL_SPI_MspInit+0x88>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_SPI_MspInit+0x88>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	4a10      	ldr	r2, [pc, #64]	@ (8003214 <HAL_SPI_MspInit+0x88>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <HAL_SPI_MspInit+0x88>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031e6:	23e0      	movs	r3, #224	@ 0xe0
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031f6:	2305      	movs	r3, #5
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4619      	mov	r1, r3
 8003200:	4805      	ldr	r0, [pc, #20]	@ (8003218 <HAL_SPI_MspInit+0x8c>)
 8003202:	f002 fafb 	bl	80057fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	@ 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40013000 	.word	0x40013000
 8003214:	40023800 	.word	0x40023800
 8003218:	40020000 	.word	0x40020000

0800321c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0b      	ldr	r2, [pc, #44]	@ (8003258 <HAL_TIM_Base_MspInit+0x3c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10d      	bne.n	800324a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_TIM_Base_MspInit+0x40>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	4a09      	ldr	r2, [pc, #36]	@ (800325c <HAL_TIM_Base_MspInit+0x40>)
 8003238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800323c:	6453      	str	r3, [r2, #68]	@ 0x44
 800323e:	4b07      	ldr	r3, [pc, #28]	@ (800325c <HAL_TIM_Base_MspInit+0x40>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40014400 	.word	0x40014400
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	@ 0x30
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 031c 	add.w	r3, r7, #28
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <HAL_UART_MspInit+0xe8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d12c      	bne.n	80032dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	4b31      	ldr	r3, [pc, #196]	@ (800334c <HAL_UART_MspInit+0xec>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	4a30      	ldr	r2, [pc, #192]	@ (800334c <HAL_UART_MspInit+0xec>)
 800328c:	f043 0310 	orr.w	r3, r3, #16
 8003290:	6453      	str	r3, [r2, #68]	@ 0x44
 8003292:	4b2e      	ldr	r3, [pc, #184]	@ (800334c <HAL_UART_MspInit+0xec>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4b2a      	ldr	r3, [pc, #168]	@ (800334c <HAL_UART_MspInit+0xec>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	4a29      	ldr	r2, [pc, #164]	@ (800334c <HAL_UART_MspInit+0xec>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ae:	4b27      	ldr	r3, [pc, #156]	@ (800334c <HAL_UART_MspInit+0xec>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032ba:	23c0      	movs	r3, #192	@ 0xc0
 80032bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c6:	2303      	movs	r3, #3
 80032c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032ca:	2307      	movs	r3, #7
 80032cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	4619      	mov	r1, r3
 80032d4:	481e      	ldr	r0, [pc, #120]	@ (8003350 <HAL_UART_MspInit+0xf0>)
 80032d6:	f002 fa91 	bl	80057fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032da:	e030      	b.n	800333e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003354 <HAL_UART_MspInit+0xf4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d12b      	bne.n	800333e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_UART_MspInit+0xec>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	4a17      	ldr	r2, [pc, #92]	@ (800334c <HAL_UART_MspInit+0xec>)
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <HAL_UART_MspInit+0xec>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_UART_MspInit+0xec>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <HAL_UART_MspInit+0xec>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6313      	str	r3, [r2, #48]	@ 0x30
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <HAL_UART_MspInit+0xec>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800331e:	2304      	movs	r3, #4
 8003320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003322:	2312      	movs	r3, #18
 8003324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800332e:	2307      	movs	r3, #7
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	f107 031c 	add.w	r3, r7, #28
 8003336:	4619      	mov	r1, r3
 8003338:	4807      	ldr	r0, [pc, #28]	@ (8003358 <HAL_UART_MspInit+0xf8>)
 800333a:	f002 fa5f 	bl	80057fc <HAL_GPIO_Init>
}
 800333e:	bf00      	nop
 8003340:	3730      	adds	r7, #48	@ 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40011000 	.word	0x40011000
 800334c:	40023800 	.word	0x40023800
 8003350:	40020400 	.word	0x40020400
 8003354:	40004400 	.word	0x40004400
 8003358:	40020000 	.word	0x40020000

0800335c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	@ 0x38
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	4b33      	ldr	r3, [pc, #204]	@ (8003440 <HAL_InitTick+0xe4>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	4a32      	ldr	r2, [pc, #200]	@ (8003440 <HAL_InitTick+0xe4>)
 8003376:	f043 0310 	orr.w	r3, r3, #16
 800337a:	6413      	str	r3, [r2, #64]	@ 0x40
 800337c:	4b30      	ldr	r3, [pc, #192]	@ (8003440 <HAL_InitTick+0xe4>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003388:	f107 0210 	add.w	r2, r7, #16
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fd38 	bl	8006e08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800339c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033a2:	f003 fd09 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 80033a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80033a8:	e004      	b.n	80033b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033aa:	f003 fd05 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 80033ae:	4603      	mov	r3, r0
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b6:	4a23      	ldr	r2, [pc, #140]	@ (8003444 <HAL_InitTick+0xe8>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0c9b      	lsrs	r3, r3, #18
 80033be:	3b01      	subs	r3, #1
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_InitTick+0xec>)
 80033c4:	4a21      	ldr	r2, [pc, #132]	@ (800344c <HAL_InitTick+0xf0>)
 80033c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_InitTick+0xec>)
 80033ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80033d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <HAL_InitTick+0xec>)
 80033d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80033d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003448 <HAL_InitTick+0xec>)
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_InitTick+0xec>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e2:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_InitTick+0xec>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80033e8:	4817      	ldr	r0, [pc, #92]	@ (8003448 <HAL_InitTick+0xec>)
 80033ea:	f004 fd21 	bl	8007e30 <HAL_TIM_Base_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80033f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11b      	bne.n	8003434 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80033fc:	4812      	ldr	r0, [pc, #72]	@ (8003448 <HAL_InitTick+0xec>)
 80033fe:	f004 fdcf 	bl	8007fa0 <HAL_TIM_Base_Start_IT>
 8003402:	4603      	mov	r3, r0
 8003404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003408:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003410:	2036      	movs	r0, #54	@ 0x36
 8003412:	f001 fefb 	bl	800520c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d808      	bhi.n	800342e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800341c:	2200      	movs	r2, #0
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	2036      	movs	r0, #54	@ 0x36
 8003422:	f001 fed7 	bl	80051d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <HAL_InitTick+0xf4>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e002      	b.n	8003434 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003438:	4618      	mov	r0, r3
 800343a:	3738      	adds	r7, #56	@ 0x38
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	431bde83 	.word	0x431bde83
 8003448:	2000056c 	.word	0x2000056c
 800344c:	40001000 	.word	0x40001000
 8003450:	20000054 	.word	0x20000054

08003454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <NMI_Handler+0x4>

0800345c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <HardFault_Handler+0x4>

08003464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <MemManage_Handler+0x4>

0800346c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003470:	bf00      	nop
 8003472:	e7fd      	b.n	8003470 <BusFault_Handler+0x4>

08003474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003478:	bf00      	nop
 800347a:	e7fd      	b.n	8003478 <UsageFault_Handler+0x4>

0800347c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003490:	4802      	ldr	r0, [pc, #8]	@ (800349c <DMA1_Stream0_IRQHandler+0x10>)
 8003492:	f001 ff77 	bl	8005384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000019c 	.word	0x2000019c

080034a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80034a4:	4802      	ldr	r0, [pc, #8]	@ (80034b0 <DMA1_Stream6_IRQHandler+0x10>)
 80034a6:	f001 ff6d 	bl	8005384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200001fc 	.word	0x200001fc

080034b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034b8:	4802      	ldr	r0, [pc, #8]	@ (80034c4 <TIM6_DAC_IRQHandler+0x10>)
 80034ba:	f004 fde1 	bl	8008080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	2000056c 	.word	0x2000056c

080034c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e00a      	b.n	80034f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034da:	f3af 8000 	nop.w
 80034de:	4601      	mov	r1, r0
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	60ba      	str	r2, [r7, #8]
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf0      	blt.n	80034da <_read+0x12>
  }

  return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800352a:	605a      	str	r2, [r3, #4]
  return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_isatty>:

int _isatty(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <SystemInit+0x20>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	4a05      	ldr	r2, [pc, #20]	@ (800358c <SystemInit+0x20>)
 8003578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800357c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003598:	4b22      	ldr	r3, [pc, #136]	@ (8003624 <WIZCHIP_READ+0x94>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800359e:	4b21      	ldr	r3, [pc, #132]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80035a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <WIZCHIP_READ+0x24>
 80035ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d114      	bne.n	80035de <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80035b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	0c12      	lsrs	r2, r2, #16
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	4610      	mov	r0, r2
 80035c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80035c2:	4b18      	ldr	r3, [pc, #96]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	0a12      	lsrs	r2, r2, #8
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	4610      	mov	r0, r2
 80035ce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80035d0:	4b14      	ldr	r3, [pc, #80]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	4610      	mov	r0, r2
 80035da:	4798      	blx	r3
 80035dc:	e011      	b.n	8003602 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <WIZCHIP_READ+0x94>)
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	f107 020c 	add.w	r2, r7, #12
 80035fc:	2103      	movs	r1, #3
 80035fe:	4610      	mov	r0, r2
 8003600:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003602:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <WIZCHIP_READ+0x94>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4798      	blx	r3
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800360c:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <WIZCHIP_READ+0x94>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003612:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <WIZCHIP_READ+0x94>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4798      	blx	r3
   return ret;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000028 	.word	0x20000028

08003628 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003634:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4798      	blx	r3
   WIZCHIP.CS._select();
 800363a:	4b21      	ldr	r3, [pc, #132]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003648:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d119      	bne.n	8003684 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	0c12      	lsrs	r2, r2, #16
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	4610      	mov	r0, r2
 800365c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800365e:	4b18      	ldr	r3, [pc, #96]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	0a12      	lsrs	r2, r2, #8
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	4610      	mov	r0, r2
 800366a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800366c:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	4610      	mov	r0, r2
 8003676:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	4610      	mov	r0, r2
 8003680:	4798      	blx	r3
 8003682:	e013      	b.n	80036ac <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0c1b      	lsrs	r3, r3, #16
 8003688:	b2db      	uxtb	r3, r3
 800368a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	b2db      	uxtb	r3, r3
 8003692:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	f107 020c 	add.w	r2, r7, #12
 80036a6:	2104      	movs	r1, #4
 80036a8:	4610      	mov	r0, r2
 80036aa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80036b2:	4b03      	ldr	r3, [pc, #12]	@ (80036c0 <WIZCHIP_WRITE+0x98>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	4798      	blx	r3
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000028 	.word	0x20000028

080036c4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80036d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80036d8:	4b29      	ldr	r3, [pc, #164]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80036de:	4b28      	ldr	r3, [pc, #160]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <WIZCHIP_READ_BUF+0x2a>
 80036e6:	4b26      	ldr	r3, [pc, #152]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d126      	bne.n	800373c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80036ee:	4b24      	ldr	r3, [pc, #144]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	0c12      	lsrs	r2, r2, #16
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	4610      	mov	r0, r2
 80036fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80036fc:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	0a12      	lsrs	r2, r2, #8
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	4610      	mov	r0, r2
 8003708:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800370a:	4b1d      	ldr	r3, [pc, #116]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	4610      	mov	r0, r2
 8003714:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	82fb      	strh	r3, [r7, #22]
 800371a:	e00a      	b.n	8003732 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800371c:	4b18      	ldr	r3, [pc, #96]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	8afa      	ldrh	r2, [r7, #22]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	188c      	adds	r4, r1, r2
 8003726:	4798      	blx	r3
 8003728:	4603      	mov	r3, r0
 800372a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800372c:	8afb      	ldrh	r3, [r7, #22]
 800372e:	3301      	adds	r3, #1
 8003730:	82fb      	strh	r3, [r7, #22]
 8003732:	8afa      	ldrh	r2, [r7, #22]
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	429a      	cmp	r2, r3
 8003738:	d3f0      	bcc.n	800371c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800373a:	e017      	b.n	800376c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	b2db      	uxtb	r3, r3
 8003742:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	b2db      	uxtb	r3, r3
 800374a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003752:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 8003754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003756:	f107 0210 	add.w	r2, r7, #16
 800375a:	2103      	movs	r1, #3
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003760:	4b07      	ldr	r3, [pc, #28]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	4611      	mov	r1, r2
 8003768:	68b8      	ldr	r0, [r7, #8]
 800376a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003772:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <WIZCHIP_READ_BUF+0xbc>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	4798      	blx	r3
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	20000028 	.word	0x20000028

08003784 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003792:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003798:	4b29      	ldr	r3, [pc, #164]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80037a6:	4b26      	ldr	r3, [pc, #152]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d126      	bne.n	80037fc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80037ae:	4b24      	ldr	r3, [pc, #144]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	0c12      	lsrs	r2, r2, #16
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80037bc:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	0a12      	lsrs	r2, r2, #8
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4610      	mov	r0, r2
 80037c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80037ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4610      	mov	r0, r2
 80037d4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	82fb      	strh	r3, [r7, #22]
 80037da:	e00a      	b.n	80037f2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	8afa      	ldrh	r2, [r7, #22]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	440a      	add	r2, r1
 80037e6:	7812      	ldrb	r2, [r2, #0]
 80037e8:	4610      	mov	r0, r2
 80037ea:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80037ec:	8afb      	ldrh	r3, [r7, #22]
 80037ee:	3301      	adds	r3, #1
 80037f0:	82fb      	strh	r3, [r7, #22]
 80037f2:	8afa      	ldrh	r2, [r7, #22]
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d3f0      	bcc.n	80037dc <WIZCHIP_WRITE_BUF+0x58>
 80037fa:	e017      	b.n	800382c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	b2db      	uxtb	r3, r3
 8003802:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b2db      	uxtb	r3, r3
 800380a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003812:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 8003814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003816:	f107 0210 	add.w	r2, r7, #16
 800381a:	2103      	movs	r1, #3
 800381c:	4610      	mov	r0, r2
 800381e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003820:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	88fa      	ldrh	r2, [r7, #6]
 8003826:	4611      	mov	r1, r2
 8003828:	68b8      	ldr	r0, [r7, #8]
 800382a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003832:	4b03      	ldr	r3, [pc, #12]	@ (8003840 <WIZCHIP_WRITE_BUF+0xbc>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	4798      	blx	r3
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000028 	.word	0x20000028

08003844 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800384e:	2300      	movs	r3, #0
 8003850:	81fb      	strh	r3, [r7, #14]
 8003852:	2300      	movs	r3, #0
 8003854:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	3301      	adds	r3, #1
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fe94 	bl	8003590 <WIZCHIP_READ>
 8003868:	4603      	mov	r3, r0
 800386a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800386c:	89bb      	ldrh	r3, [r7, #12]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	b29c      	uxth	r4, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	3301      	adds	r3, #1
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fe86 	bl	8003590 <WIZCHIP_READ>
 8003884:	4603      	mov	r3, r0
 8003886:	4423      	add	r3, r4
 8003888:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800388a:	89bb      	ldrh	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d019      	beq.n	80038c4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	3301      	adds	r3, #1
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fe77 	bl	8003590 <WIZCHIP_READ>
 80038a2:	4603      	mov	r3, r0
 80038a4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80038a6:	89fb      	ldrh	r3, [r7, #14]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b29c      	uxth	r4, r3
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	3301      	adds	r3, #1
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff fe69 	bl	8003590 <WIZCHIP_READ>
 80038be:	4603      	mov	r3, r0
 80038c0:	4423      	add	r3, r4
 80038c2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80038c4:	89fa      	ldrh	r2, [r7, #14]
 80038c6:	89bb      	ldrh	r3, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d1c4      	bne.n	8003856 <getSn_TX_FSR+0x12>
   return val;
 80038cc:	89fb      	ldrh	r3, [r7, #14]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}

080038d6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80038d6:	b590      	push	{r4, r7, lr}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	81fb      	strh	r3, [r7, #14]
 80038e4:	2300      	movs	r3, #0
 80038e6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	3301      	adds	r3, #1
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fe4b 	bl	8003590 <WIZCHIP_READ>
 80038fa:	4603      	mov	r3, r0
 80038fc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	b29c      	uxth	r4, r3
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	3301      	adds	r3, #1
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fe3d 	bl	8003590 <WIZCHIP_READ>
 8003916:	4603      	mov	r3, r0
 8003918:	4423      	add	r3, r4
 800391a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800391c:	89bb      	ldrh	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d019      	beq.n	8003956 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	3301      	adds	r3, #1
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fe2e 	bl	8003590 <WIZCHIP_READ>
 8003934:	4603      	mov	r3, r0
 8003936:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b29c      	uxth	r4, r3
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	3301      	adds	r3, #1
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff fe20 	bl	8003590 <WIZCHIP_READ>
 8003950:	4603      	mov	r3, r0
 8003952:	4423      	add	r3, r4
 8003954:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003956:	89fa      	ldrh	r2, [r7, #14]
 8003958:	89bb      	ldrh	r3, [r7, #12]
 800395a:	429a      	cmp	r2, r3
 800395c:	d1c4      	bne.n	80038e8 <getSn_RX_RSR+0x12>
   return val;
 800395e:	89fb      	ldrh	r3, [r7, #14]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}

08003968 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	4613      	mov	r3, r2
 8003976:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003980:	88bb      	ldrh	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d046      	beq.n	8003a14 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	3301      	adds	r3, #1
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fdfc 	bl	8003590 <WIZCHIP_READ>
 8003998:	4603      	mov	r3, r0
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	b29c      	uxth	r4, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	3301      	adds	r3, #1
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff fdf0 	bl	8003590 <WIZCHIP_READ>
 80039b0:	4603      	mov	r3, r0
 80039b2:	4423      	add	r3, r4
 80039b4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80039b6:	89fb      	ldrh	r3, [r7, #14]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	79fa      	ldrb	r2, [r7, #7]
 80039bc:	0092      	lsls	r2, r2, #2
 80039be:	3202      	adds	r2, #2
 80039c0:	00d2      	lsls	r2, r2, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80039c6:	88bb      	ldrh	r3, [r7, #4]
 80039c8:	461a      	mov	r2, r3
 80039ca:	6839      	ldr	r1, [r7, #0]
 80039cc:	68b8      	ldr	r0, [r7, #8]
 80039ce:	f7ff fed9 	bl	8003784 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80039d2:	89fa      	ldrh	r2, [r7, #14]
 80039d4:	88bb      	ldrh	r3, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	3301      	adds	r3, #1
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80039e6:	461a      	mov	r2, r3
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f7ff fe18 	bl	8003628 <WIZCHIP_WRITE>
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	3301      	adds	r3, #1
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8003a04:	461a      	mov	r2, r3
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7ff fe0b 	bl	8003628 <WIZCHIP_WRITE>
 8003a12:	e000      	b.n	8003a16 <wiz_send_data+0xae>
   if(len == 0)  return;
 8003a14:	bf00      	nop
}
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd90      	pop	{r4, r7, pc}

08003a1c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	71fb      	strb	r3, [r7, #7]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003a34:	88bb      	ldrh	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d046      	beq.n	8003ac8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3301      	adds	r3, #1
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fda2 	bl	8003590 <WIZCHIP_READ>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	b29c      	uxth	r4, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	3301      	adds	r3, #1
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fd96 	bl	8003590 <WIZCHIP_READ>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4423      	add	r3, r4
 8003a68:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	79fa      	ldrb	r2, [r7, #7]
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	3203      	adds	r2, #3
 8003a74:	00d2      	lsls	r2, r2, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003a7a:	88bb      	ldrh	r3, [r7, #4]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	68b8      	ldr	r0, [r7, #8]
 8003a82:	f7ff fe1f 	bl	80036c4 <WIZCHIP_READ_BUF>
   ptr += len;
 8003a86:	89fa      	ldrh	r2, [r7, #14]
 8003a88:	88bb      	ldrh	r3, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	3301      	adds	r3, #1
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	89fb      	ldrh	r3, [r7, #14]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7ff fdbe 	bl	8003628 <WIZCHIP_WRITE>
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8003ab8:	461a      	mov	r2, r3
 8003aba:	89fb      	ldrh	r3, [r7, #14]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	f7ff fdb1 	bl	8003628 <WIZCHIP_WRITE>
 8003ac6:	e000      	b.n	8003aca <wiz_recv_data+0xae>
   if(len == 0) return;
 8003ac8:	bf00      	nop
}
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd90      	pop	{r4, r7, pc}

08003ad0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	71fb      	strb	r3, [r7, #7]
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71bb      	strb	r3, [r7, #6]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	80bb      	strh	r3, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d902      	bls.n	8003afa <socket+0x2a>
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003af8:	e0f0      	b.n	8003cdc <socket+0x20c>
	switch(protocol)
 8003afa:	79bb      	ldrb	r3, [r7, #6]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d005      	beq.n	8003b0c <socket+0x3c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	dd11      	ble.n	8003b28 <socket+0x58>
 8003b04:	3b02      	subs	r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d80e      	bhi.n	8003b28 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003b0a:	e011      	b.n	8003b30 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	2204      	movs	r2, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003b18:	f7ff fdd4 	bl	80036c4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <socket+0x5e>
 8003b22:	f06f 0302 	mvn.w	r3, #2
 8003b26:	e0d9      	b.n	8003cdc <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003b28:	f06f 0304 	mvn.w	r3, #4
 8003b2c:	e0d6      	b.n	8003cdc <socket+0x20c>
	    break;
 8003b2e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <socket+0x70>
 8003b3a:	f06f 0305 	mvn.w	r3, #5
 8003b3e:	e0cd      	b.n	8003cdc <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d028      	beq.n	8003b98 <socket+0xc8>
	{
   	switch(protocol)
 8003b46:	79bb      	ldrb	r3, [r7, #6]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d002      	beq.n	8003b52 <socket+0x82>
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d008      	beq.n	8003b62 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003b50:	e022      	b.n	8003b98 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d11a      	bne.n	8003b92 <socket+0xc2>
 8003b5c:	f06f 0305 	mvn.w	r3, #5
 8003b60:	e0bc      	b.n	8003cdc <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db02      	blt.n	8003b7a <socket+0xaa>
 8003b74:	f06f 0305 	mvn.w	r3, #5
 8003b78:	e0b0      	b.n	8003cdc <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db04      	blt.n	8003b96 <socket+0xc6>
 8003b8c:	f06f 0305 	mvn.w	r3, #5
 8003b90:	e0a4      	b.n	8003cdc <socket+0x20c>
   	      break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <socket+0xc8>
   	      break;
 8003b96:	bf00      	nop
   	}
   }
	close(sn);
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f8ac 	bl	8003cf8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	b25a      	sxtb	r2, r3
 8003bb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7ff fd32 	bl	8003628 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003bc4:	88bb      	ldrh	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d110      	bne.n	8003bec <socket+0x11c>
	{
	   port = sock_any_port++;
 8003bca:	4b46      	ldr	r3, [pc, #280]	@ (8003ce4 <socket+0x214>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	b291      	uxth	r1, r2
 8003bd2:	4a44      	ldr	r2, [pc, #272]	@ (8003ce4 <socket+0x214>)
 8003bd4:	8011      	strh	r1, [r2, #0]
 8003bd6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003bd8:	4b42      	ldr	r3, [pc, #264]	@ (8003ce4 <socket+0x214>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <socket+0x11c>
 8003be4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce4 <socket+0x214>)
 8003be6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003bea:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	88bb      	ldrh	r3, [r7, #4]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff fd0f 	bl	8003628 <WIZCHIP_WRITE>
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	3301      	adds	r3, #1
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	88bb      	ldrh	r3, [r7, #4]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f7ff fd02 	bl	8003628 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3301      	adds	r3, #1
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fcf8 	bl	8003628 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003c38:	bf00      	nop
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	3301      	adds	r3, #1
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fca2 	bl	8003590 <WIZCHIP_READ>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f3      	bne.n	8003c3a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	2201      	movs	r2, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	4b21      	ldr	r3, [pc, #132]	@ (8003ce8 <socket+0x218>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	4013      	ands	r3, r2
 8003c68:	b21b      	sxth	r3, r3
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <socket+0x218>)
 8003c6e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 0201 	and.w	r2, r3, #1
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	b21a      	sxth	r2, r3
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <socket+0x218>)
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b21b      	sxth	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b21b      	sxth	r3, r3
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ce8 <socket+0x218>)
 8003c8c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2201      	movs	r2, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	b21b      	sxth	r3, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	b21a      	sxth	r2, r3
 8003c9c:	4b13      	ldr	r3, [pc, #76]	@ (8003cec <socket+0x21c>)
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <socket+0x21c>)
 8003caa:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <socket+0x220>)
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf4 <socket+0x224>)
 8003cba:	2100      	movs	r1, #0
 8003cbc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003cbe:	bf00      	nop
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fc5f 	bl	8003590 <WIZCHIP_READ>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f3      	beq.n	8003cc0 <socket+0x1f0>
   return (int8_t)sn;
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd90      	pop	{r4, r7, pc}
 8003ce4:	20000024 	.word	0x20000024
 8003ce8:	200005b4 	.word	0x200005b4
 8003cec:	200005b6 	.word	0x200005b6
 8003cf0:	200005b8 	.word	0x200005b8
 8003cf4:	200005c8 	.word	0x200005c8

08003cf8 <close>:

int8_t close(uint8_t sn)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d902      	bls.n	8003d0e <close+0x16>
 8003d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d0c:	e055      	b.n	8003dba <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	3301      	adds	r3, #1
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d1a:	2110      	movs	r1, #16
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fc83 	bl	8003628 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003d22:	bf00      	nop
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	3301      	adds	r3, #1
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fc2d 	bl	8003590 <WIZCHIP_READ>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f3      	bne.n	8003d24 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	3301      	adds	r3, #1
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d48:	211f      	movs	r1, #31
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fc6c 	bl	8003628 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2201      	movs	r2, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	b21a      	sxth	r2, r3
 8003d5e:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <close+0xcc>)
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	4013      	ands	r3, r2
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <close+0xcc>)
 8003d6c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2201      	movs	r2, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	b21a      	sxth	r2, r3
 8003d7c:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <close+0xd0>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b21b      	sxth	r3, r3
 8003d82:	4013      	ands	r3, r2
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <close+0xd0>)
 8003d8a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003dcc <close+0xd4>)
 8003d90:	2100      	movs	r1, #0
 8003d92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd0 <close+0xd8>)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003d9e:	bf00      	nop
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3301      	adds	r3, #1
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fbef 	bl	8003590 <WIZCHIP_READ>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f3      	bne.n	8003da0 <close+0xa8>
	return SOCK_OK;
 8003db8:	2301      	movs	r3, #1
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200005b4 	.word	0x200005b4
 8003dc8:	200005b6 	.word	0x200005b6
 8003dcc:	200005b8 	.word	0x200005b8
 8003dd0:	200005c8 	.word	0x200005c8

08003dd4 <listen>:

int8_t listen(uint8_t sn)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d902      	bls.n	8003dea <listen+0x16>
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003de8:	e049      	b.n	8003e7e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	3301      	adds	r3, #1
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff fbcc 	bl	8003590 <WIZCHIP_READ>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d002      	beq.n	8003e08 <listen+0x34>
 8003e02:	f06f 0304 	mvn.w	r3, #4
 8003e06:	e03a      	b.n	8003e7e <listen+0xaa>
	CHECK_SOCKINIT();
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fbbb 	bl	8003590 <WIZCHIP_READ>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b13      	cmp	r3, #19
 8003e1e:	d002      	beq.n	8003e26 <listen+0x52>
 8003e20:	f06f 0302 	mvn.w	r3, #2
 8003e24:	e02b      	b.n	8003e7e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fbf7 	bl	8003628 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003e3a:	bf00      	nop
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3301      	adds	r3, #1
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fba1 	bl	8003590 <WIZCHIP_READ>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f3      	bne.n	8003e3c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003e54:	e006      	b.n	8003e64 <listen+0x90>
   {
         close(sn);
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff4d 	bl	8003cf8 <close>
         return SOCKERR_SOCKCLOSED;
 8003e5e:	f06f 0303 	mvn.w	r3, #3
 8003e62:	e00c      	b.n	8003e7e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3301      	adds	r3, #1
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fb8d 	bl	8003590 <WIZCHIP_READ>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b14      	cmp	r3, #20
 8003e7a:	d1ec      	bne.n	8003e56 <listen+0x82>
   }
   return SOCK_OK;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d902      	bls.n	8003e9e <disconnect+0x16>
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e9c:	e062      	b.n	8003f64 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fb72 	bl	8003590 <WIZCHIP_READ>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <disconnect+0x34>
 8003eb6:	f06f 0304 	mvn.w	r3, #4
 8003eba:	e053      	b.n	8003f64 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ec8:	2108      	movs	r1, #8
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fbac 	bl	8003628 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003ed0:	bf00      	nop
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fb56 	bl	8003590 <WIZCHIP_READ>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f3      	bne.n	8003ed2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	2201      	movs	r2, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	b21b      	sxth	r3, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	b21a      	sxth	r2, r3
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <disconnect+0xe4>)
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	4013      	ands	r3, r2
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <disconnect+0xe4>)
 8003f06:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <disconnect+0xe8>)
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	fa42 f303 	asr.w	r3, r2, r3
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d016      	beq.n	8003f4a <disconnect+0xc2>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e021      	b.n	8003f64 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3301      	adds	r3, #1
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fb2f 	bl	8003590 <WIZCHIP_READ>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d006      	beq.n	8003f4a <disconnect+0xc2>
	   {
	      close(sn);
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff feda 	bl	8003cf8 <close>
	      return SOCKERR_TIMEOUT;
 8003f44:	f06f 030c 	mvn.w	r3, #12
 8003f48:	e00c      	b.n	8003f64 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	3301      	adds	r3, #1
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fb1a 	bl	8003590 <WIZCHIP_READ>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1de      	bne.n	8003f20 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200005b6 	.word	0x200005b6
 8003f70:	200005b4 	.word	0x200005b4

08003f74 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d902      	bls.n	8003f98 <send+0x24>
 8003f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f96:	e0dd      	b.n	8004154 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff faf5 	bl	8003590 <WIZCHIP_READ>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d002      	beq.n	8003fb6 <send+0x42>
 8003fb0:	f06f 0304 	mvn.w	r3, #4
 8003fb4:	e0ce      	b.n	8004154 <send+0x1e0>
   CHECK_SOCKDATA();
 8003fb6:	88bb      	ldrh	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <send+0x4e>
 8003fbc:	f06f 030d 	mvn.w	r3, #13
 8003fc0:	e0c8      	b.n	8004154 <send+0x1e0>
   tmp = getSn_SR(sn);
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fade 	bl	8003590 <WIZCHIP_READ>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b17      	cmp	r3, #23
 8003fdc:	d005      	beq.n	8003fea <send+0x76>
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b1c      	cmp	r3, #28
 8003fe2:	d002      	beq.n	8003fea <send+0x76>
 8003fe4:	f06f 0306 	mvn.w	r3, #6
 8003fe8:	e0b4      	b.n	8004154 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8003fea:	4b5c      	ldr	r3, [pc, #368]	@ (800415c <send+0x1e8>)
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	fa42 f303 	asr.w	r3, r2, r3
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d039      	beq.n	8004072 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	3301      	adds	r3, #1
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fac0 	bl	8003590 <WIZCHIP_READ>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d019      	beq.n	8004056 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	3301      	adds	r3, #1
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800402e:	2110      	movs	r1, #16
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff faf9 	bl	8003628 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2201      	movs	r2, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	b21b      	sxth	r3, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	b21a      	sxth	r2, r3
 8004044:	4b45      	ldr	r3, [pc, #276]	@ (800415c <send+0x1e8>)
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b21b      	sxth	r3, r3
 800404a:	4013      	ands	r3, r2
 800404c:	b21b      	sxth	r3, r3
 800404e:	b29a      	uxth	r2, r3
 8004050:	4b42      	ldr	r3, [pc, #264]	@ (800415c <send+0x1e8>)
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e00d      	b.n	8004072 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <send+0xfa>
      {
         close(sn);
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fe48 	bl	8003cf8 <close>
         return SOCKERR_TIMEOUT;
 8004068:	f06f 030c 	mvn.w	r3, #12
 800406c:	e072      	b.n	8004154 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800406e:	2300      	movs	r3, #0
 8004070:	e070      	b.n	8004154 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	3301      	adds	r3, #1
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fa86 	bl	8003590 <WIZCHIP_READ>
 8004084:	4603      	mov	r3, r0
 8004086:	029b      	lsls	r3, r3, #10
 8004088:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800408a:	88ba      	ldrh	r2, [r7, #4]
 800408c:	89bb      	ldrh	r3, [r7, #12]
 800408e:	429a      	cmp	r2, r3
 8004090:	d901      	bls.n	8004096 <send+0x122>
 8004092:	89bb      	ldrh	r3, [r7, #12]
 8004094:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fbd3 	bl	8003844 <getSn_TX_FSR>
 800409e:	4603      	mov	r3, r0
 80040a0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	3301      	adds	r3, #1
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fa6e 	bl	8003590 <WIZCHIP_READ>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b17      	cmp	r3, #23
 80040bc:	d009      	beq.n	80040d2 <send+0x15e>
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b1c      	cmp	r3, #28
 80040c2:	d006      	beq.n	80040d2 <send+0x15e>
      {
         close(sn);
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fe16 	bl	8003cf8 <close>
         return SOCKERR_SOCKSTATUS;
 80040cc:	f06f 0306 	mvn.w	r3, #6
 80040d0:	e040      	b.n	8004154 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <send+0x1ec>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	fa42 f303 	asr.w	r3, r2, r3
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <send+0x17e>
 80040e6:	88ba      	ldrh	r2, [r7, #4]
 80040e8:	89bb      	ldrh	r3, [r7, #12]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d901      	bls.n	80040f2 <send+0x17e>
 80040ee:	2300      	movs	r3, #0
 80040f0:	e030      	b.n	8004154 <send+0x1e0>
      if(len <= freesize) break;
 80040f2:	88ba      	ldrh	r2, [r7, #4]
 80040f4:	89bb      	ldrh	r3, [r7, #12]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d900      	bls.n	80040fc <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80040fa:	e7cc      	b.n	8004096 <send+0x122>
      if(len <= freesize) break;
 80040fc:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80040fe:	88ba      	ldrh	r2, [r7, #4]
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fc2f 	bl	8003968 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	3301      	adds	r3, #1
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004116:	2120      	movs	r1, #32
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fa85 	bl	8003628 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800411e:	bf00      	nop
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	3301      	adds	r3, #1
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fa2f 	bl	8003590 <WIZCHIP_READ>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f3      	bne.n	8004120 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2201      	movs	r2, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	b21a      	sxth	r2, r3
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <send+0x1e8>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b21b      	sxth	r3, r3
 8004148:	4313      	orrs	r3, r2
 800414a:	b21b      	sxth	r3, r3
 800414c:	b29a      	uxth	r2, r3
 800414e:	4b03      	ldr	r3, [pc, #12]	@ (800415c <send+0x1e8>)
 8004150:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004152:	88bb      	ldrh	r3, [r7, #4]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	200005b6 	.word	0x200005b6
 8004160:	200005b4 	.word	0x200005b4

08004164 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
 8004170:	4613      	mov	r3, r2
 8004172:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	2b08      	cmp	r3, #8
 8004180:	d902      	bls.n	8004188 <recv+0x24>
 8004182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004186:	e09b      	b.n	80042c0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	3301      	adds	r3, #1
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff f9fd 	bl	8003590 <WIZCHIP_READ>
 8004196:	4603      	mov	r3, r0
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	2b01      	cmp	r3, #1
 800419e:	d002      	beq.n	80041a6 <recv+0x42>
 80041a0:	f06f 0304 	mvn.w	r3, #4
 80041a4:	e08c      	b.n	80042c0 <recv+0x15c>
   CHECK_SOCKDATA();
 80041a6:	88bb      	ldrh	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <recv+0x4e>
 80041ac:	f06f 030d 	mvn.w	r3, #13
 80041b0:	e086      	b.n	80042c0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	3301      	adds	r3, #1
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff f9e6 	bl	8003590 <WIZCHIP_READ>
 80041c4:	4603      	mov	r3, r0
 80041c6:	029b      	lsls	r3, r3, #10
 80041c8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80041ca:	89ba      	ldrh	r2, [r7, #12]
 80041cc:	88bb      	ldrh	r3, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d201      	bcs.n	80041d6 <recv+0x72>
 80041d2:	89bb      	ldrh	r3, [r7, #12]
 80041d4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fb7c 	bl	80038d6 <getSn_RX_RSR>
 80041de:	4603      	mov	r3, r0
 80041e0:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	3301      	adds	r3, #1
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f9ce 	bl	8003590 <WIZCHIP_READ>
 80041f4:	4603      	mov	r3, r0
 80041f6:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b17      	cmp	r3, #23
 80041fc:	d026      	beq.n	800424c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b1c      	cmp	r3, #28
 8004202:	d11c      	bne.n	800423e <recv+0xda>
            {
               if(recvsize != 0) break;
 8004204:	89bb      	ldrh	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d133      	bne.n	8004272 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fb19 	bl	8003844 <getSn_TX_FSR>
 8004212:	4603      	mov	r3, r0
 8004214:	461c      	mov	r4, r3
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	3301      	adds	r3, #1
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff f9b4 	bl	8003590 <WIZCHIP_READ>
 8004228:	4603      	mov	r3, r0
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	429c      	cmp	r4, r3
 800422e:	d10d      	bne.n	800424c <recv+0xe8>
               {
                  close(sn);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fd60 	bl	8003cf8 <close>
                  return SOCKERR_SOCKSTATUS;
 8004238:	f06f 0306 	mvn.w	r3, #6
 800423c:	e040      	b.n	80042c0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fd59 	bl	8003cf8 <close>
               return SOCKERR_SOCKSTATUS;
 8004246:	f06f 0306 	mvn.w	r3, #6
 800424a:	e039      	b.n	80042c0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800424c:	4b1e      	ldr	r3, [pc, #120]	@ (80042c8 <recv+0x164>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	fa42 f303 	asr.w	r3, r2, r3
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <recv+0x106>
 8004260:	89bb      	ldrh	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <recv+0x106>
 8004266:	2300      	movs	r3, #0
 8004268:	e02a      	b.n	80042c0 <recv+0x15c>
         if(recvsize != 0) break;
 800426a:	89bb      	ldrh	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8004270:	e7b1      	b.n	80041d6 <recv+0x72>
               if(recvsize != 0) break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <recv+0x114>
         if(recvsize != 0) break;
 8004276:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8004278:	89ba      	ldrh	r2, [r7, #12]
 800427a:	88bb      	ldrh	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d201      	bcs.n	8004284 <recv+0x120>
 8004280:	89bb      	ldrh	r3, [r7, #12]
 8004282:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8004284:	88ba      	ldrh	r2, [r7, #4]
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fbc6 	bl	8003a1c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3301      	adds	r3, #1
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800429c:	2140      	movs	r1, #64	@ 0x40
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff f9c2 	bl	8003628 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80042a4:	bf00      	nop
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	3301      	adds	r3, #1
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f96c 	bl	8003590 <WIZCHIP_READ>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f3      	bne.n	80042a6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80042be:	88bb      	ldrh	r3, [r7, #4]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd90      	pop	{r4, r7, pc}
 80042c8:	200005b4 	.word	0x200005b4

080042cc <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	603a      	str	r2, [r7, #0]
 80042d6:	71fb      	strb	r3, [r7, #7]
 80042d8:	460b      	mov	r3, r1
 80042da:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d902      	bls.n	80042ec <ctlsocket+0x20>
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042ea:	e0c0      	b.n	800446e <ctlsocket+0x1a2>
   switch(cstype)
 80042ec:	79bb      	ldrb	r3, [r7, #6]
 80042ee:	2b07      	cmp	r3, #7
 80042f0:	f200 80b9 	bhi.w	8004466 <ctlsocket+0x19a>
 80042f4:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <ctlsocket+0x30>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800431d 	.word	0x0800431d
 8004300:	08004371 	.word	0x08004371
 8004304:	0800438b 	.word	0x0800438b
 8004308:	080043a9 	.word	0x080043a9
 800430c:	080043c7 	.word	0x080043c7
 8004310:	080043f7 	.word	0x080043f7
 8004314:	08004417 	.word	0x08004417
 8004318:	08004447 	.word	0x08004447
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d10d      	bne.n	8004344 <ctlsocket+0x78>
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2201      	movs	r2, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	b21a      	sxth	r2, r3
 8004332:	4b51      	ldr	r3, [pc, #324]	@ (8004478 <ctlsocket+0x1ac>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b21b      	sxth	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	b21b      	sxth	r3, r3
 800433c:	b29a      	uxth	r2, r3
 800433e:	4b4e      	ldr	r3, [pc, #312]	@ (8004478 <ctlsocket+0x1ac>)
 8004340:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8004342:	e093      	b.n	800446c <ctlsocket+0x1a0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10f      	bne.n	800436a <ctlsocket+0x9e>
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	2201      	movs	r2, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	b21b      	sxth	r3, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	b21a      	sxth	r2, r3
 8004358:	4b47      	ldr	r3, [pc, #284]	@ (8004478 <ctlsocket+0x1ac>)
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b21b      	sxth	r3, r3
 800435e:	4013      	ands	r3, r2
 8004360:	b21b      	sxth	r3, r3
 8004362:	b29a      	uxth	r2, r3
 8004364:	4b44      	ldr	r3, [pc, #272]	@ (8004478 <ctlsocket+0x1ac>)
 8004366:	801a      	strh	r2, [r3, #0]
         break;
 8004368:	e080      	b.n	800446c <ctlsocket+0x1a0>
         else return SOCKERR_ARG;
 800436a:	f06f 0309 	mvn.w	r3, #9
 800436e:	e07e      	b.n	800446e <ctlsocket+0x1a2>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8004370:	4b41      	ldr	r3, [pc, #260]	@ (8004478 <ctlsocket+0x1ac>)
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	fa42 f303 	asr.w	r3, r2, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	701a      	strb	r2, [r3, #0]
         //
         break;
 8004388:	e070      	b.n	800446c <ctlsocket+0x1a0>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	3301      	adds	r3, #1
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f8fa 	bl	8003590 <WIZCHIP_READ>
 800439c:	4603      	mov	r3, r0
 800439e:	029b      	lsls	r3, r3, #10
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	801a      	strh	r2, [r3, #0]
         break;
 80043a6:	e061      	b.n	800446c <ctlsocket+0x1a0>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	3301      	adds	r3, #1
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff f8eb 	bl	8003590 <WIZCHIP_READ>
 80043ba:	4603      	mov	r3, r0
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	b29a      	uxth	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	801a      	strh	r2, [r3, #0]
         break;
 80043c4:	e052      	b.n	800446c <ctlsocket+0x1a0>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b1f      	cmp	r3, #31
 80043cc:	d902      	bls.n	80043d4 <ctlsocket+0x108>
 80043ce:	f06f 0309 	mvn.w	r3, #9
 80043d2:	e04c      	b.n	800446e <ctlsocket+0x1a2>
         setSn_IR(sn,*(uint8_t*)arg);
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	3301      	adds	r3, #1
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80043e0:	461a      	mov	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f7ff f91a 	bl	8003628 <WIZCHIP_WRITE>
         break;
 80043f4:	e03a      	b.n	800446c <ctlsocket+0x1a0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	3301      	adds	r3, #1
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff f8c4 	bl	8003590 <WIZCHIP_READ>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	b2da      	uxtb	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	701a      	strb	r2, [r3, #0]
         break;
 8004414:	e02a      	b.n	800446c <ctlsocket+0x1a0>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b1f      	cmp	r3, #31
 800441c:	d902      	bls.n	8004424 <ctlsocket+0x158>
 800441e:	f06f 0309 	mvn.w	r3, #9
 8004422:	e024      	b.n	800446e <ctlsocket+0x1a2>
         setSn_IMR(sn,*(uint8_t*)arg);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	3301      	adds	r3, #1
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8004430:	461a      	mov	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7ff f8f2 	bl	8003628 <WIZCHIP_WRITE>
         break;
 8004444:	e012      	b.n	800446c <ctlsocket+0x1a0>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	3301      	adds	r3, #1
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	f503 5330 	add.w	r3, r3, #11264	@ 0x2c00
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff f89c 	bl	8003590 <WIZCHIP_READ>
 8004458:	4603      	mov	r3, r0
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	b2da      	uxtb	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	701a      	strb	r2, [r3, #0]
         break;
 8004464:	e002      	b.n	800446c <ctlsocket+0x1a0>
   #endif
      default:
         return SOCKERR_ARG;
 8004466:	f06f 0309 	mvn.w	r3, #9
 800446a:	e000      	b.n	800446e <ctlsocket+0x1a2>
   }
   return SOCK_OK;
 800446c:	2301      	movs	r3, #1
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200005b4 	.word	0x200005b4

0800447c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	2300      	movs	r3, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <reg_wizchip_cs_cbfunc+0x16>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800452a:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <reg_wizchip_cs_cbfunc+0x40>)
 800452c:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <reg_wizchip_cs_cbfunc+0x44>)
 800452e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004530:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <reg_wizchip_cs_cbfunc+0x40>)
 8004532:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <reg_wizchip_cs_cbfunc+0x48>)
 8004534:	619a      	str	r2, [r3, #24]
 8004536:	e006      	b.n	8004546 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004538:	4a06      	ldr	r2, [pc, #24]	@ (8004554 <reg_wizchip_cs_cbfunc+0x40>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800453e:	4a05      	ldr	r2, [pc, #20]	@ (8004554 <reg_wizchip_cs_cbfunc+0x40>)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6193      	str	r3, [r2, #24]
   }
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000028 	.word	0x20000028
 8004558:	08004499 	.word	0x08004499
 800455c:	080044a7 	.word	0x080044a7

08004560 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800456a:	bf00      	nop
 800456c:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <reg_wizchip_spi_cbfunc+0x4c>)
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0f9      	beq.n	800456c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <reg_wizchip_spi_cbfunc+0x24>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <reg_wizchip_spi_cbfunc+0x4c>)
 8004586:	4a0a      	ldr	r2, [pc, #40]	@ (80045b0 <reg_wizchip_spi_cbfunc+0x50>)
 8004588:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800458a:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <reg_wizchip_spi_cbfunc+0x4c>)
 800458c:	4a09      	ldr	r2, [pc, #36]	@ (80045b4 <reg_wizchip_spi_cbfunc+0x54>)
 800458e:	621a      	str	r2, [r3, #32]
 8004590:	e006      	b.n	80045a0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8004592:	4a06      	ldr	r2, [pc, #24]	@ (80045ac <reg_wizchip_spi_cbfunc+0x4c>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004598:	4a04      	ldr	r2, [pc, #16]	@ (80045ac <reg_wizchip_spi_cbfunc+0x4c>)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6213      	str	r3, [r2, #32]
   }
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000028 	.word	0x20000028
 80045b0:	080044ed 	.word	0x080044ed
 80045b4:	080044fd 	.word	0x080044fd

080045b8 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	f200 80c5 	bhi.w	8004762 <ctlwizchip+0x1aa>
 80045d8:	a201      	add	r2, pc, #4	@ (adr r2, 80045e0 <ctlwizchip+0x28>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004621 	.word	0x08004621
 80045e4:	08004627 	.word	0x08004627
 80045e8:	08004653 	.word	0x08004653
 80045ec:	08004647 	.word	0x08004647
 80045f0:	08004661 	.word	0x08004661
 80045f4:	0800466d 	.word	0x0800466d
 80045f8:	0800467b 	.word	0x0800467b
 80045fc:	080046a1 	.word	0x080046a1
 8004600:	080046c3 	.word	0x080046c3
 8004604:	08004707 	.word	0x08004707
 8004608:	0800470d 	.word	0x0800470d
 800460c:	08004715 	.word	0x08004715
 8004610:	08004769 	.word	0x08004769
 8004614:	0800471d 	.word	0x0800471d
 8004618:	0800472b 	.word	0x0800472b
 800461c:	08004747 	.word	0x08004747
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004620:	f000 f8e8 	bl	80047f4 <wizchip_sw_reset>
         break;
 8004624:	e0a1      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3308      	adds	r3, #8
 8004634:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f925 	bl	800488c <wizchip_init>
 8004642:	4603      	mov	r3, r0
 8004644:	e092      	b.n	800476c <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f9aa 	bl	80049a4 <wizchip_clrinterrupt>
         break;
 8004650:	e08b      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004652:	f000 f9db 	bl	8004a0c <wizchip_getinterrupt>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	801a      	strh	r2, [r3, #0]
         break;
 800465e:	e084      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f9f6 	bl	8004a56 <wizchip_setinterruptmask>
         break;         
 800466a:	e07e      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800466c:	f000 fa0e 	bl	8004a8c <wizchip_getinterruptmask>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	801a      	strh	r2, [r3, #0]
         break;
 8004678:	e077      	b.n	800476a <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	b29b      	uxth	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800468a:	f7fe ffcd 	bl	8003628 <WIZCHIP_WRITE>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	4619      	mov	r1, r3
 8004696:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800469a:	f7fe ffc5 	bl	8003628 <WIZCHIP_WRITE>
         break;
 800469e:	e064      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80046a0:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80046a4:	f7fe ff74 	bl	8003590 <WIZCHIP_READ>
 80046a8:	4603      	mov	r3, r0
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	b29c      	uxth	r4, r3
 80046ae:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 80046b2:	f7fe ff6d 	bl	8003590 <WIZCHIP_READ>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4423      	add	r3, r4
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	801a      	strh	r2, [r3, #0]
         break;
 80046c0:	e053      	b.n	800476a <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80046c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004774 <ctlwizchip+0x1bc>)
 80046c4:	789a      	ldrb	r2, [r3, #2]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <ctlwizchip+0x1bc>)
 80046d0:	78d2      	ldrb	r2, [r2, #3]
 80046d2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3302      	adds	r3, #2
 80046d8:	4a26      	ldr	r2, [pc, #152]	@ (8004774 <ctlwizchip+0x1bc>)
 80046da:	7912      	ldrb	r2, [r2, #4]
 80046dc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	3303      	adds	r3, #3
 80046e2:	4a24      	ldr	r2, [pc, #144]	@ (8004774 <ctlwizchip+0x1bc>)
 80046e4:	7952      	ldrb	r2, [r2, #5]
 80046e6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4a21      	ldr	r2, [pc, #132]	@ (8004774 <ctlwizchip+0x1bc>)
 80046ee:	7992      	ldrb	r2, [r2, #6]
 80046f0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3305      	adds	r3, #5
 80046f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <ctlwizchip+0x1bc>)
 80046f8:	79d2      	ldrb	r2, [r2, #7]
 80046fa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3306      	adds	r3, #6
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
         break;
 8004704:	e031      	b.n	800476a <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8004706:	f000 fa13 	bl	8004b30 <wizphy_reset>
         break;
 800470a:	e02e      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800470c:	6838      	ldr	r0, [r7, #0]
 800470e:	f000 fa36 	bl	8004b7e <wizphy_setphyconf>
         break;
 8004712:	e02a      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004714:	6838      	ldr	r0, [r7, #0]
 8004716:	f000 fa75 	bl	8004c04 <wizphy_getphyconf>
         break;
 800471a:	e026      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fad9 	bl	8004cd8 <wizphy_setphypmode>
 8004726:	4603      	mov	r3, r0
 8004728:	e020      	b.n	800476c <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800472a:	f000 f9e8 	bl	8004afe <wizphy_getphypmode>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2bff      	cmp	r3, #255	@ 0xff
 8004736:	d102      	bne.n	800473e <ctlwizchip+0x186>
 8004738:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800473c:	e016      	b.n	800476c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	7dfa      	ldrb	r2, [r7, #23]
 8004742:	701a      	strb	r2, [r3, #0]
         break;
 8004744:	e011      	b.n	800476a <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8004746:	f000 f9c4 	bl	8004ad2 <wizphy_getphylink>
 800474a:	4603      	mov	r3, r0
 800474c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800474e:	7dfb      	ldrb	r3, [r7, #23]
 8004750:	2bff      	cmp	r3, #255	@ 0xff
 8004752:	d102      	bne.n	800475a <ctlwizchip+0x1a2>
 8004754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004758:	e008      	b.n	800476c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	7dfa      	ldrb	r2, [r7, #23]
 800475e:	701a      	strb	r2, [r3, #0]
         break;
 8004760:	e003      	b.n	800476a <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004766:	e001      	b.n	800476c <ctlwizchip+0x1b4>
         break;
 8004768:	bf00      	nop
   }
   return 0;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	20000028 	.word	0x20000028

08004778 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	2b05      	cmp	r3, #5
 8004788:	d82c      	bhi.n	80047e4 <ctlnetwork+0x6c>
 800478a:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <ctlnetwork+0x18>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080047dd 	.word	0x080047dd
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80047a8:	6838      	ldr	r0, [r7, #0]
 80047aa:	f000 fadf 	bl	8004d6c <wizchip_setnetinfo>
         break;
 80047ae:	e01c      	b.n	80047ea <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80047b0:	6838      	ldr	r0, [r7, #0]
 80047b2:	f000 fb1b 	bl	8004dec <wizchip_getnetinfo>
         break;
 80047b6:	e018      	b.n	80047ea <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fb55 	bl	8004e6c <wizchip_setnetmode>
 80047c2:	4603      	mov	r3, r0
 80047c4:	e012      	b.n	80047ec <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80047c6:	f000 fb73 	bl	8004eb0 <wizchip_getnetmode>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	701a      	strb	r2, [r3, #0]
         break;
 80047d2:	e00a      	b.n	80047ea <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80047d4:	6838      	ldr	r0, [r7, #0]
 80047d6:	f000 fb73 	bl	8004ec0 <wizchip_settimeout>
         break;
 80047da:	e006      	b.n	80047ea <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f000 fb90 	bl	8004f02 <wizchip_gettimeout>
         break;
 80047e2:	e002      	b.n	80047ea <ctlnetwork+0x72>
      default:
         return -1;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047e8:	e000      	b.n	80047ec <ctlnetwork+0x74>
   }
   return 0;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	2206      	movs	r2, #6
 80047fe:	4619      	mov	r1, r3
 8004800:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004804:	f7fe ff5e 	bl	80036c4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	2204      	movs	r2, #4
 800480e:	4619      	mov	r1, r3
 8004810:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004814:	f7fe ff56 	bl	80036c4 <WIZCHIP_READ_BUF>
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	2204      	movs	r2, #4
 800481e:	4619      	mov	r1, r3
 8004820:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004824:	f7fe ff4e 	bl	80036c4 <WIZCHIP_READ_BUF>
 8004828:	f107 030c 	add.w	r3, r7, #12
 800482c:	2204      	movs	r2, #4
 800482e:	4619      	mov	r1, r3
 8004830:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004834:	f7fe ff46 	bl	80036c4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004838:	2180      	movs	r1, #128	@ 0x80
 800483a:	2000      	movs	r0, #0
 800483c:	f7fe fef4 	bl	8003628 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004840:	2000      	movs	r0, #0
 8004842:	f7fe fea5 	bl	8003590 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	2206      	movs	r2, #6
 800484a:	4619      	mov	r1, r3
 800484c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004850:	f7fe ff98 	bl	8003784 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004854:	f107 0314 	add.w	r3, r7, #20
 8004858:	2204      	movs	r2, #4
 800485a:	4619      	mov	r1, r3
 800485c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004860:	f7fe ff90 	bl	8003784 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	2204      	movs	r2, #4
 800486a:	4619      	mov	r1, r3
 800486c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004870:	f7fe ff88 	bl	8003784 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	2204      	movs	r2, #4
 800487a:	4619      	mov	r1, r3
 800487c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004880:	f7fe ff80 	bl	8003784 <WIZCHIP_WRITE_BUF>
}
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800489a:	f7ff ffab 	bl	80047f4 <wizchip_sw_reset>
   if(txsize)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03b      	beq.n	800491c <wizchip_init+0x90>
   {
      tmp = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	e015      	b.n	80048da <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80048ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	7bbb      	ldrb	r3, [r7, #14]
 80048ba:	4413      	add	r3, r2
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80048c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	dd02      	ble.n	80048ce <wizchip_init+0x42>
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048cc:	e066      	b.n	800499c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3301      	adds	r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	dde5      	ble.n	80048ae <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	e015      	b.n	8004914 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80048e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	3301      	adds	r3, #1
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80048f6:	4618      	mov	r0, r3
 80048f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4413      	add	r3, r2
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	4619      	mov	r1, r3
 8004904:	f7fe fe90 	bl	8003628 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3301      	adds	r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004918:	2b07      	cmp	r3, #7
 800491a:	dde5      	ble.n	80048e8 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03b      	beq.n	800499a <wizchip_init+0x10e>
   {
      tmp = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e015      	b.n	8004958 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800492c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4413      	add	r3, r2
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	7bbb      	ldrb	r3, [r7, #14]
 8004938:	4413      	add	r3, r2
 800493a:	b2db      	uxtb	r3, r3
 800493c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800493e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004942:	2b10      	cmp	r3, #16
 8004944:	dd02      	ble.n	800494c <wizchip_init+0xc0>
 8004946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800494a:	e027      	b.n	800499c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800494c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	3301      	adds	r3, #1
 8004954:	b2db      	uxtb	r3, r3
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495c:	2b07      	cmp	r3, #7
 800495e:	dde5      	ble.n	800492c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e015      	b.n	8004992 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	3301      	adds	r3, #1
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004974:	4618      	mov	r0, r3
 8004976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4413      	add	r3, r2
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	4619      	mov	r1, r3
 8004982:	f7fe fe51 	bl	8003628 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3301      	adds	r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	73fb      	strb	r3, [r7, #15]
 8004992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004996:	2b07      	cmp	r3, #7
 8004998:	dde5      	ble.n	8004966 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	f023 030f 	bic.w	r3, r3, #15
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	4619      	mov	r1, r3
 80049c4:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80049c8:	f7fe fe2e 	bl	8003628 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e014      	b.n	80049fc <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80049d2:	7bba      	ldrb	r2, [r7, #14]
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	fa42 f303 	asr.w	r3, r2, r3
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <wizchip_clrinterrupt+0x52>
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3301      	adds	r3, #1
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049ee:	211f      	movs	r1, #31
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fe19 	bl	8003628 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	3301      	adds	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b07      	cmp	r3, #7
 8004a00:	d9e7      	bls.n	80049d2 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8004a02:	bf00      	nop
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8004a1e:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004a22:	f7fe fdb5 	bl	8003590 <WIZCHIP_READ>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f023 030f 	bic.w	r3, r3, #15
 8004a2c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8004a2e:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004a32:	f7fe fdad 	bl	8003590 <WIZCHIP_READ>
 8004a36:	4603      	mov	r3, r0
 8004a38:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8004a3a:	79bb      	ldrb	r3, [r7, #6]
 8004a3c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8004a3e:	88bb      	ldrh	r3, [r7, #4]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004a4c:	88bb      	ldrh	r3, [r7, #4]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004a74:	f7fe fdd8 	bl	8003628 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004a80:	f7fe fdd2 	bl	8003628 <WIZCHIP_WRITE>
#endif   
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004a9e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004aa2:	f7fe fd75 	bl	8003590 <WIZCHIP_READ>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8004aaa:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004aae:	f7fe fd6f 	bl	8003590 <WIZCHIP_READ>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004ab6:	79bb      	ldrb	r3, [r7, #6]
 8004ab8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8004aba:	88bb      	ldrh	r3, [r7, #4]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004ac8:	88bb      	ldrh	r3, [r7, #4]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004adc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004ae0:	f7fe fd56 	bl	8003590 <WIZCHIP_READ>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8004aee:	2301      	movs	r3, #1
 8004af0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b082      	sub	sp, #8
 8004b02:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004b08:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b0c:	f7fe fd40 	bl	8003590 <WIZCHIP_READ>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b16:	2b30      	cmp	r3, #48	@ 0x30
 8004b18:	d102      	bne.n	8004b20 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	71fb      	strb	r3, [r7, #7]
 8004b1e:	e001      	b.n	8004b24 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004b20:	2300      	movs	r3, #0
 8004b22:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004b36:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b3a:	f7fe fd29 	bl	8003590 <WIZCHIP_READ>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b48:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b52:	f7fe fd69 	bl	8003628 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004b56:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b5a:	f7fe fd19 	bl	8003590 <WIZCHIP_READ>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b68:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004b72:	f7fe fd59 	bl	8003628 <WIZCHIP_WRITE>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d104      	bne.n	8004b9c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b98:	73fb      	strb	r3, [r7, #15]
 8004b9a:	e003      	b.n	8004ba4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	785b      	ldrb	r3, [r3, #1]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d104      	bne.n	8004bb6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e019      	b.n	8004bea <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	78db      	ldrb	r3, [r3, #3]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10d      	bne.n	8004bda <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	789b      	ldrb	r3, [r3, #2]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d104      	bne.n	8004bd0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	f043 0318 	orr.w	r3, r3, #24
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	e00c      	b.n	8004bea <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	f043 0308 	orr.w	r3, r3, #8
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	e007      	b.n	8004bea <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	789b      	ldrb	r3, [r3, #2]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d103      	bne.n	8004bea <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	f043 0310 	orr.w	r3, r3, #16
 8004be8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	4619      	mov	r1, r3
 8004bee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004bf2:	f7fe fd19 	bl	8003628 <WIZCHIP_WRITE>
   wizphy_reset();
 8004bf6:	f7ff ff9b 	bl	8004b30 <wizphy_reset>
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004c10:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004c14:	f7fe fcbc 	bl	8003590 <WIZCHIP_READ>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	119b      	asrs	r3, r3, #6
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d001      	beq.n	8004c3a <wizphy_getphyconf+0x36>
 8004c36:	2b38      	cmp	r3, #56	@ 0x38
 8004c38:	d103      	bne.n	8004c42 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	705a      	strb	r2, [r3, #1]
         break;
 8004c40:	e003      	b.n	8004c4a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	705a      	strb	r2, [r3, #1]
         break;
 8004c48:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c50:	3b10      	subs	r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	bf8c      	ite	hi
 8004c56:	2201      	movhi	r2, #1
 8004c58:	2200      	movls	r2, #0
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	d10f      	bne.n	8004c80 <wizphy_getphyconf+0x7c>
 8004c60:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd0 <wizphy_getphyconf+0xcc>)
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf14      	ite	ne
 8004c6e:	2301      	movne	r3, #1
 8004c70:	2300      	moveq	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	709a      	strb	r2, [r3, #2]
         break;
 8004c7e:	e003      	b.n	8004c88 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	709a      	strb	r2, [r3, #2]
         break;
 8004c86:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c8e:	3b08      	subs	r3, #8
 8004c90:	2b18      	cmp	r3, #24
 8004c92:	bf8c      	ite	hi
 8004c94:	2201      	movhi	r2, #1
 8004c96:	2200      	movls	r2, #0
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	d10f      	bne.n	8004cbe <wizphy_getphyconf+0xba>
 8004c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd4 <wizphy_getphyconf+0xd0>)
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	70da      	strb	r2, [r3, #3]
         break;
 8004cbc:	e003      	b.n	8004cc6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	70da      	strb	r2, [r3, #3]
         break;
 8004cc4:	bf00      	nop
   }
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	00010101 	.word	0x00010101
 8004cd4:	01010001 	.word	0x01010001

08004cd8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004ce6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004cea:	f7fe fc51 	bl	8003590 <WIZCHIP_READ>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <wizphy_setphypmode+0x2a>
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d00:	e030      	b.n	8004d64 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004d08:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d104      	bne.n	8004d1a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e003      	b.n	8004d22 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004d20:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	4619      	mov	r1, r3
 8004d26:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d2a:	f7fe fc7d 	bl	8003628 <WIZCHIP_WRITE>
   wizphy_reset();
 8004d2e:	f7ff feff 	bl	8004b30 <wizphy_reset>
   tmp = getPHYCFGR();
 8004d32:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004d36:	f7fe fc2b 	bl	8003590 <WIZCHIP_READ>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d106      	bne.n	8004d52 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d008      	beq.n	8004d60 <wizphy_setphypmode+0x88>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e008      	b.n	8004d64 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <wizphy_setphypmode+0x88>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e001      	b.n	8004d64 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2206      	movs	r2, #6
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004d7e:	f7fe fd01 	bl	8003784 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	330e      	adds	r3, #14
 8004d86:	2204      	movs	r2, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004d8e:	f7fe fcf9 	bl	8003784 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	330a      	adds	r3, #10
 8004d96:	2204      	movs	r2, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004d9e:	f7fe fcf1 	bl	8003784 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3306      	adds	r3, #6
 8004da6:	2204      	movs	r2, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004dae:	f7fe fce9 	bl	8003784 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	7c9a      	ldrb	r2, [r3, #18]
 8004db6:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <wizchip_setnetinfo+0x78>)
 8004db8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	7cda      	ldrb	r2, [r3, #19]
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <wizchip_setnetinfo+0x78>)
 8004dc0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7d1a      	ldrb	r2, [r3, #20]
 8004dc6:	4b07      	ldr	r3, [pc, #28]	@ (8004de4 <wizchip_setnetinfo+0x78>)
 8004dc8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7d5a      	ldrb	r2, [r3, #21]
 8004dce:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <wizchip_setnetinfo+0x78>)
 8004dd0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7d9a      	ldrb	r2, [r3, #22]
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <wizchip_setnetinfo+0x7c>)
 8004dd8:	701a      	strb	r2, [r3, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	200005d0 	.word	0x200005d0
 8004de8:	200005d4 	.word	0x200005d4

08004dec <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2206      	movs	r2, #6
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004dfe:	f7fe fc61 	bl	80036c4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	330e      	adds	r3, #14
 8004e06:	2204      	movs	r2, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004e0e:	f7fe fc59 	bl	80036c4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	330a      	adds	r3, #10
 8004e16:	2204      	movs	r2, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004e1e:	f7fe fc51 	bl	80036c4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3306      	adds	r3, #6
 8004e26:	2204      	movs	r2, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004e2e:	f7fe fc49 	bl	80036c4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004e32:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <wizchip_getnetinfo+0x78>)
 8004e34:	781a      	ldrb	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <wizchip_getnetinfo+0x78>)
 8004e3c:	785a      	ldrb	r2, [r3, #1]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <wizchip_getnetinfo+0x78>)
 8004e44:	789a      	ldrb	r2, [r3, #2]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004e4a:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <wizchip_getnetinfo+0x78>)
 8004e4c:	78da      	ldrb	r2, [r3, #3]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004e52:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <wizchip_getnetinfo+0x7c>)
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	759a      	strb	r2, [r3, #22]
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200005d0 	.word	0x200005d0
 8004e68:	200005d4 	.word	0x200005d4

08004e6c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8004e7a:	79fb      	ldrb	r3, [r7, #7]
 8004e7c:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <wizchip_setnetmode+0x1e>
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e88:	e00e      	b.n	8004ea8 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7fe fb80 	bl	8003590 <WIZCHIP_READ>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	f7fe fbc1 	bl	8003628 <WIZCHIP_WRITE>
   return 0;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f7fe fb6b 	bl	8003590 <WIZCHIP_READ>
 8004eba:	4603      	mov	r3, r0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004ed2:	f7fe fba9 	bl	8003628 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	885b      	ldrh	r3, [r3, #2]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004ee6:	f7fe fb9f 	bl	8003628 <WIZCHIP_WRITE>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	885b      	ldrh	r3, [r3, #2]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004ef6:	f7fe fb97 	bl	8003628 <WIZCHIP_WRITE>
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8004f02:	b590      	push	{r4, r7, lr}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004f0a:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004f0e:	f7fe fb3f 	bl	8003590 <WIZCHIP_READ>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004f1a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004f1e:	f7fe fb37 	bl	8003590 <WIZCHIP_READ>
 8004f22:	4603      	mov	r3, r0
 8004f24:	021b      	lsls	r3, r3, #8
 8004f26:	b29c      	uxth	r4, r3
 8004f28:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004f2c:	f7fe fb30 	bl	8003590 <WIZCHIP_READ>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4423      	add	r3, r4
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	805a      	strh	r2, [r3, #2]
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd90      	pop	{r4, r7, pc}
	...

08004f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004f48:	f7fe fb10 	bl	800356c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f4c:	480c      	ldr	r0, [pc, #48]	@ (8004f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f4e:	490d      	ldr	r1, [pc, #52]	@ (8004f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f50:	4a0d      	ldr	r2, [pc, #52]	@ (8004f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f54:	e002      	b.n	8004f5c <LoopCopyDataInit>

08004f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f5a:	3304      	adds	r3, #4

08004f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f60:	d3f9      	bcc.n	8004f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f62:	4a0a      	ldr	r2, [pc, #40]	@ (8004f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004f64:	4c0a      	ldr	r4, [pc, #40]	@ (8004f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f68:	e001      	b.n	8004f6e <LoopFillZerobss>

08004f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f6c:	3204      	adds	r2, #4

08004f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f70:	d3fb      	bcc.n	8004f6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004f72:	f008 ff1f 	bl	800ddb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f76:	f7fc fdcf 	bl	8001b18 <main>
  bx  lr    
 8004f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f84:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004f88:	0800ef94 	.word	0x0800ef94
  ldr r2, =_sbss
 8004f8c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004f90:	20014b4c 	.word	0x20014b4c

08004f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f94:	e7fe      	b.n	8004f94 <ADC_IRQHandler>
	...

08004f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <HAL_Init+0x40>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <HAL_Init+0x40>)
 8004fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_Init+0x40>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <HAL_Init+0x40>)
 8004fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fb4:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <HAL_Init+0x40>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a07      	ldr	r2, [pc, #28]	@ (8004fd8 <HAL_Init+0x40>)
 8004fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc0:	2003      	movs	r0, #3
 8004fc2:	f000 f8fc 	bl	80051be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fc6:	200f      	movs	r0, #15
 8004fc8:	f7fe f9c8 	bl	800335c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fcc:	f7fe f808 	bl	8002fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023c00 	.word	0x40023c00

08004fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fe0:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_IncTick+0x20>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_IncTick+0x24>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4413      	add	r3, r2
 8004fec:	4a04      	ldr	r2, [pc, #16]	@ (8005000 <HAL_IncTick+0x24>)
 8004fee:	6013      	str	r3, [r2, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000058 	.word	0x20000058
 8005000:	200005d8 	.word	0x200005d8

08005004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  return uwTick;
 8005008:	4b03      	ldr	r3, [pc, #12]	@ (8005018 <HAL_GetTick+0x14>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	200005d8 	.word	0x200005d8

0800501c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005024:	f7ff ffee 	bl	8005004 <HAL_GetTick>
 8005028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005034:	d005      	beq.n	8005042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005036:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <HAL_Delay+0x44>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005042:	bf00      	nop
 8005044:	f7ff ffde 	bl	8005004 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	429a      	cmp	r2, r3
 8005052:	d8f7      	bhi.n	8005044 <HAL_Delay+0x28>
  {
  }
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000058 	.word	0x20000058

08005064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800508c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005096:	4a04      	ldr	r2, [pc, #16]	@ (80050a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	60d3      	str	r3, [r2, #12]
}
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050b0:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <__NVIC_GetPriorityGrouping+0x18>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 0307 	and.w	r3, r3, #7
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	db0b      	blt.n	80050f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	f003 021f 	and.w	r2, r3, #31
 80050e0:	4907      	ldr	r1, [pc, #28]	@ (8005100 <__NVIC_EnableIRQ+0x38>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2001      	movs	r0, #1
 80050ea:	fa00 f202 	lsl.w	r2, r0, r2
 80050ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000e100 	.word	0xe000e100

08005104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	2b00      	cmp	r3, #0
 8005116:	db0a      	blt.n	800512e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	490c      	ldr	r1, [pc, #48]	@ (8005150 <__NVIC_SetPriority+0x4c>)
 800511e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	440b      	add	r3, r1
 8005128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800512c:	e00a      	b.n	8005144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4908      	ldr	r1, [pc, #32]	@ (8005154 <__NVIC_SetPriority+0x50>)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	3b04      	subs	r3, #4
 800513c:	0112      	lsls	r2, r2, #4
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	440b      	add	r3, r1
 8005142:	761a      	strb	r2, [r3, #24]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000e100 	.word	0xe000e100
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005158:	b480      	push	{r7}
 800515a:	b089      	sub	sp, #36	@ 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	bf28      	it	cs
 8005176:	2304      	movcs	r3, #4
 8005178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3304      	adds	r3, #4
 800517e:	2b06      	cmp	r3, #6
 8005180:	d902      	bls.n	8005188 <NVIC_EncodePriority+0x30>
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3b03      	subs	r3, #3
 8005186:	e000      	b.n	800518a <NVIC_EncodePriority+0x32>
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800518c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43da      	mvns	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	401a      	ands	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	43d9      	mvns	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b0:	4313      	orrs	r3, r2
         );
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	@ 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff ff4c 	bl	8005064 <__NVIC_SetPriorityGrouping>
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051e6:	f7ff ff61 	bl	80050ac <__NVIC_GetPriorityGrouping>
 80051ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f7ff ffb1 	bl	8005158 <NVIC_EncodePriority>
 80051f6:	4602      	mov	r2, r0
 80051f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff80 	bl	8005104 <__NVIC_SetPriority>
}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff54 	bl	80050c8 <__NVIC_EnableIRQ>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005234:	f7ff fee6 	bl	8005004 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e099      	b.n	8005378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005264:	e00f      	b.n	8005286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005266:	f7ff fecd 	bl	8005004 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b05      	cmp	r3, #5
 8005272:	d908      	bls.n	8005286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2203      	movs	r2, #3
 800527e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e078      	b.n	8005378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e8      	bne.n	8005266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4b38      	ldr	r3, [pc, #224]	@ (8005380 <HAL_DMA_Init+0x158>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d107      	bne.n	80052f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e8:	4313      	orrs	r3, r2
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0307 	bic.w	r3, r3, #7
 8005306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	2b04      	cmp	r3, #4
 8005318:	d117      	bne.n	800534a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00e      	beq.n	800534a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f9e9 	bl	8005704 <DMA_CheckFifoParam>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2240      	movs	r2, #64	@ 0x40
 800533c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005346:	2301      	movs	r3, #1
 8005348:	e016      	b.n	8005378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9a0 	bl	8005698 <DMA_CalcBaseAndBitshift>
 8005358:	4603      	mov	r3, r0
 800535a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005360:	223f      	movs	r2, #63	@ 0x3f
 8005362:	409a      	lsls	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	f010803f 	.word	0xf010803f

08005384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005390:	4b8e      	ldr	r3, [pc, #568]	@ (80055cc <HAL_DMA_IRQHandler+0x248>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a8e      	ldr	r2, [pc, #568]	@ (80055d0 <HAL_DMA_IRQHandler+0x24c>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ae:	2208      	movs	r2, #8
 80053b0:	409a      	lsls	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01a      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053dc:	2208      	movs	r2, #8
 80053de:	409a      	lsls	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f4:	2201      	movs	r2, #1
 80053f6:	409a      	lsls	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d012      	beq.n	8005426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005412:	2201      	movs	r2, #1
 8005414:	409a      	lsls	r2, r3
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541e:	f043 0202 	orr.w	r2, r3, #2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800542a:	2204      	movs	r2, #4
 800542c:	409a      	lsls	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4013      	ands	r3, r2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d012      	beq.n	800545c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00b      	beq.n	800545c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	2204      	movs	r2, #4
 800544a:	409a      	lsls	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005454:	f043 0204 	orr.w	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	2210      	movs	r2, #16
 8005462:	409a      	lsls	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d043      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d03c      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800547e:	2210      	movs	r2, #16
 8005480:	409a      	lsls	r2, r3
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d018      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d108      	bne.n	80054b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d024      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
 80054b2:	e01f      	b.n	80054f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01b      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
 80054c4:	e016      	b.n	80054f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d107      	bne.n	80054e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0208 	bic.w	r2, r2, #8
 80054e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f8:	2220      	movs	r2, #32
 80054fa:	409a      	lsls	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 808f 	beq.w	8005624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8087 	beq.w	8005624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	2220      	movs	r2, #32
 800551c:	409a      	lsls	r2, r3
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b05      	cmp	r3, #5
 800552c:	d136      	bne.n	800559c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0216 	bic.w	r2, r2, #22
 800553c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800554c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <HAL_DMA_IRQHandler+0x1da>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0208 	bic.w	r2, r2, #8
 800556c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005572:	223f      	movs	r2, #63	@ 0x3f
 8005574:	409a      	lsls	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	d07e      	beq.n	8005690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
        }
        return;
 800559a:	e079      	b.n	8005690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d031      	beq.n	8005624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
 80055c8:	e02c      	b.n	8005624 <HAL_DMA_IRQHandler+0x2a0>
 80055ca:	bf00      	nop
 80055cc:	20000020 	.word	0x20000020
 80055d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d023      	beq.n	8005624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
 80055e4:	e01e      	b.n	8005624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10f      	bne.n	8005614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0210 	bic.w	r2, r2, #16
 8005602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	2b00      	cmp	r3, #0
 800562a:	d032      	beq.n	8005692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d022      	beq.n	800567e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2205      	movs	r2, #5
 800563c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	3301      	adds	r3, #1
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	429a      	cmp	r2, r3
 800565a:	d307      	bcc.n	800566c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f2      	bne.n	8005650 <HAL_DMA_IRQHandler+0x2cc>
 800566a:	e000      	b.n	800566e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800566c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
 800568e:	e000      	b.n	8005692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005690:	bf00      	nop
    }
  }
}
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	3b10      	subs	r3, #16
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <DMA_CalcBaseAndBitshift+0x64>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056b2:	4a13      	ldr	r2, [pc, #76]	@ (8005700 <DMA_CalcBaseAndBitshift+0x68>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d909      	bls.n	80056da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	1d1a      	adds	r2, r3, #4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80056d8:	e007      	b.n	80056ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	aaaaaaab 	.word	0xaaaaaaab
 8005700:	0800ef34 	.word	0x0800ef34

08005704 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11f      	bne.n	800575e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b03      	cmp	r3, #3
 8005722:	d856      	bhi.n	80057d2 <DMA_CheckFifoParam+0xce>
 8005724:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <DMA_CheckFifoParam+0x28>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	0800573d 	.word	0x0800573d
 8005730:	0800574f 	.word	0x0800574f
 8005734:	0800573d 	.word	0x0800573d
 8005738:	080057d3 	.word	0x080057d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d046      	beq.n	80057d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800574c:	e043      	b.n	80057d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005756:	d140      	bne.n	80057da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800575c:	e03d      	b.n	80057da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005766:	d121      	bne.n	80057ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d837      	bhi.n	80057de <DMA_CheckFifoParam+0xda>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <DMA_CheckFifoParam+0x70>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005785 	.word	0x08005785
 8005778:	0800578b 	.word	0x0800578b
 800577c:	08005785 	.word	0x08005785
 8005780:	0800579d 	.word	0x0800579d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e030      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d025      	beq.n	80057e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579a:	e022      	b.n	80057e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057a4:	d11f      	bne.n	80057e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057aa:	e01c      	b.n	80057e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d903      	bls.n	80057ba <DMA_CheckFifoParam+0xb6>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d003      	beq.n	80057c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057b8:	e018      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
      break;
 80057be:	e015      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00e      	beq.n	80057ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e00b      	b.n	80057ea <DMA_CheckFifoParam+0xe6>
      break;
 80057d2:	bf00      	nop
 80057d4:	e00a      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      break;
 80057d6:	bf00      	nop
 80057d8:	e008      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      break;
 80057da:	bf00      	nop
 80057dc:	e006      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      break;
 80057de:	bf00      	nop
 80057e0:	e004      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      break;
 80057e2:	bf00      	nop
 80057e4:	e002      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      break;   
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <DMA_CheckFifoParam+0xe8>
      break;
 80057ea:	bf00      	nop
    }
  } 
  
  return status; 
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop

080057fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	@ 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e165      	b.n	8005ae4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005818:	2201      	movs	r2, #1
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4013      	ands	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	429a      	cmp	r2, r3
 8005832:	f040 8154 	bne.w	8005ade <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 0303 	and.w	r3, r3, #3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d005      	beq.n	800584e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800584a:	2b02      	cmp	r3, #2
 800584c:	d130      	bne.n	80058b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	2203      	movs	r2, #3
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	43db      	mvns	r3, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4013      	ands	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005884:	2201      	movs	r2, #1
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 0201 	and.w	r2, r3, #1
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d017      	beq.n	80058ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	2203      	movs	r2, #3
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d123      	bne.n	8005940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	08da      	lsrs	r2, r3, #3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3208      	adds	r2, #8
 8005900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	220f      	movs	r2, #15
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	4313      	orrs	r3, r2
 8005930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	08da      	lsrs	r2, r3, #3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3208      	adds	r2, #8
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	2203      	movs	r2, #3
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0203 	and.w	r2, r3, #3
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80ae 	beq.w	8005ade <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	4b5d      	ldr	r3, [pc, #372]	@ (8005afc <HAL_GPIO_Init+0x300>)
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	4a5c      	ldr	r2, [pc, #368]	@ (8005afc <HAL_GPIO_Init+0x300>)
 800598c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005990:	6453      	str	r3, [r2, #68]	@ 0x44
 8005992:	4b5a      	ldr	r3, [pc, #360]	@ (8005afc <HAL_GPIO_Init+0x300>)
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800599e:	4a58      	ldr	r2, [pc, #352]	@ (8005b00 <HAL_GPIO_Init+0x304>)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	3302      	adds	r3, #2
 80059a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	220f      	movs	r2, #15
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005b04 <HAL_GPIO_Init+0x308>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d025      	beq.n	8005a16 <HAL_GPIO_Init+0x21a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005b08 <HAL_GPIO_Init+0x30c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01f      	beq.n	8005a12 <HAL_GPIO_Init+0x216>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a4d      	ldr	r2, [pc, #308]	@ (8005b0c <HAL_GPIO_Init+0x310>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d019      	beq.n	8005a0e <HAL_GPIO_Init+0x212>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005b10 <HAL_GPIO_Init+0x314>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_GPIO_Init+0x20e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005b14 <HAL_GPIO_Init+0x318>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00d      	beq.n	8005a06 <HAL_GPIO_Init+0x20a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005b18 <HAL_GPIO_Init+0x31c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <HAL_GPIO_Init+0x206>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a49      	ldr	r2, [pc, #292]	@ (8005b1c <HAL_GPIO_Init+0x320>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_GPIO_Init+0x202>
 80059fa:	2306      	movs	r3, #6
 80059fc:	e00c      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 80059fe:	2307      	movs	r3, #7
 8005a00:	e00a      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 8005a02:	2305      	movs	r3, #5
 8005a04:	e008      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 8005a06:	2304      	movs	r3, #4
 8005a08:	e006      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e004      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e002      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_GPIO_Init+0x21c>
 8005a16:	2300      	movs	r3, #0
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	f002 0203 	and.w	r2, r2, #3
 8005a1e:	0092      	lsls	r2, r2, #2
 8005a20:	4093      	lsls	r3, r2
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a28:	4935      	ldr	r1, [pc, #212]	@ (8005b00 <HAL_GPIO_Init+0x304>)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	089b      	lsrs	r3, r3, #2
 8005a2e:	3302      	adds	r3, #2
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a36:	4b3a      	ldr	r3, [pc, #232]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a5a:	4a31      	ldr	r2, [pc, #196]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a60:	4b2f      	ldr	r3, [pc, #188]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a84:	4a26      	ldr	r2, [pc, #152]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a8a:	4b25      	ldr	r3, [pc, #148]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005aae:	4a1c      	ldr	r2, [pc, #112]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ad8:	4a11      	ldr	r2, [pc, #68]	@ (8005b20 <HAL_GPIO_Init+0x324>)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	2b0f      	cmp	r3, #15
 8005ae8:	f67f ae96 	bls.w	8005818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	3724      	adds	r7, #36	@ 0x24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40013800 	.word	0x40013800
 8005b04:	40020000 	.word	0x40020000
 8005b08:	40020400 	.word	0x40020400
 8005b0c:	40020800 	.word	0x40020800
 8005b10:	40020c00 	.word	0x40020c00
 8005b14:	40021000 	.word	0x40021000
 8005b18:	40021400 	.word	0x40021400
 8005b1c:	40021800 	.word	0x40021800
 8005b20:	40013c00 	.word	0x40013c00

08005b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
 8005b30:	4613      	mov	r3, r2
 8005b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b34:	787b      	ldrb	r3, [r7, #1]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b3a:	887a      	ldrh	r2, [r7, #2]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b40:	e003      	b.n	8005b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b42:	887b      	ldrh	r3, [r7, #2]
 8005b44:	041a      	lsls	r2, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	619a      	str	r2, [r3, #24]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b68:	887a      	ldrh	r2, [r7, #2]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	041a      	lsls	r2, r3, #16
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	43d9      	mvns	r1, r3
 8005b74:	887b      	ldrh	r3, [r7, #2]
 8005b76:	400b      	ands	r3, r1
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	619a      	str	r2, [r3, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e12b      	b.n	8005df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fd fa3c 	bl	8003030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2224      	movs	r2, #36	@ 0x24
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f001 f8e2 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 8005bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4a81      	ldr	r2, [pc, #516]	@ (8005e00 <HAL_I2C_Init+0x274>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d807      	bhi.n	8005c10 <HAL_I2C_Init+0x84>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a80      	ldr	r2, [pc, #512]	@ (8005e04 <HAL_I2C_Init+0x278>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bf94      	ite	ls
 8005c08:	2301      	movls	r3, #1
 8005c0a:	2300      	movhi	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e006      	b.n	8005c1e <HAL_I2C_Init+0x92>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a7d      	ldr	r2, [pc, #500]	@ (8005e08 <HAL_I2C_Init+0x27c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bf94      	ite	ls
 8005c18:	2301      	movls	r3, #1
 8005c1a:	2300      	movhi	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e0e7      	b.n	8005df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4a78      	ldr	r2, [pc, #480]	@ (8005e0c <HAL_I2C_Init+0x280>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0c9b      	lsrs	r3, r3, #18
 8005c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4a6a      	ldr	r2, [pc, #424]	@ (8005e00 <HAL_I2C_Init+0x274>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d802      	bhi.n	8005c60 <HAL_I2C_Init+0xd4>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	e009      	b.n	8005c74 <HAL_I2C_Init+0xe8>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	4a69      	ldr	r2, [pc, #420]	@ (8005e10 <HAL_I2C_Init+0x284>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	099b      	lsrs	r3, r3, #6
 8005c72:	3301      	adds	r3, #1
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	495c      	ldr	r1, [pc, #368]	@ (8005e00 <HAL_I2C_Init+0x274>)
 8005c90:	428b      	cmp	r3, r1
 8005c92:	d819      	bhi.n	8005cc8 <HAL_I2C_Init+0x13c>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1e59      	subs	r1, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ca8:	400b      	ands	r3, r1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <HAL_I2C_Init+0x138>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1e59      	subs	r1, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc2:	e051      	b.n	8005d68 <HAL_I2C_Init+0x1dc>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	e04f      	b.n	8005d68 <HAL_I2C_Init+0x1dc>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d111      	bne.n	8005cf4 <HAL_I2C_Init+0x168>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	1e58      	subs	r0, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6859      	ldr	r1, [r3, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	440b      	add	r3, r1
 8005cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	e012      	b.n	8005d1a <HAL_I2C_Init+0x18e>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	1e58      	subs	r0, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	440b      	add	r3, r1
 8005d02:	0099      	lsls	r1, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_I2C_Init+0x196>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e022      	b.n	8005d68 <HAL_I2C_Init+0x1dc>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10e      	bne.n	8005d48 <HAL_I2C_Init+0x1bc>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1e58      	subs	r0, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6859      	ldr	r1, [r3, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	440b      	add	r3, r1
 8005d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d46:	e00f      	b.n	8005d68 <HAL_I2C_Init+0x1dc>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1e58      	subs	r0, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6859      	ldr	r1, [r3, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	0099      	lsls	r1, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	6809      	ldr	r1, [r1, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6911      	ldr	r1, [r2, #16]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68d2      	ldr	r2, [r2, #12]
 8005da2:	4311      	orrs	r1, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	430b      	orrs	r3, r1
 8005daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	000186a0 	.word	0x000186a0
 8005e04:	001e847f 	.word	0x001e847f
 8005e08:	003d08ff 	.word	0x003d08ff
 8005e0c:	431bde83 	.word	0x431bde83
 8005e10:	10624dd3 	.word	0x10624dd3

08005e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	817b      	strh	r3, [r7, #10]
 8005e26:	460b      	mov	r3, r1
 8005e28:	813b      	strh	r3, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e2e:	f7ff f8e9 	bl	8005004 <HAL_GetTick>
 8005e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	f040 80d9 	bne.w	8005ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2319      	movs	r3, #25
 8005e48:	2201      	movs	r2, #1
 8005e4a:	496d      	ldr	r1, [pc, #436]	@ (8006000 <HAL_I2C_Mem_Write+0x1ec>)
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fc8b 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e0cc      	b.n	8005ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_I2C_Mem_Write+0x56>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e0c5      	b.n	8005ff6 <HAL_I2C_Mem_Write+0x1e2>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d007      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2221      	movs	r2, #33	@ 0x21
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2240      	movs	r2, #64	@ 0x40
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4a4d      	ldr	r2, [pc, #308]	@ (8006004 <HAL_I2C_Mem_Write+0x1f0>)
 8005ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ed2:	88f8      	ldrh	r0, [r7, #6]
 8005ed4:	893a      	ldrh	r2, [r7, #8]
 8005ed6:	8979      	ldrh	r1, [r7, #10]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fac2 	bl	800646c <I2C_RequestMemoryWrite>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d052      	beq.n	8005f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e081      	b.n	8005ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fd50 	bl	800699c <I2C_WaitOnTXEFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d107      	bne.n	8005f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e06b      	b.n	8005ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d11b      	bne.n	8005f94 <HAL_I2C_Mem_Write+0x180>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d017      	beq.n	8005f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1aa      	bne.n	8005ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fd43 	bl	8006a2c <I2C_WaitOnBTFFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d107      	bne.n	8005fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e016      	b.n	8005ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	00100002 	.word	0x00100002
 8006004:	ffff0000 	.word	0xffff0000

08006008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	@ 0x30
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	817b      	strh	r3, [r7, #10]
 800601a:	460b      	mov	r3, r1
 800601c:	813b      	strh	r3, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006022:	f7fe ffef 	bl	8005004 <HAL_GetTick>
 8006026:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b20      	cmp	r3, #32
 8006032:	f040 8214 	bne.w	800645e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	2319      	movs	r3, #25
 800603c:	2201      	movs	r2, #1
 800603e:	497b      	ldr	r1, [pc, #492]	@ (800622c <HAL_I2C_Mem_Read+0x224>)
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 fb91 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
 800604e:	e207      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_I2C_Mem_Read+0x56>
 800605a:	2302      	movs	r3, #2
 800605c:	e200      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b01      	cmp	r3, #1
 8006072:	d007      	beq.n	8006084 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2222      	movs	r2, #34	@ 0x22
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2240      	movs	r2, #64	@ 0x40
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80060b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006230 <HAL_I2C_Mem_Read+0x228>)
 80060c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060c6:	88f8      	ldrh	r0, [r7, #6]
 80060c8:	893a      	ldrh	r2, [r7, #8]
 80060ca:	8979      	ldrh	r1, [r7, #10]
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	4603      	mov	r3, r0
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fa5e 	bl	8006598 <I2C_RequestMemoryRead>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e1bc      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d113      	bne.n	8006116 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ee:	2300      	movs	r3, #0
 80060f0:	623b      	str	r3, [r7, #32]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	623b      	str	r3, [r7, #32]
 8006102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e190      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611a:	2b01      	cmp	r3, #1
 800611c:	d11b      	bne.n	8006156 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800612c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e170      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800615a:	2b02      	cmp	r3, #2
 800615c:	d11b      	bne.n	8006196 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800616c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800617c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	e150      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061ac:	e144      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	f200 80f1 	bhi.w	800639a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d123      	bne.n	8006208 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fc79 	bl	8006abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e145      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006206:	e117      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620c:	2b02      	cmp	r3, #2
 800620e:	d14e      	bne.n	80062ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	2200      	movs	r2, #0
 8006218:	4906      	ldr	r1, [pc, #24]	@ (8006234 <HAL_I2C_Mem_Read+0x22c>)
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 faa4 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e11a      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
 800622a:	bf00      	nop
 800622c:	00100002 	.word	0x00100002
 8006230:	ffff0000 	.word	0xffff0000
 8006234:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062ac:	e0c4      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	2200      	movs	r2, #0
 80062b6:	496c      	ldr	r1, [pc, #432]	@ (8006468 <HAL_I2C_Mem_Read+0x460>)
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f000 fa55 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0cb      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006300:	b29b      	uxth	r3, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006310:	2200      	movs	r2, #0
 8006312:	4955      	ldr	r1, [pc, #340]	@ (8006468 <HAL_I2C_Mem_Read+0x460>)
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fa27 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e09d      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006398:	e04e      	b.n	8006438 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f000 fb8c 	bl	8006abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e058      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d124      	bne.n	8006438 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d107      	bne.n	8006406 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006404:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643c:	2b00      	cmp	r3, #0
 800643e:	f47f aeb6 	bne.w	80061ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	@ 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	00010004 	.word	0x00010004

0800646c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	4608      	mov	r0, r1
 8006476:	4611      	mov	r1, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4603      	mov	r3, r0
 800647c:	817b      	strh	r3, [r7, #10]
 800647e:	460b      	mov	r3, r1
 8006480:	813b      	strh	r3, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f960 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064bc:	d103      	bne.n	80064c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e05f      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	492d      	ldr	r1, [pc, #180]	@ (8006594 <I2C_RequestMemoryWrite+0x128>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f9bb 	bl	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e04c      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fa46 	bl	800699c <I2C_WaitOnTXEFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	2b04      	cmp	r3, #4
 800651c:	d107      	bne.n	800652e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800652c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e02b      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d105      	bne.n	8006544 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]
 8006542:	e021      	b.n	8006588 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006544:	893b      	ldrh	r3, [r7, #8]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	b29b      	uxth	r3, r3
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006554:	6a39      	ldr	r1, [r7, #32]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa20 	bl	800699c <I2C_WaitOnTXEFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	2b04      	cmp	r3, #4
 8006568:	d107      	bne.n	800657a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e005      	b.n	800658a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657e:	893b      	ldrh	r3, [r7, #8]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	00010002 	.word	0x00010002

08006598 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	4608      	mov	r0, r1
 80065a2:	4611      	mov	r1, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	4603      	mov	r3, r0
 80065a8:	817b      	strh	r3, [r7, #10]
 80065aa:	460b      	mov	r3, r1
 80065ac:	813b      	strh	r3, [r7, #8]
 80065ae:	4613      	mov	r3, r2
 80065b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	2200      	movs	r2, #0
 80065da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 f8c2 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f8:	d103      	bne.n	8006602 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006600:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e0aa      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006606:	897b      	ldrh	r3, [r7, #10]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006614:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	4952      	ldr	r1, [pc, #328]	@ (8006764 <I2C_RequestMemoryRead+0x1cc>)
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f91d 	bl	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e097      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006644:	6a39      	ldr	r1, [r7, #32]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f9a8 	bl	800699c <I2C_WaitOnTXEFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	2b04      	cmp	r3, #4
 8006658:	d107      	bne.n	800666a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006668:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e076      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d105      	bne.n	8006680 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006674:	893b      	ldrh	r3, [r7, #8]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	611a      	str	r2, [r3, #16]
 800667e:	e021      	b.n	80066c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006680:	893b      	ldrh	r3, [r7, #8]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b29b      	uxth	r3, r3
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800668e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006690:	6a39      	ldr	r1, [r7, #32]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f982 	bl	800699c <I2C_WaitOnTXEFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d107      	bne.n	80066b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e050      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066ba:	893b      	ldrh	r3, [r7, #8]
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	6a39      	ldr	r1, [r7, #32]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f967 	bl	800699c <I2C_WaitOnTXEFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d107      	bne.n	80066ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e035      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2200      	movs	r2, #0
 8006708:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f82b 	bl	8006768 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006726:	d103      	bne.n	8006730 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800672e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e013      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006734:	897b      	ldrh	r3, [r7, #10]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	b2da      	uxtb	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	4906      	ldr	r1, [pc, #24]	@ (8006764 <I2C_RequestMemoryRead+0x1cc>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f886 	bl	800685c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	00010002 	.word	0x00010002

08006768 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006778:	e048      	b.n	800680c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006780:	d044      	beq.n	800680c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fe fc3f 	bl	8005004 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d139      	bne.n	800680c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10d      	bne.n	80067be <I2C_WaitOnFlagUntilTimeout+0x56>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	43da      	mvns	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4013      	ands	r3, r2
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	e00c      	b.n	80067d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	43da      	mvns	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d116      	bne.n	800680c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e023      	b.n	8006854 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d10d      	bne.n	8006832 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	43da      	mvns	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	e00c      	b.n	800684c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	43da      	mvns	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	429a      	cmp	r2, r3
 8006850:	d093      	beq.n	800677a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800686a:	e071      	b.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800687a:	d123      	bne.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800688a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006894:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	f043 0204 	orr.w	r2, r3, #4
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e067      	b.n	8006994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ca:	d041      	beq.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068cc:	f7fe fb9a 	bl	8005004 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d302      	bcc.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d136      	bne.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10c      	bne.n	8006906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	43da      	mvns	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4013      	ands	r3, r2
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e00b      	b.n	800691e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	43da      	mvns	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	bf14      	ite	ne
 8006918:	2301      	movne	r3, #1
 800691a:	2300      	moveq	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e021      	b.n	8006994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10c      	bne.n	8006974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	43da      	mvns	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4013      	ands	r3, r2
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	e00b      	b.n	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	43da      	mvns	r2, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4013      	ands	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	f47f af6d 	bne.w	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069a8:	e034      	b.n	8006a14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f8e3 	bl	8006b76 <I2C_IsAcknowledgeFailed>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e034      	b.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069c0:	d028      	beq.n	8006a14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c2:	f7fe fb1f 	bl	8005004 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d302      	bcc.n	80069d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11d      	bne.n	8006a14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069e2:	2b80      	cmp	r3, #128	@ 0x80
 80069e4:	d016      	beq.n	8006a14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e007      	b.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1e:	2b80      	cmp	r3, #128	@ 0x80
 8006a20:	d1c3      	bne.n	80069aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a38:	e034      	b.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f89b 	bl	8006b76 <I2C_IsAcknowledgeFailed>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e034      	b.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a50:	d028      	beq.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a52:	f7fe fad7 	bl	8005004 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11d      	bne.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d016      	beq.n	8006aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e007      	b.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d1c3      	bne.n	8006a3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ac8:	e049      	b.n	8006b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d119      	bne.n	8006b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f06f 0210 	mvn.w	r2, #16
 8006ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e030      	b.n	8006b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0c:	f7fe fa7a 	bl	8005004 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d11d      	bne.n	8006b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b40      	cmp	r3, #64	@ 0x40
 8006b2e:	d016      	beq.n	8006b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	f043 0220 	orr.w	r2, r3, #32
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e007      	b.n	8006b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b68:	2b40      	cmp	r3, #64	@ 0x40
 8006b6a:	d1ae      	bne.n	8006aca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8c:	d11b      	bne.n	8006bc6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e000      	b.n	8006bc8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0cc      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be8:	4b68      	ldr	r3, [pc, #416]	@ (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d90c      	bls.n	8006c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf6:	4b65      	ldr	r3, [pc, #404]	@ (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b63      	ldr	r3, [pc, #396]	@ (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0b8      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d020      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c28:	4b59      	ldr	r3, [pc, #356]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a58      	ldr	r2, [pc, #352]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c40:	4b53      	ldr	r3, [pc, #332]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4a52      	ldr	r2, [pc, #328]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c4c:	4b50      	ldr	r3, [pc, #320]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	494d      	ldr	r1, [pc, #308]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d044      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c72:	4b47      	ldr	r3, [pc, #284]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d119      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e07f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d003      	beq.n	8006c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c92:	4b3f      	ldr	r3, [pc, #252]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e06f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e067      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cb2:	4b37      	ldr	r3, [pc, #220]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f023 0203 	bic.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	4934      	ldr	r1, [pc, #208]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cc4:	f7fe f99e 	bl	8005004 <HAL_GetTick>
 8006cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cca:	e00a      	b.n	8006ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ccc:	f7fe f99a 	bl	8005004 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e04f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f003 020c 	and.w	r2, r3, #12
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d1eb      	bne.n	8006ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf4:	4b25      	ldr	r3, [pc, #148]	@ (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d20c      	bcs.n	8006d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d02:	4b22      	ldr	r3, [pc, #136]	@ (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0a:	4b20      	ldr	r3, [pc, #128]	@ (8006d8c <HAL_RCC_ClockConfig+0x1b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d001      	beq.n	8006d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e032      	b.n	8006d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d28:	4b19      	ldr	r3, [pc, #100]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4916      	ldr	r1, [pc, #88]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d46:	4b12      	ldr	r3, [pc, #72]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	490e      	ldr	r1, [pc, #56]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d5a:	f000 f887 	bl	8006e6c <HAL_RCC_GetSysClockFreq>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	4b0b      	ldr	r3, [pc, #44]	@ (8006d90 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	091b      	lsrs	r3, r3, #4
 8006d66:	f003 030f 	and.w	r3, r3, #15
 8006d6a:	490a      	ldr	r1, [pc, #40]	@ (8006d94 <HAL_RCC_ClockConfig+0x1c0>)
 8006d6c:	5ccb      	ldrb	r3, [r1, r3]
 8006d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d72:	4a09      	ldr	r2, [pc, #36]	@ (8006d98 <HAL_RCC_ClockConfig+0x1c4>)
 8006d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d76:	4b09      	ldr	r3, [pc, #36]	@ (8006d9c <HAL_RCC_ClockConfig+0x1c8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fc faee 	bl	800335c <HAL_InitTick>

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40023c00 	.word	0x40023c00
 8006d90:	40023800 	.word	0x40023800
 8006d94:	0800ef1c 	.word	0x0800ef1c
 8006d98:	20000020 	.word	0x20000020
 8006d9c:	20000054 	.word	0x20000054

08006da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da4:	4b03      	ldr	r3, [pc, #12]	@ (8006db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000020 	.word	0x20000020

08006db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006dbc:	f7ff fff0 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	0a9b      	lsrs	r3, r3, #10
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	4903      	ldr	r1, [pc, #12]	@ (8006ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dce:	5ccb      	ldrb	r3, [r1, r3]
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	0800ef2c 	.word	0x0800ef2c

08006de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006de4:	f7ff ffdc 	bl	8006da0 <HAL_RCC_GetHCLKFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b05      	ldr	r3, [pc, #20]	@ (8006e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	0b5b      	lsrs	r3, r3, #13
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	4903      	ldr	r1, [pc, #12]	@ (8006e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40023800 	.word	0x40023800
 8006e04:	0800ef2c 	.word	0x0800ef2c

08006e08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	220f      	movs	r2, #15
 8006e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e18:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <HAL_RCC_GetClockConfig+0x5c>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f003 0203 	and.w	r2, r3, #3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e24:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <HAL_RCC_GetClockConfig+0x5c>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e30:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <HAL_RCC_GetClockConfig+0x5c>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e3c:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <HAL_RCC_GetClockConfig+0x5c>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e4a:	4b07      	ldr	r3, [pc, #28]	@ (8006e68 <HAL_RCC_GetClockConfig+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40023c00 	.word	0x40023c00

08006e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e70:	b0ae      	sub	sp, #184	@ 0xb8
 8006e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e92:	4bcb      	ldr	r3, [pc, #812]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	2b0c      	cmp	r3, #12
 8006e9c:	f200 8204 	bhi.w	80072a8 <HAL_RCC_GetSysClockFreq+0x43c>
 8006ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	080072a9 	.word	0x080072a9
 8006eb0:	080072a9 	.word	0x080072a9
 8006eb4:	080072a9 	.word	0x080072a9
 8006eb8:	08006ee5 	.word	0x08006ee5
 8006ebc:	080072a9 	.word	0x080072a9
 8006ec0:	080072a9 	.word	0x080072a9
 8006ec4:	080072a9 	.word	0x080072a9
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	080072a9 	.word	0x080072a9
 8006ed0:	080072a9 	.word	0x080072a9
 8006ed4:	080072a9 	.word	0x080072a9
 8006ed8:	080070dd 	.word	0x080070dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006edc:	4bb9      	ldr	r3, [pc, #740]	@ (80071c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ede:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8006ee2:	e1e5      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ee4:	4bb7      	ldr	r3, [pc, #732]	@ (80071c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006eea:	e1e1      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006eec:	4bb4      	ldr	r3, [pc, #720]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ef8:	4bb1      	ldr	r3, [pc, #708]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d071      	beq.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f04:	4bae      	ldr	r3, [pc, #696]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	099b      	lsrs	r3, r3, #6
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	f04f 0000 	mov.w	r0, #0
 8006f32:	f04f 0100 	mov.w	r1, #0
 8006f36:	0159      	lsls	r1, r3, #5
 8006f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f3c:	0150      	lsls	r0, r2, #5
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4621      	mov	r1, r4
 8006f44:	1a51      	subs	r1, r2, r1
 8006f46:	6439      	str	r1, [r7, #64]	@ 0x40
 8006f48:	4629      	mov	r1, r5
 8006f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8006f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	018b      	lsls	r3, r1, #6
 8006f60:	4641      	mov	r1, r8
 8006f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f66:	4641      	mov	r1, r8
 8006f68:	018a      	lsls	r2, r1, #6
 8006f6a:	4641      	mov	r1, r8
 8006f6c:	1a51      	subs	r1, r2, r1
 8006f6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f70:	4649      	mov	r1, r9
 8006f72:	eb63 0301 	sbc.w	r3, r3, r1
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006f84:	4649      	mov	r1, r9
 8006f86:	00cb      	lsls	r3, r1, #3
 8006f88:	4641      	mov	r1, r8
 8006f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f8e:	4641      	mov	r1, r8
 8006f90:	00ca      	lsls	r2, r1, #3
 8006f92:	4610      	mov	r0, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	4622      	mov	r2, r4
 8006f9a:	189b      	adds	r3, r3, r2
 8006f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	460a      	mov	r2, r1
 8006fa2:	eb42 0303 	adc.w	r3, r2, r3
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	028b      	lsls	r3, r1, #10
 8006fb8:	4621      	mov	r1, r4
 8006fba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	028a      	lsls	r2, r1, #10
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006fd8:	f7f9 fda0 	bl	8000b1c <__aeabi_uldivmod>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fe6:	e067      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fe8:	4b75      	ldr	r3, [pc, #468]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	099b      	lsrs	r3, r3, #6
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ff4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007002:	2300      	movs	r3, #0
 8007004:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007006:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f04f 0000 	mov.w	r0, #0
 8007012:	f04f 0100 	mov.w	r1, #0
 8007016:	0159      	lsls	r1, r3, #5
 8007018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800701c:	0150      	lsls	r0, r2, #5
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4621      	mov	r1, r4
 8007024:	1a51      	subs	r1, r2, r1
 8007026:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007028:	4629      	mov	r1, r5
 800702a:	eb63 0301 	sbc.w	r3, r3, r1
 800702e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800703c:	4649      	mov	r1, r9
 800703e:	018b      	lsls	r3, r1, #6
 8007040:	4641      	mov	r1, r8
 8007042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007046:	4641      	mov	r1, r8
 8007048:	018a      	lsls	r2, r1, #6
 800704a:	4641      	mov	r1, r8
 800704c:	ebb2 0a01 	subs.w	sl, r2, r1
 8007050:	4649      	mov	r1, r9
 8007052:	eb63 0b01 	sbc.w	fp, r3, r1
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007062:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800706a:	4692      	mov	sl, r2
 800706c:	469b      	mov	fp, r3
 800706e:	4623      	mov	r3, r4
 8007070:	eb1a 0303 	adds.w	r3, sl, r3
 8007074:	623b      	str	r3, [r7, #32]
 8007076:	462b      	mov	r3, r5
 8007078:	eb4b 0303 	adc.w	r3, fp, r3
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800708a:	4629      	mov	r1, r5
 800708c:	028b      	lsls	r3, r1, #10
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007094:	4621      	mov	r1, r4
 8007096:	028a      	lsls	r2, r1, #10
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070a0:	2200      	movs	r2, #0
 80070a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80070a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80070a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80070aa:	f7f9 fd37 	bl	8000b1c <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4613      	mov	r3, r2
 80070b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070b8:	4b41      	ldr	r3, [pc, #260]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	0c1b      	lsrs	r3, r3, #16
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	3301      	adds	r3, #1
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80070ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80070da:	e0e9      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070dc:	4b38      	ldr	r3, [pc, #224]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070e8:	4b35      	ldr	r3, [pc, #212]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d069      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f4:	4b32      	ldr	r3, [pc, #200]	@ (80071c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	099b      	lsrs	r3, r3, #6
 80070fa:	2200      	movs	r2, #0
 80070fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	663b      	str	r3, [r7, #96]	@ 0x60
 8007108:	2300      	movs	r3, #0
 800710a:	667b      	str	r3, [r7, #100]	@ 0x64
 800710c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007110:	4622      	mov	r2, r4
 8007112:	462b      	mov	r3, r5
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f04f 0100 	mov.w	r1, #0
 800711c:	0159      	lsls	r1, r3, #5
 800711e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007122:	0150      	lsls	r0, r2, #5
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4621      	mov	r1, r4
 800712a:	1a51      	subs	r1, r2, r1
 800712c:	61b9      	str	r1, [r7, #24]
 800712e:	4629      	mov	r1, r5
 8007130:	eb63 0301 	sbc.w	r3, r3, r1
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007142:	4659      	mov	r1, fp
 8007144:	018b      	lsls	r3, r1, #6
 8007146:	4651      	mov	r1, sl
 8007148:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800714c:	4651      	mov	r1, sl
 800714e:	018a      	lsls	r2, r1, #6
 8007150:	4651      	mov	r1, sl
 8007152:	ebb2 0801 	subs.w	r8, r2, r1
 8007156:	4659      	mov	r1, fp
 8007158:	eb63 0901 	sbc.w	r9, r3, r1
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007168:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800716c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007170:	4690      	mov	r8, r2
 8007172:	4699      	mov	r9, r3
 8007174:	4623      	mov	r3, r4
 8007176:	eb18 0303 	adds.w	r3, r8, r3
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	462b      	mov	r3, r5
 800717e:	eb49 0303 	adc.w	r3, r9, r3
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007190:	4629      	mov	r1, r5
 8007192:	028b      	lsls	r3, r1, #10
 8007194:	4621      	mov	r1, r4
 8007196:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800719a:	4621      	mov	r1, r4
 800719c:	028a      	lsls	r2, r1, #10
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071a6:	2200      	movs	r2, #0
 80071a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071aa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80071ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071b0:	f7f9 fcb4 	bl	8000b1c <__aeabi_uldivmod>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4613      	mov	r3, r2
 80071ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071be:	e063      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x41c>
 80071c0:	40023800 	.word	0x40023800
 80071c4:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071c8:	4b3d      	ldr	r3, [pc, #244]	@ (80072c0 <HAL_RCC_GetSysClockFreq+0x454>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	099b      	lsrs	r3, r3, #6
 80071ce:	2200      	movs	r2, #0
 80071d0:	4618      	mov	r0, r3
 80071d2:	4611      	mov	r1, r2
 80071d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80071da:	2300      	movs	r3, #0
 80071dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80071de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80071e2:	4642      	mov	r2, r8
 80071e4:	464b      	mov	r3, r9
 80071e6:	f04f 0000 	mov.w	r0, #0
 80071ea:	f04f 0100 	mov.w	r1, #0
 80071ee:	0159      	lsls	r1, r3, #5
 80071f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071f4:	0150      	lsls	r0, r2, #5
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4641      	mov	r1, r8
 80071fc:	1a51      	subs	r1, r2, r1
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	4649      	mov	r1, r9
 8007202:	eb63 0301 	sbc.w	r3, r3, r1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007214:	4659      	mov	r1, fp
 8007216:	018b      	lsls	r3, r1, #6
 8007218:	4651      	mov	r1, sl
 800721a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800721e:	4651      	mov	r1, sl
 8007220:	018a      	lsls	r2, r1, #6
 8007222:	4651      	mov	r1, sl
 8007224:	1a54      	subs	r4, r2, r1
 8007226:	4659      	mov	r1, fp
 8007228:	eb63 0501 	sbc.w	r5, r3, r1
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	00eb      	lsls	r3, r5, #3
 8007236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800723a:	00e2      	lsls	r2, r4, #3
 800723c:	4614      	mov	r4, r2
 800723e:	461d      	mov	r5, r3
 8007240:	4643      	mov	r3, r8
 8007242:	18e3      	adds	r3, r4, r3
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	464b      	mov	r3, r9
 8007248:	eb45 0303 	adc.w	r3, r5, r3
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800725a:	4629      	mov	r1, r5
 800725c:	028b      	lsls	r3, r1, #10
 800725e:	4621      	mov	r1, r4
 8007260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007264:	4621      	mov	r1, r4
 8007266:	028a      	lsls	r2, r1, #10
 8007268:	4610      	mov	r0, r2
 800726a:	4619      	mov	r1, r3
 800726c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007270:	2200      	movs	r2, #0
 8007272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007274:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007276:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800727a:	f7f9 fc4f 	bl	8000b1c <__aeabi_uldivmod>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	4613      	mov	r3, r2
 8007284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007288:	4b0d      	ldr	r3, [pc, #52]	@ (80072c0 <HAL_RCC_GetSysClockFreq+0x454>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0f1b      	lsrs	r3, r3, #28
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8007296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800729a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072a6:	e003      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a8:	4b06      	ldr	r3, [pc, #24]	@ (80072c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80072aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80072ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	37b8      	adds	r7, #184	@ 0xb8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800
 80072c4:	00f42400 	.word	0x00f42400

080072c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e28d      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 8083 	beq.w	80073ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80072e8:	4b94      	ldr	r3, [pc, #592]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 030c 	and.w	r3, r3, #12
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d019      	beq.n	8007328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80072f4:	4b91      	ldr	r3, [pc, #580]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d106      	bne.n	800730e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007300:	4b8e      	ldr	r3, [pc, #568]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800730c:	d00c      	beq.n	8007328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800730e:	4b8b      	ldr	r3, [pc, #556]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007316:	2b0c      	cmp	r3, #12
 8007318:	d112      	bne.n	8007340 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800731a:	4b88      	ldr	r3, [pc, #544]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007322:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007326:	d10b      	bne.n	8007340 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007328:	4b84      	ldr	r3, [pc, #528]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05b      	beq.n	80073ec <HAL_RCC_OscConfig+0x124>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d157      	bne.n	80073ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e25a      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007348:	d106      	bne.n	8007358 <HAL_RCC_OscConfig+0x90>
 800734a:	4b7c      	ldr	r3, [pc, #496]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a7b      	ldr	r2, [pc, #492]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e01d      	b.n	8007394 <HAL_RCC_OscConfig+0xcc>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007360:	d10c      	bne.n	800737c <HAL_RCC_OscConfig+0xb4>
 8007362:	4b76      	ldr	r3, [pc, #472]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a75      	ldr	r2, [pc, #468]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	4b73      	ldr	r3, [pc, #460]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a72      	ldr	r2, [pc, #456]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	e00b      	b.n	8007394 <HAL_RCC_OscConfig+0xcc>
 800737c:	4b6f      	ldr	r3, [pc, #444]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a6e      	ldr	r2, [pc, #440]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4b6c      	ldr	r3, [pc, #432]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a6b      	ldr	r2, [pc, #428]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800738e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d013      	beq.n	80073c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739c:	f7fd fe32 	bl	8005004 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a4:	f7fd fe2e 	bl	8005004 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b64      	cmp	r3, #100	@ 0x64
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e21f      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b6:	4b61      	ldr	r3, [pc, #388]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0f0      	beq.n	80073a4 <HAL_RCC_OscConfig+0xdc>
 80073c2:	e014      	b.n	80073ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c4:	f7fd fe1e 	bl	8005004 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073cc:	f7fd fe1a 	bl	8005004 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b64      	cmp	r3, #100	@ 0x64
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e20b      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073de:	4b57      	ldr	r3, [pc, #348]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0x104>
 80073ea:	e000      	b.n	80073ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d06f      	beq.n	80074da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80073fa:	4b50      	ldr	r3, [pc, #320]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 030c 	and.w	r3, r3, #12
 8007402:	2b00      	cmp	r3, #0
 8007404:	d017      	beq.n	8007436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007406:	4b4d      	ldr	r3, [pc, #308]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800740e:	2b08      	cmp	r3, #8
 8007410:	d105      	bne.n	800741e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007412:	4b4a      	ldr	r3, [pc, #296]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00b      	beq.n	8007436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800741e:	4b47      	ldr	r3, [pc, #284]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007426:	2b0c      	cmp	r3, #12
 8007428:	d11c      	bne.n	8007464 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800742a:	4b44      	ldr	r3, [pc, #272]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d116      	bne.n	8007464 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007436:	4b41      	ldr	r3, [pc, #260]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d005      	beq.n	800744e <HAL_RCC_OscConfig+0x186>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b01      	cmp	r3, #1
 8007448:	d001      	beq.n	800744e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e1d3      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800744e:	4b3b      	ldr	r3, [pc, #236]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4937      	ldr	r1, [pc, #220]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800745e:	4313      	orrs	r3, r2
 8007460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007462:	e03a      	b.n	80074da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d020      	beq.n	80074ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800746c:	4b34      	ldr	r3, [pc, #208]	@ (8007540 <HAL_RCC_OscConfig+0x278>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007472:	f7fd fdc7 	bl	8005004 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800747a:	f7fd fdc3 	bl	8005004 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e1b4      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800748c:	4b2b      	ldr	r3, [pc, #172]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007498:	4b28      	ldr	r3, [pc, #160]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	4925      	ldr	r1, [pc, #148]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	600b      	str	r3, [r1, #0]
 80074ac:	e015      	b.n	80074da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074ae:	4b24      	ldr	r3, [pc, #144]	@ (8007540 <HAL_RCC_OscConfig+0x278>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fd fda6 	bl	8005004 <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074bc:	f7fd fda2 	bl	8005004 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e193      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ce:	4b1b      	ldr	r3, [pc, #108]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d036      	beq.n	8007554 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ee:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <HAL_RCC_OscConfig+0x27c>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f4:	f7fd fd86 	bl	8005004 <HAL_GetTick>
 80074f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074fa:	e008      	b.n	800750e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074fc:	f7fd fd82 	bl	8005004 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d901      	bls.n	800750e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e173      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800750e:	4b0b      	ldr	r3, [pc, #44]	@ (800753c <HAL_RCC_OscConfig+0x274>)
 8007510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0f0      	beq.n	80074fc <HAL_RCC_OscConfig+0x234>
 800751a:	e01b      	b.n	8007554 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800751c:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <HAL_RCC_OscConfig+0x27c>)
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007522:	f7fd fd6f 	bl	8005004 <HAL_GetTick>
 8007526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007528:	e00e      	b.n	8007548 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800752a:	f7fd fd6b 	bl	8005004 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d907      	bls.n	8007548 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e15c      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
 800753c:	40023800 	.word	0x40023800
 8007540:	42470000 	.word	0x42470000
 8007544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007548:	4b8a      	ldr	r3, [pc, #552]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800754a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1ea      	bne.n	800752a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8097 	beq.w	8007690 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007566:	4b83      	ldr	r3, [pc, #524]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10f      	bne.n	8007592 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007572:	2300      	movs	r3, #0
 8007574:	60bb      	str	r3, [r7, #8]
 8007576:	4b7f      	ldr	r3, [pc, #508]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	4a7e      	ldr	r2, [pc, #504]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800757c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007580:	6413      	str	r3, [r2, #64]	@ 0x40
 8007582:	4b7c      	ldr	r3, [pc, #496]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800758a:	60bb      	str	r3, [r7, #8]
 800758c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007592:	4b79      	ldr	r3, [pc, #484]	@ (8007778 <HAL_RCC_OscConfig+0x4b0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	d118      	bne.n	80075d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800759e:	4b76      	ldr	r3, [pc, #472]	@ (8007778 <HAL_RCC_OscConfig+0x4b0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a75      	ldr	r2, [pc, #468]	@ (8007778 <HAL_RCC_OscConfig+0x4b0>)
 80075a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075aa:	f7fd fd2b 	bl	8005004 <HAL_GetTick>
 80075ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075b2:	f7fd fd27 	bl	8005004 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e118      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007778 <HAL_RCC_OscConfig+0x4b0>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0f0      	beq.n	80075b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d106      	bne.n	80075e6 <HAL_RCC_OscConfig+0x31e>
 80075d8:	4b66      	ldr	r3, [pc, #408]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075dc:	4a65      	ldr	r2, [pc, #404]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80075e4:	e01c      	b.n	8007620 <HAL_RCC_OscConfig+0x358>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b05      	cmp	r3, #5
 80075ec:	d10c      	bne.n	8007608 <HAL_RCC_OscConfig+0x340>
 80075ee:	4b61      	ldr	r3, [pc, #388]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 80075f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f2:	4a60      	ldr	r2, [pc, #384]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 80075f4:	f043 0304 	orr.w	r3, r3, #4
 80075f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075fa:	4b5e      	ldr	r3, [pc, #376]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 80075fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fe:	4a5d      	ldr	r2, [pc, #372]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	6713      	str	r3, [r2, #112]	@ 0x70
 8007606:	e00b      	b.n	8007620 <HAL_RCC_OscConfig+0x358>
 8007608:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760c:	4a59      	ldr	r2, [pc, #356]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	6713      	str	r3, [r2, #112]	@ 0x70
 8007614:	4b57      	ldr	r3, [pc, #348]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007618:	4a56      	ldr	r2, [pc, #344]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800761a:	f023 0304 	bic.w	r3, r3, #4
 800761e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d015      	beq.n	8007654 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007628:	f7fd fcec 	bl	8005004 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800762e:	e00a      	b.n	8007646 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007630:	f7fd fce8 	bl	8005004 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e0d7      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007646:	4b4b      	ldr	r3, [pc, #300]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0ee      	beq.n	8007630 <HAL_RCC_OscConfig+0x368>
 8007652:	e014      	b.n	800767e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007654:	f7fd fcd6 	bl	8005004 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800765a:	e00a      	b.n	8007672 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800765c:	f7fd fcd2 	bl	8005004 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766a:	4293      	cmp	r3, r2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e0c1      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007672:	4b40      	ldr	r3, [pc, #256]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1ee      	bne.n	800765c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d105      	bne.n	8007690 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007684:	4b3b      	ldr	r3, [pc, #236]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	4a3a      	ldr	r2, [pc, #232]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800768a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800768e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80ad 	beq.w	80077f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800769a:	4b36      	ldr	r3, [pc, #216]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 030c 	and.w	r3, r3, #12
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d060      	beq.n	8007768 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d145      	bne.n	800773a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ae:	4b33      	ldr	r3, [pc, #204]	@ (800777c <HAL_RCC_OscConfig+0x4b4>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b4:	f7fd fca6 	bl	8005004 <HAL_GetTick>
 80076b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ba:	e008      	b.n	80076ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076bc:	f7fd fca2 	bl	8005004 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e093      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ce:	4b29      	ldr	r3, [pc, #164]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f0      	bne.n	80076bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69da      	ldr	r2, [r3, #28]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	019b      	lsls	r3, r3, #6
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f0:	085b      	lsrs	r3, r3, #1
 80076f2:	3b01      	subs	r3, #1
 80076f4:	041b      	lsls	r3, r3, #16
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	061b      	lsls	r3, r3, #24
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007704:	071b      	lsls	r3, r3, #28
 8007706:	491b      	ldr	r1, [pc, #108]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 8007708:	4313      	orrs	r3, r2
 800770a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800770c:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <HAL_RCC_OscConfig+0x4b4>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007712:	f7fd fc77 	bl	8005004 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007718:	e008      	b.n	800772c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800771a:	f7fd fc73 	bl	8005004 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d901      	bls.n	800772c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e064      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772c:	4b11      	ldr	r3, [pc, #68]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0f0      	beq.n	800771a <HAL_RCC_OscConfig+0x452>
 8007738:	e05c      	b.n	80077f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800773a:	4b10      	ldr	r3, [pc, #64]	@ (800777c <HAL_RCC_OscConfig+0x4b4>)
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7fd fc60 	bl	8005004 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007746:	e008      	b.n	800775a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007748:	f7fd fc5c 	bl	8005004 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d901      	bls.n	800775a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e04d      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800775a:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <HAL_RCC_OscConfig+0x4ac>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f0      	bne.n	8007748 <HAL_RCC_OscConfig+0x480>
 8007766:	e045      	b.n	80077f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d107      	bne.n	8007780 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e040      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
 8007774:	40023800 	.word	0x40023800
 8007778:	40007000 	.word	0x40007000
 800777c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007780:	4b1f      	ldr	r3, [pc, #124]	@ (8007800 <HAL_RCC_OscConfig+0x538>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d030      	beq.n	80077f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d129      	bne.n	80077f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d122      	bne.n	80077f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80077b0:	4013      	ands	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80077b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d119      	bne.n	80077f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	085b      	lsrs	r3, r3, #1
 80077c8:	3b01      	subs	r3, #1
 80077ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d10f      	bne.n	80077f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077dc:	429a      	cmp	r2, r3
 80077de:	d107      	bne.n	80077f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d001      	beq.n	80077f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	40023800 	.word	0x40023800

08007804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e07b      	b.n	800790e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d108      	bne.n	8007830 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007826:	d009      	beq.n	800783c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	61da      	str	r2, [r3, #28]
 800782e:	e005      	b.n	800783c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fb fc98 	bl	800318c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007872:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c0:	ea42 0103 	orr.w	r1, r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	0c1b      	lsrs	r3, r3, #16
 80078da:	f003 0104 	and.w	r1, r3, #4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e2:	f003 0210 	and.w	r2, r3, #16
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69da      	ldr	r2, [r3, #28]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b08c      	sub	sp, #48	@ 0x30
 800791a:	af00      	add	r7, sp, #0
 800791c:	60f8      	str	r0, [r7, #12]
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007924:	2301      	movs	r3, #1
 8007926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_SPI_TransmitReceive+0x26>
 8007938:	2302      	movs	r3, #2
 800793a:	e198      	b.n	8007c6e <HAL_SPI_TransmitReceive+0x358>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007944:	f7fd fb5e 	bl	8005004 <HAL_GetTick>
 8007948:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007950:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800795a:	887b      	ldrh	r3, [r7, #2]
 800795c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800795e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007962:	2b01      	cmp	r3, #1
 8007964:	d00f      	beq.n	8007986 <HAL_SPI_TransmitReceive+0x70>
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800796c:	d107      	bne.n	800797e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <HAL_SPI_TransmitReceive+0x68>
 8007976:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800797a:	2b04      	cmp	r3, #4
 800797c:	d003      	beq.n	8007986 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800797e:	2302      	movs	r3, #2
 8007980:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007984:	e16d      	b.n	8007c62 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_SPI_TransmitReceive+0x82>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <HAL_SPI_TransmitReceive+0x82>
 8007992:	887b      	ldrh	r3, [r7, #2]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d103      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800799e:	e160      	b.n	8007c62 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d003      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2205      	movs	r2, #5
 80079b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	887a      	ldrh	r2, [r7, #2]
 80079c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	887a      	ldrh	r2, [r7, #2]
 80079ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	887a      	ldrh	r2, [r7, #2]
 80079d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	887a      	ldrh	r2, [r7, #2]
 80079dc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f4:	2b40      	cmp	r3, #64	@ 0x40
 80079f6:	d007      	beq.n	8007a08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a10:	d17c      	bne.n	8007b0c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x10a>
 8007a1a:	8b7b      	ldrh	r3, [r7, #26]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d16a      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a24:	881a      	ldrh	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a30:	1c9a      	adds	r2, r3, #2
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a44:	e057      	b.n	8007af6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d11b      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x176>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d016      	beq.n	8007a8c <HAL_SPI_TransmitReceive+0x176>
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d113      	bne.n	8007a8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	881a      	ldrh	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d119      	bne.n	8007ace <HAL_SPI_TransmitReceive+0x1b8>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d014      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab6:	1c9a      	adds	r2, r3, #2
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aca:	2301      	movs	r3, #1
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ace:	f7fd fa99 	bl	8005004 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d80b      	bhi.n	8007af6 <HAL_SPI_TransmitReceive+0x1e0>
 8007ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ae4:	d007      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007af4:	e0b5      	b.n	8007c62 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1a2      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x130>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d19d      	bne.n	8007a46 <HAL_SPI_TransmitReceive+0x130>
 8007b0a:	e080      	b.n	8007c0e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_SPI_TransmitReceive+0x204>
 8007b14:	8b7b      	ldrh	r3, [r7, #26]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d16f      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	330c      	adds	r3, #12
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b40:	e05b      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d11c      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x274>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <HAL_SPI_TransmitReceive+0x274>
 8007b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d114      	bne.n	8007b8a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d119      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x2b6>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d014      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bcc:	f7fd fa1a 	bl	8005004 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d803      	bhi.n	8007be4 <HAL_SPI_TransmitReceive+0x2ce>
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be2:	d102      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x2d4>
 8007be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d107      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007bf8:	e033      	b.n	8007c62 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d19e      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x22c>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d199      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f8b8 	bl	8007d88 <SPI_EndRxTxTransaction>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d006      	beq.n	8007c2c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007c2a:	e01a      	b.n	8007c62 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10a      	bne.n	8007c4a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c58:	e003      	b.n	8007c62 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3730      	adds	r7, #48	@ 0x30
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c88:	f7fd f9bc 	bl	8005004 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4413      	add	r3, r2
 8007c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c98:	f7fd f9b4 	bl	8005004 <HAL_GetTick>
 8007c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c9e:	4b39      	ldr	r3, [pc, #228]	@ (8007d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	015b      	lsls	r3, r3, #5
 8007ca4:	0d1b      	lsrs	r3, r3, #20
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	fb02 f303 	mul.w	r3, r2, r3
 8007cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cae:	e054      	b.n	8007d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cb6:	d050      	beq.n	8007d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cb8:	f7fd f9a4 	bl	8005004 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d902      	bls.n	8007cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d13d      	bne.n	8007d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ce6:	d111      	bne.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf0:	d004      	beq.n	8007cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cfa:	d107      	bne.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d14:	d10f      	bne.n	8007d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e017      	b.n	8007d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689a      	ldr	r2, [r3, #8]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4013      	ands	r3, r2
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	bf0c      	ite	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	2300      	movne	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d19b      	bne.n	8007cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3720      	adds	r7, #32
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000020 	.word	0x20000020

08007d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2102      	movs	r1, #2
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff ff6a 	bl	8007c78 <SPI_WaitFlagStateUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dae:	f043 0220 	orr.w	r2, r3, #32
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e032      	b.n	8007e20 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007dba:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <SPI_EndRxTxTransaction+0xa0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8007e2c <SPI_EndRxTxTransaction+0xa4>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	0d5b      	lsrs	r3, r3, #21
 8007dc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
 8007dce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dd8:	d112      	bne.n	8007e00 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	2180      	movs	r1, #128	@ 0x80
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f7ff ff47 	bl	8007c78 <SPI_WaitFlagStateUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d016      	beq.n	8007e1e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df4:	f043 0220 	orr.w	r2, r3, #32
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e00f      	b.n	8007e20 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e16:	2b80      	cmp	r3, #128	@ 0x80
 8007e18:	d0f2      	beq.n	8007e00 <SPI_EndRxTxTransaction+0x78>
 8007e1a:	e000      	b.n	8007e1e <SPI_EndRxTxTransaction+0x96>
        break;
 8007e1c:	bf00      	nop
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000020 	.word	0x20000020
 8007e2c:	165e9f81 	.word	0x165e9f81

08007e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e041      	b.n	8007ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7fb f9e0 	bl	800321c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	f000 fa1e 	bl	80082b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d001      	beq.n	8007ee8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e046      	b.n	8007f76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <HAL_TIM_Base_Start+0xb4>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d022      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d01d      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1f      	ldr	r2, [pc, #124]	@ (8007f88 <HAL_TIM_Base_Start+0xb8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d018      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1e      	ldr	r2, [pc, #120]	@ (8007f8c <HAL_TIM_Base_Start+0xbc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007f90 <HAL_TIM_Base_Start+0xc0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00e      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1b      	ldr	r2, [pc, #108]	@ (8007f94 <HAL_TIM_Base_Start+0xc4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d009      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a19      	ldr	r2, [pc, #100]	@ (8007f98 <HAL_TIM_Base_Start+0xc8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_TIM_Base_Start+0x70>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a18      	ldr	r2, [pc, #96]	@ (8007f9c <HAL_TIM_Base_Start+0xcc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d111      	bne.n	8007f64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d010      	beq.n	8007f74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0201 	orr.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	e007      	b.n	8007f74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40000c00 	.word	0x40000c00
 8007f94:	40010400 	.word	0x40010400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	40001800 	.word	0x40001800

08007fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d001      	beq.n	8007fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e04e      	b.n	8008056 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a23      	ldr	r2, [pc, #140]	@ (8008064 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe2:	d01d      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8008068 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800806c <HAL_TIM_Base_Start_IT+0xcc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8008070 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1b      	ldr	r2, [pc, #108]	@ (8008074 <HAL_TIM_Base_Start_IT+0xd4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a19      	ldr	r2, [pc, #100]	@ (8008078 <HAL_TIM_Base_Start_IT+0xd8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x80>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a18      	ldr	r2, [pc, #96]	@ (800807c <HAL_TIM_Base_Start_IT+0xdc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d111      	bne.n	8008044 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0307 	and.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b06      	cmp	r3, #6
 8008030:	d010      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0201 	orr.w	r2, r2, #1
 8008040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008042:	e007      	b.n	8008054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40010000 	.word	0x40010000
 8008068:	40000400 	.word	0x40000400
 800806c:	40000800 	.word	0x40000800
 8008070:	40000c00 	.word	0x40000c00
 8008074:	40010400 	.word	0x40010400
 8008078:	40014000 	.word	0x40014000
 800807c:	40001800 	.word	0x40001800

08008080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d020      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01b      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0202 	mvn.w	r2, #2
 80080b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8d2 	bl	8008274 <HAL_TIM_IC_CaptureCallback>
 80080d0:	e005      	b.n	80080de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f8c4 	bl	8008260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f8d5 	bl	8008288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d020      	beq.n	8008130 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01b      	beq.n	8008130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0204 	mvn.w	r2, #4
 8008100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2202      	movs	r2, #2
 8008106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f8ac 	bl	8008274 <HAL_TIM_IC_CaptureCallback>
 800811c:	e005      	b.n	800812a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f89e 	bl	8008260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8af 	bl	8008288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d020      	beq.n	800817c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0308 	and.w	r3, r3, #8
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01b      	beq.n	800817c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0208 	mvn.w	r2, #8
 800814c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2204      	movs	r2, #4
 8008152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f886 	bl	8008274 <HAL_TIM_IC_CaptureCallback>
 8008168:	e005      	b.n	8008176 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f878 	bl	8008260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f889 	bl	8008288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 0310 	and.w	r3, r3, #16
 8008182:	2b00      	cmp	r3, #0
 8008184:	d020      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b00      	cmp	r3, #0
 800818e:	d01b      	beq.n	80081c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0210 	mvn.w	r2, #16
 8008198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2208      	movs	r2, #8
 800819e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f860 	bl	8008274 <HAL_TIM_IC_CaptureCallback>
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f852 	bl	8008260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f863 	bl	8008288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d007      	beq.n	80081ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0201 	mvn.w	r2, #1
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7fa fb44 	bl	8002874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00c      	beq.n	8008210 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f906 	bl	800841c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00c      	beq.n	8008234 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f834 	bl	800829c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00c      	beq.n	8008258 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d007      	beq.n	8008258 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f06f 0220 	mvn.w	r2, #32
 8008250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8d8 	bl	8008408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a46      	ldr	r2, [pc, #280]	@ (80083dc <TIM_Base_SetConfig+0x12c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d013      	beq.n	80082f0 <TIM_Base_SetConfig+0x40>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ce:	d00f      	beq.n	80082f0 <TIM_Base_SetConfig+0x40>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a43      	ldr	r2, [pc, #268]	@ (80083e0 <TIM_Base_SetConfig+0x130>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00b      	beq.n	80082f0 <TIM_Base_SetConfig+0x40>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a42      	ldr	r2, [pc, #264]	@ (80083e4 <TIM_Base_SetConfig+0x134>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d007      	beq.n	80082f0 <TIM_Base_SetConfig+0x40>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a41      	ldr	r2, [pc, #260]	@ (80083e8 <TIM_Base_SetConfig+0x138>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d003      	beq.n	80082f0 <TIM_Base_SetConfig+0x40>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a40      	ldr	r2, [pc, #256]	@ (80083ec <TIM_Base_SetConfig+0x13c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d108      	bne.n	8008302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a35      	ldr	r2, [pc, #212]	@ (80083dc <TIM_Base_SetConfig+0x12c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d02b      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008310:	d027      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a32      	ldr	r2, [pc, #200]	@ (80083e0 <TIM_Base_SetConfig+0x130>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d023      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a31      	ldr	r2, [pc, #196]	@ (80083e4 <TIM_Base_SetConfig+0x134>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01f      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a30      	ldr	r2, [pc, #192]	@ (80083e8 <TIM_Base_SetConfig+0x138>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d01b      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a2f      	ldr	r2, [pc, #188]	@ (80083ec <TIM_Base_SetConfig+0x13c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d017      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a2e      	ldr	r2, [pc, #184]	@ (80083f0 <TIM_Base_SetConfig+0x140>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d013      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2d      	ldr	r2, [pc, #180]	@ (80083f4 <TIM_Base_SetConfig+0x144>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00f      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a2c      	ldr	r2, [pc, #176]	@ (80083f8 <TIM_Base_SetConfig+0x148>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00b      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2b      	ldr	r2, [pc, #172]	@ (80083fc <TIM_Base_SetConfig+0x14c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d007      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a2a      	ldr	r2, [pc, #168]	@ (8008400 <TIM_Base_SetConfig+0x150>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_Base_SetConfig+0xb2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a29      	ldr	r2, [pc, #164]	@ (8008404 <TIM_Base_SetConfig+0x154>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d108      	bne.n	8008374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a10      	ldr	r2, [pc, #64]	@ (80083dc <TIM_Base_SetConfig+0x12c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_Base_SetConfig+0xf8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a12      	ldr	r2, [pc, #72]	@ (80083ec <TIM_Base_SetConfig+0x13c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d103      	bne.n	80083b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	691a      	ldr	r2, [r3, #16]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d105      	bne.n	80083ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f023 0201 	bic.w	r2, r3, #1
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	611a      	str	r2, [r3, #16]
  }
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40010400 	.word	0x40010400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40014400 	.word	0x40014400
 80083f8:	40014800 	.word	0x40014800
 80083fc:	40001800 	.word	0x40001800
 8008400:	40001c00 	.word	0x40001c00
 8008404:	40002000 	.word	0x40002000

08008408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e042      	b.n	80084c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fa ff02 	bl	8003260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2224      	movs	r2, #36	@ 0x24
 8008460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f9cb 	bl	8008810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e04a      	b.n	8008578 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7fa feb2 	bl	8003260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2224      	movs	r2, #36	@ 0x24
 8008500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f97b 	bl	8008810 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695a      	ldr	r2, [r3, #20]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008538:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695a      	ldr	r2, [r3, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0208 	orr.w	r2, r2, #8
 8008548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	@ 0x28
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b20      	cmp	r3, #32
 800859e:	d175      	bne.n	800868c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <HAL_UART_Transmit+0x2c>
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e06e      	b.n	800868e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2221      	movs	r2, #33	@ 0x21
 80085ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085be:	f7fc fd21 	bl	8005004 <HAL_GetTick>
 80085c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085d8:	d108      	bne.n	80085ec <HAL_UART_Transmit+0x6c>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d104      	bne.n	80085ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e003      	b.n	80085f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085f4:	e02e      	b.n	8008654 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2200      	movs	r2, #0
 80085fe:	2180      	movs	r1, #128	@ 0x80
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f848 	bl	8008696 <UART_WaitOnFlagUntilTimeout>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e03a      	b.n	800868e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800862c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	3302      	adds	r3, #2
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	e007      	b.n	8008646 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	3301      	adds	r3, #1
 8008644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1cb      	bne.n	80085f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	2140      	movs	r1, #64	@ 0x40
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f814 	bl	8008696 <UART_WaitOnFlagUntilTimeout>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e006      	b.n	800868e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	e000      	b.n	800868e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800868c:	2302      	movs	r3, #2
  }
}
 800868e:	4618      	mov	r0, r3
 8008690:	3720      	adds	r7, #32
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b086      	sub	sp, #24
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a6:	e03b      	b.n	8008720 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086ae:	d037      	beq.n	8008720 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b0:	f7fc fca8 	bl	8005004 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	6a3a      	ldr	r2, [r7, #32]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d302      	bcc.n	80086c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e03a      	b.n	8008740 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d023      	beq.n	8008720 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b80      	cmp	r3, #128	@ 0x80
 80086dc:	d020      	beq.n	8008720 <UART_WaitOnFlagUntilTimeout+0x8a>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b40      	cmp	r3, #64	@ 0x40
 80086e2:	d01d      	beq.n	8008720 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b08      	cmp	r3, #8
 80086f0:	d116      	bne.n	8008720 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f81d 	bl	8008748 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2208      	movs	r2, #8
 8008712:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e00f      	b.n	8008740 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4013      	ands	r3, r2
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	429a      	cmp	r2, r3
 800872e:	bf0c      	ite	eq
 8008730:	2301      	moveq	r3, #1
 8008732:	2300      	movne	r3, #0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	429a      	cmp	r2, r3
 800873c:	d0b4      	beq.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008748:	b480      	push	{r7}
 800874a:	b095      	sub	sp, #84	@ 0x54
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	330c      	adds	r3, #12
 800876e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008770:	643a      	str	r2, [r7, #64]	@ 0x40
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800877e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e5      	bne.n	8008750 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3314      	adds	r3, #20
 800878a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	61fb      	str	r3, [r7, #28]
   return(result);
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	f023 0301 	bic.w	r3, r3, #1
 800879a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3314      	adds	r3, #20
 80087a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e5      	bne.n	8008784 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d119      	bne.n	80087f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f023 0310 	bic.w	r3, r3, #16
 80087d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	330c      	adds	r3, #12
 80087de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087e0:	61ba      	str	r2, [r7, #24]
 80087e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6979      	ldr	r1, [r7, #20]
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	613b      	str	r3, [r7, #16]
   return(result);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e5      	bne.n	80087c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008802:	bf00      	nop
 8008804:	3754      	adds	r7, #84	@ 0x54
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008814:	b0c0      	sub	sp, #256	@ 0x100
 8008816:	af00      	add	r7, sp, #0
 8008818:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800881c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800882c:	68d9      	ldr	r1, [r3, #12]
 800882e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	ea40 0301 	orr.w	r3, r0, r1
 8008838:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800883a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	431a      	orrs	r2, r3
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	431a      	orrs	r2, r3
 8008850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008868:	f021 010c 	bic.w	r1, r1, #12
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008876:	430b      	orrs	r3, r1
 8008878:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800887a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800888a:	6999      	ldr	r1, [r3, #24]
 800888c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	ea40 0301 	orr.w	r3, r0, r1
 8008896:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	4b8f      	ldr	r3, [pc, #572]	@ (8008adc <UART_SetConfig+0x2cc>)
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d005      	beq.n	80088b0 <UART_SetConfig+0xa0>
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b8d      	ldr	r3, [pc, #564]	@ (8008ae0 <UART_SetConfig+0x2d0>)
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d104      	bne.n	80088ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80088b0:	f7fe fa96 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 80088b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80088b8:	e003      	b.n	80088c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088ba:	f7fe fa7d 	bl	8006db8 <HAL_RCC_GetPCLK1Freq>
 80088be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088cc:	f040 810c 	bne.w	8008ae8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088d4:	2200      	movs	r2, #0
 80088d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80088da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80088de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80088e2:	4622      	mov	r2, r4
 80088e4:	462b      	mov	r3, r5
 80088e6:	1891      	adds	r1, r2, r2
 80088e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80088ea:	415b      	adcs	r3, r3
 80088ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80088f2:	4621      	mov	r1, r4
 80088f4:	eb12 0801 	adds.w	r8, r2, r1
 80088f8:	4629      	mov	r1, r5
 80088fa:	eb43 0901 	adc.w	r9, r3, r1
 80088fe:	f04f 0200 	mov.w	r2, #0
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800890a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800890e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008912:	4690      	mov	r8, r2
 8008914:	4699      	mov	r9, r3
 8008916:	4623      	mov	r3, r4
 8008918:	eb18 0303 	adds.w	r3, r8, r3
 800891c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008920:	462b      	mov	r3, r5
 8008922:	eb49 0303 	adc.w	r3, r9, r3
 8008926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800892a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008936:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800893a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800893e:	460b      	mov	r3, r1
 8008940:	18db      	adds	r3, r3, r3
 8008942:	653b      	str	r3, [r7, #80]	@ 0x50
 8008944:	4613      	mov	r3, r2
 8008946:	eb42 0303 	adc.w	r3, r2, r3
 800894a:	657b      	str	r3, [r7, #84]	@ 0x54
 800894c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008950:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008954:	f7f8 f8e2 	bl	8000b1c <__aeabi_uldivmod>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4b61      	ldr	r3, [pc, #388]	@ (8008ae4 <UART_SetConfig+0x2d4>)
 800895e:	fba3 2302 	umull	r2, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	011c      	lsls	r4, r3, #4
 8008966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008970:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008974:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	1891      	adds	r1, r2, r2
 800897e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008980:	415b      	adcs	r3, r3
 8008982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008988:	4641      	mov	r1, r8
 800898a:	eb12 0a01 	adds.w	sl, r2, r1
 800898e:	4649      	mov	r1, r9
 8008990:	eb43 0b01 	adc.w	fp, r3, r1
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089a8:	4692      	mov	sl, r2
 80089aa:	469b      	mov	fp, r3
 80089ac:	4643      	mov	r3, r8
 80089ae:	eb1a 0303 	adds.w	r3, sl, r3
 80089b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089b6:	464b      	mov	r3, r9
 80089b8:	eb4b 0303 	adc.w	r3, fp, r3
 80089bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80089d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80089d4:	460b      	mov	r3, r1
 80089d6:	18db      	adds	r3, r3, r3
 80089d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80089da:	4613      	mov	r3, r2
 80089dc:	eb42 0303 	adc.w	r3, r2, r3
 80089e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80089e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80089e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80089ea:	f7f8 f897 	bl	8000b1c <__aeabi_uldivmod>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4611      	mov	r1, r2
 80089f4:	4b3b      	ldr	r3, [pc, #236]	@ (8008ae4 <UART_SetConfig+0x2d4>)
 80089f6:	fba3 2301 	umull	r2, r3, r3, r1
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	2264      	movs	r2, #100	@ 0x64
 80089fe:	fb02 f303 	mul.w	r3, r2, r3
 8008a02:	1acb      	subs	r3, r1, r3
 8008a04:	00db      	lsls	r3, r3, #3
 8008a06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a0a:	4b36      	ldr	r3, [pc, #216]	@ (8008ae4 <UART_SetConfig+0x2d4>)
 8008a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a18:	441c      	add	r4, r3
 8008a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	1891      	adds	r1, r2, r2
 8008a32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a34:	415b      	adcs	r3, r3
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	1851      	adds	r1, r2, r1
 8008a40:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a42:	4649      	mov	r1, r9
 8008a44:	414b      	adcs	r3, r1
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008a54:	4659      	mov	r1, fp
 8008a56:	00cb      	lsls	r3, r1, #3
 8008a58:	4651      	mov	r1, sl
 8008a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5e:	4651      	mov	r1, sl
 8008a60:	00ca      	lsls	r2, r1, #3
 8008a62:	4610      	mov	r0, r2
 8008a64:	4619      	mov	r1, r3
 8008a66:	4603      	mov	r3, r0
 8008a68:	4642      	mov	r2, r8
 8008a6a:	189b      	adds	r3, r3, r2
 8008a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a70:	464b      	mov	r3, r9
 8008a72:	460a      	mov	r2, r1
 8008a74:	eb42 0303 	adc.w	r3, r2, r3
 8008a78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a90:	460b      	mov	r3, r1
 8008a92:	18db      	adds	r3, r3, r3
 8008a94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a96:	4613      	mov	r3, r2
 8008a98:	eb42 0303 	adc.w	r3, r2, r3
 8008a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008aa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008aa6:	f7f8 f839 	bl	8000b1c <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <UART_SetConfig+0x2d4>)
 8008ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	2164      	movs	r1, #100	@ 0x64
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	3332      	adds	r3, #50	@ 0x32
 8008ac2:	4a08      	ldr	r2, [pc, #32]	@ (8008ae4 <UART_SetConfig+0x2d4>)
 8008ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	f003 0207 	and.w	r2, r3, #7
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4422      	add	r2, r4
 8008ad6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ad8:	e106      	b.n	8008ce8 <UART_SetConfig+0x4d8>
 8008ada:	bf00      	nop
 8008adc:	40011000 	.word	0x40011000
 8008ae0:	40011400 	.word	0x40011400
 8008ae4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008af2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008af6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008afa:	4642      	mov	r2, r8
 8008afc:	464b      	mov	r3, r9
 8008afe:	1891      	adds	r1, r2, r2
 8008b00:	6239      	str	r1, [r7, #32]
 8008b02:	415b      	adcs	r3, r3
 8008b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	1854      	adds	r4, r2, r1
 8008b0e:	4649      	mov	r1, r9
 8008b10:	eb43 0501 	adc.w	r5, r3, r1
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	00eb      	lsls	r3, r5, #3
 8008b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b22:	00e2      	lsls	r2, r4, #3
 8008b24:	4614      	mov	r4, r2
 8008b26:	461d      	mov	r5, r3
 8008b28:	4643      	mov	r3, r8
 8008b2a:	18e3      	adds	r3, r4, r3
 8008b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b30:	464b      	mov	r3, r9
 8008b32:	eb45 0303 	adc.w	r3, r5, r3
 8008b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008b56:	4629      	mov	r1, r5
 8008b58:	008b      	lsls	r3, r1, #2
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b60:	4621      	mov	r1, r4
 8008b62:	008a      	lsls	r2, r1, #2
 8008b64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008b68:	f7f7 ffd8 	bl	8000b1c <__aeabi_uldivmod>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4b60      	ldr	r3, [pc, #384]	@ (8008cf4 <UART_SetConfig+0x4e4>)
 8008b72:	fba3 2302 	umull	r2, r3, r3, r2
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	011c      	lsls	r4, r3, #4
 8008b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008b84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008b88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	1891      	adds	r1, r2, r2
 8008b92:	61b9      	str	r1, [r7, #24]
 8008b94:	415b      	adcs	r3, r3
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	1851      	adds	r1, r2, r1
 8008ba0:	6139      	str	r1, [r7, #16]
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	414b      	adcs	r3, r1
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bb4:	4659      	mov	r1, fp
 8008bb6:	00cb      	lsls	r3, r1, #3
 8008bb8:	4651      	mov	r1, sl
 8008bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bbe:	4651      	mov	r1, sl
 8008bc0:	00ca      	lsls	r2, r1, #3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	4642      	mov	r2, r8
 8008bca:	189b      	adds	r3, r3, r2
 8008bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	eb42 0303 	adc.w	r3, r2, r3
 8008bd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008be6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	008b      	lsls	r3, r1, #2
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bfe:	4641      	mov	r1, r8
 8008c00:	008a      	lsls	r2, r1, #2
 8008c02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c06:	f7f7 ff89 	bl	8000b1c <__aeabi_uldivmod>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4b38      	ldr	r3, [pc, #224]	@ (8008cf4 <UART_SetConfig+0x4e4>)
 8008c12:	fba3 2301 	umull	r2, r3, r3, r1
 8008c16:	095b      	lsrs	r3, r3, #5
 8008c18:	2264      	movs	r2, #100	@ 0x64
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
 8008c1e:	1acb      	subs	r3, r1, r3
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	3332      	adds	r3, #50	@ 0x32
 8008c24:	4a33      	ldr	r2, [pc, #204]	@ (8008cf4 <UART_SetConfig+0x4e4>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	095b      	lsrs	r3, r3, #5
 8008c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c30:	441c      	add	r4, r3
 8008c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c36:	2200      	movs	r2, #0
 8008c38:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c40:	4642      	mov	r2, r8
 8008c42:	464b      	mov	r3, r9
 8008c44:	1891      	adds	r1, r2, r2
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	415b      	adcs	r3, r3
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c50:	4641      	mov	r1, r8
 8008c52:	1851      	adds	r1, r2, r1
 8008c54:	6039      	str	r1, [r7, #0]
 8008c56:	4649      	mov	r1, r9
 8008c58:	414b      	adcs	r3, r1
 8008c5a:	607b      	str	r3, [r7, #4]
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	f04f 0300 	mov.w	r3, #0
 8008c64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c68:	4659      	mov	r1, fp
 8008c6a:	00cb      	lsls	r3, r1, #3
 8008c6c:	4651      	mov	r1, sl
 8008c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c72:	4651      	mov	r1, sl
 8008c74:	00ca      	lsls	r2, r1, #3
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	189b      	adds	r3, r3, r2
 8008c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c82:	464b      	mov	r3, r9
 8008c84:	460a      	mov	r2, r1
 8008c86:	eb42 0303 	adc.w	r3, r2, r3
 8008c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c96:	667a      	str	r2, [r7, #100]	@ 0x64
 8008c98:	f04f 0200 	mov.w	r2, #0
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	008b      	lsls	r3, r1, #2
 8008ca8:	4641      	mov	r1, r8
 8008caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cae:	4641      	mov	r1, r8
 8008cb0:	008a      	lsls	r2, r1, #2
 8008cb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008cb6:	f7f7 ff31 	bl	8000b1c <__aeabi_uldivmod>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf4 <UART_SetConfig+0x4e4>)
 8008cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc4:	095b      	lsrs	r3, r3, #5
 8008cc6:	2164      	movs	r1, #100	@ 0x64
 8008cc8:	fb01 f303 	mul.w	r3, r1, r3
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	3332      	adds	r3, #50	@ 0x32
 8008cd2:	4a08      	ldr	r2, [pc, #32]	@ (8008cf4 <UART_SetConfig+0x4e4>)
 8008cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	f003 020f 	and.w	r2, r3, #15
 8008cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4422      	add	r2, r4
 8008ce6:	609a      	str	r2, [r3, #8]
}
 8008ce8:	bf00      	nop
 8008cea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cf4:	51eb851f 	.word	0x51eb851f

08008cf8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f103 0208 	add.w	r2, r3, #8
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d10:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f103 0208 	add.w	r2, r3, #8
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f103 0208 	add.w	r2, r3, #8
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008db0:	d103      	bne.n	8008dba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e00c      	b.n	8008dd4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	e002      	b.n	8008dc8 <vListInsert+0x2e>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d2f6      	bcs.n	8008dc2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	601a      	str	r2, [r3, #0]
}
 8008e00:	bf00      	nop
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	6892      	ldr	r2, [r2, #8]
 8008e22:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6852      	ldr	r2, [r2, #4]
 8008e2c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d103      	bne.n	8008e40 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	1e5a      	subs	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xQueueGenericReset+0x2c>
        __asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	60bb      	str	r3, [r7, #8]
    }
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8008e8c:	f002 fbae 	bl	800b5ec <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e98:	68f9      	ldr	r1, [r7, #12]
 8008e9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	441a      	add	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	68f9      	ldr	r1, [r7, #12]
 8008ec0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	441a      	add	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	22ff      	movs	r2, #255	@ 0xff
 8008ed0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	22ff      	movs	r2, #255	@ 0xff
 8008ed8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d114      	bne.n	8008f0c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01a      	beq.n	8008f20 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3310      	adds	r3, #16
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 faca 	bl	800a488 <xTaskRemoveFromEventList>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d012      	beq.n	8008f20 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008efa:	4b0d      	ldr	r3, [pc, #52]	@ (8008f30 <xQueueGenericReset+0xd0>)
 8008efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	e009      	b.n	8008f20 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3310      	adds	r3, #16
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff fef1 	bl	8008cf8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3324      	adds	r3, #36	@ 0x24
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff feec 	bl	8008cf8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008f20:	f002 fb96 	bl	800b650 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008f24:	2301      	movs	r3, #1
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	e000ed04 	.word	0xe000ed04

08008f34 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08c      	sub	sp, #48	@ 0x30
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10b      	bne.n	8008f60 <xQueueGenericCreate+0x2c>
        __asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	61bb      	str	r3, [r7, #24]
    }
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	fb02 f303 	mul.w	r3, r2, r3
 8008f68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <xQueueGenericCreate+0x4a>
 8008f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d101      	bne.n	8008f82 <xQueueGenericCreate+0x4e>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <xQueueGenericCreate+0x50>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xQueueGenericCreate+0x6c>
        __asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	617b      	str	r3, [r7, #20]
    }
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008fa6:	d90b      	bls.n	8008fc0 <xQueueGenericCreate+0x8c>
        __asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	613b      	str	r3, [r7, #16]
    }
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc2:	3350      	adds	r3, #80	@ 0x50
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 fc43 	bl	800b850 <pvPortMalloc>
 8008fca:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	3350      	adds	r3, #80	@ 0x50
 8008fda:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fdc:	79fa      	ldrb	r2, [r7, #7]
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	69fa      	ldr	r2, [r7, #28]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f805 	bl	8008ff8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008fee:	6a3b      	ldr	r3, [r7, #32]
    }
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	@ 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d103      	bne.n	8009014 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e002      	b.n	800901a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009026:	2101      	movs	r1, #1
 8009028:	69b8      	ldr	r0, [r7, #24]
 800902a:	f7ff ff19 	bl	8008e60 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	68f9      	ldr	r1, [r7, #12]
 800903c:	2073      	movs	r0, #115	@ 0x73
 800903e:	f003 fd7d 	bl	800cb3c <SEGGER_SYSVIEW_RecordU32x3>
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b090      	sub	sp, #64	@ 0x40
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800905a:	2300      	movs	r3, #0
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8009062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10b      	bne.n	8009080 <xQueueGenericSend+0x34>
        __asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800907a:	bf00      	nop
 800907c:	bf00      	nop
 800907e:	e7fd      	b.n	800907c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d103      	bne.n	800908e <xQueueGenericSend+0x42>
 8009086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <xQueueGenericSend+0x46>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <xQueueGenericSend+0x48>
 8009092:	2300      	movs	r3, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10b      	bne.n	80090b0 <xQueueGenericSend+0x64>
        __asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
 80090ae:	e7fd      	b.n	80090ac <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d103      	bne.n	80090be <xQueueGenericSend+0x72>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d101      	bne.n	80090c2 <xQueueGenericSend+0x76>
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <xQueueGenericSend+0x78>
 80090c2:	2300      	movs	r3, #0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10b      	bne.n	80090e0 <xQueueGenericSend+0x94>
        __asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	623b      	str	r3, [r7, #32]
    }
 80090da:	bf00      	nop
 80090dc:	bf00      	nop
 80090de:	e7fd      	b.n	80090dc <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090e0:	f001 fb76 	bl	800a7d0 <xTaskGetSchedulerState>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <xQueueGenericSend+0xa4>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <xQueueGenericSend+0xa8>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <xQueueGenericSend+0xaa>
 80090f4:	2300      	movs	r3, #0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <xQueueGenericSend+0xc6>
        __asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	61fb      	str	r3, [r7, #28]
    }
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	e7fd      	b.n	800910e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009112:	f002 fa6b 	bl	800b5ec <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800911a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800911e:	429a      	cmp	r2, r3
 8009120:	d302      	bcc.n	8009128 <xQueueGenericSend+0xdc>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d136      	bne.n	8009196 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8009128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912a:	4618      	mov	r0, r3
 800912c:	f004 fa92 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	460b      	mov	r3, r1
 800913a:	4601      	mov	r1, r0
 800913c:	205a      	movs	r0, #90	@ 0x5a
 800913e:	f003 fd73 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	68b9      	ldr	r1, [r7, #8]
 8009146:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009148:	f000 fbd8 	bl	80098fc <prvCopyDataToQueue>
 800914c:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009152:	2b00      	cmp	r3, #0
 8009154:	d010      	beq.n	8009178 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	3324      	adds	r3, #36	@ 0x24
 800915a:	4618      	mov	r0, r3
 800915c:	f001 f994 	bl	800a488 <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d013      	beq.n	800918e <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009166:	4b4d      	ldr	r3, [pc, #308]	@ (800929c <xQueueGenericSend+0x250>)
 8009168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	e00a      	b.n	800918e <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800917e:	4b47      	ldr	r3, [pc, #284]	@ (800929c <xQueueGenericSend+0x250>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800918e:	f002 fa5f 	bl	800b650 <vPortExitCritical>
                return pdPASS;
 8009192:	2301      	movs	r3, #1
 8009194:	e07d      	b.n	8009292 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d110      	bne.n	80091be <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800919c:	f002 fa58 	bl	800b650 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	4618      	mov	r0, r3
 80091a4:	f004 fa56 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	460b      	mov	r3, r1
 80091b2:	4601      	mov	r1, r0
 80091b4:	205a      	movs	r0, #90	@ 0x5a
 80091b6:	f003 fd37 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	e069      	b.n	8009292 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 80091be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80091c4:	f107 0314 	add.w	r3, r7, #20
 80091c8:	4618      	mov	r0, r3
 80091ca:	f001 f9c5 	bl	800a558 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80091d2:	f002 fa3d 	bl	800b650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80091d6:	f000 ff07 	bl	8009fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80091da:	f002 fa07 	bl	800b5ec <vPortEnterCritical>
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091e4:	b25b      	sxtb	r3, r3
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091ea:	d103      	bne.n	80091f4 <xQueueGenericSend+0x1a8>
 80091ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009200:	d103      	bne.n	800920a <xQueueGenericSend+0x1be>
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800920a:	f002 fa21 	bl	800b650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800920e:	1d3a      	adds	r2, r7, #4
 8009210:	f107 0314 	add.w	r3, r7, #20
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f001 f9b4 	bl	800a584 <xTaskCheckForTimeOut>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d124      	bne.n	800926c <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009224:	f000 fc62 	bl	8009aec <prvIsQueueFull>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d018      	beq.n	8009260 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800922e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009230:	3310      	adds	r3, #16
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f001 f8d0 	bl	800a3dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800923c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800923e:	f000 fbed 	bl	8009a1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009242:	f000 fedf 	bl	800a004 <xTaskResumeAll>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	f47f af62 	bne.w	8009112 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800924e:	4b13      	ldr	r3, [pc, #76]	@ (800929c <xQueueGenericSend+0x250>)
 8009250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	e758      	b.n	8009112 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009262:	f000 fbdb 	bl	8009a1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009266:	f000 fecd 	bl	800a004 <xTaskResumeAll>
 800926a:	e752      	b.n	8009112 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800926c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800926e:	f000 fbd5 	bl	8009a1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009272:	f000 fec7 	bl	800a004 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	4618      	mov	r0, r3
 800927a:	f004 f9eb 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	460b      	mov	r3, r1
 8009288:	4601      	mov	r1, r0
 800928a:	205a      	movs	r0, #90	@ 0x5a
 800928c:	f003 fccc 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8009290:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009292:	4618      	mov	r0, r3
 8009294:	3738      	adds	r7, #56	@ 0x38
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	e000ed04 	.word	0xe000ed04

080092a0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b090      	sub	sp, #64	@ 0x40
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10b      	bne.n	80092d0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d103      	bne.n	80092de <xQueueGenericSendFromISR+0x3e>
 80092d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <xQueueGenericSendFromISR+0x42>
 80092de:	2301      	movs	r3, #1
 80092e0:	e000      	b.n	80092e4 <xQueueGenericSendFromISR+0x44>
 80092e2:	2300      	movs	r3, #0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10b      	bne.n	8009300 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d103      	bne.n	800930e <xQueueGenericSendFromISR+0x6e>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <xQueueGenericSendFromISR+0x72>
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <xQueueGenericSendFromISR+0x74>
 8009312:	2300      	movs	r3, #0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	623b      	str	r3, [r7, #32]
    }
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	e7fd      	b.n	800932c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009330:	f002 fa4c 	bl	800b7cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009334:	f3ef 8211 	mrs	r2, BASEPRI
 8009338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	61fa      	str	r2, [r7, #28]
 800934a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800934c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800934e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009358:	429a      	cmp	r2, r3
 800935a:	d302      	bcc.n	8009362 <xQueueGenericSendFromISR+0xc2>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b02      	cmp	r3, #2
 8009360:	d149      	bne.n	80093f6 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009368:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009370:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	4618      	mov	r0, r3
 8009376:	f004 f96d 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 800937a:	4601      	mov	r1, r0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	461a      	mov	r2, r3
 8009380:	2060      	movs	r0, #96	@ 0x60
 8009382:	f003 fb81 	bl	800ca88 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009386:	683a      	ldr	r2, [r7, #0]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800938c:	f000 fab6 	bl	80098fc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009390:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009398:	d112      	bne.n	80093c0 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d026      	beq.n	80093f0 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	3324      	adds	r3, #36	@ 0x24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 f86e 	bl	800a488 <xTaskRemoveFromEventList>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01e      	beq.n	80093f0 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01b      	beq.n	80093f0 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e017      	b.n	80093f0 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80093c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80093c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80093c6:	d10b      	bne.n	80093e0 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	617b      	str	r3, [r7, #20]
    }
 80093da:	bf00      	nop
 80093dc:	bf00      	nop
 80093de:	e7fd      	b.n	80093dc <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093e4:	3301      	adds	r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	b25a      	sxtb	r2, r3
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80093f0:	2301      	movs	r3, #1
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80093f4:	e00b      	b.n	800940e <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	4618      	mov	r0, r3
 80093fa:	f004 f92b 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80093fe:	4601      	mov	r1, r0
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	461a      	mov	r2, r3
 8009404:	2060      	movs	r0, #96	@ 0x60
 8009406:	f003 fb3f 	bl	800ca88 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800940e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009410:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009418:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800941a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800941c:	4618      	mov	r0, r3
 800941e:	3740      	adds	r7, #64	@ 0x40
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009424:	b590      	push	{r4, r7, lr}
 8009426:	b08f      	sub	sp, #60	@ 0x3c
 8009428:	af02      	add	r7, sp, #8
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10b      	bne.n	8009456 <xQueueReceive+0x32>
        __asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	623b      	str	r3, [r7, #32]
    }
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d103      	bne.n	8009464 <xQueueReceive+0x40>
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <xQueueReceive+0x44>
 8009464:	2301      	movs	r3, #1
 8009466:	e000      	b.n	800946a <xQueueReceive+0x46>
 8009468:	2300      	movs	r3, #0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10b      	bne.n	8009486 <xQueueReceive+0x62>
        __asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	61fb      	str	r3, [r7, #28]
    }
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009486:	f001 f9a3 	bl	800a7d0 <xTaskGetSchedulerState>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <xQueueReceive+0x72>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <xQueueReceive+0x76>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <xQueueReceive+0x78>
 800949a:	2300      	movs	r3, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10b      	bne.n	80094b8 <xQueueReceive+0x94>
        __asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	61bb      	str	r3, [r7, #24]
    }
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
 80094b6:	e7fd      	b.n	80094b4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80094b8:	f002 f898 	bl	800b5ec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d02f      	beq.n	8009528 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094cc:	f000 fa80 	bl	80099d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	4618      	mov	r0, r3
 80094d4:	f004 f8be 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80094d8:	4604      	mov	r4, r0
 80094da:	2000      	movs	r0, #0
 80094dc:	f004 f8ba 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80094e0:	4602      	mov	r2, r0
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2101      	movs	r1, #1
 80094e6:	9100      	str	r1, [sp, #0]
 80094e8:	4621      	mov	r1, r4
 80094ea:	205c      	movs	r0, #92	@ 0x5c
 80094ec:	f003 fb9c 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f2:	1e5a      	subs	r2, r3, #1
 80094f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00f      	beq.n	8009520 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009502:	3310      	adds	r3, #16
 8009504:	4618      	mov	r0, r3
 8009506:	f000 ffbf 	bl	800a488 <xTaskRemoveFromEventList>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d007      	beq.n	8009520 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009510:	4b4d      	ldr	r3, [pc, #308]	@ (8009648 <xQueueReceive+0x224>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009520:	f002 f896 	bl	800b650 <vPortExitCritical>
                return pdPASS;
 8009524:	2301      	movs	r3, #1
 8009526:	e08a      	b.n	800963e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d113      	bne.n	8009556 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800952e:	f002 f88f 	bl	800b650 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009534:	4618      	mov	r0, r3
 8009536:	f004 f88d 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 800953a:	4604      	mov	r4, r0
 800953c:	2000      	movs	r0, #0
 800953e:	f004 f889 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 8009542:	4602      	mov	r2, r0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2101      	movs	r1, #1
 8009548:	9100      	str	r1, [sp, #0]
 800954a:	4621      	mov	r1, r4
 800954c:	205c      	movs	r0, #92	@ 0x5c
 800954e:	f003 fb6b 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009552:	2300      	movs	r3, #0
 8009554:	e073      	b.n	800963e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d106      	bne.n	800956a <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800955c:	f107 0310 	add.w	r3, r7, #16
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fff9 	bl	800a558 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009566:	2301      	movs	r3, #1
 8009568:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800956a:	f002 f871 	bl	800b650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800956e:	f000 fd3b 	bl	8009fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009572:	f002 f83b 	bl	800b5ec <vPortEnterCritical>
 8009576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800957c:	b25b      	sxtb	r3, r3
 800957e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009582:	d103      	bne.n	800958c <xQueueReceive+0x168>
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009592:	b25b      	sxtb	r3, r3
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009598:	d103      	bne.n	80095a2 <xQueueReceive+0x17e>
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095a2:	f002 f855 	bl	800b650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095a6:	1d3a      	adds	r2, r7, #4
 80095a8:	f107 0310 	add.w	r3, r7, #16
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 ffe8 	bl	800a584 <xTaskCheckForTimeOut>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d124      	bne.n	8009604 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095bc:	f000 fa80 	bl	8009ac0 <prvIsQueueEmpty>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d018      	beq.n	80095f8 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c8:	3324      	adds	r3, #36	@ 0x24
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	4611      	mov	r1, r2
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 ff04 	bl	800a3dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80095d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095d6:	f000 fa21 	bl	8009a1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80095da:	f000 fd13 	bl	800a004 <xTaskResumeAll>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f47f af69 	bne.w	80094b8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80095e6:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <xQueueReceive+0x224>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	e75f      	b.n	80094b8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80095f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095fa:	f000 fa0f 	bl	8009a1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80095fe:	f000 fd01 	bl	800a004 <xTaskResumeAll>
 8009602:	e759      	b.n	80094b8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009606:	f000 fa09 	bl	8009a1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800960a:	f000 fcfb 	bl	800a004 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800960e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009610:	f000 fa56 	bl	8009ac0 <prvIsQueueEmpty>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	f43f af4e 	beq.w	80094b8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	4618      	mov	r0, r3
 8009620:	f004 f818 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 8009624:	4604      	mov	r4, r0
 8009626:	2000      	movs	r0, #0
 8009628:	f004 f814 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 800962c:	4602      	mov	r2, r0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2101      	movs	r1, #1
 8009632:	9100      	str	r1, [sp, #0]
 8009634:	4621      	mov	r1, r4
 8009636:	205c      	movs	r0, #92	@ 0x5c
 8009638:	f003 faf6 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800963c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800963e:	4618      	mov	r0, r3
 8009640:	3734      	adds	r7, #52	@ 0x34
 8009642:	46bd      	mov	sp, r7
 8009644:	bd90      	pop	{r4, r7, pc}
 8009646:	bf00      	nop
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800964c:	b590      	push	{r4, r7, lr}
 800964e:	b091      	sub	sp, #68	@ 0x44
 8009650:	af02      	add	r7, sp, #8
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800965e:	2300      	movs	r3, #0
 8009660:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <xQueueSemaphoreTake+0x34>
        __asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	623b      	str	r3, [r7, #32]
    }
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	e7fd      	b.n	800967c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	61fb      	str	r3, [r7, #28]
    }
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	e7fd      	b.n	800969c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096a0:	f001 f896 	bl	800a7d0 <xTaskGetSchedulerState>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <xQueueSemaphoreTake+0x64>
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <xQueueSemaphoreTake+0x68>
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <xQueueSemaphoreTake+0x6a>
 80096b4:	2300      	movs	r3, #0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10b      	bne.n	80096d2 <xQueueSemaphoreTake+0x86>
        __asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	61bb      	str	r3, [r7, #24]
    }
 80096cc:	bf00      	nop
 80096ce:	bf00      	nop
 80096d0:	e7fd      	b.n	80096ce <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80096d2:	f001 ff8b 	bl	800b5ec <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096da:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80096dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d034      	beq.n	800974c <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80096e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e4:	4618      	mov	r0, r3
 80096e6:	f003 ffb5 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80096ea:	4604      	mov	r4, r0
 80096ec:	2000      	movs	r0, #0
 80096ee:	f003 ffb1 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80096f2:	4602      	mov	r2, r0
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2101      	movs	r1, #1
 80096f8:	9100      	str	r1, [sp, #0]
 80096fa:	4621      	mov	r1, r4
 80096fc:	205c      	movs	r0, #92	@ 0x5c
 80096fe:	f003 fa93 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	1e5a      	subs	r2, r3, #1
 8009706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009708:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009712:	f001 fa11 	bl	800ab38 <pvTaskIncrementMutexHeldCount>
 8009716:	4602      	mov	r2, r0
 8009718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971a:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800971c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00f      	beq.n	8009744 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009726:	3310      	adds	r3, #16
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fead 	bl	800a488 <xTaskRemoveFromEventList>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009734:	4b64      	ldr	r3, [pc, #400]	@ (80098c8 <xQueueSemaphoreTake+0x27c>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009744:	f001 ff84 	bl	800b650 <vPortExitCritical>
                return pdPASS;
 8009748:	2301      	movs	r3, #1
 800974a:	e0b8      	b.n	80098be <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d122      	bne.n	8009798 <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <xQueueSemaphoreTake+0x124>
        __asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	617b      	str	r3, [r7, #20]
    }
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	e7fd      	b.n	800976c <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009770:	f001 ff6e 	bl	800b650 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009776:	4618      	mov	r0, r3
 8009778:	f003 ff6c 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 800977c:	4604      	mov	r4, r0
 800977e:	2000      	movs	r0, #0
 8009780:	f003 ff68 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 8009784:	4602      	mov	r2, r0
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2101      	movs	r1, #1
 800978a:	9100      	str	r1, [sp, #0]
 800978c:	4621      	mov	r1, r4
 800978e:	205c      	movs	r0, #92	@ 0x5c
 8009790:	f003 fa4a 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009794:	2300      	movs	r3, #0
 8009796:	e092      	b.n	80098be <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979a:	2b00      	cmp	r3, #0
 800979c:	d106      	bne.n	80097ac <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800979e:	f107 030c 	add.w	r3, r7, #12
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fed8 	bl	800a558 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80097a8:	2301      	movs	r3, #1
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80097ac:	f001 ff50 	bl	800b650 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80097b0:	f000 fc1a 	bl	8009fe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80097b4:	f001 ff1a 	bl	800b5ec <vPortEnterCritical>
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097c4:	d103      	bne.n	80097ce <xQueueSemaphoreTake+0x182>
 80097c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097d4:	b25b      	sxtb	r3, r3
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097da:	d103      	bne.n	80097e4 <xQueueSemaphoreTake+0x198>
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097e4:	f001 ff34 	bl	800b650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097e8:	463a      	mov	r2, r7
 80097ea:	f107 030c 	add.w	r3, r7, #12
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fec7 	bl	800a584 <xTaskCheckForTimeOut>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d132      	bne.n	8009862 <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80097fe:	f000 f95f 	bl	8009ac0 <prvIsQueueEmpty>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d026      	beq.n	8009856 <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d109      	bne.n	8009824 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8009810:	f001 feec 	bl	800b5ec <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fff7 	bl	800a80c <xTaskPriorityInherit>
 800981e:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8009820:	f001 ff16 	bl	800b650 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009826:	3324      	adds	r3, #36	@ 0x24
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f000 fdd5 	bl	800a3dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009834:	f000 f8f2 	bl	8009a1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009838:	f000 fbe4 	bl	800a004 <xTaskResumeAll>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	f47f af47 	bne.w	80096d2 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8009844:	4b20      	ldr	r3, [pc, #128]	@ (80098c8 <xQueueSemaphoreTake+0x27c>)
 8009846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	e73d      	b.n	80096d2 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009858:	f000 f8e0 	bl	8009a1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800985c:	f000 fbd2 	bl	800a004 <xTaskResumeAll>
 8009860:	e737      	b.n	80096d2 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009862:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009864:	f000 f8da 	bl	8009a1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009868:	f000 fbcc 	bl	800a004 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800986c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800986e:	f000 f927 	bl	8009ac0 <prvIsQueueEmpty>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	f43f af2c 	beq.w	80096d2 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00d      	beq.n	800989c <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 8009880:	f001 feb4 	bl	800b5ec <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009884:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009886:	f000 f821 	bl	80098cc <prvGetDisinheritPriorityAfterTimeout>
 800988a:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800988c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009892:	4618      	mov	r0, r3
 8009894:	f001 f8b6 	bl	800aa04 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009898:	f001 feda 	bl	800b650 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800989c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989e:	4618      	mov	r0, r3
 80098a0:	f003 fed8 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80098a4:	4604      	mov	r4, r0
 80098a6:	2000      	movs	r0, #0
 80098a8:	f003 fed4 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 80098ac:	4602      	mov	r2, r0
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2101      	movs	r1, #1
 80098b2:	9100      	str	r1, [sp, #0]
 80098b4:	4621      	mov	r1, r4
 80098b6:	205c      	movs	r0, #92	@ 0x5c
 80098b8:	f003 f9b6 	bl	800cc28 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80098bc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80098be:	4618      	mov	r0, r3
 80098c0:	373c      	adds	r7, #60	@ 0x3c
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd90      	pop	{r4, r7, pc}
 80098c6:	bf00      	nop
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d006      	beq.n	80098ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f1c3 0305 	rsb	r3, r3, #5
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e001      	b.n	80098ee <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80098ee:	68fb      	ldr	r3, [r7, #12]
    }
 80098f0:	4618      	mov	r0, r3
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009910:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10d      	bne.n	8009936 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d14d      	bne.n	80099be <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 ffea 	bl	800a900 <xTaskPriorityDisinherit>
 800992c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	609a      	str	r2, [r3, #8]
 8009934:	e043      	b.n	80099be <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d119      	bne.n	8009970 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6858      	ldr	r0, [r3, #4]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009944:	461a      	mov	r2, r3
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	f004 fa5b 	bl	800de02 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	441a      	add	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	d32b      	bcc.n	80099be <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	605a      	str	r2, [r3, #4]
 800996e:	e026      	b.n	80099be <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	68d8      	ldr	r0, [r3, #12]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009978:	461a      	mov	r2, r3
 800997a:	68b9      	ldr	r1, [r7, #8]
 800997c:	f004 fa41 	bl	800de02 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	425b      	negs	r3, r3
 800998a:	441a      	add	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	68da      	ldr	r2, [r3, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	429a      	cmp	r2, r3
 800999a:	d207      	bcs.n	80099ac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a4:	425b      	negs	r3, r3
 80099a6:	441a      	add	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d105      	bne.n	80099be <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80099c6:	697b      	ldr	r3, [r7, #20]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3718      	adds	r7, #24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d018      	beq.n	8009a14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ea:	441a      	add	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d303      	bcc.n	8009a04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68d9      	ldr	r1, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6838      	ldr	r0, [r7, #0]
 8009a10:	f004 f9f7 	bl	800de02 <memcpy>
    }
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009a24:	f001 fde2 	bl	800b5ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a30:	e011      	b.n	8009a56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d012      	beq.n	8009a60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	3324      	adds	r3, #36	@ 0x24
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 fd22 	bl	800a488 <xTaskRemoveFromEventList>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009a4a:	f000 fe03 	bl	800a654 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dce9      	bgt.n	8009a32 <prvUnlockQueue+0x16>
 8009a5e:	e000      	b.n	8009a62 <prvUnlockQueue+0x46>
                        break;
 8009a60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	22ff      	movs	r2, #255	@ 0xff
 8009a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009a6a:	f001 fdf1 	bl	800b650 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009a6e:	f001 fdbd 	bl	800b5ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a7a:	e011      	b.n	8009aa0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d012      	beq.n	8009aaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3310      	adds	r3, #16
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fcfd 	bl	800a488 <xTaskRemoveFromEventList>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009a94:	f000 fdde 	bl	800a654 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dce9      	bgt.n	8009a7c <prvUnlockQueue+0x60>
 8009aa8:	e000      	b.n	8009aac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009aaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	22ff      	movs	r2, #255	@ 0xff
 8009ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009ab4:	f001 fdcc 	bl	800b650 <vPortExitCritical>
}
 8009ab8:	bf00      	nop
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009ac8:	f001 fd90 	bl	800b5ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
 8009ad8:	e001      	b.n	8009ade <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009ade:	f001 fdb7 	bl	800b650 <vPortExitCritical>

    return xReturn;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009af4:	f001 fd7a 	bl	800b5ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d102      	bne.n	8009b0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	e001      	b.n	8009b0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009b0e:	f001 fd9f 	bl	800b650 <vPortExitCritical>

    return xReturn;
 8009b12:	68fb      	ldr	r3, [r7, #12]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e01e      	b.n	8009b6a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b2c:	4a13      	ldr	r2, [pc, #76]	@ (8009b7c <vQueueAddToRegistry+0x60>)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d115      	bne.n	8009b64 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b38:	4910      	ldr	r1, [pc, #64]	@ (8009b7c <vQueueAddToRegistry+0x60>)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8009b42:	4a0e      	ldr	r2, [pc, #56]	@ (8009b7c <vQueueAddToRegistry+0x60>)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	4413      	add	r3, r2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f003 fd7f 	bl	800d654 <SEGGER_SYSVIEW_ShrinkId>
 8009b56:	4601      	mov	r1, r0
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	2071      	movs	r0, #113	@ 0x71
 8009b5e:	f002 ff93 	bl	800ca88 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8009b62:	e006      	b.n	8009b72 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b07      	cmp	r3, #7
 8009b6e:	d9dd      	bls.n	8009b2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	200005dc 	.word	0x200005dc

08009b80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009b90:	f001 fd2c 	bl	800b5ec <vPortEnterCritical>
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b9a:	b25b      	sxtb	r3, r3
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ba0:	d103      	bne.n	8009baa <vQueueWaitForMessageRestricted+0x2a>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bb0:	b25b      	sxtb	r3, r3
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bb6:	d103      	bne.n	8009bc0 <vQueueWaitForMessageRestricted+0x40>
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bc0:	f001 fd46 	bl	800b650 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	3324      	adds	r3, #36	@ 0x24
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 fc27 	bl	800a428 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009bda:	6978      	ldr	r0, [r7, #20]
 8009bdc:	f7ff ff1e 	bl	8009a1c <prvUnlockQueue>
    }
 8009be0:	bf00      	nop
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08c      	sub	sp, #48	@ 0x30
 8009bec:	af04      	add	r7, sp, #16
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	603b      	str	r3, [r7, #0]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bf8:	88fb      	ldrh	r3, [r7, #6]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 fe27 	bl	800b850 <pvPortMalloc>
 8009c02:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00e      	beq.n	8009c28 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c0a:	2058      	movs	r0, #88	@ 0x58
 8009c0c:	f001 fe20 	bl	800b850 <pvPortMalloc>
 8009c10:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c1e:	e005      	b.n	8009c2c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	f001 fef7 	bl	800ba14 <vPortFree>
 8009c26:	e001      	b.n	8009c2c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d013      	beq.n	8009c5a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c32:	88fa      	ldrh	r2, [r7, #6]
 8009c34:	2300      	movs	r3, #0
 8009c36:	9303      	str	r3, [sp, #12]
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	68b9      	ldr	r1, [r7, #8]
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f80e 	bl	8009c6a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009c4e:	69f8      	ldr	r0, [r7, #28]
 8009c50:	f000 f8a2 	bl	8009d98 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009c54:	2301      	movs	r3, #1
 8009c56:	61bb      	str	r3, [r7, #24]
 8009c58:	e002      	b.n	8009c60 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c5e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009c60:	69bb      	ldr	r3, [r7, #24]
    }
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b088      	sub	sp, #32
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
 8009c76:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	461a      	mov	r2, r3
 8009c82:	21a5      	movs	r1, #165	@ 0xa5
 8009c84:	f004 f85a 	bl	800dd3c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009c92:	3b01      	subs	r3, #1
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	f023 0307 	bic.w	r3, r3, #7
 8009ca0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	f003 0307 	and.w	r3, r3, #7
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00b      	beq.n	8009cc4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	617b      	str	r3, [r7, #20]
    }
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	e7fd      	b.n	8009cc0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d01f      	beq.n	8009d0a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cca:	2300      	movs	r3, #0
 8009ccc:	61fb      	str	r3, [r7, #28]
 8009cce:	e012      	b.n	8009cf6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	7819      	ldrb	r1, [r3, #0]
 8009cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	3334      	adds	r3, #52	@ 0x34
 8009ce0:	460a      	mov	r2, r1
 8009ce2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	4413      	add	r3, r2
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d006      	beq.n	8009cfe <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	61fb      	str	r3, [r7, #28]
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	2b09      	cmp	r3, #9
 8009cfa:	d9e9      	bls.n	8009cd0 <prvInitialiseNewTask+0x66>
 8009cfc:	e000      	b.n	8009d00 <prvInitialiseNewTask+0x96>
            {
                break;
 8009cfe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d08:	e003      	b.n	8009d12 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d901      	bls.n	8009d1c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d18:	2304      	movs	r3, #4
 8009d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d20:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d26:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8009d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	3304      	adds	r3, #4
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff f800 	bl	8008d38 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	3318      	adds	r3, #24
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fe fffb 	bl	8008d38 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d46:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d4a:	f1c3 0205 	rsb	r2, r3, #5
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d56:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5a:	3350      	adds	r3, #80	@ 0x50
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f003 ffeb 	bl	800dd3c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	3354      	adds	r3, #84	@ 0x54
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f003 ffe4 	bl	800dd3c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	68f9      	ldr	r1, [r7, #12]
 8009d78:	69b8      	ldr	r0, [r7, #24]
 8009d7a:	f001 fa87 	bl	800b28c <pxPortInitialiseStack>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d8e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009d90:	bf00      	nop
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009d98:	b5b0      	push	{r4, r5, r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009da0:	f001 fc24 	bl	800b5ec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009da4:	4b3b      	ldr	r3, [pc, #236]	@ (8009e94 <prvAddNewTaskToReadyList+0xfc>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3301      	adds	r3, #1
 8009daa:	4a3a      	ldr	r2, [pc, #232]	@ (8009e94 <prvAddNewTaskToReadyList+0xfc>)
 8009dac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009dae:	4b3a      	ldr	r3, [pc, #232]	@ (8009e98 <prvAddNewTaskToReadyList+0x100>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009db6:	4a38      	ldr	r2, [pc, #224]	@ (8009e98 <prvAddNewTaskToReadyList+0x100>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dbc:	4b35      	ldr	r3, [pc, #212]	@ (8009e94 <prvAddNewTaskToReadyList+0xfc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d110      	bne.n	8009de6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009dc4:	f000 fc6a 	bl	800a69c <prvInitialiseTaskLists>
 8009dc8:	e00d      	b.n	8009de6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009dca:	4b34      	ldr	r3, [pc, #208]	@ (8009e9c <prvAddNewTaskToReadyList+0x104>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d109      	bne.n	8009de6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009dd2:	4b31      	ldr	r3, [pc, #196]	@ (8009e98 <prvAddNewTaskToReadyList+0x100>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d802      	bhi.n	8009de6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009de0:	4a2d      	ldr	r2, [pc, #180]	@ (8009e98 <prvAddNewTaskToReadyList+0x100>)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009de6:	4b2e      	ldr	r3, [pc, #184]	@ (8009ea0 <prvAddNewTaskToReadyList+0x108>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3301      	adds	r3, #1
 8009dec:	4a2c      	ldr	r2, [pc, #176]	@ (8009ea0 <prvAddNewTaskToReadyList+0x108>)
 8009dee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009df0:	4b2b      	ldr	r3, [pc, #172]	@ (8009ea0 <prvAddNewTaskToReadyList+0x108>)
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d016      	beq.n	8009e2c <prvAddNewTaskToReadyList+0x94>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f003 fb01 	bl	800d408 <SEGGER_SYSVIEW_OnTaskCreate>
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e16:	461d      	mov	r5, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e22:	1ae3      	subs	r3, r4, r3
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	462b      	mov	r3, r5
 8009e28:	f001 ffc4 	bl	800bdb4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f003 fb6e 	bl	800d510 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	2201      	movs	r2, #1
 8009e3a:	409a      	lsls	r2, r3
 8009e3c:	4b19      	ldr	r3, [pc, #100]	@ (8009ea4 <prvAddNewTaskToReadyList+0x10c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	4a18      	ldr	r2, [pc, #96]	@ (8009ea4 <prvAddNewTaskToReadyList+0x10c>)
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4a15      	ldr	r2, [pc, #84]	@ (8009ea8 <prvAddNewTaskToReadyList+0x110>)
 8009e54:	441a      	add	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	f7fe ff78 	bl	8008d52 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009e62:	f001 fbf5 	bl	800b650 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009e66:	4b0d      	ldr	r3, [pc, #52]	@ (8009e9c <prvAddNewTaskToReadyList+0x104>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00e      	beq.n	8009e8c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <prvAddNewTaskToReadyList+0x100>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d207      	bcs.n	8009e8c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009eac <prvAddNewTaskToReadyList+0x114>)
 8009e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bdb0      	pop	{r4, r5, r7, pc}
 8009e94:	200006f4 	.word	0x200006f4
 8009e98:	2000061c 	.word	0x2000061c
 8009e9c:	20000700 	.word	0x20000700
 8009ea0:	20000710 	.word	0x20000710
 8009ea4:	200006fc 	.word	0x200006fc
 8009ea8:	20000620 	.word	0x20000620
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d01c      	beq.n	8009efc <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009ec2:	4b16      	ldr	r3, [pc, #88]	@ (8009f1c <vTaskDelay+0x6c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <vTaskDelay+0x32>
        __asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	60bb      	str	r3, [r7, #8]
    }
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	e7fd      	b.n	8009ede <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009ee2:	f000 f881 	bl	8009fe8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	2023      	movs	r0, #35	@ 0x23
 8009eea:	f002 fd91 	bl	800ca10 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009eee:	2100      	movs	r1, #0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fe35 	bl	800ab60 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009ef6:	f000 f885 	bl	800a004 <xTaskResumeAll>
 8009efa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d107      	bne.n	8009f12 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8009f02:	4b07      	ldr	r3, [pc, #28]	@ (8009f20 <vTaskDelay+0x70>)
 8009f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	2000071c 	.word	0x2000071c
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009f2a:	4b27      	ldr	r3, [pc, #156]	@ (8009fc8 <vTaskStartScheduler+0xa4>)
 8009f2c:	9301      	str	r3, [sp, #4]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	2300      	movs	r3, #0
 8009f34:	2282      	movs	r2, #130	@ 0x82
 8009f36:	4925      	ldr	r1, [pc, #148]	@ (8009fcc <vTaskStartScheduler+0xa8>)
 8009f38:	4825      	ldr	r0, [pc, #148]	@ (8009fd0 <vTaskStartScheduler+0xac>)
 8009f3a:	f7ff fe55 	bl	8009be8 <xTaskCreate>
 8009f3e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d102      	bne.n	8009f4c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009f46:	f000 fe83 	bl	800ac50 <xTimerCreateTimerTask>
 8009f4a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d124      	bne.n	8009f9c <vTaskStartScheduler+0x78>
        __asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f56:	f383 8811 	msr	BASEPRI, r3
 8009f5a:	f3bf 8f6f 	isb	sy
 8009f5e:	f3bf 8f4f 	dsb	sy
 8009f62:	60bb      	str	r3, [r7, #8]
    }
 8009f64:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009f66:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd4 <vTaskStartScheduler+0xb0>)
 8009f68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f6c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fd8 <vTaskStartScheduler+0xb4>)
 8009f70:	2201      	movs	r2, #1
 8009f72:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f74:	4b19      	ldr	r3, [pc, #100]	@ (8009fdc <vTaskStartScheduler+0xb8>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009f7a:	4b19      	ldr	r3, [pc, #100]	@ (8009fe0 <vTaskStartScheduler+0xbc>)
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b12      	ldr	r3, [pc, #72]	@ (8009fc8 <vTaskStartScheduler+0xa4>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d102      	bne.n	8009f8c <vTaskStartScheduler+0x68>
 8009f86:	f003 fa23 	bl	800d3d0 <SEGGER_SYSVIEW_OnIdle>
 8009f8a:	e004      	b.n	8009f96 <vTaskStartScheduler+0x72>
 8009f8c:	4b14      	ldr	r3, [pc, #80]	@ (8009fe0 <vTaskStartScheduler+0xbc>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f003 fa7b 	bl	800d48c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009f96:	f001 fa05 	bl	800b3a4 <xPortStartScheduler>
 8009f9a:	e00f      	b.n	8009fbc <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fa2:	d10b      	bne.n	8009fbc <vTaskStartScheduler+0x98>
        __asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	607b      	str	r3, [r7, #4]
    }
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	e7fd      	b.n	8009fb8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009fbc:	4b09      	ldr	r3, [pc, #36]	@ (8009fe4 <vTaskStartScheduler+0xc0>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20000718 	.word	0x20000718
 8009fcc:	0800ee14 	.word	0x0800ee14
 8009fd0:	0800a66d 	.word	0x0800a66d
 8009fd4:	20000714 	.word	0x20000714
 8009fd8:	20000700 	.word	0x20000700
 8009fdc:	200006f8 	.word	0x200006f8
 8009fe0:	2000061c 	.word	0x2000061c
 8009fe4:	2000005c 	.word	0x2000005c

08009fe8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009fec:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <vTaskSuspendAll+0x18>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	4a03      	ldr	r2, [pc, #12]	@ (800a000 <vTaskSuspendAll+0x18>)
 8009ff4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009ff6:	bf00      	nop
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	2000071c 	.word	0x2000071c

0800a004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a00e:	2300      	movs	r3, #0
 800a010:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a012:	4b44      	ldr	r3, [pc, #272]	@ (800a124 <xTaskResumeAll+0x120>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10b      	bne.n	800a032 <xTaskResumeAll+0x2e>
        __asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	603b      	str	r3, [r7, #0]
    }
 800a02c:	bf00      	nop
 800a02e:	bf00      	nop
 800a030:	e7fd      	b.n	800a02e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a032:	f001 fadb 	bl	800b5ec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a036:	4b3b      	ldr	r3, [pc, #236]	@ (800a124 <xTaskResumeAll+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	4a39      	ldr	r2, [pc, #228]	@ (800a124 <xTaskResumeAll+0x120>)
 800a03e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a040:	4b38      	ldr	r3, [pc, #224]	@ (800a124 <xTaskResumeAll+0x120>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d165      	bne.n	800a114 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a048:	4b37      	ldr	r3, [pc, #220]	@ (800a128 <xTaskResumeAll+0x124>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d061      	beq.n	800a114 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a050:	e032      	b.n	800a0b8 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a052:	4b36      	ldr	r3, [pc, #216]	@ (800a12c <xTaskResumeAll+0x128>)
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	3318      	adds	r3, #24
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fed4 	bl	8008e0c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3304      	adds	r3, #4
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fecf 	bl	8008e0c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4618      	mov	r0, r3
 800a072:	f003 fa4d 	bl	800d510 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07a:	2201      	movs	r2, #1
 800a07c:	409a      	lsls	r2, r3
 800a07e:	4b2c      	ldr	r3, [pc, #176]	@ (800a130 <xTaskResumeAll+0x12c>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4313      	orrs	r3, r2
 800a084:	4a2a      	ldr	r2, [pc, #168]	@ (800a130 <xTaskResumeAll+0x12c>)
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4a27      	ldr	r2, [pc, #156]	@ (800a134 <xTaskResumeAll+0x130>)
 800a096:	441a      	add	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fe fe57 	bl	8008d52 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a8:	4b23      	ldr	r3, [pc, #140]	@ (800a138 <xTaskResumeAll+0x134>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d302      	bcc.n	800a0b8 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800a0b2:	4b22      	ldr	r3, [pc, #136]	@ (800a13c <xTaskResumeAll+0x138>)
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0b8:	4b1c      	ldr	r3, [pc, #112]	@ (800a12c <xTaskResumeAll+0x128>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1c8      	bne.n	800a052 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a0c6:	f000 fb67 	bl	800a798 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a140 <xTaskResumeAll+0x13c>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d010      	beq.n	800a0f8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a0d6:	f000 f859 	bl	800a18c <xTaskIncrementTick>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 800a0e0:	4b16      	ldr	r3, [pc, #88]	@ (800a13c <xTaskResumeAll+0x138>)
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1f1      	bne.n	800a0d6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800a0f2:	4b13      	ldr	r3, [pc, #76]	@ (800a140 <xTaskResumeAll+0x13c>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a0f8:	4b10      	ldr	r3, [pc, #64]	@ (800a13c <xTaskResumeAll+0x138>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d009      	beq.n	800a114 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a100:	2301      	movs	r3, #1
 800a102:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a104:	4b0f      	ldr	r3, [pc, #60]	@ (800a144 <xTaskResumeAll+0x140>)
 800a106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a114:	f001 fa9c 	bl	800b650 <vPortExitCritical>

    return xAlreadyYielded;
 800a118:	68bb      	ldr	r3, [r7, #8]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	2000071c 	.word	0x2000071c
 800a128:	200006f4 	.word	0x200006f4
 800a12c:	200006b4 	.word	0x200006b4
 800a130:	200006fc 	.word	0x200006fc
 800a134:	20000620 	.word	0x20000620
 800a138:	2000061c 	.word	0x2000061c
 800a13c:	20000708 	.word	0x20000708
 800a140:	20000704 	.word	0x20000704
 800a144:	e000ed04 	.word	0xe000ed04

0800a148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a14e:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <xTaskGetTickCount+0x1c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a154:	687b      	ldr	r3, [r7, #4]
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	200006f8 	.word	0x200006f8

0800a168 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a16e:	f001 fb2d 	bl	800b7cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a172:	2300      	movs	r3, #0
 800a174:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a176:	4b04      	ldr	r3, [pc, #16]	@ (800a188 <xTaskGetTickCountFromISR+0x20>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a17c:	683b      	ldr	r3, [r7, #0]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	200006f8 	.word	0x200006f8

0800a18c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a192:	2300      	movs	r3, #0
 800a194:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a196:	4b51      	ldr	r3, [pc, #324]	@ (800a2dc <xTaskIncrementTick+0x150>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f040 8093 	bne.w	800a2c6 <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1a0:	4b4f      	ldr	r3, [pc, #316]	@ (800a2e0 <xTaskIncrementTick+0x154>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a1a8:	4a4d      	ldr	r2, [pc, #308]	@ (800a2e0 <xTaskIncrementTick+0x154>)
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d121      	bne.n	800a1f8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800a1b4:	4b4b      	ldr	r3, [pc, #300]	@ (800a2e4 <xTaskIncrementTick+0x158>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <xTaskIncrementTick+0x4a>
        __asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	603b      	str	r3, [r7, #0]
    }
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <xTaskIncrementTick+0x46>
 800a1d6:	4b43      	ldr	r3, [pc, #268]	@ (800a2e4 <xTaskIncrementTick+0x158>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	4b42      	ldr	r3, [pc, #264]	@ (800a2e8 <xTaskIncrementTick+0x15c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a40      	ldr	r2, [pc, #256]	@ (800a2e4 <xTaskIncrementTick+0x158>)
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	4a40      	ldr	r2, [pc, #256]	@ (800a2e8 <xTaskIncrementTick+0x15c>)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	4b40      	ldr	r3, [pc, #256]	@ (800a2ec <xTaskIncrementTick+0x160>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	4a3e      	ldr	r2, [pc, #248]	@ (800a2ec <xTaskIncrementTick+0x160>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	f000 fad0 	bl	800a798 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a1f8:	4b3d      	ldr	r3, [pc, #244]	@ (800a2f0 <xTaskIncrementTick+0x164>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d34c      	bcc.n	800a29c <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a202:	4b38      	ldr	r3, [pc, #224]	@ (800a2e4 <xTaskIncrementTick+0x158>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a20c:	4b38      	ldr	r3, [pc, #224]	@ (800a2f0 <xTaskIncrementTick+0x164>)
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a212:	601a      	str	r2, [r3, #0]
                    break;
 800a214:	e042      	b.n	800a29c <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a216:	4b33      	ldr	r3, [pc, #204]	@ (800a2e4 <xTaskIncrementTick+0x158>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d203      	bcs.n	800a236 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a22e:	4a30      	ldr	r2, [pc, #192]	@ (800a2f0 <xTaskIncrementTick+0x164>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a234:	e032      	b.n	800a29c <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	3304      	adds	r3, #4
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fde6 	bl	8008e0c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a244:	2b00      	cmp	r3, #0
 800a246:	d004      	beq.n	800a252 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	3318      	adds	r3, #24
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe fddd 	bl	8008e0c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	4618      	mov	r0, r3
 800a256:	f003 f95b 	bl	800d510 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25e:	2201      	movs	r2, #1
 800a260:	409a      	lsls	r2, r3
 800a262:	4b24      	ldr	r3, [pc, #144]	@ (800a2f4 <xTaskIncrementTick+0x168>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4313      	orrs	r3, r2
 800a268:	4a22      	ldr	r2, [pc, #136]	@ (800a2f4 <xTaskIncrementTick+0x168>)
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4a1f      	ldr	r2, [pc, #124]	@ (800a2f8 <xTaskIncrementTick+0x16c>)
 800a27a:	441a      	add	r2, r3
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	3304      	adds	r3, #4
 800a280:	4619      	mov	r1, r3
 800a282:	4610      	mov	r0, r2
 800a284:	f7fe fd65 	bl	8008d52 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2fc <xTaskIncrementTick+0x170>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a292:	429a      	cmp	r2, r3
 800a294:	d3b5      	bcc.n	800a202 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800a296:	2301      	movs	r3, #1
 800a298:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29a:	e7b2      	b.n	800a202 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a29c:	4b17      	ldr	r3, [pc, #92]	@ (800a2fc <xTaskIncrementTick+0x170>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a2:	4915      	ldr	r1, [pc, #84]	@ (800a2f8 <xTaskIncrementTick+0x16c>)
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d901      	bls.n	800a2b8 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a2b8:	4b11      	ldr	r3, [pc, #68]	@ (800a300 <xTaskIncrementTick+0x174>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d007      	beq.n	800a2d0 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	e004      	b.n	800a2d0 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a304 <xTaskIncrementTick+0x178>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	4a0d      	ldr	r2, [pc, #52]	@ (800a304 <xTaskIncrementTick+0x178>)
 800a2ce:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a2d0:	697b      	ldr	r3, [r7, #20]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	2000071c 	.word	0x2000071c
 800a2e0:	200006f8 	.word	0x200006f8
 800a2e4:	200006ac 	.word	0x200006ac
 800a2e8:	200006b0 	.word	0x200006b0
 800a2ec:	2000070c 	.word	0x2000070c
 800a2f0:	20000714 	.word	0x20000714
 800a2f4:	200006fc 	.word	0x200006fc
 800a2f8:	20000620 	.word	0x20000620
 800a2fc:	2000061c 	.word	0x2000061c
 800a300:	20000708 	.word	0x20000708
 800a304:	20000704 	.word	0x20000704

0800a308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a30e:	4b2d      	ldr	r3, [pc, #180]	@ (800a3c4 <vTaskSwitchContext+0xbc>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a316:	4b2c      	ldr	r3, [pc, #176]	@ (800a3c8 <vTaskSwitchContext+0xc0>)
 800a318:	2201      	movs	r2, #1
 800a31a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a31c:	e04e      	b.n	800a3bc <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800a31e:	4b2a      	ldr	r3, [pc, #168]	@ (800a3c8 <vTaskSwitchContext+0xc0>)
 800a320:	2200      	movs	r2, #0
 800a322:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a324:	4b29      	ldr	r3, [pc, #164]	@ (800a3cc <vTaskSwitchContext+0xc4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	fab3 f383 	clz	r3, r3
 800a330:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	f1c3 031f 	rsb	r3, r3, #31
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	4925      	ldr	r1, [pc, #148]	@ (800a3d0 <vTaskSwitchContext+0xc8>)
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10b      	bne.n	800a366 <vTaskSwitchContext+0x5e>
        __asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
    }
 800a360:	bf00      	nop
 800a362:	bf00      	nop
 800a364:	e7fd      	b.n	800a362 <vTaskSwitchContext+0x5a>
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	4613      	mov	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4a17      	ldr	r2, [pc, #92]	@ (800a3d0 <vTaskSwitchContext+0xc8>)
 800a372:	4413      	add	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	605a      	str	r2, [r3, #4]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	3308      	adds	r3, #8
 800a388:	429a      	cmp	r2, r3
 800a38a:	d104      	bne.n	800a396 <vTaskSwitchContext+0x8e>
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	605a      	str	r2, [r3, #4]
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d4 <vTaskSwitchContext+0xcc>)
 800a39e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <vTaskSwitchContext+0xcc>)
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d8 <vTaskSwitchContext+0xd0>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d102      	bne.n	800a3b2 <vTaskSwitchContext+0xaa>
 800a3ac:	f003 f810 	bl	800d3d0 <SEGGER_SYSVIEW_OnIdle>
}
 800a3b0:	e004      	b.n	800a3bc <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800a3b2:	4b08      	ldr	r3, [pc, #32]	@ (800a3d4 <vTaskSwitchContext+0xcc>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f003 f868 	bl	800d48c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a3bc:	bf00      	nop
 800a3be:	3718      	adds	r7, #24
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	2000071c 	.word	0x2000071c
 800a3c8:	20000708 	.word	0x20000708
 800a3cc:	200006fc 	.word	0x200006fc
 800a3d0:	20000620 	.word	0x20000620
 800a3d4:	2000061c 	.word	0x2000061c
 800a3d8:	20000718 	.word	0x20000718

0800a3dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	60fb      	str	r3, [r7, #12]
    }
 800a3fe:	bf00      	nop
 800a400:	bf00      	nop
 800a402:	e7fd      	b.n	800a400 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a404:	4b07      	ldr	r3, [pc, #28]	@ (800a424 <vTaskPlaceOnEventList+0x48>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3318      	adds	r3, #24
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7fe fcc4 	bl	8008d9a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a412:	2101      	movs	r1, #1
 800a414:	6838      	ldr	r0, [r7, #0]
 800a416:	f000 fba3 	bl	800ab60 <prvAddCurrentTaskToDelayedList>
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	2000061c 	.word	0x2000061c

0800a428 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10b      	bne.n	800a452 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	617b      	str	r3, [r7, #20]
    }
 800a44c:	bf00      	nop
 800a44e:	bf00      	nop
 800a450:	e7fd      	b.n	800a44e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <vTaskPlaceOnEventListRestricted+0x5c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3318      	adds	r3, #24
 800a458:	4619      	mov	r1, r3
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f7fe fc79 	bl	8008d52 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800a466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a46a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a46c:	2024      	movs	r0, #36	@ 0x24
 800a46e:	f002 fab1 	bl	800c9d4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	68b8      	ldr	r0, [r7, #8]
 800a476:	f000 fb73 	bl	800ab60 <prvAddCurrentTaskToDelayedList>
    }
 800a47a:	bf00      	nop
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	2000061c 	.word	0x2000061c

0800a488 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a2:	f383 8811 	msr	BASEPRI, r3
 800a4a6:	f3bf 8f6f 	isb	sy
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	60fb      	str	r3, [r7, #12]
    }
 800a4b0:	bf00      	nop
 800a4b2:	bf00      	nop
 800a4b4:	e7fd      	b.n	800a4b2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	3318      	adds	r3, #24
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe fca6 	bl	8008e0c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c0:	4b1f      	ldr	r3, [pc, #124]	@ (800a540 <xTaskRemoveFromEventList+0xb8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d120      	bne.n	800a50a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fe fc9d 	bl	8008e0c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f003 f81b 	bl	800d510 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4de:	2201      	movs	r2, #1
 800a4e0:	409a      	lsls	r2, r3
 800a4e2:	4b18      	ldr	r3, [pc, #96]	@ (800a544 <xTaskRemoveFromEventList+0xbc>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	4a16      	ldr	r2, [pc, #88]	@ (800a544 <xTaskRemoveFromEventList+0xbc>)
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	4a13      	ldr	r2, [pc, #76]	@ (800a548 <xTaskRemoveFromEventList+0xc0>)
 800a4fa:	441a      	add	r2, r3
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	3304      	adds	r3, #4
 800a500:	4619      	mov	r1, r3
 800a502:	4610      	mov	r0, r2
 800a504:	f7fe fc25 	bl	8008d52 <vListInsertEnd>
 800a508:	e005      	b.n	800a516 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3318      	adds	r3, #24
 800a50e:	4619      	mov	r1, r3
 800a510:	480e      	ldr	r0, [pc, #56]	@ (800a54c <xTaskRemoveFromEventList+0xc4>)
 800a512:	f7fe fc1e 	bl	8008d52 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51a:	4b0d      	ldr	r3, [pc, #52]	@ (800a550 <xTaskRemoveFromEventList+0xc8>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	429a      	cmp	r2, r3
 800a522:	d905      	bls.n	800a530 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a528:	4b0a      	ldr	r3, [pc, #40]	@ (800a554 <xTaskRemoveFromEventList+0xcc>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e001      	b.n	800a534 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800a530:	2300      	movs	r3, #0
 800a532:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a534:	697b      	ldr	r3, [r7, #20]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	2000071c 	.word	0x2000071c
 800a544:	200006fc 	.word	0x200006fc
 800a548:	20000620 	.word	0x20000620
 800a54c:	200006b4 	.word	0x200006b4
 800a550:	2000061c 	.word	0x2000061c
 800a554:	20000708 	.word	0x20000708

0800a558 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a560:	4b06      	ldr	r3, [pc, #24]	@ (800a57c <vTaskInternalSetTimeOutState+0x24>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a568:	4b05      	ldr	r3, [pc, #20]	@ (800a580 <vTaskInternalSetTimeOutState+0x28>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	605a      	str	r2, [r3, #4]
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr
 800a57c:	2000070c 	.word	0x2000070c
 800a580:	200006f8 	.word	0x200006f8

0800a584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b088      	sub	sp, #32
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10b      	bne.n	800a5ac <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	613b      	str	r3, [r7, #16]
    }
 800a5a6:	bf00      	nop
 800a5a8:	bf00      	nop
 800a5aa:	e7fd      	b.n	800a5a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10b      	bne.n	800a5ca <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60fb      	str	r3, [r7, #12]
    }
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a5ca:	f001 f80f 	bl	800b5ec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a5ce:	4b1f      	ldr	r3, [pc, #124]	@ (800a64c <xTaskCheckForTimeOut+0xc8>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5e6:	d102      	bne.n	800a5ee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	e026      	b.n	800a63c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	4b17      	ldr	r3, [pc, #92]	@ (800a650 <xTaskCheckForTimeOut+0xcc>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d00a      	beq.n	800a610 <xTaskCheckForTimeOut+0x8c>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	429a      	cmp	r2, r3
 800a602:	d305      	bcc.n	800a610 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a604:	2301      	movs	r3, #1
 800a606:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e015      	b.n	800a63c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	697a      	ldr	r2, [r7, #20]
 800a616:	429a      	cmp	r2, r3
 800a618:	d20b      	bcs.n	800a632 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	1ad2      	subs	r2, r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff ff96 	bl	800a558 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a62c:	2300      	movs	r3, #0
 800a62e:	61fb      	str	r3, [r7, #28]
 800a630:	e004      	b.n	800a63c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2200      	movs	r2, #0
 800a636:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a63c:	f001 f808 	bl	800b650 <vPortExitCritical>

    return xReturn;
 800a640:	69fb      	ldr	r3, [r7, #28]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	200006f8 	.word	0x200006f8
 800a650:	2000070c 	.word	0x2000070c

0800a654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a654:	b480      	push	{r7}
 800a656:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a658:	4b03      	ldr	r3, [pc, #12]	@ (800a668 <vTaskMissedYield+0x14>)
 800a65a:	2201      	movs	r2, #1
 800a65c:	601a      	str	r2, [r3, #0]
}
 800a65e:	bf00      	nop
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	20000708 	.word	0x20000708

0800a66c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a674:	f000 f852 	bl	800a71c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a678:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <prvIdleTask+0x28>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d9f9      	bls.n	800a674 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800a680:	4b05      	ldr	r3, [pc, #20]	@ (800a698 <prvIdleTask+0x2c>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a690:	e7f0      	b.n	800a674 <prvIdleTask+0x8>
 800a692:	bf00      	nop
 800a694:	20000620 	.word	0x20000620
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	607b      	str	r3, [r7, #4]
 800a6a6:	e00c      	b.n	800a6c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4a12      	ldr	r2, [pc, #72]	@ (800a6fc <prvInitialiseTaskLists+0x60>)
 800a6b4:	4413      	add	r3, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe fb1e 	bl	8008cf8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	607b      	str	r3, [r7, #4]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d9ef      	bls.n	800a6a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a6c8:	480d      	ldr	r0, [pc, #52]	@ (800a700 <prvInitialiseTaskLists+0x64>)
 800a6ca:	f7fe fb15 	bl	8008cf8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a6ce:	480d      	ldr	r0, [pc, #52]	@ (800a704 <prvInitialiseTaskLists+0x68>)
 800a6d0:	f7fe fb12 	bl	8008cf8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a6d4:	480c      	ldr	r0, [pc, #48]	@ (800a708 <prvInitialiseTaskLists+0x6c>)
 800a6d6:	f7fe fb0f 	bl	8008cf8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800a6da:	480c      	ldr	r0, [pc, #48]	@ (800a70c <prvInitialiseTaskLists+0x70>)
 800a6dc:	f7fe fb0c 	bl	8008cf8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800a6e0:	480b      	ldr	r0, [pc, #44]	@ (800a710 <prvInitialiseTaskLists+0x74>)
 800a6e2:	f7fe fb09 	bl	8008cf8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a6e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a714 <prvInitialiseTaskLists+0x78>)
 800a6e8:	4a05      	ldr	r2, [pc, #20]	@ (800a700 <prvInitialiseTaskLists+0x64>)
 800a6ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <prvInitialiseTaskLists+0x7c>)
 800a6ee:	4a05      	ldr	r2, [pc, #20]	@ (800a704 <prvInitialiseTaskLists+0x68>)
 800a6f0:	601a      	str	r2, [r3, #0]
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000620 	.word	0x20000620
 800a700:	20000684 	.word	0x20000684
 800a704:	20000698 	.word	0x20000698
 800a708:	200006b4 	.word	0x200006b4
 800a70c:	200006c8 	.word	0x200006c8
 800a710:	200006e0 	.word	0x200006e0
 800a714:	200006ac 	.word	0x200006ac
 800a718:	200006b0 	.word	0x200006b0

0800a71c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a722:	e019      	b.n	800a758 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800a724:	f000 ff62 	bl	800b5ec <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a728:	4b10      	ldr	r3, [pc, #64]	@ (800a76c <prvCheckTasksWaitingTermination+0x50>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3304      	adds	r3, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fb69 	bl	8008e0c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800a73a:	4b0d      	ldr	r3, [pc, #52]	@ (800a770 <prvCheckTasksWaitingTermination+0x54>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3b01      	subs	r3, #1
 800a740:	4a0b      	ldr	r2, [pc, #44]	@ (800a770 <prvCheckTasksWaitingTermination+0x54>)
 800a742:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800a744:	4b0b      	ldr	r3, [pc, #44]	@ (800a774 <prvCheckTasksWaitingTermination+0x58>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3b01      	subs	r3, #1
 800a74a:	4a0a      	ldr	r2, [pc, #40]	@ (800a774 <prvCheckTasksWaitingTermination+0x58>)
 800a74c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800a74e:	f000 ff7f 	bl	800b650 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f810 	bl	800a778 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a758:	4b06      	ldr	r3, [pc, #24]	@ (800a774 <prvCheckTasksWaitingTermination+0x58>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e1      	bne.n	800a724 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	200006c8 	.word	0x200006c8
 800a770:	200006f4 	.word	0x200006f4
 800a774:	200006dc 	.word	0x200006dc

0800a778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a784:	4618      	mov	r0, r3
 800a786:	f001 f945 	bl	800ba14 <vPortFree>
                vPortFree( pxTCB );
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 f942 	bl	800ba14 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a79c:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c8 <prvResetNextTaskUnblockTime+0x30>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d104      	bne.n	800a7b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a7a6:	4b09      	ldr	r3, [pc, #36]	@ (800a7cc <prvResetNextTaskUnblockTime+0x34>)
 800a7a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a7ae:	e005      	b.n	800a7bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7b0:	4b05      	ldr	r3, [pc, #20]	@ (800a7c8 <prvResetNextTaskUnblockTime+0x30>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a04      	ldr	r2, [pc, #16]	@ (800a7cc <prvResetNextTaskUnblockTime+0x34>)
 800a7ba:	6013      	str	r3, [r2, #0]
}
 800a7bc:	bf00      	nop
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	200006ac 	.word	0x200006ac
 800a7cc:	20000714 	.word	0x20000714

0800a7d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a804 <xTaskGetSchedulerState+0x34>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d102      	bne.n	800a7e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	e008      	b.n	800a7f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e4:	4b08      	ldr	r3, [pc, #32]	@ (800a808 <xTaskGetSchedulerState+0x38>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d102      	bne.n	800a7f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	607b      	str	r3, [r7, #4]
 800a7f0:	e001      	b.n	800a7f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a7f6:	687b      	ldr	r3, [r7, #4]
    }
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	20000700 	.word	0x20000700
 800a808:	2000071c 	.word	0x2000071c

0800a80c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d063      	beq.n	800a8ea <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a826:	4b33      	ldr	r3, [pc, #204]	@ (800a8f4 <xTaskPriorityInherit+0xe8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d253      	bcs.n	800a8d8 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	db06      	blt.n	800a846 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a838:	4b2e      	ldr	r3, [pc, #184]	@ (800a8f4 <xTaskPriorityInherit+0xe8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	f1c3 0205 	rsb	r2, r3, #5
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	6959      	ldr	r1, [r3, #20]
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a84e:	4613      	mov	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4a28      	ldr	r2, [pc, #160]	@ (800a8f8 <xTaskPriorityInherit+0xec>)
 800a858:	4413      	add	r3, r2
 800a85a:	4299      	cmp	r1, r3
 800a85c:	d12f      	bne.n	800a8be <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	3304      	adds	r3, #4
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fad2 	bl	8008e0c <uxListRemove>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10a      	bne.n	800a884 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	2201      	movs	r2, #1
 800a874:	fa02 f303 	lsl.w	r3, r2, r3
 800a878:	43da      	mvns	r2, r3
 800a87a:	4b20      	ldr	r3, [pc, #128]	@ (800a8fc <xTaskPriorityInherit+0xf0>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4013      	ands	r3, r2
 800a880:	4a1e      	ldr	r2, [pc, #120]	@ (800a8fc <xTaskPriorityInherit+0xf0>)
 800a882:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a884:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f4 <xTaskPriorityInherit+0xe8>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a892:	2201      	movs	r2, #1
 800a894:	409a      	lsls	r2, r3
 800a896:	4b19      	ldr	r3, [pc, #100]	@ (800a8fc <xTaskPriorityInherit+0xf0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	4a17      	ldr	r2, [pc, #92]	@ (800a8fc <xTaskPriorityInherit+0xf0>)
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4a12      	ldr	r2, [pc, #72]	@ (800a8f8 <xTaskPriorityInherit+0xec>)
 800a8ae:	441a      	add	r2, r3
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f7fe fa4b 	bl	8008d52 <vListInsertEnd>
 800a8bc:	e004      	b.n	800a8c8 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8be:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <xTaskPriorityInherit+0xe8>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	2049      	movs	r0, #73	@ 0x49
 800a8ce:	f002 f89f 	bl	800ca10 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	e008      	b.n	800a8ea <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8dc:	4b05      	ldr	r3, [pc, #20]	@ (800a8f4 <xTaskPriorityInherit+0xe8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d201      	bcs.n	800a8ea <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
    }
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	2000061c 	.word	0x2000061c
 800a8f8:	20000620 	.word	0x20000620
 800a8fc:	200006fc 	.word	0x200006fc

0800a900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a90c:	2300      	movs	r3, #0
 800a90e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d06a      	beq.n	800a9ec <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a916:	4b38      	ldr	r3, [pc, #224]	@ (800a9f8 <xTaskPriorityDisinherit+0xf8>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d00b      	beq.n	800a938 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	60fb      	str	r3, [r7, #12]
    }
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10b      	bne.n	800a958 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	60bb      	str	r3, [r7, #8]
    }
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	e7fd      	b.n	800a954 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a95c:	1e5a      	subs	r2, r3, #1
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d03e      	beq.n	800a9ec <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d13a      	bne.n	800a9ec <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	3304      	adds	r3, #4
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe fa46 	bl	8008e0c <uxListRemove>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10a      	bne.n	800a99c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98a:	2201      	movs	r2, #1
 800a98c:	fa02 f303 	lsl.w	r3, r2, r3
 800a990:	43da      	mvns	r2, r3
 800a992:	4b1a      	ldr	r3, [pc, #104]	@ (800a9fc <xTaskPriorityDisinherit+0xfc>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4013      	ands	r3, r2
 800a998:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <xTaskPriorityDisinherit+0xfc>)
 800a99a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	204a      	movs	r0, #74	@ 0x4a
 800a9a2:	f002 f835 	bl	800ca10 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b2:	f1c3 0205 	rsb	r2, r3, #5
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9be:	2201      	movs	r2, #1
 800a9c0:	409a      	lsls	r2, r3
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a9fc <xTaskPriorityDisinherit+0xfc>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	4a0c      	ldr	r2, [pc, #48]	@ (800a9fc <xTaskPriorityDisinherit+0xfc>)
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4a09      	ldr	r2, [pc, #36]	@ (800aa00 <xTaskPriorityDisinherit+0x100>)
 800a9da:	441a      	add	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	f7fe f9b5 	bl	8008d52 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a9ec:	697b      	ldr	r3, [r7, #20]
    }
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3718      	adds	r7, #24
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	2000061c 	.word	0x2000061c
 800a9fc:	200006fc 	.word	0x200006fc
 800aa00:	20000620 	.word	0x20000620

0800aa04 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa12:	2301      	movs	r3, #1
 800aa14:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 8083 	beq.w	800ab24 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10b      	bne.n	800aa3e <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800aa26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	60fb      	str	r3, [r7, #12]
    }
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	e7fd      	b.n	800aa3a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d902      	bls.n	800aa4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	61fb      	str	r3, [r7, #28]
 800aa4c:	e002      	b.n	800aa54 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa52:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa58:	69fa      	ldr	r2, [r7, #28]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d062      	beq.n	800ab24 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d15d      	bne.n	800ab24 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800aa68:	4b30      	ldr	r3, [pc, #192]	@ (800ab2c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	69ba      	ldr	r2, [r7, #24]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d10b      	bne.n	800aa8a <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	60bb      	str	r3, [r7, #8]
    }
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
 800aa88:	e7fd      	b.n	800aa86 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	204a      	movs	r0, #74	@ 0x4a
 800aa90:	f001 ffbe 	bl	800ca10 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa98:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	69fa      	ldr	r2, [r7, #28]
 800aa9e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	db04      	blt.n	800aab2 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	f1c3 0205 	rsb	r2, r3, #5
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	6959      	ldr	r1, [r3, #20]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4613      	mov	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4a1b      	ldr	r2, [pc, #108]	@ (800ab30 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800aac2:	4413      	add	r3, r2
 800aac4:	4299      	cmp	r1, r3
 800aac6:	d12d      	bne.n	800ab24 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	3304      	adds	r3, #4
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe f99d 	bl	8008e0c <uxListRemove>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aadc:	2201      	movs	r2, #1
 800aade:	fa02 f303 	lsl.w	r3, r2, r3
 800aae2:	43da      	mvns	r2, r3
 800aae4:	4b13      	ldr	r3, [pc, #76]	@ (800ab34 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4013      	ands	r3, r2
 800aaea:	4a12      	ldr	r2, [pc, #72]	@ (800ab34 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800aaec:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 fd0d 	bl	800d510 <SEGGER_SYSVIEW_OnTaskStartReady>
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aafa:	2201      	movs	r2, #1
 800aafc:	409a      	lsls	r2, r3
 800aafe:	4b0d      	ldr	r3, [pc, #52]	@ (800ab34 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	4a0b      	ldr	r2, [pc, #44]	@ (800ab34 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4a06      	ldr	r2, [pc, #24]	@ (800ab30 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ab16:	441a      	add	r2, r3
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f7fe f917 	bl	8008d52 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ab24:	bf00      	nop
 800ab26:	3720      	adds	r7, #32
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	2000061c 	.word	0x2000061c
 800ab30:	20000620 	.word	0x20000620
 800ab34:	200006fc 	.word	0x200006fc

0800ab38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800ab3c:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d004      	beq.n	800ab4e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800ab44:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab4a:	3201      	adds	r2, #1
 800ab4c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800ab4e:	4b03      	ldr	r3, [pc, #12]	@ (800ab5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ab50:	681b      	ldr	r3, [r3, #0]
    }
 800ab52:	4618      	mov	r0, r3
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	2000061c 	.word	0x2000061c

0800ab60 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800ab6a:	4b32      	ldr	r3, [pc, #200]	@ (800ac34 <prvAddCurrentTaskToDelayedList+0xd4>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab70:	4b31      	ldr	r3, [pc, #196]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe f948 	bl	8008e0c <uxListRemove>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10b      	bne.n	800ab9a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab82:	4b2d      	ldr	r3, [pc, #180]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab88:	2201      	movs	r2, #1
 800ab8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8e:	43da      	mvns	r2, r3
 800ab90:	4b2a      	ldr	r3, [pc, #168]	@ (800ac3c <prvAddCurrentTaskToDelayedList+0xdc>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4013      	ands	r3, r2
 800ab96:	4a29      	ldr	r2, [pc, #164]	@ (800ac3c <prvAddCurrentTaskToDelayedList+0xdc>)
 800ab98:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aba0:	d110      	bne.n	800abc4 <prvAddCurrentTaskToDelayedList+0x64>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00d      	beq.n	800abc4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800aba8:	4b23      	ldr	r3, [pc, #140]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	211b      	movs	r1, #27
 800abae:	4618      	mov	r0, r3
 800abb0:	f002 fcf0 	bl	800d594 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb4:	4b20      	ldr	r3, [pc, #128]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3304      	adds	r3, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	4820      	ldr	r0, [pc, #128]	@ (800ac40 <prvAddCurrentTaskToDelayedList+0xe0>)
 800abbe:	f7fe f8c8 	bl	8008d52 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800abc2:	e032      	b.n	800ac2a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4413      	add	r3, r2
 800abca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abcc:	4b1a      	ldr	r3, [pc, #104]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d20f      	bcs.n	800abfc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800abdc:	4b16      	ldr	r3, [pc, #88]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2104      	movs	r1, #4
 800abe2:	4618      	mov	r0, r3
 800abe4:	f002 fcd6 	bl	800d594 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abe8:	4b16      	ldr	r3, [pc, #88]	@ (800ac44 <prvAddCurrentTaskToDelayedList+0xe4>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4b12      	ldr	r3, [pc, #72]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	4610      	mov	r0, r2
 800abf6:	f7fe f8d0 	bl	8008d9a <vListInsert>
}
 800abfa:	e016      	b.n	800ac2a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800abfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2104      	movs	r1, #4
 800ac02:	4618      	mov	r0, r3
 800ac04:	f002 fcc6 	bl	800d594 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac08:	4b0f      	ldr	r3, [pc, #60]	@ (800ac48 <prvAddCurrentTaskToDelayedList+0xe8>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac38 <prvAddCurrentTaskToDelayedList+0xd8>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4619      	mov	r1, r3
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7fe f8c0 	bl	8008d9a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800ac1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ac4c <prvAddCurrentTaskToDelayedList+0xec>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d202      	bcs.n	800ac2a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800ac24:	4a09      	ldr	r2, [pc, #36]	@ (800ac4c <prvAddCurrentTaskToDelayedList+0xec>)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6013      	str	r3, [r2, #0]
}
 800ac2a:	bf00      	nop
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	200006f8 	.word	0x200006f8
 800ac38:	2000061c 	.word	0x2000061c
 800ac3c:	200006fc 	.word	0x200006fc
 800ac40:	200006e0 	.word	0x200006e0
 800ac44:	200006b0 	.word	0x200006b0
 800ac48:	200006ac 	.word	0x200006ac
 800ac4c:	20000714 	.word	0x20000714

0800ac50 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800ac5a:	f000 fae1 	bl	800b220 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800ac5e:	4b12      	ldr	r3, [pc, #72]	@ (800aca8 <xTimerCreateTimerTask+0x58>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00b      	beq.n	800ac7e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800ac66:	4b11      	ldr	r3, [pc, #68]	@ (800acac <xTimerCreateTimerTask+0x5c>)
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800ac74:	490e      	ldr	r1, [pc, #56]	@ (800acb0 <xTimerCreateTimerTask+0x60>)
 800ac76:	480f      	ldr	r0, [pc, #60]	@ (800acb4 <xTimerCreateTimerTask+0x64>)
 800ac78:	f7fe ffb6 	bl	8009be8 <xTaskCreate>
 800ac7c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10b      	bne.n	800ac9c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	603b      	str	r3, [r7, #0]
    }
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	e7fd      	b.n	800ac98 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800ac9c:	687b      	ldr	r3, [r7, #4]
    }
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20000750 	.word	0x20000750
 800acac:	20000754 	.word	0x20000754
 800acb0:	0800ee1c 	.word	0x0800ee1c
 800acb4:	0800adf1 	.word	0x0800adf1

0800acb8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	@ 0x28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10b      	bne.n	800ace8 <xTimerGenericCommand+0x30>
        __asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	623b      	str	r3, [r7, #32]
    }
 800ace2:	bf00      	nop
 800ace4:	bf00      	nop
 800ace6:	e7fd      	b.n	800ace4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800ace8:	4b19      	ldr	r3, [pc, #100]	@ (800ad50 <xTimerGenericCommand+0x98>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d02a      	beq.n	800ad46 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	dc18      	bgt.n	800ad34 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad02:	f7ff fd65 	bl	800a7d0 <xTaskGetSchedulerState>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d109      	bne.n	800ad20 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad0c:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <xTimerGenericCommand+0x98>)
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	f107 0114 	add.w	r1, r7, #20
 800ad14:	2300      	movs	r3, #0
 800ad16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad18:	f7fe f998 	bl	800904c <xQueueGenericSend>
 800ad1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad1e:	e012      	b.n	800ad46 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad20:	4b0b      	ldr	r3, [pc, #44]	@ (800ad50 <xTimerGenericCommand+0x98>)
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	f107 0114 	add.w	r1, r7, #20
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f7fe f98e 	bl	800904c <xQueueGenericSend>
 800ad30:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad32:	e008      	b.n	800ad46 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad34:	4b06      	ldr	r3, [pc, #24]	@ (800ad50 <xTimerGenericCommand+0x98>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	f107 0114 	add.w	r1, r7, #20
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	f7fe faae 	bl	80092a0 <xQueueGenericSendFromISR>
 800ad44:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3728      	adds	r7, #40	@ 0x28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20000750 	.word	0x20000750

0800ad54 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad5e:	4b23      	ldr	r3, [pc, #140]	@ (800adec <prvProcessExpiredTimer+0x98>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7fe f84d 	bl	8008e0c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d023      	beq.n	800adc8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	699a      	ldr	r2, [r3, #24]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	18d1      	adds	r1, r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	6978      	ldr	r0, [r7, #20]
 800ad8e:	f000 f8d5 	bl	800af3c <prvInsertTimerInActiveList>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d020      	beq.n	800adda <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad98:	2300      	movs	r3, #0
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	2100      	movs	r1, #0
 800ada2:	6978      	ldr	r0, [r7, #20]
 800ada4:	f7ff ff88 	bl	800acb8 <xTimerGenericCommand>
 800ada8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d114      	bne.n	800adda <prvProcessExpiredTimer+0x86>
        __asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	60fb      	str	r3, [r7, #12]
    }
 800adc2:	bf00      	nop
 800adc4:	bf00      	nop
 800adc6:	e7fd      	b.n	800adc4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	b2da      	uxtb	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	6978      	ldr	r0, [r7, #20]
 800ade0:	4798      	blx	r3
    }
 800ade2:	bf00      	nop
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000748 	.word	0x20000748

0800adf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f859 	bl	800aeb4 <prvGetNextExpireTime>
 800ae02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4619      	mov	r1, r3
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f000 f805 	bl	800ae18 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800ae0e:	f000 f8d7 	bl	800afc0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae12:	bf00      	nop
 800ae14:	e7f0      	b.n	800adf8 <prvTimerTask+0x8>
	...

0800ae18 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ae22:	f7ff f8e1 	bl	8009fe8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae26:	f107 0308 	add.w	r3, r7, #8
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 f866 	bl	800aefc <prvSampleTimeNow>
 800ae30:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d130      	bne.n	800ae9a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10a      	bne.n	800ae54 <prvProcessTimerOrBlockTask+0x3c>
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d806      	bhi.n	800ae54 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ae46:	f7ff f8dd 	bl	800a004 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ff81 	bl	800ad54 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ae52:	e024      	b.n	800ae9e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d008      	beq.n	800ae6c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae5a:	4b13      	ldr	r3, [pc, #76]	@ (800aea8 <prvProcessTimerOrBlockTask+0x90>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <prvProcessTimerOrBlockTask+0x50>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e000      	b.n	800ae6a <prvProcessTimerOrBlockTask+0x52>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	@ (800aeac <prvProcessTimerOrBlockTask+0x94>)
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f7fe fe81 	bl	8009b80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800ae7e:	f7ff f8c1 	bl	800a004 <xTaskResumeAll>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800ae88:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <prvProcessTimerOrBlockTask+0x98>)
 800ae8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	f3bf 8f6f 	isb	sy
    }
 800ae98:	e001      	b.n	800ae9e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800ae9a:	f7ff f8b3 	bl	800a004 <xTaskResumeAll>
    }
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	2000074c 	.word	0x2000074c
 800aeac:	20000750 	.word	0x20000750
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aebc:	4b0e      	ldr	r3, [pc, #56]	@ (800aef8 <prvGetNextExpireTime+0x44>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <prvGetNextExpireTime+0x16>
 800aec6:	2201      	movs	r2, #1
 800aec8:	e000      	b.n	800aecc <prvGetNextExpireTime+0x18>
 800aeca:	2200      	movs	r2, #0
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d105      	bne.n	800aee4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aed8:	4b07      	ldr	r3, [pc, #28]	@ (800aef8 <prvGetNextExpireTime+0x44>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e001      	b.n	800aee8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800aee8:	68fb      	ldr	r3, [r7, #12]
    }
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	20000748 	.word	0x20000748

0800aefc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800af04:	f7ff f920 	bl	800a148 <xTaskGetTickCount>
 800af08:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800af0a:	4b0b      	ldr	r3, [pc, #44]	@ (800af38 <prvSampleTimeNow+0x3c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	429a      	cmp	r2, r3
 800af12:	d205      	bcs.n	800af20 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800af14:	f000 f91e 	bl	800b154 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e002      	b.n	800af26 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800af26:	4a04      	ldr	r2, [pc, #16]	@ (800af38 <prvSampleTimeNow+0x3c>)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800af2c:	68fb      	ldr	r3, [r7, #12]
    }
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20000758 	.word	0x20000758

0800af3c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d812      	bhi.n	800af88 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	1ad2      	subs	r2, r2, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d302      	bcc.n	800af76 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800af70:	2301      	movs	r3, #1
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	e01b      	b.n	800afae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af76:	4b10      	ldr	r3, [pc, #64]	@ (800afb8 <prvInsertTimerInActiveList+0x7c>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4619      	mov	r1, r3
 800af80:	4610      	mov	r0, r2
 800af82:	f7fd ff0a 	bl	8008d9a <vListInsert>
 800af86:	e012      	b.n	800afae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d206      	bcs.n	800af9e <prvInsertTimerInActiveList+0x62>
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d302      	bcc.n	800af9e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800af98:	2301      	movs	r3, #1
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e007      	b.n	800afae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af9e:	4b07      	ldr	r3, [pc, #28]	@ (800afbc <prvInsertTimerInActiveList+0x80>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	4610      	mov	r0, r2
 800afaa:	f7fd fef6 	bl	8008d9a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800afae:	697b      	ldr	r3, [r7, #20]
    }
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	2000074c 	.word	0x2000074c
 800afbc:	20000748 	.word	0x20000748

0800afc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	@ 0x30
 800afc4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afc6:	e0b2      	b.n	800b12e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f2c0 80af 	blt.w	800b12e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd6:	695b      	ldr	r3, [r3, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	3304      	adds	r3, #4
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fd ff13 	bl	8008e0c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afe6:	1d3b      	adds	r3, r7, #4
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff ff87 	bl	800aefc <prvSampleTimeNow>
 800afee:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	f200 8098 	bhi.w	800b128 <prvProcessReceivedCommands+0x168>
 800aff8:	a201      	add	r2, pc, #4	@ (adr r2, 800b000 <prvProcessReceivedCommands+0x40>)
 800affa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affe:	bf00      	nop
 800b000:	0800b029 	.word	0x0800b029
 800b004:	0800b029 	.word	0x0800b029
 800b008:	0800b029 	.word	0x0800b029
 800b00c:	0800b09f 	.word	0x0800b09f
 800b010:	0800b0b3 	.word	0x0800b0b3
 800b014:	0800b0ff 	.word	0x0800b0ff
 800b018:	0800b029 	.word	0x0800b029
 800b01c:	0800b029 	.word	0x0800b029
 800b020:	0800b09f 	.word	0x0800b09f
 800b024:	0800b0b3 	.word	0x0800b0b3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b02e:	f043 0301 	orr.w	r3, r3, #1
 800b032:	b2da      	uxtb	r2, r3
 800b034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	18d1      	adds	r1, r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a3a      	ldr	r2, [r7, #32]
 800b046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b048:	f7ff ff78 	bl	800af3c <prvInsertTimerInActiveList>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d06c      	beq.n	800b12c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b058:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d061      	beq.n	800b12c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	441a      	add	r2, r3
 800b070:	2300      	movs	r3, #0
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	2100      	movs	r1, #0
 800b078:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b07a:	f7ff fe1d 	bl	800acb8 <xTimerGenericCommand>
 800b07e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d152      	bne.n	800b12c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	61bb      	str	r3, [r7, #24]
    }
 800b098:	bf00      	nop
 800b09a:	bf00      	nop
 800b09c:	e7fd      	b.n	800b09a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0a4:	f023 0301 	bic.w	r3, r3, #1
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b0b0:	e03d      	b.n	800b12e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0b8:	f043 0301 	orr.w	r3, r3, #1
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10b      	bne.n	800b0ea <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	617b      	str	r3, [r7, #20]
    }
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	18d1      	adds	r1, r2, r3
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	6a3a      	ldr	r2, [r7, #32]
 800b0f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0f8:	f7ff ff20 	bl	800af3c <prvInsertTimerInActiveList>
                        break;
 800b0fc:	e017      	b.n	800b12e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d103      	bne.n	800b114 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800b10c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b10e:	f000 fc81 	bl	800ba14 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b112:	e00c      	b.n	800b12e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b11a:	f023 0301 	bic.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b122:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b126:	e002      	b.n	800b12e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b128:	bf00      	nop
 800b12a:	e000      	b.n	800b12e <prvProcessReceivedCommands+0x16e>
                        break;
 800b12c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b12e:	4b08      	ldr	r3, [pc, #32]	@ (800b150 <prvProcessReceivedCommands+0x190>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f107 0108 	add.w	r1, r7, #8
 800b136:	2200      	movs	r2, #0
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe f973 	bl	8009424 <xQueueReceive>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	f47f af41 	bne.w	800afc8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	3728      	adds	r7, #40	@ 0x28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20000750 	.word	0x20000750

0800b154 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b15a:	e049      	b.n	800b1f0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b15c:	4b2e      	ldr	r3, [pc, #184]	@ (800b218 <prvSwitchTimerLists+0xc4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b166:	4b2c      	ldr	r3, [pc, #176]	@ (800b218 <prvSwitchTimerLists+0xc4>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	3304      	adds	r3, #4
 800b174:	4618      	mov	r0, r3
 800b176:	f7fd fe49 	bl	8008e0c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b188:	f003 0304 	and.w	r3, r3, #4
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d02f      	beq.n	800b1f0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	4413      	add	r3, r2
 800b198:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d90e      	bls.n	800b1c0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	68ba      	ldr	r2, [r7, #8]
 800b1a6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b218 <prvSwitchTimerLists+0xc4>)
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	f7fd fdee 	bl	8008d9a <vListInsert>
 800b1be:	e017      	b.n	800b1f0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff fd74 	bl	800acb8 <xTimerGenericCommand>
 800b1d0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10b      	bne.n	800b1f0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	603b      	str	r3, [r7, #0]
    }
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	e7fd      	b.n	800b1ec <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1f0:	4b09      	ldr	r3, [pc, #36]	@ (800b218 <prvSwitchTimerLists+0xc4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1b0      	bne.n	800b15c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b1fa:	4b07      	ldr	r3, [pc, #28]	@ (800b218 <prvSwitchTimerLists+0xc4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b200:	4b06      	ldr	r3, [pc, #24]	@ (800b21c <prvSwitchTimerLists+0xc8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a04      	ldr	r2, [pc, #16]	@ (800b218 <prvSwitchTimerLists+0xc4>)
 800b206:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b208:	4a04      	ldr	r2, [pc, #16]	@ (800b21c <prvSwitchTimerLists+0xc8>)
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	6013      	str	r3, [r2, #0]
    }
 800b20e:	bf00      	nop
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20000748 	.word	0x20000748
 800b21c:	2000074c 	.word	0x2000074c

0800b220 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b224:	f000 f9e2 	bl	800b5ec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b228:	4b12      	ldr	r3, [pc, #72]	@ (800b274 <prvCheckForValidListAndQueue+0x54>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d11d      	bne.n	800b26c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b230:	4811      	ldr	r0, [pc, #68]	@ (800b278 <prvCheckForValidListAndQueue+0x58>)
 800b232:	f7fd fd61 	bl	8008cf8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b236:	4811      	ldr	r0, [pc, #68]	@ (800b27c <prvCheckForValidListAndQueue+0x5c>)
 800b238:	f7fd fd5e 	bl	8008cf8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b23c:	4b10      	ldr	r3, [pc, #64]	@ (800b280 <prvCheckForValidListAndQueue+0x60>)
 800b23e:	4a0e      	ldr	r2, [pc, #56]	@ (800b278 <prvCheckForValidListAndQueue+0x58>)
 800b240:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b242:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <prvCheckForValidListAndQueue+0x64>)
 800b244:	4a0d      	ldr	r2, [pc, #52]	@ (800b27c <prvCheckForValidListAndQueue+0x5c>)
 800b246:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b248:	2200      	movs	r2, #0
 800b24a:	210c      	movs	r1, #12
 800b24c:	200a      	movs	r0, #10
 800b24e:	f7fd fe71 	bl	8008f34 <xQueueGenericCreate>
 800b252:	4603      	mov	r3, r0
 800b254:	4a07      	ldr	r2, [pc, #28]	@ (800b274 <prvCheckForValidListAndQueue+0x54>)
 800b256:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b258:	4b06      	ldr	r3, [pc, #24]	@ (800b274 <prvCheckForValidListAndQueue+0x54>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d005      	beq.n	800b26c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b260:	4b04      	ldr	r3, [pc, #16]	@ (800b274 <prvCheckForValidListAndQueue+0x54>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4908      	ldr	r1, [pc, #32]	@ (800b288 <prvCheckForValidListAndQueue+0x68>)
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fc58 	bl	8009b1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b26c:	f000 f9f0 	bl	800b650 <vPortExitCritical>
    }
 800b270:	bf00      	nop
 800b272:	bd80      	pop	{r7, pc}
 800b274:	20000750 	.word	0x20000750
 800b278:	20000720 	.word	0x20000720
 800b27c:	20000734 	.word	0x20000734
 800b280:	20000748 	.word	0x20000748
 800b284:	2000074c 	.word	0x2000074c
 800b288:	0800ee24 	.word	0x0800ee24

0800b28c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	3b04      	subs	r3, #4
 800b29c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b2a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3b04      	subs	r3, #4
 800b2aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f023 0201 	bic.w	r2, r3, #1
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3b04      	subs	r3, #4
 800b2ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b2bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b2f0 <pxPortInitialiseStack+0x64>)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	3b14      	subs	r3, #20
 800b2c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3b04      	subs	r3, #4
 800b2d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f06f 0202 	mvn.w	r2, #2
 800b2da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3b20      	subs	r3, #32
 800b2e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	0800b2f5 	.word	0x0800b2f5

0800b2f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b2fe:	4b13      	ldr	r3, [pc, #76]	@ (800b34c <prvTaskExitError+0x58>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b306:	d00b      	beq.n	800b320 <prvTaskExitError+0x2c>
        __asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	60fb      	str	r3, [r7, #12]
    }
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <prvTaskExitError+0x28>
        __asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60bb      	str	r3, [r7, #8]
    }
 800b332:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b334:	bf00      	nop
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d0fc      	beq.n	800b336 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b33c:	bf00      	nop
 800b33e:	bf00      	nop
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	20000060 	.word	0x20000060

0800b350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b350:	4b07      	ldr	r3, [pc, #28]	@ (800b370 <pxCurrentTCBConst2>)
 800b352:	6819      	ldr	r1, [r3, #0]
 800b354:	6808      	ldr	r0, [r1, #0]
 800b356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35a:	f380 8809 	msr	PSP, r0
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f04f 0000 	mov.w	r0, #0
 800b366:	f380 8811 	msr	BASEPRI, r0
 800b36a:	4770      	bx	lr
 800b36c:	f3af 8000 	nop.w

0800b370 <pxCurrentTCBConst2>:
 800b370:	2000061c 	.word	0x2000061c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop

0800b378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b378:	4808      	ldr	r0, [pc, #32]	@ (800b39c <prvPortStartFirstTask+0x24>)
 800b37a:	6800      	ldr	r0, [r0, #0]
 800b37c:	6800      	ldr	r0, [r0, #0]
 800b37e:	f380 8808 	msr	MSP, r0
 800b382:	f04f 0000 	mov.w	r0, #0
 800b386:	f380 8814 	msr	CONTROL, r0
 800b38a:	b662      	cpsie	i
 800b38c:	b661      	cpsie	f
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	df00      	svc	0
 800b398:	bf00      	nop
 800b39a:	0000      	.short	0x0000
 800b39c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b3a0:	bf00      	nop
 800b3a2:	bf00      	nop

0800b3a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3aa:	4b47      	ldr	r3, [pc, #284]	@ (800b4c8 <xPortStartScheduler+0x124>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a47      	ldr	r2, [pc, #284]	@ (800b4cc <xPortStartScheduler+0x128>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d10b      	bne.n	800b3cc <xPortStartScheduler+0x28>
        __asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	613b      	str	r3, [r7, #16]
    }
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	e7fd      	b.n	800b3c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b4c8 <xPortStartScheduler+0x124>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a3f      	ldr	r2, [pc, #252]	@ (800b4d0 <xPortStartScheduler+0x12c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d10b      	bne.n	800b3ee <xPortStartScheduler+0x4a>
        __asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	60fb      	str	r3, [r7, #12]
    }
 800b3e8:	bf00      	nop
 800b3ea:	bf00      	nop
 800b3ec:	e7fd      	b.n	800b3ea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3ee:	4b39      	ldr	r3, [pc, #228]	@ (800b4d4 <xPortStartScheduler+0x130>)
 800b3f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	22ff      	movs	r2, #255	@ 0xff
 800b3fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b31      	ldr	r3, [pc, #196]	@ (800b4d8 <xPortStartScheduler+0x134>)
 800b414:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b416:	4b31      	ldr	r3, [pc, #196]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b418:	2207      	movs	r2, #7
 800b41a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b41c:	e009      	b.n	800b432 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b41e:	4b2f      	ldr	r3, [pc, #188]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3b01      	subs	r3, #1
 800b424:	4a2d      	ldr	r2, [pc, #180]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b426:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b432:	78fb      	ldrb	r3, [r7, #3]
 800b434:	b2db      	uxtb	r3, r3
 800b436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b43a:	2b80      	cmp	r3, #128	@ 0x80
 800b43c:	d0ef      	beq.n	800b41e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b43e:	4b27      	ldr	r3, [pc, #156]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f1c3 0307 	rsb	r3, r3, #7
 800b446:	2b04      	cmp	r3, #4
 800b448:	d00b      	beq.n	800b462 <xPortStartScheduler+0xbe>
        __asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	60bb      	str	r3, [r7, #8]
    }
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b462:	4b1e      	ldr	r3, [pc, #120]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	4a1c      	ldr	r2, [pc, #112]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b46a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b46c:	4b1b      	ldr	r3, [pc, #108]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b474:	4a19      	ldr	r2, [pc, #100]	@ (800b4dc <xPortStartScheduler+0x138>)
 800b476:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b480:	4b17      	ldr	r3, [pc, #92]	@ (800b4e0 <xPortStartScheduler+0x13c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a16      	ldr	r2, [pc, #88]	@ (800b4e0 <xPortStartScheduler+0x13c>)
 800b486:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b48a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b48c:	4b14      	ldr	r3, [pc, #80]	@ (800b4e0 <xPortStartScheduler+0x13c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a13      	ldr	r2, [pc, #76]	@ (800b4e0 <xPortStartScheduler+0x13c>)
 800b492:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b496:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b498:	f000 f968 	bl	800b76c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b49c:	4b11      	ldr	r3, [pc, #68]	@ (800b4e4 <xPortStartScheduler+0x140>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b4a2:	f000 f987 	bl	800b7b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4a6:	4b10      	ldr	r3, [pc, #64]	@ (800b4e8 <xPortStartScheduler+0x144>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a0f      	ldr	r2, [pc, #60]	@ (800b4e8 <xPortStartScheduler+0x144>)
 800b4ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b4b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b4b2:	f7ff ff61 	bl	800b378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b4b6:	f7fe ff27 	bl	800a308 <vTaskSwitchContext>
    prvTaskExitError();
 800b4ba:	f7ff ff1b 	bl	800b2f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	e000ed00 	.word	0xe000ed00
 800b4cc:	410fc271 	.word	0x410fc271
 800b4d0:	410fc270 	.word	0x410fc270
 800b4d4:	e000e400 	.word	0xe000e400
 800b4d8:	2000075c 	.word	0x2000075c
 800b4dc:	20000760 	.word	0x20000760
 800b4e0:	e000ed20 	.word	0xe000ed20
 800b4e4:	20000060 	.word	0x20000060
 800b4e8:	e000ef34 	.word	0xe000ef34

0800b4ec <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4f2:	4b38      	ldr	r3, [pc, #224]	@ (800b5d4 <vInitPrioGroupValue+0xe8>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a38      	ldr	r2, [pc, #224]	@ (800b5d8 <vInitPrioGroupValue+0xec>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d10b      	bne.n	800b514 <vInitPrioGroupValue+0x28>
        __asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	613b      	str	r3, [r7, #16]
    }
 800b50e:	bf00      	nop
 800b510:	bf00      	nop
 800b512:	e7fd      	b.n	800b510 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b514:	4b2f      	ldr	r3, [pc, #188]	@ (800b5d4 <vInitPrioGroupValue+0xe8>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a30      	ldr	r2, [pc, #192]	@ (800b5dc <vInitPrioGroupValue+0xf0>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d10b      	bne.n	800b536 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	60fb      	str	r3, [r7, #12]
    }
 800b530:	bf00      	nop
 800b532:	bf00      	nop
 800b534:	e7fd      	b.n	800b532 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b536:	4b2a      	ldr	r3, [pc, #168]	@ (800b5e0 <vInitPrioGroupValue+0xf4>)
 800b538:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	22ff      	movs	r2, #255	@ 0xff
 800b546:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	4b22      	ldr	r3, [pc, #136]	@ (800b5e4 <vInitPrioGroupValue+0xf8>)
 800b55c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b55e:	4b22      	ldr	r3, [pc, #136]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b560:	2207      	movs	r2, #7
 800b562:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b564:	e009      	b.n	800b57a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b566:	4b20      	ldr	r3, [pc, #128]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b56e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	b2db      	uxtb	r3, r3
 800b578:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b57a:	78fb      	ldrb	r3, [r7, #3]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b582:	2b80      	cmp	r3, #128	@ 0x80
 800b584:	d0ef      	beq.n	800b566 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b586:	4b18      	ldr	r3, [pc, #96]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f1c3 0307 	rsb	r3, r3, #7
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d00b      	beq.n	800b5aa <vInitPrioGroupValue+0xbe>
        __asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	60bb      	str	r3, [r7, #8]
    }
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	e7fd      	b.n	800b5a6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	021b      	lsls	r3, r3, #8
 800b5b0:	4a0d      	ldr	r2, [pc, #52]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b5b2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b5bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b5e8 <vInitPrioGroupValue+0xfc>)
 800b5be:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800b5c8:	bf00      	nop
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	e000ed00 	.word	0xe000ed00
 800b5d8:	410fc271 	.word	0x410fc271
 800b5dc:	410fc270 	.word	0x410fc270
 800b5e0:	e000e400 	.word	0xe000e400
 800b5e4:	2000075c 	.word	0x2000075c
 800b5e8:	20000760 	.word	0x20000760

0800b5ec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
        __asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	607b      	str	r3, [r7, #4]
    }
 800b604:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b606:	4b10      	ldr	r3, [pc, #64]	@ (800b648 <vPortEnterCritical+0x5c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3301      	adds	r3, #1
 800b60c:	4a0e      	ldr	r2, [pc, #56]	@ (800b648 <vPortEnterCritical+0x5c>)
 800b60e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b610:	4b0d      	ldr	r3, [pc, #52]	@ (800b648 <vPortEnterCritical+0x5c>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d110      	bne.n	800b63a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b618:	4b0c      	ldr	r3, [pc, #48]	@ (800b64c <vPortEnterCritical+0x60>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00b      	beq.n	800b63a <vPortEnterCritical+0x4e>
        __asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	603b      	str	r3, [r7, #0]
    }
 800b634:	bf00      	nop
 800b636:	bf00      	nop
 800b638:	e7fd      	b.n	800b636 <vPortEnterCritical+0x4a>
    }
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000060 	.word	0x20000060
 800b64c:	e000ed04 	.word	0xe000ed04

0800b650 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b656:	4b12      	ldr	r3, [pc, #72]	@ (800b6a0 <vPortExitCritical+0x50>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <vPortExitCritical+0x26>
        __asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	607b      	str	r3, [r7, #4]
    }
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	e7fd      	b.n	800b672 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b676:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <vPortExitCritical+0x50>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4a08      	ldr	r2, [pc, #32]	@ (800b6a0 <vPortExitCritical+0x50>)
 800b67e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b680:	4b07      	ldr	r3, [pc, #28]	@ (800b6a0 <vPortExitCritical+0x50>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d105      	bne.n	800b694 <vPortExitCritical+0x44>
 800b688:	2300      	movs	r3, #0
 800b68a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	f383 8811 	msr	BASEPRI, r3
    }
 800b692:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000060 	.word	0x20000060
	...

0800b6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b6b0:	f3ef 8009 	mrs	r0, PSP
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	4b15      	ldr	r3, [pc, #84]	@ (800b710 <pxCurrentTCBConst>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	f01e 0f10 	tst.w	lr, #16
 800b6c0:	bf08      	it	eq
 800b6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ca:	6010      	str	r0, [r2, #0]
 800b6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6d4:	f380 8811 	msr	BASEPRI, r0
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
 800b6e0:	f7fe fe12 	bl	800a308 <vTaskSwitchContext>
 800b6e4:	f04f 0000 	mov.w	r0, #0
 800b6e8:	f380 8811 	msr	BASEPRI, r0
 800b6ec:	bc09      	pop	{r0, r3}
 800b6ee:	6819      	ldr	r1, [r3, #0]
 800b6f0:	6808      	ldr	r0, [r1, #0]
 800b6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f6:	f01e 0f10 	tst.w	lr, #16
 800b6fa:	bf08      	it	eq
 800b6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b700:	f380 8809 	msr	PSP, r0
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	f3af 8000 	nop.w

0800b710 <pxCurrentTCBConst>:
 800b710:	2000061c 	.word	0x2000061c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop

0800b718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
        __asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	607b      	str	r3, [r7, #4]
    }
 800b730:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800b732:	f001 fdd3 	bl	800d2dc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b736:	f7fe fd29 	bl	800a18c <xTaskIncrementTick>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d006      	beq.n	800b74e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800b740:	f001 fe2a 	bl	800d398 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b744:	4b08      	ldr	r3, [pc, #32]	@ (800b768 <SysTick_Handler+0x50>)
 800b746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e001      	b.n	800b752 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800b74e:	f001 fe07 	bl	800d360 <SEGGER_SYSVIEW_RecordExitISR>
 800b752:	2300      	movs	r3, #0
 800b754:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	f383 8811 	msr	BASEPRI, r3
    }
 800b75c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b770:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a0 <vPortSetupTimerInterrupt+0x34>)
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b776:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a4 <vPortSetupTimerInterrupt+0x38>)
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b77c:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a8 <vPortSetupTimerInterrupt+0x3c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a0a      	ldr	r2, [pc, #40]	@ (800b7ac <vPortSetupTimerInterrupt+0x40>)
 800b782:	fba2 2303 	umull	r2, r3, r2, r3
 800b786:	099b      	lsrs	r3, r3, #6
 800b788:	4a09      	ldr	r2, [pc, #36]	@ (800b7b0 <vPortSetupTimerInterrupt+0x44>)
 800b78a:	3b01      	subs	r3, #1
 800b78c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b78e:	4b04      	ldr	r3, [pc, #16]	@ (800b7a0 <vPortSetupTimerInterrupt+0x34>)
 800b790:	2207      	movs	r2, #7
 800b792:	601a      	str	r2, [r3, #0]
}
 800b794:	bf00      	nop
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	e000e010 	.word	0xe000e010
 800b7a4:	e000e018 	.word	0xe000e018
 800b7a8:	20000020 	.word	0x20000020
 800b7ac:	10624dd3 	.word	0x10624dd3
 800b7b0:	e000e014 	.word	0xe000e014

0800b7b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b7b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b7c4 <vPortEnableVFP+0x10>
 800b7b8:	6801      	ldr	r1, [r0, #0]
 800b7ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b7be:	6001      	str	r1, [r0, #0]
 800b7c0:	4770      	bx	lr
 800b7c2:	0000      	.short	0x0000
 800b7c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b7c8:	bf00      	nop
 800b7ca:	bf00      	nop

0800b7cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b7d2:	f3ef 8305 	mrs	r3, IPSR
 800b7d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b0f      	cmp	r3, #15
 800b7dc:	d915      	bls.n	800b80a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7de:	4a18      	ldr	r2, [pc, #96]	@ (800b840 <vPortValidateInterruptPriority+0x74>)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b7e8:	4b16      	ldr	r3, [pc, #88]	@ (800b844 <vPortValidateInterruptPriority+0x78>)
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	7afa      	ldrb	r2, [r7, #11]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d20b      	bcs.n	800b80a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	607b      	str	r3, [r7, #4]
    }
 800b804:	bf00      	nop
 800b806:	bf00      	nop
 800b808:	e7fd      	b.n	800b806 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b80a:	4b0f      	ldr	r3, [pc, #60]	@ (800b848 <vPortValidateInterruptPriority+0x7c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b812:	4b0e      	ldr	r3, [pc, #56]	@ (800b84c <vPortValidateInterruptPriority+0x80>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d90b      	bls.n	800b832 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	603b      	str	r3, [r7, #0]
    }
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <vPortValidateInterruptPriority+0x62>
    }
 800b832:	bf00      	nop
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	e000e3f0 	.word	0xe000e3f0
 800b844:	2000075c 	.word	0x2000075c
 800b848:	e000ed0c 	.word	0xe000ed0c
 800b84c:	20000760 	.word	0x20000760

0800b850 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b08a      	sub	sp, #40	@ 0x28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800b85c:	f7fe fbc4 	bl	8009fe8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b860:	4b66      	ldr	r3, [pc, #408]	@ (800b9fc <pvPortMalloc+0x1ac>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b868:	f000 f938 	bl	800badc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b86c:	4b64      	ldr	r3, [pc, #400]	@ (800ba00 <pvPortMalloc+0x1b0>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4013      	ands	r3, r2
 800b874:	2b00      	cmp	r3, #0
 800b876:	f040 80a9 	bne.w	800b9cc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d02e      	beq.n	800b8de <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800b880:	2208      	movs	r2, #8
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d228      	bcs.n	800b8de <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800b88c:	2208      	movs	r2, #8
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4413      	add	r3, r2
 800b892:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f003 0307 	and.w	r3, r3, #7
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d022      	beq.n	800b8e4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f023 0307 	bic.w	r3, r3, #7
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d215      	bcs.n	800b8d8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d011      	beq.n	800b8e4 <pvPortMalloc+0x94>
        __asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c4:	f383 8811 	msr	BASEPRI, r3
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	617b      	str	r3, [r7, #20]
    }
 800b8d2:	bf00      	nop
 800b8d4:	bf00      	nop
 800b8d6:	e7fd      	b.n	800b8d4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8dc:	e002      	b.n	800b8e4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	607b      	str	r3, [r7, #4]
 800b8e2:	e000      	b.n	800b8e6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d06f      	beq.n	800b9cc <pvPortMalloc+0x17c>
 800b8ec:	4b45      	ldr	r3, [pc, #276]	@ (800ba04 <pvPortMalloc+0x1b4>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d86a      	bhi.n	800b9cc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b8f6:	4b44      	ldr	r3, [pc, #272]	@ (800ba08 <pvPortMalloc+0x1b8>)
 800b8f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b8fa:	4b43      	ldr	r3, [pc, #268]	@ (800ba08 <pvPortMalloc+0x1b8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b900:	e004      	b.n	800b90c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d903      	bls.n	800b91e <pvPortMalloc+0xce>
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f1      	bne.n	800b902 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b91e:	4b37      	ldr	r3, [pc, #220]	@ (800b9fc <pvPortMalloc+0x1ac>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b924:	429a      	cmp	r2, r3
 800b926:	d051      	beq.n	800b9cc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2208      	movs	r2, #8
 800b92e:	4413      	add	r3, r2
 800b930:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	6a3b      	ldr	r3, [r7, #32]
 800b938:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	2308      	movs	r3, #8
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	429a      	cmp	r2, r3
 800b948:	d920      	bls.n	800b98c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b94a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4413      	add	r3, r2
 800b950:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	f003 0307 	and.w	r3, r3, #7
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <pvPortMalloc+0x124>
        __asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	613b      	str	r3, [r7, #16]
    }
 800b96e:	bf00      	nop
 800b970:	bf00      	nop
 800b972:	e7fd      	b.n	800b970 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b976:	685a      	ldr	r2, [r3, #4]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	1ad2      	subs	r2, r2, r3
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b986:	69b8      	ldr	r0, [r7, #24]
 800b988:	f000 f90a 	bl	800bba0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b98c:	4b1d      	ldr	r3, [pc, #116]	@ (800ba04 <pvPortMalloc+0x1b4>)
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	4a1b      	ldr	r2, [pc, #108]	@ (800ba04 <pvPortMalloc+0x1b4>)
 800b998:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b99a:	4b1a      	ldr	r3, [pc, #104]	@ (800ba04 <pvPortMalloc+0x1b4>)
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	4b1b      	ldr	r3, [pc, #108]	@ (800ba0c <pvPortMalloc+0x1bc>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d203      	bcs.n	800b9ae <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9a6:	4b17      	ldr	r3, [pc, #92]	@ (800ba04 <pvPortMalloc+0x1b4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4a18      	ldr	r2, [pc, #96]	@ (800ba0c <pvPortMalloc+0x1bc>)
 800b9ac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	4b13      	ldr	r3, [pc, #76]	@ (800ba00 <pvPortMalloc+0x1b0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	431a      	orrs	r2, r3
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	2200      	movs	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b9c2:	4b13      	ldr	r3, [pc, #76]	@ (800ba10 <pvPortMalloc+0x1c0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	4a11      	ldr	r2, [pc, #68]	@ (800ba10 <pvPortMalloc+0x1c0>)
 800b9ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b9cc:	f7fe fb1a 	bl	800a004 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00b      	beq.n	800b9f2 <pvPortMalloc+0x1a2>
        __asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	60fb      	str	r3, [r7, #12]
    }
 800b9ec:	bf00      	nop
 800b9ee:	bf00      	nop
 800b9f0:	e7fd      	b.n	800b9ee <pvPortMalloc+0x19e>
    return pvReturn;
 800b9f2:	69fb      	ldr	r3, [r7, #28]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3728      	adds	r7, #40	@ 0x28
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	2001336c 	.word	0x2001336c
 800ba00:	20013380 	.word	0x20013380
 800ba04:	20013370 	.word	0x20013370
 800ba08:	20013364 	.word	0x20013364
 800ba0c:	20013374 	.word	0x20013374
 800ba10:	20013378 	.word	0x20013378

0800ba14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d04f      	beq.n	800bac6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ba26:	2308      	movs	r3, #8
 800ba28:	425b      	negs	r3, r3
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	4b25      	ldr	r3, [pc, #148]	@ (800bad0 <vPortFree+0xbc>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10b      	bne.n	800ba5a <vPortFree+0x46>
        __asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	60fb      	str	r3, [r7, #12]
    }
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop
 800ba58:	e7fd      	b.n	800ba56 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00b      	beq.n	800ba7a <vPortFree+0x66>
        __asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	60bb      	str	r3, [r7, #8]
    }
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop
 800ba78:	e7fd      	b.n	800ba76 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	4b14      	ldr	r3, [pc, #80]	@ (800bad0 <vPortFree+0xbc>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4013      	ands	r3, r2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01e      	beq.n	800bac6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d11a      	bne.n	800bac6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	4b0e      	ldr	r3, [pc, #56]	@ (800bad0 <vPortFree+0xbc>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	43db      	mvns	r3, r3
 800ba9a:	401a      	ands	r2, r3
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800baa0:	f7fe faa2 	bl	8009fe8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	4b0a      	ldr	r3, [pc, #40]	@ (800bad4 <vPortFree+0xc0>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4413      	add	r3, r2
 800baae:	4a09      	ldr	r2, [pc, #36]	@ (800bad4 <vPortFree+0xc0>)
 800bab0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bab2:	6938      	ldr	r0, [r7, #16]
 800bab4:	f000 f874 	bl	800bba0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bab8:	4b07      	ldr	r3, [pc, #28]	@ (800bad8 <vPortFree+0xc4>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	4a06      	ldr	r2, [pc, #24]	@ (800bad8 <vPortFree+0xc4>)
 800bac0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800bac2:	f7fe fa9f 	bl	800a004 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800bac6:	bf00      	nop
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	20013380 	.word	0x20013380
 800bad4:	20013370 	.word	0x20013370
 800bad8:	2001337c 	.word	0x2001337c

0800badc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bae2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800bae6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800bae8:	4b27      	ldr	r3, [pc, #156]	@ (800bb88 <prvHeapInit+0xac>)
 800baea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f003 0307 	and.w	r3, r3, #7
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00c      	beq.n	800bb10 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3307      	adds	r3, #7
 800bafa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	f023 0307 	bic.w	r3, r3, #7
 800bb02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	4a1f      	ldr	r2, [pc, #124]	@ (800bb88 <prvHeapInit+0xac>)
 800bb0c:	4413      	add	r3, r2
 800bb0e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb14:	4a1d      	ldr	r2, [pc, #116]	@ (800bb8c <prvHeapInit+0xb0>)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800bb1a:	4b1c      	ldr	r3, [pc, #112]	@ (800bb8c <prvHeapInit+0xb0>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	4413      	add	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bb28:	2208      	movs	r2, #8
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	1a9b      	subs	r3, r3, r2
 800bb2e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f023 0307 	bic.w	r3, r3, #7
 800bb36:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4a15      	ldr	r2, [pc, #84]	@ (800bb90 <prvHeapInit+0xb4>)
 800bb3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800bb3e:	4b14      	ldr	r3, [pc, #80]	@ (800bb90 <prvHeapInit+0xb4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2200      	movs	r2, #0
 800bb44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800bb46:	4b12      	ldr	r3, [pc, #72]	@ (800bb90 <prvHeapInit+0xb4>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	1ad2      	subs	r2, r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb90 <prvHeapInit+0xb4>)
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	4a0a      	ldr	r2, [pc, #40]	@ (800bb94 <prvHeapInit+0xb8>)
 800bb6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4a09      	ldr	r2, [pc, #36]	@ (800bb98 <prvHeapInit+0xbc>)
 800bb72:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb74:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <prvHeapInit+0xc0>)
 800bb76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bb7a:	601a      	str	r2, [r3, #0]
}
 800bb7c:	bf00      	nop
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	20000764 	.word	0x20000764
 800bb8c:	20013364 	.word	0x20013364
 800bb90:	2001336c 	.word	0x2001336c
 800bb94:	20013374 	.word	0x20013374
 800bb98:	20013370 	.word	0x20013370
 800bb9c:	20013380 	.word	0x20013380

0800bba0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bba8:	4b28      	ldr	r3, [pc, #160]	@ (800bc4c <prvInsertBlockIntoFreeList+0xac>)
 800bbaa:	60fb      	str	r3, [r7, #12]
 800bbac:	e002      	b.n	800bbb4 <prvInsertBlockIntoFreeList+0x14>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d8f7      	bhi.n	800bbae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	4413      	add	r3, r2
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d108      	bne.n	800bbe2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	441a      	add	r2, r3
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	68ba      	ldr	r2, [r7, #8]
 800bbec:	441a      	add	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d118      	bne.n	800bc28 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	4b15      	ldr	r3, [pc, #84]	@ (800bc50 <prvInsertBlockIntoFreeList+0xb0>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d00d      	beq.n	800bc1e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	441a      	add	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	e008      	b.n	800bc30 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc50 <prvInsertBlockIntoFreeList+0xb0>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	e003      	b.n	800bc30 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d002      	beq.n	800bc3e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800bc3e:	bf00      	nop
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	20013364 	.word	0x20013364
 800bc50:	2001336c 	.word	0x2001336c

0800bc54 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800bc58:	4803      	ldr	r0, [pc, #12]	@ (800bc68 <_cbSendSystemDesc+0x14>)
 800bc5a:	f001 fae9 	bl	800d230 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800bc5e:	4803      	ldr	r0, [pc, #12]	@ (800bc6c <_cbSendSystemDesc+0x18>)
 800bc60:	f001 fae6 	bl	800d230 <SEGGER_SYSVIEW_SendSysDesc>
}
 800bc64:	bf00      	nop
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	0800ee2c 	.word	0x0800ee2c
 800bc6c:	0800ee54 	.word	0x0800ee54

0800bc70 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800bc74:	4b06      	ldr	r3, [pc, #24]	@ (800bc90 <SEGGER_SYSVIEW_Conf+0x20>)
 800bc76:	6818      	ldr	r0, [r3, #0]
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <SEGGER_SYSVIEW_Conf+0x20>)
 800bc7a:	6819      	ldr	r1, [r3, #0]
 800bc7c:	4b05      	ldr	r3, [pc, #20]	@ (800bc94 <SEGGER_SYSVIEW_Conf+0x24>)
 800bc7e:	4a06      	ldr	r2, [pc, #24]	@ (800bc98 <SEGGER_SYSVIEW_Conf+0x28>)
 800bc80:	f000 fe54 	bl	800c92c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800bc84:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800bc88:	f000 fe94 	bl	800c9b4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800bc8c:	bf00      	nop
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20000020 	.word	0x20000020
 800bc94:	0800bc55 	.word	0x0800bc55
 800bc98:	0800ef3c 	.word	0x0800ef3c

0800bc9c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800bca2:	2300      	movs	r3, #0
 800bca4:	607b      	str	r3, [r7, #4]
 800bca6:	e033      	b.n	800bd10 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800bca8:	491e      	ldr	r1, [pc, #120]	@ (800bd24 <_cbSendTaskList+0x88>)
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	440b      	add	r3, r1
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	491a      	ldr	r1, [pc, #104]	@ (800bd24 <_cbSendTaskList+0x88>)
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	440b      	add	r3, r1
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	6819      	ldr	r1, [r3, #0]
 800bcca:	4c16      	ldr	r4, [pc, #88]	@ (800bd24 <_cbSendTaskList+0x88>)
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4423      	add	r3, r4
 800bcd8:	3308      	adds	r3, #8
 800bcda:	681c      	ldr	r4, [r3, #0]
 800bcdc:	4d11      	ldr	r5, [pc, #68]	@ (800bd24 <_cbSendTaskList+0x88>)
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	4613      	mov	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	442b      	add	r3, r5
 800bcea:	330c      	adds	r3, #12
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	4e0d      	ldr	r6, [pc, #52]	@ (800bd24 <_cbSendTaskList+0x88>)
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4433      	add	r3, r6
 800bcfc:	3310      	adds	r3, #16
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	462b      	mov	r3, r5
 800bd04:	4622      	mov	r2, r4
 800bd06:	f000 f8bd 	bl	800be84 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	607b      	str	r3, [r7, #4]
 800bd10:	4b05      	ldr	r3, [pc, #20]	@ (800bd28 <_cbSendTaskList+0x8c>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d3c6      	bcc.n	800bca8 <_cbSendTaskList+0xc>
  }
}
 800bd1a:	bf00      	nop
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd24:	20013384 	.word	0x20013384
 800bd28:	20013424 	.word	0x20013424

0800bd2c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800bd2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800bd34:	f7fe fa18 	bl	800a168 <xTaskGetTickCountFromISR>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	469a      	mov	sl, r3
 800bd3e:	4693      	mov	fp, r2
 800bd40:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800bd44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	f04f 0a00 	mov.w	sl, #0
 800bd50:	f04f 0b00 	mov.w	fp, #0
 800bd54:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800bd58:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800bd5c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800bd60:	4652      	mov	r2, sl
 800bd62:	465b      	mov	r3, fp
 800bd64:	1a14      	subs	r4, r2, r0
 800bd66:	eb63 0501 	sbc.w	r5, r3, r1
 800bd6a:	f04f 0200 	mov.w	r2, #0
 800bd6e:	f04f 0300 	mov.w	r3, #0
 800bd72:	00ab      	lsls	r3, r5, #2
 800bd74:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800bd78:	00a2      	lsls	r2, r4, #2
 800bd7a:	4614      	mov	r4, r2
 800bd7c:	461d      	mov	r5, r3
 800bd7e:	eb14 0800 	adds.w	r8, r4, r0
 800bd82:	eb45 0901 	adc.w	r9, r5, r1
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	f04f 0300 	mov.w	r3, #0
 800bd8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd9a:	4690      	mov	r8, r2
 800bd9c:	4699      	mov	r9, r3
 800bd9e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800bda2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800bda6:	4610      	mov	r0, r2
 800bda8:	4619      	mov	r1, r3
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800bdb4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800bdc2:	2205      	movs	r2, #5
 800bdc4:	492b      	ldr	r1, [pc, #172]	@ (800be74 <SYSVIEW_AddTask+0xc0>)
 800bdc6:	68b8      	ldr	r0, [r7, #8]
 800bdc8:	f001 ffa8 	bl	800dd1c <memcmp>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d04b      	beq.n	800be6a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800bdd2:	4b29      	ldr	r3, [pc, #164]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b07      	cmp	r3, #7
 800bdd8:	d903      	bls.n	800bde2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800bdda:	4828      	ldr	r0, [pc, #160]	@ (800be7c <SYSVIEW_AddTask+0xc8>)
 800bddc:	f001 fd26 	bl	800d82c <SEGGER_SYSVIEW_Warn>
    return;
 800bde0:	e044      	b.n	800be6c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800bde2:	4b25      	ldr	r3, [pc, #148]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	4926      	ldr	r1, [pc, #152]	@ (800be80 <SYSVIEW_AddTask+0xcc>)
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800bdf6:	4b20      	ldr	r3, [pc, #128]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4921      	ldr	r1, [pc, #132]	@ (800be80 <SYSVIEW_AddTask+0xcc>)
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4413      	add	r3, r2
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	440b      	add	r3, r1
 800be06:	3304      	adds	r3, #4
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800be0c:	4b1a      	ldr	r3, [pc, #104]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	491b      	ldr	r1, [pc, #108]	@ (800be80 <SYSVIEW_AddTask+0xcc>)
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	3308      	adds	r3, #8
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800be22:	4b15      	ldr	r3, [pc, #84]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	4916      	ldr	r1, [pc, #88]	@ (800be80 <SYSVIEW_AddTask+0xcc>)
 800be28:	4613      	mov	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	440b      	add	r3, r1
 800be32:	330c      	adds	r3, #12
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800be38:	4b0f      	ldr	r3, [pc, #60]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	4910      	ldr	r1, [pc, #64]	@ (800be80 <SYSVIEW_AddTask+0xcc>)
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	3310      	adds	r3, #16
 800be4a:	69ba      	ldr	r2, [r7, #24]
 800be4c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800be4e:	4b0a      	ldr	r3, [pc, #40]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3301      	adds	r3, #1
 800be54:	4a08      	ldr	r2, [pc, #32]	@ (800be78 <SYSVIEW_AddTask+0xc4>)
 800be56:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	68b9      	ldr	r1, [r7, #8]
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 f80e 	bl	800be84 <SYSVIEW_SendTaskInfo>
 800be68:	e000      	b.n	800be6c <SYSVIEW_AddTask+0xb8>
    return;
 800be6a:	bf00      	nop

}
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	0800ee64 	.word	0x0800ee64
 800be78:	20013424 	.word	0x20013424
 800be7c:	0800ee6c 	.word	0x0800ee6c
 800be80:	20013384 	.word	0x20013384

0800be84 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800be84:	b580      	push	{r7, lr}
 800be86:	b08a      	sub	sp, #40	@ 0x28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800be92:	f107 0314 	add.w	r3, r7, #20
 800be96:	2214      	movs	r2, #20
 800be98:	2100      	movs	r1, #0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 ff4e 	bl	800dd3c <memset>
  TaskInfo.TaskID     = TaskID;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800beb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800beb4:	f107 0314 	add.w	r3, r7, #20
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 f8c1 	bl	800d040 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800bebe:	bf00      	nop
 800bec0:	3728      	adds	r7, #40	@ 0x28
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800bec8:	b480      	push	{r7}
 800beca:	b083      	sub	sp, #12
 800becc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800bece:	4b24      	ldr	r3, [pc, #144]	@ (800bf60 <_DoInit+0x98>)
 800bed0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2203      	movs	r2, #3
 800bed6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2203      	movs	r2, #3
 800bedc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a20      	ldr	r2, [pc, #128]	@ (800bf64 <_DoInit+0x9c>)
 800bee2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a20      	ldr	r2, [pc, #128]	@ (800bf68 <_DoInit+0xa0>)
 800bee8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bef0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a17      	ldr	r2, [pc, #92]	@ (800bf64 <_DoInit+0x9c>)
 800bf08:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a17      	ldr	r2, [pc, #92]	@ (800bf6c <_DoInit+0xa4>)
 800bf0e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2210      	movs	r2, #16
 800bf14:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	3307      	adds	r3, #7
 800bf2c:	4a10      	ldr	r2, [pc, #64]	@ (800bf70 <_DoInit+0xa8>)
 800bf2e:	6810      	ldr	r0, [r2, #0]
 800bf30:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bf32:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a0e      	ldr	r2, [pc, #56]	@ (800bf74 <_DoInit+0xac>)
 800bf3a:	6810      	ldr	r0, [r2, #0]
 800bf3c:	6018      	str	r0, [r3, #0]
 800bf3e:	8891      	ldrh	r1, [r2, #4]
 800bf40:	7992      	ldrb	r2, [r2, #6]
 800bf42:	8099      	strh	r1, [r3, #4]
 800bf44:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bf46:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800bf50:	f3bf 8f5f 	dmb	sy
}
 800bf54:	bf00      	nop
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr
 800bf60:	20013428 	.word	0x20013428
 800bf64:	0800eebc 	.word	0x0800eebc
 800bf68:	200134d0 	.word	0x200134d0
 800bf6c:	200138d0 	.word	0x200138d0
 800bf70:	0800eec8 	.word	0x0800eec8
 800bf74:	0800eecc 	.word	0x0800eecc

0800bf78 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	@ 0x28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800bf84:	2300      	movs	r3, #0
 800bf86:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	691b      	ldr	r3, [r3, #16]
 800bf92:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d905      	bls.n	800bfa8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfa6:	e007      	b.n	800bfb8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	689a      	ldr	r2, [r3, #8]
 800bfac:	69b9      	ldr	r1, [r7, #24]
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	1acb      	subs	r3, r1, r3
 800bfb2:	4413      	add	r3, r2
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	689a      	ldr	r2, [r3, #8]
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	bf28      	it	cs
 800bfc6:	4613      	movcs	r3, r2
 800bfc8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800bfca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	bf28      	it	cs
 800bfd2:	4613      	movcs	r3, r2
 800bfd4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685a      	ldr	r2, [r3, #4]
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	4413      	add	r3, r2
 800bfde:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfe2:	68b9      	ldr	r1, [r7, #8]
 800bfe4:	6978      	ldr	r0, [r7, #20]
 800bfe6:	f001 ff0c 	bl	800de02 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800bfea:	6a3a      	ldr	r2, [r7, #32]
 800bfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfee:	4413      	add	r3, r2
 800bff0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	4413      	add	r3, r2
 800bff8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800c002:	69fa      	ldr	r2, [r7, #28]
 800c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c006:	4413      	add	r3, r2
 800c008:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	429a      	cmp	r2, r3
 800c012:	d101      	bne.n	800c018 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c018:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	69fa      	ldr	r2, [r7, #28]
 800c020:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1b2      	bne.n	800bf8e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800c028:	6a3b      	ldr	r3, [r7, #32]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3728      	adds	r7, #40	@ 0x28
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800c032:	b580      	push	{r7, lr}
 800c034:	b088      	sub	sp, #32
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	60b9      	str	r1, [r7, #8]
 800c03c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	429a      	cmp	r2, r3
 800c054:	d911      	bls.n	800c07a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	68b9      	ldr	r1, [r7, #8]
 800c064:	6938      	ldr	r0, [r7, #16]
 800c066:	f001 fecc 	bl	800de02 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c06a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	441a      	add	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800c078:	e01f      	b.n	800c0ba <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	4413      	add	r3, r2
 800c086:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	6938      	ldr	r0, [r7, #16]
 800c08e:	f001 feb8 	bl	800de02 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6938      	ldr	r0, [r7, #16]
 800c0ac:	f001 fea9 	bl	800de02 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c0b0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	60da      	str	r2, [r3, #12]
}
 800c0ba:	bf00      	nop
 800c0bc:	3720      	adds	r7, #32
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800c0c2:	b480      	push	{r7}
 800c0c4:	b087      	sub	sp, #28
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d808      	bhi.n	800c0f0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689a      	ldr	r2, [r3, #8]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1ad2      	subs	r2, r2, r3
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	e004      	b.n	800c0fa <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800c0fa:	697b      	ldr	r3, [r7, #20]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08c      	sub	sp, #48	@ 0x30
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c114:	4b3e      	ldr	r3, [pc, #248]	@ (800c210 <SEGGER_RTT_ReadNoLock+0x108>)
 800c116:	623b      	str	r3, [r7, #32]
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <SEGGER_RTT_ReadNoLock+0x1e>
 800c122:	f7ff fed1 	bl	800bec8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	4613      	mov	r3, r2
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	4413      	add	r3, r2
 800c12e:	00db      	lsls	r3, r3, #3
 800c130:	3360      	adds	r3, #96	@ 0x60
 800c132:	4a37      	ldr	r2, [pc, #220]	@ (800c210 <SEGGER_RTT_ReadNoLock+0x108>)
 800c134:	4413      	add	r3, r2
 800c136:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c148:	2300      	movs	r3, #0
 800c14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c14c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	429a      	cmp	r2, r3
 800c152:	d92b      	bls.n	800c1ac <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	689a      	ldr	r2, [r3, #8]
 800c158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4293      	cmp	r3, r2
 800c164:	bf28      	it	cs
 800c166:	4613      	movcs	r3, r2
 800c168:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c170:	4413      	add	r3, r2
 800c172:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	6939      	ldr	r1, [r7, #16]
 800c178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c17a:	f001 fe42 	bl	800de02 <memcpy>
    NumBytesRead += NumBytesRem;
 800c17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	4413      	add	r3, r2
 800c184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	4413      	add	r3, r2
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	4413      	add	r3, r2
 800c19c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d101      	bne.n	800c1ac <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c1b4:	697a      	ldr	r2, [r7, #20]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	bf28      	it	cs
 800c1bc:	4613      	movcs	r3, r2
 800c1be:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d019      	beq.n	800c1fa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	4413      	add	r3, r2
 800c1ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	6939      	ldr	r1, [r7, #16]
 800c1d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c1d6:	f001 fe14 	bl	800de02 <memcpy>
    NumBytesRead += NumBytesRem;
 800c1da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	4413      	add	r3, r2
 800c1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c1e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c1f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800c1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c204:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3730      	adds	r7, #48	@ 0x30
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	20013428 	.word	0x20013428

0800c214 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c214:	b580      	push	{r7, lr}
 800c216:	b088      	sub	sp, #32
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	1c5a      	adds	r2, r3, #1
 800c228:	4613      	mov	r3, r2
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	4413      	add	r3, r2
 800c22e:	00db      	lsls	r3, r3, #3
 800c230:	4a1f      	ldr	r2, [pc, #124]	@ (800c2b0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800c232:	4413      	add	r3, r2
 800c234:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d029      	beq.n	800c292 <SEGGER_RTT_WriteNoLock+0x7e>
 800c23e:	2b02      	cmp	r3, #2
 800c240:	d82e      	bhi.n	800c2a0 <SEGGER_RTT_WriteNoLock+0x8c>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <SEGGER_RTT_WriteNoLock+0x38>
 800c246:	2b01      	cmp	r3, #1
 800c248:	d013      	beq.n	800c272 <SEGGER_RTT_WriteNoLock+0x5e>
 800c24a:	e029      	b.n	800c2a0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c24c:	6978      	ldr	r0, [r7, #20]
 800c24e:	f7ff ff38 	bl	800c0c2 <_GetAvailWriteSpace>
 800c252:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d202      	bcs.n	800c262 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800c260:	e021      	b.n	800c2a6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	69b9      	ldr	r1, [r7, #24]
 800c26a:	6978      	ldr	r0, [r7, #20]
 800c26c:	f7ff fee1 	bl	800c032 <_WriteNoCheck>
    break;
 800c270:	e019      	b.n	800c2a6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800c272:	6978      	ldr	r0, [r7, #20]
 800c274:	f7ff ff25 	bl	800c0c2 <_GetAvailWriteSpace>
 800c278:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	4293      	cmp	r3, r2
 800c280:	bf28      	it	cs
 800c282:	4613      	movcs	r3, r2
 800c284:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	69b9      	ldr	r1, [r7, #24]
 800c28a:	6978      	ldr	r0, [r7, #20]
 800c28c:	f7ff fed1 	bl	800c032 <_WriteNoCheck>
    break;
 800c290:	e009      	b.n	800c2a6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	69b9      	ldr	r1, [r7, #24]
 800c296:	6978      	ldr	r0, [r7, #20]
 800c298:	f7ff fe6e 	bl	800bf78 <_WriteBlocking>
 800c29c:	61f8      	str	r0, [r7, #28]
    break;
 800c29e:	e002      	b.n	800c2a6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	61fb      	str	r3, [r7, #28]
    break;
 800c2a4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800c2a6:	69fb      	ldr	r3, [r7, #28]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3720      	adds	r7, #32
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20013428 	.word	0x20013428

0800c2b4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b088      	sub	sp, #32
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800c2c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c2fc <SEGGER_RTT_Write+0x48>)
 800c2c2:	61fb      	str	r3, [r7, #28]
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	b2db      	uxtb	r3, r3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <SEGGER_RTT_Write+0x1e>
 800c2ce:	f7ff fdfb 	bl	800bec8 <_DoInit>
  SEGGER_RTT_LOCK();
 800c2d2:	f3ef 8311 	mrs	r3, BASEPRI
 800c2d6:	f04f 0120 	mov.w	r1, #32
 800c2da:	f381 8811 	msr	BASEPRI, r1
 800c2de:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	68b9      	ldr	r1, [r7, #8]
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f7ff ff95 	bl	800c214 <SEGGER_RTT_WriteNoLock>
 800c2ea:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800c2f2:	697b      	ldr	r3, [r7, #20]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3720      	adds	r7, #32
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	20013428 	.word	0x20013428

0800c300 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c300:	b580      	push	{r7, lr}
 800c302:	b088      	sub	sp, #32
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
 800c30c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c30e:	4b3d      	ldr	r3, [pc, #244]	@ (800c404 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c310:	61bb      	str	r3, [r7, #24]
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c31c:	f7ff fdd4 	bl	800bec8 <_DoInit>
  SEGGER_RTT_LOCK();
 800c320:	f3ef 8311 	mrs	r3, BASEPRI
 800c324:	f04f 0120 	mov.w	r1, #32
 800c328:	f381 8811 	msr	BASEPRI, r1
 800c32c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c32e:	4b35      	ldr	r3, [pc, #212]	@ (800c404 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c330:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c336:	6939      	ldr	r1, [r7, #16]
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	4613      	mov	r3, r2
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	440b      	add	r3, r1
 800c346:	3304      	adds	r3, #4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d008      	beq.n	800c360 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	3301      	adds	r3, #1
 800c352:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	69fa      	ldr	r2, [r7, #28]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	dbeb      	blt.n	800c336 <SEGGER_RTT_AllocUpBuffer+0x36>
 800c35e:	e000      	b.n	800c362 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c360:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	429a      	cmp	r2, r3
 800c36a:	da3f      	bge.n	800c3ec <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c36c:	6939      	ldr	r1, [r7, #16]
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	4613      	mov	r3, r2
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	4413      	add	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	440b      	add	r3, r1
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c380:	6939      	ldr	r1, [r7, #16]
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	1c5a      	adds	r2, r3, #1
 800c386:	4613      	mov	r3, r2
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	440b      	add	r3, r1
 800c390:	3304      	adds	r3, #4
 800c392:	68ba      	ldr	r2, [r7, #8]
 800c394:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c396:	6939      	ldr	r1, [r7, #16]
 800c398:	69fa      	ldr	r2, [r7, #28]
 800c39a:	4613      	mov	r3, r2
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	4413      	add	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	440b      	add	r3, r1
 800c3a4:	3320      	adds	r3, #32
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c3aa:	6939      	ldr	r1, [r7, #16]
 800c3ac:	69fa      	ldr	r2, [r7, #28]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	440b      	add	r3, r1
 800c3b8:	3328      	adds	r3, #40	@ 0x28
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c3be:	6939      	ldr	r1, [r7, #16]
 800c3c0:	69fa      	ldr	r2, [r7, #28]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	4413      	add	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	440b      	add	r3, r1
 800c3cc:	3324      	adds	r3, #36	@ 0x24
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c3d2:	6939      	ldr	r1, [r7, #16]
 800c3d4:	69fa      	ldr	r2, [r7, #28]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	440b      	add	r3, r1
 800c3e0:	332c      	adds	r3, #44	@ 0x2c
 800c3e2:	683a      	ldr	r2, [r7, #0]
 800c3e4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c3e6:	f3bf 8f5f 	dmb	sy
 800c3ea:	e002      	b.n	800c3f2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c3ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c3f8:	69fb      	ldr	r3, [r7, #28]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3720      	adds	r7, #32
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20013428 	.word	0x20013428

0800c408 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c408:	b580      	push	{r7, lr}
 800c40a:	b088      	sub	sp, #32
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c416:	4b33      	ldr	r3, [pc, #204]	@ (800c4e4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800c418:	61bb      	str	r3, [r7, #24]
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	d101      	bne.n	800c428 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c424:	f7ff fd50 	bl	800bec8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c428:	4b2e      	ldr	r3, [pc, #184]	@ (800c4e4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800c42a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	695b      	ldr	r3, [r3, #20]
 800c430:	461a      	mov	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	4293      	cmp	r3, r2
 800c436:	d24d      	bcs.n	800c4d4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800c438:	f3ef 8311 	mrs	r3, BASEPRI
 800c43c:	f04f 0120 	mov.w	r1, #32
 800c440:	f381 8811 	msr	BASEPRI, r1
 800c444:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d031      	beq.n	800c4b0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800c44c:	6979      	ldr	r1, [r7, #20]
 800c44e:	68fa      	ldr	r2, [r7, #12]
 800c450:	4613      	mov	r3, r2
 800c452:	005b      	lsls	r3, r3, #1
 800c454:	4413      	add	r3, r2
 800c456:	00db      	lsls	r3, r3, #3
 800c458:	440b      	add	r3, r1
 800c45a:	3360      	adds	r3, #96	@ 0x60
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800c460:	6979      	ldr	r1, [r7, #20]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4613      	mov	r3, r2
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	4413      	add	r3, r2
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	440b      	add	r3, r1
 800c46e:	3364      	adds	r3, #100	@ 0x64
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800c474:	6979      	ldr	r1, [r7, #20]
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	4613      	mov	r3, r2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	440b      	add	r3, r1
 800c482:	3368      	adds	r3, #104	@ 0x68
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800c488:	6979      	ldr	r1, [r7, #20]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	4613      	mov	r3, r2
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	4413      	add	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	440b      	add	r3, r1
 800c496:	3370      	adds	r3, #112	@ 0x70
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800c49c:	6979      	ldr	r1, [r7, #20]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	005b      	lsls	r3, r3, #1
 800c4a4:	4413      	add	r3, r2
 800c4a6:	00db      	lsls	r3, r3, #3
 800c4a8:	440b      	add	r3, r1
 800c4aa:	336c      	adds	r3, #108	@ 0x6c
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800c4b0:	6979      	ldr	r1, [r7, #20]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	440b      	add	r3, r1
 800c4be:	3374      	adds	r3, #116	@ 0x74
 800c4c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4c2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c4c4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	61fb      	str	r3, [r7, #28]
 800c4d2:	e002      	b.n	800c4da <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800c4d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c4d8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800c4da:	69fb      	ldr	r3, [r7, #28]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3720      	adds	r7, #32
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20013428 	.word	0x20013428

0800c4e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c4e8:	b480      	push	{r7}
 800c4ea:	b087      	sub	sp, #28
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c4f8:	e002      	b.n	800c500 <_EncodeStr+0x18>
    Len++;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	4413      	add	r3, r2
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1f6      	bne.n	800c4fa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800c50c:	693a      	ldr	r2, [r7, #16]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	d901      	bls.n	800c518 <_EncodeStr+0x30>
    Len = Limit;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c51c:	d806      	bhi.n	800c52c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	60fa      	str	r2, [r7, #12]
 800c524:	693a      	ldr	r2, [r7, #16]
 800c526:	b2d2      	uxtb	r2, r2
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e011      	b.n	800c550 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	1c5a      	adds	r2, r3, #1
 800c530:	60fa      	str	r2, [r7, #12]
 800c532:	22ff      	movs	r2, #255	@ 0xff
 800c534:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	1c5a      	adds	r2, r3, #1
 800c53a:	60fa      	str	r2, [r7, #12]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	b2d2      	uxtb	r2, r2
 800c540:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	0a19      	lsrs	r1, r3, #8
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	60fa      	str	r2, [r7, #12]
 800c54c:	b2ca      	uxtb	r2, r1
 800c54e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c554:	e00a      	b.n	800c56c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	1c53      	adds	r3, r2, #1
 800c55a:	60bb      	str	r3, [r7, #8]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	1c59      	adds	r1, r3, #1
 800c560:	60f9      	str	r1, [r7, #12]
 800c562:	7812      	ldrb	r2, [r2, #0]
 800c564:	701a      	strb	r2, [r3, #0]
    n++;
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	3301      	adds	r3, #1
 800c56a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	429a      	cmp	r2, r3
 800c572:	d3f0      	bcc.n	800c556 <_EncodeStr+0x6e>
  }
  return pPayload;
 800c574:	68fb      	ldr	r3, [r7, #12]
}
 800c576:	4618      	mov	r0, r3
 800c578:	371c      	adds	r7, #28
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr

0800c582 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3304      	adds	r3, #4
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
	...

0800c59c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c5a2:	4b35      	ldr	r3, [pc, #212]	@ (800c678 <_HandleIncomingPacket+0xdc>)
 800c5a4:	7e1b      	ldrb	r3, [r3, #24]
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	1cfb      	adds	r3, r7, #3
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	f7ff fdab 	bl	800c108 <SEGGER_RTT_ReadNoLock>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	dd59      	ble.n	800c670 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	2b80      	cmp	r3, #128	@ 0x80
 800c5c0:	d032      	beq.n	800c628 <_HandleIncomingPacket+0x8c>
 800c5c2:	2b80      	cmp	r3, #128	@ 0x80
 800c5c4:	dc42      	bgt.n	800c64c <_HandleIncomingPacket+0xb0>
 800c5c6:	2b07      	cmp	r3, #7
 800c5c8:	dc16      	bgt.n	800c5f8 <_HandleIncomingPacket+0x5c>
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	dd3e      	ble.n	800c64c <_HandleIncomingPacket+0xb0>
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	2b06      	cmp	r3, #6
 800c5d2:	d83b      	bhi.n	800c64c <_HandleIncomingPacket+0xb0>
 800c5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c5dc <_HandleIncomingPacket+0x40>)
 800c5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5da:	bf00      	nop
 800c5dc:	0800c5ff 	.word	0x0800c5ff
 800c5e0:	0800c605 	.word	0x0800c605
 800c5e4:	0800c60b 	.word	0x0800c60b
 800c5e8:	0800c611 	.word	0x0800c611
 800c5ec:	0800c617 	.word	0x0800c617
 800c5f0:	0800c61d 	.word	0x0800c61d
 800c5f4:	0800c623 	.word	0x0800c623
 800c5f8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5fa:	d034      	beq.n	800c666 <_HandleIncomingPacket+0xca>
 800c5fc:	e026      	b.n	800c64c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c5fe:	f000 fba5 	bl	800cd4c <SEGGER_SYSVIEW_Start>
      break;
 800c602:	e035      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c604:	f000 fc5c 	bl	800cec0 <SEGGER_SYSVIEW_Stop>
      break;
 800c608:	e032      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c60a:	f000 fe35 	bl	800d278 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c60e:	e02f      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c610:	f000 fdfa 	bl	800d208 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c614:	e02c      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c616:	f000 fc79 	bl	800cf0c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c61a:	e029      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c61c:	f001 f8c8 	bl	800d7b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c620:	e026      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c622:	f001 f8a7 	bl	800d774 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c626:	e023      	b.n	800c670 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c628:	4b13      	ldr	r3, [pc, #76]	@ (800c678 <_HandleIncomingPacket+0xdc>)
 800c62a:	7e1b      	ldrb	r3, [r3, #24]
 800c62c:	4618      	mov	r0, r3
 800c62e:	1cfb      	adds	r3, r7, #3
 800c630:	2201      	movs	r2, #1
 800c632:	4619      	mov	r1, r3
 800c634:	f7ff fd68 	bl	800c108 <SEGGER_RTT_ReadNoLock>
 800c638:	4603      	mov	r3, r0
 800c63a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd13      	ble.n	800c66a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c642:	78fb      	ldrb	r3, [r7, #3]
 800c644:	4618      	mov	r0, r3
 800c646:	f001 f815 	bl	800d674 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c64a:	e00e      	b.n	800c66a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	b25b      	sxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	da0c      	bge.n	800c66e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c654:	4b08      	ldr	r3, [pc, #32]	@ (800c678 <_HandleIncomingPacket+0xdc>)
 800c656:	7e1b      	ldrb	r3, [r3, #24]
 800c658:	4618      	mov	r0, r3
 800c65a:	1cfb      	adds	r3, r7, #3
 800c65c:	2201      	movs	r2, #1
 800c65e:	4619      	mov	r1, r3
 800c660:	f7ff fd52 	bl	800c108 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c664:	e003      	b.n	800c66e <_HandleIncomingPacket+0xd2>
      break;
 800c666:	bf00      	nop
 800c668:	e002      	b.n	800c670 <_HandleIncomingPacket+0xd4>
      break;
 800c66a:	bf00      	nop
 800c66c:	e000      	b.n	800c670 <_HandleIncomingPacket+0xd4>
      break;
 800c66e:	bf00      	nop
    }
  }
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	200148e8 	.word	0x200148e8

0800c67c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08c      	sub	sp, #48	@ 0x30
 800c680:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c682:	2301      	movs	r3, #1
 800c684:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c686:	1d3b      	adds	r3, r7, #4
 800c688:	3301      	adds	r3, #1
 800c68a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c690:	4b31      	ldr	r3, [pc, #196]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c696:	e00b      	b.n	800c6b0 <_TrySendOverflowPacket+0x34>
 800c698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c69e:	1c59      	adds	r1, r3, #1
 800c6a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c6a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ac:	09db      	lsrs	r3, r3, #7
 800c6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6b4:	d8f0      	bhi.n	800c698 <_TrySendOverflowPacket+0x1c>
 800c6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c6c6:	4b25      	ldr	r3, [pc, #148]	@ (800c75c <_TrySendOverflowPacket+0xe0>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c6cc:	4b22      	ldr	r3, [pc, #136]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	623b      	str	r3, [r7, #32]
 800c6de:	e00b      	b.n	800c6f8 <_TrySendOverflowPacket+0x7c>
 800c6e0:	6a3b      	ldr	r3, [r7, #32]
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e6:	1c59      	adds	r1, r3, #1
 800c6e8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c6ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6ee:	b2d2      	uxtb	r2, r2
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	6a3b      	ldr	r3, [r7, #32]
 800c6f4:	09db      	lsrs	r3, r3, #7
 800c6f6:	623b      	str	r3, [r7, #32]
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6fc:	d8f0      	bhi.n	800c6e0 <_TrySendOverflowPacket+0x64>
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c700:	1c5a      	adds	r2, r3, #1
 800c702:	627a      	str	r2, [r7, #36]	@ 0x24
 800c704:	6a3a      	ldr	r2, [r7, #32]
 800c706:	b2d2      	uxtb	r2, r2
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c70e:	4b12      	ldr	r3, [pc, #72]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c710:	785b      	ldrb	r3, [r3, #1]
 800c712:	4618      	mov	r0, r3
 800c714:	1d3b      	adds	r3, r7, #4
 800c716:	69fa      	ldr	r2, [r7, #28]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	461a      	mov	r2, r3
 800c71c:	1d3b      	adds	r3, r7, #4
 800c71e:	4619      	mov	r1, r3
 800c720:	f7f3 fd76 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c724:	4603      	mov	r3, r0
 800c726:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d009      	beq.n	800c742 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c72e:	4a0a      	ldr	r2, [pc, #40]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c734:	4b08      	ldr	r3, [pc, #32]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	3b01      	subs	r3, #1
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	4b06      	ldr	r3, [pc, #24]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c73e:	701a      	strb	r2, [r3, #0]
 800c740:	e004      	b.n	800c74c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c742:	4b05      	ldr	r3, [pc, #20]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	3301      	adds	r3, #1
 800c748:	4a03      	ldr	r2, [pc, #12]	@ (800c758 <_TrySendOverflowPacket+0xdc>)
 800c74a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c74c:	693b      	ldr	r3, [r7, #16]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3730      	adds	r7, #48	@ 0x30
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	200148e8 	.word	0x200148e8
 800c75c:	e0001004 	.word	0xe0001004

0800c760 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c760:	b580      	push	{r7, lr}
 800c762:	b08a      	sub	sp, #40	@ 0x28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c76c:	4b6c      	ldr	r3, [pc, #432]	@ (800c920 <_SendPacket+0x1c0>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d010      	beq.n	800c796 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c774:	4b6a      	ldr	r3, [pc, #424]	@ (800c920 <_SendPacket+0x1c0>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 80a3 	beq.w	800c8c4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c77e:	4b68      	ldr	r3, [pc, #416]	@ (800c920 <_SendPacket+0x1c0>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d109      	bne.n	800c79a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c786:	f7ff ff79 	bl	800c67c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c78a:	4b65      	ldr	r3, [pc, #404]	@ (800c920 <_SendPacket+0x1c0>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	f040 809a 	bne.w	800c8c8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c794:	e001      	b.n	800c79a <_SendPacket+0x3a>
    goto Send;
 800c796:	bf00      	nop
 800c798:	e000      	b.n	800c79c <_SendPacket+0x3c>
Send:
 800c79a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b1f      	cmp	r3, #31
 800c7a0:	d809      	bhi.n	800c7b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c7a2:	4b5f      	ldr	r3, [pc, #380]	@ (800c920 <_SendPacket+0x1c0>)
 800c7a4:	69da      	ldr	r2, [r3, #28]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f040 808b 	bne.w	800c8cc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b17      	cmp	r3, #23
 800c7ba:	d807      	bhi.n	800c7cc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	701a      	strb	r2, [r3, #0]
 800c7ca:	e03d      	b.n	800c848 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7d8:	d912      	bls.n	800c800 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	09da      	lsrs	r2, r3, #7
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	3a01      	subs	r2, #1
 800c7f2:	60fa      	str	r2, [r7, #12]
 800c7f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e006      	b.n	800c80e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3b01      	subs	r3, #1
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b7f      	cmp	r3, #127	@ 0x7f
 800c812:	d912      	bls.n	800c83a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	09da      	lsrs	r2, r3, #7
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
 800c81e:	b2d2      	uxtb	r2, r2
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	b2db      	uxtb	r3, r3
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	3a01      	subs	r2, #1
 800c82c:	60fa      	str	r2, [r7, #12]
 800c82e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c832:	b2da      	uxtb	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	701a      	strb	r2, [r3, #0]
 800c838:	e006      	b.n	800c848 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	b2da      	uxtb	r2, r3
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c848:	4b36      	ldr	r3, [pc, #216]	@ (800c924 <_SendPacket+0x1c4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c84e:	4b34      	ldr	r3, [pc, #208]	@ (800c920 <_SendPacket+0x1c0>)
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	623b      	str	r3, [r7, #32]
 800c860:	e00b      	b.n	800c87a <_SendPacket+0x11a>
 800c862:	6a3b      	ldr	r3, [r7, #32]
 800c864:	b2da      	uxtb	r2, r3
 800c866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c868:	1c59      	adds	r1, r3, #1
 800c86a:	6279      	str	r1, [r7, #36]	@ 0x24
 800c86c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	701a      	strb	r2, [r3, #0]
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	09db      	lsrs	r3, r3, #7
 800c878:	623b      	str	r3, [r7, #32]
 800c87a:	6a3b      	ldr	r3, [r7, #32]
 800c87c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c87e:	d8f0      	bhi.n	800c862 <_SendPacket+0x102>
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	627a      	str	r2, [r7, #36]	@ 0x24
 800c886:	6a3a      	ldr	r2, [r7, #32]
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c890:	4b23      	ldr	r3, [pc, #140]	@ (800c920 <_SendPacket+0x1c0>)
 800c892:	785b      	ldrb	r3, [r3, #1]
 800c894:	4618      	mov	r0, r3
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	461a      	mov	r2, r3
 800c89e:	68f9      	ldr	r1, [r7, #12]
 800c8a0:	f7f3 fcb6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c8ae:	4a1c      	ldr	r2, [pc, #112]	@ (800c920 <_SendPacket+0x1c0>)
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	60d3      	str	r3, [r2, #12]
 800c8b4:	e00b      	b.n	800c8ce <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c8b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c920 <_SendPacket+0x1c0>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	4b18      	ldr	r3, [pc, #96]	@ (800c920 <_SendPacket+0x1c0>)
 800c8c0:	701a      	strb	r2, [r3, #0]
 800c8c2:	e004      	b.n	800c8ce <_SendPacket+0x16e>
    goto SendDone;
 800c8c4:	bf00      	nop
 800c8c6:	e002      	b.n	800c8ce <_SendPacket+0x16e>
      goto SendDone;
 800c8c8:	bf00      	nop
 800c8ca:	e000      	b.n	800c8ce <_SendPacket+0x16e>
      goto SendDone;
 800c8cc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c8ce:	4b14      	ldr	r3, [pc, #80]	@ (800c920 <_SendPacket+0x1c0>)
 800c8d0:	7e1b      	ldrb	r3, [r3, #24]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4a14      	ldr	r2, [pc, #80]	@ (800c928 <_SendPacket+0x1c8>)
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	440b      	add	r3, r1
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	4413      	add	r3, r2
 800c8e0:	336c      	adds	r3, #108	@ 0x6c
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c920 <_SendPacket+0x1c0>)
 800c8e6:	7e1b      	ldrb	r3, [r3, #24]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	490f      	ldr	r1, [pc, #60]	@ (800c928 <_SendPacket+0x1c8>)
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4403      	add	r3, r0
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3370      	adds	r3, #112	@ 0x70
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d00b      	beq.n	800c916 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c8fe:	4b08      	ldr	r3, [pc, #32]	@ (800c920 <_SendPacket+0x1c0>)
 800c900:	789b      	ldrb	r3, [r3, #2]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d107      	bne.n	800c916 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c906:	4b06      	ldr	r3, [pc, #24]	@ (800c920 <_SendPacket+0x1c0>)
 800c908:	2201      	movs	r2, #1
 800c90a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c90c:	f7ff fe46 	bl	800c59c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c910:	4b03      	ldr	r3, [pc, #12]	@ (800c920 <_SendPacket+0x1c0>)
 800c912:	2200      	movs	r2, #0
 800c914:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c916:	bf00      	nop
 800c918:	3728      	adds	r7, #40	@ 0x28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	200148e8 	.word	0x200148e8
 800c924:	e0001004 	.word	0xe0001004
 800c928:	20013428 	.word	0x20013428

0800c92c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af02      	add	r7, sp, #8
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c93a:	2300      	movs	r3, #0
 800c93c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c940:	4917      	ldr	r1, [pc, #92]	@ (800c9a0 <SEGGER_SYSVIEW_Init+0x74>)
 800c942:	4818      	ldr	r0, [pc, #96]	@ (800c9a4 <SEGGER_SYSVIEW_Init+0x78>)
 800c944:	f7ff fcdc 	bl	800c300 <SEGGER_RTT_AllocUpBuffer>
 800c948:	4603      	mov	r3, r0
 800c94a:	b2da      	uxtb	r2, r3
 800c94c:	4b16      	ldr	r3, [pc, #88]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c94e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c950:	4b15      	ldr	r3, [pc, #84]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c952:	785a      	ldrb	r2, [r3, #1]
 800c954:	4b14      	ldr	r3, [pc, #80]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c956:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c958:	4b13      	ldr	r3, [pc, #76]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c95a:	7e1b      	ldrb	r3, [r3, #24]
 800c95c:	4618      	mov	r0, r3
 800c95e:	2300      	movs	r3, #0
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	2308      	movs	r3, #8
 800c964:	4a11      	ldr	r2, [pc, #68]	@ (800c9ac <SEGGER_SYSVIEW_Init+0x80>)
 800c966:	490f      	ldr	r1, [pc, #60]	@ (800c9a4 <SEGGER_SYSVIEW_Init+0x78>)
 800c968:	f7ff fd4e 	bl	800c408 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c96c:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c96e:	2200      	movs	r2, #0
 800c970:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c972:	4b0f      	ldr	r3, [pc, #60]	@ (800c9b0 <SEGGER_SYSVIEW_Init+0x84>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a0c      	ldr	r2, [pc, #48]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c978:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c97a:	4a0b      	ldr	r2, [pc, #44]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c980:	4a09      	ldr	r2, [pc, #36]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c986:	4a08      	ldr	r2, [pc, #32]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c98c:	4a06      	ldr	r2, [pc, #24]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c992:	4b05      	ldr	r3, [pc, #20]	@ (800c9a8 <SEGGER_SYSVIEW_Init+0x7c>)
 800c994:	2200      	movs	r2, #0
 800c996:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	200138e0 	.word	0x200138e0
 800c9a4:	0800eed4 	.word	0x0800eed4
 800c9a8:	200148e8 	.word	0x200148e8
 800c9ac:	200148e0 	.word	0x200148e0
 800c9b0:	e0001004 	.word	0xe0001004

0800c9b4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c9bc:	4a04      	ldr	r2, [pc, #16]	@ (800c9d0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6113      	str	r3, [r2, #16]
}
 800c9c2:	bf00      	nop
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	200148e8 	.word	0x200148e8

0800c9d4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c9dc:	f3ef 8311 	mrs	r3, BASEPRI
 800c9e0:	f04f 0120 	mov.w	r1, #32
 800c9e4:	f381 8811 	msr	BASEPRI, r1
 800c9e8:	60fb      	str	r3, [r7, #12]
 800c9ea:	4808      	ldr	r0, [pc, #32]	@ (800ca0c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c9ec:	f7ff fdc9 	bl	800c582 <_PreparePacket>
 800c9f0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	68b9      	ldr	r1, [r7, #8]
 800c9f6:	68b8      	ldr	r0, [r7, #8]
 800c9f8:	f7ff feb2 	bl	800c760 <_SendPacket>
  RECORD_END();
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f383 8811 	msr	BASEPRI, r3
}
 800ca02:	bf00      	nop
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	20014918 	.word	0x20014918

0800ca10 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b088      	sub	sp, #32
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ca1a:	f3ef 8311 	mrs	r3, BASEPRI
 800ca1e:	f04f 0120 	mov.w	r1, #32
 800ca22:	f381 8811 	msr	BASEPRI, r1
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	4816      	ldr	r0, [pc, #88]	@ (800ca84 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ca2a:	f7ff fdaa 	bl	800c582 <_PreparePacket>
 800ca2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	61bb      	str	r3, [r7, #24]
 800ca3c:	e00b      	b.n	800ca56 <SEGGER_SYSVIEW_RecordU32+0x46>
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	69fb      	ldr	r3, [r7, #28]
 800ca44:	1c59      	adds	r1, r3, #1
 800ca46:	61f9      	str	r1, [r7, #28]
 800ca48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca4c:	b2d2      	uxtb	r2, r2
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	09db      	lsrs	r3, r3, #7
 800ca54:	61bb      	str	r3, [r7, #24]
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca5a:	d8f0      	bhi.n	800ca3e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	61fa      	str	r2, [r7, #28]
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	68f9      	ldr	r1, [r7, #12]
 800ca70:	6938      	ldr	r0, [r7, #16]
 800ca72:	f7ff fe75 	bl	800c760 <_SendPacket>
  RECORD_END();
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f383 8811 	msr	BASEPRI, r3
}
 800ca7c:	bf00      	nop
 800ca7e:	3720      	adds	r7, #32
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20014918 	.word	0x20014918

0800ca88 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08c      	sub	sp, #48	@ 0x30
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ca94:	f3ef 8311 	mrs	r3, BASEPRI
 800ca98:	f04f 0120 	mov.w	r1, #32
 800ca9c:	f381 8811 	msr	BASEPRI, r1
 800caa0:	61fb      	str	r3, [r7, #28]
 800caa2:	4825      	ldr	r0, [pc, #148]	@ (800cb38 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800caa4:	f7ff fd6d 	bl	800c582 <_PreparePacket>
 800caa8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cab6:	e00b      	b.n	800cad0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800cab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabe:	1c59      	adds	r1, r3, #1
 800cac0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cac2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cac6:	b2d2      	uxtb	r2, r2
 800cac8:	701a      	strb	r2, [r3, #0]
 800caca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cacc:	09db      	lsrs	r3, r3, #7
 800cace:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cad4:	d8f0      	bhi.n	800cab8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	1c5a      	adds	r2, r3, #1
 800cada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cadc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cade:	b2d2      	uxtb	r2, r2
 800cae0:	701a      	strb	r2, [r3, #0]
 800cae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cae4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	627b      	str	r3, [r7, #36]	@ 0x24
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	623b      	str	r3, [r7, #32]
 800caee:	e00b      	b.n	800cb08 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	1c59      	adds	r1, r3, #1
 800caf8:	6279      	str	r1, [r7, #36]	@ 0x24
 800cafa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	09db      	lsrs	r3, r3, #7
 800cb06:	623b      	str	r3, [r7, #32]
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb0c:	d8f0      	bhi.n	800caf0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb14:	6a3a      	ldr	r2, [r7, #32]
 800cb16:	b2d2      	uxtb	r2, r2
 800cb18:	701a      	strb	r2, [r3, #0]
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	6979      	ldr	r1, [r7, #20]
 800cb22:	69b8      	ldr	r0, [r7, #24]
 800cb24:	f7ff fe1c 	bl	800c760 <_SendPacket>
  RECORD_END();
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	f383 8811 	msr	BASEPRI, r3
}
 800cb2e:	bf00      	nop
 800cb30:	3730      	adds	r7, #48	@ 0x30
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20014918 	.word	0x20014918

0800cb3c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08e      	sub	sp, #56	@ 0x38
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800cb4a:	f3ef 8311 	mrs	r3, BASEPRI
 800cb4e:	f04f 0120 	mov.w	r1, #32
 800cb52:	f381 8811 	msr	BASEPRI, r1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	4832      	ldr	r0, [pc, #200]	@ (800cc24 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800cb5a:	f7ff fd12 	bl	800c582 <_PreparePacket>
 800cb5e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb6c:	e00b      	b.n	800cb86 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb74:	1c59      	adds	r1, r3, #1
 800cb76:	6379      	str	r1, [r7, #52]	@ 0x34
 800cb78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb7c:	b2d2      	uxtb	r2, r2
 800cb7e:	701a      	strb	r2, [r3, #0]
 800cb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb82:	09db      	lsrs	r3, r3, #7
 800cb84:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb8a:	d8f0      	bhi.n	800cb6e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	637a      	str	r2, [r7, #52]	@ 0x34
 800cb92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb94:	b2d2      	uxtb	r2, r2
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cba4:	e00b      	b.n	800cbbe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	1c59      	adds	r1, r3, #1
 800cbae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cbb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbb4:	b2d2      	uxtb	r2, r2
 800cbb6:	701a      	strb	r2, [r3, #0]
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	09db      	lsrs	r3, r3, #7
 800cbbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc0:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbc2:	d8f0      	bhi.n	800cba6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cbca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbcc:	b2d2      	uxtb	r2, r2
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	623b      	str	r3, [r7, #32]
 800cbdc:	e00b      	b.n	800cbf6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	1c59      	adds	r1, r3, #1
 800cbe6:	6279      	str	r1, [r7, #36]	@ 0x24
 800cbe8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbec:	b2d2      	uxtb	r2, r2
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	09db      	lsrs	r3, r3, #7
 800cbf4:	623b      	str	r3, [r7, #32]
 800cbf6:	6a3b      	ldr	r3, [r7, #32]
 800cbf8:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbfa:	d8f0      	bhi.n	800cbde <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	1c5a      	adds	r2, r3, #1
 800cc00:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc02:	6a3a      	ldr	r2, [r7, #32]
 800cc04:	b2d2      	uxtb	r2, r2
 800cc06:	701a      	strb	r2, [r3, #0]
 800cc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	6979      	ldr	r1, [r7, #20]
 800cc10:	69b8      	ldr	r0, [r7, #24]
 800cc12:	f7ff fda5 	bl	800c760 <_SendPacket>
  RECORD_END();
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	f383 8811 	msr	BASEPRI, r3
}
 800cc1c:	bf00      	nop
 800cc1e:	3738      	adds	r7, #56	@ 0x38
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	20014918 	.word	0x20014918

0800cc28 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b090      	sub	sp, #64	@ 0x40
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cc36:	f3ef 8311 	mrs	r3, BASEPRI
 800cc3a:	f04f 0120 	mov.w	r1, #32
 800cc3e:	f381 8811 	msr	BASEPRI, r1
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	4840      	ldr	r0, [pc, #256]	@ (800cd48 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800cc46:	f7ff fc9c 	bl	800c582 <_PreparePacket>
 800cc4a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc58:	e00b      	b.n	800cc72 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc60:	1c59      	adds	r1, r3, #1
 800cc62:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800cc64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc68:	b2d2      	uxtb	r2, r2
 800cc6a:	701a      	strb	r2, [r3, #0]
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6e:	09db      	lsrs	r3, r3, #7
 800cc70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc76:	d8f0      	bhi.n	800cc5a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800cc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cc7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc90:	e00b      	b.n	800ccaa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc98:	1c59      	adds	r1, r3, #1
 800cc9a:	6379      	str	r1, [r7, #52]	@ 0x34
 800cc9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cca0:	b2d2      	uxtb	r2, r2
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca6:	09db      	lsrs	r3, r3, #7
 800cca8:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccac:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccae:	d8f0      	bhi.n	800cc92 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	637a      	str	r2, [r7, #52]	@ 0x34
 800ccb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccb8:	b2d2      	uxtb	r2, r2
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccc8:	e00b      	b.n	800cce2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ccca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cccc:	b2da      	uxtb	r2, r3
 800ccce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd0:	1c59      	adds	r1, r3, #1
 800ccd2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ccd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ccd8:	b2d2      	uxtb	r2, r2
 800ccda:	701a      	strb	r2, [r3, #0]
 800ccdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccde:	09db      	lsrs	r3, r3, #7
 800cce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce4:	2b7f      	cmp	r3, #127	@ 0x7f
 800cce6:	d8f0      	bhi.n	800ccca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccf0:	b2d2      	uxtb	r2, r2
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccfe:	623b      	str	r3, [r7, #32]
 800cd00:	e00b      	b.n	800cd1a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd08:	1c59      	adds	r1, r3, #1
 800cd0a:	6279      	str	r1, [r7, #36]	@ 0x24
 800cd0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]
 800cd14:	6a3b      	ldr	r3, [r7, #32]
 800cd16:	09db      	lsrs	r3, r3, #7
 800cd18:	623b      	str	r3, [r7, #32]
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd1e:	d8f0      	bhi.n	800cd02 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800cd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd26:	6a3a      	ldr	r2, [r7, #32]
 800cd28:	b2d2      	uxtb	r2, r2
 800cd2a:	701a      	strb	r2, [r3, #0]
 800cd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	6979      	ldr	r1, [r7, #20]
 800cd34:	69b8      	ldr	r0, [r7, #24]
 800cd36:	f7ff fd13 	bl	800c760 <_SendPacket>
  RECORD_END();
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	f383 8811 	msr	BASEPRI, r3
}
 800cd40:	bf00      	nop
 800cd42:	3740      	adds	r7, #64	@ 0x40
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20014918 	.word	0x20014918

0800cd4c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08c      	sub	sp, #48	@ 0x30
 800cd50:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800cd52:	4b58      	ldr	r3, [pc, #352]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800cd54:	2201      	movs	r2, #1
 800cd56:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800cd58:	f3ef 8311 	mrs	r3, BASEPRI
 800cd5c:	f04f 0120 	mov.w	r1, #32
 800cd60:	f381 8811 	msr	BASEPRI, r1
 800cd64:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800cd66:	4b53      	ldr	r3, [pc, #332]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800cd68:	785b      	ldrb	r3, [r3, #1]
 800cd6a:	220a      	movs	r2, #10
 800cd6c:	4952      	ldr	r1, [pc, #328]	@ (800ceb8 <SEGGER_SYSVIEW_Start+0x16c>)
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f3 fa4e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800cd7a:	200a      	movs	r0, #10
 800cd7c:	f7ff fe2a 	bl	800c9d4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cd80:	f3ef 8311 	mrs	r3, BASEPRI
 800cd84:	f04f 0120 	mov.w	r1, #32
 800cd88:	f381 8811 	msr	BASEPRI, r1
 800cd8c:	60bb      	str	r3, [r7, #8]
 800cd8e:	484b      	ldr	r0, [pc, #300]	@ (800cebc <SEGGER_SYSVIEW_Start+0x170>)
 800cd90:	f7ff fbf7 	bl	800c582 <_PreparePacket>
 800cd94:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd9e:	4b45      	ldr	r3, [pc, #276]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cda4:	e00b      	b.n	800cdbe <SEGGER_SYSVIEW_Start+0x72>
 800cda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdac:	1c59      	adds	r1, r3, #1
 800cdae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cdb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	701a      	strb	r2, [r3, #0]
 800cdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdba:	09db      	lsrs	r3, r3, #7
 800cdbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc0:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdc2:	d8f0      	bhi.n	800cda6 <SEGGER_SYSVIEW_Start+0x5a>
 800cdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cdca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdcc:	b2d2      	uxtb	r2, r2
 800cdce:	701a      	strb	r2, [r3, #0]
 800cdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdd8:	4b36      	ldr	r3, [pc, #216]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	623b      	str	r3, [r7, #32]
 800cdde:	e00b      	b.n	800cdf8 <SEGGER_SYSVIEW_Start+0xac>
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	b2da      	uxtb	r2, r3
 800cde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde6:	1c59      	adds	r1, r3, #1
 800cde8:	6279      	str	r1, [r7, #36]	@ 0x24
 800cdea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cdee:	b2d2      	uxtb	r2, r2
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	09db      	lsrs	r3, r3, #7
 800cdf6:	623b      	str	r3, [r7, #32]
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdfc:	d8f0      	bhi.n	800cde0 <SEGGER_SYSVIEW_Start+0x94>
 800cdfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce00:	1c5a      	adds	r2, r3, #1
 800ce02:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce04:	6a3a      	ldr	r2, [r7, #32]
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	701a      	strb	r2, [r3, #0]
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	4b28      	ldr	r3, [pc, #160]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	61bb      	str	r3, [r7, #24]
 800ce18:	e00b      	b.n	800ce32 <SEGGER_SYSVIEW_Start+0xe6>
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	1c59      	adds	r1, r3, #1
 800ce22:	61f9      	str	r1, [r7, #28]
 800ce24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce28:	b2d2      	uxtb	r2, r2
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	09db      	lsrs	r3, r3, #7
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce36:	d8f0      	bhi.n	800ce1a <SEGGER_SYSVIEW_Start+0xce>
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	1c5a      	adds	r2, r3, #1
 800ce3c:	61fa      	str	r2, [r7, #28]
 800ce3e:	69ba      	ldr	r2, [r7, #24]
 800ce40:	b2d2      	uxtb	r2, r2
 800ce42:	701a      	strb	r2, [r3, #0]
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	617b      	str	r3, [r7, #20]
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	613b      	str	r3, [r7, #16]
 800ce50:	e00b      	b.n	800ce6a <SEGGER_SYSVIEW_Start+0x11e>
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	1c59      	adds	r1, r3, #1
 800ce5a:	6179      	str	r1, [r7, #20]
 800ce5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce60:	b2d2      	uxtb	r2, r2
 800ce62:	701a      	strb	r2, [r3, #0]
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	09db      	lsrs	r3, r3, #7
 800ce68:	613b      	str	r3, [r7, #16]
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce6e:	d8f0      	bhi.n	800ce52 <SEGGER_SYSVIEW_Start+0x106>
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	1c5a      	adds	r2, r3, #1
 800ce74:	617a      	str	r2, [r7, #20]
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	b2d2      	uxtb	r2, r2
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ce80:	2218      	movs	r2, #24
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7ff fc6b 	bl	800c760 <_SendPacket>
      RECORD_END();
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ce90:	4b08      	ldr	r3, [pc, #32]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800ce92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800ce98:	4b06      	ldr	r3, [pc, #24]	@ (800ceb4 <SEGGER_SYSVIEW_Start+0x168>)
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800ce9e:	f000 f9eb 	bl	800d278 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800cea2:	f000 f9b1 	bl	800d208 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cea6:	f000 fc83 	bl	800d7b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800ceaa:	bf00      	nop
 800ceac:	3730      	adds	r7, #48	@ 0x30
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	200148e8 	.word	0x200148e8
 800ceb8:	0800ef44 	.word	0x0800ef44
 800cebc:	20014918 	.word	0x20014918

0800cec0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cec6:	f3ef 8311 	mrs	r3, BASEPRI
 800ceca:	f04f 0120 	mov.w	r1, #32
 800cece:	f381 8811 	msr	BASEPRI, r1
 800ced2:	607b      	str	r3, [r7, #4]
 800ced4:	480b      	ldr	r0, [pc, #44]	@ (800cf04 <SEGGER_SYSVIEW_Stop+0x44>)
 800ced6:	f7ff fb54 	bl	800c582 <_PreparePacket>
 800ceda:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cedc:	4b0a      	ldr	r3, [pc, #40]	@ (800cf08 <SEGGER_SYSVIEW_Stop+0x48>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d007      	beq.n	800cef4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cee4:	220b      	movs	r2, #11
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6838      	ldr	r0, [r7, #0]
 800ceea:	f7ff fc39 	bl	800c760 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ceee:	4b06      	ldr	r3, [pc, #24]	@ (800cf08 <SEGGER_SYSVIEW_Stop+0x48>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f383 8811 	msr	BASEPRI, r3
}
 800cefa:	bf00      	nop
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20014918 	.word	0x20014918
 800cf08:	200148e8 	.word	0x200148e8

0800cf0c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08c      	sub	sp, #48	@ 0x30
 800cf10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf12:	f3ef 8311 	mrs	r3, BASEPRI
 800cf16:	f04f 0120 	mov.w	r1, #32
 800cf1a:	f381 8811 	msr	BASEPRI, r1
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	4845      	ldr	r0, [pc, #276]	@ (800d038 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cf22:	f7ff fb2e 	bl	800c582 <_PreparePacket>
 800cf26:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf30:	4b42      	ldr	r3, [pc, #264]	@ (800d03c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf36:	e00b      	b.n	800cf50 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3e:	1c59      	adds	r1, r3, #1
 800cf40:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cf42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	701a      	strb	r2, [r3, #0]
 800cf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf4c:	09db      	lsrs	r3, r3, #7
 800cf4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf52:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf54:	d8f0      	bhi.n	800cf38 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf58:	1c5a      	adds	r2, r3, #1
 800cf5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	701a      	strb	r2, [r3, #0]
 800cf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf64:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf6a:	4b34      	ldr	r3, [pc, #208]	@ (800d03c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	623b      	str	r3, [r7, #32]
 800cf70:	e00b      	b.n	800cf8a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf78:	1c59      	adds	r1, r3, #1
 800cf7a:	6279      	str	r1, [r7, #36]	@ 0x24
 800cf7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf80:	b2d2      	uxtb	r2, r2
 800cf82:	701a      	strb	r2, [r3, #0]
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	09db      	lsrs	r3, r3, #7
 800cf88:	623b      	str	r3, [r7, #32]
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf8e:	d8f0      	bhi.n	800cf72 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf96:	6a3a      	ldr	r2, [r7, #32]
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	61fb      	str	r3, [r7, #28]
 800cfa4:	4b25      	ldr	r3, [pc, #148]	@ (800d03c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	61bb      	str	r3, [r7, #24]
 800cfaa:	e00b      	b.n	800cfc4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	1c59      	adds	r1, r3, #1
 800cfb4:	61f9      	str	r1, [r7, #28]
 800cfb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cfba:	b2d2      	uxtb	r2, r2
 800cfbc:	701a      	strb	r2, [r3, #0]
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	09db      	lsrs	r3, r3, #7
 800cfc2:	61bb      	str	r3, [r7, #24]
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfc8:	d8f0      	bhi.n	800cfac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	1c5a      	adds	r2, r3, #1
 800cfce:	61fa      	str	r2, [r7, #28]
 800cfd0:	69ba      	ldr	r2, [r7, #24]
 800cfd2:	b2d2      	uxtb	r2, r2
 800cfd4:	701a      	strb	r2, [r3, #0]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]
 800cfe2:	e00b      	b.n	800cffc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	1c59      	adds	r1, r3, #1
 800cfec:	6179      	str	r1, [r7, #20]
 800cfee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cff2:	b2d2      	uxtb	r2, r2
 800cff4:	701a      	strb	r2, [r3, #0]
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	09db      	lsrs	r3, r3, #7
 800cffa:	613b      	str	r3, [r7, #16]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b7f      	cmp	r3, #127	@ 0x7f
 800d000:	d8f0      	bhi.n	800cfe4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	617a      	str	r2, [r7, #20]
 800d008:	693a      	ldr	r2, [r7, #16]
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d012:	2218      	movs	r2, #24
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	68b8      	ldr	r0, [r7, #8]
 800d018:	f7ff fba2 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d022:	4b06      	ldr	r3, [pc, #24]	@ (800d03c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d02a:	4b04      	ldr	r3, [pc, #16]	@ (800d03c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02e:	4798      	blx	r3
  }
}
 800d030:	bf00      	nop
 800d032:	3730      	adds	r7, #48	@ 0x30
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	20014918 	.word	0x20014918
 800d03c:	200148e8 	.word	0x200148e8

0800d040 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d040:	b580      	push	{r7, lr}
 800d042:	b092      	sub	sp, #72	@ 0x48
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d048:	f3ef 8311 	mrs	r3, BASEPRI
 800d04c:	f04f 0120 	mov.w	r1, #32
 800d050:	f381 8811 	msr	BASEPRI, r1
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	486a      	ldr	r0, [pc, #424]	@ (800d200 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d058:	f7ff fa93 	bl	800c582 <_PreparePacket>
 800d05c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	647b      	str	r3, [r7, #68]	@ 0x44
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	4b66      	ldr	r3, [pc, #408]	@ (800d204 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	643b      	str	r3, [r7, #64]	@ 0x40
 800d072:	e00b      	b.n	800d08c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d076:	b2da      	uxtb	r2, r3
 800d078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d07a:	1c59      	adds	r1, r3, #1
 800d07c:	6479      	str	r1, [r7, #68]	@ 0x44
 800d07e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d082:	b2d2      	uxtb	r2, r2
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d088:	09db      	lsrs	r3, r3, #7
 800d08a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d08c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d08e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d090:	d8f0      	bhi.n	800d074 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d094:	1c5a      	adds	r2, r3, #1
 800d096:	647a      	str	r2, [r7, #68]	@ 0x44
 800d098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d09a:	b2d2      	uxtb	r2, r2
 800d09c:	701a      	strb	r2, [r3, #0]
 800d09e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0ac:	e00b      	b.n	800d0c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b4:	1c59      	adds	r1, r3, #1
 800d0b6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d0b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d0bc:	b2d2      	uxtb	r2, r2
 800d0be:	701a      	strb	r2, [r3, #0]
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c2:	09db      	lsrs	r3, r3, #7
 800d0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0ca:	d8f0      	bhi.n	800d0ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d0cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d0d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0d4:	b2d2      	uxtb	r2, r2
 800d0d6:	701a      	strb	r2, [r3, #0]
 800d0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f7ff f9ff 	bl	800c4e8 <_EncodeStr>
 800d0ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d0ec:	2209      	movs	r2, #9
 800d0ee:	68f9      	ldr	r1, [r7, #12]
 800d0f0:	6938      	ldr	r0, [r7, #16]
 800d0f2:	f7ff fb35 	bl	800c760 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	4b40      	ldr	r3, [pc, #256]	@ (800d204 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	633b      	str	r3, [r7, #48]	@ 0x30
 800d10a:	e00b      	b.n	800d124 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d112:	1c59      	adds	r1, r3, #1
 800d114:	6379      	str	r1, [r7, #52]	@ 0x34
 800d116:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d11a:	b2d2      	uxtb	r2, r2
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d120:	09db      	lsrs	r3, r3, #7
 800d122:	633b      	str	r3, [r7, #48]	@ 0x30
 800d124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d126:	2b7f      	cmp	r3, #127	@ 0x7f
 800d128:	d8f0      	bhi.n	800d10c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d12c:	1c5a      	adds	r2, r3, #1
 800d12e:	637a      	str	r2, [r7, #52]	@ 0x34
 800d130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d132:	b2d2      	uxtb	r2, r2
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d138:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d144:	e00b      	b.n	800d15e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14c:	1c59      	adds	r1, r3, #1
 800d14e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d150:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d154:	b2d2      	uxtb	r2, r2
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15a:	09db      	lsrs	r3, r3, #7
 800d15c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d160:	2b7f      	cmp	r3, #127	@ 0x7f
 800d162:	d8f0      	bhi.n	800d146 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	1c5a      	adds	r2, r3, #1
 800d168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d16a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d16c:	b2d2      	uxtb	r2, r2
 800d16e:	701a      	strb	r2, [r3, #0]
 800d170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d172:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	627b      	str	r3, [r7, #36]	@ 0x24
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	623b      	str	r3, [r7, #32]
 800d17e:	e00b      	b.n	800d198 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	b2da      	uxtb	r2, r3
 800d184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d186:	1c59      	adds	r1, r3, #1
 800d188:	6279      	str	r1, [r7, #36]	@ 0x24
 800d18a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d18e:	b2d2      	uxtb	r2, r2
 800d190:	701a      	strb	r2, [r3, #0]
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	09db      	lsrs	r3, r3, #7
 800d196:	623b      	str	r3, [r7, #32]
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d19c:	d8f0      	bhi.n	800d180 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a0:	1c5a      	adds	r2, r3, #1
 800d1a2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1a4:	6a3a      	ldr	r2, [r7, #32]
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	701a      	strb	r2, [r3, #0]
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	61fb      	str	r3, [r7, #28]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61bb      	str	r3, [r7, #24]
 800d1b6:	e00b      	b.n	800d1d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	1c59      	adds	r1, r3, #1
 800d1c0:	61f9      	str	r1, [r7, #28]
 800d1c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1c6:	b2d2      	uxtb	r2, r2
 800d1c8:	701a      	strb	r2, [r3, #0]
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	09db      	lsrs	r3, r3, #7
 800d1ce:	61bb      	str	r3, [r7, #24]
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1d4:	d8f0      	bhi.n	800d1b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	1c5a      	adds	r2, r3, #1
 800d1da:	61fa      	str	r2, [r7, #28]
 800d1dc:	69ba      	ldr	r2, [r7, #24]
 800d1de:	b2d2      	uxtb	r2, r2
 800d1e0:	701a      	strb	r2, [r3, #0]
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d1e6:	2215      	movs	r2, #21
 800d1e8:	68f9      	ldr	r1, [r7, #12]
 800d1ea:	6938      	ldr	r0, [r7, #16]
 800d1ec:	f7ff fab8 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f383 8811 	msr	BASEPRI, r3
}
 800d1f6:	bf00      	nop
 800d1f8:	3748      	adds	r7, #72	@ 0x48
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20014918 	.word	0x20014918
 800d204:	200148e8 	.word	0x200148e8

0800d208 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d208:	b580      	push	{r7, lr}
 800d20a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d20c:	4b07      	ldr	r3, [pc, #28]	@ (800d22c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d20e:	6a1b      	ldr	r3, [r3, #32]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d008      	beq.n	800d226 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d214:	4b05      	ldr	r3, [pc, #20]	@ (800d22c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d21e:	4b03      	ldr	r3, [pc, #12]	@ (800d22c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d220:	6a1b      	ldr	r3, [r3, #32]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	4798      	blx	r3
  }
}
 800d226:	bf00      	nop
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	200148e8 	.word	0x200148e8

0800d230 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d238:	f3ef 8311 	mrs	r3, BASEPRI
 800d23c:	f04f 0120 	mov.w	r1, #32
 800d240:	f381 8811 	msr	BASEPRI, r1
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	480b      	ldr	r0, [pc, #44]	@ (800d274 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d248:	f7ff f99b 	bl	800c582 <_PreparePacket>
 800d24c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d24e:	2280      	movs	r2, #128	@ 0x80
 800d250:	6879      	ldr	r1, [r7, #4]
 800d252:	6938      	ldr	r0, [r7, #16]
 800d254:	f7ff f948 	bl	800c4e8 <_EncodeStr>
 800d258:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d25a:	220e      	movs	r2, #14
 800d25c:	68f9      	ldr	r1, [r7, #12]
 800d25e:	6938      	ldr	r0, [r7, #16]
 800d260:	f7ff fa7e 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f383 8811 	msr	BASEPRI, r3
}
 800d26a:	bf00      	nop
 800d26c:	3718      	adds	r7, #24
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	20014918 	.word	0x20014918

0800d278 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d278:	b590      	push	{r4, r7, lr}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d27e:	4b15      	ldr	r3, [pc, #84]	@ (800d2d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d01a      	beq.n	800d2bc <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d286:	4b13      	ldr	r3, [pc, #76]	@ (800d2d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d015      	beq.n	800d2bc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d290:	4b10      	ldr	r3, [pc, #64]	@ (800d2d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d292:	6a1b      	ldr	r3, [r3, #32]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4798      	blx	r3
 800d298:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d29c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d29e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2a2:	f04f 0200 	mov.w	r2, #0
 800d2a6:	f04f 0300 	mov.w	r3, #0
 800d2aa:	000a      	movs	r2, r1
 800d2ac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	200d      	movs	r0, #13
 800d2b6:	f7ff fbe7 	bl	800ca88 <SEGGER_SYSVIEW_RecordU32x2>
 800d2ba:	e006      	b.n	800d2ca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d2bc:	4b06      	ldr	r3, [pc, #24]	@ (800d2d8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	200c      	movs	r0, #12
 800d2c4:	f7ff fba4 	bl	800ca10 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d2c8:	bf00      	nop
 800d2ca:	bf00      	nop
 800d2cc:	370c      	adds	r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd90      	pop	{r4, r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	200148e8 	.word	0x200148e8
 800d2d8:	e0001004 	.word	0xe0001004

0800d2dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d2e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d2e6:	f04f 0120 	mov.w	r1, #32
 800d2ea:	f381 8811 	msr	BASEPRI, r1
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	4819      	ldr	r0, [pc, #100]	@ (800d358 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d2f2:	f7ff f946 	bl	800c582 <_PreparePacket>
 800d2f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d2fc:	4b17      	ldr	r3, [pc, #92]	@ (800d35c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d304:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	613b      	str	r3, [r7, #16]
 800d30e:	e00b      	b.n	800d328 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	b2da      	uxtb	r2, r3
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	1c59      	adds	r1, r3, #1
 800d318:	6179      	str	r1, [r7, #20]
 800d31a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d31e:	b2d2      	uxtb	r2, r2
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	09db      	lsrs	r3, r3, #7
 800d326:	613b      	str	r3, [r7, #16]
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d32c:	d8f0      	bhi.n	800d310 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	617a      	str	r2, [r7, #20]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	b2d2      	uxtb	r2, r2
 800d338:	701a      	strb	r2, [r3, #0]
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d33e:	2202      	movs	r2, #2
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	68b8      	ldr	r0, [r7, #8]
 800d344:	f7ff fa0c 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f383 8811 	msr	BASEPRI, r3
}
 800d34e:	bf00      	nop
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	20014918 	.word	0x20014918
 800d35c:	e000ed04 	.word	0xe000ed04

0800d360 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d366:	f3ef 8311 	mrs	r3, BASEPRI
 800d36a:	f04f 0120 	mov.w	r1, #32
 800d36e:	f381 8811 	msr	BASEPRI, r1
 800d372:	607b      	str	r3, [r7, #4]
 800d374:	4807      	ldr	r0, [pc, #28]	@ (800d394 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d376:	f7ff f904 	bl	800c582 <_PreparePacket>
 800d37a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d37c:	2203      	movs	r2, #3
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	6838      	ldr	r0, [r7, #0]
 800d382:	f7ff f9ed 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f383 8811 	msr	BASEPRI, r3
}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	20014918 	.word	0x20014918

0800d398 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d39e:	f3ef 8311 	mrs	r3, BASEPRI
 800d3a2:	f04f 0120 	mov.w	r1, #32
 800d3a6:	f381 8811 	msr	BASEPRI, r1
 800d3aa:	607b      	str	r3, [r7, #4]
 800d3ac:	4807      	ldr	r0, [pc, #28]	@ (800d3cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d3ae:	f7ff f8e8 	bl	800c582 <_PreparePacket>
 800d3b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d3b4:	2212      	movs	r2, #18
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6838      	ldr	r0, [r7, #0]
 800d3ba:	f7ff f9d1 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f383 8811 	msr	BASEPRI, r3
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20014918 	.word	0x20014918

0800d3d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d3d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d3da:	f04f 0120 	mov.w	r1, #32
 800d3de:	f381 8811 	msr	BASEPRI, r1
 800d3e2:	607b      	str	r3, [r7, #4]
 800d3e4:	4807      	ldr	r0, [pc, #28]	@ (800d404 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d3e6:	f7ff f8cc 	bl	800c582 <_PreparePacket>
 800d3ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d3ec:	2211      	movs	r2, #17
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6838      	ldr	r0, [r7, #0]
 800d3f2:	f7ff f9b5 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f383 8811 	msr	BASEPRI, r3
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	20014918 	.word	0x20014918

0800d408 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d410:	f3ef 8311 	mrs	r3, BASEPRI
 800d414:	f04f 0120 	mov.w	r1, #32
 800d418:	f381 8811 	msr	BASEPRI, r1
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	4819      	ldr	r0, [pc, #100]	@ (800d484 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d420:	f7ff f8af 	bl	800c582 <_PreparePacket>
 800d424:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d42a:	4b17      	ldr	r3, [pc, #92]	@ (800d488 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	61fb      	str	r3, [r7, #28]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	61bb      	str	r3, [r7, #24]
 800d43c:	e00b      	b.n	800d456 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	b2da      	uxtb	r2, r3
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	1c59      	adds	r1, r3, #1
 800d446:	61f9      	str	r1, [r7, #28]
 800d448:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d44c:	b2d2      	uxtb	r2, r2
 800d44e:	701a      	strb	r2, [r3, #0]
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	09db      	lsrs	r3, r3, #7
 800d454:	61bb      	str	r3, [r7, #24]
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	2b7f      	cmp	r3, #127	@ 0x7f
 800d45a:	d8f0      	bhi.n	800d43e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	61fa      	str	r2, [r7, #28]
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	b2d2      	uxtb	r2, r2
 800d466:	701a      	strb	r2, [r3, #0]
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d46c:	2208      	movs	r2, #8
 800d46e:	68f9      	ldr	r1, [r7, #12]
 800d470:	6938      	ldr	r0, [r7, #16]
 800d472:	f7ff f975 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f383 8811 	msr	BASEPRI, r3
}
 800d47c:	bf00      	nop
 800d47e:	3720      	adds	r7, #32
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20014918 	.word	0x20014918
 800d488:	200148e8 	.word	0x200148e8

0800d48c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d494:	f3ef 8311 	mrs	r3, BASEPRI
 800d498:	f04f 0120 	mov.w	r1, #32
 800d49c:	f381 8811 	msr	BASEPRI, r1
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	4819      	ldr	r0, [pc, #100]	@ (800d508 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d4a4:	f7ff f86d 	bl	800c582 <_PreparePacket>
 800d4a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d4ae:	4b17      	ldr	r3, [pc, #92]	@ (800d50c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	61bb      	str	r3, [r7, #24]
 800d4c0:	e00b      	b.n	800d4da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	1c59      	adds	r1, r3, #1
 800d4ca:	61f9      	str	r1, [r7, #28]
 800d4cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d4d0:	b2d2      	uxtb	r2, r2
 800d4d2:	701a      	strb	r2, [r3, #0]
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	09db      	lsrs	r3, r3, #7
 800d4d8:	61bb      	str	r3, [r7, #24]
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4de:	d8f0      	bhi.n	800d4c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	61fa      	str	r2, [r7, #28]
 800d4e6:	69ba      	ldr	r2, [r7, #24]
 800d4e8:	b2d2      	uxtb	r2, r2
 800d4ea:	701a      	strb	r2, [r3, #0]
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d4f0:	2204      	movs	r2, #4
 800d4f2:	68f9      	ldr	r1, [r7, #12]
 800d4f4:	6938      	ldr	r0, [r7, #16]
 800d4f6:	f7ff f933 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	f383 8811 	msr	BASEPRI, r3
}
 800d500:	bf00      	nop
 800d502:	3720      	adds	r7, #32
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	20014918 	.word	0x20014918
 800d50c:	200148e8 	.word	0x200148e8

0800d510 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d518:	f3ef 8311 	mrs	r3, BASEPRI
 800d51c:	f04f 0120 	mov.w	r1, #32
 800d520:	f381 8811 	msr	BASEPRI, r1
 800d524:	617b      	str	r3, [r7, #20]
 800d526:	4819      	ldr	r0, [pc, #100]	@ (800d58c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d528:	f7ff f82b 	bl	800c582 <_PreparePacket>
 800d52c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d532:	4b17      	ldr	r3, [pc, #92]	@ (800d590 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	61bb      	str	r3, [r7, #24]
 800d544:	e00b      	b.n	800d55e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	1c59      	adds	r1, r3, #1
 800d54e:	61f9      	str	r1, [r7, #28]
 800d550:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d554:	b2d2      	uxtb	r2, r2
 800d556:	701a      	strb	r2, [r3, #0]
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	09db      	lsrs	r3, r3, #7
 800d55c:	61bb      	str	r3, [r7, #24]
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	2b7f      	cmp	r3, #127	@ 0x7f
 800d562:	d8f0      	bhi.n	800d546 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	61fa      	str	r2, [r7, #28]
 800d56a:	69ba      	ldr	r2, [r7, #24]
 800d56c:	b2d2      	uxtb	r2, r2
 800d56e:	701a      	strb	r2, [r3, #0]
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d574:	2206      	movs	r2, #6
 800d576:	68f9      	ldr	r1, [r7, #12]
 800d578:	6938      	ldr	r0, [r7, #16]
 800d57a:	f7ff f8f1 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f383 8811 	msr	BASEPRI, r3
}
 800d584:	bf00      	nop
 800d586:	3720      	adds	r7, #32
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20014918 	.word	0x20014918
 800d590:	200148e8 	.word	0x200148e8

0800d594 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	@ 0x28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d59e:	f3ef 8311 	mrs	r3, BASEPRI
 800d5a2:	f04f 0120 	mov.w	r1, #32
 800d5a6:	f381 8811 	msr	BASEPRI, r1
 800d5aa:	617b      	str	r3, [r7, #20]
 800d5ac:	4827      	ldr	r0, [pc, #156]	@ (800d64c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d5ae:	f7fe ffe8 	bl	800c582 <_PreparePacket>
 800d5b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d5b8:	4b25      	ldr	r3, [pc, #148]	@ (800d650 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	623b      	str	r3, [r7, #32]
 800d5ca:	e00b      	b.n	800d5e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d2:	1c59      	adds	r1, r3, #1
 800d5d4:	6279      	str	r1, [r7, #36]	@ 0x24
 800d5d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d5da:	b2d2      	uxtb	r2, r2
 800d5dc:	701a      	strb	r2, [r3, #0]
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	09db      	lsrs	r3, r3, #7
 800d5e2:	623b      	str	r3, [r7, #32]
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5e8:	d8f0      	bhi.n	800d5cc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800d5f0:	6a3a      	ldr	r2, [r7, #32]
 800d5f2:	b2d2      	uxtb	r2, r2
 800d5f4:	701a      	strb	r2, [r3, #0]
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	61fb      	str	r3, [r7, #28]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	61bb      	str	r3, [r7, #24]
 800d602:	e00b      	b.n	800d61c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	b2da      	uxtb	r2, r3
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	1c59      	adds	r1, r3, #1
 800d60c:	61f9      	str	r1, [r7, #28]
 800d60e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d612:	b2d2      	uxtb	r2, r2
 800d614:	701a      	strb	r2, [r3, #0]
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	09db      	lsrs	r3, r3, #7
 800d61a:	61bb      	str	r3, [r7, #24]
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d620:	d8f0      	bhi.n	800d604 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	61fa      	str	r2, [r7, #28]
 800d628:	69ba      	ldr	r2, [r7, #24]
 800d62a:	b2d2      	uxtb	r2, r2
 800d62c:	701a      	strb	r2, [r3, #0]
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d632:	2207      	movs	r2, #7
 800d634:	68f9      	ldr	r1, [r7, #12]
 800d636:	6938      	ldr	r0, [r7, #16]
 800d638:	f7ff f892 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f383 8811 	msr	BASEPRI, r3
}
 800d642:	bf00      	nop
 800d644:	3728      	adds	r7, #40	@ 0x28
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	20014918 	.word	0x20014918
 800d650:	200148e8 	.word	0x200148e8

0800d654 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d65c:	4b04      	ldr	r3, [pc, #16]	@ (800d670 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	1ad3      	subs	r3, r2, r3
}
 800d664:	4618      	mov	r0, r3
 800d666:	370c      	adds	r7, #12
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	200148e8 	.word	0x200148e8

0800d674 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d674:	b580      	push	{r7, lr}
 800d676:	b08c      	sub	sp, #48	@ 0x30
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d67e:	4b3b      	ldr	r3, [pc, #236]	@ (800d76c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d06d      	beq.n	800d762 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d686:	4b39      	ldr	r3, [pc, #228]	@ (800d76c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d68c:	2300      	movs	r3, #0
 800d68e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d690:	e008      	b.n	800d6a4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800d698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d007      	beq.n	800d6ae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d3f2      	bcc.n	800d692 <SEGGER_SYSVIEW_SendModule+0x1e>
 800d6ac:	e000      	b.n	800d6b0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d6ae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d055      	beq.n	800d762 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d6b6:	f3ef 8311 	mrs	r3, BASEPRI
 800d6ba:	f04f 0120 	mov.w	r1, #32
 800d6be:	f381 8811 	msr	BASEPRI, r1
 800d6c2:	617b      	str	r3, [r7, #20]
 800d6c4:	482a      	ldr	r0, [pc, #168]	@ (800d770 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d6c6:	f7fe ff5c 	bl	800c582 <_PreparePacket>
 800d6ca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	623b      	str	r3, [r7, #32]
 800d6d8:	e00b      	b.n	800d6f2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e0:	1c59      	adds	r1, r3, #1
 800d6e2:	6279      	str	r1, [r7, #36]	@ 0x24
 800d6e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d6e8:	b2d2      	uxtb	r2, r2
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	09db      	lsrs	r3, r3, #7
 800d6f0:	623b      	str	r3, [r7, #32]
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6f6:	d8f0      	bhi.n	800d6da <SEGGER_SYSVIEW_SendModule+0x66>
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d6fe:	6a3a      	ldr	r2, [r7, #32]
 800d700:	b2d2      	uxtb	r2, r2
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d706:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	61fb      	str	r3, [r7, #28]
 800d70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	61bb      	str	r3, [r7, #24]
 800d712:	e00b      	b.n	800d72c <SEGGER_SYSVIEW_SendModule+0xb8>
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	b2da      	uxtb	r2, r3
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	1c59      	adds	r1, r3, #1
 800d71c:	61f9      	str	r1, [r7, #28]
 800d71e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d722:	b2d2      	uxtb	r2, r2
 800d724:	701a      	strb	r2, [r3, #0]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	09db      	lsrs	r3, r3, #7
 800d72a:	61bb      	str	r3, [r7, #24]
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d730:	d8f0      	bhi.n	800d714 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	61fa      	str	r2, [r7, #28]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	b2d2      	uxtb	r2, r2
 800d73c:	701a      	strb	r2, [r3, #0]
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2280      	movs	r2, #128	@ 0x80
 800d748:	4619      	mov	r1, r3
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f7fe fecc 	bl	800c4e8 <_EncodeStr>
 800d750:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d752:	2216      	movs	r2, #22
 800d754:	68f9      	ldr	r1, [r7, #12]
 800d756:	6938      	ldr	r0, [r7, #16]
 800d758:	f7ff f802 	bl	800c760 <_SendPacket>
      RECORD_END();
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d762:	bf00      	nop
 800d764:	3730      	adds	r7, #48	@ 0x30
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	20014910 	.word	0x20014910
 800d770:	20014918 	.word	0x20014918

0800d774 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d77a:	4b0c      	ldr	r3, [pc, #48]	@ (800d7ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00f      	beq.n	800d7a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d782:	4b0a      	ldr	r3, [pc, #40]	@ (800d7ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1f2      	bne.n	800d788 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d7a2:	bf00      	nop
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20014910 	.word	0x20014910

0800d7b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d7b6:	f3ef 8311 	mrs	r3, BASEPRI
 800d7ba:	f04f 0120 	mov.w	r1, #32
 800d7be:	f381 8811 	msr	BASEPRI, r1
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	4817      	ldr	r0, [pc, #92]	@ (800d824 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d7c6:	f7fe fedc 	bl	800c582 <_PreparePacket>
 800d7ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	4b14      	ldr	r3, [pc, #80]	@ (800d828 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	613b      	str	r3, [r7, #16]
 800d7da:	e00b      	b.n	800d7f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	1c59      	adds	r1, r3, #1
 800d7e4:	6179      	str	r1, [r7, #20]
 800d7e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d7ea:	b2d2      	uxtb	r2, r2
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	09db      	lsrs	r3, r3, #7
 800d7f2:	613b      	str	r3, [r7, #16]
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7f8:	d8f0      	bhi.n	800d7dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	617a      	str	r2, [r7, #20]
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	b2d2      	uxtb	r2, r2
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d80a:	221b      	movs	r2, #27
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	68b8      	ldr	r0, [r7, #8]
 800d810:	f7fe ffa6 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f383 8811 	msr	BASEPRI, r3
}
 800d81a:	bf00      	nop
 800d81c:	3718      	adds	r7, #24
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	20014918 	.word	0x20014918
 800d828:	20014914 	.word	0x20014914

0800d82c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08a      	sub	sp, #40	@ 0x28
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d834:	f3ef 8311 	mrs	r3, BASEPRI
 800d838:	f04f 0120 	mov.w	r1, #32
 800d83c:	f381 8811 	msr	BASEPRI, r1
 800d840:	617b      	str	r3, [r7, #20]
 800d842:	4827      	ldr	r0, [pc, #156]	@ (800d8e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d844:	f7fe fe9d 	bl	800c582 <_PreparePacket>
 800d848:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d84a:	2280      	movs	r2, #128	@ 0x80
 800d84c:	6879      	ldr	r1, [r7, #4]
 800d84e:	6938      	ldr	r0, [r7, #16]
 800d850:	f7fe fe4a 	bl	800c4e8 <_EncodeStr>
 800d854:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	627b      	str	r3, [r7, #36]	@ 0x24
 800d85a:	2301      	movs	r3, #1
 800d85c:	623b      	str	r3, [r7, #32]
 800d85e:	e00b      	b.n	800d878 <SEGGER_SYSVIEW_Warn+0x4c>
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	b2da      	uxtb	r2, r3
 800d864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d866:	1c59      	adds	r1, r3, #1
 800d868:	6279      	str	r1, [r7, #36]	@ 0x24
 800d86a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	6a3b      	ldr	r3, [r7, #32]
 800d874:	09db      	lsrs	r3, r3, #7
 800d876:	623b      	str	r3, [r7, #32]
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d87c:	d8f0      	bhi.n	800d860 <SEGGER_SYSVIEW_Warn+0x34>
 800d87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d880:	1c5a      	adds	r2, r3, #1
 800d882:	627a      	str	r2, [r7, #36]	@ 0x24
 800d884:	6a3a      	ldr	r2, [r7, #32]
 800d886:	b2d2      	uxtb	r2, r2
 800d888:	701a      	strb	r2, [r3, #0]
 800d88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	61fb      	str	r3, [r7, #28]
 800d892:	2300      	movs	r3, #0
 800d894:	61bb      	str	r3, [r7, #24]
 800d896:	e00b      	b.n	800d8b0 <SEGGER_SYSVIEW_Warn+0x84>
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	1c59      	adds	r1, r3, #1
 800d8a0:	61f9      	str	r1, [r7, #28]
 800d8a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d8a6:	b2d2      	uxtb	r2, r2
 800d8a8:	701a      	strb	r2, [r3, #0]
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	09db      	lsrs	r3, r3, #7
 800d8ae:	61bb      	str	r3, [r7, #24]
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8b4:	d8f0      	bhi.n	800d898 <SEGGER_SYSVIEW_Warn+0x6c>
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	61fa      	str	r2, [r7, #28]
 800d8bc:	69ba      	ldr	r2, [r7, #24]
 800d8be:	b2d2      	uxtb	r2, r2
 800d8c0:	701a      	strb	r2, [r3, #0]
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d8c6:	221a      	movs	r2, #26
 800d8c8:	68f9      	ldr	r1, [r7, #12]
 800d8ca:	6938      	ldr	r0, [r7, #16]
 800d8cc:	f7fe ff48 	bl	800c760 <_SendPacket>
  RECORD_END();
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	f383 8811 	msr	BASEPRI, r3
}
 800d8d6:	bf00      	nop
 800d8d8:	3728      	adds	r7, #40	@ 0x28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	20014918 	.word	0x20014918

0800d8e4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800d8f2:	683a      	ldr	r2, [r7, #0]
 800d8f4:	6879      	ldr	r1, [r7, #4]
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	f7fe fcdc 	bl	800c2b4 <SEGGER_RTT_Write>
  return len;
 800d8fc:	683b      	ldr	r3, [r7, #0]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
	...

0800d908 <std>:
 800d908:	2300      	movs	r3, #0
 800d90a:	b510      	push	{r4, lr}
 800d90c:	4604      	mov	r4, r0
 800d90e:	e9c0 3300 	strd	r3, r3, [r0]
 800d912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d916:	6083      	str	r3, [r0, #8]
 800d918:	8181      	strh	r1, [r0, #12]
 800d91a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d91c:	81c2      	strh	r2, [r0, #14]
 800d91e:	6183      	str	r3, [r0, #24]
 800d920:	4619      	mov	r1, r3
 800d922:	2208      	movs	r2, #8
 800d924:	305c      	adds	r0, #92	@ 0x5c
 800d926:	f000 fa09 	bl	800dd3c <memset>
 800d92a:	4b0d      	ldr	r3, [pc, #52]	@ (800d960 <std+0x58>)
 800d92c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d92e:	4b0d      	ldr	r3, [pc, #52]	@ (800d964 <std+0x5c>)
 800d930:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d932:	4b0d      	ldr	r3, [pc, #52]	@ (800d968 <std+0x60>)
 800d934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d936:	4b0d      	ldr	r3, [pc, #52]	@ (800d96c <std+0x64>)
 800d938:	6323      	str	r3, [r4, #48]	@ 0x30
 800d93a:	4b0d      	ldr	r3, [pc, #52]	@ (800d970 <std+0x68>)
 800d93c:	6224      	str	r4, [r4, #32]
 800d93e:	429c      	cmp	r4, r3
 800d940:	d006      	beq.n	800d950 <std+0x48>
 800d942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d946:	4294      	cmp	r4, r2
 800d948:	d002      	beq.n	800d950 <std+0x48>
 800d94a:	33d0      	adds	r3, #208	@ 0xd0
 800d94c:	429c      	cmp	r4, r3
 800d94e:	d105      	bne.n	800d95c <std+0x54>
 800d950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d958:	f000 ba50 	b.w	800ddfc <__retarget_lock_init_recursive>
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	bf00      	nop
 800d960:	0800db6d 	.word	0x0800db6d
 800d964:	0800db8f 	.word	0x0800db8f
 800d968:	0800dbc7 	.word	0x0800dbc7
 800d96c:	0800dbeb 	.word	0x0800dbeb
 800d970:	200149fc 	.word	0x200149fc

0800d974 <stdio_exit_handler>:
 800d974:	4a02      	ldr	r2, [pc, #8]	@ (800d980 <stdio_exit_handler+0xc>)
 800d976:	4903      	ldr	r1, [pc, #12]	@ (800d984 <stdio_exit_handler+0x10>)
 800d978:	4803      	ldr	r0, [pc, #12]	@ (800d988 <stdio_exit_handler+0x14>)
 800d97a:	f000 b869 	b.w	800da50 <_fwalk_sglue>
 800d97e:	bf00      	nop
 800d980:	20000064 	.word	0x20000064
 800d984:	0800e6b9 	.word	0x0800e6b9
 800d988:	20000074 	.word	0x20000074

0800d98c <cleanup_stdio>:
 800d98c:	6841      	ldr	r1, [r0, #4]
 800d98e:	4b0c      	ldr	r3, [pc, #48]	@ (800d9c0 <cleanup_stdio+0x34>)
 800d990:	4299      	cmp	r1, r3
 800d992:	b510      	push	{r4, lr}
 800d994:	4604      	mov	r4, r0
 800d996:	d001      	beq.n	800d99c <cleanup_stdio+0x10>
 800d998:	f000 fe8e 	bl	800e6b8 <_fflush_r>
 800d99c:	68a1      	ldr	r1, [r4, #8]
 800d99e:	4b09      	ldr	r3, [pc, #36]	@ (800d9c4 <cleanup_stdio+0x38>)
 800d9a0:	4299      	cmp	r1, r3
 800d9a2:	d002      	beq.n	800d9aa <cleanup_stdio+0x1e>
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f000 fe87 	bl	800e6b8 <_fflush_r>
 800d9aa:	68e1      	ldr	r1, [r4, #12]
 800d9ac:	4b06      	ldr	r3, [pc, #24]	@ (800d9c8 <cleanup_stdio+0x3c>)
 800d9ae:	4299      	cmp	r1, r3
 800d9b0:	d004      	beq.n	800d9bc <cleanup_stdio+0x30>
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9b8:	f000 be7e 	b.w	800e6b8 <_fflush_r>
 800d9bc:	bd10      	pop	{r4, pc}
 800d9be:	bf00      	nop
 800d9c0:	200149fc 	.word	0x200149fc
 800d9c4:	20014a64 	.word	0x20014a64
 800d9c8:	20014acc 	.word	0x20014acc

0800d9cc <global_stdio_init.part.0>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d9fc <global_stdio_init.part.0+0x30>)
 800d9d0:	4c0b      	ldr	r4, [pc, #44]	@ (800da00 <global_stdio_init.part.0+0x34>)
 800d9d2:	4a0c      	ldr	r2, [pc, #48]	@ (800da04 <global_stdio_init.part.0+0x38>)
 800d9d4:	601a      	str	r2, [r3, #0]
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	2200      	movs	r2, #0
 800d9da:	2104      	movs	r1, #4
 800d9dc:	f7ff ff94 	bl	800d908 <std>
 800d9e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	2109      	movs	r1, #9
 800d9e8:	f7ff ff8e 	bl	800d908 <std>
 800d9ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9f6:	2112      	movs	r1, #18
 800d9f8:	f7ff bf86 	b.w	800d908 <std>
 800d9fc:	20014b34 	.word	0x20014b34
 800da00:	200149fc 	.word	0x200149fc
 800da04:	0800d975 	.word	0x0800d975

0800da08 <__sfp_lock_acquire>:
 800da08:	4801      	ldr	r0, [pc, #4]	@ (800da10 <__sfp_lock_acquire+0x8>)
 800da0a:	f000 b9f8 	b.w	800ddfe <__retarget_lock_acquire_recursive>
 800da0e:	bf00      	nop
 800da10:	20014b3d 	.word	0x20014b3d

0800da14 <__sfp_lock_release>:
 800da14:	4801      	ldr	r0, [pc, #4]	@ (800da1c <__sfp_lock_release+0x8>)
 800da16:	f000 b9f3 	b.w	800de00 <__retarget_lock_release_recursive>
 800da1a:	bf00      	nop
 800da1c:	20014b3d 	.word	0x20014b3d

0800da20 <__sinit>:
 800da20:	b510      	push	{r4, lr}
 800da22:	4604      	mov	r4, r0
 800da24:	f7ff fff0 	bl	800da08 <__sfp_lock_acquire>
 800da28:	6a23      	ldr	r3, [r4, #32]
 800da2a:	b11b      	cbz	r3, 800da34 <__sinit+0x14>
 800da2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da30:	f7ff bff0 	b.w	800da14 <__sfp_lock_release>
 800da34:	4b04      	ldr	r3, [pc, #16]	@ (800da48 <__sinit+0x28>)
 800da36:	6223      	str	r3, [r4, #32]
 800da38:	4b04      	ldr	r3, [pc, #16]	@ (800da4c <__sinit+0x2c>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1f5      	bne.n	800da2c <__sinit+0xc>
 800da40:	f7ff ffc4 	bl	800d9cc <global_stdio_init.part.0>
 800da44:	e7f2      	b.n	800da2c <__sinit+0xc>
 800da46:	bf00      	nop
 800da48:	0800d98d 	.word	0x0800d98d
 800da4c:	20014b34 	.word	0x20014b34

0800da50 <_fwalk_sglue>:
 800da50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da54:	4607      	mov	r7, r0
 800da56:	4688      	mov	r8, r1
 800da58:	4614      	mov	r4, r2
 800da5a:	2600      	movs	r6, #0
 800da5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da60:	f1b9 0901 	subs.w	r9, r9, #1
 800da64:	d505      	bpl.n	800da72 <_fwalk_sglue+0x22>
 800da66:	6824      	ldr	r4, [r4, #0]
 800da68:	2c00      	cmp	r4, #0
 800da6a:	d1f7      	bne.n	800da5c <_fwalk_sglue+0xc>
 800da6c:	4630      	mov	r0, r6
 800da6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da72:	89ab      	ldrh	r3, [r5, #12]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d907      	bls.n	800da88 <_fwalk_sglue+0x38>
 800da78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da7c:	3301      	adds	r3, #1
 800da7e:	d003      	beq.n	800da88 <_fwalk_sglue+0x38>
 800da80:	4629      	mov	r1, r5
 800da82:	4638      	mov	r0, r7
 800da84:	47c0      	blx	r8
 800da86:	4306      	orrs	r6, r0
 800da88:	3568      	adds	r5, #104	@ 0x68
 800da8a:	e7e9      	b.n	800da60 <_fwalk_sglue+0x10>

0800da8c <iprintf>:
 800da8c:	b40f      	push	{r0, r1, r2, r3}
 800da8e:	b507      	push	{r0, r1, r2, lr}
 800da90:	4906      	ldr	r1, [pc, #24]	@ (800daac <iprintf+0x20>)
 800da92:	ab04      	add	r3, sp, #16
 800da94:	6808      	ldr	r0, [r1, #0]
 800da96:	f853 2b04 	ldr.w	r2, [r3], #4
 800da9a:	6881      	ldr	r1, [r0, #8]
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	f000 fae1 	bl	800e064 <_vfiprintf_r>
 800daa2:	b003      	add	sp, #12
 800daa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800daa8:	b004      	add	sp, #16
 800daaa:	4770      	bx	lr
 800daac:	20000070 	.word	0x20000070

0800dab0 <_puts_r>:
 800dab0:	6a03      	ldr	r3, [r0, #32]
 800dab2:	b570      	push	{r4, r5, r6, lr}
 800dab4:	6884      	ldr	r4, [r0, #8]
 800dab6:	4605      	mov	r5, r0
 800dab8:	460e      	mov	r6, r1
 800daba:	b90b      	cbnz	r3, 800dac0 <_puts_r+0x10>
 800dabc:	f7ff ffb0 	bl	800da20 <__sinit>
 800dac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dac2:	07db      	lsls	r3, r3, #31
 800dac4:	d405      	bmi.n	800dad2 <_puts_r+0x22>
 800dac6:	89a3      	ldrh	r3, [r4, #12]
 800dac8:	0598      	lsls	r0, r3, #22
 800daca:	d402      	bmi.n	800dad2 <_puts_r+0x22>
 800dacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dace:	f000 f996 	bl	800ddfe <__retarget_lock_acquire_recursive>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	0719      	lsls	r1, r3, #28
 800dad6:	d502      	bpl.n	800dade <_puts_r+0x2e>
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d135      	bne.n	800db4a <_puts_r+0x9a>
 800dade:	4621      	mov	r1, r4
 800dae0:	4628      	mov	r0, r5
 800dae2:	f000 f8c5 	bl	800dc70 <__swsetup_r>
 800dae6:	b380      	cbz	r0, 800db4a <_puts_r+0x9a>
 800dae8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800daec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800daee:	07da      	lsls	r2, r3, #31
 800daf0:	d405      	bmi.n	800dafe <_puts_r+0x4e>
 800daf2:	89a3      	ldrh	r3, [r4, #12]
 800daf4:	059b      	lsls	r3, r3, #22
 800daf6:	d402      	bmi.n	800dafe <_puts_r+0x4e>
 800daf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dafa:	f000 f981 	bl	800de00 <__retarget_lock_release_recursive>
 800dafe:	4628      	mov	r0, r5
 800db00:	bd70      	pop	{r4, r5, r6, pc}
 800db02:	2b00      	cmp	r3, #0
 800db04:	da04      	bge.n	800db10 <_puts_r+0x60>
 800db06:	69a2      	ldr	r2, [r4, #24]
 800db08:	429a      	cmp	r2, r3
 800db0a:	dc17      	bgt.n	800db3c <_puts_r+0x8c>
 800db0c:	290a      	cmp	r1, #10
 800db0e:	d015      	beq.n	800db3c <_puts_r+0x8c>
 800db10:	6823      	ldr	r3, [r4, #0]
 800db12:	1c5a      	adds	r2, r3, #1
 800db14:	6022      	str	r2, [r4, #0]
 800db16:	7019      	strb	r1, [r3, #0]
 800db18:	68a3      	ldr	r3, [r4, #8]
 800db1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800db1e:	3b01      	subs	r3, #1
 800db20:	60a3      	str	r3, [r4, #8]
 800db22:	2900      	cmp	r1, #0
 800db24:	d1ed      	bne.n	800db02 <_puts_r+0x52>
 800db26:	2b00      	cmp	r3, #0
 800db28:	da11      	bge.n	800db4e <_puts_r+0x9e>
 800db2a:	4622      	mov	r2, r4
 800db2c:	210a      	movs	r1, #10
 800db2e:	4628      	mov	r0, r5
 800db30:	f000 f85f 	bl	800dbf2 <__swbuf_r>
 800db34:	3001      	adds	r0, #1
 800db36:	d0d7      	beq.n	800dae8 <_puts_r+0x38>
 800db38:	250a      	movs	r5, #10
 800db3a:	e7d7      	b.n	800daec <_puts_r+0x3c>
 800db3c:	4622      	mov	r2, r4
 800db3e:	4628      	mov	r0, r5
 800db40:	f000 f857 	bl	800dbf2 <__swbuf_r>
 800db44:	3001      	adds	r0, #1
 800db46:	d1e7      	bne.n	800db18 <_puts_r+0x68>
 800db48:	e7ce      	b.n	800dae8 <_puts_r+0x38>
 800db4a:	3e01      	subs	r6, #1
 800db4c:	e7e4      	b.n	800db18 <_puts_r+0x68>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	1c5a      	adds	r2, r3, #1
 800db52:	6022      	str	r2, [r4, #0]
 800db54:	220a      	movs	r2, #10
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	e7ee      	b.n	800db38 <_puts_r+0x88>
	...

0800db5c <puts>:
 800db5c:	4b02      	ldr	r3, [pc, #8]	@ (800db68 <puts+0xc>)
 800db5e:	4601      	mov	r1, r0
 800db60:	6818      	ldr	r0, [r3, #0]
 800db62:	f7ff bfa5 	b.w	800dab0 <_puts_r>
 800db66:	bf00      	nop
 800db68:	20000070 	.word	0x20000070

0800db6c <__sread>:
 800db6c:	b510      	push	{r4, lr}
 800db6e:	460c      	mov	r4, r1
 800db70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db74:	f000 f90c 	bl	800dd90 <_read_r>
 800db78:	2800      	cmp	r0, #0
 800db7a:	bfab      	itete	ge
 800db7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db7e:	89a3      	ldrhlt	r3, [r4, #12]
 800db80:	181b      	addge	r3, r3, r0
 800db82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db86:	bfac      	ite	ge
 800db88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db8a:	81a3      	strhlt	r3, [r4, #12]
 800db8c:	bd10      	pop	{r4, pc}

0800db8e <__swrite>:
 800db8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db92:	461f      	mov	r7, r3
 800db94:	898b      	ldrh	r3, [r1, #12]
 800db96:	05db      	lsls	r3, r3, #23
 800db98:	4605      	mov	r5, r0
 800db9a:	460c      	mov	r4, r1
 800db9c:	4616      	mov	r6, r2
 800db9e:	d505      	bpl.n	800dbac <__swrite+0x1e>
 800dba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba4:	2302      	movs	r3, #2
 800dba6:	2200      	movs	r2, #0
 800dba8:	f000 f8e0 	bl	800dd6c <_lseek_r>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbb6:	81a3      	strh	r3, [r4, #12]
 800dbb8:	4632      	mov	r2, r6
 800dbba:	463b      	mov	r3, r7
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc2:	f7ff be8f 	b.w	800d8e4 <_write_r>

0800dbc6 <__sseek>:
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	460c      	mov	r4, r1
 800dbca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbce:	f000 f8cd 	bl	800dd6c <_lseek_r>
 800dbd2:	1c43      	adds	r3, r0, #1
 800dbd4:	89a3      	ldrh	r3, [r4, #12]
 800dbd6:	bf15      	itete	ne
 800dbd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbe2:	81a3      	strheq	r3, [r4, #12]
 800dbe4:	bf18      	it	ne
 800dbe6:	81a3      	strhne	r3, [r4, #12]
 800dbe8:	bd10      	pop	{r4, pc}

0800dbea <__sclose>:
 800dbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbee:	f000 b8ad 	b.w	800dd4c <_close_r>

0800dbf2 <__swbuf_r>:
 800dbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf4:	460e      	mov	r6, r1
 800dbf6:	4614      	mov	r4, r2
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	b118      	cbz	r0, 800dc04 <__swbuf_r+0x12>
 800dbfc:	6a03      	ldr	r3, [r0, #32]
 800dbfe:	b90b      	cbnz	r3, 800dc04 <__swbuf_r+0x12>
 800dc00:	f7ff ff0e 	bl	800da20 <__sinit>
 800dc04:	69a3      	ldr	r3, [r4, #24]
 800dc06:	60a3      	str	r3, [r4, #8]
 800dc08:	89a3      	ldrh	r3, [r4, #12]
 800dc0a:	071a      	lsls	r2, r3, #28
 800dc0c:	d501      	bpl.n	800dc12 <__swbuf_r+0x20>
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	b943      	cbnz	r3, 800dc24 <__swbuf_r+0x32>
 800dc12:	4621      	mov	r1, r4
 800dc14:	4628      	mov	r0, r5
 800dc16:	f000 f82b 	bl	800dc70 <__swsetup_r>
 800dc1a:	b118      	cbz	r0, 800dc24 <__swbuf_r+0x32>
 800dc1c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800dc20:	4638      	mov	r0, r7
 800dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc24:	6823      	ldr	r3, [r4, #0]
 800dc26:	6922      	ldr	r2, [r4, #16]
 800dc28:	1a98      	subs	r0, r3, r2
 800dc2a:	6963      	ldr	r3, [r4, #20]
 800dc2c:	b2f6      	uxtb	r6, r6
 800dc2e:	4283      	cmp	r3, r0
 800dc30:	4637      	mov	r7, r6
 800dc32:	dc05      	bgt.n	800dc40 <__swbuf_r+0x4e>
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f000 fd3e 	bl	800e6b8 <_fflush_r>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d1ed      	bne.n	800dc1c <__swbuf_r+0x2a>
 800dc40:	68a3      	ldr	r3, [r4, #8]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	60a3      	str	r3, [r4, #8]
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	6022      	str	r2, [r4, #0]
 800dc4c:	701e      	strb	r6, [r3, #0]
 800dc4e:	6962      	ldr	r2, [r4, #20]
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d004      	beq.n	800dc60 <__swbuf_r+0x6e>
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	07db      	lsls	r3, r3, #31
 800dc5a:	d5e1      	bpl.n	800dc20 <__swbuf_r+0x2e>
 800dc5c:	2e0a      	cmp	r6, #10
 800dc5e:	d1df      	bne.n	800dc20 <__swbuf_r+0x2e>
 800dc60:	4621      	mov	r1, r4
 800dc62:	4628      	mov	r0, r5
 800dc64:	f000 fd28 	bl	800e6b8 <_fflush_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d0d9      	beq.n	800dc20 <__swbuf_r+0x2e>
 800dc6c:	e7d6      	b.n	800dc1c <__swbuf_r+0x2a>
	...

0800dc70 <__swsetup_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4b29      	ldr	r3, [pc, #164]	@ (800dd18 <__swsetup_r+0xa8>)
 800dc74:	4605      	mov	r5, r0
 800dc76:	6818      	ldr	r0, [r3, #0]
 800dc78:	460c      	mov	r4, r1
 800dc7a:	b118      	cbz	r0, 800dc84 <__swsetup_r+0x14>
 800dc7c:	6a03      	ldr	r3, [r0, #32]
 800dc7e:	b90b      	cbnz	r3, 800dc84 <__swsetup_r+0x14>
 800dc80:	f7ff fece 	bl	800da20 <__sinit>
 800dc84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc88:	0719      	lsls	r1, r3, #28
 800dc8a:	d422      	bmi.n	800dcd2 <__swsetup_r+0x62>
 800dc8c:	06da      	lsls	r2, r3, #27
 800dc8e:	d407      	bmi.n	800dca0 <__swsetup_r+0x30>
 800dc90:	2209      	movs	r2, #9
 800dc92:	602a      	str	r2, [r5, #0]
 800dc94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc98:	81a3      	strh	r3, [r4, #12]
 800dc9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc9e:	e033      	b.n	800dd08 <__swsetup_r+0x98>
 800dca0:	0758      	lsls	r0, r3, #29
 800dca2:	d512      	bpl.n	800dcca <__swsetup_r+0x5a>
 800dca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dca6:	b141      	cbz	r1, 800dcba <__swsetup_r+0x4a>
 800dca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcac:	4299      	cmp	r1, r3
 800dcae:	d002      	beq.n	800dcb6 <__swsetup_r+0x46>
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	f000 f8b5 	bl	800de20 <_free_r>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcba:	89a3      	ldrh	r3, [r4, #12]
 800dcbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dcc0:	81a3      	strh	r3, [r4, #12]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	6063      	str	r3, [r4, #4]
 800dcc6:	6923      	ldr	r3, [r4, #16]
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f043 0308 	orr.w	r3, r3, #8
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	6923      	ldr	r3, [r4, #16]
 800dcd4:	b94b      	cbnz	r3, 800dcea <__swsetup_r+0x7a>
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dce0:	d003      	beq.n	800dcea <__swsetup_r+0x7a>
 800dce2:	4621      	mov	r1, r4
 800dce4:	4628      	mov	r0, r5
 800dce6:	f000 fd35 	bl	800e754 <__smakebuf_r>
 800dcea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcee:	f013 0201 	ands.w	r2, r3, #1
 800dcf2:	d00a      	beq.n	800dd0a <__swsetup_r+0x9a>
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	60a2      	str	r2, [r4, #8]
 800dcf8:	6962      	ldr	r2, [r4, #20]
 800dcfa:	4252      	negs	r2, r2
 800dcfc:	61a2      	str	r2, [r4, #24]
 800dcfe:	6922      	ldr	r2, [r4, #16]
 800dd00:	b942      	cbnz	r2, 800dd14 <__swsetup_r+0xa4>
 800dd02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd06:	d1c5      	bne.n	800dc94 <__swsetup_r+0x24>
 800dd08:	bd38      	pop	{r3, r4, r5, pc}
 800dd0a:	0799      	lsls	r1, r3, #30
 800dd0c:	bf58      	it	pl
 800dd0e:	6962      	ldrpl	r2, [r4, #20]
 800dd10:	60a2      	str	r2, [r4, #8]
 800dd12:	e7f4      	b.n	800dcfe <__swsetup_r+0x8e>
 800dd14:	2000      	movs	r0, #0
 800dd16:	e7f7      	b.n	800dd08 <__swsetup_r+0x98>
 800dd18:	20000070 	.word	0x20000070

0800dd1c <memcmp>:
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	3901      	subs	r1, #1
 800dd20:	4402      	add	r2, r0
 800dd22:	4290      	cmp	r0, r2
 800dd24:	d101      	bne.n	800dd2a <memcmp+0xe>
 800dd26:	2000      	movs	r0, #0
 800dd28:	e005      	b.n	800dd36 <memcmp+0x1a>
 800dd2a:	7803      	ldrb	r3, [r0, #0]
 800dd2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dd30:	42a3      	cmp	r3, r4
 800dd32:	d001      	beq.n	800dd38 <memcmp+0x1c>
 800dd34:	1b18      	subs	r0, r3, r4
 800dd36:	bd10      	pop	{r4, pc}
 800dd38:	3001      	adds	r0, #1
 800dd3a:	e7f2      	b.n	800dd22 <memcmp+0x6>

0800dd3c <memset>:
 800dd3c:	4402      	add	r2, r0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d100      	bne.n	800dd46 <memset+0xa>
 800dd44:	4770      	bx	lr
 800dd46:	f803 1b01 	strb.w	r1, [r3], #1
 800dd4a:	e7f9      	b.n	800dd40 <memset+0x4>

0800dd4c <_close_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d06      	ldr	r5, [pc, #24]	@ (800dd68 <_close_r+0x1c>)
 800dd50:	2300      	movs	r3, #0
 800dd52:	4604      	mov	r4, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	602b      	str	r3, [r5, #0]
 800dd58:	f7f5 fbd3 	bl	8003502 <_close>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_close_r+0x1a>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_close_r+0x1a>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	20014b38 	.word	0x20014b38

0800dd6c <_lseek_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	@ (800dd8c <_lseek_r+0x20>)
 800dd70:	4604      	mov	r4, r0
 800dd72:	4608      	mov	r0, r1
 800dd74:	4611      	mov	r1, r2
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f7f5 fbe8 	bl	8003550 <_lseek>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_lseek_r+0x1e>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_lseek_r+0x1e>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	20014b38 	.word	0x20014b38

0800dd90 <_read_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	@ (800ddb0 <_read_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f5 fb92 	bl	80034c8 <_read>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_read_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_read_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	20014b38 	.word	0x20014b38

0800ddb4 <__libc_init_array>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4d0d      	ldr	r5, [pc, #52]	@ (800ddec <__libc_init_array+0x38>)
 800ddb8:	4c0d      	ldr	r4, [pc, #52]	@ (800ddf0 <__libc_init_array+0x3c>)
 800ddba:	1b64      	subs	r4, r4, r5
 800ddbc:	10a4      	asrs	r4, r4, #2
 800ddbe:	2600      	movs	r6, #0
 800ddc0:	42a6      	cmp	r6, r4
 800ddc2:	d109      	bne.n	800ddd8 <__libc_init_array+0x24>
 800ddc4:	4d0b      	ldr	r5, [pc, #44]	@ (800ddf4 <__libc_init_array+0x40>)
 800ddc6:	4c0c      	ldr	r4, [pc, #48]	@ (800ddf8 <__libc_init_array+0x44>)
 800ddc8:	f000 fe14 	bl	800e9f4 <_init>
 800ddcc:	1b64      	subs	r4, r4, r5
 800ddce:	10a4      	asrs	r4, r4, #2
 800ddd0:	2600      	movs	r6, #0
 800ddd2:	42a6      	cmp	r6, r4
 800ddd4:	d105      	bne.n	800dde2 <__libc_init_array+0x2e>
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dddc:	4798      	blx	r3
 800ddde:	3601      	adds	r6, #1
 800dde0:	e7ee      	b.n	800ddc0 <__libc_init_array+0xc>
 800dde2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde6:	4798      	blx	r3
 800dde8:	3601      	adds	r6, #1
 800ddea:	e7f2      	b.n	800ddd2 <__libc_init_array+0x1e>
 800ddec:	0800ef8c 	.word	0x0800ef8c
 800ddf0:	0800ef8c 	.word	0x0800ef8c
 800ddf4:	0800ef8c 	.word	0x0800ef8c
 800ddf8:	0800ef90 	.word	0x0800ef90

0800ddfc <__retarget_lock_init_recursive>:
 800ddfc:	4770      	bx	lr

0800ddfe <__retarget_lock_acquire_recursive>:
 800ddfe:	4770      	bx	lr

0800de00 <__retarget_lock_release_recursive>:
 800de00:	4770      	bx	lr

0800de02 <memcpy>:
 800de02:	440a      	add	r2, r1
 800de04:	4291      	cmp	r1, r2
 800de06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de0a:	d100      	bne.n	800de0e <memcpy+0xc>
 800de0c:	4770      	bx	lr
 800de0e:	b510      	push	{r4, lr}
 800de10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de18:	4291      	cmp	r1, r2
 800de1a:	d1f9      	bne.n	800de10 <memcpy+0xe>
 800de1c:	bd10      	pop	{r4, pc}
	...

0800de20 <_free_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4605      	mov	r5, r0
 800de24:	2900      	cmp	r1, #0
 800de26:	d041      	beq.n	800deac <_free_r+0x8c>
 800de28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de2c:	1f0c      	subs	r4, r1, #4
 800de2e:	2b00      	cmp	r3, #0
 800de30:	bfb8      	it	lt
 800de32:	18e4      	addlt	r4, r4, r3
 800de34:	f000 f8e0 	bl	800dff8 <__malloc_lock>
 800de38:	4a1d      	ldr	r2, [pc, #116]	@ (800deb0 <_free_r+0x90>)
 800de3a:	6813      	ldr	r3, [r2, #0]
 800de3c:	b933      	cbnz	r3, 800de4c <_free_r+0x2c>
 800de3e:	6063      	str	r3, [r4, #4]
 800de40:	6014      	str	r4, [r2, #0]
 800de42:	4628      	mov	r0, r5
 800de44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de48:	f000 b8dc 	b.w	800e004 <__malloc_unlock>
 800de4c:	42a3      	cmp	r3, r4
 800de4e:	d908      	bls.n	800de62 <_free_r+0x42>
 800de50:	6820      	ldr	r0, [r4, #0]
 800de52:	1821      	adds	r1, r4, r0
 800de54:	428b      	cmp	r3, r1
 800de56:	bf01      	itttt	eq
 800de58:	6819      	ldreq	r1, [r3, #0]
 800de5a:	685b      	ldreq	r3, [r3, #4]
 800de5c:	1809      	addeq	r1, r1, r0
 800de5e:	6021      	streq	r1, [r4, #0]
 800de60:	e7ed      	b.n	800de3e <_free_r+0x1e>
 800de62:	461a      	mov	r2, r3
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	b10b      	cbz	r3, 800de6c <_free_r+0x4c>
 800de68:	42a3      	cmp	r3, r4
 800de6a:	d9fa      	bls.n	800de62 <_free_r+0x42>
 800de6c:	6811      	ldr	r1, [r2, #0]
 800de6e:	1850      	adds	r0, r2, r1
 800de70:	42a0      	cmp	r0, r4
 800de72:	d10b      	bne.n	800de8c <_free_r+0x6c>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	4401      	add	r1, r0
 800de78:	1850      	adds	r0, r2, r1
 800de7a:	4283      	cmp	r3, r0
 800de7c:	6011      	str	r1, [r2, #0]
 800de7e:	d1e0      	bne.n	800de42 <_free_r+0x22>
 800de80:	6818      	ldr	r0, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	6053      	str	r3, [r2, #4]
 800de86:	4408      	add	r0, r1
 800de88:	6010      	str	r0, [r2, #0]
 800de8a:	e7da      	b.n	800de42 <_free_r+0x22>
 800de8c:	d902      	bls.n	800de94 <_free_r+0x74>
 800de8e:	230c      	movs	r3, #12
 800de90:	602b      	str	r3, [r5, #0]
 800de92:	e7d6      	b.n	800de42 <_free_r+0x22>
 800de94:	6820      	ldr	r0, [r4, #0]
 800de96:	1821      	adds	r1, r4, r0
 800de98:	428b      	cmp	r3, r1
 800de9a:	bf04      	itt	eq
 800de9c:	6819      	ldreq	r1, [r3, #0]
 800de9e:	685b      	ldreq	r3, [r3, #4]
 800dea0:	6063      	str	r3, [r4, #4]
 800dea2:	bf04      	itt	eq
 800dea4:	1809      	addeq	r1, r1, r0
 800dea6:	6021      	streq	r1, [r4, #0]
 800dea8:	6054      	str	r4, [r2, #4]
 800deaa:	e7ca      	b.n	800de42 <_free_r+0x22>
 800deac:	bd38      	pop	{r3, r4, r5, pc}
 800deae:	bf00      	nop
 800deb0:	20014b44 	.word	0x20014b44

0800deb4 <sbrk_aligned>:
 800deb4:	b570      	push	{r4, r5, r6, lr}
 800deb6:	4e0f      	ldr	r6, [pc, #60]	@ (800def4 <sbrk_aligned+0x40>)
 800deb8:	460c      	mov	r4, r1
 800deba:	6831      	ldr	r1, [r6, #0]
 800debc:	4605      	mov	r5, r0
 800debe:	b911      	cbnz	r1, 800dec6 <sbrk_aligned+0x12>
 800dec0:	f000 fca6 	bl	800e810 <_sbrk_r>
 800dec4:	6030      	str	r0, [r6, #0]
 800dec6:	4621      	mov	r1, r4
 800dec8:	4628      	mov	r0, r5
 800deca:	f000 fca1 	bl	800e810 <_sbrk_r>
 800dece:	1c43      	adds	r3, r0, #1
 800ded0:	d103      	bne.n	800deda <sbrk_aligned+0x26>
 800ded2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ded6:	4620      	mov	r0, r4
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
 800deda:	1cc4      	adds	r4, r0, #3
 800dedc:	f024 0403 	bic.w	r4, r4, #3
 800dee0:	42a0      	cmp	r0, r4
 800dee2:	d0f8      	beq.n	800ded6 <sbrk_aligned+0x22>
 800dee4:	1a21      	subs	r1, r4, r0
 800dee6:	4628      	mov	r0, r5
 800dee8:	f000 fc92 	bl	800e810 <_sbrk_r>
 800deec:	3001      	adds	r0, #1
 800deee:	d1f2      	bne.n	800ded6 <sbrk_aligned+0x22>
 800def0:	e7ef      	b.n	800ded2 <sbrk_aligned+0x1e>
 800def2:	bf00      	nop
 800def4:	20014b40 	.word	0x20014b40

0800def8 <_malloc_r>:
 800def8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800defc:	1ccd      	adds	r5, r1, #3
 800defe:	f025 0503 	bic.w	r5, r5, #3
 800df02:	3508      	adds	r5, #8
 800df04:	2d0c      	cmp	r5, #12
 800df06:	bf38      	it	cc
 800df08:	250c      	movcc	r5, #12
 800df0a:	2d00      	cmp	r5, #0
 800df0c:	4606      	mov	r6, r0
 800df0e:	db01      	blt.n	800df14 <_malloc_r+0x1c>
 800df10:	42a9      	cmp	r1, r5
 800df12:	d904      	bls.n	800df1e <_malloc_r+0x26>
 800df14:	230c      	movs	r3, #12
 800df16:	6033      	str	r3, [r6, #0]
 800df18:	2000      	movs	r0, #0
 800df1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dff4 <_malloc_r+0xfc>
 800df22:	f000 f869 	bl	800dff8 <__malloc_lock>
 800df26:	f8d8 3000 	ldr.w	r3, [r8]
 800df2a:	461c      	mov	r4, r3
 800df2c:	bb44      	cbnz	r4, 800df80 <_malloc_r+0x88>
 800df2e:	4629      	mov	r1, r5
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff ffbf 	bl	800deb4 <sbrk_aligned>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	4604      	mov	r4, r0
 800df3a:	d158      	bne.n	800dfee <_malloc_r+0xf6>
 800df3c:	f8d8 4000 	ldr.w	r4, [r8]
 800df40:	4627      	mov	r7, r4
 800df42:	2f00      	cmp	r7, #0
 800df44:	d143      	bne.n	800dfce <_malloc_r+0xd6>
 800df46:	2c00      	cmp	r4, #0
 800df48:	d04b      	beq.n	800dfe2 <_malloc_r+0xea>
 800df4a:	6823      	ldr	r3, [r4, #0]
 800df4c:	4639      	mov	r1, r7
 800df4e:	4630      	mov	r0, r6
 800df50:	eb04 0903 	add.w	r9, r4, r3
 800df54:	f000 fc5c 	bl	800e810 <_sbrk_r>
 800df58:	4581      	cmp	r9, r0
 800df5a:	d142      	bne.n	800dfe2 <_malloc_r+0xea>
 800df5c:	6821      	ldr	r1, [r4, #0]
 800df5e:	1a6d      	subs	r5, r5, r1
 800df60:	4629      	mov	r1, r5
 800df62:	4630      	mov	r0, r6
 800df64:	f7ff ffa6 	bl	800deb4 <sbrk_aligned>
 800df68:	3001      	adds	r0, #1
 800df6a:	d03a      	beq.n	800dfe2 <_malloc_r+0xea>
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	442b      	add	r3, r5
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	f8d8 3000 	ldr.w	r3, [r8]
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	bb62      	cbnz	r2, 800dfd4 <_malloc_r+0xdc>
 800df7a:	f8c8 7000 	str.w	r7, [r8]
 800df7e:	e00f      	b.n	800dfa0 <_malloc_r+0xa8>
 800df80:	6822      	ldr	r2, [r4, #0]
 800df82:	1b52      	subs	r2, r2, r5
 800df84:	d420      	bmi.n	800dfc8 <_malloc_r+0xd0>
 800df86:	2a0b      	cmp	r2, #11
 800df88:	d917      	bls.n	800dfba <_malloc_r+0xc2>
 800df8a:	1961      	adds	r1, r4, r5
 800df8c:	42a3      	cmp	r3, r4
 800df8e:	6025      	str	r5, [r4, #0]
 800df90:	bf18      	it	ne
 800df92:	6059      	strne	r1, [r3, #4]
 800df94:	6863      	ldr	r3, [r4, #4]
 800df96:	bf08      	it	eq
 800df98:	f8c8 1000 	streq.w	r1, [r8]
 800df9c:	5162      	str	r2, [r4, r5]
 800df9e:	604b      	str	r3, [r1, #4]
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f000 f82f 	bl	800e004 <__malloc_unlock>
 800dfa6:	f104 000b 	add.w	r0, r4, #11
 800dfaa:	1d23      	adds	r3, r4, #4
 800dfac:	f020 0007 	bic.w	r0, r0, #7
 800dfb0:	1ac2      	subs	r2, r0, r3
 800dfb2:	bf1c      	itt	ne
 800dfb4:	1a1b      	subne	r3, r3, r0
 800dfb6:	50a3      	strne	r3, [r4, r2]
 800dfb8:	e7af      	b.n	800df1a <_malloc_r+0x22>
 800dfba:	6862      	ldr	r2, [r4, #4]
 800dfbc:	42a3      	cmp	r3, r4
 800dfbe:	bf0c      	ite	eq
 800dfc0:	f8c8 2000 	streq.w	r2, [r8]
 800dfc4:	605a      	strne	r2, [r3, #4]
 800dfc6:	e7eb      	b.n	800dfa0 <_malloc_r+0xa8>
 800dfc8:	4623      	mov	r3, r4
 800dfca:	6864      	ldr	r4, [r4, #4]
 800dfcc:	e7ae      	b.n	800df2c <_malloc_r+0x34>
 800dfce:	463c      	mov	r4, r7
 800dfd0:	687f      	ldr	r7, [r7, #4]
 800dfd2:	e7b6      	b.n	800df42 <_malloc_r+0x4a>
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	42a3      	cmp	r3, r4
 800dfda:	d1fb      	bne.n	800dfd4 <_malloc_r+0xdc>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	6053      	str	r3, [r2, #4]
 800dfe0:	e7de      	b.n	800dfa0 <_malloc_r+0xa8>
 800dfe2:	230c      	movs	r3, #12
 800dfe4:	6033      	str	r3, [r6, #0]
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f000 f80c 	bl	800e004 <__malloc_unlock>
 800dfec:	e794      	b.n	800df18 <_malloc_r+0x20>
 800dfee:	6005      	str	r5, [r0, #0]
 800dff0:	e7d6      	b.n	800dfa0 <_malloc_r+0xa8>
 800dff2:	bf00      	nop
 800dff4:	20014b44 	.word	0x20014b44

0800dff8 <__malloc_lock>:
 800dff8:	4801      	ldr	r0, [pc, #4]	@ (800e000 <__malloc_lock+0x8>)
 800dffa:	f7ff bf00 	b.w	800ddfe <__retarget_lock_acquire_recursive>
 800dffe:	bf00      	nop
 800e000:	20014b3c 	.word	0x20014b3c

0800e004 <__malloc_unlock>:
 800e004:	4801      	ldr	r0, [pc, #4]	@ (800e00c <__malloc_unlock+0x8>)
 800e006:	f7ff befb 	b.w	800de00 <__retarget_lock_release_recursive>
 800e00a:	bf00      	nop
 800e00c:	20014b3c 	.word	0x20014b3c

0800e010 <__sfputc_r>:
 800e010:	6893      	ldr	r3, [r2, #8]
 800e012:	3b01      	subs	r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	b410      	push	{r4}
 800e018:	6093      	str	r3, [r2, #8]
 800e01a:	da08      	bge.n	800e02e <__sfputc_r+0x1e>
 800e01c:	6994      	ldr	r4, [r2, #24]
 800e01e:	42a3      	cmp	r3, r4
 800e020:	db01      	blt.n	800e026 <__sfputc_r+0x16>
 800e022:	290a      	cmp	r1, #10
 800e024:	d103      	bne.n	800e02e <__sfputc_r+0x1e>
 800e026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e02a:	f7ff bde2 	b.w	800dbf2 <__swbuf_r>
 800e02e:	6813      	ldr	r3, [r2, #0]
 800e030:	1c58      	adds	r0, r3, #1
 800e032:	6010      	str	r0, [r2, #0]
 800e034:	7019      	strb	r1, [r3, #0]
 800e036:	4608      	mov	r0, r1
 800e038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <__sfputs_r>:
 800e03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e040:	4606      	mov	r6, r0
 800e042:	460f      	mov	r7, r1
 800e044:	4614      	mov	r4, r2
 800e046:	18d5      	adds	r5, r2, r3
 800e048:	42ac      	cmp	r4, r5
 800e04a:	d101      	bne.n	800e050 <__sfputs_r+0x12>
 800e04c:	2000      	movs	r0, #0
 800e04e:	e007      	b.n	800e060 <__sfputs_r+0x22>
 800e050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e054:	463a      	mov	r2, r7
 800e056:	4630      	mov	r0, r6
 800e058:	f7ff ffda 	bl	800e010 <__sfputc_r>
 800e05c:	1c43      	adds	r3, r0, #1
 800e05e:	d1f3      	bne.n	800e048 <__sfputs_r+0xa>
 800e060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e064 <_vfiprintf_r>:
 800e064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e068:	460d      	mov	r5, r1
 800e06a:	b09d      	sub	sp, #116	@ 0x74
 800e06c:	4614      	mov	r4, r2
 800e06e:	4698      	mov	r8, r3
 800e070:	4606      	mov	r6, r0
 800e072:	b118      	cbz	r0, 800e07c <_vfiprintf_r+0x18>
 800e074:	6a03      	ldr	r3, [r0, #32]
 800e076:	b90b      	cbnz	r3, 800e07c <_vfiprintf_r+0x18>
 800e078:	f7ff fcd2 	bl	800da20 <__sinit>
 800e07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e07e:	07d9      	lsls	r1, r3, #31
 800e080:	d405      	bmi.n	800e08e <_vfiprintf_r+0x2a>
 800e082:	89ab      	ldrh	r3, [r5, #12]
 800e084:	059a      	lsls	r2, r3, #22
 800e086:	d402      	bmi.n	800e08e <_vfiprintf_r+0x2a>
 800e088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e08a:	f7ff feb8 	bl	800ddfe <__retarget_lock_acquire_recursive>
 800e08e:	89ab      	ldrh	r3, [r5, #12]
 800e090:	071b      	lsls	r3, r3, #28
 800e092:	d501      	bpl.n	800e098 <_vfiprintf_r+0x34>
 800e094:	692b      	ldr	r3, [r5, #16]
 800e096:	b99b      	cbnz	r3, 800e0c0 <_vfiprintf_r+0x5c>
 800e098:	4629      	mov	r1, r5
 800e09a:	4630      	mov	r0, r6
 800e09c:	f7ff fde8 	bl	800dc70 <__swsetup_r>
 800e0a0:	b170      	cbz	r0, 800e0c0 <_vfiprintf_r+0x5c>
 800e0a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0a4:	07dc      	lsls	r4, r3, #31
 800e0a6:	d504      	bpl.n	800e0b2 <_vfiprintf_r+0x4e>
 800e0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0ac:	b01d      	add	sp, #116	@ 0x74
 800e0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b2:	89ab      	ldrh	r3, [r5, #12]
 800e0b4:	0598      	lsls	r0, r3, #22
 800e0b6:	d4f7      	bmi.n	800e0a8 <_vfiprintf_r+0x44>
 800e0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ba:	f7ff fea1 	bl	800de00 <__retarget_lock_release_recursive>
 800e0be:	e7f3      	b.n	800e0a8 <_vfiprintf_r+0x44>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0c4:	2320      	movs	r3, #32
 800e0c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ce:	2330      	movs	r3, #48	@ 0x30
 800e0d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e280 <_vfiprintf_r+0x21c>
 800e0d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0d8:	f04f 0901 	mov.w	r9, #1
 800e0dc:	4623      	mov	r3, r4
 800e0de:	469a      	mov	sl, r3
 800e0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e4:	b10a      	cbz	r2, 800e0ea <_vfiprintf_r+0x86>
 800e0e6:	2a25      	cmp	r2, #37	@ 0x25
 800e0e8:	d1f9      	bne.n	800e0de <_vfiprintf_r+0x7a>
 800e0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ee:	d00b      	beq.n	800e108 <_vfiprintf_r+0xa4>
 800e0f0:	465b      	mov	r3, fp
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f7ff ffa1 	bl	800e03e <__sfputs_r>
 800e0fc:	3001      	adds	r0, #1
 800e0fe:	f000 80a7 	beq.w	800e250 <_vfiprintf_r+0x1ec>
 800e102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e104:	445a      	add	r2, fp
 800e106:	9209      	str	r2, [sp, #36]	@ 0x24
 800e108:	f89a 3000 	ldrb.w	r3, [sl]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 809f 	beq.w	800e250 <_vfiprintf_r+0x1ec>
 800e112:	2300      	movs	r3, #0
 800e114:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e11c:	f10a 0a01 	add.w	sl, sl, #1
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	9307      	str	r3, [sp, #28]
 800e124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e128:	931a      	str	r3, [sp, #104]	@ 0x68
 800e12a:	4654      	mov	r4, sl
 800e12c:	2205      	movs	r2, #5
 800e12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e132:	4853      	ldr	r0, [pc, #332]	@ (800e280 <_vfiprintf_r+0x21c>)
 800e134:	f7f2 f8c4 	bl	80002c0 <memchr>
 800e138:	9a04      	ldr	r2, [sp, #16]
 800e13a:	b9d8      	cbnz	r0, 800e174 <_vfiprintf_r+0x110>
 800e13c:	06d1      	lsls	r1, r2, #27
 800e13e:	bf44      	itt	mi
 800e140:	2320      	movmi	r3, #32
 800e142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e146:	0713      	lsls	r3, r2, #28
 800e148:	bf44      	itt	mi
 800e14a:	232b      	movmi	r3, #43	@ 0x2b
 800e14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e150:	f89a 3000 	ldrb.w	r3, [sl]
 800e154:	2b2a      	cmp	r3, #42	@ 0x2a
 800e156:	d015      	beq.n	800e184 <_vfiprintf_r+0x120>
 800e158:	9a07      	ldr	r2, [sp, #28]
 800e15a:	4654      	mov	r4, sl
 800e15c:	2000      	movs	r0, #0
 800e15e:	f04f 0c0a 	mov.w	ip, #10
 800e162:	4621      	mov	r1, r4
 800e164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e168:	3b30      	subs	r3, #48	@ 0x30
 800e16a:	2b09      	cmp	r3, #9
 800e16c:	d94b      	bls.n	800e206 <_vfiprintf_r+0x1a2>
 800e16e:	b1b0      	cbz	r0, 800e19e <_vfiprintf_r+0x13a>
 800e170:	9207      	str	r2, [sp, #28]
 800e172:	e014      	b.n	800e19e <_vfiprintf_r+0x13a>
 800e174:	eba0 0308 	sub.w	r3, r0, r8
 800e178:	fa09 f303 	lsl.w	r3, r9, r3
 800e17c:	4313      	orrs	r3, r2
 800e17e:	9304      	str	r3, [sp, #16]
 800e180:	46a2      	mov	sl, r4
 800e182:	e7d2      	b.n	800e12a <_vfiprintf_r+0xc6>
 800e184:	9b03      	ldr	r3, [sp, #12]
 800e186:	1d19      	adds	r1, r3, #4
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	9103      	str	r1, [sp, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bfbb      	ittet	lt
 800e190:	425b      	neglt	r3, r3
 800e192:	f042 0202 	orrlt.w	r2, r2, #2
 800e196:	9307      	strge	r3, [sp, #28]
 800e198:	9307      	strlt	r3, [sp, #28]
 800e19a:	bfb8      	it	lt
 800e19c:	9204      	strlt	r2, [sp, #16]
 800e19e:	7823      	ldrb	r3, [r4, #0]
 800e1a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1a2:	d10a      	bne.n	800e1ba <_vfiprintf_r+0x156>
 800e1a4:	7863      	ldrb	r3, [r4, #1]
 800e1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1a8:	d132      	bne.n	800e210 <_vfiprintf_r+0x1ac>
 800e1aa:	9b03      	ldr	r3, [sp, #12]
 800e1ac:	1d1a      	adds	r2, r3, #4
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	9203      	str	r2, [sp, #12]
 800e1b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1b6:	3402      	adds	r4, #2
 800e1b8:	9305      	str	r3, [sp, #20]
 800e1ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e290 <_vfiprintf_r+0x22c>
 800e1be:	7821      	ldrb	r1, [r4, #0]
 800e1c0:	2203      	movs	r2, #3
 800e1c2:	4650      	mov	r0, sl
 800e1c4:	f7f2 f87c 	bl	80002c0 <memchr>
 800e1c8:	b138      	cbz	r0, 800e1da <_vfiprintf_r+0x176>
 800e1ca:	9b04      	ldr	r3, [sp, #16]
 800e1cc:	eba0 000a 	sub.w	r0, r0, sl
 800e1d0:	2240      	movs	r2, #64	@ 0x40
 800e1d2:	4082      	lsls	r2, r0
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	3401      	adds	r4, #1
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1de:	4829      	ldr	r0, [pc, #164]	@ (800e284 <_vfiprintf_r+0x220>)
 800e1e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1e4:	2206      	movs	r2, #6
 800e1e6:	f7f2 f86b 	bl	80002c0 <memchr>
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d03f      	beq.n	800e26e <_vfiprintf_r+0x20a>
 800e1ee:	4b26      	ldr	r3, [pc, #152]	@ (800e288 <_vfiprintf_r+0x224>)
 800e1f0:	bb1b      	cbnz	r3, 800e23a <_vfiprintf_r+0x1d6>
 800e1f2:	9b03      	ldr	r3, [sp, #12]
 800e1f4:	3307      	adds	r3, #7
 800e1f6:	f023 0307 	bic.w	r3, r3, #7
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	9303      	str	r3, [sp, #12]
 800e1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e200:	443b      	add	r3, r7
 800e202:	9309      	str	r3, [sp, #36]	@ 0x24
 800e204:	e76a      	b.n	800e0dc <_vfiprintf_r+0x78>
 800e206:	fb0c 3202 	mla	r2, ip, r2, r3
 800e20a:	460c      	mov	r4, r1
 800e20c:	2001      	movs	r0, #1
 800e20e:	e7a8      	b.n	800e162 <_vfiprintf_r+0xfe>
 800e210:	2300      	movs	r3, #0
 800e212:	3401      	adds	r4, #1
 800e214:	9305      	str	r3, [sp, #20]
 800e216:	4619      	mov	r1, r3
 800e218:	f04f 0c0a 	mov.w	ip, #10
 800e21c:	4620      	mov	r0, r4
 800e21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e222:	3a30      	subs	r2, #48	@ 0x30
 800e224:	2a09      	cmp	r2, #9
 800e226:	d903      	bls.n	800e230 <_vfiprintf_r+0x1cc>
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0c6      	beq.n	800e1ba <_vfiprintf_r+0x156>
 800e22c:	9105      	str	r1, [sp, #20]
 800e22e:	e7c4      	b.n	800e1ba <_vfiprintf_r+0x156>
 800e230:	fb0c 2101 	mla	r1, ip, r1, r2
 800e234:	4604      	mov	r4, r0
 800e236:	2301      	movs	r3, #1
 800e238:	e7f0      	b.n	800e21c <_vfiprintf_r+0x1b8>
 800e23a:	ab03      	add	r3, sp, #12
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	462a      	mov	r2, r5
 800e240:	4b12      	ldr	r3, [pc, #72]	@ (800e28c <_vfiprintf_r+0x228>)
 800e242:	a904      	add	r1, sp, #16
 800e244:	4630      	mov	r0, r6
 800e246:	f3af 8000 	nop.w
 800e24a:	4607      	mov	r7, r0
 800e24c:	1c78      	adds	r0, r7, #1
 800e24e:	d1d6      	bne.n	800e1fe <_vfiprintf_r+0x19a>
 800e250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e252:	07d9      	lsls	r1, r3, #31
 800e254:	d405      	bmi.n	800e262 <_vfiprintf_r+0x1fe>
 800e256:	89ab      	ldrh	r3, [r5, #12]
 800e258:	059a      	lsls	r2, r3, #22
 800e25a:	d402      	bmi.n	800e262 <_vfiprintf_r+0x1fe>
 800e25c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e25e:	f7ff fdcf 	bl	800de00 <__retarget_lock_release_recursive>
 800e262:	89ab      	ldrh	r3, [r5, #12]
 800e264:	065b      	lsls	r3, r3, #25
 800e266:	f53f af1f 	bmi.w	800e0a8 <_vfiprintf_r+0x44>
 800e26a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e26c:	e71e      	b.n	800e0ac <_vfiprintf_r+0x48>
 800e26e:	ab03      	add	r3, sp, #12
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	462a      	mov	r2, r5
 800e274:	4b05      	ldr	r3, [pc, #20]	@ (800e28c <_vfiprintf_r+0x228>)
 800e276:	a904      	add	r1, sp, #16
 800e278:	4630      	mov	r0, r6
 800e27a:	f000 f879 	bl	800e370 <_printf_i>
 800e27e:	e7e4      	b.n	800e24a <_vfiprintf_r+0x1e6>
 800e280:	0800ef4e 	.word	0x0800ef4e
 800e284:	0800ef58 	.word	0x0800ef58
 800e288:	00000000 	.word	0x00000000
 800e28c:	0800e03f 	.word	0x0800e03f
 800e290:	0800ef54 	.word	0x0800ef54

0800e294 <_printf_common>:
 800e294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e298:	4616      	mov	r6, r2
 800e29a:	4698      	mov	r8, r3
 800e29c:	688a      	ldr	r2, [r1, #8]
 800e29e:	690b      	ldr	r3, [r1, #16]
 800e2a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	bfb8      	it	lt
 800e2a8:	4613      	movlt	r3, r2
 800e2aa:	6033      	str	r3, [r6, #0]
 800e2ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2b0:	4607      	mov	r7, r0
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	b10a      	cbz	r2, 800e2ba <_printf_common+0x26>
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	6033      	str	r3, [r6, #0]
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	0699      	lsls	r1, r3, #26
 800e2be:	bf42      	ittt	mi
 800e2c0:	6833      	ldrmi	r3, [r6, #0]
 800e2c2:	3302      	addmi	r3, #2
 800e2c4:	6033      	strmi	r3, [r6, #0]
 800e2c6:	6825      	ldr	r5, [r4, #0]
 800e2c8:	f015 0506 	ands.w	r5, r5, #6
 800e2cc:	d106      	bne.n	800e2dc <_printf_common+0x48>
 800e2ce:	f104 0a19 	add.w	sl, r4, #25
 800e2d2:	68e3      	ldr	r3, [r4, #12]
 800e2d4:	6832      	ldr	r2, [r6, #0]
 800e2d6:	1a9b      	subs	r3, r3, r2
 800e2d8:	42ab      	cmp	r3, r5
 800e2da:	dc26      	bgt.n	800e32a <_printf_common+0x96>
 800e2dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2e0:	6822      	ldr	r2, [r4, #0]
 800e2e2:	3b00      	subs	r3, #0
 800e2e4:	bf18      	it	ne
 800e2e6:	2301      	movne	r3, #1
 800e2e8:	0692      	lsls	r2, r2, #26
 800e2ea:	d42b      	bmi.n	800e344 <_printf_common+0xb0>
 800e2ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2f0:	4641      	mov	r1, r8
 800e2f2:	4638      	mov	r0, r7
 800e2f4:	47c8      	blx	r9
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	d01e      	beq.n	800e338 <_printf_common+0xa4>
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	6922      	ldr	r2, [r4, #16]
 800e2fe:	f003 0306 	and.w	r3, r3, #6
 800e302:	2b04      	cmp	r3, #4
 800e304:	bf02      	ittt	eq
 800e306:	68e5      	ldreq	r5, [r4, #12]
 800e308:	6833      	ldreq	r3, [r6, #0]
 800e30a:	1aed      	subeq	r5, r5, r3
 800e30c:	68a3      	ldr	r3, [r4, #8]
 800e30e:	bf0c      	ite	eq
 800e310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e314:	2500      	movne	r5, #0
 800e316:	4293      	cmp	r3, r2
 800e318:	bfc4      	itt	gt
 800e31a:	1a9b      	subgt	r3, r3, r2
 800e31c:	18ed      	addgt	r5, r5, r3
 800e31e:	2600      	movs	r6, #0
 800e320:	341a      	adds	r4, #26
 800e322:	42b5      	cmp	r5, r6
 800e324:	d11a      	bne.n	800e35c <_printf_common+0xc8>
 800e326:	2000      	movs	r0, #0
 800e328:	e008      	b.n	800e33c <_printf_common+0xa8>
 800e32a:	2301      	movs	r3, #1
 800e32c:	4652      	mov	r2, sl
 800e32e:	4641      	mov	r1, r8
 800e330:	4638      	mov	r0, r7
 800e332:	47c8      	blx	r9
 800e334:	3001      	adds	r0, #1
 800e336:	d103      	bne.n	800e340 <_printf_common+0xac>
 800e338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e340:	3501      	adds	r5, #1
 800e342:	e7c6      	b.n	800e2d2 <_printf_common+0x3e>
 800e344:	18e1      	adds	r1, r4, r3
 800e346:	1c5a      	adds	r2, r3, #1
 800e348:	2030      	movs	r0, #48	@ 0x30
 800e34a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e34e:	4422      	add	r2, r4
 800e350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e358:	3302      	adds	r3, #2
 800e35a:	e7c7      	b.n	800e2ec <_printf_common+0x58>
 800e35c:	2301      	movs	r3, #1
 800e35e:	4622      	mov	r2, r4
 800e360:	4641      	mov	r1, r8
 800e362:	4638      	mov	r0, r7
 800e364:	47c8      	blx	r9
 800e366:	3001      	adds	r0, #1
 800e368:	d0e6      	beq.n	800e338 <_printf_common+0xa4>
 800e36a:	3601      	adds	r6, #1
 800e36c:	e7d9      	b.n	800e322 <_printf_common+0x8e>
	...

0800e370 <_printf_i>:
 800e370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e374:	7e0f      	ldrb	r7, [r1, #24]
 800e376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e378:	2f78      	cmp	r7, #120	@ 0x78
 800e37a:	4691      	mov	r9, r2
 800e37c:	4680      	mov	r8, r0
 800e37e:	460c      	mov	r4, r1
 800e380:	469a      	mov	sl, r3
 800e382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e386:	d807      	bhi.n	800e398 <_printf_i+0x28>
 800e388:	2f62      	cmp	r7, #98	@ 0x62
 800e38a:	d80a      	bhi.n	800e3a2 <_printf_i+0x32>
 800e38c:	2f00      	cmp	r7, #0
 800e38e:	f000 80d2 	beq.w	800e536 <_printf_i+0x1c6>
 800e392:	2f58      	cmp	r7, #88	@ 0x58
 800e394:	f000 80b9 	beq.w	800e50a <_printf_i+0x19a>
 800e398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e39c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3a0:	e03a      	b.n	800e418 <_printf_i+0xa8>
 800e3a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3a6:	2b15      	cmp	r3, #21
 800e3a8:	d8f6      	bhi.n	800e398 <_printf_i+0x28>
 800e3aa:	a101      	add	r1, pc, #4	@ (adr r1, 800e3b0 <_printf_i+0x40>)
 800e3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3b0:	0800e409 	.word	0x0800e409
 800e3b4:	0800e41d 	.word	0x0800e41d
 800e3b8:	0800e399 	.word	0x0800e399
 800e3bc:	0800e399 	.word	0x0800e399
 800e3c0:	0800e399 	.word	0x0800e399
 800e3c4:	0800e399 	.word	0x0800e399
 800e3c8:	0800e41d 	.word	0x0800e41d
 800e3cc:	0800e399 	.word	0x0800e399
 800e3d0:	0800e399 	.word	0x0800e399
 800e3d4:	0800e399 	.word	0x0800e399
 800e3d8:	0800e399 	.word	0x0800e399
 800e3dc:	0800e51d 	.word	0x0800e51d
 800e3e0:	0800e447 	.word	0x0800e447
 800e3e4:	0800e4d7 	.word	0x0800e4d7
 800e3e8:	0800e399 	.word	0x0800e399
 800e3ec:	0800e399 	.word	0x0800e399
 800e3f0:	0800e53f 	.word	0x0800e53f
 800e3f4:	0800e399 	.word	0x0800e399
 800e3f8:	0800e447 	.word	0x0800e447
 800e3fc:	0800e399 	.word	0x0800e399
 800e400:	0800e399 	.word	0x0800e399
 800e404:	0800e4df 	.word	0x0800e4df
 800e408:	6833      	ldr	r3, [r6, #0]
 800e40a:	1d1a      	adds	r2, r3, #4
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6032      	str	r2, [r6, #0]
 800e410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e418:	2301      	movs	r3, #1
 800e41a:	e09d      	b.n	800e558 <_printf_i+0x1e8>
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	6820      	ldr	r0, [r4, #0]
 800e420:	1d19      	adds	r1, r3, #4
 800e422:	6031      	str	r1, [r6, #0]
 800e424:	0606      	lsls	r6, r0, #24
 800e426:	d501      	bpl.n	800e42c <_printf_i+0xbc>
 800e428:	681d      	ldr	r5, [r3, #0]
 800e42a:	e003      	b.n	800e434 <_printf_i+0xc4>
 800e42c:	0645      	lsls	r5, r0, #25
 800e42e:	d5fb      	bpl.n	800e428 <_printf_i+0xb8>
 800e430:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e434:	2d00      	cmp	r5, #0
 800e436:	da03      	bge.n	800e440 <_printf_i+0xd0>
 800e438:	232d      	movs	r3, #45	@ 0x2d
 800e43a:	426d      	negs	r5, r5
 800e43c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e440:	4859      	ldr	r0, [pc, #356]	@ (800e5a8 <_printf_i+0x238>)
 800e442:	230a      	movs	r3, #10
 800e444:	e011      	b.n	800e46a <_printf_i+0xfa>
 800e446:	6821      	ldr	r1, [r4, #0]
 800e448:	6833      	ldr	r3, [r6, #0]
 800e44a:	0608      	lsls	r0, r1, #24
 800e44c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e450:	d402      	bmi.n	800e458 <_printf_i+0xe8>
 800e452:	0649      	lsls	r1, r1, #25
 800e454:	bf48      	it	mi
 800e456:	b2ad      	uxthmi	r5, r5
 800e458:	2f6f      	cmp	r7, #111	@ 0x6f
 800e45a:	4853      	ldr	r0, [pc, #332]	@ (800e5a8 <_printf_i+0x238>)
 800e45c:	6033      	str	r3, [r6, #0]
 800e45e:	bf14      	ite	ne
 800e460:	230a      	movne	r3, #10
 800e462:	2308      	moveq	r3, #8
 800e464:	2100      	movs	r1, #0
 800e466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e46a:	6866      	ldr	r6, [r4, #4]
 800e46c:	60a6      	str	r6, [r4, #8]
 800e46e:	2e00      	cmp	r6, #0
 800e470:	bfa2      	ittt	ge
 800e472:	6821      	ldrge	r1, [r4, #0]
 800e474:	f021 0104 	bicge.w	r1, r1, #4
 800e478:	6021      	strge	r1, [r4, #0]
 800e47a:	b90d      	cbnz	r5, 800e480 <_printf_i+0x110>
 800e47c:	2e00      	cmp	r6, #0
 800e47e:	d04b      	beq.n	800e518 <_printf_i+0x1a8>
 800e480:	4616      	mov	r6, r2
 800e482:	fbb5 f1f3 	udiv	r1, r5, r3
 800e486:	fb03 5711 	mls	r7, r3, r1, r5
 800e48a:	5dc7      	ldrb	r7, [r0, r7]
 800e48c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e490:	462f      	mov	r7, r5
 800e492:	42bb      	cmp	r3, r7
 800e494:	460d      	mov	r5, r1
 800e496:	d9f4      	bls.n	800e482 <_printf_i+0x112>
 800e498:	2b08      	cmp	r3, #8
 800e49a:	d10b      	bne.n	800e4b4 <_printf_i+0x144>
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	07df      	lsls	r7, r3, #31
 800e4a0:	d508      	bpl.n	800e4b4 <_printf_i+0x144>
 800e4a2:	6923      	ldr	r3, [r4, #16]
 800e4a4:	6861      	ldr	r1, [r4, #4]
 800e4a6:	4299      	cmp	r1, r3
 800e4a8:	bfde      	ittt	le
 800e4aa:	2330      	movle	r3, #48	@ 0x30
 800e4ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e4b4:	1b92      	subs	r2, r2, r6
 800e4b6:	6122      	str	r2, [r4, #16]
 800e4b8:	f8cd a000 	str.w	sl, [sp]
 800e4bc:	464b      	mov	r3, r9
 800e4be:	aa03      	add	r2, sp, #12
 800e4c0:	4621      	mov	r1, r4
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	f7ff fee6 	bl	800e294 <_printf_common>
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	d14a      	bne.n	800e562 <_printf_i+0x1f2>
 800e4cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4d0:	b004      	add	sp, #16
 800e4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	f043 0320 	orr.w	r3, r3, #32
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	4833      	ldr	r0, [pc, #204]	@ (800e5ac <_printf_i+0x23c>)
 800e4e0:	2778      	movs	r7, #120	@ 0x78
 800e4e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	6831      	ldr	r1, [r6, #0]
 800e4ea:	061f      	lsls	r7, r3, #24
 800e4ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4f0:	d402      	bmi.n	800e4f8 <_printf_i+0x188>
 800e4f2:	065f      	lsls	r7, r3, #25
 800e4f4:	bf48      	it	mi
 800e4f6:	b2ad      	uxthmi	r5, r5
 800e4f8:	6031      	str	r1, [r6, #0]
 800e4fa:	07d9      	lsls	r1, r3, #31
 800e4fc:	bf44      	itt	mi
 800e4fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e502:	6023      	strmi	r3, [r4, #0]
 800e504:	b11d      	cbz	r5, 800e50e <_printf_i+0x19e>
 800e506:	2310      	movs	r3, #16
 800e508:	e7ac      	b.n	800e464 <_printf_i+0xf4>
 800e50a:	4827      	ldr	r0, [pc, #156]	@ (800e5a8 <_printf_i+0x238>)
 800e50c:	e7e9      	b.n	800e4e2 <_printf_i+0x172>
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	f023 0320 	bic.w	r3, r3, #32
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	e7f6      	b.n	800e506 <_printf_i+0x196>
 800e518:	4616      	mov	r6, r2
 800e51a:	e7bd      	b.n	800e498 <_printf_i+0x128>
 800e51c:	6833      	ldr	r3, [r6, #0]
 800e51e:	6825      	ldr	r5, [r4, #0]
 800e520:	6961      	ldr	r1, [r4, #20]
 800e522:	1d18      	adds	r0, r3, #4
 800e524:	6030      	str	r0, [r6, #0]
 800e526:	062e      	lsls	r6, r5, #24
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	d501      	bpl.n	800e530 <_printf_i+0x1c0>
 800e52c:	6019      	str	r1, [r3, #0]
 800e52e:	e002      	b.n	800e536 <_printf_i+0x1c6>
 800e530:	0668      	lsls	r0, r5, #25
 800e532:	d5fb      	bpl.n	800e52c <_printf_i+0x1bc>
 800e534:	8019      	strh	r1, [r3, #0]
 800e536:	2300      	movs	r3, #0
 800e538:	6123      	str	r3, [r4, #16]
 800e53a:	4616      	mov	r6, r2
 800e53c:	e7bc      	b.n	800e4b8 <_printf_i+0x148>
 800e53e:	6833      	ldr	r3, [r6, #0]
 800e540:	1d1a      	adds	r2, r3, #4
 800e542:	6032      	str	r2, [r6, #0]
 800e544:	681e      	ldr	r6, [r3, #0]
 800e546:	6862      	ldr	r2, [r4, #4]
 800e548:	2100      	movs	r1, #0
 800e54a:	4630      	mov	r0, r6
 800e54c:	f7f1 feb8 	bl	80002c0 <memchr>
 800e550:	b108      	cbz	r0, 800e556 <_printf_i+0x1e6>
 800e552:	1b80      	subs	r0, r0, r6
 800e554:	6060      	str	r0, [r4, #4]
 800e556:	6863      	ldr	r3, [r4, #4]
 800e558:	6123      	str	r3, [r4, #16]
 800e55a:	2300      	movs	r3, #0
 800e55c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e560:	e7aa      	b.n	800e4b8 <_printf_i+0x148>
 800e562:	6923      	ldr	r3, [r4, #16]
 800e564:	4632      	mov	r2, r6
 800e566:	4649      	mov	r1, r9
 800e568:	4640      	mov	r0, r8
 800e56a:	47d0      	blx	sl
 800e56c:	3001      	adds	r0, #1
 800e56e:	d0ad      	beq.n	800e4cc <_printf_i+0x15c>
 800e570:	6823      	ldr	r3, [r4, #0]
 800e572:	079b      	lsls	r3, r3, #30
 800e574:	d413      	bmi.n	800e59e <_printf_i+0x22e>
 800e576:	68e0      	ldr	r0, [r4, #12]
 800e578:	9b03      	ldr	r3, [sp, #12]
 800e57a:	4298      	cmp	r0, r3
 800e57c:	bfb8      	it	lt
 800e57e:	4618      	movlt	r0, r3
 800e580:	e7a6      	b.n	800e4d0 <_printf_i+0x160>
 800e582:	2301      	movs	r3, #1
 800e584:	4632      	mov	r2, r6
 800e586:	4649      	mov	r1, r9
 800e588:	4640      	mov	r0, r8
 800e58a:	47d0      	blx	sl
 800e58c:	3001      	adds	r0, #1
 800e58e:	d09d      	beq.n	800e4cc <_printf_i+0x15c>
 800e590:	3501      	adds	r5, #1
 800e592:	68e3      	ldr	r3, [r4, #12]
 800e594:	9903      	ldr	r1, [sp, #12]
 800e596:	1a5b      	subs	r3, r3, r1
 800e598:	42ab      	cmp	r3, r5
 800e59a:	dcf2      	bgt.n	800e582 <_printf_i+0x212>
 800e59c:	e7eb      	b.n	800e576 <_printf_i+0x206>
 800e59e:	2500      	movs	r5, #0
 800e5a0:	f104 0619 	add.w	r6, r4, #25
 800e5a4:	e7f5      	b.n	800e592 <_printf_i+0x222>
 800e5a6:	bf00      	nop
 800e5a8:	0800ef5f 	.word	0x0800ef5f
 800e5ac:	0800ef70 	.word	0x0800ef70

0800e5b0 <__sflush_r>:
 800e5b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b8:	0716      	lsls	r6, r2, #28
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	460c      	mov	r4, r1
 800e5be:	d454      	bmi.n	800e66a <__sflush_r+0xba>
 800e5c0:	684b      	ldr	r3, [r1, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	dc02      	bgt.n	800e5cc <__sflush_r+0x1c>
 800e5c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	dd48      	ble.n	800e65e <__sflush_r+0xae>
 800e5cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5ce:	2e00      	cmp	r6, #0
 800e5d0:	d045      	beq.n	800e65e <__sflush_r+0xae>
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5d8:	682f      	ldr	r7, [r5, #0]
 800e5da:	6a21      	ldr	r1, [r4, #32]
 800e5dc:	602b      	str	r3, [r5, #0]
 800e5de:	d030      	beq.n	800e642 <__sflush_r+0x92>
 800e5e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5e2:	89a3      	ldrh	r3, [r4, #12]
 800e5e4:	0759      	lsls	r1, r3, #29
 800e5e6:	d505      	bpl.n	800e5f4 <__sflush_r+0x44>
 800e5e8:	6863      	ldr	r3, [r4, #4]
 800e5ea:	1ad2      	subs	r2, r2, r3
 800e5ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5ee:	b10b      	cbz	r3, 800e5f4 <__sflush_r+0x44>
 800e5f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5f2:	1ad2      	subs	r2, r2, r3
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5f8:	6a21      	ldr	r1, [r4, #32]
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	47b0      	blx	r6
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	d106      	bne.n	800e612 <__sflush_r+0x62>
 800e604:	6829      	ldr	r1, [r5, #0]
 800e606:	291d      	cmp	r1, #29
 800e608:	d82b      	bhi.n	800e662 <__sflush_r+0xb2>
 800e60a:	4a2a      	ldr	r2, [pc, #168]	@ (800e6b4 <__sflush_r+0x104>)
 800e60c:	410a      	asrs	r2, r1
 800e60e:	07d6      	lsls	r6, r2, #31
 800e610:	d427      	bmi.n	800e662 <__sflush_r+0xb2>
 800e612:	2200      	movs	r2, #0
 800e614:	6062      	str	r2, [r4, #4]
 800e616:	04d9      	lsls	r1, r3, #19
 800e618:	6922      	ldr	r2, [r4, #16]
 800e61a:	6022      	str	r2, [r4, #0]
 800e61c:	d504      	bpl.n	800e628 <__sflush_r+0x78>
 800e61e:	1c42      	adds	r2, r0, #1
 800e620:	d101      	bne.n	800e626 <__sflush_r+0x76>
 800e622:	682b      	ldr	r3, [r5, #0]
 800e624:	b903      	cbnz	r3, 800e628 <__sflush_r+0x78>
 800e626:	6560      	str	r0, [r4, #84]	@ 0x54
 800e628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e62a:	602f      	str	r7, [r5, #0]
 800e62c:	b1b9      	cbz	r1, 800e65e <__sflush_r+0xae>
 800e62e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e632:	4299      	cmp	r1, r3
 800e634:	d002      	beq.n	800e63c <__sflush_r+0x8c>
 800e636:	4628      	mov	r0, r5
 800e638:	f7ff fbf2 	bl	800de20 <_free_r>
 800e63c:	2300      	movs	r3, #0
 800e63e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e640:	e00d      	b.n	800e65e <__sflush_r+0xae>
 800e642:	2301      	movs	r3, #1
 800e644:	4628      	mov	r0, r5
 800e646:	47b0      	blx	r6
 800e648:	4602      	mov	r2, r0
 800e64a:	1c50      	adds	r0, r2, #1
 800e64c:	d1c9      	bne.n	800e5e2 <__sflush_r+0x32>
 800e64e:	682b      	ldr	r3, [r5, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d0c6      	beq.n	800e5e2 <__sflush_r+0x32>
 800e654:	2b1d      	cmp	r3, #29
 800e656:	d001      	beq.n	800e65c <__sflush_r+0xac>
 800e658:	2b16      	cmp	r3, #22
 800e65a:	d11e      	bne.n	800e69a <__sflush_r+0xea>
 800e65c:	602f      	str	r7, [r5, #0]
 800e65e:	2000      	movs	r0, #0
 800e660:	e022      	b.n	800e6a8 <__sflush_r+0xf8>
 800e662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e666:	b21b      	sxth	r3, r3
 800e668:	e01b      	b.n	800e6a2 <__sflush_r+0xf2>
 800e66a:	690f      	ldr	r7, [r1, #16]
 800e66c:	2f00      	cmp	r7, #0
 800e66e:	d0f6      	beq.n	800e65e <__sflush_r+0xae>
 800e670:	0793      	lsls	r3, r2, #30
 800e672:	680e      	ldr	r6, [r1, #0]
 800e674:	bf08      	it	eq
 800e676:	694b      	ldreq	r3, [r1, #20]
 800e678:	600f      	str	r7, [r1, #0]
 800e67a:	bf18      	it	ne
 800e67c:	2300      	movne	r3, #0
 800e67e:	eba6 0807 	sub.w	r8, r6, r7
 800e682:	608b      	str	r3, [r1, #8]
 800e684:	f1b8 0f00 	cmp.w	r8, #0
 800e688:	dde9      	ble.n	800e65e <__sflush_r+0xae>
 800e68a:	6a21      	ldr	r1, [r4, #32]
 800e68c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e68e:	4643      	mov	r3, r8
 800e690:	463a      	mov	r2, r7
 800e692:	4628      	mov	r0, r5
 800e694:	47b0      	blx	r6
 800e696:	2800      	cmp	r0, #0
 800e698:	dc08      	bgt.n	800e6ac <__sflush_r+0xfc>
 800e69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6a2:	81a3      	strh	r3, [r4, #12]
 800e6a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6ac:	4407      	add	r7, r0
 800e6ae:	eba8 0800 	sub.w	r8, r8, r0
 800e6b2:	e7e7      	b.n	800e684 <__sflush_r+0xd4>
 800e6b4:	dfbffffe 	.word	0xdfbffffe

0800e6b8 <_fflush_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	690b      	ldr	r3, [r1, #16]
 800e6bc:	4605      	mov	r5, r0
 800e6be:	460c      	mov	r4, r1
 800e6c0:	b913      	cbnz	r3, 800e6c8 <_fflush_r+0x10>
 800e6c2:	2500      	movs	r5, #0
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	b118      	cbz	r0, 800e6d2 <_fflush_r+0x1a>
 800e6ca:	6a03      	ldr	r3, [r0, #32]
 800e6cc:	b90b      	cbnz	r3, 800e6d2 <_fflush_r+0x1a>
 800e6ce:	f7ff f9a7 	bl	800da20 <__sinit>
 800e6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d0f3      	beq.n	800e6c2 <_fflush_r+0xa>
 800e6da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6dc:	07d0      	lsls	r0, r2, #31
 800e6de:	d404      	bmi.n	800e6ea <_fflush_r+0x32>
 800e6e0:	0599      	lsls	r1, r3, #22
 800e6e2:	d402      	bmi.n	800e6ea <_fflush_r+0x32>
 800e6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6e6:	f7ff fb8a 	bl	800ddfe <__retarget_lock_acquire_recursive>
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	4621      	mov	r1, r4
 800e6ee:	f7ff ff5f 	bl	800e5b0 <__sflush_r>
 800e6f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6f4:	07da      	lsls	r2, r3, #31
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	d4e4      	bmi.n	800e6c4 <_fflush_r+0xc>
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	059b      	lsls	r3, r3, #22
 800e6fe:	d4e1      	bmi.n	800e6c4 <_fflush_r+0xc>
 800e700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e702:	f7ff fb7d 	bl	800de00 <__retarget_lock_release_recursive>
 800e706:	e7dd      	b.n	800e6c4 <_fflush_r+0xc>

0800e708 <__swhatbuf_r>:
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	460c      	mov	r4, r1
 800e70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e710:	2900      	cmp	r1, #0
 800e712:	b096      	sub	sp, #88	@ 0x58
 800e714:	4615      	mov	r5, r2
 800e716:	461e      	mov	r6, r3
 800e718:	da0d      	bge.n	800e736 <__swhatbuf_r+0x2e>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e720:	f04f 0100 	mov.w	r1, #0
 800e724:	bf14      	ite	ne
 800e726:	2340      	movne	r3, #64	@ 0x40
 800e728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e72c:	2000      	movs	r0, #0
 800e72e:	6031      	str	r1, [r6, #0]
 800e730:	602b      	str	r3, [r5, #0]
 800e732:	b016      	add	sp, #88	@ 0x58
 800e734:	bd70      	pop	{r4, r5, r6, pc}
 800e736:	466a      	mov	r2, sp
 800e738:	f000 f848 	bl	800e7cc <_fstat_r>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	dbec      	blt.n	800e71a <__swhatbuf_r+0x12>
 800e740:	9901      	ldr	r1, [sp, #4]
 800e742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e74a:	4259      	negs	r1, r3
 800e74c:	4159      	adcs	r1, r3
 800e74e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e752:	e7eb      	b.n	800e72c <__swhatbuf_r+0x24>

0800e754 <__smakebuf_r>:
 800e754:	898b      	ldrh	r3, [r1, #12]
 800e756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e758:	079d      	lsls	r5, r3, #30
 800e75a:	4606      	mov	r6, r0
 800e75c:	460c      	mov	r4, r1
 800e75e:	d507      	bpl.n	800e770 <__smakebuf_r+0x1c>
 800e760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e764:	6023      	str	r3, [r4, #0]
 800e766:	6123      	str	r3, [r4, #16]
 800e768:	2301      	movs	r3, #1
 800e76a:	6163      	str	r3, [r4, #20]
 800e76c:	b003      	add	sp, #12
 800e76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e770:	ab01      	add	r3, sp, #4
 800e772:	466a      	mov	r2, sp
 800e774:	f7ff ffc8 	bl	800e708 <__swhatbuf_r>
 800e778:	9f00      	ldr	r7, [sp, #0]
 800e77a:	4605      	mov	r5, r0
 800e77c:	4639      	mov	r1, r7
 800e77e:	4630      	mov	r0, r6
 800e780:	f7ff fbba 	bl	800def8 <_malloc_r>
 800e784:	b948      	cbnz	r0, 800e79a <__smakebuf_r+0x46>
 800e786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e78a:	059a      	lsls	r2, r3, #22
 800e78c:	d4ee      	bmi.n	800e76c <__smakebuf_r+0x18>
 800e78e:	f023 0303 	bic.w	r3, r3, #3
 800e792:	f043 0302 	orr.w	r3, r3, #2
 800e796:	81a3      	strh	r3, [r4, #12]
 800e798:	e7e2      	b.n	800e760 <__smakebuf_r+0xc>
 800e79a:	89a3      	ldrh	r3, [r4, #12]
 800e79c:	6020      	str	r0, [r4, #0]
 800e79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7a2:	81a3      	strh	r3, [r4, #12]
 800e7a4:	9b01      	ldr	r3, [sp, #4]
 800e7a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7aa:	b15b      	cbz	r3, 800e7c4 <__smakebuf_r+0x70>
 800e7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f000 f81d 	bl	800e7f0 <_isatty_r>
 800e7b6:	b128      	cbz	r0, 800e7c4 <__smakebuf_r+0x70>
 800e7b8:	89a3      	ldrh	r3, [r4, #12]
 800e7ba:	f023 0303 	bic.w	r3, r3, #3
 800e7be:	f043 0301 	orr.w	r3, r3, #1
 800e7c2:	81a3      	strh	r3, [r4, #12]
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	431d      	orrs	r5, r3
 800e7c8:	81a5      	strh	r5, [r4, #12]
 800e7ca:	e7cf      	b.n	800e76c <__smakebuf_r+0x18>

0800e7cc <_fstat_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d07      	ldr	r5, [pc, #28]	@ (800e7ec <_fstat_r+0x20>)
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	f7f4 fe9e 	bl	800351a <_fstat>
 800e7de:	1c43      	adds	r3, r0, #1
 800e7e0:	d102      	bne.n	800e7e8 <_fstat_r+0x1c>
 800e7e2:	682b      	ldr	r3, [r5, #0]
 800e7e4:	b103      	cbz	r3, 800e7e8 <_fstat_r+0x1c>
 800e7e6:	6023      	str	r3, [r4, #0]
 800e7e8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20014b38 	.word	0x20014b38

0800e7f0 <_isatty_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4d06      	ldr	r5, [pc, #24]	@ (800e80c <_isatty_r+0x1c>)
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	4608      	mov	r0, r1
 800e7fa:	602b      	str	r3, [r5, #0]
 800e7fc:	f7f4 fe9d 	bl	800353a <_isatty>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	d102      	bne.n	800e80a <_isatty_r+0x1a>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	b103      	cbz	r3, 800e80a <_isatty_r+0x1a>
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	bd38      	pop	{r3, r4, r5, pc}
 800e80c:	20014b38 	.word	0x20014b38

0800e810 <_sbrk_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4d06      	ldr	r5, [pc, #24]	@ (800e82c <_sbrk_r+0x1c>)
 800e814:	2300      	movs	r3, #0
 800e816:	4604      	mov	r4, r0
 800e818:	4608      	mov	r0, r1
 800e81a:	602b      	str	r3, [r5, #0]
 800e81c:	f000 f8dc 	bl	800e9d8 <_sbrk>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d102      	bne.n	800e82a <_sbrk_r+0x1a>
 800e824:	682b      	ldr	r3, [r5, #0]
 800e826:	b103      	cbz	r3, 800e82a <_sbrk_r+0x1a>
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	bd38      	pop	{r3, r4, r5, pc}
 800e82c:	20014b38 	.word	0x20014b38

0800e830 <fmax>:
 800e830:	b508      	push	{r3, lr}
 800e832:	ed2d 8b04 	vpush	{d8-d9}
 800e836:	eeb0 8a40 	vmov.f32	s16, s0
 800e83a:	eef0 8a60 	vmov.f32	s17, s1
 800e83e:	eeb0 9a41 	vmov.f32	s18, s2
 800e842:	eef0 9a61 	vmov.f32	s19, s3
 800e846:	f000 f81d 	bl	800e884 <__fpclassifyd>
 800e84a:	b950      	cbnz	r0, 800e862 <fmax+0x32>
 800e84c:	eeb0 8a49 	vmov.f32	s16, s18
 800e850:	eef0 8a69 	vmov.f32	s17, s19
 800e854:	eeb0 0a48 	vmov.f32	s0, s16
 800e858:	eef0 0a68 	vmov.f32	s1, s17
 800e85c:	ecbd 8b04 	vpop	{d8-d9}
 800e860:	bd08      	pop	{r3, pc}
 800e862:	eeb0 0a49 	vmov.f32	s0, s18
 800e866:	eef0 0a69 	vmov.f32	s1, s19
 800e86a:	f000 f80b 	bl	800e884 <__fpclassifyd>
 800e86e:	2800      	cmp	r0, #0
 800e870:	d0f0      	beq.n	800e854 <fmax+0x24>
 800e872:	ec53 2b19 	vmov	r2, r3, d9
 800e876:	ec51 0b18 	vmov	r0, r1, d8
 800e87a:	f7f2 f8d5 	bl	8000a28 <__aeabi_dcmpgt>
 800e87e:	2800      	cmp	r0, #0
 800e880:	d0e4      	beq.n	800e84c <fmax+0x1c>
 800e882:	e7e7      	b.n	800e854 <fmax+0x24>

0800e884 <__fpclassifyd>:
 800e884:	ec51 0b10 	vmov	r0, r1, d0
 800e888:	b510      	push	{r4, lr}
 800e88a:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800e88e:	460b      	mov	r3, r1
 800e890:	d019      	beq.n	800e8c6 <__fpclassifyd+0x42>
 800e892:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800e896:	490e      	ldr	r1, [pc, #56]	@ (800e8d0 <__fpclassifyd+0x4c>)
 800e898:	428a      	cmp	r2, r1
 800e89a:	d90e      	bls.n	800e8ba <__fpclassifyd+0x36>
 800e89c:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800e8a0:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800e8a4:	428a      	cmp	r2, r1
 800e8a6:	d908      	bls.n	800e8ba <__fpclassifyd+0x36>
 800e8a8:	4a0a      	ldr	r2, [pc, #40]	@ (800e8d4 <__fpclassifyd+0x50>)
 800e8aa:	4213      	tst	r3, r2
 800e8ac:	d007      	beq.n	800e8be <__fpclassifyd+0x3a>
 800e8ae:	4294      	cmp	r4, r2
 800e8b0:	d107      	bne.n	800e8c2 <__fpclassifyd+0x3e>
 800e8b2:	fab0 f080 	clz	r0, r0
 800e8b6:	0940      	lsrs	r0, r0, #5
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	2004      	movs	r0, #4
 800e8bc:	e7fc      	b.n	800e8b8 <__fpclassifyd+0x34>
 800e8be:	2003      	movs	r0, #3
 800e8c0:	e7fa      	b.n	800e8b8 <__fpclassifyd+0x34>
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	e7f8      	b.n	800e8b8 <__fpclassifyd+0x34>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d1ee      	bne.n	800e8a8 <__fpclassifyd+0x24>
 800e8ca:	2002      	movs	r0, #2
 800e8cc:	e7f4      	b.n	800e8b8 <__fpclassifyd+0x34>
 800e8ce:	bf00      	nop
 800e8d0:	7fdfffff 	.word	0x7fdfffff
 800e8d4:	7ff00000 	.word	0x7ff00000

0800e8d8 <fminf>:
 800e8d8:	b508      	push	{r3, lr}
 800e8da:	ed2d 8b02 	vpush	{d8}
 800e8de:	eeb0 8a40 	vmov.f32	s16, s0
 800e8e2:	eef0 8a60 	vmov.f32	s17, s1
 800e8e6:	f000 f815 	bl	800e914 <__fpclassifyf>
 800e8ea:	b930      	cbnz	r0, 800e8fa <fminf+0x22>
 800e8ec:	eeb0 8a68 	vmov.f32	s16, s17
 800e8f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e8f4:	ecbd 8b02 	vpop	{d8}
 800e8f8:	bd08      	pop	{r3, pc}
 800e8fa:	eeb0 0a68 	vmov.f32	s0, s17
 800e8fe:	f000 f809 	bl	800e914 <__fpclassifyf>
 800e902:	2800      	cmp	r0, #0
 800e904:	d0f4      	beq.n	800e8f0 <fminf+0x18>
 800e906:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90e:	d5ed      	bpl.n	800e8ec <fminf+0x14>
 800e910:	e7ee      	b.n	800e8f0 <fminf+0x18>
	...

0800e914 <__fpclassifyf>:
 800e914:	ee10 3a10 	vmov	r3, s0
 800e918:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800e91c:	d00d      	beq.n	800e93a <__fpclassifyf+0x26>
 800e91e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e922:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e926:	d30a      	bcc.n	800e93e <__fpclassifyf+0x2a>
 800e928:	4b07      	ldr	r3, [pc, #28]	@ (800e948 <__fpclassifyf+0x34>)
 800e92a:	1e42      	subs	r2, r0, #1
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d908      	bls.n	800e942 <__fpclassifyf+0x2e>
 800e930:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e934:	4258      	negs	r0, r3
 800e936:	4158      	adcs	r0, r3
 800e938:	4770      	bx	lr
 800e93a:	2002      	movs	r0, #2
 800e93c:	4770      	bx	lr
 800e93e:	2004      	movs	r0, #4
 800e940:	4770      	bx	lr
 800e942:	2003      	movs	r0, #3
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	007ffffe 	.word	0x007ffffe

0800e94c <round>:
 800e94c:	ec51 0b10 	vmov	r0, r1, d0
 800e950:	b570      	push	{r4, r5, r6, lr}
 800e952:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e956:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800e95a:	2a13      	cmp	r2, #19
 800e95c:	460b      	mov	r3, r1
 800e95e:	4605      	mov	r5, r0
 800e960:	dc1b      	bgt.n	800e99a <round+0x4e>
 800e962:	2a00      	cmp	r2, #0
 800e964:	da0b      	bge.n	800e97e <round+0x32>
 800e966:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e96a:	3201      	adds	r2, #1
 800e96c:	bf04      	itt	eq
 800e96e:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800e972:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800e976:	2200      	movs	r2, #0
 800e978:	4619      	mov	r1, r3
 800e97a:	4610      	mov	r0, r2
 800e97c:	e015      	b.n	800e9aa <round+0x5e>
 800e97e:	4c15      	ldr	r4, [pc, #84]	@ (800e9d4 <round+0x88>)
 800e980:	4114      	asrs	r4, r2
 800e982:	ea04 0601 	and.w	r6, r4, r1
 800e986:	4306      	orrs	r6, r0
 800e988:	d00f      	beq.n	800e9aa <round+0x5e>
 800e98a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800e98e:	fa41 f202 	asr.w	r2, r1, r2
 800e992:	4413      	add	r3, r2
 800e994:	ea23 0304 	bic.w	r3, r3, r4
 800e998:	e7ed      	b.n	800e976 <round+0x2a>
 800e99a:	2a33      	cmp	r2, #51	@ 0x33
 800e99c:	dd08      	ble.n	800e9b0 <round+0x64>
 800e99e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800e9a2:	d102      	bne.n	800e9aa <round+0x5e>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	f7f1 fe0b 	bl	80005c0 <__adddf3>
 800e9aa:	ec41 0b10 	vmov	d0, r0, r1
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}
 800e9b0:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800e9b4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e9b8:	40f4      	lsrs	r4, r6
 800e9ba:	4204      	tst	r4, r0
 800e9bc:	d0f5      	beq.n	800e9aa <round+0x5e>
 800e9be:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	408a      	lsls	r2, r1
 800e9c6:	1952      	adds	r2, r2, r5
 800e9c8:	bf28      	it	cs
 800e9ca:	3301      	addcs	r3, #1
 800e9cc:	ea22 0204 	bic.w	r2, r2, r4
 800e9d0:	e7d2      	b.n	800e978 <round+0x2c>
 800e9d2:	bf00      	nop
 800e9d4:	000fffff 	.word	0x000fffff

0800e9d8 <_sbrk>:
 800e9d8:	4a04      	ldr	r2, [pc, #16]	@ (800e9ec <_sbrk+0x14>)
 800e9da:	6811      	ldr	r1, [r2, #0]
 800e9dc:	4603      	mov	r3, r0
 800e9de:	b909      	cbnz	r1, 800e9e4 <_sbrk+0xc>
 800e9e0:	4903      	ldr	r1, [pc, #12]	@ (800e9f0 <_sbrk+0x18>)
 800e9e2:	6011      	str	r1, [r2, #0]
 800e9e4:	6810      	ldr	r0, [r2, #0]
 800e9e6:	4403      	add	r3, r0
 800e9e8:	6013      	str	r3, [r2, #0]
 800e9ea:	4770      	bx	lr
 800e9ec:	20014b48 	.word	0x20014b48
 800e9f0:	20014b50 	.word	0x20014b50

0800e9f4 <_init>:
 800e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f6:	bf00      	nop
 800e9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fa:	bc08      	pop	{r3}
 800e9fc:	469e      	mov	lr, r3
 800e9fe:	4770      	bx	lr

0800ea00 <_fini>:
 800ea00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea02:	bf00      	nop
 800ea04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea06:	bc08      	pop	{r3}
 800ea08:	469e      	mov	lr, r3
 800ea0a:	4770      	bx	lr
