
GETjag_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800af64  0800af64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4ac  0800b4ac  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4ac  0800b4ac  0001b4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4b4  0800b4b4  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800b4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000147e4  20000138  0800b5f4  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001491c  0800b5f4  0002491c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d126  00000000  00000000  000201ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004677  00000000  00000000  0003d2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  00041948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001521  00000000  00000000  00043480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000072bb  00000000  00000000  000449a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f959  00000000  00000000  0004bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ed6  00000000  00000000  0006b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b74  00000000  00000000  0015348c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0015b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af4c 	.word	0x0800af4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	0800af4c 	.word	0x0800af4c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200131f8 	.word	0x200131f8

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000384:	f000 b970 	b.w	8000668 <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9e08      	ldr	r6, [sp, #32]
 80003a6:	460d      	mov	r5, r1
 80003a8:	4604      	mov	r4, r0
 80003aa:	460f      	mov	r7, r1
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d14a      	bne.n	8000446 <__udivmoddi4+0xa6>
 80003b0:	428a      	cmp	r2, r1
 80003b2:	4694      	mov	ip, r2
 80003b4:	d965      	bls.n	8000482 <__udivmoddi4+0xe2>
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	b143      	cbz	r3, 80003ce <__udivmoddi4+0x2e>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0220 	rsb	r2, r3, #32
 80003c4:	409f      	lsls	r7, r3
 80003c6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ca:	4317      	orrs	r7, r2
 80003cc:	409c      	lsls	r4, r3
 80003ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d2:	fa1f f58c 	uxth.w	r5, ip
 80003d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003e4:	fb01 f005 	mul.w	r0, r1, r5
 80003e8:	4290      	cmp	r0, r2
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x62>
 80003ec:	eb1c 0202 	adds.w	r2, ip, r2
 80003f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003f4:	f080 811c 	bcs.w	8000630 <__udivmoddi4+0x290>
 80003f8:	4290      	cmp	r0, r2
 80003fa:	f240 8119 	bls.w	8000630 <__udivmoddi4+0x290>
 80003fe:	3902      	subs	r1, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a12      	subs	r2, r2, r0
 8000404:	b2a4      	uxth	r4, r4
 8000406:	fbb2 f0fe 	udiv	r0, r2, lr
 800040a:	fb0e 2210 	mls	r2, lr, r0, r2
 800040e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000412:	fb00 f505 	mul.w	r5, r0, r5
 8000416:	42a5      	cmp	r5, r4
 8000418:	d90a      	bls.n	8000430 <__udivmoddi4+0x90>
 800041a:	eb1c 0404 	adds.w	r4, ip, r4
 800041e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000422:	f080 8107 	bcs.w	8000634 <__udivmoddi4+0x294>
 8000426:	42a5      	cmp	r5, r4
 8000428:	f240 8104 	bls.w	8000634 <__udivmoddi4+0x294>
 800042c:	4464      	add	r4, ip
 800042e:	3802      	subs	r0, #2
 8000430:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000434:	1b64      	subs	r4, r4, r5
 8000436:	2100      	movs	r1, #0
 8000438:	b11e      	cbz	r6, 8000442 <__udivmoddi4+0xa2>
 800043a:	40dc      	lsrs	r4, r3
 800043c:	2300      	movs	r3, #0
 800043e:	e9c6 4300 	strd	r4, r3, [r6]
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	428b      	cmp	r3, r1
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0xbc>
 800044a:	2e00      	cmp	r6, #0
 800044c:	f000 80ed 	beq.w	800062a <__udivmoddi4+0x28a>
 8000450:	2100      	movs	r1, #0
 8000452:	e9c6 0500 	strd	r0, r5, [r6]
 8000456:	4608      	mov	r0, r1
 8000458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045c:	fab3 f183 	clz	r1, r3
 8000460:	2900      	cmp	r1, #0
 8000462:	d149      	bne.n	80004f8 <__udivmoddi4+0x158>
 8000464:	42ab      	cmp	r3, r5
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0xce>
 8000468:	4282      	cmp	r2, r0
 800046a:	f200 80f8 	bhi.w	800065e <__udivmoddi4+0x2be>
 800046e:	1a84      	subs	r4, r0, r2
 8000470:	eb65 0203 	sbc.w	r2, r5, r3
 8000474:	2001      	movs	r0, #1
 8000476:	4617      	mov	r7, r2
 8000478:	2e00      	cmp	r6, #0
 800047a:	d0e2      	beq.n	8000442 <__udivmoddi4+0xa2>
 800047c:	e9c6 4700 	strd	r4, r7, [r6]
 8000480:	e7df      	b.n	8000442 <__udivmoddi4+0xa2>
 8000482:	b902      	cbnz	r2, 8000486 <__udivmoddi4+0xe6>
 8000484:	deff      	udf	#255	; 0xff
 8000486:	fab2 f382 	clz	r3, r2
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 8090 	bne.w	80005b0 <__udivmoddi4+0x210>
 8000490:	1a8a      	subs	r2, r1, r2
 8000492:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	2101      	movs	r1, #1
 800049c:	fbb2 f5f7 	udiv	r5, r2, r7
 80004a0:	fb07 2015 	mls	r0, r7, r5, r2
 80004a4:	0c22      	lsrs	r2, r4, #16
 80004a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004aa:	fb0e f005 	mul.w	r0, lr, r5
 80004ae:	4290      	cmp	r0, r2
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x124>
 80004b2:	eb1c 0202 	adds.w	r2, ip, r2
 80004b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x122>
 80004bc:	4290      	cmp	r0, r2
 80004be:	f200 80cb 	bhi.w	8000658 <__udivmoddi4+0x2b8>
 80004c2:	4645      	mov	r5, r8
 80004c4:	1a12      	subs	r2, r2, r0
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004cc:	fb07 2210 	mls	r2, r7, r0, r2
 80004d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004d4:	fb0e fe00 	mul.w	lr, lr, r0
 80004d8:	45a6      	cmp	lr, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x14e>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x14c>
 80004e6:	45a6      	cmp	lr, r4
 80004e8:	f200 80bb 	bhi.w	8000662 <__udivmoddi4+0x2c2>
 80004ec:	4610      	mov	r0, r2
 80004ee:	eba4 040e 	sub.w	r4, r4, lr
 80004f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004f6:	e79f      	b.n	8000438 <__udivmoddi4+0x98>
 80004f8:	f1c1 0720 	rsb	r7, r1, #32
 80004fc:	408b      	lsls	r3, r1
 80004fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000502:	ea4c 0c03 	orr.w	ip, ip, r3
 8000506:	fa05 f401 	lsl.w	r4, r5, r1
 800050a:	fa20 f307 	lsr.w	r3, r0, r7
 800050e:	40fd      	lsrs	r5, r7
 8000510:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000514:	4323      	orrs	r3, r4
 8000516:	fbb5 f8f9 	udiv	r8, r5, r9
 800051a:	fa1f fe8c 	uxth.w	lr, ip
 800051e:	fb09 5518 	mls	r5, r9, r8, r5
 8000522:	0c1c      	lsrs	r4, r3, #16
 8000524:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000528:	fb08 f50e 	mul.w	r5, r8, lr
 800052c:	42a5      	cmp	r5, r4
 800052e:	fa02 f201 	lsl.w	r2, r2, r1
 8000532:	fa00 f001 	lsl.w	r0, r0, r1
 8000536:	d90b      	bls.n	8000550 <__udivmoddi4+0x1b0>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000540:	f080 8088 	bcs.w	8000654 <__udivmoddi4+0x2b4>
 8000544:	42a5      	cmp	r5, r4
 8000546:	f240 8085 	bls.w	8000654 <__udivmoddi4+0x2b4>
 800054a:	f1a8 0802 	sub.w	r8, r8, #2
 800054e:	4464      	add	r4, ip
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	b29d      	uxth	r5, r3
 8000554:	fbb4 f3f9 	udiv	r3, r4, r9
 8000558:	fb09 4413 	mls	r4, r9, r3, r4
 800055c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000560:	fb03 fe0e 	mul.w	lr, r3, lr
 8000564:	45a6      	cmp	lr, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x1da>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000570:	d26c      	bcs.n	800064c <__udivmoddi4+0x2ac>
 8000572:	45a6      	cmp	lr, r4
 8000574:	d96a      	bls.n	800064c <__udivmoddi4+0x2ac>
 8000576:	3b02      	subs	r3, #2
 8000578:	4464      	add	r4, ip
 800057a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800057e:	fba3 9502 	umull	r9, r5, r3, r2
 8000582:	eba4 040e 	sub.w	r4, r4, lr
 8000586:	42ac      	cmp	r4, r5
 8000588:	46c8      	mov	r8, r9
 800058a:	46ae      	mov	lr, r5
 800058c:	d356      	bcc.n	800063c <__udivmoddi4+0x29c>
 800058e:	d053      	beq.n	8000638 <__udivmoddi4+0x298>
 8000590:	b156      	cbz	r6, 80005a8 <__udivmoddi4+0x208>
 8000592:	ebb0 0208 	subs.w	r2, r0, r8
 8000596:	eb64 040e 	sbc.w	r4, r4, lr
 800059a:	fa04 f707 	lsl.w	r7, r4, r7
 800059e:	40ca      	lsrs	r2, r1
 80005a0:	40cc      	lsrs	r4, r1
 80005a2:	4317      	orrs	r7, r2
 80005a4:	e9c6 7400 	strd	r7, r4, [r6]
 80005a8:	4618      	mov	r0, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b0:	f1c3 0120 	rsb	r1, r3, #32
 80005b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005b8:	fa20 f201 	lsr.w	r2, r0, r1
 80005bc:	fa25 f101 	lsr.w	r1, r5, r1
 80005c0:	409d      	lsls	r5, r3
 80005c2:	432a      	orrs	r2, r5
 80005c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c8:	fa1f fe8c 	uxth.w	lr, ip
 80005cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005d0:	fb07 1510 	mls	r5, r7, r0, r1
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005da:	fb00 f50e 	mul.w	r5, r0, lr
 80005de:	428d      	cmp	r5, r1
 80005e0:	fa04 f403 	lsl.w	r4, r4, r3
 80005e4:	d908      	bls.n	80005f8 <__udivmoddi4+0x258>
 80005e6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ee:	d22f      	bcs.n	8000650 <__udivmoddi4+0x2b0>
 80005f0:	428d      	cmp	r5, r1
 80005f2:	d92d      	bls.n	8000650 <__udivmoddi4+0x2b0>
 80005f4:	3802      	subs	r0, #2
 80005f6:	4461      	add	r1, ip
 80005f8:	1b49      	subs	r1, r1, r5
 80005fa:	b292      	uxth	r2, r2
 80005fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000600:	fb07 1115 	mls	r1, r7, r5, r1
 8000604:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000608:	fb05 f10e 	mul.w	r1, r5, lr
 800060c:	4291      	cmp	r1, r2
 800060e:	d908      	bls.n	8000622 <__udivmoddi4+0x282>
 8000610:	eb1c 0202 	adds.w	r2, ip, r2
 8000614:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000618:	d216      	bcs.n	8000648 <__udivmoddi4+0x2a8>
 800061a:	4291      	cmp	r1, r2
 800061c:	d914      	bls.n	8000648 <__udivmoddi4+0x2a8>
 800061e:	3d02      	subs	r5, #2
 8000620:	4462      	add	r2, ip
 8000622:	1a52      	subs	r2, r2, r1
 8000624:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000628:	e738      	b.n	800049c <__udivmoddi4+0xfc>
 800062a:	4631      	mov	r1, r6
 800062c:	4630      	mov	r0, r6
 800062e:	e708      	b.n	8000442 <__udivmoddi4+0xa2>
 8000630:	4639      	mov	r1, r7
 8000632:	e6e6      	b.n	8000402 <__udivmoddi4+0x62>
 8000634:	4610      	mov	r0, r2
 8000636:	e6fb      	b.n	8000430 <__udivmoddi4+0x90>
 8000638:	4548      	cmp	r0, r9
 800063a:	d2a9      	bcs.n	8000590 <__udivmoddi4+0x1f0>
 800063c:	ebb9 0802 	subs.w	r8, r9, r2
 8000640:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000644:	3b01      	subs	r3, #1
 8000646:	e7a3      	b.n	8000590 <__udivmoddi4+0x1f0>
 8000648:	4645      	mov	r5, r8
 800064a:	e7ea      	b.n	8000622 <__udivmoddi4+0x282>
 800064c:	462b      	mov	r3, r5
 800064e:	e794      	b.n	800057a <__udivmoddi4+0x1da>
 8000650:	4640      	mov	r0, r8
 8000652:	e7d1      	b.n	80005f8 <__udivmoddi4+0x258>
 8000654:	46d0      	mov	r8, sl
 8000656:	e77b      	b.n	8000550 <__udivmoddi4+0x1b0>
 8000658:	3d02      	subs	r5, #2
 800065a:	4462      	add	r2, ip
 800065c:	e732      	b.n	80004c4 <__udivmoddi4+0x124>
 800065e:	4608      	mov	r0, r1
 8000660:	e70a      	b.n	8000478 <__udivmoddi4+0xd8>
 8000662:	4464      	add	r4, ip
 8000664:	3802      	subs	r0, #2
 8000666:	e742      	b.n	80004ee <__udivmoddi4+0x14e>

08000668 <__aeabi_idiv0>:
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8000672:	4baf      	ldr	r3, [pc, #700]	; (8000930 <main+0x2c4>)
 8000674:	f107 040c 	add.w	r4, r7, #12
 8000678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f002 fca1 	bl	8002fc4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f9df 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 faaf 	bl	8000be8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800068a:	f000 fa83 	bl	8000b94 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800068e:	f000 fa4b 	bl	8000b28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Enable cycle count for STM32

  DWT_CTRL |= (1<<0);
 8000692:	4ba8      	ldr	r3, [pc, #672]	; (8000934 <main+0x2c8>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4aa7      	ldr	r2, [pc, #668]	; (8000934 <main+0x2c8>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 800069e:	f007 fc99 	bl	8007fd4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80006a2:	f008 fd05 	bl	80090b0 <SEGGER_SYSVIEW_Start>

  // Create Tasks and Start Scheduler
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80006a6:	4ba4      	ldr	r3, [pc, #656]	; (8000938 <main+0x2cc>)
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4ba3      	ldr	r3, [pc, #652]	; (800093c <main+0x2d0>)
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	49a3      	ldr	r1, [pc, #652]	; (8000940 <main+0x2d4>)
 80006b4:	48a3      	ldr	r0, [pc, #652]	; (8000944 <main+0x2d8>)
 80006b6:	f005 fdd1 	bl	800625c <xTaskCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4aa2      	ldr	r2, [pc, #648]	; (8000948 <main+0x2dc>)
 80006be:	6013      	str	r3, [r2, #0]
  configASSERT(status==pdPASS);
 80006c0:	4ba1      	ldr	r3, [pc, #644]	; (8000948 <main+0x2dc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d00a      	beq.n	80006de <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006cc:	f383 8811 	msr	BASEPRI, r3
 80006d0:	f3bf 8f6f 	isb	sy
 80006d4:	f3bf 8f4f 	dsb	sy
 80006d8:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006da:	bf00      	nop
 80006dc:	e7fe      	b.n	80006dc <main+0x70>

  vTaskStartScheduler();
 80006de:	f005 ff21 	bl	8006524 <vTaskStartScheduler>
  /* Chip selection call back */

  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2108      	movs	r1, #8
 80006e6:	4899      	ldr	r0, [pc, #612]	; (800094c <main+0x2e0>)
 80006e8:	f002 ff48 	bl	800357c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f002 fcab 	bl	8003048 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2108      	movs	r1, #8
 80006f6:	4895      	ldr	r0, [pc, #596]	; (800094c <main+0x2e0>)
 80006f8:	f002 ff40 	bl	800357c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f002 fca2 	bl	8003048 <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000704:	4992      	ldr	r1, [pc, #584]	; (8000950 <main+0x2e4>)
 8000706:	4893      	ldr	r0, [pc, #588]	; (8000954 <main+0x2e8>)
 8000708:	f001 ff16 	bl	8002538 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800070c:	4992      	ldr	r1, [pc, #584]	; (8000958 <main+0x2ec>)
 800070e:	4893      	ldr	r0, [pc, #588]	; (800095c <main+0x2f0>)
 8000710:	f001 ff38 	bl	8002584 <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	2001      	movs	r0, #1
 800071c:	f001 ff5e 	bl	80025dc <ctlwizchip>
 8000720:	4603      	mov	r3, r0
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000726:	d100      	bne.n	800072a <main+0xbe>
  {

    while (1)
 8000728:	e7fe      	b.n	8000728 <main+0xbc>
      ;
  }

  /* Network initialization */
  network_init();
 800072a:	f000 fb37 	bl	8000d9c <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 800072e:	488c      	ldr	r0, [pc, #560]	; (8000960 <main+0x2f4>)
 8000730:	f002 fb30 	bl	8002d94 <wizchip_setnetinfo>
  PRINT_NETINFO(gWIZNETINFO);
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	2218      	movs	r2, #24
 8000738:	498a      	ldr	r1, [pc, #552]	; (8000964 <main+0x2f8>)
 800073a:	488b      	ldr	r0, [pc, #556]	; (8000968 <main+0x2fc>)
 800073c:	f004 fbc4 	bl	8004ec8 <HAL_UART_Transmit>
 8000740:	4b87      	ldr	r3, [pc, #540]	; (8000960 <main+0x2f4>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461c      	mov	r4, r3
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <main+0x2f4>)
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	461d      	mov	r5, r3
 800074c:	4b84      	ldr	r3, [pc, #528]	; (8000960 <main+0x2f4>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	461a      	mov	r2, r3
 8000752:	4b83      	ldr	r3, [pc, #524]	; (8000960 <main+0x2f4>)
 8000754:	78db      	ldrb	r3, [r3, #3]
 8000756:	4619      	mov	r1, r3
 8000758:	4b81      	ldr	r3, [pc, #516]	; (8000960 <main+0x2f4>)
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	4b80      	ldr	r3, [pc, #512]	; (8000960 <main+0x2f4>)
 8000760:	795b      	ldrb	r3, [r3, #5]
 8000762:	9303      	str	r3, [sp, #12]
 8000764:	9002      	str	r0, [sp, #8]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	462b      	mov	r3, r5
 800076c:	4622      	mov	r2, r4
 800076e:	497f      	ldr	r1, [pc, #508]	; (800096c <main+0x300>)
 8000770:	487f      	ldr	r0, [pc, #508]	; (8000970 <main+0x304>)
 8000772:	f009 fbab 	bl	8009ecc <siprintf>
 8000776:	487e      	ldr	r0, [pc, #504]	; (8000970 <main+0x304>)
 8000778:	f7ff fd9e 	bl	80002b8 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	497b      	ldr	r1, [pc, #492]	; (8000970 <main+0x304>)
 8000784:	4878      	ldr	r0, [pc, #480]	; (8000968 <main+0x2fc>)
 8000786:	f004 fb9f 	bl	8004ec8 <HAL_UART_Transmit>
 800078a:	4b75      	ldr	r3, [pc, #468]	; (8000960 <main+0x2f4>)
 800078c:	799b      	ldrb	r3, [r3, #6]
 800078e:	4619      	mov	r1, r3
 8000790:	4b73      	ldr	r3, [pc, #460]	; (8000960 <main+0x2f4>)
 8000792:	79db      	ldrb	r3, [r3, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	4b72      	ldr	r3, [pc, #456]	; (8000960 <main+0x2f4>)
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	461a      	mov	r2, r3
 800079c:	4b70      	ldr	r3, [pc, #448]	; (8000960 <main+0x2f4>)
 800079e:	7a5b      	ldrb	r3, [r3, #9]
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	9200      	str	r2, [sp, #0]
 80007a4:	4603      	mov	r3, r0
 80007a6:	460a      	mov	r2, r1
 80007a8:	4972      	ldr	r1, [pc, #456]	; (8000974 <main+0x308>)
 80007aa:	4871      	ldr	r0, [pc, #452]	; (8000970 <main+0x304>)
 80007ac:	f009 fb8e 	bl	8009ecc <siprintf>
 80007b0:	486f      	ldr	r0, [pc, #444]	; (8000970 <main+0x304>)
 80007b2:	f7ff fd81 	bl	80002b8 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	496c      	ldr	r1, [pc, #432]	; (8000970 <main+0x304>)
 80007be:	486a      	ldr	r0, [pc, #424]	; (8000968 <main+0x2fc>)
 80007c0:	f004 fb82 	bl	8004ec8 <HAL_UART_Transmit>
 80007c4:	4b66      	ldr	r3, [pc, #408]	; (8000960 <main+0x2f4>)
 80007c6:	7a9b      	ldrb	r3, [r3, #10]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4b65      	ldr	r3, [pc, #404]	; (8000960 <main+0x2f4>)
 80007cc:	7adb      	ldrb	r3, [r3, #11]
 80007ce:	4618      	mov	r0, r3
 80007d0:	4b63      	ldr	r3, [pc, #396]	; (8000960 <main+0x2f4>)
 80007d2:	7b1b      	ldrb	r3, [r3, #12]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b62      	ldr	r3, [pc, #392]	; (8000960 <main+0x2f4>)
 80007d8:	7b5b      	ldrb	r3, [r3, #13]
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	9200      	str	r2, [sp, #0]
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	4965      	ldr	r1, [pc, #404]	; (8000978 <main+0x30c>)
 80007e4:	4862      	ldr	r0, [pc, #392]	; (8000970 <main+0x304>)
 80007e6:	f009 fb71 	bl	8009ecc <siprintf>
 80007ea:	4861      	ldr	r0, [pc, #388]	; (8000970 <main+0x304>)
 80007ec:	f7ff fd64 	bl	80002b8 <strlen>
 80007f0:	4603      	mov	r3, r0
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	2364      	movs	r3, #100	; 0x64
 80007f6:	495e      	ldr	r1, [pc, #376]	; (8000970 <main+0x304>)
 80007f8:	485b      	ldr	r0, [pc, #364]	; (8000968 <main+0x2fc>)
 80007fa:	f004 fb65 	bl	8004ec8 <HAL_UART_Transmit>
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <main+0x2f4>)
 8000800:	7b9b      	ldrb	r3, [r3, #14]
 8000802:	4619      	mov	r1, r3
 8000804:	4b56      	ldr	r3, [pc, #344]	; (8000960 <main+0x2f4>)
 8000806:	7bdb      	ldrb	r3, [r3, #15]
 8000808:	4618      	mov	r0, r3
 800080a:	4b55      	ldr	r3, [pc, #340]	; (8000960 <main+0x2f4>)
 800080c:	7c1b      	ldrb	r3, [r3, #16]
 800080e:	461a      	mov	r2, r3
 8000810:	4b53      	ldr	r3, [pc, #332]	; (8000960 <main+0x2f4>)
 8000812:	7c5b      	ldrb	r3, [r3, #17]
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	9200      	str	r2, [sp, #0]
 8000818:	4603      	mov	r3, r0
 800081a:	460a      	mov	r2, r1
 800081c:	4957      	ldr	r1, [pc, #348]	; (800097c <main+0x310>)
 800081e:	4854      	ldr	r0, [pc, #336]	; (8000970 <main+0x304>)
 8000820:	f009 fb54 	bl	8009ecc <siprintf>
 8000824:	4852      	ldr	r0, [pc, #328]	; (8000970 <main+0x304>)
 8000826:	f7ff fd47 	bl	80002b8 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	494f      	ldr	r1, [pc, #316]	; (8000970 <main+0x304>)
 8000832:	484d      	ldr	r0, [pc, #308]	; (8000968 <main+0x2fc>)
 8000834:	f004 fb48 	bl	8004ec8 <HAL_UART_Transmit>

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000838:	4949      	ldr	r1, [pc, #292]	; (8000960 <main+0x2f4>)
 800083a:	2000      	movs	r0, #0
 800083c:	f001 ffb0 	bl	80027a0 <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 8000840:	2301      	movs	r3, #1
 8000842:	723b      	strb	r3, [r7, #8]
  phyconf.duplex = PHY_DUPLEX_FULL;
 8000844:	2301      	movs	r3, #1
 8000846:	72fb      	strb	r3, [r7, #11]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 8000848:	2300      	movs	r3, #0
 800084a:	72bb      	strb	r3, [r7, #10]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 800084c:	2301      	movs	r3, #1
 800084e:	727b      	strb	r3, [r7, #9]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4619      	mov	r1, r3
 8000856:	200a      	movs	r0, #10
 8000858:	f001 fec0 	bl	80025dc <ctlwizchip>
  //*** End Phy Configuration

  PHYStatusCheck();
 800085c:	f000 fab0 	bl	8000dc0 <PHYStatusCheck>
  PrintPHYConf();
 8000860:	f000 fada 	bl	8000e18 <PrintPHYConf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("\r\nInitializing server socket\r\n");
 8000864:	4846      	ldr	r0, [pc, #280]	; (8000980 <main+0x314>)
 8000866:	f009 fb29 	bl	8009ebc <puts>
    // Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
    // Return value is socket ID on success
    if (socket(1, Sn_MR_TCP, LISTEN_PORT, 0) != 1)
 800086a:	2300      	movs	r3, #0
 800086c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000870:	2101      	movs	r1, #1
 8000872:	2001      	movs	r0, #1
 8000874:	f001 f938 	bl	8001ae8 <socket>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d003      	beq.n	8000886 <main+0x21a>
    {
      // error
      printf("Cannot create Socket!\r\n");
 800087e:	4841      	ldr	r0, [pc, #260]	; (8000984 <main+0x318>)
 8000880:	f009 fb1c 	bl	8009ebc <puts>
      while (1)
 8000884:	e7fe      	b.n	8000884 <main+0x218>
        ; // halt here
    }

    // success
    printf("Socket Created Successfully ! \r\n");
 8000886:	4840      	ldr	r0, [pc, #256]	; (8000988 <main+0x31c>)
 8000888:	f009 fb18 	bl	8009ebc <puts>

    uint8_t socket_io_mode = SOCK_IO_BLOCK;
 800088c:	2300      	movs	r3, #0
 800088e:	71fb      	strb	r3, [r7, #7]

    ctlsocket(1, CS_SET_IOMODE, &socket_io_mode); // set blocking IO mode
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	461a      	mov	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	2001      	movs	r0, #1
 8000898:	f001 fd28 	bl	80022ec <ctlsocket>

    printf("Start listening on port %d ! \r\n", LISTEN_PORT);
 800089c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80008a0:	483a      	ldr	r0, [pc, #232]	; (800098c <main+0x320>)
 80008a2:	f009 faa5 	bl	8009df0 <iprintf>
    printf("Waiting for a client connection. \r\n");
 80008a6:	483a      	ldr	r0, [pc, #232]	; (8000990 <main+0x324>)
 80008a8:	f009 fb08 	bl	8009ebc <puts>



    // Make it a passive socket (i.e. listen for connection)
    if (listen(1) != SOCK_OK) // our socket id is 1 (w5500 have 8 sockets from 0-7)
 80008ac:	2001      	movs	r0, #1
 80008ae:	f001 fa9d 	bl	8001dec <listen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d005      	beq.n	80008c4 <main+0x258>
    {
      // error
      printf("Cannot listen on port %d", LISTEN_PORT);
 80008b8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80008bc:	4835      	ldr	r0, [pc, #212]	; (8000994 <main+0x328>)
 80008be:	f009 fa97 	bl	8009df0 <iprintf>

      while (1)
 80008c2:	e7fe      	b.n	80008c2 <main+0x256>
        ;
    }

    uint8_t sr = 0x00; // socket status register
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    do
    {
      sr = getSn_SR(1); // read status reg (SR of socket 1)
 80008ca:	f44f 704a 	mov.w	r0, #808	; 0x328
 80008ce:	f000 fe63 	bl	8001598 <WIZCHIP_READ>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    } while (sr != 0x17 && sr != 0x00);
 80008d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008dc:	2b17      	cmp	r3, #23
 80008de:	d003      	beq.n	80008e8 <main+0x27c>
 80008e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f0      	bne.n	80008ca <main+0x25e>

    if (sr == 0x00)
 80008e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d103      	bne.n	80008f8 <main+0x28c>
    {
      printf("Some error occurred on server socket. Please restart.\r\n");
 80008f0:	4829      	ldr	r0, [pc, #164]	; (8000998 <main+0x32c>)
 80008f2:	f009 fae3 	bl	8009ebc <puts>
      while (1)
 80008f6:	e7fe      	b.n	80008f6 <main+0x28a>
        ;
    }

    if (sr == 0x17)
 80008f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008fc:	2b17      	cmp	r3, #23
 80008fe:	d1b1      	bne.n	8000864 <main+0x1f8>
    {
      // we come here only when a client has connected.
      // Now we can read data from the socket
      printf("A client connected!\r\n");
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <main+0x330>)
 8000902:	f009 fadb 	bl	8009ebc <puts>
      printf("Waiting for Client Data ...!\r\n");
 8000906:	4826      	ldr	r0, [pc, #152]	; (80009a0 <main+0x334>)
 8000908:	f009 fad8 	bl	8009ebc <puts>

      while (1)
      {
        int len = recv(1, RX_buffer, RX_buffer_length);
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	4925      	ldr	r1, [pc, #148]	; (80009a4 <main+0x338>)
 8000910:	2001      	movs	r0, #1
 8000912:	f001 fc35 	bl	8002180 <recv>
 8000916:	6238      	str	r0, [r7, #32]

        if (len == SOCKERR_SOCKSTATUS)
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	f113 0f07 	cmn.w	r3, #7
 800091e:	d147      	bne.n	80009b0 <main+0x344>
        {
          // client has disconnected
          printf("Client has disconnected\r\n");
 8000920:	4821      	ldr	r0, [pc, #132]	; (80009a8 <main+0x33c>)
 8000922:	f009 facb 	bl	8009ebc <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8000926:	4821      	ldr	r0, [pc, #132]	; (80009ac <main+0x340>)
 8000928:	f009 fac8 	bl	8009ebc <puts>
          break;
 800092c:	e074      	b.n	8000a18 <main+0x3ac>
 800092e:	bf00      	nop
 8000930:	0800b210 	.word	0x0800b210
 8000934:	e0001000 	.word	0xe0001000
 8000938:	20000330 	.word	0x20000330
 800093c:	0800af64 	.word	0x0800af64
 8000940:	0800af7c 	.word	0x0800af7c
 8000944:	08000cf5 	.word	0x08000cf5
 8000948:	20000334 	.word	0x20000334
 800094c:	40020000 	.word	0x40020000
 8000950:	08000d59 	.word	0x08000d59
 8000954:	08000d41 	.word	0x08000d41
 8000958:	08000d71 	.word	0x08000d71
 800095c:	08000d8b 	.word	0x08000d8b
 8000960:	20000000 	.word	0x20000000
 8000964:	0800af84 	.word	0x0800af84
 8000968:	200001e8 	.word	0x200001e8
 800096c:	0800afa0 	.word	0x0800afa0
 8000970:	20000154 	.word	0x20000154
 8000974:	0800afc4 	.word	0x0800afc4
 8000978:	0800afe4 	.word	0x0800afe4
 800097c:	0800b004 	.word	0x0800b004
 8000980:	0800b024 	.word	0x0800b024
 8000984:	0800b044 	.word	0x0800b044
 8000988:	0800b05c 	.word	0x0800b05c
 800098c:	0800b07c 	.word	0x0800b07c
 8000990:	0800b09c 	.word	0x0800b09c
 8000994:	0800b0c0 	.word	0x0800b0c0
 8000998:	0800b0dc 	.word	0x0800b0dc
 800099c:	0800b114 	.word	0x0800b114
 80009a0:	0800b12c 	.word	0x0800b12c
 80009a4:	200002b0 	.word	0x200002b0
 80009a8:	0800b14c 	.word	0x0800b14c
 80009ac:	0800b168 	.word	0x0800b168
        }

        RX_buffer[len] = '\0';
 80009b0:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <main+0x3b0>)
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	4413      	add	r3, r2
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]

        printf("Received %d bytes from client\r\n", len);
 80009ba:	6a39      	ldr	r1, [r7, #32]
 80009bc:	4818      	ldr	r0, [pc, #96]	; (8000a20 <main+0x3b4>)
 80009be:	f009 fa17 	bl	8009df0 <iprintf>
        printf("Data Received: %s", RX_buffer);
 80009c2:	4916      	ldr	r1, [pc, #88]	; (8000a1c <main+0x3b0>)
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <main+0x3b8>)
 80009c6:	f009 fa13 	bl	8009df0 <iprintf>
        // Echo the data back encloused in a [] pair
        //	  			  send(1,(uint8_t*)"[",1);//starting sq bracket
        //	  			  send(1,receive_buff,len);// the data
        //	  			  send(1,(uint8_t*)"]",1);//closing sq bracket
        //
        memset(TX_buffer, 0, sizeof(TX_buffer));
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	2100      	movs	r1, #0
 80009ce:	4816      	ldr	r0, [pc, #88]	; (8000a28 <main+0x3bc>)
 80009d0:	f009 fb84 	bl	800a0dc <memset>
        modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <main+0x3c0>)
 80009d6:	6a3a      	ldr	r2, [r7, #32]
 80009d8:	4913      	ldr	r1, [pc, #76]	; (8000a28 <main+0x3bc>)
 80009da:	4810      	ldr	r0, [pc, #64]	; (8000a1c <main+0x3b0>)
 80009dc:	f000 faaa 	bl	8000f34 <modbus_receive>
        holding_register[3] = holding_register[3] + 1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <main+0x3c0>)
 80009e2:	88db      	ldrh	r3, [r3, #6]
 80009e4:	3301      	adds	r3, #1
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <main+0x3c0>)
 80009ea:	80da      	strh	r2, [r3, #6]
        //	  			send(1,test_buffer,4);//closing sq bracket

        //	  			  uint8_t test_buffer[29]= {0,10,0,0,0,23,1,3,20,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10};
        //	  			  send(1,test_buffer,29);//closing sq bracket

        printf("\r\nECHO sent back to client\r\n");
 80009ec:	4810      	ldr	r0, [pc, #64]	; (8000a30 <main+0x3c4>)
 80009ee:	f009 fa65 	bl	8009ebc <puts>

        // Look for quit message and quit if received
        if (strcmp((char *)RX_buffer, "QUIT") == 0)
 80009f2:	4910      	ldr	r1, [pc, #64]	; (8000a34 <main+0x3c8>)
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <main+0x3b0>)
 80009f6:	f7ff fc55 	bl	80002a4 <strcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d185      	bne.n	800090c <main+0x2a0>
        {
          printf("Received QUIT command from client\r\n");
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <main+0x3cc>)
 8000a02:	f009 fa5b 	bl	8009ebc <puts>
          printf("Disconnecting ... \r\n");
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <main+0x3d0>)
 8000a08:	f009 fa58 	bl	8009ebc <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <main+0x3d4>)
 8000a0e:	f009 fa55 	bl	8009ebc <puts>
          disconnect(1); // disconnect from the clinet
 8000a12:	2001      	movs	r0, #1
 8000a14:	f001 fa44 	bl	8001ea0 <disconnect>
  {
 8000a18:	e724      	b.n	8000864 <main+0x1f8>
 8000a1a:	bf00      	nop
 8000a1c:	200002b0 	.word	0x200002b0
 8000a20:	0800b180 	.word	0x0800b180
 8000a24:	0800b1a0 	.word	0x0800b1a0
 8000a28:	20000230 	.word	0x20000230
 8000a2c:	20000018 	.word	0x20000018
 8000a30:	0800b1b4 	.word	0x0800b1b4
 8000a34:	0800b1d0 	.word	0x0800b1d0
 8000a38:	0800b1d8 	.word	0x0800b1d8
 8000a3c:	0800b1fc 	.word	0x0800b1fc
 8000a40:	0800b168 	.word	0x0800b168

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	; 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2234      	movs	r2, #52	; 0x34
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 fb42 	bl	800a0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <SystemClock_Config+0xdc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a2b      	ldr	r2, [pc, #172]	; (8000b20 <SystemClock_Config+0xdc>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <SystemClock_Config+0xdc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <SystemClock_Config+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a25      	ldr	r2, [pc, #148]	; (8000b24 <SystemClock_Config+0xe0>)
 8000a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <SystemClock_Config+0xe0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ab8:	23b4      	movs	r3, #180	; 0xb4
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 f955 	bl	8003d7c <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ad8:	f000 f9f4 	bl	8000ec4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000adc:	f002 fd82 	bl	80035e4 <HAL_PWREx_EnableOverDrive>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ae6:	f000 f9ed 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	2105      	movs	r1, #5
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fdbb 	bl	8003684 <HAL_RCC_ClockConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b14:	f000 f9d6 	bl	8000ec4 <Error_Handler>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3750      	adds	r7, #80	; 0x50
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <MX_SPI1_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_SPI1_Init+0x64>)
 8000b7a:	f003 fb9d 	bl	80042b8 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f99e 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000190 	.word	0x20000190
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART1_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	f004 f92c 	bl	8004e28 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f975 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001e8 	.word	0x200001e8
 8000be4:	40011000 	.word	0x40011000

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a38      	ldr	r2, [pc, #224]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_GPIO_Init+0x100>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2118      	movs	r1, #24
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <MX_GPIO_Init+0x104>)
 8000c74:	f002 fc82 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SPI_INT_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000c7e:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0x108>)
 8000c80:	f002 fc7c 	bl	800357c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c84:	2304      	movs	r3, #4
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c94:	2307      	movs	r3, #7
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_GPIO_Init+0x104>)
 8000ca0:	f002 fad8 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin;
 8000ca4:	2318      	movs	r3, #24
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0x104>)
 8000cbc:	f002 faca 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SPI_INT_Pin;
 8000cc0:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_GPIO_Init+0x108>)
 8000cda:	f002 fabb 	bl	8003254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <task1_handler+0x1c>)
 8000d02:	f002 fc54 	bl	80035ae <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d06:	2064      	movs	r0, #100	; 0x64
 8000d08:	f002 f99e 	bl	8003048 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d0c:	e7f6      	b.n	8000cfc <task1_handler+0x8>
 8000d0e:	bf00      	nop
 8000d10:	40020400 	.word	0x40020400

08000d14 <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 8000d1e:	f107 020f 	add.w	r2, r7, #15
 8000d22:	1df9      	adds	r1, r7, #7
 8000d24:	2332      	movs	r3, #50	; 0x32
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <W5500_rxtx+0x28>)
 8000d2c:	f003 fb4d 	bl	80043ca <HAL_SPI_TransmitReceive>

  return (rxdata);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000190 	.word	0x20000190

08000d40 <wizchip_select>:

void wizchip_select(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  W5500_select();
 8000d44:	2200      	movs	r2, #0
 8000d46:	2110      	movs	r1, #16
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <wizchip_select+0x14>)
 8000d4a:	f002 fc17 	bl	800357c <HAL_GPIO_WritePin>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000

08000d58 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  W5500_release();
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2110      	movs	r1, #16
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <wizchip_deselect+0x14>)
 8000d62:	f002 fc0b 	bl	800357c <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40020000 	.word	0x40020000

08000d70 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffc9 	bl	8000d14 <W5500_rxtx>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <wizchip_read>:

uint8_t wizchip_read()
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
  return W5500_rx();
 8000d8e:	20ff      	movs	r0, #255	; 0xff
 8000d90:	f7ff ffc0 	bl	8000d14 <W5500_rxtx>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000da2:	4906      	ldr	r1, [pc, #24]	; (8000dbc <network_init+0x20>)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f001 fcfb 	bl	80027a0 <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	2008      	movs	r0, #8
 8000db0:	f001 fc14 	bl	80025dc <ctlwizchip>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <PHYStatusCheck>:
  UWriteData(ch);
  return ch;
}

void PHYStatusCheck(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <PHYStatusCheck+0x48>)
 8000dc8:	f009 f812 	bl	8009df0 <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	200f      	movs	r0, #15
 8000dd2:	f001 fc03 	bl	80025dc <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10b      	bne.n	8000df4 <PHYStatusCheck+0x34>
    {
      printf("NO Cable Connected!");
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <PHYStatusCheck+0x4c>)
 8000dde:	f009 f807 	bl	8009df0 <iprintf>
      HAL_Delay(1500);
 8000de2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000de6:	f002 f92f 	bl	8003048 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <PHYStatusCheck+0x50>)
 8000df0:	f002 fbdd 	bl	80035ae <HAL_GPIO_TogglePin>
    }
  } while (tmp == PHY_LINK_OFF);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0e5      	beq.n	8000dc6 <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <PHYStatusCheck+0x54>)
 8000dfc:	f008 fff8 	bl	8009df0 <iprintf>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	0800b220 	.word	0x0800b220
 8000e0c:	0800b248 	.word	0x0800b248
 8000e10:	40020400 	.word	0x40020400
 8000e14:	0800b25c 	.word	0x0800b25c

08000e18 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	200b      	movs	r0, #11
 8000e24:	f001 fbda 	bl	80025dc <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 8000e2e:	4814      	ldr	r0, [pc, #80]	; (8000e80 <PrintPHYConf+0x68>)
 8000e30:	f008 ffde 	bl	8009df0 <iprintf>
 8000e34:	e002      	b.n	8000e3c <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 8000e36:	4813      	ldr	r0, [pc, #76]	; (8000e84 <PrintPHYConf+0x6c>)
 8000e38:	f008 ffda 	bl	8009df0 <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 8000e3c:	797b      	ldrb	r3, [r7, #5]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d103      	bne.n	8000e4a <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <PrintPHYConf+0x70>)
 8000e44:	f008 ffd4 	bl	8009df0 <iprintf>
 8000e48:	e002      	b.n	8000e50 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 8000e4a:	4810      	ldr	r0, [pc, #64]	; (8000e8c <PrintPHYConf+0x74>)
 8000e4c:	f008 ffd0 	bl	8009df0 <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d103      	bne.n	8000e5e <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <PrintPHYConf+0x78>)
 8000e58:	f008 ffca 	bl	8009df0 <iprintf>
 8000e5c:	e002      	b.n	8000e64 <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <PrintPHYConf+0x7c>)
 8000e60:	f008 ffc6 	bl	8009df0 <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <PrintPHYConf+0x80>)
 8000e6c:	f008 ffc0 	bl	8009df0 <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 8000e70:	e002      	b.n	8000e78 <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <PrintPHYConf+0x84>)
 8000e74:	f008 ffbc 	bl	8009df0 <iprintf>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	0800b278 	.word	0x0800b278
 8000e84:	0800b29c 	.word	0x0800b29c
 8000e88:	0800b2bc 	.word	0x0800b2bc
 8000e8c:	0800b2d8 	.word	0x0800b2d8
 8000e90:	0800b2f8 	.word	0x0800b2f8
 8000e94:	0800b30c 	.word	0x0800b30c
 8000e98:	0800b320 	.word	0x0800b320
 8000e9c:	0800b330 	.word	0x0800b330

08000ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb2:	f002 f8a9 	bl	8003008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40001000 	.word	0x40001000

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <Error_Handler+0x8>

08000ece <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 8000edc:	89fb      	ldrh	r3, [r7, #14]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	0a1b      	lsrs	r3, r3, #8
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	701a      	strb	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 8000f42:	2300      	movs	r3, #0
 8000f44:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 8000f46:	2300      	movs	r3, #0
 8000f48:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t temp4 = 0x0000;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 8000f52:	2300      	movs	r3, #0
 8000f54:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 8000f56:	2300      	movs	r3, #0
 8000f58:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t temp7 = 0x0000;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3306      	adds	r3, #6
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 814d 	bne.w	8001204 <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3306      	adds	r3, #6
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	7992      	ldrb	r2, [r2, #6]
 8000f72:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3307      	adds	r3, #7
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	79d2      	ldrb	r2, [r2, #7]
 8000f7c:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3302      	adds	r3, #2
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3303      	adds	r3, #3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3307      	adds	r3, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b10      	cmp	r3, #16
 8000f96:	f000 809e 	beq.w	80010d6 <modbus_receive+0x1a2>
 8000f9a:	2b10      	cmp	r3, #16
 8000f9c:	f300 812e 	bgt.w	80011fc <modbus_receive+0x2c8>
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d003      	beq.n	8000fac <modbus_receive+0x78>
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	f000 8125 	beq.w	80011f4 <modbus_receive+0x2c0>
 8000faa:	e127      	b.n	80011fc <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3308      	adds	r3, #8
 8000fb0:	781a      	ldrb	r2, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3309      	adds	r3, #9
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f7ff ff9e 	bl	8000efc <make_word>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8000fc4:	8bfb      	ldrh	r3, [r7, #30]
 8000fc6:	2b3f      	cmp	r3, #63	; 0x3f
 8000fc8:	d87e      	bhi.n	80010c8 <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	330a      	adds	r3, #10
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	330b      	adds	r3, #11
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4610      	mov	r0, r2
 8000fda:	f7ff ff8f 	bl	8000efc <make_word>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8000fe2:	8bbb      	ldrh	r3, [r7, #28]
 8000fe4:	2b40      	cmp	r3, #64	; 0x40
 8000fe6:	d86b      	bhi.n	80010c0 <modbus_receive+0x18c>
 8000fe8:	8bba      	ldrh	r2, [r7, #28]
 8000fea:	8bfb      	ldrh	r3, [r7, #30]
 8000fec:	4413      	add	r3, r2
 8000fee:	2b40      	cmp	r3, #64	; 0x40
 8000ff0:	dc66      	bgt.n	80010c0 <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	7852      	ldrb	r2, [r2, #1]
 8001002:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 8001004:	8bbb      	ldrh	r3, [r7, #28]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	3305      	adds	r3, #5
 8001010:	3203      	adds	r2, #3
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 8001016:	8bbb      	ldrh	r3, [r7, #28]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3308      	adds	r3, #8
 800101e:	0052      	lsls	r2, r2, #1
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 8001024:	8bbb      	ldrh	r3, [r7, #28]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d92b      	bls.n	8001082 <modbus_receive+0x14e>
					{
						int i = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 800102e:	8bfb      	ldrh	r3, [r7, #30]
 8001030:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001032:	e021      	b.n	8001078 <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 8001034:	8bfa      	ldrh	r2, [r7, #30]
 8001036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001038:	4413      	add	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	4a72      	ldr	r2, [pc, #456]	; (800120c <modbus_receive+0x2d8>)
 8001044:	4972      	ldr	r1, [pc, #456]	; (8001210 <modbus_receive+0x2dc>)
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff41 	bl	8000ece <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	3309      	adds	r3, #9
 8001050:	461a      	mov	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	4a6e      	ldr	r2, [pc, #440]	; (8001210 <modbus_receive+0x2dc>)
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	330a      	adds	r3, #10
 8001060:	461a      	mov	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	4a69      	ldr	r2, [pc, #420]	; (800120c <modbus_receive+0x2d8>)
 8001068:	7812      	ldrb	r2, [r2, #0]
 800106a:	701a      	strb	r2, [r3, #0]
							i += 2;
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	3302      	adds	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8001072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001074:	3301      	adds	r3, #1
 8001076:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001078:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800107a:	8bbb      	ldrh	r3, [r7, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3d9      	bcc.n	8001034 <modbus_receive+0x100>
 8001080:	e013      	b.n	80010aa <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 8001082:	8bfb      	ldrh	r3, [r7, #30]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	4413      	add	r3, r2
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	4a5f      	ldr	r2, [pc, #380]	; (800120c <modbus_receive+0x2d8>)
 800108e:	4960      	ldr	r1, [pc, #384]	; (8001210 <modbus_receive+0x2dc>)
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff1c 	bl	8000ece <get_HB_LB>
						tx_buffer[1] = high_byte;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3301      	adds	r3, #1
 800109a:	4a5d      	ldr	r2, [pc, #372]	; (8001210 <modbus_receive+0x2dc>)
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3302      	adds	r3, #2
 80010a4:	4a59      	ldr	r2, [pc, #356]	; (800120c <modbus_receive+0x2d8>)
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 80010aa:	8bbb      	ldrh	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	3309      	adds	r3, #9
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	68b9      	ldr	r1, [r7, #8]
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 ff67 	bl	8001f8c <send>
 80010be:	e006      	b.n	80010ce <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 80010c0:	4b54      	ldr	r3, [pc, #336]	; (8001214 <modbus_receive+0x2e0>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e002      	b.n	80010ce <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 80010c8:	4b52      	ldr	r3, [pc, #328]	; (8001214 <modbus_receive+0x2e0>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 80010ce:	4852      	ldr	r0, [pc, #328]	; (8001218 <modbus_receive+0x2e4>)
 80010d0:	f008 fef4 	bl	8009ebc <puts>
			break;
 80010d4:	e096      	b.n	8001204 <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3308      	adds	r3, #8
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3309      	adds	r3, #9
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4610      	mov	r0, r2
 80010e6:	f7ff ff09 	bl	8000efc <make_word>
 80010ea:	4603      	mov	r3, r0
 80010ec:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 80010ee:	8bfb      	ldrh	r3, [r7, #30]
 80010f0:	2b3f      	cmp	r3, #63	; 0x3f
 80010f2:	d878      	bhi.n	80011e6 <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	330a      	adds	r3, #10
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	330b      	adds	r3, #11
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4610      	mov	r0, r2
 8001104:	f7ff fefa 	bl	8000efc <make_word>
 8001108:	4603      	mov	r3, r0
 800110a:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 800110c:	8bbb      	ldrh	r3, [r7, #28]
 800110e:	2b40      	cmp	r3, #64	; 0x40
 8001110:	d865      	bhi.n	80011de <modbus_receive+0x2aa>
 8001112:	8bba      	ldrh	r2, [r7, #28]
 8001114:	8bfb      	ldrh	r3, [r7, #30]
 8001116:	4413      	add	r3, r2
 8001118:	2b40      	cmp	r3, #64	; 0x40
 800111a:	dc60      	bgt.n	80011de <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3301      	adds	r3, #1
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	7852      	ldrb	r2, [r2, #1]
 800112c:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3305      	adds	r3, #5
 8001132:	2206      	movs	r2, #6
 8001134:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 8001136:	8bfb      	ldrh	r3, [r7, #30]
 8001138:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 800113a:	230d      	movs	r3, #13
 800113c:	84fb      	strh	r3, [r7, #38]	; 0x26

					if(temp2 == 1)
 800113e:	8bbb      	ldrh	r3, [r7, #28]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d111      	bne.n	8001168 <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 8001144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4413      	add	r3, r2
 800114a:	7818      	ldrb	r0, [r3, #0]
 800114c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800114e:	3301      	adds	r3, #1
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	7819      	ldrb	r1, [r3, #0]
 8001156:	8bfb      	ldrh	r3, [r7, #30]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	18d4      	adds	r4, r2, r3
 800115e:	f7ff fecd 	bl	8000efc <make_word>
 8001162:	4603      	mov	r3, r0
 8001164:	8023      	strh	r3, [r4, #0]
 8001166:	e020      	b.n	80011aa <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8001168:	8b3b      	ldrh	r3, [r7, #24]
 800116a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800116c:	e017      	b.n	800119e <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 800116e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	7818      	ldrb	r0, [r3, #0]
 8001176:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001178:	3301      	adds	r3, #1
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	7819      	ldrb	r1, [r3, #0]
 8001182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	18d4      	adds	r4, r2, r3
 800118a:	f7ff feb7 	bl	8000efc <make_word>
 800118e:	4603      	mov	r3, r0
 8001190:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 8001192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001194:	3302      	adds	r3, #2
 8001196:	84fb      	strh	r3, [r7, #38]	; 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8001198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800119a:	3301      	adds	r3, #1
 800119c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800119e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011a0:	8bb9      	ldrh	r1, [r7, #28]
 80011a2:	8b3b      	ldrh	r3, [r7, #24]
 80011a4:	440b      	add	r3, r1
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbe1      	blt.n	800116e <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3308      	adds	r3, #8
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	7a12      	ldrb	r2, [r2, #8]
 80011b2:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3309      	adds	r3, #9
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	7a52      	ldrb	r2, [r2, #9]
 80011bc:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	330a      	adds	r3, #10
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	7a92      	ldrb	r2, [r2, #10]
 80011c6:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	330b      	adds	r3, #11
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	7ad2      	ldrb	r2, [r2, #11]
 80011d0:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 80011d2:	220c      	movs	r2, #12
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	2001      	movs	r0, #1
 80011d8:	f000 fed8 	bl	8001f8c <send>
 80011dc:	e006      	b.n	80011ec <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <modbus_receive+0x2e0>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e002      	b.n	80011ec <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <modbus_receive+0x2e0>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <modbus_receive+0x2e8>)
 80011ee:	f008 fe65 	bl	8009ebc <puts>
			break;
 80011f2:	e007      	b.n	8001204 <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 80011f4:	480a      	ldr	r0, [pc, #40]	; (8001220 <modbus_receive+0x2ec>)
 80011f6:	f008 fe61 	bl	8009ebc <puts>
			break;
 80011fa:	e003      	b.n	8001204 <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <modbus_receive+0x2f0>)
 80011fe:	f008 fe5d 	bl	8009ebc <puts>
			break;
 8001202:	bf00      	nop
		}
	}
}
 8001204:	bf00      	nop
 8001206:	372c      	adds	r7, #44	; 0x2c
 8001208:	46bd      	mov	sp, r7
 800120a:	bd90      	pop	{r4, r7, pc}
 800120c:	20000339 	.word	0x20000339
 8001210:	2000033a 	.word	0x2000033a
 8001214:	20000338 	.word	0x20000338
 8001218:	0800b344 	.word	0x0800b344
 800121c:	0800b354 	.word	0x0800b354
 8001220:	0800b364 	.word	0x0800b364
 8001224:	0800b374 	.word	0x0800b374

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_MspInit+0x4c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x4c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001266:	f006 faff 	bl	8007868 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_SPI_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_SPI_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012d2:	23e0      	movs	r3, #224	; 0xe0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e2:	2305      	movs	r3, #5
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_SPI_MspInit+0x8c>)
 80012ee:	f001 ffb1 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40013000 	.word	0x40013000
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_UART_MspInit+0x84>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12b      	bne.n	8001382 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <HAL_UART_MspInit+0x88>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_UART_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_UART_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001362:	23c0      	movs	r3, #192	; 0xc0
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_UART_MspInit+0x8c>)
 800137e:	f001 ff69 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40011000 	.word	0x40011000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400

08001398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <HAL_InitTick+0xe4>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a32      	ldr	r2, [pc, #200]	; (800147c <HAL_InitTick+0xe4>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_InitTick+0xe4>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c4:	f107 0210 	add.w	r2, r7, #16
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fa72 	bl	80038b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013de:	f002 fa43 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 80013e2:	6378      	str	r0, [r7, #52]	; 0x34
 80013e4:	e004      	b.n	80013f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013e6:	f002 fa3f 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 80013ea:	4603      	mov	r3, r0
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	4a23      	ldr	r2, [pc, #140]	; (8001480 <HAL_InitTick+0xe8>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	3b01      	subs	r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_InitTick+0xec>)
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <HAL_InitTick+0xf0>)
 8001402:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_InitTick+0xec>)
 8001406:	f240 32e7 	movw	r2, #999	; 0x3e7
 800140a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_InitTick+0xec>)
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_InitTick+0xec>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <HAL_InitTick+0xec>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_InitTick+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001424:	4817      	ldr	r0, [pc, #92]	; (8001484 <HAL_InitTick+0xec>)
 8001426:	f003 fa5d 	bl	80048e4 <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001434:	2b00      	cmp	r3, #0
 8001436:	d11b      	bne.n	8001470 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001438:	4812      	ldr	r0, [pc, #72]	; (8001484 <HAL_InitTick+0xec>)
 800143a:	f003 faad 	bl	8004998 <HAL_TIM_Base_Start_IT>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001444:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001448:	2b00      	cmp	r3, #0
 800144a:	d111      	bne.n	8001470 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800144c:	2036      	movs	r0, #54	; 0x36
 800144e:	f001 fef3 	bl	8003238 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d808      	bhi.n	800146a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	2036      	movs	r0, #54	; 0x36
 800145e:	f001 fecf 	bl	8003200 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_InitTick+0xf4>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	e002      	b.n	8001470 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001470:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001474:	4618      	mov	r0, r3
 8001476:	3738      	adds	r7, #56	; 0x38
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	431bde83 	.word	0x431bde83
 8001484:	2000033c 	.word	0x2000033c
 8001488:	40001000 	.word	0x40001000
 800148c:	200000cc 	.word	0x200000cc

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM6_DAC_IRQHandler+0x10>)
 80014c2:	f003 fad9 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000033c 	.word	0x2000033c

080014d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e00a      	b.n	80014f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	4601      	mov	r1, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	60ba      	str	r2, [r7, #8]
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf0      	blt.n	80014e2 <_read+0x12>
  }

  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:
  }
  return len;
}

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <WIZCHIP_READ+0x94>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80015a6:	4b21      	ldr	r3, [pc, #132]	; (800162c <WIZCHIP_READ+0x94>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <WIZCHIP_READ+0x94>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <WIZCHIP_READ+0x24>
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <WIZCHIP_READ+0x94>)
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d114      	bne.n	80015e6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <WIZCHIP_READ+0x94>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	0c12      	lsrs	r2, r2, #16
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	4610      	mov	r0, r2
 80015c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <WIZCHIP_READ+0x94>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	0a12      	lsrs	r2, r2, #8
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	4610      	mov	r0, r2
 80015d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <WIZCHIP_READ+0x94>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	4610      	mov	r0, r2
 80015e2:	4798      	blx	r3
 80015e4:	e011      	b.n	800160a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <WIZCHIP_READ+0x94>)
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	f107 020c 	add.w	r2, r7, #12
 8001604:	2103      	movs	r1, #3
 8001606:	4610      	mov	r0, r2
 8001608:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <WIZCHIP_READ+0x94>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4798      	blx	r3
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <WIZCHIP_READ+0x94>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <WIZCHIP_READ+0x94>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	4798      	blx	r3
   return ret;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000a0 	.word	0x200000a0

08001630 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	2b00      	cmp	r3, #0
 8001656:	d119      	bne.n	800168c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	4610      	mov	r0, r2
 8001664:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	0a12      	lsrs	r2, r2, #8
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	4610      	mov	r0, r2
 8001672:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	4610      	mov	r0, r2
 800167e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	4610      	mov	r0, r2
 8001688:	4798      	blx	r3
 800168a:	e013      	b.n	80016b4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	0c1b      	lsrs	r3, r3, #16
 8001690:	b2db      	uxtb	r3, r3
 8001692:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b2db      	uxtb	r3, r3
 800169a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	f107 020c 	add.w	r2, r7, #12
 80016ae:	2104      	movs	r1, #4
 80016b0:	4610      	mov	r0, r2
 80016b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016ba:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <WIZCHIP_WRITE+0x98>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	4798      	blx	r3
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000a0 	.word	0x200000a0

080016cc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80016da:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4798      	blx	r3
   WIZCHIP.CS._select();
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <WIZCHIP_READ_BUF+0x2a>
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d126      	bne.n	8001744 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	0c12      	lsrs	r2, r2, #16
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	4610      	mov	r0, r2
 8001702:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	0a12      	lsrs	r2, r2, #8
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	4610      	mov	r0, r2
 8001710:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	4610      	mov	r0, r2
 800171c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	82fb      	strh	r3, [r7, #22]
 8001722:	e00a      	b.n	800173a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	8afa      	ldrh	r2, [r7, #22]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	188c      	adds	r4, r1, r2
 800172e:	4798      	blx	r3
 8001730:	4603      	mov	r3, r0
 8001732:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8001734:	8afb      	ldrh	r3, [r7, #22]
 8001736:	3301      	adds	r3, #1
 8001738:	82fb      	strh	r3, [r7, #22]
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3f0      	bcc.n	8001724 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001742:	e017      	b.n	8001774 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	b2db      	uxtb	r3, r3
 800174a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	b2db      	uxtb	r3, r3
 8001752:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	f107 0210 	add.w	r2, r7, #16
 8001762:	2103      	movs	r1, #3
 8001764:	4610      	mov	r0, r2
 8001766:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	88fa      	ldrh	r2, [r7, #6]
 800176e:	4611      	mov	r1, r2
 8001770:	68b8      	ldr	r0, [r7, #8]
 8001772:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800177a:	4b03      	ldr	r3, [pc, #12]	; (8001788 <WIZCHIP_READ_BUF+0xbc>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	4798      	blx	r3
}
 8001780:	bf00      	nop
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	200000a0 	.word	0x200000a0

0800178c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	4613      	mov	r3, r2
 8001798:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800179a:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4798      	blx	r3
   WIZCHIP.CS._select();
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d126      	bne.n	8001804 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	0c12      	lsrs	r2, r2, #16
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	4610      	mov	r0, r2
 80017c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	0a12      	lsrs	r2, r2, #8
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	4610      	mov	r0, r2
 80017d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	4610      	mov	r0, r2
 80017dc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	82fb      	strh	r3, [r7, #22]
 80017e2:	e00a      	b.n	80017fa <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	8afa      	ldrh	r2, [r7, #22]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	440a      	add	r2, r1
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	4610      	mov	r0, r2
 80017f2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	3301      	adds	r3, #1
 80017f8:	82fb      	strh	r3, [r7, #22]
 80017fa:	8afa      	ldrh	r2, [r7, #22]
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3f0      	bcc.n	80017e4 <WIZCHIP_WRITE_BUF+0x58>
 8001802:	e017      	b.n	8001834 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	b2db      	uxtb	r3, r3
 800180a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b2db      	uxtb	r3, r3
 8001812:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f107 0210 	add.w	r2, r7, #16
 8001822:	2103      	movs	r1, #3
 8001824:	4610      	mov	r0, r2
 8001826:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	4611      	mov	r1, r2
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800183a:	4b03      	ldr	r3, [pc, #12]	; (8001848 <WIZCHIP_WRITE_BUF+0xbc>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	4798      	blx	r3
}
 8001840:	bf00      	nop
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200000a0 	.word	0x200000a0

0800184c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001856:	2300      	movs	r3, #0
 8001858:	81fb      	strh	r3, [r7, #14]
 800185a:	2300      	movs	r3, #0
 800185c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	3301      	adds	r3, #1
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fe94 	bl	8001598 <WIZCHIP_READ>
 8001870:	4603      	mov	r3, r0
 8001872:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001874:	89bb      	ldrh	r3, [r7, #12]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b29c      	uxth	r4, r3
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	3301      	adds	r3, #1
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fe86 	bl	8001598 <WIZCHIP_READ>
 800188c:	4603      	mov	r3, r0
 800188e:	b29b      	uxth	r3, r3
 8001890:	4423      	add	r3, r4
 8001892:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001894:	89bb      	ldrh	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01a      	beq.n	80018d0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	3301      	adds	r3, #1
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fe76 	bl	8001598 <WIZCHIP_READ>
 80018ac:	4603      	mov	r3, r0
 80018ae:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80018b0:	89fb      	ldrh	r3, [r7, #14]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29c      	uxth	r4, r3
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3301      	adds	r3, #1
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fe68 	bl	8001598 <WIZCHIP_READ>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4423      	add	r3, r4
 80018ce:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80018d0:	89fa      	ldrh	r2, [r7, #14]
 80018d2:	89bb      	ldrh	r3, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1c2      	bne.n	800185e <getSn_TX_FSR+0x12>
   return val;
 80018d8:	89fb      	ldrh	r3, [r7, #14]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd90      	pop	{r4, r7, pc}

080018e2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80018e2:	b590      	push	{r4, r7, lr}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	81fb      	strh	r3, [r7, #14]
 80018f0:	2300      	movs	r3, #0
 80018f2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	3301      	adds	r3, #1
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fe49 	bl	8001598 <WIZCHIP_READ>
 8001906:	4603      	mov	r3, r0
 8001908:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800190a:	89bb      	ldrh	r3, [r7, #12]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	b29c      	uxth	r4, r3
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	3301      	adds	r3, #1
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe3b 	bl	8001598 <WIZCHIP_READ>
 8001922:	4603      	mov	r3, r0
 8001924:	b29b      	uxth	r3, r3
 8001926:	4423      	add	r3, r4
 8001928:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800192a:	89bb      	ldrh	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01a      	beq.n	8001966 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3301      	adds	r3, #1
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fe2b 	bl	8001598 <WIZCHIP_READ>
 8001942:	4603      	mov	r3, r0
 8001944:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b29c      	uxth	r4, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	3301      	adds	r3, #1
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe1d 	bl	8001598 <WIZCHIP_READ>
 800195e:	4603      	mov	r3, r0
 8001960:	b29b      	uxth	r3, r3
 8001962:	4423      	add	r3, r4
 8001964:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001966:	89fa      	ldrh	r2, [r7, #14]
 8001968:	89bb      	ldrh	r3, [r7, #12]
 800196a:	429a      	cmp	r2, r3
 800196c:	d1c2      	bne.n	80018f4 <getSn_RX_RSR+0x12>
   return val;
 800196e:	89fb      	ldrh	r3, [r7, #14]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}

08001978 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d048      	beq.n	8001a28 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	3301      	adds	r3, #1
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fdf8 	bl	8001598 <WIZCHIP_READ>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b29c      	uxth	r4, r3
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	3301      	adds	r3, #1
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fdeb 	bl	8001598 <WIZCHIP_READ>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	4423      	add	r3, r4
 80019c8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80019ca:	89fb      	ldrh	r3, [r7, #14]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	3202      	adds	r2, #2
 80019d4:	00d2      	lsls	r2, r2, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	461a      	mov	r2, r3
 80019de:	6839      	ldr	r1, [r7, #0]
 80019e0:	68b8      	ldr	r0, [r7, #8]
 80019e2:	f7ff fed3 	bl	800178c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80019e6:	89fa      	ldrh	r2, [r7, #14]
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	3301      	adds	r3, #1
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80019fa:	461a      	mov	r2, r3
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f7ff fe12 	bl	8001630 <WIZCHIP_WRITE>
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	3301      	adds	r3, #1
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001a18:	461a      	mov	r2, r3
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f7ff fe05 	bl	8001630 <WIZCHIP_WRITE>
 8001a26:	e000      	b.n	8001a2a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001a28:	bf00      	nop
}
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}

08001a30 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001a48:	88bb      	ldrh	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d048      	beq.n	8001ae0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	3301      	adds	r3, #1
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fd9c 	bl	8001598 <WIZCHIP_READ>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b29c      	uxth	r4, r3
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd8f 	bl	8001598 <WIZCHIP_READ>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4423      	add	r3, r4
 8001a80:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	3203      	adds	r2, #3
 8001a8c:	00d2      	lsls	r2, r2, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001a92:	88bb      	ldrh	r3, [r7, #4]
 8001a94:	461a      	mov	r2, r3
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	68b8      	ldr	r0, [r7, #8]
 8001a9a:	f7ff fe17 	bl	80016cc <WIZCHIP_READ_BUF>
   ptr += len;
 8001a9e:	89fa      	ldrh	r2, [r7, #14]
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	3301      	adds	r3, #1
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f7ff fdb6 	bl	8001630 <WIZCHIP_WRITE>
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	3301      	adds	r3, #1
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	89fb      	ldrh	r3, [r7, #14]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff fda9 	bl	8001630 <WIZCHIP_WRITE>
 8001ade:	e000      	b.n	8001ae2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8001ae0:	bf00      	nop
}
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}

08001ae8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4604      	mov	r4, r0
 8001af0:	4608      	mov	r0, r1
 8001af2:	4611      	mov	r1, r2
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	4603      	mov	r3, r0
 8001afc:	71bb      	strb	r3, [r7, #6]
 8001afe:	460b      	mov	r3, r1
 8001b00:	80bb      	strh	r3, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d902      	bls.n	8001b12 <socket+0x2a>
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b10:	e0f0      	b.n	8001cf4 <socket+0x20c>
	switch(protocol)
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <socket+0x3c>
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	dd11      	ble.n	8001b40 <socket+0x58>
 8001b1c:	3b02      	subs	r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d80e      	bhi.n	8001b40 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001b22:	e011      	b.n	8001b48 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001b30:	f7ff fdcc 	bl	80016cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <socket+0x5e>
 8001b3a:	f06f 0302 	mvn.w	r3, #2
 8001b3e:	e0d9      	b.n	8001cf4 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001b40:	f06f 0304 	mvn.w	r3, #4
 8001b44:	e0d6      	b.n	8001cf4 <socket+0x20c>
	    break;
 8001b46:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <socket+0x70>
 8001b52:	f06f 0305 	mvn.w	r3, #5
 8001b56:	e0cd      	b.n	8001cf4 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d028      	beq.n	8001bb0 <socket+0xc8>
	{
   	switch(protocol)
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d002      	beq.n	8001b6a <socket+0x82>
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001b68:	e022      	b.n	8001bb0 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d11a      	bne.n	8001baa <socket+0xc2>
 8001b74:	f06f 0305 	mvn.w	r3, #5
 8001b78:	e0bc      	b.n	8001cf4 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db02      	blt.n	8001b92 <socket+0xaa>
 8001b8c:	f06f 0305 	mvn.w	r3, #5
 8001b90:	e0b0      	b.n	8001cf4 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db04      	blt.n	8001bae <socket+0xc6>
 8001ba4:	f06f 0305 	mvn.w	r3, #5
 8001ba8:	e0a4      	b.n	8001cf4 <socket+0x20c>
   	      break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <socket+0xc8>
   	      break;
 8001bae:	bf00      	nop
   	}
   }
	close(sn);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f8ac 	bl	8001d10 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc6:	f023 030f 	bic.w	r3, r3, #15
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7ff fd2a 	bl	8001630 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d110      	bne.n	8001c04 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <socket+0x214>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	b291      	uxth	r1, r2
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <socket+0x214>)
 8001bec:	8011      	strh	r1, [r2, #0]
 8001bee:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <socket+0x214>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d103      	bne.n	8001c04 <socket+0x11c>
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <socket+0x214>)
 8001bfe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001c02:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3301      	adds	r3, #1
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c10:	461a      	mov	r2, r3
 8001c12:	88bb      	ldrh	r3, [r7, #4]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	f7ff fd07 	bl	8001630 <WIZCHIP_WRITE>
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3301      	adds	r3, #1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	461a      	mov	r2, r3
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f7ff fcfa 	bl	8001630 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	3301      	adds	r3, #1
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c48:	2101      	movs	r1, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fcf0 	bl	8001630 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c50:	bf00      	nop
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3301      	adds	r3, #1
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fc9a 	bl	8001598 <WIZCHIP_READ>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f3      	bne.n	8001c52 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <socket+0x218>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <socket+0x218>)
 8001c86:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <socket+0x218>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <socket+0x218>)
 8001ca4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <socket+0x21c>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <socket+0x21c>)
 8001cc2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <socket+0x220>)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <socket+0x224>)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001cd6:	bf00      	nop
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	3301      	adds	r3, #1
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fc57 	bl	8001598 <WIZCHIP_READ>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f3      	beq.n	8001cd8 <socket+0x1f0>
   return (int8_t)sn;
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}
 8001cfc:	2000009c 	.word	0x2000009c
 8001d00:	20000384 	.word	0x20000384
 8001d04:	20000386 	.word	0x20000386
 8001d08:	20000388 	.word	0x20000388
 8001d0c:	20000398 	.word	0x20000398

08001d10 <close>:

int8_t close(uint8_t sn)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d902      	bls.n	8001d26 <close+0x16>
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d24:	e055      	b.n	8001dd2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d32:	2110      	movs	r1, #16
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fc7b 	bl	8001630 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001d3a:	bf00      	nop
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	3301      	adds	r3, #1
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fc25 	bl	8001598 <WIZCHIP_READ>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f3      	bne.n	8001d3c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	3301      	adds	r3, #1
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d60:	211f      	movs	r1, #31
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc64 	bl	8001630 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <close+0xcc>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <close+0xcc>)
 8001d84:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <close+0xd0>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <close+0xd0>)
 8001da2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <close+0xd4>)
 8001da8:	2100      	movs	r1, #0
 8001daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <close+0xd8>)
 8001db2:	2100      	movs	r1, #0
 8001db4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001db6:	bf00      	nop
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fbe7 	bl	8001598 <WIZCHIP_READ>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f3      	bne.n	8001db8 <close+0xa8>
	return SOCK_OK;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000384 	.word	0x20000384
 8001de0:	20000386 	.word	0x20000386
 8001de4:	20000388 	.word	0x20000388
 8001de8:	20000398 	.word	0x20000398

08001dec <listen>:

int8_t listen(uint8_t sn)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d902      	bls.n	8001e02 <listen+0x16>
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e00:	e049      	b.n	8001e96 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	3301      	adds	r3, #1
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fbc4 	bl	8001598 <WIZCHIP_READ>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d002      	beq.n	8001e20 <listen+0x34>
 8001e1a:	f06f 0304 	mvn.w	r3, #4
 8001e1e:	e03a      	b.n	8001e96 <listen+0xaa>
	CHECK_SOCKINIT();
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	3301      	adds	r3, #1
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fbb3 	bl	8001598 <WIZCHIP_READ>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b13      	cmp	r3, #19
 8001e36:	d002      	beq.n	8001e3e <listen+0x52>
 8001e38:	f06f 0302 	mvn.w	r3, #2
 8001e3c:	e02b      	b.n	8001e96 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3301      	adds	r3, #1
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fbef 	bl	8001630 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001e52:	bf00      	nop
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	3301      	adds	r3, #1
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb99 	bl	8001598 <WIZCHIP_READ>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f3      	bne.n	8001e54 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001e6c:	e006      	b.n	8001e7c <listen+0x90>
   {
         close(sn);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff4d 	bl	8001d10 <close>
         return SOCKERR_SOCKCLOSED;
 8001e76:	f06f 0303 	mvn.w	r3, #3
 8001e7a:	e00c      	b.n	8001e96 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3301      	adds	r3, #1
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fb85 	bl	8001598 <WIZCHIP_READ>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b14      	cmp	r3, #20
 8001e92:	d1ec      	bne.n	8001e6e <listen+0x82>
   }
   return SOCK_OK;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d902      	bls.n	8001eb6 <disconnect+0x16>
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb4:	e062      	b.n	8001f7c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3301      	adds	r3, #1
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fb6a 	bl	8001598 <WIZCHIP_READ>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d002      	beq.n	8001ed4 <disconnect+0x34>
 8001ece:	f06f 0304 	mvn.w	r3, #4
 8001ed2:	e053      	b.n	8001f7c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3301      	adds	r3, #1
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fba4 	bl	8001630 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001ee8:	bf00      	nop
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	3301      	adds	r3, #1
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb4e 	bl	8001598 <WIZCHIP_READ>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f3      	bne.n	8001eea <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2201      	movs	r2, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <disconnect+0xe4>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4013      	ands	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <disconnect+0xe4>)
 8001f1e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <disconnect+0xe8>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	fa42 f303 	asr.w	r3, r2, r3
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d016      	beq.n	8001f62 <disconnect+0xc2>
 8001f34:	2300      	movs	r3, #0
 8001f36:	e021      	b.n	8001f7c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fb27 	bl	8001598 <WIZCHIP_READ>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <disconnect+0xc2>
	   {
	      close(sn);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff feda 	bl	8001d10 <close>
	      return SOCKERR_TIMEOUT;
 8001f5c:	f06f 030c 	mvn.w	r3, #12
 8001f60:	e00c      	b.n	8001f7c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3301      	adds	r3, #1
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fb12 	bl	8001598 <WIZCHIP_READ>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1de      	bne.n	8001f38 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000386 	.word	0x20000386
 8001f88:	20000384 	.word	0x20000384

08001f8c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d902      	bls.n	8001fb0 <send+0x24>
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fae:	e0de      	b.n	800216e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff faed 	bl	8001598 <WIZCHIP_READ>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d002      	beq.n	8001fce <send+0x42>
 8001fc8:	f06f 0304 	mvn.w	r3, #4
 8001fcc:	e0cf      	b.n	800216e <send+0x1e2>
   CHECK_SOCKDATA();
 8001fce:	88bb      	ldrh	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <send+0x4e>
 8001fd4:	f06f 030d 	mvn.w	r3, #13
 8001fd8:	e0c9      	b.n	800216e <send+0x1e2>
   tmp = getSn_SR(sn);
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	3301      	adds	r3, #1
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fad6 	bl	8001598 <WIZCHIP_READ>
 8001fec:	4603      	mov	r3, r0
 8001fee:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	2b17      	cmp	r3, #23
 8001ff4:	d005      	beq.n	8002002 <send+0x76>
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b1c      	cmp	r3, #28
 8001ffa:	d002      	beq.n	8002002 <send+0x76>
 8001ffc:	f06f 0306 	mvn.w	r3, #6
 8002000:	e0b5      	b.n	800216e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <send+0x1ec>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	fa42 f303 	asr.w	r3, r2, r3
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d039      	beq.n	800208a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	3301      	adds	r3, #1
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fab8 	bl	8001598 <WIZCHIP_READ>
 8002028:	4603      	mov	r3, r0
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d019      	beq.n	800206e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	3301      	adds	r3, #1
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002046:	2110      	movs	r1, #16
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff faf1 	bl	8001630 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2201      	movs	r2, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	b21b      	sxth	r3, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <send+0x1ec>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4013      	ands	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <send+0x1ec>)
 800206a:	801a      	strh	r2, [r3, #0]
 800206c:	e00d      	b.n	800208a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <send+0xfa>
      {
         close(sn);
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fe48 	bl	8001d10 <close>
         return SOCKERR_TIMEOUT;
 8002080:	f06f 030c 	mvn.w	r3, #12
 8002084:	e073      	b.n	800216e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8002086:	2300      	movs	r3, #0
 8002088:	e071      	b.n	800216e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fa7e 	bl	8001598 <WIZCHIP_READ>
 800209c:	4603      	mov	r3, r0
 800209e:	b29b      	uxth	r3, r3
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80020a4:	88ba      	ldrh	r2, [r7, #4]
 80020a6:	89bb      	ldrh	r3, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d901      	bls.n	80020b0 <send+0x124>
 80020ac:	89bb      	ldrh	r3, [r7, #12]
 80020ae:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fbca 	bl	800184c <getSn_TX_FSR>
 80020b8:	4603      	mov	r3, r0
 80020ba:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3301      	adds	r3, #1
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fa65 	bl	8001598 <WIZCHIP_READ>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b17      	cmp	r3, #23
 80020d6:	d009      	beq.n	80020ec <send+0x160>
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b1c      	cmp	r3, #28
 80020dc:	d006      	beq.n	80020ec <send+0x160>
      {
         close(sn);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fe15 	bl	8001d10 <close>
         return SOCKERR_SOCKSTATUS;
 80020e6:	f06f 0306 	mvn.w	r3, #6
 80020ea:	e040      	b.n	800216e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80020ec:	4b23      	ldr	r3, [pc, #140]	; (800217c <send+0x1f0>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	fa42 f303 	asr.w	r3, r2, r3
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <send+0x180>
 8002100:	88ba      	ldrh	r2, [r7, #4]
 8002102:	89bb      	ldrh	r3, [r7, #12]
 8002104:	429a      	cmp	r2, r3
 8002106:	d901      	bls.n	800210c <send+0x180>
 8002108:	2300      	movs	r3, #0
 800210a:	e030      	b.n	800216e <send+0x1e2>
      if(len <= freesize) break;
 800210c:	88ba      	ldrh	r2, [r7, #4]
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d900      	bls.n	8002116 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8002114:	e7cc      	b.n	80020b0 <send+0x124>
      if(len <= freesize) break;
 8002116:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8002118:	88ba      	ldrh	r2, [r7, #4]
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fc2a 	bl	8001978 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	3301      	adds	r3, #1
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002130:	2120      	movs	r1, #32
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fa7c 	bl	8001630 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8002138:	bf00      	nop
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	3301      	adds	r3, #1
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fa26 	bl	8001598 <WIZCHIP_READ>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f3      	bne.n	800213a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	2201      	movs	r2, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	b21a      	sxth	r2, r3
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <send+0x1ec>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <send+0x1ec>)
 800216a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800216c:	88bb      	ldrh	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000386 	.word	0x20000386
 800217c:	20000384 	.word	0x20000384

08002180 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	4613      	mov	r3, r2
 800218e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d902      	bls.n	80021a4 <recv+0x24>
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a2:	e09c      	b.n	80022de <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	3301      	adds	r3, #1
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f9f3 	bl	8001598 <WIZCHIP_READ>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d002      	beq.n	80021c2 <recv+0x42>
 80021bc:	f06f 0304 	mvn.w	r3, #4
 80021c0:	e08d      	b.n	80022de <recv+0x15e>
   CHECK_SOCKDATA();
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <recv+0x4e>
 80021c8:	f06f 030d 	mvn.w	r3, #13
 80021cc:	e087      	b.n	80022de <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	3301      	adds	r3, #1
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f9dc 	bl	8001598 <WIZCHIP_READ>
 80021e0:	4603      	mov	r3, r0
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80021e8:	89ba      	ldrh	r2, [r7, #12]
 80021ea:	88bb      	ldrh	r3, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d201      	bcs.n	80021f4 <recv+0x74>
 80021f0:	89bb      	ldrh	r3, [r7, #12]
 80021f2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fb73 	bl	80018e2 <getSn_RX_RSR>
 80021fc:	4603      	mov	r3, r0
 80021fe:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3301      	adds	r3, #1
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f9c3 	bl	8001598 <WIZCHIP_READ>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b17      	cmp	r3, #23
 800221a:	d026      	beq.n	800226a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b1c      	cmp	r3, #28
 8002220:	d11c      	bne.n	800225c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8002222:	89bb      	ldrh	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d133      	bne.n	8002290 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fb0e 	bl	800184c <getSn_TX_FSR>
 8002230:	4603      	mov	r3, r0
 8002232:	461c      	mov	r4, r3
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	3301      	adds	r3, #1
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f9a9 	bl	8001598 <WIZCHIP_READ>
 8002246:	4603      	mov	r3, r0
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	429c      	cmp	r4, r3
 800224c:	d10d      	bne.n	800226a <recv+0xea>
               {
                  close(sn);
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fd5d 	bl	8001d10 <close>
                  return SOCKERR_SOCKSTATUS;
 8002256:	f06f 0306 	mvn.w	r3, #6
 800225a:	e040      	b.n	80022de <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fd56 	bl	8001d10 <close>
               return SOCKERR_SOCKSTATUS;
 8002264:	f06f 0306 	mvn.w	r3, #6
 8002268:	e039      	b.n	80022de <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <recv+0x168>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	fa42 f303 	asr.w	r3, r2, r3
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <recv+0x108>
 800227e:	89bb      	ldrh	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <recv+0x108>
 8002284:	2300      	movs	r3, #0
 8002286:	e02a      	b.n	80022de <recv+0x15e>
         if(recvsize != 0) break;
 8002288:	89bb      	ldrh	r3, [r7, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800228e:	e7b1      	b.n	80021f4 <recv+0x74>
               if(recvsize != 0) break;
 8002290:	bf00      	nop
 8002292:	e000      	b.n	8002296 <recv+0x116>
         if(recvsize != 0) break;
 8002294:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002296:	89ba      	ldrh	r2, [r7, #12]
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d201      	bcs.n	80022a2 <recv+0x122>
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80022a2:	88ba      	ldrh	r2, [r7, #4]
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	6839      	ldr	r1, [r7, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fbc1 	bl	8001a30 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	3301      	adds	r3, #1
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80022ba:	2140      	movs	r1, #64	; 0x40
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f9b7 	bl	8001630 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80022c2:	bf00      	nop
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3301      	adds	r3, #1
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f961 	bl	8001598 <WIZCHIP_READ>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f3      	bne.n	80022c4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80022dc:	88bb      	ldrh	r3, [r7, #4]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000384 	.word	0x20000384

080022ec <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	603a      	str	r2, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	460b      	mov	r3, r1
 80022fa:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	2b08      	cmp	r3, #8
 8002304:	d902      	bls.n	800230c <ctlsocket+0x20>
 8002306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800230a:	e0c2      	b.n	8002492 <ctlsocket+0x1a6>
   switch(cstype)
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	2b07      	cmp	r3, #7
 8002310:	f200 80bb 	bhi.w	800248a <ctlsocket+0x19e>
 8002314:	a201      	add	r2, pc, #4	; (adr r2, 800231c <ctlsocket+0x30>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	0800233d 	.word	0x0800233d
 8002320:	08002391 	.word	0x08002391
 8002324:	080023ab 	.word	0x080023ab
 8002328:	080023cb 	.word	0x080023cb
 800232c:	080023eb 	.word	0x080023eb
 8002330:	0800241b 	.word	0x0800241b
 8002334:	0800243b 	.word	0x0800243b
 8002338:	0800246b 	.word	0x0800246b
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <ctlsocket+0x78>
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2201      	movs	r2, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	b21a      	sxth	r2, r3
 8002352:	4b52      	ldr	r3, [pc, #328]	; (800249c <ctlsocket+0x1b0>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	b21b      	sxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b21b      	sxth	r3, r3
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b4f      	ldr	r3, [pc, #316]	; (800249c <ctlsocket+0x1b0>)
 8002360:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8002362:	e095      	b.n	8002490 <ctlsocket+0x1a4>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <ctlsocket+0x9e>
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2201      	movs	r2, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	b21b      	sxth	r3, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <ctlsocket+0x1b0>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4013      	ands	r3, r2
 8002380:	b21b      	sxth	r3, r3
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <ctlsocket+0x1b0>)
 8002386:	801a      	strh	r2, [r3, #0]
         break;
 8002388:	e082      	b.n	8002490 <ctlsocket+0x1a4>
         else return SOCKERR_ARG;
 800238a:	f06f 0309 	mvn.w	r3, #9
 800238e:	e080      	b.n	8002492 <ctlsocket+0x1a6>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <ctlsocket+0x1b0>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	fa42 f303 	asr.w	r3, r2, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
         //
         break;
 80023a8:	e072      	b.n	8002490 <ctlsocket+0x1a4>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	3301      	adds	r3, #1
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f8ee 	bl	8001598 <WIZCHIP_READ>
 80023bc:	4603      	mov	r3, r0
 80023be:	b29b      	uxth	r3, r3
 80023c0:	029b      	lsls	r3, r3, #10
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	801a      	strh	r2, [r3, #0]
         break;
 80023c8:	e062      	b.n	8002490 <ctlsocket+0x1a4>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	3301      	adds	r3, #1
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f8de 	bl	8001598 <WIZCHIP_READ>
 80023dc:	4603      	mov	r3, r0
 80023de:	b29b      	uxth	r3, r3
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	801a      	strh	r2, [r3, #0]
         break;
 80023e8:	e052      	b.n	8002490 <ctlsocket+0x1a4>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b1f      	cmp	r3, #31
 80023f0:	d902      	bls.n	80023f8 <ctlsocket+0x10c>
 80023f2:	f06f 0309 	mvn.w	r3, #9
 80023f6:	e04c      	b.n	8002492 <ctlsocket+0x1a6>
         setSn_IR(sn,*(uint8_t*)arg);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	3301      	adds	r3, #1
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002404:	461a      	mov	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7ff f90c 	bl	8001630 <WIZCHIP_WRITE>
         break;
 8002418:	e03a      	b.n	8002490 <ctlsocket+0x1a4>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3301      	adds	r3, #1
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f8b6 	bl	8001598 <WIZCHIP_READ>
 800242c:	4603      	mov	r3, r0
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	b2da      	uxtb	r2, r3
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	701a      	strb	r2, [r3, #0]
         break;
 8002438:	e02a      	b.n	8002490 <ctlsocket+0x1a4>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b1f      	cmp	r3, #31
 8002440:	d902      	bls.n	8002448 <ctlsocket+0x15c>
 8002442:	f06f 0309 	mvn.w	r3, #9
 8002446:	e024      	b.n	8002492 <ctlsocket+0x1a6>
         setSn_IMR(sn,*(uint8_t*)arg);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	3301      	adds	r3, #1
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002454:	461a      	mov	r2, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	4610      	mov	r0, r2
 8002464:	f7ff f8e4 	bl	8001630 <WIZCHIP_WRITE>
         break;
 8002468:	e012      	b.n	8002490 <ctlsocket+0x1a4>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	3301      	adds	r3, #1
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f88e 	bl	8001598 <WIZCHIP_READ>
 800247c:	4603      	mov	r3, r0
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	b2da      	uxtb	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	701a      	strb	r2, [r3, #0]
         break;
 8002488:	e002      	b.n	8002490 <ctlsocket+0x1a4>
   #endif
      default:
         return SOCKERR_ARG;
 800248a:	f06f 0309 	mvn.w	r3, #9
 800248e:	e000      	b.n	8002492 <ctlsocket+0x1a6>
   }
   return SOCK_OK;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000384 	.word	0x20000384

080024a0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	bf00      	nop
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	70fb      	strb	r3, [r7, #3]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
 8002514:	2300      	movs	r3, #0
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <reg_wizchip_cs_cbfunc+0x16>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <reg_wizchip_cs_cbfunc+0x40>)
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <reg_wizchip_cs_cbfunc+0x44>)
 8002552:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <reg_wizchip_cs_cbfunc+0x40>)
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <reg_wizchip_cs_cbfunc+0x48>)
 8002558:	619a      	str	r2, [r3, #24]
 800255a:	e006      	b.n	800256a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <reg_wizchip_cs_cbfunc+0x40>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <reg_wizchip_cs_cbfunc+0x40>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6193      	str	r3, [r2, #24]
   }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	200000a0 	.word	0x200000a0
 800257c:	080024bd 	.word	0x080024bd
 8002580:	080024cb 	.word	0x080024cb

08002584 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800258e:	bf00      	nop
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <reg_wizchip_spi_cbfunc+0x4c>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f9      	beq.n	8002590 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <reg_wizchip_spi_cbfunc+0x24>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <reg_wizchip_spi_cbfunc+0x50>)
 80025ac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80025b0:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <reg_wizchip_spi_cbfunc+0x54>)
 80025b2:	621a      	str	r2, [r3, #32]
 80025b4:	e006      	b.n	80025c4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80025b6:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80025bc:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6213      	str	r3, [r2, #32]
   }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	200000a0 	.word	0x200000a0
 80025d4:	08002511 	.word	0x08002511
 80025d8:	08002521 	.word	0x08002521

080025dc <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f200 80c7 	bhi.w	800278a <ctlwizchip+0x1ae>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <ctlwizchip+0x28>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002645 	.word	0x08002645
 8002608:	0800264b 	.word	0x0800264b
 800260c:	08002677 	.word	0x08002677
 8002610:	0800266b 	.word	0x0800266b
 8002614:	08002685 	.word	0x08002685
 8002618:	08002691 	.word	0x08002691
 800261c:	0800269f 	.word	0x0800269f
 8002620:	080026c5 	.word	0x080026c5
 8002624:	080026eb 	.word	0x080026eb
 8002628:	0800272f 	.word	0x0800272f
 800262c:	08002735 	.word	0x08002735
 8002630:	0800273d 	.word	0x0800273d
 8002634:	08002791 	.word	0x08002791
 8002638:	08002745 	.word	0x08002745
 800263c:	08002753 	.word	0x08002753
 8002640:	0800276f 	.word	0x0800276f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002644:	f000 f8ea 	bl	800281c <wizchip_sw_reset>
         break;
 8002648:	e0a3      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3308      	adds	r3, #8
 8002658:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f927 	bl	80028b4 <wizchip_init>
 8002666:	4603      	mov	r3, r0
 8002668:	e094      	b.n	8002794 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f9ac 	bl	80029cc <wizchip_clrinterrupt>
         break;
 8002674:	e08d      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002676:	f000 f9dd 	bl	8002a34 <wizchip_getinterrupt>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	801a      	strh	r2, [r3, #0]
         break;
 8002682:	e086      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f9f8 	bl	8002a7e <wizchip_setinterruptmask>
         break;         
 800268e:	e080      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002690:	f000 fa10 	bl	8002ab4 <wizchip_getinterruptmask>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	801a      	strh	r2, [r3, #0]
         break;
 800269c:	e079      	b.n	8002792 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80026ae:	f7fe ffbf 	bl	8001630 <WIZCHIP_WRITE>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80026be:	f7fe ffb7 	bl	8001630 <WIZCHIP_WRITE>
         break;
 80026c2:	e066      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80026c4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80026c8:	f7fe ff66 	bl	8001598 <WIZCHIP_READ>
 80026cc:	4603      	mov	r3, r0
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	b29c      	uxth	r4, r3
 80026d4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80026d8:	f7fe ff5e 	bl	8001598 <WIZCHIP_READ>
 80026dc:	4603      	mov	r3, r0
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4423      	add	r3, r4
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	801a      	strh	r2, [r3, #0]
         break;
 80026e8:	e053      	b.n	8002792 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <ctlwizchip+0x1c0>)
 80026ec:	789a      	ldrb	r2, [r3, #2]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a29      	ldr	r2, [pc, #164]	; (800279c <ctlwizchip+0x1c0>)
 80026f8:	78d2      	ldrb	r2, [r2, #3]
 80026fa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3302      	adds	r3, #2
 8002700:	4a26      	ldr	r2, [pc, #152]	; (800279c <ctlwizchip+0x1c0>)
 8002702:	7912      	ldrb	r2, [r2, #4]
 8002704:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3303      	adds	r3, #3
 800270a:	4a24      	ldr	r2, [pc, #144]	; (800279c <ctlwizchip+0x1c0>)
 800270c:	7952      	ldrb	r2, [r2, #5]
 800270e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	3304      	adds	r3, #4
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <ctlwizchip+0x1c0>)
 8002716:	7992      	ldrb	r2, [r2, #6]
 8002718:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	3305      	adds	r3, #5
 800271e:	4a1f      	ldr	r2, [pc, #124]	; (800279c <ctlwizchip+0x1c0>)
 8002720:	79d2      	ldrb	r2, [r2, #7]
 8002722:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	3306      	adds	r3, #6
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
         break;
 800272c:	e031      	b.n	8002792 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800272e:	f000 fa13 	bl	8002b58 <wizphy_reset>
         break;
 8002732:	e02e      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002734:	6838      	ldr	r0, [r7, #0]
 8002736:	f000 fa36 	bl	8002ba6 <wizphy_setphyconf>
         break;
 800273a:	e02a      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800273c:	6838      	ldr	r0, [r7, #0]
 800273e:	f000 fa75 	bl	8002c2c <wizphy_getphyconf>
         break;
 8002742:	e026      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fad9 	bl	8002d00 <wizphy_setphypmode>
 800274e:	4603      	mov	r3, r0
 8002750:	e020      	b.n	8002794 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002752:	f000 f9e8 	bl	8002b26 <wizphy_getphypmode>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2bff      	cmp	r3, #255	; 0xff
 800275e:	d102      	bne.n	8002766 <ctlwizchip+0x18a>
 8002760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002764:	e016      	b.n	8002794 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7dfa      	ldrb	r2, [r7, #23]
 800276a:	701a      	strb	r2, [r3, #0]
         break;
 800276c:	e011      	b.n	8002792 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800276e:	f000 f9c4 	bl	8002afa <wizphy_getphylink>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2bff      	cmp	r3, #255	; 0xff
 800277a:	d102      	bne.n	8002782 <ctlwizchip+0x1a6>
 800277c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002780:	e008      	b.n	8002794 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7dfa      	ldrb	r2, [r7, #23]
 8002786:	701a      	strb	r2, [r3, #0]
         break;
 8002788:	e003      	b.n	8002792 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278e:	e001      	b.n	8002794 <ctlwizchip+0x1b8>
         break;
 8002790:	bf00      	nop
   }
   return 0;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	200000a0 	.word	0x200000a0

080027a0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d82c      	bhi.n	800280c <ctlnetwork+0x6c>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <ctlnetwork+0x18>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027d1 	.word	0x080027d1
 80027bc:	080027d9 	.word	0x080027d9
 80027c0:	080027e1 	.word	0x080027e1
 80027c4:	080027ef 	.word	0x080027ef
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	08002805 	.word	0x08002805
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80027d0:	6838      	ldr	r0, [r7, #0]
 80027d2:	f000 fadf 	bl	8002d94 <wizchip_setnetinfo>
         break;
 80027d6:	e01c      	b.n	8002812 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80027d8:	6838      	ldr	r0, [r7, #0]
 80027da:	f000 fb1b 	bl	8002e14 <wizchip_getnetinfo>
         break;
 80027de:	e018      	b.n	8002812 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fb55 	bl	8002e94 <wizchip_setnetmode>
 80027ea:	4603      	mov	r3, r0
 80027ec:	e012      	b.n	8002814 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80027ee:	f000 fb73 	bl	8002ed8 <wizchip_getnetmode>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	701a      	strb	r2, [r3, #0]
         break;
 80027fa:	e00a      	b.n	8002812 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	f000 fb73 	bl	8002ee8 <wizchip_settimeout>
         break;
 8002802:	e006      	b.n	8002812 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8002804:	6838      	ldr	r0, [r7, #0]
 8002806:	f000 fb90 	bl	8002f2a <wizchip_gettimeout>
         break;
 800280a:	e002      	b.n	8002812 <ctlnetwork+0x72>
      default:
         return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002810:	e000      	b.n	8002814 <ctlnetwork+0x74>
   }
   return 0;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2206      	movs	r2, #6
 8002826:	4619      	mov	r1, r3
 8002828:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800282c:	f7fe ff4e 	bl	80016cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2204      	movs	r2, #4
 8002836:	4619      	mov	r1, r3
 8002838:	f44f 7080 	mov.w	r0, #256	; 0x100
 800283c:	f7fe ff46 	bl	80016cc <WIZCHIP_READ_BUF>
 8002840:	f107 0310 	add.w	r3, r7, #16
 8002844:	2204      	movs	r2, #4
 8002846:	4619      	mov	r1, r3
 8002848:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800284c:	f7fe ff3e 	bl	80016cc <WIZCHIP_READ_BUF>
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	2204      	movs	r2, #4
 8002856:	4619      	mov	r1, r3
 8002858:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800285c:	f7fe ff36 	bl	80016cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	2000      	movs	r0, #0
 8002864:	f7fe fee4 	bl	8001630 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe fe95 	bl	8001598 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2206      	movs	r2, #6
 8002872:	4619      	mov	r1, r3
 8002874:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002878:	f7fe ff88 	bl	800178c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	2204      	movs	r2, #4
 8002882:	4619      	mov	r1, r3
 8002884:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002888:	f7fe ff80 	bl	800178c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	2204      	movs	r2, #4
 8002892:	4619      	mov	r1, r3
 8002894:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002898:	f7fe ff78 	bl	800178c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2204      	movs	r2, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80028a8:	f7fe ff70 	bl	800178c <WIZCHIP_WRITE_BUF>
}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80028c2:	f7ff ffab 	bl	800281c <wizchip_sw_reset>
   if(txsize)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03b      	beq.n	8002944 <wizchip_init+0x90>
   {
      tmp = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	e015      	b.n	8002902 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	4413      	add	r3, r2
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80028e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	dd02      	ble.n	80028f6 <wizchip_init+0x42>
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f4:	e066      	b.n	80029c4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	2b07      	cmp	r3, #7
 8002908:	dde5      	ble.n	80028d6 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	e015      	b.n	800293c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3301      	adds	r3, #1
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800291e:	4618      	mov	r0, r3
 8002920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe fe80 	bl	8001630 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	73fb      	strb	r3, [r7, #15]
 800293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002940:	2b07      	cmp	r3, #7
 8002942:	dde5      	ble.n	8002910 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d03b      	beq.n	80029c2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e015      	b.n	8002980 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4413      	add	r3, r2
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	7bbb      	ldrb	r3, [r7, #14]
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800296a:	2b10      	cmp	r3, #16
 800296c:	dd02      	ble.n	8002974 <wizchip_init+0xc0>
 800296e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002972:	e027      	b.n	80029c4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3301      	adds	r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002984:	2b07      	cmp	r3, #7
 8002986:	dde5      	ble.n	8002954 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e015      	b.n	80029ba <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	3301      	adds	r3, #1
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800299c:	4618      	mov	r0, r3
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fe fe41 	bl	8001630 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	2b07      	cmp	r3, #7
 80029c0:	dde5      	ble.n	800298e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	b29b      	uxth	r3, r3
 80029e0:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	f023 030f 	bic.w	r3, r3, #15
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80029f0:	f7fe fe1e 	bl	8001630 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e014      	b.n	8002a24 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80029fa:	7bba      	ldrb	r2, [r7, #14]
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	fa42 f303 	asr.w	r3, r2, r3
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <wizchip_clrinterrupt+0x52>
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	3301      	adds	r3, #1
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a16:	211f      	movs	r1, #31
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fe09 	bl	8001630 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b07      	cmp	r3, #7
 8002a28:	d9e7      	bls.n	80029fa <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002a46:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002a4a:	f7fe fda5 	bl	8001598 <WIZCHIP_READ>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f023 030f 	bic.w	r3, r3, #15
 8002a54:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002a56:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002a5a:	f7fe fd9d 	bl	8001598 <WIZCHIP_READ>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002a62:	79bb      	ldrb	r3, [r7, #6]
 8002a64:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002a74:	88bb      	ldrh	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	4619      	mov	r1, r3
 8002a98:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002a9c:	f7fe fdc8 	bl	8001630 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002aa8:	f7fe fdc2 	bl	8001630 <WIZCHIP_WRITE>
#endif   
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002ac6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002aca:	f7fe fd65 	bl	8001598 <WIZCHIP_READ>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002ad2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002ad6:	f7fe fd5f 	bl	8001598 <WIZCHIP_READ>
 8002ada:	4603      	mov	r3, r0
 8002adc:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002ade:	79bb      	ldrb	r3, [r7, #6]
 8002ae0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002ae2:	88bb      	ldrh	r3, [r7, #4]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002af0:	88bb      	ldrh	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002b00:	2300      	movs	r3, #0
 8002b02:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002b04:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b08:	f7fe fd46 	bl	8001598 <WIZCHIP_READ>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002b16:	2301      	movs	r3, #1
 8002b18:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002b30:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b34:	f7fe fd30 	bl	8001598 <WIZCHIP_READ>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b3e:	2b30      	cmp	r3, #48	; 0x30
 8002b40:	d102      	bne.n	8002b48 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002b42:	2301      	movs	r3, #1
 8002b44:	71fb      	strb	r3, [r7, #7]
 8002b46:	e001      	b.n	8002b4c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002b5e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b62:	f7fe fd19 	bl	8001598 <WIZCHIP_READ>
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b70:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b7a:	f7fe fd59 	bl	8001630 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002b7e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b82:	f7fe fd09 	bl	8001598 <WIZCHIP_READ>
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b90:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b9a:	f7fe fd49 	bl	8001630 <WIZCHIP_WRITE>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d104      	bne.n	8002bc4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e003      	b.n	8002bcc <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bca:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d104      	bne.n	8002bde <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e019      	b.n	8002c12 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	78db      	ldrb	r3, [r3, #3]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10d      	bne.n	8002c02 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	789b      	ldrb	r3, [r3, #2]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d104      	bne.n	8002bf8 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	f043 0318 	orr.w	r3, r3, #24
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e00c      	b.n	8002c12 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e007      	b.n	8002c12 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	789b      	ldrb	r3, [r3, #2]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d103      	bne.n	8002c12 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	f043 0310 	orr.w	r3, r3, #16
 8002c10:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c1a:	f7fe fd09 	bl	8001630 <WIZCHIP_WRITE>
   wizphy_reset();
 8002c1e:	f7ff ff9b 	bl	8002b58 <wizphy_reset>
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002c38:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c3c:	f7fe fcac 	bl	8001598 <WIZCHIP_READ>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	119b      	asrs	r3, r3, #6
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d001      	beq.n	8002c62 <wizphy_getphyconf+0x36>
 8002c5e:	2b38      	cmp	r3, #56	; 0x38
 8002c60:	d103      	bne.n	8002c6a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	705a      	strb	r2, [r3, #1]
         break;
 8002c68:	e003      	b.n	8002c72 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	705a      	strb	r2, [r3, #1]
         break;
 8002c70:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c78:	3b10      	subs	r3, #16
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	bf8c      	ite	hi
 8002c7e:	2201      	movhi	r2, #1
 8002c80:	2200      	movls	r2, #0
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	2a00      	cmp	r2, #0
 8002c86:	d10f      	bne.n	8002ca8 <wizphy_getphyconf+0x7c>
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <wizphy_getphyconf+0xcc>)
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	709a      	strb	r2, [r3, #2]
         break;
 8002ca6:	e003      	b.n	8002cb0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	709a      	strb	r2, [r3, #2]
         break;
 8002cae:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb6:	3b08      	subs	r3, #8
 8002cb8:	2b18      	cmp	r3, #24
 8002cba:	bf8c      	ite	hi
 8002cbc:	2201      	movhi	r2, #1
 8002cbe:	2200      	movls	r2, #0
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d10f      	bne.n	8002ce6 <wizphy_getphyconf+0xba>
 8002cc6:	4a0d      	ldr	r2, [pc, #52]	; (8002cfc <wizphy_getphyconf+0xd0>)
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	70da      	strb	r2, [r3, #3]
         break;
 8002ce4:	e003      	b.n	8002cee <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	70da      	strb	r2, [r3, #3]
         break;
 8002cec:	bf00      	nop
   }
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	00010101 	.word	0x00010101
 8002cfc:	01010001 	.word	0x01010001

08002d00 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002d0e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d12:	f7fe fc41 	bl	8001598 <WIZCHIP_READ>
 8002d16:	4603      	mov	r3, r0
 8002d18:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <wizphy_setphypmode+0x2a>
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d28:	e030      	b.n	8002d8c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002d30:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d104      	bne.n	8002d42 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
 8002d3a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e003      	b.n	8002d4a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002d48:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d52:	f7fe fc6d 	bl	8001630 <WIZCHIP_WRITE>
   wizphy_reset();
 8002d56:	f7ff feff 	bl	8002b58 <wizphy_reset>
   tmp = getPHYCFGR();
 8002d5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d5e:	f7fe fc1b 	bl	8001598 <WIZCHIP_READ>
 8002d62:	4603      	mov	r3, r0
 8002d64:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d106      	bne.n	8002d7a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <wizphy_setphypmode+0x88>
 8002d76:	2300      	movs	r3, #0
 8002d78:	e008      	b.n	8002d8c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <wizphy_setphypmode+0x88>
 8002d84:	2300      	movs	r3, #0
 8002d86:	e001      	b.n	8002d8c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2206      	movs	r2, #6
 8002da0:	4619      	mov	r1, r3
 8002da2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002da6:	f7fe fcf1 	bl	800178c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	330e      	adds	r3, #14
 8002dae:	2204      	movs	r2, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002db6:	f7fe fce9 	bl	800178c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	330a      	adds	r3, #10
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002dc6:	f7fe fce1 	bl	800178c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3306      	adds	r3, #6
 8002dce:	2204      	movs	r2, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002dd6:	f7fe fcd9 	bl	800178c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7c9a      	ldrb	r2, [r3, #18]
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <wizchip_setnetinfo+0x78>)
 8002de0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	7cda      	ldrb	r2, [r3, #19]
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <wizchip_setnetinfo+0x78>)
 8002de8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7d1a      	ldrb	r2, [r3, #20]
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <wizchip_setnetinfo+0x78>)
 8002df0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7d5a      	ldrb	r2, [r3, #21]
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <wizchip_setnetinfo+0x78>)
 8002df8:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7d9a      	ldrb	r2, [r3, #22]
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <wizchip_setnetinfo+0x7c>)
 8002e00:	701a      	strb	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200003a0 	.word	0x200003a0
 8002e10:	200003a4 	.word	0x200003a4

08002e14 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2206      	movs	r2, #6
 8002e20:	4619      	mov	r1, r3
 8002e22:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002e26:	f7fe fc51 	bl	80016cc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	330e      	adds	r3, #14
 8002e2e:	2204      	movs	r2, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e36:	f7fe fc49 	bl	80016cc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	330a      	adds	r3, #10
 8002e3e:	2204      	movs	r2, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002e46:	f7fe fc41 	bl	80016cc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3306      	adds	r3, #6
 8002e4e:	2204      	movs	r2, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002e56:	f7fe fc39 	bl	80016cc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <wizchip_getnetinfo+0x78>)
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <wizchip_getnetinfo+0x78>)
 8002e64:	785a      	ldrb	r2, [r3, #1]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <wizchip_getnetinfo+0x78>)
 8002e6c:	789a      	ldrb	r2, [r3, #2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <wizchip_getnetinfo+0x78>)
 8002e74:	78da      	ldrb	r2, [r3, #3]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <wizchip_getnetinfo+0x7c>)
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	759a      	strb	r2, [r3, #22]
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200003a0 	.word	0x200003a0
 8002e90:	200003a4 	.word	0x200003a4

08002e94 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <wizchip_setnetmode+0x1e>
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eb0:	e00e      	b.n	8002ed0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fe fb70 	bl	8001598 <WIZCHIP_READ>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fe fbb1 	bl	8001630 <WIZCHIP_WRITE>
   return 0;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fe fb5b 	bl	8001598 <WIZCHIP_READ>
 8002ee2:	4603      	mov	r3, r0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002efa:	f7fe fb99 	bl	8001630 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	885b      	ldrh	r3, [r3, #2]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002f0e:	f7fe fb8f 	bl	8001630 <WIZCHIP_WRITE>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	885b      	ldrh	r3, [r3, #2]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002f1e:	f7fe fb87 	bl	8001630 <WIZCHIP_WRITE>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002f2a:	b590      	push	{r4, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002f32:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002f36:	f7fe fb2f 	bl	8001598 <WIZCHIP_READ>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002f42:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002f46:	f7fe fb27 	bl	8001598 <WIZCHIP_READ>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	b29c      	uxth	r4, r3
 8002f52:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002f56:	f7fe fb1f 	bl	8001598 <WIZCHIP_READ>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4423      	add	r3, r4
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	805a      	strh	r2, [r3, #2]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
	...

08002f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f74:	f7fe fafe 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f7a:	490d      	ldr	r1, [pc, #52]	; (8002fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f7c:	4a0d      	ldr	r2, [pc, #52]	; (8002fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f80:	e002      	b.n	8002f88 <LoopCopyDataInit>

08002f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f86:	3304      	adds	r3, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f8c:	d3f9      	bcc.n	8002f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f90:	4c0a      	ldr	r4, [pc, #40]	; (8002fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f94:	e001      	b.n	8002f9a <LoopFillZerobss>

08002f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f98:	3204      	adds	r2, #4

08002f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f9c:	d3fb      	bcc.n	8002f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f9e:	f007 f8d9 	bl	800a154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fa2:	f7fd fb63 	bl	800066c <main>
  bx  lr    
 8002fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb0:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8002fb4:	0800b4bc 	.word	0x0800b4bc
  ldr r2, =_sbss
 8002fb8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8002fbc:	2001491c 	.word	0x2001491c

08002fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc0:	e7fe      	b.n	8002fc0 <ADC_IRQHandler>
	...

08002fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_Init+0x40>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <HAL_Init+0x40>)
 8002fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_Init+0x40>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_Init+0x40>)
 8002fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <HAL_Init+0x40>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f000 f8fc 	bl	80031ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fe f9d0 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff8:	f7fe f916 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40023c00 	.word	0x40023c00

08003008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_IncTick+0x20>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_IncTick+0x24>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4413      	add	r3, r2
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_IncTick+0x24>)
 800301a:	6013      	str	r3, [r2, #0]
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	200000d0 	.word	0x200000d0
 800302c:	200003a8 	.word	0x200003a8

08003030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return uwTick;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_GetTick+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	200003a8 	.word	0x200003a8

08003048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff ffee 	bl	8003030 <HAL_GetTick>
 8003054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003060:	d005      	beq.n	800306e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_Delay+0x44>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800306e:	bf00      	nop
 8003070:	f7ff ffde 	bl	8003030 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d8f7      	bhi.n	8003070 <HAL_Delay+0x28>
  {
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200000d0 	.word	0x200000d0

08003090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c2:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <__NVIC_GetPriorityGrouping+0x18>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 0307 	and.w	r3, r3, #7
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	db0b      	blt.n	800311e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4907      	ldr	r1, [pc, #28]	; (800312c <__NVIC_EnableIRQ+0x38>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2001      	movs	r0, #1
 8003116:	fa00 f202 	lsl.w	r2, r0, r2
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e100 	.word	0xe000e100

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db0a      	blt.n	800315a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	490c      	ldr	r1, [pc, #48]	; (800317c <__NVIC_SetPriority+0x4c>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	440b      	add	r3, r1
 8003154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003158:	e00a      	b.n	8003170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4908      	ldr	r1, [pc, #32]	; (8003180 <__NVIC_SetPriority+0x50>)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3b04      	subs	r3, #4
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	440b      	add	r3, r1
 800316e:	761a      	strb	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000e100 	.word	0xe000e100
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	bf28      	it	cs
 80031a2:	2304      	movcs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <NVIC_EncodePriority+0x30>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3b03      	subs	r3, #3
 80031b2:	e000      	b.n	80031b6 <NVIC_EncodePriority+0x32>
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	401a      	ands	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43d9      	mvns	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4313      	orrs	r3, r2
         );
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	; 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ff4c 	bl	8003090 <__NVIC_SetPriorityGrouping>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003212:	f7ff ff61 	bl	80030d8 <__NVIC_GetPriorityGrouping>
 8003216:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	6978      	ldr	r0, [r7, #20]
 800321e:	f7ff ffb1 	bl	8003184 <NVIC_EncodePriority>
 8003222:	4602      	mov	r2, r0
 8003224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff80 	bl	8003130 <__NVIC_SetPriority>
}
 8003230:	bf00      	nop
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff ff54 	bl	80030f4 <__NVIC_EnableIRQ>
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e165      	b.n	800353c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	f040 8154 	bne.w	8003536 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d130      	bne.n	8003308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0201 	and.w	r2, r3, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d017      	beq.n	8003344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d123      	bne.n	8003398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80ae 	beq.w	8003536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_GPIO_Init+0x300>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a5c      	ldr	r2, [pc, #368]	; (8003554 <HAL_GPIO_Init+0x300>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <HAL_GPIO_Init+0x300>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f6:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_GPIO_Init+0x304>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4f      	ldr	r2, [pc, #316]	; (800355c <HAL_GPIO_Init+0x308>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d025      	beq.n	800346e <HAL_GPIO_Init+0x21a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_GPIO_Init+0x30c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <HAL_GPIO_Init+0x216>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_GPIO_Init+0x310>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d019      	beq.n	8003466 <HAL_GPIO_Init+0x212>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4c      	ldr	r2, [pc, #304]	; (8003568 <HAL_GPIO_Init+0x314>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_GPIO_Init+0x20e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4b      	ldr	r2, [pc, #300]	; (800356c <HAL_GPIO_Init+0x318>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00d      	beq.n	800345e <HAL_GPIO_Init+0x20a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4a      	ldr	r2, [pc, #296]	; (8003570 <HAL_GPIO_Init+0x31c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d007      	beq.n	800345a <HAL_GPIO_Init+0x206>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_GPIO_Init+0x320>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_GPIO_Init+0x202>
 8003452:	2306      	movs	r3, #6
 8003454:	e00c      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 8003456:	2307      	movs	r3, #7
 8003458:	e00a      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800345a:	2305      	movs	r3, #5
 800345c:	e008      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800345e:	2304      	movs	r3, #4
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 8003462:	2303      	movs	r3, #3
 8003464:	e004      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_Init+0x21c>
 800346e:	2300      	movs	r3, #0
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	f002 0203 	and.w	r2, r2, #3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4093      	lsls	r3, r2
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003480:	4935      	ldr	r1, [pc, #212]	; (8003558 <HAL_GPIO_Init+0x304>)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_GPIO_Init+0x324>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b2:	4a31      	ldr	r2, [pc, #196]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_GPIO_Init+0x324>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003506:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <HAL_GPIO_Init+0x324>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_GPIO_Init+0x324>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_GPIO_Init+0x324>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	f67f ae96 	bls.w	8003270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	40013800 	.word	0x40013800
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400
 8003564:	40020800 	.word	0x40020800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40021400 	.word	0x40021400
 8003574:	40021800 	.word	0x40021800
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
 8003588:	4613      	mov	r3, r2
 800358a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003598:	e003      	b.n	80035a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800359a:	887b      	ldrh	r3, [r7, #2]
 800359c:	041a      	lsls	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035c0:	887a      	ldrh	r2, [r7, #2]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4013      	ands	r3, r2
 80035c6:	041a      	lsls	r2, r3, #16
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	400b      	ands	r3, r1
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	619a      	str	r2, [r3, #24]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_PWREx_EnableOverDrive+0x90>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <HAL_PWREx_EnableOverDrive+0x90>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_PWREx_EnableOverDrive+0x90>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800360a:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_PWREx_EnableOverDrive+0x94>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003610:	f7ff fd0e 	bl	8003030 <HAL_GetTick>
 8003614:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003616:	e009      	b.n	800362c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003618:	f7ff fd0a 	bl	8003030 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003626:	d901      	bls.n	800362c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e01f      	b.n	800366c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_PWREx_EnableOverDrive+0x98>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d1ee      	bne.n	8003618 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <HAL_PWREx_EnableOverDrive+0x9c>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003640:	f7ff fcf6 	bl	8003030 <HAL_GetTick>
 8003644:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003646:	e009      	b.n	800365c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003648:	f7ff fcf2 	bl	8003030 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003656:	d901      	bls.n	800365c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e007      	b.n	800366c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_PWREx_EnableOverDrive+0x98>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003668:	d1ee      	bne.n	8003648 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	420e0040 	.word	0x420e0040
 800367c:	40007000 	.word	0x40007000
 8003680:	420e0044 	.word	0x420e0044

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d90c      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d044      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e067      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7ff fc5c 	bl	8003030 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7ff fc58 	bl	8003030 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e04f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d20c      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f887 	bl	800391c <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fdb4 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	0800b44c 	.word	0x0800b44c
 8003848:	20000098 	.word	0x20000098
 800384c:	200000cc 	.word	0x200000cc

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000098 	.word	0x20000098

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	0800b45c 	.word	0x0800b45c

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	0800b45c 	.word	0x0800b45c

080038b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	220f      	movs	r2, #15
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCC_GetClockConfig+0x60>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	40023c00 	.word	0x40023c00

0800391c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800391c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003920:	b0ae      	sub	sp, #184	; 0xb8
 8003922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003942:	4bcb      	ldr	r3, [pc, #812]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b0c      	cmp	r3, #12
 800394c:	f200 8206 	bhi.w	8003d5c <HAL_RCC_GetSysClockFreq+0x440>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800398d 	.word	0x0800398d
 800395c:	08003d5d 	.word	0x08003d5d
 8003960:	08003d5d 	.word	0x08003d5d
 8003964:	08003d5d 	.word	0x08003d5d
 8003968:	08003995 	.word	0x08003995
 800396c:	08003d5d 	.word	0x08003d5d
 8003970:	08003d5d 	.word	0x08003d5d
 8003974:	08003d5d 	.word	0x08003d5d
 8003978:	0800399d 	.word	0x0800399d
 800397c:	08003d5d 	.word	0x08003d5d
 8003980:	08003d5d 	.word	0x08003d5d
 8003984:	08003d5d 	.word	0x08003d5d
 8003988:	08003b8d 	.word	0x08003b8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4bb9      	ldr	r3, [pc, #740]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x358>)
 800398e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003992:	e1e7      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003994:	4bb8      	ldr	r3, [pc, #736]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800399a:	e1e3      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4bb4      	ldr	r3, [pc, #720]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a8:	4bb1      	ldr	r3, [pc, #708]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d071      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b4:	4bae      	ldr	r3, [pc, #696]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f04f 0000 	mov.w	r0, #0
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	0159      	lsls	r1, r3, #5
 80039e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ec:	0150      	lsls	r0, r2, #5
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4621      	mov	r1, r4
 80039f4:	1a51      	subs	r1, r2, r1
 80039f6:	6439      	str	r1, [r7, #64]	; 0x40
 80039f8:	4629      	mov	r1, r5
 80039fa:	eb63 0301 	sbc.w	r3, r3, r1
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a0c:	4649      	mov	r1, r9
 8003a0e:	018b      	lsls	r3, r1, #6
 8003a10:	4641      	mov	r1, r8
 8003a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a16:	4641      	mov	r1, r8
 8003a18:	018a      	lsls	r2, r1, #6
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	1a51      	subs	r1, r2, r1
 8003a1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a20:	4649      	mov	r1, r9
 8003a22:	eb63 0301 	sbc.w	r3, r3, r1
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a34:	4649      	mov	r1, r9
 8003a36:	00cb      	lsls	r3, r1, #3
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3e:	4641      	mov	r1, r8
 8003a40:	00ca      	lsls	r2, r1, #3
 8003a42:	4610      	mov	r0, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	4622      	mov	r2, r4
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4e:	462b      	mov	r3, r5
 8003a50:	460a      	mov	r2, r1
 8003a52:	eb42 0303 	adc.w	r3, r2, r3
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a64:	4629      	mov	r1, r5
 8003a66:	024b      	lsls	r3, r1, #9
 8003a68:	4621      	mov	r1, r4
 8003a6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a6e:	4621      	mov	r1, r4
 8003a70:	024a      	lsls	r2, r1, #9
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a88:	f7fc fc72 	bl	8000370 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a96:	e067      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a98:	4b75      	ldr	r3, [pc, #468]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ab6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003aec:	4649      	mov	r1, r9
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4641      	mov	r1, r8
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4641      	mov	r1, r8
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4641      	mov	r1, r8
 8003afc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b00:	4649      	mov	r1, r9
 8003b02:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b1a:	4692      	mov	sl, r2
 8003b1c:	469b      	mov	fp, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb1a 0303 	adds.w	r3, sl, r3
 8003b24:	623b      	str	r3, [r7, #32]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb4b 0303 	adc.w	r3, fp, r3
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	028b      	lsls	r3, r1, #10
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b44:	4621      	mov	r1, r4
 8003b46:	028a      	lsls	r2, r1, #10
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b50:	2200      	movs	r2, #0
 8003b52:	673b      	str	r3, [r7, #112]	; 0x70
 8003b54:	677a      	str	r2, [r7, #116]	; 0x74
 8003b56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b5a:	f7fc fc09 	bl	8000370 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4613      	mov	r3, r2
 8003b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b68:	4b41      	ldr	r3, [pc, #260]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b8a:	e0eb      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b8c:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b98:	4b35      	ldr	r3, [pc, #212]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d06b      	beq.n	8003c7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	099b      	lsrs	r3, r3, #6
 8003baa:	2200      	movs	r2, #0
 8003bac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb8:	2300      	movs	r3, #0
 8003bba:	667b      	str	r3, [r7, #100]	; 0x64
 8003bbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	f04f 0000 	mov.w	r0, #0
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	0159      	lsls	r1, r3, #5
 8003bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd2:	0150      	lsls	r0, r2, #5
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4621      	mov	r1, r4
 8003bda:	1a51      	subs	r1, r2, r1
 8003bdc:	61b9      	str	r1, [r7, #24]
 8003bde:	4629      	mov	r1, r5
 8003be0:	eb63 0301 	sbc.w	r3, r3, r1
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bf2:	4659      	mov	r1, fp
 8003bf4:	018b      	lsls	r3, r1, #6
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	018a      	lsls	r2, r1, #6
 8003c00:	4651      	mov	r1, sl
 8003c02:	ebb2 0801 	subs.w	r8, r2, r1
 8003c06:	4659      	mov	r1, fp
 8003c08:	eb63 0901 	sbc.w	r9, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c20:	4690      	mov	r8, r2
 8003c22:	4699      	mov	r9, r3
 8003c24:	4623      	mov	r3, r4
 8003c26:	eb18 0303 	adds.w	r3, r8, r3
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	eb49 0303 	adc.w	r3, r9, r3
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c40:	4629      	mov	r1, r5
 8003c42:	024b      	lsls	r3, r1, #9
 8003c44:	4621      	mov	r1, r4
 8003c46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	024a      	lsls	r2, r1, #9
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c56:	2200      	movs	r2, #0
 8003c58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c60:	f7fc fb86 	bl	8000370 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c6e:	e065      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x420>
 8003c70:	40023800 	.word	0x40023800
 8003c74:	00f42400 	.word	0x00f42400
 8003c78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	2200      	movs	r2, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	4611      	mov	r1, r2
 8003c88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8e:	2300      	movs	r3, #0
 8003c90:	657b      	str	r3, [r7, #84]	; 0x54
 8003c92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c96:	4642      	mov	r2, r8
 8003c98:	464b      	mov	r3, r9
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	0159      	lsls	r1, r3, #5
 8003ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca8:	0150      	lsls	r0, r2, #5
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4641      	mov	r1, r8
 8003cb0:	1a51      	subs	r1, r2, r1
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cc8:	4659      	mov	r1, fp
 8003cca:	018b      	lsls	r3, r1, #6
 8003ccc:	4651      	mov	r1, sl
 8003cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	018a      	lsls	r2, r1, #6
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	1a54      	subs	r4, r2, r1
 8003cda:	4659      	mov	r1, fp
 8003cdc:	eb63 0501 	sbc.w	r5, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	00eb      	lsls	r3, r5, #3
 8003cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cee:	00e2      	lsls	r2, r4, #3
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	18e3      	adds	r3, r4, r3
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb45 0303 	adc.w	r3, r5, r3
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	028b      	lsls	r3, r1, #10
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d18:	4621      	mov	r1, r4
 8003d1a:	028a      	lsls	r2, r1, #10
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d24:	2200      	movs	r2, #0
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d28:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d2e:	f7fc fb1f 	bl	8000370 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4613      	mov	r3, r2
 8003d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0f1b      	lsrs	r3, r3, #28
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5a:	e003      	b.n	8003d64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	37b8      	adds	r7, #184	; 0xb8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400

08003d7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e28d      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8083 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d9c:	4b94      	ldr	r3, [pc, #592]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 030c 	and.w	r3, r3, #12
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d019      	beq.n	8003ddc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003da8:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db4:	4b8e      	ldr	r3, [pc, #568]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc0:	d00c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d112      	bne.n	8003df4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	4b84      	ldr	r3, [pc, #528]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05b      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x124>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d157      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e25a      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x90>
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7b      	ldr	r2, [pc, #492]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e01d      	b.n	8003e48 <HAL_RCC_OscConfig+0xcc>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0xb4>
 8003e16:	4b76      	ldr	r3, [pc, #472]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a75      	ldr	r2, [pc, #468]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b73      	ldr	r3, [pc, #460]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a72      	ldr	r2, [pc, #456]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0xcc>
 8003e30:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6e      	ldr	r2, [pc, #440]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6b      	ldr	r2, [pc, #428]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d013      	beq.n	8003e78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7ff f8ee 	bl	8003030 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e58:	f7ff f8ea 	bl	8003030 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e21f      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b61      	ldr	r3, [pc, #388]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0xdc>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7ff f8da 	bl	8003030 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7ff f8d6 	bl	8003030 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e20b      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x104>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06f      	beq.n	8003f8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eae:	4b50      	ldr	r3, [pc, #320]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eba:	4b4d      	ldr	r3, [pc, #308]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b47      	ldr	r3, [pc, #284]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b44      	ldr	r3, [pc, #272]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b41      	ldr	r3, [pc, #260]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x186>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1d3      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4937      	ldr	r1, [pc, #220]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_OscConfig+0x278>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7ff f883 	bl	8003030 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7ff f87f 	bl	8003030 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1b4      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4925      	ldr	r1, [pc, #148]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_OscConfig+0x278>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7ff f862 	bl	8003030 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7ff f85e 	bl	8003030 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e193      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d036      	beq.n	8004008 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_RCC_OscConfig+0x27c>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7ff f842 	bl	8003030 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7ff f83e 	bl	8003030 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e173      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x234>
 8003fce:	e01b      	b.n	8004008 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7ff f82b 	bl	8003030 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e00e      	b.n	8003ffc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fde:	f7ff f827 	bl	8003030 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d907      	bls.n	8003ffc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e15c      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	42470000 	.word	0x42470000
 8003ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	4b8a      	ldr	r3, [pc, #552]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ea      	bne.n	8003fde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8097 	beq.w	8004144 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b83      	ldr	r3, [pc, #524]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	4b7f      	ldr	r3, [pc, #508]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4a7e      	ldr	r2, [pc, #504]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	; 0x40
 8004036:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b79      	ldr	r3, [pc, #484]	; (800422c <HAL_RCC_OscConfig+0x4b0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x4b0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a75      	ldr	r2, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x4b0>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fe ffe7 	bl	8003030 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fe ffe3 	bl	8003030 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e118      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b6c      	ldr	r3, [pc, #432]	; (800422c <HAL_RCC_OscConfig+0x4b0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x31e>
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	; 0x70
 8004098:	e01c      	b.n	80040d4 <HAL_RCC_OscConfig+0x358>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x340>
 80040a2:	4b61      	ldr	r3, [pc, #388]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a60      	ldr	r2, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
 80040ae:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a5d      	ldr	r2, [pc, #372]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0x358>
 80040bc:	4b5a      	ldr	r3, [pc, #360]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a59      	ldr	r2, [pc, #356]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	4b57      	ldr	r3, [pc, #348]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a56      	ldr	r2, [pc, #344]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	f023 0304 	bic.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fe ffa8 	bl	8003030 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fe ffa4 	bl	8003030 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e0d7      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	4b4b      	ldr	r3, [pc, #300]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ee      	beq.n	80040e4 <HAL_RCC_OscConfig+0x368>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fe ff92 	bl	8003030 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fe ff8e 	bl	8003030 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0c1      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004126:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ee      	bne.n	8004110 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004142:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80ad 	beq.w	80042a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d060      	beq.n	800421c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d145      	bne.n	80041ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_RCC_OscConfig+0x4b4>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe ff62 	bl	8003030 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe ff5e 	bl	8003030 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e093      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	491b      	ldr	r1, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c0:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x4b4>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fe ff33 	bl	8003030 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ce:	f7fe ff2f 	bl	8003030 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e064      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x452>
 80041ec:	e05c      	b.n	80042a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCC_OscConfig+0x4b4>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe ff1c 	bl	8003030 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe ff18 	bl	8003030 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04d      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x480>
 800421a:	e045      	b.n	80042a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d107      	bne.n	8004234 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e040      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000
 8004230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004234:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x538>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d030      	beq.n	80042a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d129      	bne.n	80042a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d122      	bne.n	80042a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426c:	4293      	cmp	r3, r2
 800426e:	d119      	bne.n	80042a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	3b01      	subs	r3, #1
 800427e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d10f      	bne.n	80042a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800

080042b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07b      	b.n	80043c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d108      	bne.n	80042e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042da:	d009      	beq.n	80042f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
 80042e2:	e005      	b.n	80042f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc ffb4 	bl	8001278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004374:	ea42 0103 	orr.w	r1, r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0104 	and.w	r1, r3, #4
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0210 	and.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b08c      	sub	sp, #48	; 0x30
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043d8:	2301      	movs	r3, #1
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x26>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e198      	b.n	8004722 <HAL_SPI_TransmitReceive+0x358>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f8:	f7fe fe1a 	bl	8003030 <HAL_GetTick>
 80043fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004416:	2b01      	cmp	r3, #1
 8004418:	d00f      	beq.n	800443a <HAL_SPI_TransmitReceive+0x70>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004420:	d107      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <HAL_SPI_TransmitReceive+0x68>
 800442a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800442e:	2b04      	cmp	r3, #4
 8004430:	d003      	beq.n	800443a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004432:	2302      	movs	r3, #2
 8004434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004438:	e16d      	b.n	8004716 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_SPI_TransmitReceive+0x82>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_SPI_TransmitReceive+0x82>
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004452:	e160      	b.n	8004716 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b04      	cmp	r3, #4
 800445e:	d003      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2205      	movs	r2, #5
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	887a      	ldrh	r2, [r7, #2]
 800447e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	887a      	ldrh	r2, [r7, #2]
 800448a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d007      	beq.n	80044bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c4:	d17c      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_SPI_TransmitReceive+0x10a>
 80044ce:	8b7b      	ldrh	r3, [r7, #26]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d16a      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044f8:	e057      	b.n	80045aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b02      	cmp	r3, #2
 8004506:	d11b      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x176>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x176>
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d113      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d119      	bne.n	8004582 <HAL_SPI_TransmitReceive+0x1b8>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d014      	beq.n	8004582 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	b292      	uxth	r2, r2
 8004564:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800457e:	2301      	movs	r3, #1
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004582:	f7fe fd55 	bl	8003030 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800458e:	429a      	cmp	r2, r3
 8004590:	d80b      	bhi.n	80045aa <HAL_SPI_TransmitReceive+0x1e0>
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004598:	d007      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80045a8:	e0b5      	b.n	8004716 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1a2      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x130>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d19d      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x130>
 80045be:	e080      	b.n	80046c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x204>
 80045c8:	8b7b      	ldrh	r3, [r7, #26]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d16f      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f4:	e05b      	b.n	80046ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	d11c      	bne.n	800463e <HAL_SPI_TransmitReceive+0x274>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d017      	beq.n	800463e <HAL_SPI_TransmitReceive+0x274>
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d114      	bne.n	800463e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d119      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x2b6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d014      	beq.n	8004680 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800467c:	2301      	movs	r3, #1
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004680:	f7fe fcd6 	bl	8003030 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800468c:	429a      	cmp	r2, r3
 800468e:	d803      	bhi.n	8004698 <HAL_SPI_TransmitReceive+0x2ce>
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004696:	d102      	bne.n	800469e <HAL_SPI_TransmitReceive+0x2d4>
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	2b00      	cmp	r3, #0
 800469c:	d107      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80046ac:	e033      	b.n	8004716 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d19e      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x22c>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d199      	bne.n	80045f6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f8b8 	bl	800483c <SPI_EndRxTxTransaction>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d006      	beq.n	80046e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046de:	e01a      	b.n	8004716 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470c:	e003      	b.n	8004716 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800471e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004722:	4618      	mov	r0, r3
 8004724:	3730      	adds	r7, #48	; 0x30
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800473c:	f7fe fc78 	bl	8003030 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800474c:	f7fe fc70 	bl	8003030 <HAL_GetTick>
 8004750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	015b      	lsls	r3, r3, #5
 8004758:	0d1b      	lsrs	r3, r3, #20
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004762:	e054      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800476a:	d050      	beq.n	800480e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800476c:	f7fe fc60 	bl	8003030 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	429a      	cmp	r2, r3
 800477a:	d902      	bls.n	8004782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d13d      	bne.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d111      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d004      	beq.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ae:	d107      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d10f      	bne.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e017      	b.n	800482e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3b01      	subs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d19b      	bne.n	8004764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000098 	.word	0x20000098

0800483c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2201      	movs	r2, #1
 8004850:	2102      	movs	r1, #2
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff ff6a 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e032      	b.n	80048d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <SPI_EndRxTxTransaction+0xa0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1b      	ldr	r2, [pc, #108]	; (80048e0 <SPI_EndRxTxTransaction+0xa4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	0d5b      	lsrs	r3, r3, #21
 800487a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488c:	d112      	bne.n	80048b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	2180      	movs	r1, #128	; 0x80
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7ff ff47 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e00f      	b.n	80048d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	3b01      	subs	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d0f2      	beq.n	80048b4 <SPI_EndRxTxTransaction+0x78>
 80048ce:	e000      	b.n	80048d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80048d0:	bf00      	nop
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000098 	.word	0x20000098
 80048e0:	165e9f81 	.word	0x165e9f81

080048e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e041      	b.n	800497a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f839 	bl	8004982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f000 f9c0 	bl	8004ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e04e      	b.n	8004a4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_TIM_Base_Start_IT+0xc4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d022      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049da:	d01d      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <HAL_TIM_Base_Start_IT+0xc8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d018      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <HAL_TIM_Base_Start_IT+0xcc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d013      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00e      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x80>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	d010      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	e007      	b.n	8004a4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40010400 	.word	0x40010400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	40001800 	.word	0x40001800

08004a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d020      	beq.n	8004adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0202 	mvn.w	r2, #2
 8004aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8d2 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8c4 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8d5 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d020      	beq.n	8004b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01b      	beq.n	8004b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0204 	mvn.w	r2, #4
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f8ac 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f89e 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8af 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d020      	beq.n	8004b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0208 	mvn.w	r2, #8
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2204      	movs	r2, #4
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f886 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f878 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f889 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d020      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0210 	mvn.w	r2, #16
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2208      	movs	r2, #8
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f860 	bl	8004c6c <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f852 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f863 	bl	8004c80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00c      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0201 	mvn.w	r2, #1
 8004bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc f95e 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f906 	bl	8004e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00c      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f834 	bl	8004c94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0220 	mvn.w	r2, #32
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8d8 	bl	8004e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <TIM_Base_SetConfig+0x12c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d00f      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a43      	ldr	r2, [pc, #268]	; (8004dd8 <TIM_Base_SetConfig+0x130>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a42      	ldr	r2, [pc, #264]	; (8004ddc <TIM_Base_SetConfig+0x134>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a41      	ldr	r2, [pc, #260]	; (8004de0 <TIM_Base_SetConfig+0x138>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a40      	ldr	r2, [pc, #256]	; (8004de4 <TIM_Base_SetConfig+0x13c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d108      	bne.n	8004cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a35      	ldr	r2, [pc, #212]	; (8004dd4 <TIM_Base_SetConfig+0x12c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02b      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d027      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <TIM_Base_SetConfig+0x130>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d023      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a31      	ldr	r2, [pc, #196]	; (8004ddc <TIM_Base_SetConfig+0x134>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d01f      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	; (8004de0 <TIM_Base_SetConfig+0x138>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01b      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2f      	ldr	r2, [pc, #188]	; (8004de4 <TIM_Base_SetConfig+0x13c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d017      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <TIM_Base_SetConfig+0x140>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <TIM_Base_SetConfig+0x144>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00f      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <TIM_Base_SetConfig+0x148>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <TIM_Base_SetConfig+0x14c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2a      	ldr	r2, [pc, #168]	; (8004df8 <TIM_Base_SetConfig+0x150>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <TIM_Base_SetConfig+0x154>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <TIM_Base_SetConfig+0x12c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0xf8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <TIM_Base_SetConfig+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d103      	bne.n	8004da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	611a      	str	r2, [r3, #16]
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40010400 	.word	0x40010400
 8004de8:	40014000 	.word	0x40014000
 8004dec:	40014400 	.word	0x40014400
 8004df0:	40014800 	.word	0x40014800
 8004df4:	40001800 	.word	0x40001800
 8004df8:	40001c00 	.word	0x40001c00
 8004dfc:	40002000 	.word	0x40002000

08004e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e042      	b.n	8004ec0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc fa5a 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	; 0x24
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f973 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d175      	bne.n	8004fd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Transmit+0x2c>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e06e      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2221      	movs	r2, #33	; 0x21
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f06:	f7fe f893 	bl	8003030 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f20:	d108      	bne.n	8004f34 <HAL_UART_Transmit+0x6c>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e003      	b.n	8004f3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f3c:	e02e      	b.n	8004f9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2200      	movs	r2, #0
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f848 	bl	8004fde <UART_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e03a      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	3302      	adds	r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	e007      	b.n	8004f8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	781a      	ldrb	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1cb      	bne.n	8004f3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2140      	movs	r1, #64	; 0x40
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f814 	bl	8004fde <UART_WaitOnFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b086      	sub	sp, #24
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	60f8      	str	r0, [r7, #12]
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	603b      	str	r3, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fee:	e03b      	b.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff6:	d037      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff8:	f7fe f81a 	bl	8003030 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	429a      	cmp	r2, r3
 8005006:	d302      	bcc.n	800500e <UART_WaitOnFlagUntilTimeout+0x30>
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e03a      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d023      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b80      	cmp	r3, #128	; 0x80
 8005024:	d020      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d01d      	beq.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b08      	cmp	r3, #8
 8005038:	d116      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	617b      	str	r3, [r7, #20]
 800504e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f000 f81d 	bl	8005090 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2208      	movs	r2, #8
 800505a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e00f      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4013      	ands	r3, r2
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	bf0c      	ite	eq
 8005078:	2301      	moveq	r3, #1
 800507a:	2300      	movne	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	429a      	cmp	r2, r3
 8005084:	d0b4      	beq.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b095      	sub	sp, #84	; 0x54
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050b8:	643a      	str	r2, [r7, #64]	; 0x40
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3314      	adds	r3, #20
 80050d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	61fb      	str	r3, [r7, #28]
   return(result);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	2b01      	cmp	r3, #1
 8005106:	d119      	bne.n	800513c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	330c      	adds	r3, #12
 800510e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	60bb      	str	r3, [r7, #8]
   return(result);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f023 0310 	bic.w	r3, r3, #16
 800511e:	647b      	str	r3, [r7, #68]	; 0x44
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	330c      	adds	r3, #12
 8005126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005128:	61ba      	str	r2, [r7, #24]
 800512a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	613b      	str	r3, [r7, #16]
   return(result);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e5      	bne.n	8005108 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800514a:	bf00      	nop
 800514c:	3754      	adds	r7, #84	; 0x54
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b0c0      	sub	sp, #256	; 0x100
 800515e:	af00      	add	r7, sp, #0
 8005160:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	ea40 0301 	orr.w	r3, r0, r1
 8005180:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	431a      	orrs	r2, r3
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051b0:	f021 010c 	bic.w	r1, r1, #12
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051be:	430b      	orrs	r3, r1
 80051c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	6999      	ldr	r1, [r3, #24]
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	ea40 0301 	orr.w	r3, r0, r1
 80051de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b8f      	ldr	r3, [pc, #572]	; (8005424 <UART_SetConfig+0x2cc>)
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d005      	beq.n	80051f8 <UART_SetConfig+0xa0>
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4b8d      	ldr	r3, [pc, #564]	; (8005428 <UART_SetConfig+0x2d0>)
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d104      	bne.n	8005202 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fb4a 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 80051fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005200:	e003      	b.n	800520a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005202:	f7fe fb31 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8005206:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	f040 810c 	bne.w	8005430 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521c:	2200      	movs	r2, #0
 800521e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005222:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005226:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	1891      	adds	r1, r2, r2
 8005230:	65b9      	str	r1, [r7, #88]	; 0x58
 8005232:	415b      	adcs	r3, r3
 8005234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005236:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800523a:	4621      	mov	r1, r4
 800523c:	eb12 0801 	adds.w	r8, r2, r1
 8005240:	4629      	mov	r1, r5
 8005242:	eb43 0901 	adc.w	r9, r3, r1
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800525a:	4690      	mov	r8, r2
 800525c:	4699      	mov	r9, r3
 800525e:	4623      	mov	r3, r4
 8005260:	eb18 0303 	adds.w	r3, r8, r3
 8005264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005268:	462b      	mov	r3, r5
 800526a:	eb49 0303 	adc.w	r3, r9, r3
 800526e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800527e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005282:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005286:	460b      	mov	r3, r1
 8005288:	18db      	adds	r3, r3, r3
 800528a:	653b      	str	r3, [r7, #80]	; 0x50
 800528c:	4613      	mov	r3, r2
 800528e:	eb42 0303 	adc.w	r3, r2, r3
 8005292:	657b      	str	r3, [r7, #84]	; 0x54
 8005294:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005298:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800529c:	f7fb f868 	bl	8000370 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4b61      	ldr	r3, [pc, #388]	; (800542c <UART_SetConfig+0x2d4>)
 80052a6:	fba3 2302 	umull	r2, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	011c      	lsls	r4, r3, #4
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052c0:	4642      	mov	r2, r8
 80052c2:	464b      	mov	r3, r9
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052c8:	415b      	adcs	r3, r3
 80052ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052d0:	4641      	mov	r1, r8
 80052d2:	eb12 0a01 	adds.w	sl, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb43 0b01 	adc.w	fp, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f0:	4692      	mov	sl, r2
 80052f2:	469b      	mov	fp, r3
 80052f4:	4643      	mov	r3, r8
 80052f6:	eb1a 0303 	adds.w	r3, sl, r3
 80052fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052fe:	464b      	mov	r3, r9
 8005300:	eb4b 0303 	adc.w	r3, fp, r3
 8005304:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005314:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005318:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800531c:	460b      	mov	r3, r1
 800531e:	18db      	adds	r3, r3, r3
 8005320:	643b      	str	r3, [r7, #64]	; 0x40
 8005322:	4613      	mov	r3, r2
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
 800532a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800532e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005332:	f7fb f81d 	bl	8000370 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b3b      	ldr	r3, [pc, #236]	; (800542c <UART_SetConfig+0x2d4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	; 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005352:	4b36      	ldr	r3, [pc, #216]	; (800542c <UART_SetConfig+0x2d4>)
 8005354:	fba3 2302 	umull	r2, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005360:	441c      	add	r4, r3
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800536c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005370:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	63b9      	str	r1, [r7, #56]	; 0x38
 800537c:	415b      	adcs	r3, r3
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005384:	4641      	mov	r1, r8
 8005386:	1851      	adds	r1, r2, r1
 8005388:	6339      	str	r1, [r7, #48]	; 0x30
 800538a:	4649      	mov	r1, r9
 800538c:	414b      	adcs	r3, r1
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800539c:	4659      	mov	r1, fp
 800539e:	00cb      	lsls	r3, r1, #3
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a6:	4651      	mov	r1, sl
 80053a8:	00ca      	lsls	r2, r1, #3
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	4642      	mov	r2, r8
 80053b2:	189b      	adds	r3, r3, r2
 80053b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053b8:	464b      	mov	r3, r9
 80053ba:	460a      	mov	r2, r1
 80053bc:	eb42 0303 	adc.w	r3, r2, r3
 80053c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053d8:	460b      	mov	r3, r1
 80053da:	18db      	adds	r3, r3, r3
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	4613      	mov	r3, r2
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053ee:	f7fa ffbf 	bl	8000370 <__aeabi_uldivmod>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <UART_SetConfig+0x2d4>)
 80053f8:	fba3 1302 	umull	r1, r3, r3, r2
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	2164      	movs	r1, #100	; 0x64
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	3332      	adds	r3, #50	; 0x32
 800540a:	4a08      	ldr	r2, [pc, #32]	; (800542c <UART_SetConfig+0x2d4>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	f003 0207 	and.w	r2, r3, #7
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4422      	add	r2, r4
 800541e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005420:	e106      	b.n	8005630 <UART_SetConfig+0x4d8>
 8005422:	bf00      	nop
 8005424:	40011000 	.word	0x40011000
 8005428:	40011400 	.word	0x40011400
 800542c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005434:	2200      	movs	r2, #0
 8005436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800543a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800543e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005442:	4642      	mov	r2, r8
 8005444:	464b      	mov	r3, r9
 8005446:	1891      	adds	r1, r2, r2
 8005448:	6239      	str	r1, [r7, #32]
 800544a:	415b      	adcs	r3, r3
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
 800544e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005452:	4641      	mov	r1, r8
 8005454:	1854      	adds	r4, r2, r1
 8005456:	4649      	mov	r1, r9
 8005458:	eb43 0501 	adc.w	r5, r3, r1
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	00eb      	lsls	r3, r5, #3
 8005466:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	4614      	mov	r4, r2
 800546e:	461d      	mov	r5, r3
 8005470:	4643      	mov	r3, r8
 8005472:	18e3      	adds	r3, r4, r3
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005478:	464b      	mov	r3, r9
 800547a:	eb45 0303 	adc.w	r3, r5, r3
 800547e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800548e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800549e:	4629      	mov	r1, r5
 80054a0:	008b      	lsls	r3, r1, #2
 80054a2:	4621      	mov	r1, r4
 80054a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a8:	4621      	mov	r1, r4
 80054aa:	008a      	lsls	r2, r1, #2
 80054ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054b0:	f7fa ff5e 	bl	8000370 <__aeabi_uldivmod>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4b60      	ldr	r3, [pc, #384]	; (800563c <UART_SetConfig+0x4e4>)
 80054ba:	fba3 2302 	umull	r2, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	011c      	lsls	r4, r3, #4
 80054c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	61b9      	str	r1, [r7, #24]
 80054dc:	415b      	adcs	r3, r3
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e4:	4641      	mov	r1, r8
 80054e6:	1851      	adds	r1, r2, r1
 80054e8:	6139      	str	r1, [r7, #16]
 80054ea:	4649      	mov	r1, r9
 80054ec:	414b      	adcs	r3, r1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054fc:	4659      	mov	r1, fp
 80054fe:	00cb      	lsls	r3, r1, #3
 8005500:	4651      	mov	r1, sl
 8005502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005506:	4651      	mov	r1, sl
 8005508:	00ca      	lsls	r2, r1, #3
 800550a:	4610      	mov	r0, r2
 800550c:	4619      	mov	r1, r3
 800550e:	4603      	mov	r3, r0
 8005510:	4642      	mov	r2, r8
 8005512:	189b      	adds	r3, r3, r2
 8005514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005518:	464b      	mov	r3, r9
 800551a:	460a      	mov	r2, r1
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	67bb      	str	r3, [r7, #120]	; 0x78
 800552e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800553c:	4649      	mov	r1, r9
 800553e:	008b      	lsls	r3, r1, #2
 8005540:	4641      	mov	r1, r8
 8005542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005546:	4641      	mov	r1, r8
 8005548:	008a      	lsls	r2, r1, #2
 800554a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800554e:	f7fa ff0f 	bl	8000370 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4611      	mov	r1, r2
 8005558:	4b38      	ldr	r3, [pc, #224]	; (800563c <UART_SetConfig+0x4e4>)
 800555a:	fba3 2301 	umull	r2, r3, r3, r1
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2264      	movs	r2, #100	; 0x64
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	1acb      	subs	r3, r1, r3
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	3332      	adds	r3, #50	; 0x32
 800556c:	4a33      	ldr	r2, [pc, #204]	; (800563c <UART_SetConfig+0x4e4>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005578:	441c      	add	r4, r3
 800557a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557e:	2200      	movs	r2, #0
 8005580:	673b      	str	r3, [r7, #112]	; 0x70
 8005582:	677a      	str	r2, [r7, #116]	; 0x74
 8005584:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	1891      	adds	r1, r2, r2
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	415b      	adcs	r3, r3
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005598:	4641      	mov	r1, r8
 800559a:	1851      	adds	r1, r2, r1
 800559c:	6039      	str	r1, [r7, #0]
 800559e:	4649      	mov	r1, r9
 80055a0:	414b      	adcs	r3, r1
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055b0:	4659      	mov	r1, fp
 80055b2:	00cb      	lsls	r3, r1, #3
 80055b4:	4651      	mov	r1, sl
 80055b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ba:	4651      	mov	r1, sl
 80055bc:	00ca      	lsls	r2, r1, #3
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	4642      	mov	r2, r8
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ca:	464b      	mov	r3, r9
 80055cc:	460a      	mov	r2, r1
 80055ce:	eb42 0303 	adc.w	r3, r2, r3
 80055d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	663b      	str	r3, [r7, #96]	; 0x60
 80055de:	667a      	str	r2, [r7, #100]	; 0x64
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055ec:	4649      	mov	r1, r9
 80055ee:	008b      	lsls	r3, r1, #2
 80055f0:	4641      	mov	r1, r8
 80055f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f6:	4641      	mov	r1, r8
 80055f8:	008a      	lsls	r2, r1, #2
 80055fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055fe:	f7fa feb7 	bl	8000370 <__aeabi_uldivmod>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <UART_SetConfig+0x4e4>)
 8005608:	fba3 1302 	umull	r1, r3, r3, r2
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	2164      	movs	r1, #100	; 0x64
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	3332      	adds	r3, #50	; 0x32
 800561a:	4a08      	ldr	r2, [pc, #32]	; (800563c <UART_SetConfig+0x4e4>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	f003 020f 	and.w	r2, r3, #15
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4422      	add	r2, r4
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005636:	46bd      	mov	sp, r7
 8005638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800563c:	51eb851f 	.word	0x51eb851f

08005640 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f103 0208 	add.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005658:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f103 0208 	add.w	r2, r3, #8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f103 0208 	add.w	r2, r3, #8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f8:	d103      	bne.n	8005702 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e00c      	b.n	800571c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3308      	adds	r3, #8
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e002      	b.n	8005710 <vListInsert+0x2e>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	429a      	cmp	r2, r3
 800571a:	d2f6      	bcs.n	800570a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6892      	ldr	r2, [r2, #8]
 800576a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6852      	ldr	r2, [r2, #4]
 8005774:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d103      	bne.n	8005788 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	1e5a      	subs	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueGenericReset+0x2a>
        __asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	60bb      	str	r3, [r7, #8]
    }
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80057d2:	f002 f8c7 	bl	8007964 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	3b01      	subs	r3, #1
 8005804:	68f9      	ldr	r1, [r7, #12]
 8005806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	441a      	add	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	22ff      	movs	r2, #255	; 0xff
 800581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d114      	bne.n	8005852 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01a      	beq.n	8005866 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3310      	adds	r3, #16
 8005834:	4618      	mov	r0, r3
 8005836:	f001 f91f 	bl	8006a78 <xTaskRemoveFromEventList>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d012      	beq.n	8005866 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <xQueueGenericReset+0xcc>)
 8005842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	e009      	b.n	8005866 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3310      	adds	r3, #16
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fef2 	bl	8005640 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3324      	adds	r3, #36	; 0x24
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff feed 	bl	8005640 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005866:	f002 f8ad 	bl	80079c4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800586a:	2301      	movs	r3, #1
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005878:	b580      	push	{r7, lr}
 800587a:	b08c      	sub	sp, #48	; 0x30
 800587c:	af02      	add	r7, sp, #8
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <xQueueGenericCreate+0x2a>
        __asm volatile
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	61bb      	str	r3, [r7, #24]
    }
 800589e:	bf00      	nop
 80058a0:	e7fe      	b.n	80058a0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <xQueueGenericCreate+0x48>
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d101      	bne.n	80058c4 <xQueueGenericCreate+0x4c>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <xQueueGenericCreate+0x4e>
 80058c4:	2300      	movs	r3, #0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10a      	bne.n	80058e0 <xQueueGenericCreate+0x68>
        __asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	617b      	str	r3, [r7, #20]
    }
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80058e6:	d90a      	bls.n	80058fe <xQueueGenericCreate+0x86>
        __asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	613b      	str	r3, [r7, #16]
    }
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	3350      	adds	r3, #80	; 0x50
 8005902:	4618      	mov	r0, r3
 8005904:	f002 f95a 	bl	8007bbc <pvPortMalloc>
 8005908:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00d      	beq.n	800592c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	3350      	adds	r3, #80	; 0x50
 8005918:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800591a:	79fa      	ldrb	r2, [r7, #7]
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f805 	bl	8005936 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800592c:	6a3b      	ldr	r3, [r7, #32]
    }
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
 8005942:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e002      	b.n	8005958 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005964:	2101      	movs	r1, #1
 8005966:	69b8      	ldr	r0, [r7, #24]
 8005968:	f7ff ff1e 	bl	80057a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	78fa      	ldrb	r2, [r7, #3]
 8005970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	68f9      	ldr	r1, [r7, #12]
 800597a:	2073      	movs	r0, #115	; 0x73
 800597c:	f003 fa90 	bl	8008ea0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b090      	sub	sp, #64	; 0x40
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xQueueGenericSend+0x32>
        __asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <xQueueGenericSend+0x40>
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <xQueueGenericSend+0x44>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <xQueueGenericSend+0x46>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <xQueueGenericSend+0x60>
        __asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d103      	bne.n	80059f6 <xQueueGenericSend+0x6e>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <xQueueGenericSend+0x72>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <xQueueGenericSend+0x74>
 80059fa:	2300      	movs	r3, #0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xQueueGenericSend+0x8e>
        __asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	623b      	str	r3, [r7, #32]
    }
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a16:	f001 f9cf 	bl	8006db8 <xTaskGetSchedulerState>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <xQueueGenericSend+0x9e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <xQueueGenericSend+0xa2>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericSend+0xa4>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSend+0xbe>
        __asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61fb      	str	r3, [r7, #28]
    }
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005a46:	f001 ff8d 	bl	8007964 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d302      	bcc.n	8005a5c <xQueueGenericSend+0xd4>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d136      	bne.n	8005aca <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f003 ffaa 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4601      	mov	r1, r0
 8005a70:	205a      	movs	r0, #90	; 0x5a
 8005a72:	f003 fa8b 	bl	8008f8c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a7c:	f000 fa78 	bl	8005f70 <prvCopyDataToQueue>
 8005a80:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	3324      	adds	r3, #36	; 0x24
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fff2 	bl	8006a78 <xTaskRemoveFromEventList>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005a9a:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <xQueueGenericSend+0x248>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	e00a      	b.n	8005ac2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005ab2:	4b47      	ldr	r3, [pc, #284]	; (8005bd0 <xQueueGenericSend+0x248>)
 8005ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005ac2:	f001 ff7f 	bl	80079c4 <vPortExitCritical>
                return pdPASS;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07d      	b.n	8005bc6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d110      	bne.n	8005af2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005ad0:	f001 ff78 	bl	80079c4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f003 ff6e 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	205a      	movs	r0, #90	; 0x5a
 8005aea:	f003 fa4f 	bl	8008f8c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e069      	b.n	8005bc6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f821 	bl	8006b44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b06:	f001 ff5d 	bl	80079c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b0a:	f000 fd6d 	bl	80065e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b0e:	f001 ff29 	bl	8007964 <vPortEnterCritical>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1e:	d103      	bne.n	8005b28 <xQueueGenericSend+0x1a0>
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b34:	d103      	bne.n	8005b3e <xQueueGenericSend+0x1b6>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3e:	f001 ff41 	bl	80079c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b42:	1d3a      	adds	r2, r7, #4
 8005b44:	f107 0314 	add.w	r3, r7, #20
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 f810 	bl	8006b70 <xTaskCheckForTimeOut>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d124      	bne.n	8005ba0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b58:	f000 fb02 	bl	8006160 <prvIsQueueFull>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	3310      	adds	r3, #16
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 ff32 	bl	80069d4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b72:	f000 fa8d 	bl	8006090 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005b76:	f000 fd45 	bl	8006604 <xTaskResumeAll>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f47f af62 	bne.w	8005a46 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005b82:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <xQueueGenericSend+0x248>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	e758      	b.n	8005a46 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b96:	f000 fa7b 	bl	8006090 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005b9a:	f000 fd33 	bl	8006604 <xTaskResumeAll>
 8005b9e:	e752      	b.n	8005a46 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ba2:	f000 fa75 	bl	8006090 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005ba6:	f000 fd2d 	bl	8006604 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	4618      	mov	r0, r3
 8005bae:	f003 ff03 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4601      	mov	r1, r0
 8005bbe:	205a      	movs	r0, #90	; 0x5a
 8005bc0:	f003 f9e4 	bl	8008f8c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005bc4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3738      	adds	r7, #56	; 0x38
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b090      	sub	sp, #64	; 0x40
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <xQueueGenericSendFromISR+0x3c>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <xQueueGenericSendFromISR+0x40>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <xQueueGenericSendFromISR+0x42>
 8005c14:	2300      	movs	r3, #0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d103      	bne.n	8005c3e <xQueueGenericSendFromISR+0x6a>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <xQueueGenericSendFromISR+0x6e>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <xQueueGenericSendFromISR+0x70>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	623b      	str	r3, [r7, #32]
    }
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c5e:	f001 ff6d 	bl	8007b3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005c62:	f3ef 8211 	mrs	r2, BASEPRI
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	61fa      	str	r2, [r7, #28]
 8005c78:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <xQueueGenericSendFromISR+0xbc>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d148      	bne.n	8005d22 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f003 fe88 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005ca8:	4601      	mov	r1, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	461a      	mov	r2, r3
 8005cae:	2060      	movs	r0, #96	; 0x60
 8005cb0:	f003 f89c 	bl	8008dec <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cba:	f000 f959 	bl	8005f70 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005cbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc6:	d112      	bne.n	8005cee <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d025      	beq.n	8005d1c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	3324      	adds	r3, #36	; 0x24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fecf 	bl	8006a78 <xTaskRemoveFromEventList>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01d      	beq.n	8005d1c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01a      	beq.n	8005d1c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e016      	b.n	8005d1c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005cee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf4:	d10a      	bne.n	8005d0c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	617b      	str	r3, [r7, #20]
    }
 8005d08:	bf00      	nop
 8005d0a:	e7fe      	b.n	8005d0a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d10:	3301      	adds	r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	b25a      	sxtb	r2, r3
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005d20:	e00b      	b.n	8005d3a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	4618      	mov	r0, r3
 8005d26:	f003 fe47 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2060      	movs	r0, #96	; 0x60
 8005d32:	f003 f85b 	bl	8008dec <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005d44:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3740      	adds	r7, #64	; 0x40
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b08f      	sub	sp, #60	; 0x3c
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <xQueueReceive+0x30>
        __asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	623b      	str	r3, [r7, #32]
    }
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <xQueueReceive+0x3e>
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <xQueueReceive+0x42>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <xQueueReceive+0x44>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xQueueReceive+0x5e>
        __asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	61fb      	str	r3, [r7, #28]
    }
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dae:	f001 f803 	bl	8006db8 <xTaskGetSchedulerState>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <xQueueReceive+0x6e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <xQueueReceive+0x72>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <xQueueReceive+0x74>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xQueueReceive+0x8e>
        __asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	61bb      	str	r3, [r7, #24]
    }
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005dde:	f001 fdc1 	bl	8007964 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d02f      	beq.n	8005e4e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df2:	f000 f927 	bl	8006044 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f003 fddd 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005dfe:	4604      	mov	r4, r0
 8005e00:	2000      	movs	r0, #0
 8005e02:	f003 fdd9 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005e06:	4602      	mov	r2, r0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	9100      	str	r1, [sp, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	205c      	movs	r0, #92	; 0x5c
 8005e12:	f003 f8bb 	bl	8008f8c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1e5a      	subs	r2, r3, #1
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00f      	beq.n	8005e46 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e28:	3310      	adds	r3, #16
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fe24 	bl	8006a78 <xTaskRemoveFromEventList>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005e36:	4b4d      	ldr	r3, [pc, #308]	; (8005f6c <xQueueReceive+0x21c>)
 8005e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005e46:	f001 fdbd 	bl	80079c4 <vPortExitCritical>
                return pdPASS;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e08a      	b.n	8005f64 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d113      	bne.n	8005e7c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005e54:	f001 fdb6 	bl	80079c4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f003 fdac 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005e60:	4604      	mov	r4, r0
 8005e62:	2000      	movs	r0, #0
 8005e64:	f003 fda8 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	9100      	str	r1, [sp, #0]
 8005e70:	4621      	mov	r1, r4
 8005e72:	205c      	movs	r0, #92	; 0x5c
 8005e74:	f003 f88a 	bl	8008f8c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e073      	b.n	8005f64 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005e82:	f107 0310 	add.w	r3, r7, #16
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fe5c 	bl	8006b44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005e90:	f001 fd98 	bl	80079c4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005e94:	f000 fba8 	bl	80065e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005e98:	f001 fd64 	bl	8007964 <vPortEnterCritical>
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea2:	b25b      	sxtb	r3, r3
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea8:	d103      	bne.n	8005eb2 <xQueueReceive+0x162>
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ebe:	d103      	bne.n	8005ec8 <xQueueReceive+0x178>
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec8:	f001 fd7c 	bl	80079c4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ecc:	1d3a      	adds	r2, r7, #4
 8005ece:	f107 0310 	add.w	r3, r7, #16
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fe4b 	bl	8006b70 <xTaskCheckForTimeOut>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d124      	bne.n	8005f2a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee2:	f000 f927 	bl	8006134 <prvIsQueueEmpty>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d018      	beq.n	8005f1e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	3324      	adds	r3, #36	; 0x24
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fd6d 	bl	80069d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005efc:	f000 f8c8 	bl	8006090 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f00:	f000 fb80 	bl	8006604 <xTaskResumeAll>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f47f af69 	bne.w	8005dde <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005f0c:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <xQueueReceive+0x21c>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	e75f      	b.n	8005dde <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f20:	f000 f8b6 	bl	8006090 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005f24:	f000 fb6e 	bl	8006604 <xTaskResumeAll>
 8005f28:	e759      	b.n	8005dde <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f2c:	f000 f8b0 	bl	8006090 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005f30:	f000 fb68 	bl	8006604 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f36:	f000 f8fd 	bl	8006134 <prvIsQueueEmpty>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f43f af4e 	beq.w	8005dde <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	4618      	mov	r0, r3
 8005f46:	f003 fd37 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f003 fd33 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 8005f52:	4602      	mov	r2, r0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2101      	movs	r1, #1
 8005f58:	9100      	str	r1, [sp, #0]
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	205c      	movs	r0, #92	; 0x5c
 8005f5e:	f003 f815 	bl	8008f8c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005f62:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3734      	adds	r7, #52	; 0x34
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd90      	pop	{r4, r7, pc}
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d14d      	bne.n	8006032 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 ff2a 	bl	8006df4 <xTaskPriorityDisinherit>
 8005fa0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	e043      	b.n	8006032 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d119      	bne.n	8005fe4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6858      	ldr	r0, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	f004 f8f1 	bl	800a1a2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	441a      	add	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d32b      	bcc.n	8006032 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]
 8005fe2:	e026      	b.n	8006032 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68d8      	ldr	r0, [r3, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	461a      	mov	r2, r3
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	f004 f8d7 	bl	800a1a2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d207      	bcs.n	8006020 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	425b      	negs	r3, r3
 800601a:	441a      	add	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d105      	bne.n	8006032 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3b01      	subs	r3, #1
 8006030:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d018      	beq.n	8006088 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	441a      	add	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	429a      	cmp	r2, r3
 800606e:	d303      	bcc.n	8006078 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68d9      	ldr	r1, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	461a      	mov	r2, r3
 8006082:	6838      	ldr	r0, [r7, #0]
 8006084:	f004 f88d 	bl	800a1a2 <memcpy>
    }
}
 8006088:	bf00      	nop
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006098:	f001 fc64 	bl	8007964 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80060a4:	e011      	b.n	80060ca <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d012      	beq.n	80060d4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fce0 	bl	8006a78 <xTaskRemoveFromEventList>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80060be:	f000 fdbd 	bl	8006c3c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dce9      	bgt.n	80060a6 <prvUnlockQueue+0x16>
 80060d2:	e000      	b.n	80060d6 <prvUnlockQueue+0x46>
                        break;
 80060d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80060de:	f001 fc71 	bl	80079c4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80060e2:	f001 fc3f 	bl	8007964 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ee:	e011      	b.n	8006114 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d012      	beq.n	800611e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3310      	adds	r3, #16
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fcbb 	bl	8006a78 <xTaskRemoveFromEventList>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006108:	f000 fd98 	bl	8006c3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	3b01      	subs	r3, #1
 8006110:	b2db      	uxtb	r3, r3
 8006112:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006118:	2b00      	cmp	r3, #0
 800611a:	dce9      	bgt.n	80060f0 <prvUnlockQueue+0x60>
 800611c:	e000      	b.n	8006120 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800611e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	22ff      	movs	r2, #255	; 0xff
 8006124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006128:	f001 fc4c 	bl	80079c4 <vPortExitCritical>
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800613c:	f001 fc12 	bl	8007964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006148:	2301      	movs	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	e001      	b.n	8006152 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006152:	f001 fc37 	bl	80079c4 <vPortExitCritical>

    return xReturn;
 8006156:	68fb      	ldr	r3, [r7, #12]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006168:	f001 fbfc 	bl	8007964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	429a      	cmp	r2, r3
 8006176:	d102      	bne.n	800617e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e001      	b.n	8006182 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006182:	f001 fc1f 	bl	80079c4 <vPortExitCritical>

    return xReturn;
 8006186:	68fb      	ldr	r3, [r7, #12]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e01e      	b.n	80061de <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061a0:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <vQueueAddToRegistry+0x60>)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d115      	bne.n	80061d8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061ac:	4910      	ldr	r1, [pc, #64]	; (80061f0 <vQueueAddToRegistry+0x60>)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80061b6:	4a0e      	ldr	r2, [pc, #56]	; (80061f0 <vQueueAddToRegistry+0x60>)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	00db      	lsls	r3, r3, #3
 80061bc:	4413      	add	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f003 fbf7 	bl	80099b8 <SEGGER_SYSVIEW_ShrinkId>
 80061ca:	4601      	mov	r1, r0
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	2071      	movs	r0, #113	; 0x71
 80061d2:	f002 fe0b 	bl	8008dec <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80061d6:	e006      	b.n	80061e6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b07      	cmp	r3, #7
 80061e2:	d9dd      	bls.n	80061a0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200003ac 	.word	0x200003ac

080061f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006204:	f001 fbae 	bl	8007964 <vPortEnterCritical>
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800620e:	b25b      	sxtb	r3, r3
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006214:	d103      	bne.n	800621e <vQueueWaitForMessageRestricted+0x2a>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006224:	b25b      	sxtb	r3, r3
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622a:	d103      	bne.n	8006234 <vQueueWaitForMessageRestricted+0x40>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006234:	f001 fbc6 	bl	80079c4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	3324      	adds	r3, #36	; 0x24
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fbe7 	bl	8006a1c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800624e:	6978      	ldr	r0, [r7, #20]
 8006250:	f7ff ff1e 	bl	8006090 <prvUnlockQueue>
    }
 8006254:	bf00      	nop
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af04      	add	r7, sp, #16
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fca3 	bl	8007bbc <pvPortMalloc>
 8006276:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800627e:	2058      	movs	r0, #88	; 0x58
 8006280:	f001 fc9c 	bl	8007bbc <pvPortMalloc>
 8006284:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
 8006292:	e005      	b.n	80062a0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006294:	6978      	ldr	r0, [r7, #20]
 8006296:	f001 fd71 	bl	8007d7c <vPortFree>
 800629a:	e001      	b.n	80062a0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d013      	beq.n	80062ce <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062a6:	88fa      	ldrh	r2, [r7, #6]
 80062a8:	2300      	movs	r3, #0
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	9302      	str	r3, [sp, #8]
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f80e 	bl	80062de <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80062c2:	69f8      	ldr	r0, [r7, #28]
 80062c4:	f000 f8a2 	bl	800640c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80062c8:	2301      	movs	r3, #1
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	e002      	b.n	80062d4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80062d4:	69bb      	ldr	r3, [r7, #24]
    }
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b088      	sub	sp, #32
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
 80062ea:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	461a      	mov	r2, r3
 80062f6:	21a5      	movs	r1, #165	; 0xa5
 80062f8:	f003 fef0 	bl	800a0dc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006306:	3b01      	subs	r3, #1
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <prvInitialiseNewTask+0x58>
        __asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	617b      	str	r3, [r7, #20]
    }
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01f      	beq.n	800637c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800633c:	2300      	movs	r3, #0
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	e012      	b.n	8006368 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	7819      	ldrb	r1, [r3, #0]
 800634a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	3334      	adds	r3, #52	; 0x34
 8006352:	460a      	mov	r2, r1
 8006354:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d006      	beq.n	8006370 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3301      	adds	r3, #1
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b09      	cmp	r3, #9
 800636c:	d9e9      	bls.n	8006342 <prvInitialiseNewTask+0x64>
 800636e:	e000      	b.n	8006372 <prvInitialiseNewTask+0x94>
            {
                break;
 8006370:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800637a:	e003      	b.n	8006384 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006386:	2b04      	cmp	r3, #4
 8006388:	d901      	bls.n	800638e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800638a:	2304      	movs	r3, #4
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006398:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	2200      	movs	r2, #0
 800639e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff f96b 	bl	8005680 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	3318      	adds	r3, #24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff f966 	bl	8005680 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	f1c3 0205 	rsb	r2, r3, #5
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	3350      	adds	r3, #80	; 0x50
 80063ce:	2204      	movs	r2, #4
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f003 fe82 	bl	800a0dc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	3354      	adds	r3, #84	; 0x54
 80063dc:	2201      	movs	r2, #1
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f003 fe7b 	bl	800a0dc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	69b8      	ldr	r0, [r7, #24]
 80063ec:	f001 f90c 	bl	8007608 <pxPortInitialiseStack>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006400:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006402:	bf00      	nop
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800640c:	b5b0      	push	{r4, r5, r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af02      	add	r7, sp, #8
 8006412:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006414:	f001 faa6 	bl	8007964 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006418:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <prvAddNewTaskToReadyList+0xfc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	4a3a      	ldr	r2, [pc, #232]	; (8006508 <prvAddNewTaskToReadyList+0xfc>)
 8006420:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006422:	4b3a      	ldr	r3, [pc, #232]	; (800650c <prvAddNewTaskToReadyList+0x100>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800642a:	4a38      	ldr	r2, [pc, #224]	; (800650c <prvAddNewTaskToReadyList+0x100>)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006430:	4b35      	ldr	r3, [pc, #212]	; (8006508 <prvAddNewTaskToReadyList+0xfc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d110      	bne.n	800645a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006438:	f000 fc24 	bl	8006c84 <prvInitialiseTaskLists>
 800643c:	e00d      	b.n	800645a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800643e:	4b34      	ldr	r3, [pc, #208]	; (8006510 <prvAddNewTaskToReadyList+0x104>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006446:	4b31      	ldr	r3, [pc, #196]	; (800650c <prvAddNewTaskToReadyList+0x100>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d802      	bhi.n	800645a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006454:	4a2d      	ldr	r2, [pc, #180]	; (800650c <prvAddNewTaskToReadyList+0x100>)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800645a:	4b2e      	ldr	r3, [pc, #184]	; (8006514 <prvAddNewTaskToReadyList+0x108>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	4a2c      	ldr	r2, [pc, #176]	; (8006514 <prvAddNewTaskToReadyList+0x108>)
 8006462:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006464:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <prvAddNewTaskToReadyList+0x108>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <prvAddNewTaskToReadyList+0x94>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4618      	mov	r0, r3
 8006476:	f003 f979 	bl	800976c <SEGGER_SYSVIEW_OnTaskCreate>
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	461d      	mov	r5, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461c      	mov	r4, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	1ae3      	subs	r3, r4, r3
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	462b      	mov	r3, r5
 800649c:	f001 fe3c 	bl	8008118 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f003 f9e6 	bl	8009874 <SEGGER_SYSVIEW_OnTaskStartReady>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	2201      	movs	r2, #1
 80064ae:	409a      	lsls	r2, r3
 80064b0:	4b19      	ldr	r3, [pc, #100]	; (8006518 <prvAddNewTaskToReadyList+0x10c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	4a18      	ldr	r2, [pc, #96]	; (8006518 <prvAddNewTaskToReadyList+0x10c>)
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a15      	ldr	r2, [pc, #84]	; (800651c <prvAddNewTaskToReadyList+0x110>)
 80064c8:	441a      	add	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7ff f8e2 	bl	800569a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80064d6:	f001 fa75 	bl	80079c4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <prvAddNewTaskToReadyList+0x104>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <prvAddNewTaskToReadyList+0x100>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d207      	bcs.n	8006500 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <prvAddNewTaskToReadyList+0x114>)
 80064f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bdb0      	pop	{r4, r5, r7, pc}
 8006508:	200004c4 	.word	0x200004c4
 800650c:	200003ec 	.word	0x200003ec
 8006510:	200004d0 	.word	0x200004d0
 8006514:	200004e0 	.word	0x200004e0
 8006518:	200004cc 	.word	0x200004cc
 800651c:	200003f0 	.word	0x200003f0
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800652a:	4b27      	ldr	r3, [pc, #156]	; (80065c8 <vTaskStartScheduler+0xa4>)
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	2282      	movs	r2, #130	; 0x82
 8006536:	4925      	ldr	r1, [pc, #148]	; (80065cc <vTaskStartScheduler+0xa8>)
 8006538:	4825      	ldr	r0, [pc, #148]	; (80065d0 <vTaskStartScheduler+0xac>)
 800653a:	f7ff fe8f 	bl	800625c <xTaskCreate>
 800653e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d102      	bne.n	800654c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006546:	f000 fd4d 	bl	8006fe4 <xTimerCreateTimerTask>
 800654a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d124      	bne.n	800659c <vTaskStartScheduler+0x78>
        __asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
    }
 8006564:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006566:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <vTaskStartScheduler+0xb0>)
 8006568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800656c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800656e:	4b1a      	ldr	r3, [pc, #104]	; (80065d8 <vTaskStartScheduler+0xb4>)
 8006570:	2201      	movs	r2, #1
 8006572:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006574:	4b19      	ldr	r3, [pc, #100]	; (80065dc <vTaskStartScheduler+0xb8>)
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800657a:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <vTaskStartScheduler+0xbc>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <vTaskStartScheduler+0xa4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d102      	bne.n	800658c <vTaskStartScheduler+0x68>
 8006586:	f003 f8d5 	bl	8009734 <SEGGER_SYSVIEW_OnIdle>
 800658a:	e004      	b.n	8006596 <vTaskStartScheduler+0x72>
 800658c:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <vTaskStartScheduler+0xbc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f003 f92d 	bl	80097f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006596:	f001 f8c5 	bl	8007724 <xPortStartScheduler>
 800659a:	e00e      	b.n	80065ba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a2:	d10a      	bne.n	80065ba <vTaskStartScheduler+0x96>
        __asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	607b      	str	r3, [r7, #4]
    }
 80065b6:	bf00      	nop
 80065b8:	e7fe      	b.n	80065b8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80065ba:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <vTaskStartScheduler+0xc0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200004e8 	.word	0x200004e8
 80065cc:	0800b384 	.word	0x0800b384
 80065d0:	08006c55 	.word	0x08006c55
 80065d4:	200004e4 	.word	0x200004e4
 80065d8:	200004d0 	.word	0x200004d0
 80065dc:	200004c8 	.word	0x200004c8
 80065e0:	200003ec 	.word	0x200003ec
 80065e4:	200000d4 	.word	0x200000d4

080065e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <vTaskSuspendAll+0x18>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3301      	adds	r3, #1
 80065f2:	4a03      	ldr	r2, [pc, #12]	; (8006600 <vTaskSuspendAll+0x18>)
 80065f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	200004ec 	.word	0x200004ec

08006604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006612:	4b43      	ldr	r3, [pc, #268]	; (8006720 <xTaskResumeAll+0x11c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <xTaskResumeAll+0x2c>
        __asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
    }
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006630:	f001 f998 	bl	8007964 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006634:	4b3a      	ldr	r3, [pc, #232]	; (8006720 <xTaskResumeAll+0x11c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3b01      	subs	r3, #1
 800663a:	4a39      	ldr	r2, [pc, #228]	; (8006720 <xTaskResumeAll+0x11c>)
 800663c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663e:	4b38      	ldr	r3, [pc, #224]	; (8006720 <xTaskResumeAll+0x11c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d165      	bne.n	8006712 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006646:	4b37      	ldr	r3, [pc, #220]	; (8006724 <xTaskResumeAll+0x120>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d061      	beq.n	8006712 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664e:	e032      	b.n	80066b6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006650:	4b35      	ldr	r3, [pc, #212]	; (8006728 <xTaskResumeAll+0x124>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3318      	adds	r3, #24
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff f879 	bl	8005754 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff f874 	bl	8005754 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4618      	mov	r0, r3
 8006670:	f003 f900 	bl	8009874 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	2201      	movs	r2, #1
 800667a:	409a      	lsls	r2, r3
 800667c:	4b2b      	ldr	r3, [pc, #172]	; (800672c <xTaskResumeAll+0x128>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4313      	orrs	r3, r2
 8006682:	4a2a      	ldr	r2, [pc, #168]	; (800672c <xTaskResumeAll+0x128>)
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4a27      	ldr	r2, [pc, #156]	; (8006730 <xTaskResumeAll+0x12c>)
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fe fffc 	bl	800569a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a6:	4b23      	ldr	r3, [pc, #140]	; (8006734 <xTaskResumeAll+0x130>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80066b0:	4b21      	ldr	r3, [pc, #132]	; (8006738 <xTaskResumeAll+0x134>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b6:	4b1c      	ldr	r3, [pc, #112]	; (8006728 <xTaskResumeAll+0x124>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1c8      	bne.n	8006650 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80066c4:	f000 fb5c 	bl	8006d80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066c8:	4b1c      	ldr	r3, [pc, #112]	; (800673c <xTaskResumeAll+0x138>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80066d4:	f000 f858 	bl	8006788 <xTaskIncrementTick>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80066de:	4b16      	ldr	r3, [pc, #88]	; (8006738 <xTaskResumeAll+0x134>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1f1      	bne.n	80066d4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80066f0:	4b12      	ldr	r3, [pc, #72]	; (800673c <xTaskResumeAll+0x138>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80066f6:	4b10      	ldr	r3, [pc, #64]	; (8006738 <xTaskResumeAll+0x134>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80066fe:	2301      	movs	r3, #1
 8006700:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <xTaskResumeAll+0x13c>)
 8006704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006712:	f001 f957 	bl	80079c4 <vPortExitCritical>

    return xAlreadyYielded;
 8006716:	68bb      	ldr	r3, [r7, #8]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200004ec 	.word	0x200004ec
 8006724:	200004c4 	.word	0x200004c4
 8006728:	20000484 	.word	0x20000484
 800672c:	200004cc 	.word	0x200004cc
 8006730:	200003f0 	.word	0x200003f0
 8006734:	200003ec 	.word	0x200003ec
 8006738:	200004d8 	.word	0x200004d8
 800673c:	200004d4 	.word	0x200004d4
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <xTaskGetTickCount+0x1c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006750:	687b      	ldr	r3, [r7, #4]
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	200004c8 	.word	0x200004c8

08006764 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800676a:	f001 f9e7 	bl	8007b3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800676e:	2300      	movs	r3, #0
 8006770:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006772:	4b04      	ldr	r3, [pc, #16]	; (8006784 <xTaskGetTickCountFromISR+0x20>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006778:	683b      	ldr	r3, [r7, #0]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200004c8 	.word	0x200004c8

08006788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006792:	4b50      	ldr	r3, [pc, #320]	; (80068d4 <xTaskIncrementTick+0x14c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f040 8092 	bne.w	80068c0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800679c:	4b4e      	ldr	r3, [pc, #312]	; (80068d8 <xTaskIncrementTick+0x150>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80067a4:	4a4c      	ldr	r2, [pc, #304]	; (80068d8 <xTaskIncrementTick+0x150>)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d120      	bne.n	80067f2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80067b0:	4b4a      	ldr	r3, [pc, #296]	; (80068dc <xTaskIncrementTick+0x154>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <xTaskIncrementTick+0x48>
        __asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	603b      	str	r3, [r7, #0]
    }
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <xTaskIncrementTick+0x46>
 80067d0:	4b42      	ldr	r3, [pc, #264]	; (80068dc <xTaskIncrementTick+0x154>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	4b42      	ldr	r3, [pc, #264]	; (80068e0 <xTaskIncrementTick+0x158>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a40      	ldr	r2, [pc, #256]	; (80068dc <xTaskIncrementTick+0x154>)
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4a40      	ldr	r2, [pc, #256]	; (80068e0 <xTaskIncrementTick+0x158>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b3f      	ldr	r3, [pc, #252]	; (80068e4 <xTaskIncrementTick+0x15c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	4a3e      	ldr	r2, [pc, #248]	; (80068e4 <xTaskIncrementTick+0x15c>)
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	f000 fac7 	bl	8006d80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80067f2:	4b3d      	ldr	r3, [pc, #244]	; (80068e8 <xTaskIncrementTick+0x160>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d34c      	bcc.n	8006896 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067fc:	4b37      	ldr	r3, [pc, #220]	; (80068dc <xTaskIncrementTick+0x154>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006806:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <xTaskIncrementTick+0x160>)
 8006808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800680c:	601a      	str	r2, [r3, #0]
                    break;
 800680e:	e042      	b.n	8006896 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006810:	4b32      	ldr	r3, [pc, #200]	; (80068dc <xTaskIncrementTick+0x154>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d203      	bcs.n	8006830 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006828:	4a2f      	ldr	r2, [pc, #188]	; (80068e8 <xTaskIncrementTick+0x160>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800682e:	e032      	b.n	8006896 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	3304      	adds	r3, #4
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe ff8d 	bl	8005754 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3318      	adds	r3, #24
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe ff84 	bl	8005754 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f003 f810 	bl	8009874 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	2201      	movs	r2, #1
 800685a:	409a      	lsls	r2, r3
 800685c:	4b23      	ldr	r3, [pc, #140]	; (80068ec <xTaskIncrementTick+0x164>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4313      	orrs	r3, r2
 8006862:	4a22      	ldr	r2, [pc, #136]	; (80068ec <xTaskIncrementTick+0x164>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4a1f      	ldr	r2, [pc, #124]	; (80068f0 <xTaskIncrementTick+0x168>)
 8006874:	441a      	add	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f7fe ff0c 	bl	800569a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006886:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <xTaskIncrementTick+0x16c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	429a      	cmp	r2, r3
 800688e:	d3b5      	bcc.n	80067fc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006894:	e7b2      	b.n	80067fc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006896:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <xTaskIncrementTick+0x16c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4914      	ldr	r1, [pc, #80]	; (80068f0 <xTaskIncrementTick+0x168>)
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d901      	bls.n	80068b2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <xTaskIncrementTick+0x170>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d007      	beq.n	80068ca <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e004      	b.n	80068ca <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <xTaskIncrementTick+0x174>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <xTaskIncrementTick+0x174>)
 80068c8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80068ca:	697b      	ldr	r3, [r7, #20]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	200004ec 	.word	0x200004ec
 80068d8:	200004c8 	.word	0x200004c8
 80068dc:	2000047c 	.word	0x2000047c
 80068e0:	20000480 	.word	0x20000480
 80068e4:	200004dc 	.word	0x200004dc
 80068e8:	200004e4 	.word	0x200004e4
 80068ec:	200004cc 	.word	0x200004cc
 80068f0:	200003f0 	.word	0x200003f0
 80068f4:	200003ec 	.word	0x200003ec
 80068f8:	200004d8 	.word	0x200004d8
 80068fc:	200004d4 	.word	0x200004d4

08006900 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006906:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <vTaskSwitchContext+0xbc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800690e:	4b2c      	ldr	r3, [pc, #176]	; (80069c0 <vTaskSwitchContext+0xc0>)
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006914:	e04d      	b.n	80069b2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8006916:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <vTaskSwitchContext+0xc0>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691c:	4b29      	ldr	r3, [pc, #164]	; (80069c4 <vTaskSwitchContext+0xc4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	fab3 f383 	clz	r3, r3
 8006928:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800692a:	7afb      	ldrb	r3, [r7, #11]
 800692c:	f1c3 031f 	rsb	r3, r3, #31
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	4925      	ldr	r1, [pc, #148]	; (80069c8 <vTaskSwitchContext+0xc8>)
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10a      	bne.n	800695c <vTaskSwitchContext+0x5c>
        __asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	607b      	str	r3, [r7, #4]
    }
 8006958:	bf00      	nop
 800695a:	e7fe      	b.n	800695a <vTaskSwitchContext+0x5a>
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <vTaskSwitchContext+0xc8>)
 8006968:	4413      	add	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	605a      	str	r2, [r3, #4]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3308      	adds	r3, #8
 800697e:	429a      	cmp	r2, r3
 8006980:	d104      	bne.n	800698c <vTaskSwitchContext+0x8c>
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	4a0e      	ldr	r2, [pc, #56]	; (80069cc <vTaskSwitchContext+0xcc>)
 8006994:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <vTaskSwitchContext+0xcc>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4b0d      	ldr	r3, [pc, #52]	; (80069d0 <vTaskSwitchContext+0xd0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d102      	bne.n	80069a8 <vTaskSwitchContext+0xa8>
 80069a2:	f002 fec7 	bl	8009734 <SEGGER_SYSVIEW_OnIdle>
}
 80069a6:	e004      	b.n	80069b2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <vTaskSwitchContext+0xcc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 ff1f 	bl	80097f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80069b2:	bf00      	nop
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200004ec 	.word	0x200004ec
 80069c0:	200004d8 	.word	0x200004d8
 80069c4:	200004cc 	.word	0x200004cc
 80069c8:	200003f0 	.word	0x200003f0
 80069cc:	200003ec 	.word	0x200003ec
 80069d0:	200004e8 	.word	0x200004e8

080069d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
    }
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <vTaskPlaceOnEventList+0x44>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3318      	adds	r3, #24
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fe fe6d 	bl	80056e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a08:	2101      	movs	r1, #1
 8006a0a:	6838      	ldr	r0, [r7, #0]
 8006a0c:	f000 fa72 	bl	8006ef4 <prvAddCurrentTaskToDelayedList>
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200003ec 	.word	0x200003ec

08006a1c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	617b      	str	r3, [r7, #20]
    }
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vTaskPlaceOnEventListRestricted+0x58>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7fe fe24 	bl	800569a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a5c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006a5e:	2024      	movs	r0, #36	; 0x24
 8006a60:	f002 f96a 	bl	8008d38 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	68b8      	ldr	r0, [r7, #8]
 8006a68:	f000 fa44 	bl	8006ef4 <prvAddCurrentTaskToDelayedList>
    }
 8006a6c:	bf00      	nop
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	200003ec 	.word	0x200003ec

08006a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60fb      	str	r3, [r7, #12]
    }
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3318      	adds	r3, #24
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fe53 	bl	8005754 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aae:	4b1f      	ldr	r3, [pc, #124]	; (8006b2c <xTaskRemoveFromEventList+0xb4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d120      	bne.n	8006af8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fe4a 	bl	8005754 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 fed6 	bl	8009874 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006acc:	2201      	movs	r2, #1
 8006ace:	409a      	lsls	r2, r3
 8006ad0:	4b17      	ldr	r3, [pc, #92]	; (8006b30 <xTaskRemoveFromEventList+0xb8>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <xTaskRemoveFromEventList+0xb8>)
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <xTaskRemoveFromEventList+0xbc>)
 8006ae8:	441a      	add	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3304      	adds	r3, #4
 8006aee:	4619      	mov	r1, r3
 8006af0:	4610      	mov	r0, r2
 8006af2:	f7fe fdd2 	bl	800569a <vListInsertEnd>
 8006af6:	e005      	b.n	8006b04 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3318      	adds	r3, #24
 8006afc:	4619      	mov	r1, r3
 8006afe:	480e      	ldr	r0, [pc, #56]	; (8006b38 <xTaskRemoveFromEventList+0xc0>)
 8006b00:	f7fe fdcb 	bl	800569a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <xTaskRemoveFromEventList+0xc4>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d905      	bls.n	8006b1e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006b12:	2301      	movs	r3, #1
 8006b14:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <xTaskRemoveFromEventList+0xc8>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e001      	b.n	8006b22 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006b22:	697b      	ldr	r3, [r7, #20]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	200004ec 	.word	0x200004ec
 8006b30:	200004cc 	.word	0x200004cc
 8006b34:	200003f0 	.word	0x200003f0
 8006b38:	20000484 	.word	0x20000484
 8006b3c:	200003ec 	.word	0x200003ec
 8006b40:	200004d8 	.word	0x200004d8

08006b44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <vTaskInternalSetTimeOutState+0x24>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <vTaskInternalSetTimeOutState+0x28>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	200004dc 	.word	0x200004dc
 8006b6c:	200004c8 	.word	0x200004c8

08006b70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
    }
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60fb      	str	r3, [r7, #12]
    }
 8006bae:	bf00      	nop
 8006bb0:	e7fe      	b.n	8006bb0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006bb2:	f000 fed7 	bl	8007964 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006bb6:	4b1f      	ldr	r3, [pc, #124]	; (8006c34 <xTaskCheckForTimeOut+0xc4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bce:	d102      	bne.n	8006bd6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e026      	b.n	8006c24 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <xTaskCheckForTimeOut+0xc8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d00a      	beq.n	8006bf8 <xTaskCheckForTimeOut+0x88>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d305      	bcc.n	8006bf8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e015      	b.n	8006c24 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d20b      	bcs.n	8006c1a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	1ad2      	subs	r2, r2, r3
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff ff98 	bl	8006b44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	e004      	b.n	8006c24 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006c24:	f000 fece 	bl	80079c4 <vPortExitCritical>

    return xReturn;
 8006c28:	69fb      	ldr	r3, [r7, #28]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200004c8 	.word	0x200004c8
 8006c38:	200004dc 	.word	0x200004dc

08006c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006c40:	4b03      	ldr	r3, [pc, #12]	; (8006c50 <vTaskMissedYield+0x14>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	200004d8 	.word	0x200004d8

08006c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006c5c:	f000 f852 	bl	8006d04 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <prvIdleTask+0x28>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d9f9      	bls.n	8006c5c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006c68:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <prvIdleTask+0x2c>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006c78:	e7f0      	b.n	8006c5c <prvIdleTask+0x8>
 8006c7a:	bf00      	nop
 8006c7c:	200003f0 	.word	0x200003f0
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	e00c      	b.n	8006caa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <prvInitialiseTaskLists+0x60>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fcce 	bl	8005640 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d9ef      	bls.n	8006c90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006cb0:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cb2:	f7fe fcc5 	bl	8005640 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006cb6:	480d      	ldr	r0, [pc, #52]	; (8006cec <prvInitialiseTaskLists+0x68>)
 8006cb8:	f7fe fcc2 	bl	8005640 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006cbc:	480c      	ldr	r0, [pc, #48]	; (8006cf0 <prvInitialiseTaskLists+0x6c>)
 8006cbe:	f7fe fcbf 	bl	8005640 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006cc2:	480c      	ldr	r0, [pc, #48]	; (8006cf4 <prvInitialiseTaskLists+0x70>)
 8006cc4:	f7fe fcbc 	bl	8005640 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006cc8:	480b      	ldr	r0, [pc, #44]	; (8006cf8 <prvInitialiseTaskLists+0x74>)
 8006cca:	f7fe fcb9 	bl	8005640 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <prvInitialiseTaskLists+0x78>)
 8006cd0:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <prvInitialiseTaskLists+0x64>)
 8006cd2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <prvInitialiseTaskLists+0x7c>)
 8006cd6:	4a05      	ldr	r2, [pc, #20]	; (8006cec <prvInitialiseTaskLists+0x68>)
 8006cd8:	601a      	str	r2, [r3, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200003f0 	.word	0x200003f0
 8006ce8:	20000454 	.word	0x20000454
 8006cec:	20000468 	.word	0x20000468
 8006cf0:	20000484 	.word	0x20000484
 8006cf4:	20000498 	.word	0x20000498
 8006cf8:	200004b0 	.word	0x200004b0
 8006cfc:	2000047c 	.word	0x2000047c
 8006d00:	20000480 	.word	0x20000480

08006d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d0a:	e019      	b.n	8006d40 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006d0c:	f000 fe2a 	bl	8007964 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d10:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <prvCheckTasksWaitingTermination+0x50>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fd19 	bl	8005754 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006d22:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4a0b      	ldr	r2, [pc, #44]	; (8006d58 <prvCheckTasksWaitingTermination+0x54>)
 8006d2a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006d2c:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d34:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006d36:	f000 fe45 	bl	80079c4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f810 	bl	8006d60 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <prvCheckTasksWaitingTermination+0x58>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e1      	bne.n	8006d0c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000498 	.word	0x20000498
 8006d58:	200004c4 	.word	0x200004c4
 8006d5c:	200004ac 	.word	0x200004ac

08006d60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f805 	bl	8007d7c <vPortFree>
                vPortFree( pxTCB );
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f802 	bl	8007d7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <prvResetNextTaskUnblockTime+0x30>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d104      	bne.n	8006d98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006d8e:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <prvResetNextTaskUnblockTime+0x34>)
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006d96:	e005      	b.n	8006da4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <prvResetNextTaskUnblockTime+0x30>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <prvResetNextTaskUnblockTime+0x34>)
 8006da2:	6013      	str	r3, [r2, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	2000047c 	.word	0x2000047c
 8006db4:	200004e4 	.word	0x200004e4

08006db8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006dbe:	4b0b      	ldr	r3, [pc, #44]	; (8006dec <xTaskGetSchedulerState+0x34>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	607b      	str	r3, [r7, #4]
 8006dca:	e008      	b.n	8006dde <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dcc:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <xTaskGetSchedulerState+0x38>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	e001      	b.n	8006dde <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006dde:	687b      	ldr	r3, [r7, #4]
    }
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	200004d0 	.word	0x200004d0
 8006df0:	200004ec 	.word	0x200004ec

08006df4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d068      	beq.n	8006edc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006e0a:	4b37      	ldr	r3, [pc, #220]	; (8006ee8 <xTaskPriorityDisinherit+0xf4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d00a      	beq.n	8006e2a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
    }
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	60bb      	str	r3, [r7, #8]
    }
 8006e44:	bf00      	nop
 8006e46:	e7fe      	b.n	8006e46 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d03e      	beq.n	8006edc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d13a      	bne.n	8006edc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fc72 	bl	8005754 <uxListRemove>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	43da      	mvns	r2, r3
 8006e82:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <xTaskPriorityDisinherit+0xf8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4013      	ands	r3, r2
 8006e88:	4a18      	ldr	r2, [pc, #96]	; (8006eec <xTaskPriorityDisinherit+0xf8>)
 8006e8a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	204a      	movs	r0, #74	; 0x4a
 8006e92:	f001 ff6f 	bl	8008d74 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	f1c3 0205 	rsb	r2, r3, #5
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	2201      	movs	r2, #1
 8006eb0:	409a      	lsls	r2, r3
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <xTaskPriorityDisinherit+0xf8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <xTaskPriorityDisinherit+0xf8>)
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <xTaskPriorityDisinherit+0xfc>)
 8006eca:	441a      	add	r2, r3
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f7fe fbe1 	bl	800569a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006edc:	697b      	ldr	r3, [r7, #20]
    }
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	200003ec 	.word	0x200003ec
 8006eec:	200004cc 	.word	0x200004cc
 8006ef0:	200003f0 	.word	0x200003f0

08006ef4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006efe:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f04:	4b31      	ldr	r3, [pc, #196]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fc22 	bl	8005754 <uxListRemove>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f16:	4b2d      	ldr	r3, [pc, #180]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43da      	mvns	r2, r3
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006f2c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f34:	d110      	bne.n	8006f58 <prvAddCurrentTaskToDelayedList+0x64>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00d      	beq.n	8006f58 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8006f3c:	4b23      	ldr	r3, [pc, #140]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	211b      	movs	r1, #27
 8006f42:	4618      	mov	r0, r3
 8006f44:	f002 fcd8 	bl	80098f8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f48:	4b20      	ldr	r3, [pc, #128]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4820      	ldr	r0, [pc, #128]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006f52:	f7fe fba2 	bl	800569a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006f56:	e032      	b.n	8006fbe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f60:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d20f      	bcs.n	8006f90 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2104      	movs	r1, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f002 fcbe 	bl	80098f8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f7fe fbaa 	bl	80056e2 <vListInsert>
}
 8006f8e:	e016      	b.n	8006fbe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006f90:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2104      	movs	r1, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f002 fcae 	bl	80098f8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <prvAddCurrentTaskToDelayedList+0xe8>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7fe fb9a 	bl	80056e2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0xec>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d202      	bcs.n	8006fbe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8006fb8:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0xec>)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6013      	str	r3, [r2, #0]
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200004c8 	.word	0x200004c8
 8006fcc:	200003ec 	.word	0x200003ec
 8006fd0:	200004cc 	.word	0x200004cc
 8006fd4:	200004b0 	.word	0x200004b0
 8006fd8:	20000480 	.word	0x20000480
 8006fdc:	2000047c 	.word	0x2000047c
 8006fe0:	200004e4 	.word	0x200004e4

08006fe4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006fee:	f000 fad5 	bl	800759c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <xTimerCreateTimerTask+0x54>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <xTimerCreateTimerTask+0x58>)
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	2302      	movs	r3, #2
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007008:	490d      	ldr	r1, [pc, #52]	; (8007040 <xTimerCreateTimerTask+0x5c>)
 800700a:	480e      	ldr	r0, [pc, #56]	; (8007044 <xTimerCreateTimerTask+0x60>)
 800700c:	f7ff f926 	bl	800625c <xTaskCreate>
 8007010:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	603b      	str	r3, [r7, #0]
    }
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800702e:	687b      	ldr	r3, [r7, #4]
    }
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20000520 	.word	0x20000520
 800703c:	20000524 	.word	0x20000524
 8007040:	0800b38c 	.word	0x0800b38c
 8007044:	0800717d 	.word	0x0800717d

08007048 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007056:	2300      	movs	r3, #0
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xTimerGenericCommand+0x2e>
        __asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	623b      	str	r3, [r7, #32]
    }
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007076:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <xTimerGenericCommand+0x98>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d02a      	beq.n	80070d4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b05      	cmp	r3, #5
 800708e:	dc18      	bgt.n	80070c2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007090:	f7ff fe92 	bl	8006db8 <xTaskGetSchedulerState>
 8007094:	4603      	mov	r3, r0
 8007096:	2b02      	cmp	r3, #2
 8007098:	d109      	bne.n	80070ae <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800709a:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <xTimerGenericCommand+0x98>)
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	f107 0114 	add.w	r1, r7, #20
 80070a2:	2300      	movs	r3, #0
 80070a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a6:	f7fe fc6f 	bl	8005988 <xQueueGenericSend>
 80070aa:	6278      	str	r0, [r7, #36]	; 0x24
 80070ac:	e012      	b.n	80070d4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070ae:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <xTimerGenericCommand+0x98>)
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f107 0114 	add.w	r1, r7, #20
 80070b6:	2300      	movs	r3, #0
 80070b8:	2200      	movs	r2, #0
 80070ba:	f7fe fc65 	bl	8005988 <xQueueGenericSend>
 80070be:	6278      	str	r0, [r7, #36]	; 0x24
 80070c0:	e008      	b.n	80070d4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <xTimerGenericCommand+0x98>)
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	f107 0114 	add.w	r1, r7, #20
 80070ca:	2300      	movs	r3, #0
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	f7fe fd81 	bl	8005bd4 <xQueueGenericSendFromISR>
 80070d2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80070d6:	4618      	mov	r0, r3
 80070d8:	3728      	adds	r7, #40	; 0x28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000520 	.word	0x20000520

080070e4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ee:	4b22      	ldr	r3, [pc, #136]	; (8007178 <prvProcessExpiredTimer+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fb29 	bl	8005754 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d022      	beq.n	8007156 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	18d1      	adds	r1, r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	6978      	ldr	r0, [r7, #20]
 800711e:	f000 f8d1 	bl	80072c4 <prvInsertTimerInActiveList>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01f      	beq.n	8007168 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	2100      	movs	r1, #0
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	f7ff ff88 	bl	8007048 <xTimerGenericCommand>
 8007138:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d113      	bne.n	8007168 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60fb      	str	r3, [r7, #12]
    }
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	b2da      	uxtb	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	6978      	ldr	r0, [r7, #20]
 800716e:	4798      	blx	r3
    }
 8007170:	bf00      	nop
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000518 	.word	0x20000518

0800717c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f857 	bl	800723c <prvGetNextExpireTime>
 800718e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f803 	bl	80071a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800719a:	f000 f8d5 	bl	8007348 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800719e:	e7f1      	b.n	8007184 <prvTimerTask+0x8>

080071a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80071aa:	f7ff fa1d 	bl	80065e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ae:	f107 0308 	add.w	r3, r7, #8
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 f866 	bl	8007284 <prvSampleTimeNow>
 80071b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d130      	bne.n	8007222 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <prvProcessTimerOrBlockTask+0x3c>
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d806      	bhi.n	80071dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80071ce:	f7ff fa19 	bl	8006604 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff ff85 	bl	80070e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80071da:	e024      	b.n	8007226 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <prvProcessTimerOrBlockTask+0x90>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <prvProcessTimerOrBlockTask+0x50>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <prvProcessTimerOrBlockTask+0x52>
 80071f0:	2300      	movs	r3, #0
 80071f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071f4:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <prvProcessTimerOrBlockTask+0x94>)
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	f7fe fff7 	bl	80061f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007206:	f7ff f9fd 	bl	8006604 <xTaskResumeAll>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10a      	bne.n	8007226 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <prvProcessTimerOrBlockTask+0x98>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
    }
 8007220:	e001      	b.n	8007226 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007222:	f7ff f9ef 	bl	8006604 <xTaskResumeAll>
    }
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000051c 	.word	0x2000051c
 8007234:	20000520 	.word	0x20000520
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007244:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <prvGetNextExpireTime+0x44>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <prvGetNextExpireTime+0x16>
 800724e:	2201      	movs	r2, #1
 8007250:	e000      	b.n	8007254 <prvGetNextExpireTime+0x18>
 8007252:	2200      	movs	r2, #0
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d105      	bne.n	800726c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <prvGetNextExpireTime+0x44>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e001      	b.n	8007270 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007270:	68fb      	ldr	r3, [r7, #12]
    }
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20000518 	.word	0x20000518

08007284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800728c:	f7ff fa5a 	bl	8006744 <xTaskGetTickCount>
 8007290:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007292:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <prvSampleTimeNow+0x3c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	429a      	cmp	r2, r3
 800729a:	d205      	bcs.n	80072a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800729c:	f000 f91a 	bl	80074d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e002      	b.n	80072ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80072ae:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <prvSampleTimeNow+0x3c>)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80072b4:	68fb      	ldr	r3, [r7, #12]
    }
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000528 	.word	0x20000528

080072c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d812      	bhi.n	8007310 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d302      	bcc.n	80072fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	e01b      	b.n	8007336 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072fe:	4b10      	ldr	r3, [pc, #64]	; (8007340 <prvInsertTimerInActiveList+0x7c>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe f9ea 	bl	80056e2 <vListInsert>
 800730e:	e012      	b.n	8007336 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d206      	bcs.n	8007326 <prvInsertTimerInActiveList+0x62>
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d302      	bcc.n	8007326 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007320:	2301      	movs	r3, #1
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e007      	b.n	8007336 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <prvInsertTimerInActiveList+0x80>)
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3304      	adds	r3, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7fe f9d6 	bl	80056e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007336:	697b      	ldr	r3, [r7, #20]
    }
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	2000051c 	.word	0x2000051c
 8007344:	20000518 	.word	0x20000518

08007348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007348:	b580      	push	{r7, lr}
 800734a:	b08c      	sub	sp, #48	; 0x30
 800734c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800734e:	e0ae      	b.n	80074ae <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f2c0 80ab 	blt.w	80074ae <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	3304      	adds	r3, #4
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe f9f3 	bl	8005754 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff ff87 	bl	8007284 <prvSampleTimeNow>
 8007376:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b09      	cmp	r3, #9
 800737c:	f200 8096 	bhi.w	80074ac <prvProcessReceivedCommands+0x164>
 8007380:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <prvProcessReceivedCommands+0x40>)
 8007382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007386:	bf00      	nop
 8007388:	080073b1 	.word	0x080073b1
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b1 	.word	0x080073b1
 8007394:	08007425 	.word	0x08007425
 8007398:	08007439 	.word	0x08007439
 800739c:	08007483 	.word	0x08007483
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073b1 	.word	0x080073b1
 80073a8:	08007425 	.word	0x08007425
 80073ac:	08007439 	.word	0x08007439
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b6:	f043 0301 	orr.w	r3, r3, #1
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	18d1      	adds	r1, r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a3a      	ldr	r2, [r7, #32]
 80073ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073d0:	f7ff ff78 	bl	80072c4 <prvInsertTimerInActiveList>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d069      	beq.n	80074ae <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073e0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d05e      	beq.n	80074ae <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	441a      	add	r2, r3
 80073f8:	2300      	movs	r3, #0
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	2300      	movs	r3, #0
 80073fe:	2100      	movs	r1, #0
 8007400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007402:	f7ff fe21 	bl	8007048 <xTimerGenericCommand>
 8007406:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d14f      	bne.n	80074ae <prvProcessReceivedCommands+0x166>
        __asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61bb      	str	r3, [r7, #24]
    }
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007436:	e03a      	b.n	80074ae <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	b2da      	uxtb	r2, r3
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10a      	bne.n	800746e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	617b      	str	r3, [r7, #20]
    }
 800746a:	bf00      	nop
 800746c:	e7fe      	b.n	800746c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	18d1      	adds	r1, r2, r3
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	6a3a      	ldr	r2, [r7, #32]
 800747a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800747c:	f7ff ff22 	bl	80072c4 <prvInsertTimerInActiveList>
                        break;
 8007480:	e015      	b.n	80074ae <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d103      	bne.n	8007498 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007492:	f000 fc73 	bl	8007d7c <vPortFree>
 8007496:	e00a      	b.n	80074ae <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80074aa:	e000      	b.n	80074ae <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 80074ac:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ae:	4b08      	ldr	r3, [pc, #32]	; (80074d0 <prvProcessReceivedCommands+0x188>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f107 0108 	add.w	r1, r7, #8
 80074b6:	2200      	movs	r2, #0
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fc49 	bl	8005d50 <xQueueReceive>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f47f af45 	bne.w	8007350 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	3728      	adds	r7, #40	; 0x28
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000520 	.word	0x20000520

080074d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074da:	e048      	b.n	800756e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074dc:	4b2d      	ldr	r3, [pc, #180]	; (8007594 <prvSwitchTimerLists+0xc0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e6:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <prvSwitchTimerLists+0xc0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe f92d 	bl	8005754 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d02e      	beq.n	800756e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	d90e      	bls.n	8007540 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <prvSwitchTimerLists+0xc0>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f7fe f8d2 	bl	80056e2 <vListInsert>
 800753e:	e016      	b.n	800756e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007540:	2300      	movs	r3, #0
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	2100      	movs	r1, #0
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fd7c 	bl	8007048 <xTimerGenericCommand>
 8007550:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	603b      	str	r3, [r7, #0]
    }
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <prvSwitchTimerLists+0xc0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1b1      	bne.n	80074dc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <prvSwitchTimerLists+0xc0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800757e:	4b06      	ldr	r3, [pc, #24]	; (8007598 <prvSwitchTimerLists+0xc4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a04      	ldr	r2, [pc, #16]	; (8007594 <prvSwitchTimerLists+0xc0>)
 8007584:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007586:	4a04      	ldr	r2, [pc, #16]	; (8007598 <prvSwitchTimerLists+0xc4>)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	6013      	str	r3, [r2, #0]
    }
 800758c:	bf00      	nop
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000518 	.word	0x20000518
 8007598:	2000051c 	.word	0x2000051c

0800759c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80075a0:	f000 f9e0 	bl	8007964 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80075a4:	4b12      	ldr	r3, [pc, #72]	; (80075f0 <prvCheckForValidListAndQueue+0x54>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11d      	bne.n	80075e8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80075ac:	4811      	ldr	r0, [pc, #68]	; (80075f4 <prvCheckForValidListAndQueue+0x58>)
 80075ae:	f7fe f847 	bl	8005640 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80075b2:	4811      	ldr	r0, [pc, #68]	; (80075f8 <prvCheckForValidListAndQueue+0x5c>)
 80075b4:	f7fe f844 	bl	8005640 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <prvCheckForValidListAndQueue+0x60>)
 80075ba:	4a0e      	ldr	r2, [pc, #56]	; (80075f4 <prvCheckForValidListAndQueue+0x58>)
 80075bc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80075be:	4b10      	ldr	r3, [pc, #64]	; (8007600 <prvCheckForValidListAndQueue+0x64>)
 80075c0:	4a0d      	ldr	r2, [pc, #52]	; (80075f8 <prvCheckForValidListAndQueue+0x5c>)
 80075c2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80075c4:	2200      	movs	r2, #0
 80075c6:	210c      	movs	r1, #12
 80075c8:	200a      	movs	r0, #10
 80075ca:	f7fe f955 	bl	8005878 <xQueueGenericCreate>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a07      	ldr	r2, [pc, #28]	; (80075f0 <prvCheckForValidListAndQueue+0x54>)
 80075d2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <prvCheckForValidListAndQueue+0x54>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d005      	beq.n	80075e8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075dc:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <prvCheckForValidListAndQueue+0x54>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4908      	ldr	r1, [pc, #32]	; (8007604 <prvCheckForValidListAndQueue+0x68>)
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fdd4 	bl	8006190 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80075e8:	f000 f9ec 	bl	80079c4 <vPortExitCritical>
    }
 80075ec:	bf00      	nop
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000520 	.word	0x20000520
 80075f4:	200004f0 	.word	0x200004f0
 80075f8:	20000504 	.word	0x20000504
 80075fc:	20000518 	.word	0x20000518
 8007600:	2000051c 	.word	0x2000051c
 8007604:	0800b394 	.word	0x0800b394

08007608 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3b04      	subs	r3, #4
 8007618:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007620:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3b04      	subs	r3, #4
 8007626:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f023 0201 	bic.w	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b04      	subs	r3, #4
 8007636:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007638:	4a0c      	ldr	r2, [pc, #48]	; (800766c <pxPortInitialiseStack+0x64>)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3b14      	subs	r3, #20
 8007642:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b04      	subs	r3, #4
 800764e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f06f 0202 	mvn.w	r2, #2
 8007656:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3b20      	subs	r3, #32
 800765c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	08007671 	.word	0x08007671

08007670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <prvTaskExitError+0x54>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007682:	d00a      	beq.n	800769a <prvTaskExitError+0x2a>
        __asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
    }
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <prvTaskExitError+0x28>
        __asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60bb      	str	r3, [r7, #8]
    }
 80076ac:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80076ae:	bf00      	nop
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0fc      	beq.n	80076b0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	200000d8 	.word	0x200000d8
	...

080076d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80076d0:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <pxCurrentTCBConst2>)
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	6808      	ldr	r0, [r1, #0]
 80076d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076da:	f380 8809 	msr	PSP, r0
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f04f 0000 	mov.w	r0, #0
 80076e6:	f380 8811 	msr	BASEPRI, r0
 80076ea:	4770      	bx	lr
 80076ec:	f3af 8000 	nop.w

080076f0 <pxCurrentTCBConst2>:
 80076f0:	200003ec 	.word	0x200003ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop

080076f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80076f8:	4808      	ldr	r0, [pc, #32]	; (800771c <prvPortStartFirstTask+0x24>)
 80076fa:	6800      	ldr	r0, [r0, #0]
 80076fc:	6800      	ldr	r0, [r0, #0]
 80076fe:	f380 8808 	msr	MSP, r0
 8007702:	f04f 0000 	mov.w	r0, #0
 8007706:	f380 8814 	msr	CONTROL, r0
 800770a:	b662      	cpsie	i
 800770c:	b661      	cpsie	f
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	df00      	svc	0
 8007718:	bf00      	nop
 800771a:	0000      	.short	0x0000
 800771c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop

08007724 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800772a:	4b46      	ldr	r3, [pc, #280]	; (8007844 <xPortStartScheduler+0x120>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a46      	ldr	r2, [pc, #280]	; (8007848 <xPortStartScheduler+0x124>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d10a      	bne.n	800774a <xPortStartScheduler+0x26>
        __asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	613b      	str	r3, [r7, #16]
    }
 8007746:	bf00      	nop
 8007748:	e7fe      	b.n	8007748 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800774a:	4b3e      	ldr	r3, [pc, #248]	; (8007844 <xPortStartScheduler+0x120>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a3f      	ldr	r2, [pc, #252]	; (800784c <xPortStartScheduler+0x128>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d10a      	bne.n	800776a <xPortStartScheduler+0x46>
        __asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60fb      	str	r3, [r7, #12]
    }
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800776a:	4b39      	ldr	r3, [pc, #228]	; (8007850 <xPortStartScheduler+0x12c>)
 800776c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	22ff      	movs	r2, #255	; 0xff
 800777a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800778c:	b2da      	uxtb	r2, r3
 800778e:	4b31      	ldr	r3, [pc, #196]	; (8007854 <xPortStartScheduler+0x130>)
 8007790:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007792:	4b31      	ldr	r3, [pc, #196]	; (8007858 <xPortStartScheduler+0x134>)
 8007794:	2207      	movs	r2, #7
 8007796:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007798:	e009      	b.n	80077ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800779a:	4b2f      	ldr	r3, [pc, #188]	; (8007858 <xPortStartScheduler+0x134>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3b01      	subs	r3, #1
 80077a0:	4a2d      	ldr	r2, [pc, #180]	; (8007858 <xPortStartScheduler+0x134>)
 80077a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	d0ef      	beq.n	800779a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077ba:	4b27      	ldr	r3, [pc, #156]	; (8007858 <xPortStartScheduler+0x134>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f1c3 0307 	rsb	r3, r3, #7
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d00a      	beq.n	80077dc <xPortStartScheduler+0xb8>
        __asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60bb      	str	r3, [r7, #8]
    }
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077dc:	4b1e      	ldr	r3, [pc, #120]	; (8007858 <xPortStartScheduler+0x134>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <xPortStartScheduler+0x134>)
 80077e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077e6:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <xPortStartScheduler+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077ee:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <xPortStartScheduler+0x134>)
 80077f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <xPortStartScheduler+0x138>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a17      	ldr	r2, [pc, #92]	; (800785c <xPortStartScheduler+0x138>)
 8007800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007804:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007806:	4b15      	ldr	r3, [pc, #84]	; (800785c <xPortStartScheduler+0x138>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a14      	ldr	r2, [pc, #80]	; (800785c <xPortStartScheduler+0x138>)
 800780c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007810:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007812:	f000 f963 	bl	8007adc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <xPortStartScheduler+0x13c>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800781c:	f000 f982 	bl	8007b24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007820:	4b10      	ldr	r3, [pc, #64]	; (8007864 <xPortStartScheduler+0x140>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a0f      	ldr	r2, [pc, #60]	; (8007864 <xPortStartScheduler+0x140>)
 8007826:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800782a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800782c:	f7ff ff64 	bl	80076f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007830:	f7ff f866 	bl	8006900 <vTaskSwitchContext>
    prvTaskExitError();
 8007834:	f7ff ff1c 	bl	8007670 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	e000ed00 	.word	0xe000ed00
 8007848:	410fc271 	.word	0x410fc271
 800784c:	410fc270 	.word	0x410fc270
 8007850:	e000e400 	.word	0xe000e400
 8007854:	2000052c 	.word	0x2000052c
 8007858:	20000530 	.word	0x20000530
 800785c:	e000ed20 	.word	0xe000ed20
 8007860:	200000d8 	.word	0x200000d8
 8007864:	e000ef34 	.word	0xe000ef34

08007868 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800786e:	4b37      	ldr	r3, [pc, #220]	; (800794c <vInitPrioGroupValue+0xe4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a37      	ldr	r2, [pc, #220]	; (8007950 <vInitPrioGroupValue+0xe8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d10a      	bne.n	800788e <vInitPrioGroupValue+0x26>
        __asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	613b      	str	r3, [r7, #16]
    }
 800788a:	bf00      	nop
 800788c:	e7fe      	b.n	800788c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800788e:	4b2f      	ldr	r3, [pc, #188]	; (800794c <vInitPrioGroupValue+0xe4>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a30      	ldr	r2, [pc, #192]	; (8007954 <vInitPrioGroupValue+0xec>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10a      	bne.n	80078ae <vInitPrioGroupValue+0x46>
        __asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
    }
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078ae:	4b2a      	ldr	r3, [pc, #168]	; (8007958 <vInitPrioGroupValue+0xf0>)
 80078b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	22ff      	movs	r2, #255	; 0xff
 80078be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	4b22      	ldr	r3, [pc, #136]	; (800795c <vInitPrioGroupValue+0xf4>)
 80078d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078d6:	4b22      	ldr	r3, [pc, #136]	; (8007960 <vInitPrioGroupValue+0xf8>)
 80078d8:	2207      	movs	r2, #7
 80078da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078dc:	e009      	b.n	80078f2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80078de:	4b20      	ldr	r3, [pc, #128]	; (8007960 <vInitPrioGroupValue+0xf8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <vInitPrioGroupValue+0xf8>)
 80078e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078f2:	78fb      	ldrb	r3, [r7, #3]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fa:	2b80      	cmp	r3, #128	; 0x80
 80078fc:	d0ef      	beq.n	80078de <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078fe:	4b18      	ldr	r3, [pc, #96]	; (8007960 <vInitPrioGroupValue+0xf8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f1c3 0307 	rsb	r3, r3, #7
 8007906:	2b04      	cmp	r3, #4
 8007908:	d00a      	beq.n	8007920 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	60bb      	str	r3, [r7, #8]
    }
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <vInitPrioGroupValue+0xf8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <vInitPrioGroupValue+0xf8>)
 8007928:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <vInitPrioGroupValue+0xf8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007932:	4a0b      	ldr	r2, [pc, #44]	; (8007960 <vInitPrioGroupValue+0xf8>)
 8007934:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	b2da      	uxtb	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	e000ed00 	.word	0xe000ed00
 8007950:	410fc271 	.word	0x410fc271
 8007954:	410fc270 	.word	0x410fc270
 8007958:	e000e400 	.word	0xe000e400
 800795c:	2000052c 	.word	0x2000052c
 8007960:	20000530 	.word	0x20000530

08007964 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
        __asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	607b      	str	r3, [r7, #4]
    }
 800797c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800797e:	4b0f      	ldr	r3, [pc, #60]	; (80079bc <vPortEnterCritical+0x58>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a0d      	ldr	r2, [pc, #52]	; (80079bc <vPortEnterCritical+0x58>)
 8007986:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <vPortEnterCritical+0x58>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10f      	bne.n	80079b0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortEnterCritical+0x5c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <vPortEnterCritical+0x4c>
        __asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	603b      	str	r3, [r7, #0]
    }
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <vPortEnterCritical+0x4a>
    }
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	200000d8 	.word	0x200000d8
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <vPortExitCritical+0x50>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <vPortExitCritical+0x24>
        __asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	607b      	str	r3, [r7, #4]
    }
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <vPortExitCritical+0x50>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <vPortExitCritical+0x50>)
 80079f0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80079f2:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <vPortExitCritical+0x50>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <vPortExitCritical+0x42>
 80079fa:	2300      	movs	r3, #0
 80079fc:	603b      	str	r3, [r7, #0]
        __asm volatile
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	f383 8811 	msr	BASEPRI, r3
    }
 8007a04:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	200000d8 	.word	0x200000d8
	...

08007a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007a20:	f3ef 8009 	mrs	r0, PSP
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <pxCurrentTCBConst>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f01e 0f10 	tst.w	lr, #16
 8007a30:	bf08      	it	eq
 8007a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	6010      	str	r0, [r2, #0]
 8007a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a44:	f380 8811 	msr	BASEPRI, r0
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f7fe ff56 	bl	8006900 <vTaskSwitchContext>
 8007a54:	f04f 0000 	mov.w	r0, #0
 8007a58:	f380 8811 	msr	BASEPRI, r0
 8007a5c:	bc09      	pop	{r0, r3}
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	6808      	ldr	r0, [r1, #0]
 8007a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a66:	f01e 0f10 	tst.w	lr, #16
 8007a6a:	bf08      	it	eq
 8007a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a70:	f380 8809 	msr	PSP, r0
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst>:
 8007a80:	200003ec 	.word	0x200003ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
        __asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	607b      	str	r3, [r7, #4]
    }
 8007aa0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007aa2:	f001 fdcd 	bl	8009640 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007aa6:	f7fe fe6f 	bl	8006788 <xTaskIncrementTick>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007ab0:	f001 fe24 	bl	80096fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ab4:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <SysTick_Handler+0x50>)
 8007ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	e001      	b.n	8007ac2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8007abe:	f001 fe01 	bl	80096c4 <SEGGER_SYSVIEW_RecordExitISR>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	f383 8811 	msr	BASEPRI, r3
    }
 8007acc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortSetupTimerInterrupt+0x38>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vPortSetupTimerInterrupt+0x3c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <vPortSetupTimerInterrupt+0x40>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <vPortSetupTimerInterrupt+0x44>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007afe:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007b00:	2207      	movs	r2, #7
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	e000e010 	.word	0xe000e010
 8007b14:	e000e018 	.word	0xe000e018
 8007b18:	20000098 	.word	0x20000098
 8007b1c:	10624dd3 	.word	0x10624dd3
 8007b20:	e000e014 	.word	0xe000e014

08007b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b34 <vPortEnableVFP+0x10>
 8007b28:	6801      	ldr	r1, [r0, #0]
 8007b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b2e:	6001      	str	r1, [r0, #0]
 8007b30:	4770      	bx	lr
 8007b32:	0000      	.short	0x0000
 8007b34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop

08007b3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007b42:	f3ef 8305 	mrs	r3, IPSR
 8007b46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b0f      	cmp	r3, #15
 8007b4c:	d914      	bls.n	8007b78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <vPortValidateInterruptPriority+0x70>)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b58:	4b15      	ldr	r3, [pc, #84]	; (8007bb0 <vPortValidateInterruptPriority+0x74>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	7afa      	ldrb	r2, [r7, #11]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d20a      	bcs.n	8007b78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	607b      	str	r3, [r7, #4]
    }
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <vPortValidateInterruptPriority+0x78>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b80:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <vPortValidateInterruptPriority+0x7c>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d90a      	bls.n	8007b9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	603b      	str	r3, [r7, #0]
    }
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <vPortValidateInterruptPriority+0x60>
    }
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	e000e3f0 	.word	0xe000e3f0
 8007bb0:	2000052c 	.word	0x2000052c
 8007bb4:	e000ed0c 	.word	0xe000ed0c
 8007bb8:	20000530 	.word	0x20000530

08007bbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007bc8:	f7fe fd0e 	bl	80065e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007bcc:	4b65      	ldr	r3, [pc, #404]	; (8007d64 <pvPortMalloc+0x1a8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007bd4:	f000 f934 	bl	8007e40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bd8:	4b63      	ldr	r3, [pc, #396]	; (8007d68 <pvPortMalloc+0x1ac>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4013      	ands	r3, r2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 80a7 	bne.w	8007d34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02d      	beq.n	8007c48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007bec:	2208      	movs	r2, #8
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d227      	bcs.n	8007c48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d021      	beq.n	8007c4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f023 0307 	bic.w	r3, r3, #7
 8007c10:	3308      	adds	r3, #8
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d214      	bcs.n	8007c42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f023 0307 	bic.w	r3, r3, #7
 8007c1e:	3308      	adds	r3, #8
 8007c20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d010      	beq.n	8007c4e <pvPortMalloc+0x92>
        __asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	617b      	str	r3, [r7, #20]
    }
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c46:	e002      	b.n	8007c4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	607b      	str	r3, [r7, #4]
 8007c4c:	e000      	b.n	8007c50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d06e      	beq.n	8007d34 <pvPortMalloc+0x178>
 8007c56:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <pvPortMalloc+0x1b0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d869      	bhi.n	8007d34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007c60:	4b43      	ldr	r3, [pc, #268]	; (8007d70 <pvPortMalloc+0x1b4>)
 8007c62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007c64:	4b42      	ldr	r3, [pc, #264]	; (8007d70 <pvPortMalloc+0x1b4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c6a:	e004      	b.n	8007c76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d903      	bls.n	8007c88 <pvPortMalloc+0xcc>
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1f1      	bne.n	8007c6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007c88:	4b36      	ldr	r3, [pc, #216]	; (8007d64 <pvPortMalloc+0x1a8>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d050      	beq.n	8007d34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2208      	movs	r2, #8
 8007c98:	4413      	add	r3, r2
 8007c9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	1ad2      	subs	r2, r2, r3
 8007cac:	2308      	movs	r3, #8
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d91f      	bls.n	8007cf4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4413      	add	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <pvPortMalloc+0x120>
        __asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	613b      	str	r3, [r7, #16]
    }
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	1ad2      	subs	r2, r2, r3
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cee:	69b8      	ldr	r0, [r7, #24]
 8007cf0:	f000 f908 	bl	8007f04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cf4:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <pvPortMalloc+0x1b0>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	4a1b      	ldr	r2, [pc, #108]	; (8007d6c <pvPortMalloc+0x1b0>)
 8007d00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d02:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <pvPortMalloc+0x1b0>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b1b      	ldr	r3, [pc, #108]	; (8007d74 <pvPortMalloc+0x1b8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d203      	bcs.n	8007d16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d0e:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <pvPortMalloc+0x1b0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <pvPortMalloc+0x1b8>)
 8007d14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <pvPortMalloc+0x1ac>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007d2a:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <pvPortMalloc+0x1bc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <pvPortMalloc+0x1bc>)
 8007d32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007d34:	f7fe fc66 	bl	8006604 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <pvPortMalloc+0x19c>
        __asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60fb      	str	r3, [r7, #12]
    }
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <pvPortMalloc+0x19a>
    return pvReturn;
 8007d58:	69fb      	ldr	r3, [r7, #28]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3728      	adds	r7, #40	; 0x28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	2001313c 	.word	0x2001313c
 8007d68:	20013150 	.word	0x20013150
 8007d6c:	20013140 	.word	0x20013140
 8007d70:	20013134 	.word	0x20013134
 8007d74:	20013144 	.word	0x20013144
 8007d78:	20013148 	.word	0x20013148

08007d7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d04d      	beq.n	8007e2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007d8e:	2308      	movs	r3, #8
 8007d90:	425b      	negs	r3, r3
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	4b24      	ldr	r3, [pc, #144]	; (8007e34 <vPortFree+0xb8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4013      	ands	r3, r2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <vPortFree+0x44>
        __asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	60fb      	str	r3, [r7, #12]
    }
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <vPortFree+0x62>
        __asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60bb      	str	r3, [r7, #8]
    }
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <vPortFree+0xb8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4013      	ands	r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01e      	beq.n	8007e2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d11a      	bne.n	8007e2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <vPortFree+0xb8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	401a      	ands	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007e04:	f7fe fbf0 	bl	80065e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <vPortFree+0xbc>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4413      	add	r3, r2
 8007e12:	4a09      	ldr	r2, [pc, #36]	; (8007e38 <vPortFree+0xbc>)
 8007e14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e16:	6938      	ldr	r0, [r7, #16]
 8007e18:	f000 f874 	bl	8007f04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <vPortFree+0xc0>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	4a06      	ldr	r2, [pc, #24]	; (8007e3c <vPortFree+0xc0>)
 8007e24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007e26:	f7fe fbed 	bl	8006604 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007e2a:	bf00      	nop
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20013150 	.word	0x20013150
 8007e38:	20013140 	.word	0x20013140
 8007e3c:	2001314c 	.word	0x2001314c

08007e40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007e4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007e4c:	4b27      	ldr	r3, [pc, #156]	; (8007eec <prvHeapInit+0xac>)
 8007e4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f003 0307 	and.w	r3, r3, #7
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3307      	adds	r3, #7
 8007e5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0307 	bic.w	r3, r3, #7
 8007e66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	4a1f      	ldr	r2, [pc, #124]	; (8007eec <prvHeapInit+0xac>)
 8007e70:	4413      	add	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e78:	4a1d      	ldr	r2, [pc, #116]	; (8007ef0 <prvHeapInit+0xb0>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007e7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ef0 <prvHeapInit+0xb0>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	4413      	add	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0307 	bic.w	r3, r3, #7
 8007e9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <prvHeapInit+0xb4>)
 8007ea0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <prvHeapInit+0xb4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007eaa:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <prvHeapInit+0xb4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <prvHeapInit+0xb4>)
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	4a0a      	ldr	r2, [pc, #40]	; (8007ef8 <prvHeapInit+0xb8>)
 8007ece:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a09      	ldr	r2, [pc, #36]	; (8007efc <prvHeapInit+0xbc>)
 8007ed6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <prvHeapInit+0xc0>)
 8007eda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ede:	601a      	str	r2, [r3, #0]
}
 8007ee0:	bf00      	nop
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20000534 	.word	0x20000534
 8007ef0:	20013134 	.word	0x20013134
 8007ef4:	2001313c 	.word	0x2001313c
 8007ef8:	20013144 	.word	0x20013144
 8007efc:	20013140 	.word	0x20013140
 8007f00:	20013150 	.word	0x20013150

08007f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f0c:	4b28      	ldr	r3, [pc, #160]	; (8007fb0 <prvInsertBlockIntoFreeList+0xac>)
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e002      	b.n	8007f18 <prvInsertBlockIntoFreeList+0x14>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d8f7      	bhi.n	8007f12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d108      	bne.n	8007f46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	441a      	add	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d118      	bne.n	8007f8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d00d      	beq.n	8007f82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	441a      	add	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e008      	b.n	8007f94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f82:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e003      	b.n	8007f94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d002      	beq.n	8007fa2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007fa2:	bf00      	nop
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	20013134 	.word	0x20013134
 8007fb4:	2001313c 	.word	0x2001313c

08007fb8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007fbc:	4803      	ldr	r0, [pc, #12]	; (8007fcc <_cbSendSystemDesc+0x14>)
 8007fbe:	f001 fae9 	bl	8009594 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007fc2:	4803      	ldr	r0, [pc, #12]	; (8007fd0 <_cbSendSystemDesc+0x18>)
 8007fc4:	f001 fae6 	bl	8009594 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007fc8:	bf00      	nop
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	0800b39c 	.word	0x0800b39c
 8007fd0:	0800b3c4 	.word	0x0800b3c4

08007fd4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <SEGGER_SYSVIEW_Conf+0x20>)
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <SEGGER_SYSVIEW_Conf+0x20>)
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <SEGGER_SYSVIEW_Conf+0x24>)
 8007fe2:	4a06      	ldr	r2, [pc, #24]	; (8007ffc <SEGGER_SYSVIEW_Conf+0x28>)
 8007fe4:	f000 fe54 	bl	8008c90 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007fe8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007fec:	f000 fe94 	bl	8008d18 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007ff0:	bf00      	nop
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000098 	.word	0x20000098
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	0800b464 	.word	0x0800b464

08008000 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008002:	b085      	sub	sp, #20
 8008004:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008006:	2300      	movs	r3, #0
 8008008:	607b      	str	r3, [r7, #4]
 800800a:	e033      	b.n	8008074 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800800c:	491e      	ldr	r1, [pc, #120]	; (8008088 <_cbSendTaskList+0x88>)
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	491a      	ldr	r1, [pc, #104]	; (8008088 <_cbSendTaskList+0x88>)
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	3304      	adds	r3, #4
 800802c:	6819      	ldr	r1, [r3, #0]
 800802e:	4c16      	ldr	r4, [pc, #88]	; (8008088 <_cbSendTaskList+0x88>)
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4423      	add	r3, r4
 800803c:	3308      	adds	r3, #8
 800803e:	681c      	ldr	r4, [r3, #0]
 8008040:	4d11      	ldr	r5, [pc, #68]	; (8008088 <_cbSendTaskList+0x88>)
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4613      	mov	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	442b      	add	r3, r5
 800804e:	330c      	adds	r3, #12
 8008050:	681d      	ldr	r5, [r3, #0]
 8008052:	4e0d      	ldr	r6, [pc, #52]	; (8008088 <_cbSendTaskList+0x88>)
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4413      	add	r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4433      	add	r3, r6
 8008060:	3310      	adds	r3, #16
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	462b      	mov	r3, r5
 8008068:	4622      	mov	r2, r4
 800806a:	f000 f8bd 	bl	80081e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3301      	adds	r3, #1
 8008072:	607b      	str	r3, [r7, #4]
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <_cbSendTaskList+0x8c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	d3c6      	bcc.n	800800c <_cbSendTaskList+0xc>
  }
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008088:	20013154 	.word	0x20013154
 800808c:	200131f4 	.word	0x200131f4

08008090 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008094:	b082      	sub	sp, #8
 8008096:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008098:	f7fe fb64 	bl	8006764 <xTaskGetTickCountFromISR>
 800809c:	4603      	mov	r3, r0
 800809e:	2200      	movs	r2, #0
 80080a0:	469a      	mov	sl, r3
 80080a2:	4693      	mov	fp, r2
 80080a4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80080a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	f04f 0a00 	mov.w	sl, #0
 80080b4:	f04f 0b00 	mov.w	fp, #0
 80080b8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80080bc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80080c0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	1a14      	subs	r4, r2, r0
 80080ca:	eb63 0501 	sbc.w	r5, r3, r1
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	00ab      	lsls	r3, r5, #2
 80080d8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80080dc:	00a2      	lsls	r2, r4, #2
 80080de:	4614      	mov	r4, r2
 80080e0:	461d      	mov	r5, r3
 80080e2:	eb14 0800 	adds.w	r8, r4, r0
 80080e6:	eb45 0901 	adc.w	r9, r5, r1
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080fe:	4690      	mov	r8, r2
 8008100:	4699      	mov	r9, r3
 8008102:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008106:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800810a:	4610      	mov	r0, r2
 800810c:	4619      	mov	r1, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008118 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008126:	2205      	movs	r2, #5
 8008128:	492b      	ldr	r1, [pc, #172]	; (80081d8 <SYSVIEW_AddTask+0xc0>)
 800812a:	68b8      	ldr	r0, [r7, #8]
 800812c:	f001 ffc6 	bl	800a0bc <memcmp>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d04b      	beq.n	80081ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008136:	4b29      	ldr	r3, [pc, #164]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b07      	cmp	r3, #7
 800813c:	d903      	bls.n	8008146 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800813e:	4828      	ldr	r0, [pc, #160]	; (80081e0 <SYSVIEW_AddTask+0xc8>)
 8008140:	f001 fd26 	bl	8009b90 <SEGGER_SYSVIEW_Warn>
    return;
 8008144:	e044      	b.n	80081d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008146:	4b25      	ldr	r3, [pc, #148]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4926      	ldr	r1, [pc, #152]	; (80081e4 <SYSVIEW_AddTask+0xcc>)
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800815a:	4b20      	ldr	r3, [pc, #128]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4921      	ldr	r1, [pc, #132]	; (80081e4 <SYSVIEW_AddTask+0xcc>)
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	3304      	adds	r3, #4
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008170:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	491b      	ldr	r1, [pc, #108]	; (80081e4 <SYSVIEW_AddTask+0xcc>)
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3308      	adds	r3, #8
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008186:	4b15      	ldr	r3, [pc, #84]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4916      	ldr	r1, [pc, #88]	; (80081e4 <SYSVIEW_AddTask+0xcc>)
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	330c      	adds	r3, #12
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800819c:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	4910      	ldr	r1, [pc, #64]	; (80081e4 <SYSVIEW_AddTask+0xcc>)
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	3310      	adds	r3, #16
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80081b2:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3301      	adds	r3, #1
 80081b8:	4a08      	ldr	r2, [pc, #32]	; (80081dc <SYSVIEW_AddTask+0xc4>)
 80081ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	68b9      	ldr	r1, [r7, #8]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f80e 	bl	80081e8 <SYSVIEW_SendTaskInfo>
 80081cc:	e000      	b.n	80081d0 <SYSVIEW_AddTask+0xb8>
    return;
 80081ce:	bf00      	nop

}
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	0800b3d4 	.word	0x0800b3d4
 80081dc:	200131f4 	.word	0x200131f4
 80081e0:	0800b3dc 	.word	0x0800b3dc
 80081e4:	20013154 	.word	0x20013154

080081e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	2214      	movs	r2, #20
 80081fc:	2100      	movs	r1, #0
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 ff6c 	bl	800a0dc <memset>
  TaskInfo.TaskID     = TaskID;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008218:	f107 0314 	add.w	r3, r7, #20
 800821c:	4618      	mov	r0, r3
 800821e:	f001 f8c1 	bl	80093a4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008222:	bf00      	nop
 8008224:	3728      	adds	r7, #40	; 0x28
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008232:	4b24      	ldr	r3, [pc, #144]	; (80082c4 <_DoInit+0x98>)
 8008234:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2203      	movs	r2, #3
 800823a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2203      	movs	r2, #3
 8008240:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a20      	ldr	r2, [pc, #128]	; (80082c8 <_DoInit+0x9c>)
 8008246:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a20      	ldr	r2, [pc, #128]	; (80082cc <_DoInit+0xa0>)
 800824c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008254:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <_DoInit+0x9c>)
 800826c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a17      	ldr	r2, [pc, #92]	; (80082d0 <_DoInit+0xa4>)
 8008272:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2210      	movs	r2, #16
 8008278:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3307      	adds	r3, #7
 8008290:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <_DoInit+0xa8>)
 8008292:	6810      	ldr	r0, [r2, #0]
 8008294:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8008296:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a0e      	ldr	r2, [pc, #56]	; (80082d8 <_DoInit+0xac>)
 800829e:	6810      	ldr	r0, [r2, #0]
 80082a0:	6018      	str	r0, [r3, #0]
 80082a2:	8891      	ldrh	r1, [r2, #4]
 80082a4:	7992      	ldrb	r2, [r2, #6]
 80082a6:	8099      	strh	r1, [r3, #4]
 80082a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80082aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80082b4:	f3bf 8f5f 	dmb	sy
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	200131f8 	.word	0x200131f8
 80082c8:	0800b42c 	.word	0x0800b42c
 80082cc:	200132a0 	.word	0x200132a0
 80082d0:	200136a0 	.word	0x200136a0
 80082d4:	0800b438 	.word	0x0800b438
 80082d8:	0800b43c 	.word	0x0800b43c

080082dc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	; 0x28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80082e8:	2300      	movs	r3, #0
 80082ea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d905      	bls.n	800830c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
 800830a:	e007      	b.n	800831c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	1acb      	subs	r3, r1, r3
 8008316:	4413      	add	r3, r2
 8008318:	3b01      	subs	r3, #1
 800831a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008326:	4293      	cmp	r3, r2
 8008328:	bf28      	it	cs
 800832a:	4613      	movcs	r3, r2
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800832e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4293      	cmp	r3, r2
 8008334:	bf28      	it	cs
 8008336:	4613      	movcs	r3, r2
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685a      	ldr	r2, [r3, #4]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4413      	add	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f001 ff2a 	bl	800a1a2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800834e:	6a3a      	ldr	r2, [r7, #32]
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	4413      	add	r3, r2
 8008354:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	4413      	add	r3, r2
 800835c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008366:	69fa      	ldr	r2, [r7, #28]
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	4413      	add	r3, r2
 800836c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	429a      	cmp	r2, r3
 8008376:	d101      	bne.n	800837c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008378:	2300      	movs	r3, #0
 800837a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800837c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1b2      	bne.n	80082f2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800838c:	6a3b      	ldr	r3, [r7, #32]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3728      	adds	r7, #40	; 0x28
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008396:	b580      	push	{r7, lr}
 8008398:	b088      	sub	sp, #32
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d911      	bls.n	80083de <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	6938      	ldr	r0, [r7, #16]
 80083ca:	f001 feea 	bl	800a1a2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80083ce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	441a      	add	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80083dc:	e01f      	b.n	800841e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	6938      	ldr	r0, [r7, #16]
 80083f2:	f001 fed6 	bl	800a1a2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	4413      	add	r3, r2
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4619      	mov	r1, r3
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f001 fec7 	bl	800a1a2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008414:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	60da      	str	r2, [r3, #12]
}
 800841e:	bf00      	nop
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008426:	b480      	push	{r7}
 8008428:	b087      	sub	sp, #28
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	429a      	cmp	r2, r3
 8008440:	d808      	bhi.n	8008454 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	1ad2      	subs	r2, r2, r3
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	4413      	add	r3, r2
 800844e:	3b01      	subs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
 8008452:	e004      	b.n	800845e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	3b01      	subs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800845e:	697b      	ldr	r3, [r7, #20]
}
 8008460:	4618      	mov	r0, r3
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800846c:	b580      	push	{r7, lr}
 800846e:	b08c      	sub	sp, #48	; 0x30
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008478:	4b3e      	ldr	r3, [pc, #248]	; (8008574 <SEGGER_RTT_ReadNoLock+0x108>)
 800847a:	623b      	str	r3, [r7, #32]
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <SEGGER_RTT_ReadNoLock+0x1e>
 8008486:	f7ff fed1 	bl	800822c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4613      	mov	r3, r2
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	4413      	add	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	3360      	adds	r3, #96	; 0x60
 8008496:	4a37      	ldr	r2, [pc, #220]	; (8008574 <SEGGER_RTT_ReadNoLock+0x108>)
 8008498:	4413      	add	r3, r2
 800849a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80084ac:	2300      	movs	r3, #0
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80084b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d92b      	bls.n	8008510 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4293      	cmp	r3, r2
 80084c8:	bf28      	it	cs
 80084ca:	4613      	movcs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	4413      	add	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	6939      	ldr	r1, [r7, #16]
 80084dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084de:	f001 fe60 	bl	800a1a2 <memcpy>
    NumBytesRead += NumBytesRem;
 80084e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	4413      	add	r3, r2
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80084ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	4413      	add	r3, r2
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80084fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	4413      	add	r3, r2
 8008500:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008508:	429a      	cmp	r2, r3
 800850a:	d101      	bne.n	8008510 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800850c:	2300      	movs	r3, #0
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4293      	cmp	r3, r2
 800851e:	bf28      	it	cs
 8008520:	4613      	movcs	r3, r2
 8008522:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d019      	beq.n	800855e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	685a      	ldr	r2, [r3, #4]
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	4413      	add	r3, r2
 8008532:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	6939      	ldr	r1, [r7, #16]
 8008538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800853a:	f001 fe32 	bl	800a1a2 <memcpy>
    NumBytesRead += NumBytesRem;
 800853e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	4413      	add	r3, r2
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8008546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	4413      	add	r3, r2
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	4413      	add	r3, r2
 800855c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008568:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800856a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800856c:	4618      	mov	r0, r3
 800856e:	3730      	adds	r7, #48	; 0x30
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	200131f8 	.word	0x200131f8

08008578 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	4613      	mov	r3, r2
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	4413      	add	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4a1f      	ldr	r2, [pc, #124]	; (8008614 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008596:	4413      	add	r3, r2
 8008598:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d029      	beq.n	80085f6 <SEGGER_RTT_WriteNoLock+0x7e>
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d82e      	bhi.n	8008604 <SEGGER_RTT_WriteNoLock+0x8c>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <SEGGER_RTT_WriteNoLock+0x38>
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d013      	beq.n	80085d6 <SEGGER_RTT_WriteNoLock+0x5e>
 80085ae:	e029      	b.n	8008604 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80085b0:	6978      	ldr	r0, [r7, #20]
 80085b2:	f7ff ff38 	bl	8008426 <_GetAvailWriteSpace>
 80085b6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d202      	bcs.n	80085c6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80085c0:	2300      	movs	r3, #0
 80085c2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80085c4:	e021      	b.n	800860a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	69b9      	ldr	r1, [r7, #24]
 80085ce:	6978      	ldr	r0, [r7, #20]
 80085d0:	f7ff fee1 	bl	8008396 <_WriteNoCheck>
    break;
 80085d4:	e019      	b.n	800860a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80085d6:	6978      	ldr	r0, [r7, #20]
 80085d8:	f7ff ff25 	bl	8008426 <_GetAvailWriteSpace>
 80085dc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	4293      	cmp	r3, r2
 80085e4:	bf28      	it	cs
 80085e6:	4613      	movcs	r3, r2
 80085e8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	69b9      	ldr	r1, [r7, #24]
 80085ee:	6978      	ldr	r0, [r7, #20]
 80085f0:	f7ff fed1 	bl	8008396 <_WriteNoCheck>
    break;
 80085f4:	e009      	b.n	800860a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	69b9      	ldr	r1, [r7, #24]
 80085fa:	6978      	ldr	r0, [r7, #20]
 80085fc:	f7ff fe6e 	bl	80082dc <_WriteBlocking>
 8008600:	61f8      	str	r0, [r7, #28]
    break;
 8008602:	e002      	b.n	800860a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
    break;
 8008608:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800860a:	69fb      	ldr	r3, [r7, #28]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200131f8 	.word	0x200131f8

08008618 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <SEGGER_RTT_Write+0x48>)
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <SEGGER_RTT_Write+0x1e>
 8008632:	f7ff fdfb 	bl	800822c <_DoInit>
  SEGGER_RTT_LOCK();
 8008636:	f3ef 8311 	mrs	r3, BASEPRI
 800863a:	f04f 0120 	mov.w	r1, #32
 800863e:	f381 8811 	msr	BASEPRI, r1
 8008642:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f7ff ff95 	bl	8008578 <SEGGER_RTT_WriteNoLock>
 800864e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8008656:	697b      	ldr	r3, [r7, #20]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3720      	adds	r7, #32
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200131f8 	.word	0x200131f8

08008664 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008672:	4b3d      	ldr	r3, [pc, #244]	; (8008768 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <SEGGER_RTT_AllocUpBuffer+0x20>
 8008680:	f7ff fdd4 	bl	800822c <_DoInit>
  SEGGER_RTT_LOCK();
 8008684:	f3ef 8311 	mrs	r3, BASEPRI
 8008688:	f04f 0120 	mov.w	r1, #32
 800868c:	f381 8811 	msr	BASEPRI, r1
 8008690:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008692:	4b35      	ldr	r3, [pc, #212]	; (8008768 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008694:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800869a:	6939      	ldr	r1, [r7, #16]
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	4613      	mov	r3, r2
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	4413      	add	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	440b      	add	r3, r1
 80086aa:	3304      	adds	r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3301      	adds	r3, #1
 80086b6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	429a      	cmp	r2, r3
 80086c0:	dbeb      	blt.n	800869a <SEGGER_RTT_AllocUpBuffer+0x36>
 80086c2:	e000      	b.n	80086c6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80086c4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	69fa      	ldr	r2, [r7, #28]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	da3f      	bge.n	8008750 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80086d0:	6939      	ldr	r1, [r7, #16]
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	4613      	mov	r3, r2
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	4413      	add	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	440b      	add	r3, r1
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80086e4:	6939      	ldr	r1, [r7, #16]
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	4613      	mov	r3, r2
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	4413      	add	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	440b      	add	r3, r1
 80086f4:	3304      	adds	r3, #4
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80086fa:	6939      	ldr	r1, [r7, #16]
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	4613      	mov	r3, r2
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	4413      	add	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	440b      	add	r3, r1
 8008708:	3320      	adds	r3, #32
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800870e:	6939      	ldr	r1, [r7, #16]
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	440b      	add	r3, r1
 800871c:	3328      	adds	r3, #40	; 0x28
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008722:	6939      	ldr	r1, [r7, #16]
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	4613      	mov	r3, r2
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	4413      	add	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	440b      	add	r3, r1
 8008730:	3324      	adds	r3, #36	; 0x24
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008736:	6939      	ldr	r1, [r7, #16]
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	4613      	mov	r3, r2
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4413      	add	r3, r2
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	440b      	add	r3, r1
 8008744:	332c      	adds	r3, #44	; 0x2c
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800874a:	f3bf 8f5f 	dmb	sy
 800874e:	e002      	b.n	8008756 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008754:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800875c:	69fb      	ldr	r3, [r7, #28]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200131f8 	.word	0x200131f8

0800876c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800877a:	4b33      	ldr	r3, [pc, #204]	; (8008848 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800877c:	61bb      	str	r3, [r7, #24]
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008788:	f7ff fd50 	bl	800822c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800878c:	4b2e      	ldr	r3, [pc, #184]	; (8008848 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800878e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	461a      	mov	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4293      	cmp	r3, r2
 800879a:	d24d      	bcs.n	8008838 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800879c:	f3ef 8311 	mrs	r3, BASEPRI
 80087a0:	f04f 0120 	mov.w	r1, #32
 80087a4:	f381 8811 	msr	BASEPRI, r1
 80087a8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d031      	beq.n	8008814 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80087b0:	6979      	ldr	r1, [r7, #20]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4613      	mov	r3, r2
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	4413      	add	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	440b      	add	r3, r1
 80087be:	3360      	adds	r3, #96	; 0x60
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80087c4:	6979      	ldr	r1, [r7, #20]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4613      	mov	r3, r2
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	4413      	add	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	440b      	add	r3, r1
 80087d2:	3364      	adds	r3, #100	; 0x64
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80087d8:	6979      	ldr	r1, [r7, #20]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4613      	mov	r3, r2
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	4413      	add	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	440b      	add	r3, r1
 80087e6:	3368      	adds	r3, #104	; 0x68
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80087ec:	6979      	ldr	r1, [r7, #20]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4613      	mov	r3, r2
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	440b      	add	r3, r1
 80087fa:	3370      	adds	r3, #112	; 0x70
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	440b      	add	r3, r1
 800880e:	336c      	adds	r3, #108	; 0x6c
 8008810:	2200      	movs	r2, #0
 8008812:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8008814:	6979      	ldr	r1, [r7, #20]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4613      	mov	r3, r2
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	4413      	add	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	440b      	add	r3, r1
 8008822:	3374      	adds	r3, #116	; 0x74
 8008824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008826:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008828:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008832:	2300      	movs	r3, #0
 8008834:	61fb      	str	r3, [r7, #28]
 8008836:	e002      	b.n	800883e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8008838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800883c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800883e:	69fb      	ldr	r3, [r7, #28]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	200131f8 	.word	0x200131f8

0800884c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800885c:	e002      	b.n	8008864 <_EncodeStr+0x18>
    Len++;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4413      	add	r3, r2
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f6      	bne.n	800885e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	429a      	cmp	r2, r3
 8008876:	d901      	bls.n	800887c <_EncodeStr+0x30>
    Len = Limit;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2bfe      	cmp	r3, #254	; 0xfe
 8008880:	d806      	bhi.n	8008890 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	60fa      	str	r2, [r7, #12]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	e011      	b.n	80088b4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	60fa      	str	r2, [r7, #12]
 8008896:	22ff      	movs	r2, #255	; 0xff
 8008898:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	60fa      	str	r2, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	0a19      	lsrs	r1, r3, #8
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	60fa      	str	r2, [r7, #12]
 80088b0:	b2ca      	uxtb	r2, r1
 80088b2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80088b8:	e00a      	b.n	80088d0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	1c53      	adds	r3, r2, #1
 80088be:	60bb      	str	r3, [r7, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	60f9      	str	r1, [r7, #12]
 80088c6:	7812      	ldrb	r2, [r2, #0]
 80088c8:	701a      	strb	r2, [r3, #0]
    n++;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	3301      	adds	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d3f0      	bcc.n	80088ba <_EncodeStr+0x6e>
  }
  return pPayload;
 80088d8:	68fb      	ldr	r3, [r7, #12]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3304      	adds	r3, #4
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
	...

08008900 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008906:	4b35      	ldr	r3, [pc, #212]	; (80089dc <_HandleIncomingPacket+0xdc>)
 8008908:	7e1b      	ldrb	r3, [r3, #24]
 800890a:	4618      	mov	r0, r3
 800890c:	1cfb      	adds	r3, r7, #3
 800890e:	2201      	movs	r2, #1
 8008910:	4619      	mov	r1, r3
 8008912:	f7ff fdab 	bl	800846c <SEGGER_RTT_ReadNoLock>
 8008916:	4603      	mov	r3, r0
 8008918:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd59      	ble.n	80089d4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d032      	beq.n	800898c <_HandleIncomingPacket+0x8c>
 8008926:	2b80      	cmp	r3, #128	; 0x80
 8008928:	dc42      	bgt.n	80089b0 <_HandleIncomingPacket+0xb0>
 800892a:	2b07      	cmp	r3, #7
 800892c:	dc16      	bgt.n	800895c <_HandleIncomingPacket+0x5c>
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd3e      	ble.n	80089b0 <_HandleIncomingPacket+0xb0>
 8008932:	3b01      	subs	r3, #1
 8008934:	2b06      	cmp	r3, #6
 8008936:	d83b      	bhi.n	80089b0 <_HandleIncomingPacket+0xb0>
 8008938:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <_HandleIncomingPacket+0x40>)
 800893a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893e:	bf00      	nop
 8008940:	08008963 	.word	0x08008963
 8008944:	08008969 	.word	0x08008969
 8008948:	0800896f 	.word	0x0800896f
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897b 	.word	0x0800897b
 8008954:	08008981 	.word	0x08008981
 8008958:	08008987 	.word	0x08008987
 800895c:	2b7f      	cmp	r3, #127	; 0x7f
 800895e:	d034      	beq.n	80089ca <_HandleIncomingPacket+0xca>
 8008960:	e026      	b.n	80089b0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008962:	f000 fba5 	bl	80090b0 <SEGGER_SYSVIEW_Start>
      break;
 8008966:	e035      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008968:	f000 fc5c 	bl	8009224 <SEGGER_SYSVIEW_Stop>
      break;
 800896c:	e032      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800896e:	f000 fe35 	bl	80095dc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008972:	e02f      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008974:	f000 fdfa 	bl	800956c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008978:	e02c      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800897a:	f000 fc79 	bl	8009270 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800897e:	e029      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008980:	f001 f8c8 	bl	8009b14 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008984:	e026      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008986:	f001 f8a7 	bl	8009ad8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800898a:	e023      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800898c:	4b13      	ldr	r3, [pc, #76]	; (80089dc <_HandleIncomingPacket+0xdc>)
 800898e:	7e1b      	ldrb	r3, [r3, #24]
 8008990:	4618      	mov	r0, r3
 8008992:	1cfb      	adds	r3, r7, #3
 8008994:	2201      	movs	r2, #1
 8008996:	4619      	mov	r1, r3
 8008998:	f7ff fd68 	bl	800846c <SEGGER_RTT_ReadNoLock>
 800899c:	4603      	mov	r3, r0
 800899e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dd13      	ble.n	80089ce <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80089a6:	78fb      	ldrb	r3, [r7, #3]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 f815 	bl	80099d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80089ae:	e00e      	b.n	80089ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0c      	bge.n	80089d2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80089b8:	4b08      	ldr	r3, [pc, #32]	; (80089dc <_HandleIncomingPacket+0xdc>)
 80089ba:	7e1b      	ldrb	r3, [r3, #24]
 80089bc:	4618      	mov	r0, r3
 80089be:	1cfb      	adds	r3, r7, #3
 80089c0:	2201      	movs	r2, #1
 80089c2:	4619      	mov	r1, r3
 80089c4:	f7ff fd52 	bl	800846c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80089c8:	e003      	b.n	80089d2 <_HandleIncomingPacket+0xd2>
      break;
 80089ca:	bf00      	nop
 80089cc:	e002      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
      break;
 80089ce:	bf00      	nop
 80089d0:	e000      	b.n	80089d4 <_HandleIncomingPacket+0xd4>
      break;
 80089d2:	bf00      	nop
    }
  }
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200146b8 	.word	0x200146b8

080089e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08c      	sub	sp, #48	; 0x30
 80089e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80089e6:	2301      	movs	r3, #1
 80089e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	3301      	adds	r3, #1
 80089ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089f4:	4b31      	ldr	r3, [pc, #196]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80089fa:	e00b      	b.n	8008a14 <_TrySendOverflowPacket+0x34>
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	1c59      	adds	r1, r3, #1
 8008a04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a10:	09db      	lsrs	r3, r3, #7
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	2b7f      	cmp	r3, #127	; 0x7f
 8008a18:	d8f0      	bhi.n	80089fc <_TrySendOverflowPacket+0x1c>
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008a2a:	4b25      	ldr	r3, [pc, #148]	; (8008ac0 <_TrySendOverflowPacket+0xe0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008a30:	4b22      	ldr	r3, [pc, #136]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	623b      	str	r3, [r7, #32]
 8008a42:	e00b      	b.n	8008a5c <_TrySendOverflowPacket+0x7c>
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	6279      	str	r1, [r7, #36]	; 0x24
 8008a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a52:	b2d2      	uxtb	r2, r2
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	09db      	lsrs	r3, r3, #7
 8008a5a:	623b      	str	r3, [r7, #32]
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8008a60:	d8f0      	bhi.n	8008a44 <_TrySendOverflowPacket+0x64>
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	627a      	str	r2, [r7, #36]	; 0x24
 8008a68:	6a3a      	ldr	r2, [r7, #32]
 8008a6a:	b2d2      	uxtb	r2, r2
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008a74:	785b      	ldrb	r3, [r3, #1]
 8008a76:	4618      	mov	r0, r3
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	69fa      	ldr	r2, [r7, #28]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	1d3b      	adds	r3, r7, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	f7f7 fbc4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d009      	beq.n	8008aa6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008a92:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008a98:	4b08      	ldr	r3, [pc, #32]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	4b06      	ldr	r3, [pc, #24]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	e004      	b.n	8008ab0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	4a03      	ldr	r2, [pc, #12]	; (8008abc <_TrySendOverflowPacket+0xdc>)
 8008aae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008ab0:	693b      	ldr	r3, [r7, #16]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3730      	adds	r7, #48	; 0x30
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200146b8 	.word	0x200146b8
 8008ac0:	e0001004 	.word	0xe0001004

08008ac4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008ad0:	4b6c      	ldr	r3, [pc, #432]	; (8008c84 <_SendPacket+0x1c0>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d010      	beq.n	8008afa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008ad8:	4b6a      	ldr	r3, [pc, #424]	; (8008c84 <_SendPacket+0x1c0>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 80a3 	beq.w	8008c28 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008ae2:	4b68      	ldr	r3, [pc, #416]	; (8008c84 <_SendPacket+0x1c0>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d109      	bne.n	8008afe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008aea:	f7ff ff79 	bl	80089e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008aee:	4b65      	ldr	r3, [pc, #404]	; (8008c84 <_SendPacket+0x1c0>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	f040 809a 	bne.w	8008c2c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8008af8:	e001      	b.n	8008afe <_SendPacket+0x3a>
    goto Send;
 8008afa:	bf00      	nop
 8008afc:	e000      	b.n	8008b00 <_SendPacket+0x3c>
Send:
 8008afe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b1f      	cmp	r3, #31
 8008b04:	d809      	bhi.n	8008b1a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008b06:	4b5f      	ldr	r3, [pc, #380]	; (8008c84 <_SendPacket+0x1c0>)
 8008b08:	69da      	ldr	r2, [r3, #28]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 808b 	bne.w	8008c30 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b17      	cmp	r3, #23
 8008b1e:	d807      	bhi.n	8008b30 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	e03d      	b.n	8008bac <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b3c:	d912      	bls.n	8008b64 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	09da      	lsrs	r2, r3, #7
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	b2d2      	uxtb	r2, r2
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	3a01      	subs	r2, #1
 8008b56:	60fa      	str	r2, [r7, #12]
 8008b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	701a      	strb	r2, [r3, #0]
 8008b62:	e006      	b.n	8008b72 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b7f      	cmp	r3, #127	; 0x7f
 8008b76:	d912      	bls.n	8008b9e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	09da      	lsrs	r2, r3, #7
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	3a01      	subs	r2, #1
 8008b90:	60fa      	str	r2, [r7, #12]
 8008b92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e006      	b.n	8008bac <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <_SendPacket+0x1c4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008bb2:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <_SendPacket+0x1c0>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	e00b      	b.n	8008bde <_SendPacket+0x11a>
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	1c59      	adds	r1, r3, #1
 8008bce:	6279      	str	r1, [r7, #36]	; 0x24
 8008bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	701a      	strb	r2, [r3, #0]
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	09db      	lsrs	r3, r3, #7
 8008bdc:	623b      	str	r3, [r7, #32]
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	2b7f      	cmp	r3, #127	; 0x7f
 8008be2:	d8f0      	bhi.n	8008bc6 <_SendPacket+0x102>
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	627a      	str	r2, [r7, #36]	; 0x24
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	b2d2      	uxtb	r2, r2
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8008bf4:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <_SendPacket+0x1c0>)
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	68f9      	ldr	r1, [r7, #12]
 8008c04:	f7f7 fb04 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <_SendPacket+0x1c0>)
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	60d3      	str	r3, [r2, #12]
 8008c18:	e00b      	b.n	8008c32 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008c1a:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <_SendPacket+0x1c0>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4b18      	ldr	r3, [pc, #96]	; (8008c84 <_SendPacket+0x1c0>)
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e004      	b.n	8008c32 <_SendPacket+0x16e>
    goto SendDone;
 8008c28:	bf00      	nop
 8008c2a:	e002      	b.n	8008c32 <_SendPacket+0x16e>
      goto SendDone;
 8008c2c:	bf00      	nop
 8008c2e:	e000      	b.n	8008c32 <_SendPacket+0x16e>
      goto SendDone;
 8008c30:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008c32:	4b14      	ldr	r3, [pc, #80]	; (8008c84 <_SendPacket+0x1c0>)
 8008c34:	7e1b      	ldrb	r3, [r3, #24]
 8008c36:	4619      	mov	r1, r3
 8008c38:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <_SendPacket+0x1c8>)
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	440b      	add	r3, r1
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	4413      	add	r3, r2
 8008c44:	336c      	adds	r3, #108	; 0x6c
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	4b0e      	ldr	r3, [pc, #56]	; (8008c84 <_SendPacket+0x1c0>)
 8008c4a:	7e1b      	ldrb	r3, [r3, #24]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	490f      	ldr	r1, [pc, #60]	; (8008c8c <_SendPacket+0x1c8>)
 8008c50:	4603      	mov	r3, r0
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	4403      	add	r3, r0
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	440b      	add	r3, r1
 8008c5a:	3370      	adds	r3, #112	; 0x70
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d00b      	beq.n	8008c7a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008c62:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <_SendPacket+0x1c0>)
 8008c64:	789b      	ldrb	r3, [r3, #2]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d107      	bne.n	8008c7a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <_SendPacket+0x1c0>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008c70:	f7ff fe46 	bl	8008900 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008c74:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <_SendPacket+0x1c0>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008c7a:	bf00      	nop
 8008c7c:	3728      	adds	r7, #40	; 0x28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	200146b8 	.word	0x200146b8
 8008c88:	e0001004 	.word	0xe0001004
 8008c8c:	200131f8 	.word	0x200131f8

08008c90 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ca4:	4917      	ldr	r1, [pc, #92]	; (8008d04 <SEGGER_SYSVIEW_Init+0x74>)
 8008ca6:	4818      	ldr	r0, [pc, #96]	; (8008d08 <SEGGER_SYSVIEW_Init+0x78>)
 8008ca8:	f7ff fcdc 	bl	8008664 <SEGGER_RTT_AllocUpBuffer>
 8008cac:	4603      	mov	r3, r0
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cb2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cb6:	785a      	ldrb	r2, [r3, #1]
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cba:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008cbc:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cbe:	7e1b      	ldrb	r3, [r3, #24]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	4a11      	ldr	r2, [pc, #68]	; (8008d10 <SEGGER_SYSVIEW_Init+0x80>)
 8008cca:	490f      	ldr	r1, [pc, #60]	; (8008d08 <SEGGER_SYSVIEW_Init+0x78>)
 8008ccc:	f7ff fd4e 	bl	800876c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8008cd0:	4b0e      	ldr	r3, [pc, #56]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <SEGGER_SYSVIEW_Init+0x84>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cdc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8008cde:	4a0b      	ldr	r2, [pc, #44]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008ce4:	4a09      	ldr	r2, [pc, #36]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008cea:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8008cf0:	4a06      	ldr	r2, [pc, #24]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <SEGGER_SYSVIEW_Init+0x7c>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	200136b0 	.word	0x200136b0
 8008d08:	0800b444 	.word	0x0800b444
 8008d0c:	200146b8 	.word	0x200146b8
 8008d10:	200146b0 	.word	0x200146b0
 8008d14:	e0001004 	.word	0xe0001004

08008d18 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8008d20:	4a04      	ldr	r2, [pc, #16]	; (8008d34 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6113      	str	r3, [r2, #16]
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	200146b8 	.word	0x200146b8

08008d38 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008d40:	f3ef 8311 	mrs	r3, BASEPRI
 8008d44:	f04f 0120 	mov.w	r1, #32
 8008d48:	f381 8811 	msr	BASEPRI, r1
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	4808      	ldr	r0, [pc, #32]	; (8008d70 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8008d50:	f7ff fdc9 	bl	80088e6 <_PreparePacket>
 8008d54:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68b8      	ldr	r0, [r7, #8]
 8008d5c:	f7ff feb2 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f383 8811 	msr	BASEPRI, r3
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200146e8 	.word	0x200146e8

08008d74 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d82:	f04f 0120 	mov.w	r1, #32
 8008d86:	f381 8811 	msr	BASEPRI, r1
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	4816      	ldr	r0, [pc, #88]	; (8008de8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8008d8e:	f7ff fdaa 	bl	80088e6 <_PreparePacket>
 8008d92:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	61fb      	str	r3, [r7, #28]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	61bb      	str	r3, [r7, #24]
 8008da0:	e00b      	b.n	8008dba <SEGGER_SYSVIEW_RecordU32+0x46>
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	1c59      	adds	r1, r3, #1
 8008daa:	61f9      	str	r1, [r7, #28]
 8008dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	09db      	lsrs	r3, r3, #7
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8008dbe:	d8f0      	bhi.n	8008da2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	61fa      	str	r2, [r7, #28]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	6938      	ldr	r0, [r7, #16]
 8008dd6:	f7ff fe75 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f383 8811 	msr	BASEPRI, r3
}
 8008de0:	bf00      	nop
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	200146e8 	.word	0x200146e8

08008dec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08c      	sub	sp, #48	; 0x30
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008df8:	f3ef 8311 	mrs	r3, BASEPRI
 8008dfc:	f04f 0120 	mov.w	r1, #32
 8008e00:	f381 8811 	msr	BASEPRI, r1
 8008e04:	61fb      	str	r3, [r7, #28]
 8008e06:	4825      	ldr	r0, [pc, #148]	; (8008e9c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008e08:	f7ff fd6d 	bl	80088e6 <_PreparePacket>
 8008e0c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e1a:	e00b      	b.n	8008e34 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	1c59      	adds	r1, r3, #1
 8008e24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e2a:	b2d2      	uxtb	r2, r2
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	09db      	lsrs	r3, r3, #7
 8008e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e36:	2b7f      	cmp	r3, #127	; 0x7f
 8008e38:	d8f0      	bhi.n	8008e1c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	623b      	str	r3, [r7, #32]
 8008e52:	e00b      	b.n	8008e6c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	1c59      	adds	r1, r3, #1
 8008e5c:	6279      	str	r1, [r7, #36]	; 0x24
 8008e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e62:	b2d2      	uxtb	r2, r2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	09db      	lsrs	r3, r3, #7
 8008e6a:	623b      	str	r3, [r7, #32]
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e70:	d8f0      	bhi.n	8008e54 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	627a      	str	r2, [r7, #36]	; 0x24
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	6979      	ldr	r1, [r7, #20]
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f7ff fe1c 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	f383 8811 	msr	BASEPRI, r3
}
 8008e92:	bf00      	nop
 8008e94:	3730      	adds	r7, #48	; 0x30
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	200146e8 	.word	0x200146e8

08008ea0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08e      	sub	sp, #56	; 0x38
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8008eae:	f3ef 8311 	mrs	r3, BASEPRI
 8008eb2:	f04f 0120 	mov.w	r1, #32
 8008eb6:	f381 8811 	msr	BASEPRI, r1
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	4832      	ldr	r0, [pc, #200]	; (8008f88 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8008ebe:	f7ff fd12 	bl	80088e6 <_PreparePacket>
 8008ec2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30
 8008ed0:	e00b      	b.n	8008eea <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed8:	1c59      	adds	r1, r3, #1
 8008eda:	6379      	str	r1, [r7, #52]	; 0x34
 8008edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	09db      	lsrs	r3, r3, #7
 8008ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	2b7f      	cmp	r3, #127	; 0x7f
 8008eee:	d8f0      	bhi.n	8008ed2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	637a      	str	r2, [r7, #52]	; 0x34
 8008ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef8:	b2d2      	uxtb	r2, r2
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f08:	e00b      	b.n	8008f22 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	1c59      	adds	r1, r3, #1
 8008f12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f18:	b2d2      	uxtb	r2, r2
 8008f1a:	701a      	strb	r2, [r3, #0]
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	09db      	lsrs	r3, r3, #7
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	2b7f      	cmp	r3, #127	; 0x7f
 8008f26:	d8f0      	bhi.n	8008f0a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	623b      	str	r3, [r7, #32]
 8008f40:	e00b      	b.n	8008f5a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	1c59      	adds	r1, r3, #1
 8008f4a:	6279      	str	r1, [r7, #36]	; 0x24
 8008f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f50:	b2d2      	uxtb	r2, r2
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	09db      	lsrs	r3, r3, #7
 8008f58:	623b      	str	r3, [r7, #32]
 8008f5a:	6a3b      	ldr	r3, [r7, #32]
 8008f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8008f5e:	d8f0      	bhi.n	8008f42 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	627a      	str	r2, [r7, #36]	; 0x24
 8008f66:	6a3a      	ldr	r2, [r7, #32]
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	6979      	ldr	r1, [r7, #20]
 8008f74:	69b8      	ldr	r0, [r7, #24]
 8008f76:	f7ff fda5 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	f383 8811 	msr	BASEPRI, r3
}
 8008f80:	bf00      	nop
 8008f82:	3738      	adds	r7, #56	; 0x38
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	200146e8 	.word	0x200146e8

08008f8c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b090      	sub	sp, #64	; 0x40
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
 8008f98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f9e:	f04f 0120 	mov.w	r1, #32
 8008fa2:	f381 8811 	msr	BASEPRI, r1
 8008fa6:	61fb      	str	r3, [r7, #28]
 8008fa8:	4840      	ldr	r0, [pc, #256]	; (80090ac <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008faa:	f7ff fc9c 	bl	80088e6 <_PreparePacket>
 8008fae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fbc:	e00b      	b.n	8008fd6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc4:	1c59      	adds	r1, r3, #1
 8008fc6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	701a      	strb	r2, [r3, #0]
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	09db      	lsrs	r3, r3, #7
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8008fda:	d8f0      	bhi.n	8008fbe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	637b      	str	r3, [r7, #52]	; 0x34
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ff4:	e00b      	b.n	800900e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffc:	1c59      	adds	r1, r3, #1
 8008ffe:	6379      	str	r1, [r7, #52]	; 0x34
 8009000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009004:	b2d2      	uxtb	r2, r2
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	09db      	lsrs	r3, r3, #7
 800900c:	633b      	str	r3, [r7, #48]	; 0x30
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	2b7f      	cmp	r3, #127	; 0x7f
 8009012:	d8f0      	bhi.n	8008ff6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	637a      	str	r2, [r7, #52]	; 0x34
 800901a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901c:	b2d2      	uxtb	r2, r2
 800901e:	701a      	strb	r2, [r3, #0]
 8009020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009022:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28
 800902c:	e00b      	b.n	8009046 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800902e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009030:	b2da      	uxtb	r2, r3
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	1c59      	adds	r1, r3, #1
 8009036:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	09db      	lsrs	r3, r3, #7
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	2b7f      	cmp	r3, #127	; 0x7f
 800904a:	d8f0      	bhi.n	800902e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009054:	b2d2      	uxtb	r2, r2
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
 8009060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009062:	623b      	str	r3, [r7, #32]
 8009064:	e00b      	b.n	800907e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	1c59      	adds	r1, r3, #1
 800906e:	6279      	str	r1, [r7, #36]	; 0x24
 8009070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	09db      	lsrs	r3, r3, #7
 800907c:	623b      	str	r3, [r7, #32]
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	2b7f      	cmp	r3, #127	; 0x7f
 8009082:	d8f0      	bhi.n	8009066 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	627a      	str	r2, [r7, #36]	; 0x24
 800908a:	6a3a      	ldr	r2, [r7, #32]
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	6979      	ldr	r1, [r7, #20]
 8009098:	69b8      	ldr	r0, [r7, #24]
 800909a:	f7ff fd13 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f383 8811 	msr	BASEPRI, r3
}
 80090a4:	bf00      	nop
 80090a6:	3740      	adds	r7, #64	; 0x40
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	200146e8 	.word	0x200146e8

080090b0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	; 0x30
 80090b4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80090b6:	4b58      	ldr	r3, [pc, #352]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80090bc:	f3ef 8311 	mrs	r3, BASEPRI
 80090c0:	f04f 0120 	mov.w	r1, #32
 80090c4:	f381 8811 	msr	BASEPRI, r1
 80090c8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80090ca:	4b53      	ldr	r3, [pc, #332]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	220a      	movs	r2, #10
 80090d0:	4952      	ldr	r1, [pc, #328]	; (800921c <SEGGER_SYSVIEW_Start+0x16c>)
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7f7 f89c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80090de:	200a      	movs	r0, #10
 80090e0:	f7ff fe2a 	bl	8008d38 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80090e4:	f3ef 8311 	mrs	r3, BASEPRI
 80090e8:	f04f 0120 	mov.w	r1, #32
 80090ec:	f381 8811 	msr	BASEPRI, r1
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	484b      	ldr	r0, [pc, #300]	; (8009220 <SEGGER_SYSVIEW_Start+0x170>)
 80090f4:	f7ff fbf7 	bl	80088e6 <_PreparePacket>
 80090f8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009102:	4b45      	ldr	r3, [pc, #276]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28
 8009108:	e00b      	b.n	8009122 <SEGGER_SYSVIEW_Start+0x72>
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	b2da      	uxtb	r2, r3
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009110:	1c59      	adds	r1, r3, #1
 8009112:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	09db      	lsrs	r3, r3, #7
 8009120:	62bb      	str	r3, [r7, #40]	; 0x28
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	2b7f      	cmp	r3, #127	; 0x7f
 8009126:	d8f0      	bhi.n	800910a <SEGGER_SYSVIEW_Start+0x5a>
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800912e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
 800913c:	4b36      	ldr	r3, [pc, #216]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e00b      	b.n	800915c <SEGGER_SYSVIEW_Start+0xac>
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	1c59      	adds	r1, r3, #1
 800914c:	6279      	str	r1, [r7, #36]	; 0x24
 800914e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	09db      	lsrs	r3, r3, #7
 800915a:	623b      	str	r3, [r7, #32]
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b7f      	cmp	r3, #127	; 0x7f
 8009160:	d8f0      	bhi.n	8009144 <SEGGER_SYSVIEW_Start+0x94>
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	627a      	str	r2, [r7, #36]	; 0x24
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	b2d2      	uxtb	r2, r2
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	61fb      	str	r3, [r7, #28]
 8009176:	4b28      	ldr	r3, [pc, #160]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	61bb      	str	r3, [r7, #24]
 800917c:	e00b      	b.n	8009196 <SEGGER_SYSVIEW_Start+0xe6>
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	b2da      	uxtb	r2, r3
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	1c59      	adds	r1, r3, #1
 8009186:	61f9      	str	r1, [r7, #28]
 8009188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	09db      	lsrs	r3, r3, #7
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b7f      	cmp	r3, #127	; 0x7f
 800919a:	d8f0      	bhi.n	800917e <SEGGER_SYSVIEW_Start+0xce>
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	61fa      	str	r2, [r7, #28]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	b2d2      	uxtb	r2, r2
 80091a6:	701a      	strb	r2, [r3, #0]
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	2300      	movs	r3, #0
 80091b2:	613b      	str	r3, [r7, #16]
 80091b4:	e00b      	b.n	80091ce <SEGGER_SYSVIEW_Start+0x11e>
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	1c59      	adds	r1, r3, #1
 80091be:	6179      	str	r1, [r7, #20]
 80091c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091c4:	b2d2      	uxtb	r2, r2
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	09db      	lsrs	r3, r3, #7
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	2b7f      	cmp	r3, #127	; 0x7f
 80091d2:	d8f0      	bhi.n	80091b6 <SEGGER_SYSVIEW_Start+0x106>
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	617a      	str	r2, [r7, #20]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	b2d2      	uxtb	r2, r2
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80091e4:	2218      	movs	r2, #24
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff fc6b 	bl	8008ac4 <_SendPacket>
      RECORD_END();
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <SEGGER_SYSVIEW_Start+0x168>)
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009202:	f000 f9eb 	bl	80095dc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009206:	f000 f9b1 	bl	800956c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800920a:	f000 fc83 	bl	8009b14 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800920e:	bf00      	nop
 8009210:	3730      	adds	r7, #48	; 0x30
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200146b8 	.word	0x200146b8
 800921c:	0800b46c 	.word	0x0800b46c
 8009220:	200146e8 	.word	0x200146e8

08009224 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800922a:	f3ef 8311 	mrs	r3, BASEPRI
 800922e:	f04f 0120 	mov.w	r1, #32
 8009232:	f381 8811 	msr	BASEPRI, r1
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	480b      	ldr	r0, [pc, #44]	; (8009268 <SEGGER_SYSVIEW_Stop+0x44>)
 800923a:	f7ff fb54 	bl	80088e6 <_PreparePacket>
 800923e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <SEGGER_SYSVIEW_Stop+0x48>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d007      	beq.n	8009258 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009248:	220b      	movs	r2, #11
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6838      	ldr	r0, [r7, #0]
 800924e:	f7ff fc39 	bl	8008ac4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <SEGGER_SYSVIEW_Stop+0x48>)
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f383 8811 	msr	BASEPRI, r3
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200146e8 	.word	0x200146e8
 800926c:	200146b8 	.word	0x200146b8

08009270 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009270:	b580      	push	{r7, lr}
 8009272:	b08c      	sub	sp, #48	; 0x30
 8009274:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009276:	f3ef 8311 	mrs	r3, BASEPRI
 800927a:	f04f 0120 	mov.w	r1, #32
 800927e:	f381 8811 	msr	BASEPRI, r1
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	4845      	ldr	r0, [pc, #276]	; (800939c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009286:	f7ff fb2e 	bl	80088e6 <_PreparePacket>
 800928a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009294:	4b42      	ldr	r3, [pc, #264]	; (80093a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
 800929a:	e00b      	b.n	80092b4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	1c59      	adds	r1, r3, #1
 80092a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80092a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	09db      	lsrs	r3, r3, #7
 80092b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	2b7f      	cmp	r3, #127	; 0x7f
 80092b8:	d8f0      	bhi.n	800929c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092c2:	b2d2      	uxtb	r2, r2
 80092c4:	701a      	strb	r2, [r3, #0]
 80092c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
 80092ce:	4b34      	ldr	r3, [pc, #208]	; (80093a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	623b      	str	r3, [r7, #32]
 80092d4:	e00b      	b.n	80092ee <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	b2da      	uxtb	r2, r3
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	1c59      	adds	r1, r3, #1
 80092de:	6279      	str	r1, [r7, #36]	; 0x24
 80092e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	09db      	lsrs	r3, r3, #7
 80092ec:	623b      	str	r3, [r7, #32]
 80092ee:	6a3b      	ldr	r3, [r7, #32]
 80092f0:	2b7f      	cmp	r3, #127	; 0x7f
 80092f2:	d8f0      	bhi.n	80092d6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	627a      	str	r2, [r7, #36]	; 0x24
 80092fa:	6a3a      	ldr	r2, [r7, #32]
 80092fc:	b2d2      	uxtb	r2, r2
 80092fe:	701a      	strb	r2, [r3, #0]
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	61fb      	str	r3, [r7, #28]
 8009308:	4b25      	ldr	r3, [pc, #148]	; (80093a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	61bb      	str	r3, [r7, #24]
 800930e:	e00b      	b.n	8009328 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	b2da      	uxtb	r2, r3
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	1c59      	adds	r1, r3, #1
 8009318:	61f9      	str	r1, [r7, #28]
 800931a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	09db      	lsrs	r3, r3, #7
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	2b7f      	cmp	r3, #127	; 0x7f
 800932c:	d8f0      	bhi.n	8009310 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	61fa      	str	r2, [r7, #28]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	b2d2      	uxtb	r2, r2
 8009338:	701a      	strb	r2, [r3, #0]
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	e00b      	b.n	8009360 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	b2da      	uxtb	r2, r3
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	1c59      	adds	r1, r3, #1
 8009350:	6179      	str	r1, [r7, #20]
 8009352:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	09db      	lsrs	r3, r3, #7
 800935e:	613b      	str	r3, [r7, #16]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b7f      	cmp	r3, #127	; 0x7f
 8009364:	d8f0      	bhi.n	8009348 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	617a      	str	r2, [r7, #20]
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009376:	2218      	movs	r2, #24
 8009378:	6879      	ldr	r1, [r7, #4]
 800937a:	68b8      	ldr	r0, [r7, #8]
 800937c:	f7ff fba2 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009386:	4b06      	ldr	r3, [pc, #24]	; (80093a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800938e:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	4798      	blx	r3
  }
}
 8009394:	bf00      	nop
 8009396:	3730      	adds	r7, #48	; 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	200146e8 	.word	0x200146e8
 80093a0:	200146b8 	.word	0x200146b8

080093a4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b092      	sub	sp, #72	; 0x48
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80093ac:	f3ef 8311 	mrs	r3, BASEPRI
 80093b0:	f04f 0120 	mov.w	r1, #32
 80093b4:	f381 8811 	msr	BASEPRI, r1
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	486a      	ldr	r0, [pc, #424]	; (8009564 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80093bc:	f7ff fa93 	bl	80088e6 <_PreparePacket>
 80093c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	647b      	str	r3, [r7, #68]	; 0x44
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	4b66      	ldr	r3, [pc, #408]	; (8009568 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	643b      	str	r3, [r7, #64]	; 0x40
 80093d6:	e00b      	b.n	80093f0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80093d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093de:	1c59      	adds	r1, r3, #1
 80093e0:	6479      	str	r1, [r7, #68]	; 0x44
 80093e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	701a      	strb	r2, [r3, #0]
 80093ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ec:	09db      	lsrs	r3, r3, #7
 80093ee:	643b      	str	r3, [r7, #64]	; 0x40
 80093f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f2:	2b7f      	cmp	r3, #127	; 0x7f
 80093f4:	d8f0      	bhi.n	80093d8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80093f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	647a      	str	r2, [r7, #68]	; 0x44
 80093fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093fe:	b2d2      	uxtb	r2, r2
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009404:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009410:	e00b      	b.n	800942a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009418:	1c59      	adds	r1, r3, #1
 800941a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800941c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009420:	b2d2      	uxtb	r2, r2
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	09db      	lsrs	r3, r3, #7
 8009428:	63bb      	str	r3, [r7, #56]	; 0x38
 800942a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942c:	2b7f      	cmp	r3, #127	; 0x7f
 800942e:	d8f0      	bhi.n	8009412 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009438:	b2d2      	uxtb	r2, r2
 800943a:	701a      	strb	r2, [r3, #0]
 800943c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	4619      	mov	r1, r3
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff f9ff 	bl	800884c <_EncodeStr>
 800944e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009450:	2209      	movs	r2, #9
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	6938      	ldr	r0, [r7, #16]
 8009456:	f7ff fb35 	bl	8008ac4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	637b      	str	r3, [r7, #52]	; 0x34
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	4b40      	ldr	r3, [pc, #256]	; (8009568 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	633b      	str	r3, [r7, #48]	; 0x30
 800946e:	e00b      	b.n	8009488 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	b2da      	uxtb	r2, r3
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	1c59      	adds	r1, r3, #1
 8009478:	6379      	str	r1, [r7, #52]	; 0x34
 800947a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009484:	09db      	lsrs	r3, r3, #7
 8009486:	633b      	str	r3, [r7, #48]	; 0x30
 8009488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948a:	2b7f      	cmp	r3, #127	; 0x7f
 800948c:	d8f0      	bhi.n	8009470 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800948e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	637a      	str	r2, [r7, #52]	; 0x34
 8009494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80094a8:	e00b      	b.n	80094c2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b0:	1c59      	adds	r1, r3, #1
 80094b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80094b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094b8:	b2d2      	uxtb	r2, r2
 80094ba:	701a      	strb	r2, [r3, #0]
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	09db      	lsrs	r3, r3, #7
 80094c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	2b7f      	cmp	r3, #127	; 0x7f
 80094c6:	d8f0      	bhi.n	80094aa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80094c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	e00b      	b.n	80094fc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	1c59      	adds	r1, r3, #1
 80094ec:	6279      	str	r1, [r7, #36]	; 0x24
 80094ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094f2:	b2d2      	uxtb	r2, r2
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	09db      	lsrs	r3, r3, #7
 80094fa:	623b      	str	r3, [r7, #32]
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009500:	d8f0      	bhi.n	80094e4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	627a      	str	r2, [r7, #36]	; 0x24
 8009508:	6a3a      	ldr	r2, [r7, #32]
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	61fb      	str	r3, [r7, #28]
 8009516:	2300      	movs	r3, #0
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	e00b      	b.n	8009534 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	b2da      	uxtb	r2, r3
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	1c59      	adds	r1, r3, #1
 8009524:	61f9      	str	r1, [r7, #28]
 8009526:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800952a:	b2d2      	uxtb	r2, r2
 800952c:	701a      	strb	r2, [r3, #0]
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	09db      	lsrs	r3, r3, #7
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	2b7f      	cmp	r3, #127	; 0x7f
 8009538:	d8f0      	bhi.n	800951c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	61fa      	str	r2, [r7, #28]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800954a:	2215      	movs	r2, #21
 800954c:	68f9      	ldr	r1, [r7, #12]
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f7ff fab8 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f383 8811 	msr	BASEPRI, r3
}
 800955a:	bf00      	nop
 800955c:	3748      	adds	r7, #72	; 0x48
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200146e8 	.word	0x200146e8
 8009568:	200146b8 	.word	0x200146b8

0800956c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d008      	beq.n	800958a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009582:	4b03      	ldr	r3, [pc, #12]	; (8009590 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4798      	blx	r3
  }
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200146b8 	.word	0x200146b8

08009594 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800959c:	f3ef 8311 	mrs	r3, BASEPRI
 80095a0:	f04f 0120 	mov.w	r1, #32
 80095a4:	f381 8811 	msr	BASEPRI, r1
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	480b      	ldr	r0, [pc, #44]	; (80095d8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80095ac:	f7ff f99b 	bl	80088e6 <_PreparePacket>
 80095b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80095b2:	2280      	movs	r2, #128	; 0x80
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	6938      	ldr	r0, [r7, #16]
 80095b8:	f7ff f948 	bl	800884c <_EncodeStr>
 80095bc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80095be:	220e      	movs	r2, #14
 80095c0:	68f9      	ldr	r1, [r7, #12]
 80095c2:	6938      	ldr	r0, [r7, #16]
 80095c4:	f7ff fa7e 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f383 8811 	msr	BASEPRI, r3
}
 80095ce:	bf00      	nop
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200146e8 	.word	0x200146e8

080095dc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d01a      	beq.n	8009620 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80095ea:	4b13      	ldr	r3, [pc, #76]	; (8009638 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d015      	beq.n	8009620 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4798      	blx	r3
 80095fc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009600:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	f04f 0300 	mov.w	r3, #0
 800960e:	000a      	movs	r2, r1
 8009610:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009612:	4613      	mov	r3, r2
 8009614:	461a      	mov	r2, r3
 8009616:	4621      	mov	r1, r4
 8009618:	200d      	movs	r0, #13
 800961a:	f7ff fbe7 	bl	8008dec <SEGGER_SYSVIEW_RecordU32x2>
 800961e:	e006      	b.n	800962e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	200c      	movs	r0, #12
 8009628:	f7ff fba4 	bl	8008d74 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	bd90      	pop	{r4, r7, pc}
 8009636:	bf00      	nop
 8009638:	200146b8 	.word	0x200146b8
 800963c:	e0001004 	.word	0xe0001004

08009640 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009646:	f3ef 8311 	mrs	r3, BASEPRI
 800964a:	f04f 0120 	mov.w	r1, #32
 800964e:	f381 8811 	msr	BASEPRI, r1
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	4819      	ldr	r0, [pc, #100]	; (80096bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009656:	f7ff f946 	bl	80088e6 <_PreparePacket>
 800965a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009660:	4b17      	ldr	r3, [pc, #92]	; (80096c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009668:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	613b      	str	r3, [r7, #16]
 8009672:	e00b      	b.n	800968c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	b2da      	uxtb	r2, r3
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	6179      	str	r1, [r7, #20]
 800967e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	09db      	lsrs	r3, r3, #7
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	2b7f      	cmp	r3, #127	; 0x7f
 8009690:	d8f0      	bhi.n	8009674 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	617a      	str	r2, [r7, #20]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80096a2:	2202      	movs	r2, #2
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f7ff fa0c 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f383 8811 	msr	BASEPRI, r3
}
 80096b2:	bf00      	nop
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200146e8 	.word	0x200146e8
 80096c0:	e000ed04 	.word	0xe000ed04

080096c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80096ca:	f3ef 8311 	mrs	r3, BASEPRI
 80096ce:	f04f 0120 	mov.w	r1, #32
 80096d2:	f381 8811 	msr	BASEPRI, r1
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	4807      	ldr	r0, [pc, #28]	; (80096f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80096da:	f7ff f904 	bl	80088e6 <_PreparePacket>
 80096de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80096e0:	2203      	movs	r2, #3
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6838      	ldr	r0, [r7, #0]
 80096e6:	f7ff f9ed 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f383 8811 	msr	BASEPRI, r3
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	200146e8 	.word	0x200146e8

080096fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009702:	f3ef 8311 	mrs	r3, BASEPRI
 8009706:	f04f 0120 	mov.w	r1, #32
 800970a:	f381 8811 	msr	BASEPRI, r1
 800970e:	607b      	str	r3, [r7, #4]
 8009710:	4807      	ldr	r0, [pc, #28]	; (8009730 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009712:	f7ff f8e8 	bl	80088e6 <_PreparePacket>
 8009716:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009718:	2212      	movs	r2, #18
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6838      	ldr	r0, [r7, #0]
 800971e:	f7ff f9d1 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f383 8811 	msr	BASEPRI, r3
}
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	200146e8 	.word	0x200146e8

08009734 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800973a:	f3ef 8311 	mrs	r3, BASEPRI
 800973e:	f04f 0120 	mov.w	r1, #32
 8009742:	f381 8811 	msr	BASEPRI, r1
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	4807      	ldr	r0, [pc, #28]	; (8009768 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800974a:	f7ff f8cc 	bl	80088e6 <_PreparePacket>
 800974e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009750:	2211      	movs	r2, #17
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6838      	ldr	r0, [r7, #0]
 8009756:	f7ff f9b5 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f383 8811 	msr	BASEPRI, r3
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200146e8 	.word	0x200146e8

0800976c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800976c:	b580      	push	{r7, lr}
 800976e:	b088      	sub	sp, #32
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009774:	f3ef 8311 	mrs	r3, BASEPRI
 8009778:	f04f 0120 	mov.w	r1, #32
 800977c:	f381 8811 	msr	BASEPRI, r1
 8009780:	617b      	str	r3, [r7, #20]
 8009782:	4819      	ldr	r0, [pc, #100]	; (80097e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009784:	f7ff f8af 	bl	80088e6 <_PreparePacket>
 8009788:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800978e:	4b17      	ldr	r3, [pc, #92]	; (80097ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	61fb      	str	r3, [r7, #28]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e00b      	b.n	80097ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	1c59      	adds	r1, r3, #1
 80097aa:	61f9      	str	r1, [r7, #28]
 80097ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097b0:	b2d2      	uxtb	r2, r2
 80097b2:	701a      	strb	r2, [r3, #0]
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	09db      	lsrs	r3, r3, #7
 80097b8:	61bb      	str	r3, [r7, #24]
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	2b7f      	cmp	r3, #127	; 0x7f
 80097be:	d8f0      	bhi.n	80097a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	61fa      	str	r2, [r7, #28]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80097d0:	2208      	movs	r2, #8
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	6938      	ldr	r0, [r7, #16]
 80097d6:	f7ff f975 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f383 8811 	msr	BASEPRI, r3
}
 80097e0:	bf00      	nop
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	200146e8 	.word	0x200146e8
 80097ec:	200146b8 	.word	0x200146b8

080097f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80097f8:	f3ef 8311 	mrs	r3, BASEPRI
 80097fc:	f04f 0120 	mov.w	r1, #32
 8009800:	f381 8811 	msr	BASEPRI, r1
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	4819      	ldr	r0, [pc, #100]	; (800986c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009808:	f7ff f86d 	bl	80088e6 <_PreparePacket>
 800980c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009812:	4b17      	ldr	r3, [pc, #92]	; (8009870 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	e00b      	b.n	800983e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	b2da      	uxtb	r2, r3
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	1c59      	adds	r1, r3, #1
 800982e:	61f9      	str	r1, [r7, #28]
 8009830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009834:	b2d2      	uxtb	r2, r2
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	09db      	lsrs	r3, r3, #7
 800983c:	61bb      	str	r3, [r7, #24]
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b7f      	cmp	r3, #127	; 0x7f
 8009842:	d8f0      	bhi.n	8009826 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	61fa      	str	r2, [r7, #28]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	b2d2      	uxtb	r2, r2
 800984e:	701a      	strb	r2, [r3, #0]
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009854:	2204      	movs	r2, #4
 8009856:	68f9      	ldr	r1, [r7, #12]
 8009858:	6938      	ldr	r0, [r7, #16]
 800985a:	f7ff f933 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f383 8811 	msr	BASEPRI, r3
}
 8009864:	bf00      	nop
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	200146e8 	.word	0x200146e8
 8009870:	200146b8 	.word	0x200146b8

08009874 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800987c:	f3ef 8311 	mrs	r3, BASEPRI
 8009880:	f04f 0120 	mov.w	r1, #32
 8009884:	f381 8811 	msr	BASEPRI, r1
 8009888:	617b      	str	r3, [r7, #20]
 800988a:	4819      	ldr	r0, [pc, #100]	; (80098f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800988c:	f7ff f82b 	bl	80088e6 <_PreparePacket>
 8009890:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	e00b      	b.n	80098c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	1c59      	adds	r1, r3, #1
 80098b2:	61f9      	str	r1, [r7, #28]
 80098b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098b8:	b2d2      	uxtb	r2, r2
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	09db      	lsrs	r3, r3, #7
 80098c0:	61bb      	str	r3, [r7, #24]
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b7f      	cmp	r3, #127	; 0x7f
 80098c6:	d8f0      	bhi.n	80098aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	61fa      	str	r2, [r7, #28]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	b2d2      	uxtb	r2, r2
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80098d8:	2206      	movs	r2, #6
 80098da:	68f9      	ldr	r1, [r7, #12]
 80098dc:	6938      	ldr	r0, [r7, #16]
 80098de:	f7ff f8f1 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f383 8811 	msr	BASEPRI, r3
}
 80098e8:	bf00      	nop
 80098ea:	3720      	adds	r7, #32
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	200146e8 	.word	0x200146e8
 80098f4:	200146b8 	.word	0x200146b8

080098f8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b08a      	sub	sp, #40	; 0x28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009902:	f3ef 8311 	mrs	r3, BASEPRI
 8009906:	f04f 0120 	mov.w	r1, #32
 800990a:	f381 8811 	msr	BASEPRI, r1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	4827      	ldr	r0, [pc, #156]	; (80099b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8009912:	f7fe ffe8 	bl	80088e6 <_PreparePacket>
 8009916:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800991c:	4b25      	ldr	r3, [pc, #148]	; (80099b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	623b      	str	r3, [r7, #32]
 800992e:	e00b      	b.n	8009948 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	6279      	str	r1, [r7, #36]	; 0x24
 800993a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	09db      	lsrs	r3, r3, #7
 8009946:	623b      	str	r3, [r7, #32]
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	2b7f      	cmp	r3, #127	; 0x7f
 800994c:	d8f0      	bhi.n	8009930 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	627a      	str	r2, [r7, #36]	; 0x24
 8009954:	6a3a      	ldr	r2, [r7, #32]
 8009956:	b2d2      	uxtb	r2, r2
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	61fb      	str	r3, [r7, #28]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	e00b      	b.n	8009980 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	1c59      	adds	r1, r3, #1
 8009970:	61f9      	str	r1, [r7, #28]
 8009972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009976:	b2d2      	uxtb	r2, r2
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	09db      	lsrs	r3, r3, #7
 800997e:	61bb      	str	r3, [r7, #24]
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b7f      	cmp	r3, #127	; 0x7f
 8009984:	d8f0      	bhi.n	8009968 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	61fa      	str	r2, [r7, #28]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	b2d2      	uxtb	r2, r2
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8009996:	2207      	movs	r2, #7
 8009998:	68f9      	ldr	r1, [r7, #12]
 800999a:	6938      	ldr	r0, [r7, #16]
 800999c:	f7ff f892 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f383 8811 	msr	BASEPRI, r3
}
 80099a6:	bf00      	nop
 80099a8:	3728      	adds	r7, #40	; 0x28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	200146e8 	.word	0x200146e8
 80099b4:	200146b8 	.word	0x200146b8

080099b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	1ad3      	subs	r3, r2, r3
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	200146b8 	.word	0x200146b8

080099d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08c      	sub	sp, #48	; 0x30
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80099e2:	4b3b      	ldr	r3, [pc, #236]	; (8009ad0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d06d      	beq.n	8009ac6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80099ea:	4b39      	ldr	r3, [pc, #228]	; (8009ad0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80099f0:	2300      	movs	r3, #0
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f4:	e008      	b.n	8009a08 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	3301      	adds	r3, #1
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d3f2      	bcc.n	80099f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8009a10:	e000      	b.n	8009a14 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009a12:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d055      	beq.n	8009ac6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8009a1e:	f04f 0120 	mov.w	r1, #32
 8009a22:	f381 8811 	msr	BASEPRI, r1
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	482a      	ldr	r0, [pc, #168]	; (8009ad4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009a2a:	f7fe ff5c 	bl	80088e6 <_PreparePacket>
 8009a2e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	623b      	str	r3, [r7, #32]
 8009a3c:	e00b      	b.n	8009a56 <SEGGER_SYSVIEW_SendModule+0x7e>
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	1c59      	adds	r1, r3, #1
 8009a46:	6279      	str	r1, [r7, #36]	; 0x24
 8009a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	09db      	lsrs	r3, r3, #7
 8009a54:	623b      	str	r3, [r7, #32]
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	2b7f      	cmp	r3, #127	; 0x7f
 8009a5a:	d8f0      	bhi.n	8009a3e <SEGGER_SYSVIEW_SendModule+0x66>
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	627a      	str	r2, [r7, #36]	; 0x24
 8009a62:	6a3a      	ldr	r2, [r7, #32]
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	701a      	strb	r2, [r3, #0]
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	e00b      	b.n	8009a90 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	1c59      	adds	r1, r3, #1
 8009a80:	61f9      	str	r1, [r7, #28]
 8009a82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	09db      	lsrs	r3, r3, #7
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	2b7f      	cmp	r3, #127	; 0x7f
 8009a94:	d8f0      	bhi.n	8009a78 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	61fa      	str	r2, [r7, #28]
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	4619      	mov	r1, r3
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7fe fecc 	bl	800884c <_EncodeStr>
 8009ab4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009ab6:	2216      	movs	r2, #22
 8009ab8:	68f9      	ldr	r1, [r7, #12]
 8009aba:	6938      	ldr	r0, [r7, #16]
 8009abc:	f7ff f802 	bl	8008ac4 <_SendPacket>
      RECORD_END();
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	3730      	adds	r7, #48	; 0x30
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	200146e0 	.word	0x200146e0
 8009ad4:	200146e8 	.word	0x200146e8

08009ad8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00f      	beq.n	8009b06 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d002      	beq.n	8009afa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f2      	bne.n	8009aec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	200146e0 	.word	0x200146e0

08009b14 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b1e:	f04f 0120 	mov.w	r1, #32
 8009b22:	f381 8811 	msr	BASEPRI, r1
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	4817      	ldr	r0, [pc, #92]	; (8009b88 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009b2a:	f7fe fedc 	bl	80088e6 <_PreparePacket>
 8009b2e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	4b14      	ldr	r3, [pc, #80]	; (8009b8c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	613b      	str	r3, [r7, #16]
 8009b3e:	e00b      	b.n	8009b58 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	1c59      	adds	r1, r3, #1
 8009b48:	6179      	str	r1, [r7, #20]
 8009b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	09db      	lsrs	r3, r3, #7
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b5c:	d8f0      	bhi.n	8009b40 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	617a      	str	r2, [r7, #20]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	b2d2      	uxtb	r2, r2
 8009b68:	701a      	strb	r2, [r3, #0]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009b6e:	221b      	movs	r2, #27
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	68b8      	ldr	r0, [r7, #8]
 8009b74:	f7fe ffa6 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f383 8811 	msr	BASEPRI, r3
}
 8009b7e:	bf00      	nop
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200146e8 	.word	0x200146e8
 8009b8c:	200146e4 	.word	0x200146e4

08009b90 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b08a      	sub	sp, #40	; 0x28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009b98:	f3ef 8311 	mrs	r3, BASEPRI
 8009b9c:	f04f 0120 	mov.w	r1, #32
 8009ba0:	f381 8811 	msr	BASEPRI, r1
 8009ba4:	617b      	str	r3, [r7, #20]
 8009ba6:	4827      	ldr	r0, [pc, #156]	; (8009c44 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009ba8:	f7fe fe9d 	bl	80088e6 <_PreparePacket>
 8009bac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009bae:	2280      	movs	r2, #128	; 0x80
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	6938      	ldr	r0, [r7, #16]
 8009bb4:	f7fe fe4a 	bl	800884c <_EncodeStr>
 8009bb8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	623b      	str	r3, [r7, #32]
 8009bc2:	e00b      	b.n	8009bdc <SEGGER_SYSVIEW_Warn+0x4c>
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	1c59      	adds	r1, r3, #1
 8009bcc:	6279      	str	r1, [r7, #36]	; 0x24
 8009bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009bd2:	b2d2      	uxtb	r2, r2
 8009bd4:	701a      	strb	r2, [r3, #0]
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	09db      	lsrs	r3, r3, #7
 8009bda:	623b      	str	r3, [r7, #32]
 8009bdc:	6a3b      	ldr	r3, [r7, #32]
 8009bde:	2b7f      	cmp	r3, #127	; 0x7f
 8009be0:	d8f0      	bhi.n	8009bc4 <SEGGER_SYSVIEW_Warn+0x34>
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	627a      	str	r2, [r7, #36]	; 0x24
 8009be8:	6a3a      	ldr	r2, [r7, #32]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	e00b      	b.n	8009c14 <SEGGER_SYSVIEW_Warn+0x84>
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	1c59      	adds	r1, r3, #1
 8009c04:	61f9      	str	r1, [r7, #28]
 8009c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c0a:	b2d2      	uxtb	r2, r2
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	09db      	lsrs	r3, r3, #7
 8009c12:	61bb      	str	r3, [r7, #24]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b7f      	cmp	r3, #127	; 0x7f
 8009c18:	d8f0      	bhi.n	8009bfc <SEGGER_SYSVIEW_Warn+0x6c>
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	61fa      	str	r2, [r7, #28]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	b2d2      	uxtb	r2, r2
 8009c24:	701a      	strb	r2, [r3, #0]
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8009c2a:	221a      	movs	r2, #26
 8009c2c:	68f9      	ldr	r1, [r7, #12]
 8009c2e:	6938      	ldr	r0, [r7, #16]
 8009c30:	f7fe ff48 	bl	8008ac4 <_SendPacket>
  RECORD_END();
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f383 8811 	msr	BASEPRI, r3
}
 8009c3a:	bf00      	nop
 8009c3c:	3728      	adds	r7, #40	; 0x28
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	200146e8 	.word	0x200146e8

08009c48 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	f7fe fcdc 	bl	8008618 <SEGGER_RTT_Write>
  return len;
 8009c60:	683b      	ldr	r3, [r7, #0]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <std>:
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	4604      	mov	r4, r0
 8009c72:	e9c0 3300 	strd	r3, r3, [r0]
 8009c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c7a:	6083      	str	r3, [r0, #8]
 8009c7c:	8181      	strh	r1, [r0, #12]
 8009c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c80:	81c2      	strh	r2, [r0, #14]
 8009c82:	6183      	str	r3, [r0, #24]
 8009c84:	4619      	mov	r1, r3
 8009c86:	2208      	movs	r2, #8
 8009c88:	305c      	adds	r0, #92	; 0x5c
 8009c8a:	f000 fa27 	bl	800a0dc <memset>
 8009c8e:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <std+0x58>)
 8009c90:	6263      	str	r3, [r4, #36]	; 0x24
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <std+0x5c>)
 8009c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c96:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <std+0x60>)
 8009c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c9a:	4b0d      	ldr	r3, [pc, #52]	; (8009cd0 <std+0x64>)
 8009c9c:	6323      	str	r3, [r4, #48]	; 0x30
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <std+0x68>)
 8009ca0:	6224      	str	r4, [r4, #32]
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d006      	beq.n	8009cb4 <std+0x48>
 8009ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009caa:	4294      	cmp	r4, r2
 8009cac:	d002      	beq.n	8009cb4 <std+0x48>
 8009cae:	33d0      	adds	r3, #208	; 0xd0
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d105      	bne.n	8009cc0 <std+0x54>
 8009cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cbc:	f000 ba6e 	b.w	800a19c <__retarget_lock_init_recursive>
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	bf00      	nop
 8009cc4:	08009f0d 	.word	0x08009f0d
 8009cc8:	08009f2f 	.word	0x08009f2f
 8009ccc:	08009f67 	.word	0x08009f67
 8009cd0:	08009f8b 	.word	0x08009f8b
 8009cd4:	200147cc 	.word	0x200147cc

08009cd8 <stdio_exit_handler>:
 8009cd8:	4a02      	ldr	r2, [pc, #8]	; (8009ce4 <stdio_exit_handler+0xc>)
 8009cda:	4903      	ldr	r1, [pc, #12]	; (8009ce8 <stdio_exit_handler+0x10>)
 8009cdc:	4803      	ldr	r0, [pc, #12]	; (8009cec <stdio_exit_handler+0x14>)
 8009cde:	f000 b869 	b.w	8009db4 <_fwalk_sglue>
 8009ce2:	bf00      	nop
 8009ce4:	200000dc 	.word	0x200000dc
 8009ce8:	0800ad15 	.word	0x0800ad15
 8009cec:	200000e8 	.word	0x200000e8

08009cf0 <cleanup_stdio>:
 8009cf0:	6841      	ldr	r1, [r0, #4]
 8009cf2:	4b0c      	ldr	r3, [pc, #48]	; (8009d24 <cleanup_stdio+0x34>)
 8009cf4:	4299      	cmp	r1, r3
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	d001      	beq.n	8009d00 <cleanup_stdio+0x10>
 8009cfc:	f001 f80a 	bl	800ad14 <_fflush_r>
 8009d00:	68a1      	ldr	r1, [r4, #8]
 8009d02:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <cleanup_stdio+0x38>)
 8009d04:	4299      	cmp	r1, r3
 8009d06:	d002      	beq.n	8009d0e <cleanup_stdio+0x1e>
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f001 f803 	bl	800ad14 <_fflush_r>
 8009d0e:	68e1      	ldr	r1, [r4, #12]
 8009d10:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <cleanup_stdio+0x3c>)
 8009d12:	4299      	cmp	r1, r3
 8009d14:	d004      	beq.n	8009d20 <cleanup_stdio+0x30>
 8009d16:	4620      	mov	r0, r4
 8009d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d1c:	f000 bffa 	b.w	800ad14 <_fflush_r>
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	200147cc 	.word	0x200147cc
 8009d28:	20014834 	.word	0x20014834
 8009d2c:	2001489c 	.word	0x2001489c

08009d30 <global_stdio_init.part.0>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4b0b      	ldr	r3, [pc, #44]	; (8009d60 <global_stdio_init.part.0+0x30>)
 8009d34:	4c0b      	ldr	r4, [pc, #44]	; (8009d64 <global_stdio_init.part.0+0x34>)
 8009d36:	4a0c      	ldr	r2, [pc, #48]	; (8009d68 <global_stdio_init.part.0+0x38>)
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2104      	movs	r1, #4
 8009d40:	f7ff ff94 	bl	8009c6c <std>
 8009d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d48:	2201      	movs	r2, #1
 8009d4a:	2109      	movs	r1, #9
 8009d4c:	f7ff ff8e 	bl	8009c6c <std>
 8009d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d54:	2202      	movs	r2, #2
 8009d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5a:	2112      	movs	r1, #18
 8009d5c:	f7ff bf86 	b.w	8009c6c <std>
 8009d60:	20014904 	.word	0x20014904
 8009d64:	200147cc 	.word	0x200147cc
 8009d68:	08009cd9 	.word	0x08009cd9

08009d6c <__sfp_lock_acquire>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__sfp_lock_acquire+0x8>)
 8009d6e:	f000 ba16 	b.w	800a19e <__retarget_lock_acquire_recursive>
 8009d72:	bf00      	nop
 8009d74:	2001490d 	.word	0x2001490d

08009d78 <__sfp_lock_release>:
 8009d78:	4801      	ldr	r0, [pc, #4]	; (8009d80 <__sfp_lock_release+0x8>)
 8009d7a:	f000 ba11 	b.w	800a1a0 <__retarget_lock_release_recursive>
 8009d7e:	bf00      	nop
 8009d80:	2001490d 	.word	0x2001490d

08009d84 <__sinit>:
 8009d84:	b510      	push	{r4, lr}
 8009d86:	4604      	mov	r4, r0
 8009d88:	f7ff fff0 	bl	8009d6c <__sfp_lock_acquire>
 8009d8c:	6a23      	ldr	r3, [r4, #32]
 8009d8e:	b11b      	cbz	r3, 8009d98 <__sinit+0x14>
 8009d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d94:	f7ff bff0 	b.w	8009d78 <__sfp_lock_release>
 8009d98:	4b04      	ldr	r3, [pc, #16]	; (8009dac <__sinit+0x28>)
 8009d9a:	6223      	str	r3, [r4, #32]
 8009d9c:	4b04      	ldr	r3, [pc, #16]	; (8009db0 <__sinit+0x2c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1f5      	bne.n	8009d90 <__sinit+0xc>
 8009da4:	f7ff ffc4 	bl	8009d30 <global_stdio_init.part.0>
 8009da8:	e7f2      	b.n	8009d90 <__sinit+0xc>
 8009daa:	bf00      	nop
 8009dac:	08009cf1 	.word	0x08009cf1
 8009db0:	20014904 	.word	0x20014904

08009db4 <_fwalk_sglue>:
 8009db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db8:	4607      	mov	r7, r0
 8009dba:	4688      	mov	r8, r1
 8009dbc:	4614      	mov	r4, r2
 8009dbe:	2600      	movs	r6, #0
 8009dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8009dc8:	d505      	bpl.n	8009dd6 <_fwalk_sglue+0x22>
 8009dca:	6824      	ldr	r4, [r4, #0]
 8009dcc:	2c00      	cmp	r4, #0
 8009dce:	d1f7      	bne.n	8009dc0 <_fwalk_sglue+0xc>
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd6:	89ab      	ldrh	r3, [r5, #12]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d907      	bls.n	8009dec <_fwalk_sglue+0x38>
 8009ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009de0:	3301      	adds	r3, #1
 8009de2:	d003      	beq.n	8009dec <_fwalk_sglue+0x38>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4638      	mov	r0, r7
 8009de8:	47c0      	blx	r8
 8009dea:	4306      	orrs	r6, r0
 8009dec:	3568      	adds	r5, #104	; 0x68
 8009dee:	e7e9      	b.n	8009dc4 <_fwalk_sglue+0x10>

08009df0 <iprintf>:
 8009df0:	b40f      	push	{r0, r1, r2, r3}
 8009df2:	b507      	push	{r0, r1, r2, lr}
 8009df4:	4906      	ldr	r1, [pc, #24]	; (8009e10 <iprintf+0x20>)
 8009df6:	ab04      	add	r3, sp, #16
 8009df8:	6808      	ldr	r0, [r1, #0]
 8009dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfe:	6881      	ldr	r1, [r0, #8]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f000 fc57 	bl	800a6b4 <_vfiprintf_r>
 8009e06:	b003      	add	sp, #12
 8009e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e0c:	b004      	add	sp, #16
 8009e0e:	4770      	bx	lr
 8009e10:	20000134 	.word	0x20000134

08009e14 <_puts_r>:
 8009e14:	6a03      	ldr	r3, [r0, #32]
 8009e16:	b570      	push	{r4, r5, r6, lr}
 8009e18:	6884      	ldr	r4, [r0, #8]
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	460e      	mov	r6, r1
 8009e1e:	b90b      	cbnz	r3, 8009e24 <_puts_r+0x10>
 8009e20:	f7ff ffb0 	bl	8009d84 <__sinit>
 8009e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e26:	07db      	lsls	r3, r3, #31
 8009e28:	d405      	bmi.n	8009e36 <_puts_r+0x22>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	0598      	lsls	r0, r3, #22
 8009e2e:	d402      	bmi.n	8009e36 <_puts_r+0x22>
 8009e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e32:	f000 f9b4 	bl	800a19e <__retarget_lock_acquire_recursive>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	0719      	lsls	r1, r3, #28
 8009e3a:	d513      	bpl.n	8009e64 <_puts_r+0x50>
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	b18b      	cbz	r3, 8009e64 <_puts_r+0x50>
 8009e40:	3e01      	subs	r6, #1
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	60a3      	str	r3, [r4, #8]
 8009e4c:	b9e9      	cbnz	r1, 8009e8a <_puts_r+0x76>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	da2e      	bge.n	8009eb0 <_puts_r+0x9c>
 8009e52:	4622      	mov	r2, r4
 8009e54:	210a      	movs	r1, #10
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 f89b 	bl	8009f92 <__swbuf_r>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d007      	beq.n	8009e70 <_puts_r+0x5c>
 8009e60:	250a      	movs	r5, #10
 8009e62:	e007      	b.n	8009e74 <_puts_r+0x60>
 8009e64:	4621      	mov	r1, r4
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f8d0 	bl	800a00c <__swsetup_r>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0e7      	beq.n	8009e40 <_puts_r+0x2c>
 8009e70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e76:	07da      	lsls	r2, r3, #31
 8009e78:	d405      	bmi.n	8009e86 <_puts_r+0x72>
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	d402      	bmi.n	8009e86 <_puts_r+0x72>
 8009e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e82:	f000 f98d 	bl	800a1a0 <__retarget_lock_release_recursive>
 8009e86:	4628      	mov	r0, r5
 8009e88:	bd70      	pop	{r4, r5, r6, pc}
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	da04      	bge.n	8009e98 <_puts_r+0x84>
 8009e8e:	69a2      	ldr	r2, [r4, #24]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	dc06      	bgt.n	8009ea2 <_puts_r+0x8e>
 8009e94:	290a      	cmp	r1, #10
 8009e96:	d004      	beq.n	8009ea2 <_puts_r+0x8e>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	7019      	strb	r1, [r3, #0]
 8009ea0:	e7cf      	b.n	8009e42 <_puts_r+0x2e>
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f000 f874 	bl	8009f92 <__swbuf_r>
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d1c9      	bne.n	8009e42 <_puts_r+0x2e>
 8009eae:	e7df      	b.n	8009e70 <_puts_r+0x5c>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	250a      	movs	r5, #10
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	6022      	str	r2, [r4, #0]
 8009eb8:	701d      	strb	r5, [r3, #0]
 8009eba:	e7db      	b.n	8009e74 <_puts_r+0x60>

08009ebc <puts>:
 8009ebc:	4b02      	ldr	r3, [pc, #8]	; (8009ec8 <puts+0xc>)
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f7ff bfa7 	b.w	8009e14 <_puts_r>
 8009ec6:	bf00      	nop
 8009ec8:	20000134 	.word	0x20000134

08009ecc <siprintf>:
 8009ecc:	b40e      	push	{r1, r2, r3}
 8009ece:	b500      	push	{lr}
 8009ed0:	b09c      	sub	sp, #112	; 0x70
 8009ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ed4:	9002      	str	r0, [sp, #8]
 8009ed6:	9006      	str	r0, [sp, #24]
 8009ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009edc:	4809      	ldr	r0, [pc, #36]	; (8009f04 <siprintf+0x38>)
 8009ede:	9107      	str	r1, [sp, #28]
 8009ee0:	9104      	str	r1, [sp, #16]
 8009ee2:	4909      	ldr	r1, [pc, #36]	; (8009f08 <siprintf+0x3c>)
 8009ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee8:	9105      	str	r1, [sp, #20]
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	a902      	add	r1, sp, #8
 8009ef0:	f000 fab8 	bl	800a464 <_svfiprintf_r>
 8009ef4:	9b02      	ldr	r3, [sp, #8]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	b01c      	add	sp, #112	; 0x70
 8009efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f00:	b003      	add	sp, #12
 8009f02:	4770      	bx	lr
 8009f04:	20000134 	.word	0x20000134
 8009f08:	ffff0208 	.word	0xffff0208

08009f0c <__sread>:
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	460c      	mov	r4, r1
 8009f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f14:	f000 f90c 	bl	800a130 <_read_r>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	bfab      	itete	ge
 8009f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009f20:	181b      	addge	r3, r3, r0
 8009f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f26:	bfac      	ite	ge
 8009f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f2a:	81a3      	strhlt	r3, [r4, #12]
 8009f2c:	bd10      	pop	{r4, pc}

08009f2e <__swrite>:
 8009f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f32:	461f      	mov	r7, r3
 8009f34:	898b      	ldrh	r3, [r1, #12]
 8009f36:	05db      	lsls	r3, r3, #23
 8009f38:	4605      	mov	r5, r0
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	4616      	mov	r6, r2
 8009f3e:	d505      	bpl.n	8009f4c <__swrite+0x1e>
 8009f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f44:	2302      	movs	r3, #2
 8009f46:	2200      	movs	r2, #0
 8009f48:	f000 f8e0 	bl	800a10c <_lseek_r>
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f56:	81a3      	strh	r3, [r4, #12]
 8009f58:	4632      	mov	r2, r6
 8009f5a:	463b      	mov	r3, r7
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f62:	f7ff be71 	b.w	8009c48 <_write_r>

08009f66 <__sseek>:
 8009f66:	b510      	push	{r4, lr}
 8009f68:	460c      	mov	r4, r1
 8009f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6e:	f000 f8cd 	bl	800a10c <_lseek_r>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	bf15      	itete	ne
 8009f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f82:	81a3      	strheq	r3, [r4, #12]
 8009f84:	bf18      	it	ne
 8009f86:	81a3      	strhne	r3, [r4, #12]
 8009f88:	bd10      	pop	{r4, pc}

08009f8a <__sclose>:
 8009f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8e:	f000 b8ad 	b.w	800a0ec <_close_r>

08009f92 <__swbuf_r>:
 8009f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f94:	460e      	mov	r6, r1
 8009f96:	4614      	mov	r4, r2
 8009f98:	4605      	mov	r5, r0
 8009f9a:	b118      	cbz	r0, 8009fa4 <__swbuf_r+0x12>
 8009f9c:	6a03      	ldr	r3, [r0, #32]
 8009f9e:	b90b      	cbnz	r3, 8009fa4 <__swbuf_r+0x12>
 8009fa0:	f7ff fef0 	bl	8009d84 <__sinit>
 8009fa4:	69a3      	ldr	r3, [r4, #24]
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	071a      	lsls	r2, r3, #28
 8009fac:	d525      	bpl.n	8009ffa <__swbuf_r+0x68>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	b31b      	cbz	r3, 8009ffa <__swbuf_r+0x68>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	6922      	ldr	r2, [r4, #16]
 8009fb6:	1a98      	subs	r0, r3, r2
 8009fb8:	6963      	ldr	r3, [r4, #20]
 8009fba:	b2f6      	uxtb	r6, r6
 8009fbc:	4283      	cmp	r3, r0
 8009fbe:	4637      	mov	r7, r6
 8009fc0:	dc04      	bgt.n	8009fcc <__swbuf_r+0x3a>
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	f000 fea5 	bl	800ad14 <_fflush_r>
 8009fca:	b9e0      	cbnz	r0, 800a006 <__swbuf_r+0x74>
 8009fcc:	68a3      	ldr	r3, [r4, #8]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	60a3      	str	r3, [r4, #8]
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	6022      	str	r2, [r4, #0]
 8009fd8:	701e      	strb	r6, [r3, #0]
 8009fda:	6962      	ldr	r2, [r4, #20]
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d004      	beq.n	8009fec <__swbuf_r+0x5a>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	07db      	lsls	r3, r3, #31
 8009fe6:	d506      	bpl.n	8009ff6 <__swbuf_r+0x64>
 8009fe8:	2e0a      	cmp	r6, #10
 8009fea:	d104      	bne.n	8009ff6 <__swbuf_r+0x64>
 8009fec:	4621      	mov	r1, r4
 8009fee:	4628      	mov	r0, r5
 8009ff0:	f000 fe90 	bl	800ad14 <_fflush_r>
 8009ff4:	b938      	cbnz	r0, 800a006 <__swbuf_r+0x74>
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f000 f805 	bl	800a00c <__swsetup_r>
 800a002:	2800      	cmp	r0, #0
 800a004:	d0d5      	beq.n	8009fb2 <__swbuf_r+0x20>
 800a006:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a00a:	e7f4      	b.n	8009ff6 <__swbuf_r+0x64>

0800a00c <__swsetup_r>:
 800a00c:	b538      	push	{r3, r4, r5, lr}
 800a00e:	4b2a      	ldr	r3, [pc, #168]	; (800a0b8 <__swsetup_r+0xac>)
 800a010:	4605      	mov	r5, r0
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	460c      	mov	r4, r1
 800a016:	b118      	cbz	r0, 800a020 <__swsetup_r+0x14>
 800a018:	6a03      	ldr	r3, [r0, #32]
 800a01a:	b90b      	cbnz	r3, 800a020 <__swsetup_r+0x14>
 800a01c:	f7ff feb2 	bl	8009d84 <__sinit>
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a026:	0718      	lsls	r0, r3, #28
 800a028:	d422      	bmi.n	800a070 <__swsetup_r+0x64>
 800a02a:	06d9      	lsls	r1, r3, #27
 800a02c:	d407      	bmi.n	800a03e <__swsetup_r+0x32>
 800a02e:	2309      	movs	r3, #9
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a03c:	e034      	b.n	800a0a8 <__swsetup_r+0x9c>
 800a03e:	0758      	lsls	r0, r3, #29
 800a040:	d512      	bpl.n	800a068 <__swsetup_r+0x5c>
 800a042:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a044:	b141      	cbz	r1, 800a058 <__swsetup_r+0x4c>
 800a046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a04a:	4299      	cmp	r1, r3
 800a04c:	d002      	beq.n	800a054 <__swsetup_r+0x48>
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 f8b6 	bl	800a1c0 <_free_r>
 800a054:	2300      	movs	r3, #0
 800a056:	6363      	str	r3, [r4, #52]	; 0x34
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	2300      	movs	r3, #0
 800a062:	6063      	str	r3, [r4, #4]
 800a064:	6923      	ldr	r3, [r4, #16]
 800a066:	6023      	str	r3, [r4, #0]
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f043 0308 	orr.w	r3, r3, #8
 800a06e:	81a3      	strh	r3, [r4, #12]
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	b94b      	cbnz	r3, 800a088 <__swsetup_r+0x7c>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a07a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a07e:	d003      	beq.n	800a088 <__swsetup_r+0x7c>
 800a080:	4621      	mov	r1, r4
 800a082:	4628      	mov	r0, r5
 800a084:	f000 fe94 	bl	800adb0 <__smakebuf_r>
 800a088:	89a0      	ldrh	r0, [r4, #12]
 800a08a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a08e:	f010 0301 	ands.w	r3, r0, #1
 800a092:	d00a      	beq.n	800a0aa <__swsetup_r+0x9e>
 800a094:	2300      	movs	r3, #0
 800a096:	60a3      	str	r3, [r4, #8]
 800a098:	6963      	ldr	r3, [r4, #20]
 800a09a:	425b      	negs	r3, r3
 800a09c:	61a3      	str	r3, [r4, #24]
 800a09e:	6923      	ldr	r3, [r4, #16]
 800a0a0:	b943      	cbnz	r3, 800a0b4 <__swsetup_r+0xa8>
 800a0a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0a6:	d1c4      	bne.n	800a032 <__swsetup_r+0x26>
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	0781      	lsls	r1, r0, #30
 800a0ac:	bf58      	it	pl
 800a0ae:	6963      	ldrpl	r3, [r4, #20]
 800a0b0:	60a3      	str	r3, [r4, #8]
 800a0b2:	e7f4      	b.n	800a09e <__swsetup_r+0x92>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e7f7      	b.n	800a0a8 <__swsetup_r+0x9c>
 800a0b8:	20000134 	.word	0x20000134

0800a0bc <memcmp>:
 800a0bc:	b510      	push	{r4, lr}
 800a0be:	3901      	subs	r1, #1
 800a0c0:	4402      	add	r2, r0
 800a0c2:	4290      	cmp	r0, r2
 800a0c4:	d101      	bne.n	800a0ca <memcmp+0xe>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e005      	b.n	800a0d6 <memcmp+0x1a>
 800a0ca:	7803      	ldrb	r3, [r0, #0]
 800a0cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d001      	beq.n	800a0d8 <memcmp+0x1c>
 800a0d4:	1b18      	subs	r0, r3, r4
 800a0d6:	bd10      	pop	{r4, pc}
 800a0d8:	3001      	adds	r0, #1
 800a0da:	e7f2      	b.n	800a0c2 <memcmp+0x6>

0800a0dc <memset>:
 800a0dc:	4402      	add	r2, r0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d100      	bne.n	800a0e6 <memset+0xa>
 800a0e4:	4770      	bx	lr
 800a0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ea:	e7f9      	b.n	800a0e0 <memset+0x4>

0800a0ec <_close_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d06      	ldr	r5, [pc, #24]	; (800a108 <_close_r+0x1c>)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	f7f7 fa07 	bl	800150a <_close>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_close_r+0x1a>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_close_r+0x1a>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	20014908 	.word	0x20014908

0800a10c <_lseek_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d07      	ldr	r5, [pc, #28]	; (800a12c <_lseek_r+0x20>)
 800a110:	4604      	mov	r4, r0
 800a112:	4608      	mov	r0, r1
 800a114:	4611      	mov	r1, r2
 800a116:	2200      	movs	r2, #0
 800a118:	602a      	str	r2, [r5, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	f7f7 fa1c 	bl	8001558 <_lseek>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d102      	bne.n	800a12a <_lseek_r+0x1e>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	b103      	cbz	r3, 800a12a <_lseek_r+0x1e>
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	bd38      	pop	{r3, r4, r5, pc}
 800a12c:	20014908 	.word	0x20014908

0800a130 <_read_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d07      	ldr	r5, [pc, #28]	; (800a150 <_read_r+0x20>)
 800a134:	4604      	mov	r4, r0
 800a136:	4608      	mov	r0, r1
 800a138:	4611      	mov	r1, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	602a      	str	r2, [r5, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	f7f7 f9c6 	bl	80014d0 <_read>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d102      	bne.n	800a14e <_read_r+0x1e>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	b103      	cbz	r3, 800a14e <_read_r+0x1e>
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	20014908 	.word	0x20014908

0800a154 <__libc_init_array>:
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	4d0d      	ldr	r5, [pc, #52]	; (800a18c <__libc_init_array+0x38>)
 800a158:	4c0d      	ldr	r4, [pc, #52]	; (800a190 <__libc_init_array+0x3c>)
 800a15a:	1b64      	subs	r4, r4, r5
 800a15c:	10a4      	asrs	r4, r4, #2
 800a15e:	2600      	movs	r6, #0
 800a160:	42a6      	cmp	r6, r4
 800a162:	d109      	bne.n	800a178 <__libc_init_array+0x24>
 800a164:	4d0b      	ldr	r5, [pc, #44]	; (800a194 <__libc_init_array+0x40>)
 800a166:	4c0c      	ldr	r4, [pc, #48]	; (800a198 <__libc_init_array+0x44>)
 800a168:	f000 fef0 	bl	800af4c <_init>
 800a16c:	1b64      	subs	r4, r4, r5
 800a16e:	10a4      	asrs	r4, r4, #2
 800a170:	2600      	movs	r6, #0
 800a172:	42a6      	cmp	r6, r4
 800a174:	d105      	bne.n	800a182 <__libc_init_array+0x2e>
 800a176:	bd70      	pop	{r4, r5, r6, pc}
 800a178:	f855 3b04 	ldr.w	r3, [r5], #4
 800a17c:	4798      	blx	r3
 800a17e:	3601      	adds	r6, #1
 800a180:	e7ee      	b.n	800a160 <__libc_init_array+0xc>
 800a182:	f855 3b04 	ldr.w	r3, [r5], #4
 800a186:	4798      	blx	r3
 800a188:	3601      	adds	r6, #1
 800a18a:	e7f2      	b.n	800a172 <__libc_init_array+0x1e>
 800a18c:	0800b4b4 	.word	0x0800b4b4
 800a190:	0800b4b4 	.word	0x0800b4b4
 800a194:	0800b4b4 	.word	0x0800b4b4
 800a198:	0800b4b8 	.word	0x0800b4b8

0800a19c <__retarget_lock_init_recursive>:
 800a19c:	4770      	bx	lr

0800a19e <__retarget_lock_acquire_recursive>:
 800a19e:	4770      	bx	lr

0800a1a0 <__retarget_lock_release_recursive>:
 800a1a0:	4770      	bx	lr

0800a1a2 <memcpy>:
 800a1a2:	440a      	add	r2, r1
 800a1a4:	4291      	cmp	r1, r2
 800a1a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a1aa:	d100      	bne.n	800a1ae <memcpy+0xc>
 800a1ac:	4770      	bx	lr
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1b8:	4291      	cmp	r1, r2
 800a1ba:	d1f9      	bne.n	800a1b0 <memcpy+0xe>
 800a1bc:	bd10      	pop	{r4, pc}
	...

0800a1c0 <_free_r>:
 800a1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	d044      	beq.n	800a250 <_free_r+0x90>
 800a1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ca:	9001      	str	r0, [sp, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a1d2:	bfb8      	it	lt
 800a1d4:	18e4      	addlt	r4, r4, r3
 800a1d6:	f000 f8df 	bl	800a398 <__malloc_lock>
 800a1da:	4a1e      	ldr	r2, [pc, #120]	; (800a254 <_free_r+0x94>)
 800a1dc:	9801      	ldr	r0, [sp, #4]
 800a1de:	6813      	ldr	r3, [r2, #0]
 800a1e0:	b933      	cbnz	r3, 800a1f0 <_free_r+0x30>
 800a1e2:	6063      	str	r3, [r4, #4]
 800a1e4:	6014      	str	r4, [r2, #0]
 800a1e6:	b003      	add	sp, #12
 800a1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1ec:	f000 b8da 	b.w	800a3a4 <__malloc_unlock>
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d908      	bls.n	800a206 <_free_r+0x46>
 800a1f4:	6825      	ldr	r5, [r4, #0]
 800a1f6:	1961      	adds	r1, r4, r5
 800a1f8:	428b      	cmp	r3, r1
 800a1fa:	bf01      	itttt	eq
 800a1fc:	6819      	ldreq	r1, [r3, #0]
 800a1fe:	685b      	ldreq	r3, [r3, #4]
 800a200:	1949      	addeq	r1, r1, r5
 800a202:	6021      	streq	r1, [r4, #0]
 800a204:	e7ed      	b.n	800a1e2 <_free_r+0x22>
 800a206:	461a      	mov	r2, r3
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	b10b      	cbz	r3, 800a210 <_free_r+0x50>
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d9fa      	bls.n	800a206 <_free_r+0x46>
 800a210:	6811      	ldr	r1, [r2, #0]
 800a212:	1855      	adds	r5, r2, r1
 800a214:	42a5      	cmp	r5, r4
 800a216:	d10b      	bne.n	800a230 <_free_r+0x70>
 800a218:	6824      	ldr	r4, [r4, #0]
 800a21a:	4421      	add	r1, r4
 800a21c:	1854      	adds	r4, r2, r1
 800a21e:	42a3      	cmp	r3, r4
 800a220:	6011      	str	r1, [r2, #0]
 800a222:	d1e0      	bne.n	800a1e6 <_free_r+0x26>
 800a224:	681c      	ldr	r4, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	6053      	str	r3, [r2, #4]
 800a22a:	440c      	add	r4, r1
 800a22c:	6014      	str	r4, [r2, #0]
 800a22e:	e7da      	b.n	800a1e6 <_free_r+0x26>
 800a230:	d902      	bls.n	800a238 <_free_r+0x78>
 800a232:	230c      	movs	r3, #12
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	e7d6      	b.n	800a1e6 <_free_r+0x26>
 800a238:	6825      	ldr	r5, [r4, #0]
 800a23a:	1961      	adds	r1, r4, r5
 800a23c:	428b      	cmp	r3, r1
 800a23e:	bf04      	itt	eq
 800a240:	6819      	ldreq	r1, [r3, #0]
 800a242:	685b      	ldreq	r3, [r3, #4]
 800a244:	6063      	str	r3, [r4, #4]
 800a246:	bf04      	itt	eq
 800a248:	1949      	addeq	r1, r1, r5
 800a24a:	6021      	streq	r1, [r4, #0]
 800a24c:	6054      	str	r4, [r2, #4]
 800a24e:	e7ca      	b.n	800a1e6 <_free_r+0x26>
 800a250:	b003      	add	sp, #12
 800a252:	bd30      	pop	{r4, r5, pc}
 800a254:	20014910 	.word	0x20014910

0800a258 <sbrk_aligned>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	4e0e      	ldr	r6, [pc, #56]	; (800a294 <sbrk_aligned+0x3c>)
 800a25c:	460c      	mov	r4, r1
 800a25e:	6831      	ldr	r1, [r6, #0]
 800a260:	4605      	mov	r5, r0
 800a262:	b911      	cbnz	r1, 800a26a <sbrk_aligned+0x12>
 800a264:	f000 fe1c 	bl	800aea0 <_sbrk_r>
 800a268:	6030      	str	r0, [r6, #0]
 800a26a:	4621      	mov	r1, r4
 800a26c:	4628      	mov	r0, r5
 800a26e:	f000 fe17 	bl	800aea0 <_sbrk_r>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d00a      	beq.n	800a28c <sbrk_aligned+0x34>
 800a276:	1cc4      	adds	r4, r0, #3
 800a278:	f024 0403 	bic.w	r4, r4, #3
 800a27c:	42a0      	cmp	r0, r4
 800a27e:	d007      	beq.n	800a290 <sbrk_aligned+0x38>
 800a280:	1a21      	subs	r1, r4, r0
 800a282:	4628      	mov	r0, r5
 800a284:	f000 fe0c 	bl	800aea0 <_sbrk_r>
 800a288:	3001      	adds	r0, #1
 800a28a:	d101      	bne.n	800a290 <sbrk_aligned+0x38>
 800a28c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a290:	4620      	mov	r0, r4
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	20014914 	.word	0x20014914

0800a298 <_malloc_r>:
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a29c:	1ccd      	adds	r5, r1, #3
 800a29e:	f025 0503 	bic.w	r5, r5, #3
 800a2a2:	3508      	adds	r5, #8
 800a2a4:	2d0c      	cmp	r5, #12
 800a2a6:	bf38      	it	cc
 800a2a8:	250c      	movcc	r5, #12
 800a2aa:	2d00      	cmp	r5, #0
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	db01      	blt.n	800a2b4 <_malloc_r+0x1c>
 800a2b0:	42a9      	cmp	r1, r5
 800a2b2:	d905      	bls.n	800a2c0 <_malloc_r+0x28>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	2600      	movs	r6, #0
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a394 <_malloc_r+0xfc>
 800a2c4:	f000 f868 	bl	800a398 <__malloc_lock>
 800a2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2cc:	461c      	mov	r4, r3
 800a2ce:	bb5c      	cbnz	r4, 800a328 <_malloc_r+0x90>
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f7ff ffc0 	bl	800a258 <sbrk_aligned>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	4604      	mov	r4, r0
 800a2dc:	d155      	bne.n	800a38a <_malloc_r+0xf2>
 800a2de:	f8d8 4000 	ldr.w	r4, [r8]
 800a2e2:	4626      	mov	r6, r4
 800a2e4:	2e00      	cmp	r6, #0
 800a2e6:	d145      	bne.n	800a374 <_malloc_r+0xdc>
 800a2e8:	2c00      	cmp	r4, #0
 800a2ea:	d048      	beq.n	800a37e <_malloc_r+0xe6>
 800a2ec:	6823      	ldr	r3, [r4, #0]
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	eb04 0903 	add.w	r9, r4, r3
 800a2f6:	f000 fdd3 	bl	800aea0 <_sbrk_r>
 800a2fa:	4581      	cmp	r9, r0
 800a2fc:	d13f      	bne.n	800a37e <_malloc_r+0xe6>
 800a2fe:	6821      	ldr	r1, [r4, #0]
 800a300:	1a6d      	subs	r5, r5, r1
 800a302:	4629      	mov	r1, r5
 800a304:	4638      	mov	r0, r7
 800a306:	f7ff ffa7 	bl	800a258 <sbrk_aligned>
 800a30a:	3001      	adds	r0, #1
 800a30c:	d037      	beq.n	800a37e <_malloc_r+0xe6>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	442b      	add	r3, r5
 800a312:	6023      	str	r3, [r4, #0]
 800a314:	f8d8 3000 	ldr.w	r3, [r8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d038      	beq.n	800a38e <_malloc_r+0xf6>
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	42a2      	cmp	r2, r4
 800a320:	d12b      	bne.n	800a37a <_malloc_r+0xe2>
 800a322:	2200      	movs	r2, #0
 800a324:	605a      	str	r2, [r3, #4]
 800a326:	e00f      	b.n	800a348 <_malloc_r+0xb0>
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	1b52      	subs	r2, r2, r5
 800a32c:	d41f      	bmi.n	800a36e <_malloc_r+0xd6>
 800a32e:	2a0b      	cmp	r2, #11
 800a330:	d917      	bls.n	800a362 <_malloc_r+0xca>
 800a332:	1961      	adds	r1, r4, r5
 800a334:	42a3      	cmp	r3, r4
 800a336:	6025      	str	r5, [r4, #0]
 800a338:	bf18      	it	ne
 800a33a:	6059      	strne	r1, [r3, #4]
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	bf08      	it	eq
 800a340:	f8c8 1000 	streq.w	r1, [r8]
 800a344:	5162      	str	r2, [r4, r5]
 800a346:	604b      	str	r3, [r1, #4]
 800a348:	4638      	mov	r0, r7
 800a34a:	f104 060b 	add.w	r6, r4, #11
 800a34e:	f000 f829 	bl	800a3a4 <__malloc_unlock>
 800a352:	f026 0607 	bic.w	r6, r6, #7
 800a356:	1d23      	adds	r3, r4, #4
 800a358:	1af2      	subs	r2, r6, r3
 800a35a:	d0ae      	beq.n	800a2ba <_malloc_r+0x22>
 800a35c:	1b9b      	subs	r3, r3, r6
 800a35e:	50a3      	str	r3, [r4, r2]
 800a360:	e7ab      	b.n	800a2ba <_malloc_r+0x22>
 800a362:	42a3      	cmp	r3, r4
 800a364:	6862      	ldr	r2, [r4, #4]
 800a366:	d1dd      	bne.n	800a324 <_malloc_r+0x8c>
 800a368:	f8c8 2000 	str.w	r2, [r8]
 800a36c:	e7ec      	b.n	800a348 <_malloc_r+0xb0>
 800a36e:	4623      	mov	r3, r4
 800a370:	6864      	ldr	r4, [r4, #4]
 800a372:	e7ac      	b.n	800a2ce <_malloc_r+0x36>
 800a374:	4634      	mov	r4, r6
 800a376:	6876      	ldr	r6, [r6, #4]
 800a378:	e7b4      	b.n	800a2e4 <_malloc_r+0x4c>
 800a37a:	4613      	mov	r3, r2
 800a37c:	e7cc      	b.n	800a318 <_malloc_r+0x80>
 800a37e:	230c      	movs	r3, #12
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	4638      	mov	r0, r7
 800a384:	f000 f80e 	bl	800a3a4 <__malloc_unlock>
 800a388:	e797      	b.n	800a2ba <_malloc_r+0x22>
 800a38a:	6025      	str	r5, [r4, #0]
 800a38c:	e7dc      	b.n	800a348 <_malloc_r+0xb0>
 800a38e:	605b      	str	r3, [r3, #4]
 800a390:	deff      	udf	#255	; 0xff
 800a392:	bf00      	nop
 800a394:	20014910 	.word	0x20014910

0800a398 <__malloc_lock>:
 800a398:	4801      	ldr	r0, [pc, #4]	; (800a3a0 <__malloc_lock+0x8>)
 800a39a:	f7ff bf00 	b.w	800a19e <__retarget_lock_acquire_recursive>
 800a39e:	bf00      	nop
 800a3a0:	2001490c 	.word	0x2001490c

0800a3a4 <__malloc_unlock>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__malloc_unlock+0x8>)
 800a3a6:	f7ff befb 	b.w	800a1a0 <__retarget_lock_release_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	2001490c 	.word	0x2001490c

0800a3b0 <__ssputs_r>:
 800a3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b4:	688e      	ldr	r6, [r1, #8]
 800a3b6:	461f      	mov	r7, r3
 800a3b8:	42be      	cmp	r6, r7
 800a3ba:	680b      	ldr	r3, [r1, #0]
 800a3bc:	4682      	mov	sl, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	4690      	mov	r8, r2
 800a3c2:	d82c      	bhi.n	800a41e <__ssputs_r+0x6e>
 800a3c4:	898a      	ldrh	r2, [r1, #12]
 800a3c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3ca:	d026      	beq.n	800a41a <__ssputs_r+0x6a>
 800a3cc:	6965      	ldr	r5, [r4, #20]
 800a3ce:	6909      	ldr	r1, [r1, #16]
 800a3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3d4:	eba3 0901 	sub.w	r9, r3, r1
 800a3d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3dc:	1c7b      	adds	r3, r7, #1
 800a3de:	444b      	add	r3, r9
 800a3e0:	106d      	asrs	r5, r5, #1
 800a3e2:	429d      	cmp	r5, r3
 800a3e4:	bf38      	it	cc
 800a3e6:	461d      	movcc	r5, r3
 800a3e8:	0553      	lsls	r3, r2, #21
 800a3ea:	d527      	bpl.n	800a43c <__ssputs_r+0x8c>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	f7ff ff53 	bl	800a298 <_malloc_r>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	b360      	cbz	r0, 800a450 <__ssputs_r+0xa0>
 800a3f6:	6921      	ldr	r1, [r4, #16]
 800a3f8:	464a      	mov	r2, r9
 800a3fa:	f7ff fed2 	bl	800a1a2 <memcpy>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	6126      	str	r6, [r4, #16]
 800a40c:	6165      	str	r5, [r4, #20]
 800a40e:	444e      	add	r6, r9
 800a410:	eba5 0509 	sub.w	r5, r5, r9
 800a414:	6026      	str	r6, [r4, #0]
 800a416:	60a5      	str	r5, [r4, #8]
 800a418:	463e      	mov	r6, r7
 800a41a:	42be      	cmp	r6, r7
 800a41c:	d900      	bls.n	800a420 <__ssputs_r+0x70>
 800a41e:	463e      	mov	r6, r7
 800a420:	6820      	ldr	r0, [r4, #0]
 800a422:	4632      	mov	r2, r6
 800a424:	4641      	mov	r1, r8
 800a426:	f000 fcff 	bl	800ae28 <memmove>
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	1b9b      	subs	r3, r3, r6
 800a42e:	60a3      	str	r3, [r4, #8]
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	4433      	add	r3, r6
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	2000      	movs	r0, #0
 800a438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43c:	462a      	mov	r2, r5
 800a43e:	f000 fd3f 	bl	800aec0 <_realloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	2800      	cmp	r0, #0
 800a446:	d1e0      	bne.n	800a40a <__ssputs_r+0x5a>
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	4650      	mov	r0, sl
 800a44c:	f7ff feb8 	bl	800a1c0 <_free_r>
 800a450:	230c      	movs	r3, #12
 800a452:	f8ca 3000 	str.w	r3, [sl]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a462:	e7e9      	b.n	800a438 <__ssputs_r+0x88>

0800a464 <_svfiprintf_r>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	4698      	mov	r8, r3
 800a46a:	898b      	ldrh	r3, [r1, #12]
 800a46c:	061b      	lsls	r3, r3, #24
 800a46e:	b09d      	sub	sp, #116	; 0x74
 800a470:	4607      	mov	r7, r0
 800a472:	460d      	mov	r5, r1
 800a474:	4614      	mov	r4, r2
 800a476:	d50e      	bpl.n	800a496 <_svfiprintf_r+0x32>
 800a478:	690b      	ldr	r3, [r1, #16]
 800a47a:	b963      	cbnz	r3, 800a496 <_svfiprintf_r+0x32>
 800a47c:	2140      	movs	r1, #64	; 0x40
 800a47e:	f7ff ff0b 	bl	800a298 <_malloc_r>
 800a482:	6028      	str	r0, [r5, #0]
 800a484:	6128      	str	r0, [r5, #16]
 800a486:	b920      	cbnz	r0, 800a492 <_svfiprintf_r+0x2e>
 800a488:	230c      	movs	r3, #12
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a490:	e0d0      	b.n	800a634 <_svfiprintf_r+0x1d0>
 800a492:	2340      	movs	r3, #64	; 0x40
 800a494:	616b      	str	r3, [r5, #20]
 800a496:	2300      	movs	r3, #0
 800a498:	9309      	str	r3, [sp, #36]	; 0x24
 800a49a:	2320      	movs	r3, #32
 800a49c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a4:	2330      	movs	r3, #48	; 0x30
 800a4a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a64c <_svfiprintf_r+0x1e8>
 800a4aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4ae:	f04f 0901 	mov.w	r9, #1
 800a4b2:	4623      	mov	r3, r4
 800a4b4:	469a      	mov	sl, r3
 800a4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ba:	b10a      	cbz	r2, 800a4c0 <_svfiprintf_r+0x5c>
 800a4bc:	2a25      	cmp	r2, #37	; 0x25
 800a4be:	d1f9      	bne.n	800a4b4 <_svfiprintf_r+0x50>
 800a4c0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c4:	d00b      	beq.n	800a4de <_svfiprintf_r+0x7a>
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f7ff ff6f 	bl	800a3b0 <__ssputs_r>
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f000 80a9 	beq.w	800a62a <_svfiprintf_r+0x1c6>
 800a4d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4da:	445a      	add	r2, fp
 800a4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4de:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f000 80a1 	beq.w	800a62a <_svfiprintf_r+0x1c6>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f2:	f10a 0a01 	add.w	sl, sl, #1
 800a4f6:	9304      	str	r3, [sp, #16]
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4fe:	931a      	str	r3, [sp, #104]	; 0x68
 800a500:	4654      	mov	r4, sl
 800a502:	2205      	movs	r2, #5
 800a504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a508:	4850      	ldr	r0, [pc, #320]	; (800a64c <_svfiprintf_r+0x1e8>)
 800a50a:	f7f5 fee1 	bl	80002d0 <memchr>
 800a50e:	9a04      	ldr	r2, [sp, #16]
 800a510:	b9d8      	cbnz	r0, 800a54a <_svfiprintf_r+0xe6>
 800a512:	06d0      	lsls	r0, r2, #27
 800a514:	bf44      	itt	mi
 800a516:	2320      	movmi	r3, #32
 800a518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a51c:	0711      	lsls	r1, r2, #28
 800a51e:	bf44      	itt	mi
 800a520:	232b      	movmi	r3, #43	; 0x2b
 800a522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a526:	f89a 3000 	ldrb.w	r3, [sl]
 800a52a:	2b2a      	cmp	r3, #42	; 0x2a
 800a52c:	d015      	beq.n	800a55a <_svfiprintf_r+0xf6>
 800a52e:	9a07      	ldr	r2, [sp, #28]
 800a530:	4654      	mov	r4, sl
 800a532:	2000      	movs	r0, #0
 800a534:	f04f 0c0a 	mov.w	ip, #10
 800a538:	4621      	mov	r1, r4
 800a53a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a53e:	3b30      	subs	r3, #48	; 0x30
 800a540:	2b09      	cmp	r3, #9
 800a542:	d94d      	bls.n	800a5e0 <_svfiprintf_r+0x17c>
 800a544:	b1b0      	cbz	r0, 800a574 <_svfiprintf_r+0x110>
 800a546:	9207      	str	r2, [sp, #28]
 800a548:	e014      	b.n	800a574 <_svfiprintf_r+0x110>
 800a54a:	eba0 0308 	sub.w	r3, r0, r8
 800a54e:	fa09 f303 	lsl.w	r3, r9, r3
 800a552:	4313      	orrs	r3, r2
 800a554:	9304      	str	r3, [sp, #16]
 800a556:	46a2      	mov	sl, r4
 800a558:	e7d2      	b.n	800a500 <_svfiprintf_r+0x9c>
 800a55a:	9b03      	ldr	r3, [sp, #12]
 800a55c:	1d19      	adds	r1, r3, #4
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	9103      	str	r1, [sp, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	bfbb      	ittet	lt
 800a566:	425b      	neglt	r3, r3
 800a568:	f042 0202 	orrlt.w	r2, r2, #2
 800a56c:	9307      	strge	r3, [sp, #28]
 800a56e:	9307      	strlt	r3, [sp, #28]
 800a570:	bfb8      	it	lt
 800a572:	9204      	strlt	r2, [sp, #16]
 800a574:	7823      	ldrb	r3, [r4, #0]
 800a576:	2b2e      	cmp	r3, #46	; 0x2e
 800a578:	d10c      	bne.n	800a594 <_svfiprintf_r+0x130>
 800a57a:	7863      	ldrb	r3, [r4, #1]
 800a57c:	2b2a      	cmp	r3, #42	; 0x2a
 800a57e:	d134      	bne.n	800a5ea <_svfiprintf_r+0x186>
 800a580:	9b03      	ldr	r3, [sp, #12]
 800a582:	1d1a      	adds	r2, r3, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	9203      	str	r2, [sp, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	bfb8      	it	lt
 800a58c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a590:	3402      	adds	r4, #2
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a65c <_svfiprintf_r+0x1f8>
 800a598:	7821      	ldrb	r1, [r4, #0]
 800a59a:	2203      	movs	r2, #3
 800a59c:	4650      	mov	r0, sl
 800a59e:	f7f5 fe97 	bl	80002d0 <memchr>
 800a5a2:	b138      	cbz	r0, 800a5b4 <_svfiprintf_r+0x150>
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	eba0 000a 	sub.w	r0, r0, sl
 800a5aa:	2240      	movs	r2, #64	; 0x40
 800a5ac:	4082      	lsls	r2, r0
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	3401      	adds	r4, #1
 800a5b2:	9304      	str	r3, [sp, #16]
 800a5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b8:	4825      	ldr	r0, [pc, #148]	; (800a650 <_svfiprintf_r+0x1ec>)
 800a5ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5be:	2206      	movs	r2, #6
 800a5c0:	f7f5 fe86 	bl	80002d0 <memchr>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d038      	beq.n	800a63a <_svfiprintf_r+0x1d6>
 800a5c8:	4b22      	ldr	r3, [pc, #136]	; (800a654 <_svfiprintf_r+0x1f0>)
 800a5ca:	bb1b      	cbnz	r3, 800a614 <_svfiprintf_r+0x1b0>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	3307      	adds	r3, #7
 800a5d0:	f023 0307 	bic.w	r3, r3, #7
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5da:	4433      	add	r3, r6
 800a5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5de:	e768      	b.n	800a4b2 <_svfiprintf_r+0x4e>
 800a5e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	e7a6      	b.n	800a538 <_svfiprintf_r+0xd4>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f04f 0c0a 	mov.w	ip, #10
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5fc:	3a30      	subs	r2, #48	; 0x30
 800a5fe:	2a09      	cmp	r2, #9
 800a600:	d903      	bls.n	800a60a <_svfiprintf_r+0x1a6>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0c6      	beq.n	800a594 <_svfiprintf_r+0x130>
 800a606:	9105      	str	r1, [sp, #20]
 800a608:	e7c4      	b.n	800a594 <_svfiprintf_r+0x130>
 800a60a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60e:	4604      	mov	r4, r0
 800a610:	2301      	movs	r3, #1
 800a612:	e7f0      	b.n	800a5f6 <_svfiprintf_r+0x192>
 800a614:	ab03      	add	r3, sp, #12
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	462a      	mov	r2, r5
 800a61a:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <_svfiprintf_r+0x1f4>)
 800a61c:	a904      	add	r1, sp, #16
 800a61e:	4638      	mov	r0, r7
 800a620:	f3af 8000 	nop.w
 800a624:	1c42      	adds	r2, r0, #1
 800a626:	4606      	mov	r6, r0
 800a628:	d1d6      	bne.n	800a5d8 <_svfiprintf_r+0x174>
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	065b      	lsls	r3, r3, #25
 800a62e:	f53f af2d 	bmi.w	800a48c <_svfiprintf_r+0x28>
 800a632:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a634:	b01d      	add	sp, #116	; 0x74
 800a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63a:	ab03      	add	r3, sp, #12
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	462a      	mov	r2, r5
 800a640:	4b05      	ldr	r3, [pc, #20]	; (800a658 <_svfiprintf_r+0x1f4>)
 800a642:	a904      	add	r1, sp, #16
 800a644:	4638      	mov	r0, r7
 800a646:	f000 f9bd 	bl	800a9c4 <_printf_i>
 800a64a:	e7eb      	b.n	800a624 <_svfiprintf_r+0x1c0>
 800a64c:	0800b476 	.word	0x0800b476
 800a650:	0800b480 	.word	0x0800b480
 800a654:	00000000 	.word	0x00000000
 800a658:	0800a3b1 	.word	0x0800a3b1
 800a65c:	0800b47c 	.word	0x0800b47c

0800a660 <__sfputc_r>:
 800a660:	6893      	ldr	r3, [r2, #8]
 800a662:	3b01      	subs	r3, #1
 800a664:	2b00      	cmp	r3, #0
 800a666:	b410      	push	{r4}
 800a668:	6093      	str	r3, [r2, #8]
 800a66a:	da08      	bge.n	800a67e <__sfputc_r+0x1e>
 800a66c:	6994      	ldr	r4, [r2, #24]
 800a66e:	42a3      	cmp	r3, r4
 800a670:	db01      	blt.n	800a676 <__sfputc_r+0x16>
 800a672:	290a      	cmp	r1, #10
 800a674:	d103      	bne.n	800a67e <__sfputc_r+0x1e>
 800a676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a67a:	f7ff bc8a 	b.w	8009f92 <__swbuf_r>
 800a67e:	6813      	ldr	r3, [r2, #0]
 800a680:	1c58      	adds	r0, r3, #1
 800a682:	6010      	str	r0, [r2, #0]
 800a684:	7019      	strb	r1, [r3, #0]
 800a686:	4608      	mov	r0, r1
 800a688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <__sfputs_r>:
 800a68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a690:	4606      	mov	r6, r0
 800a692:	460f      	mov	r7, r1
 800a694:	4614      	mov	r4, r2
 800a696:	18d5      	adds	r5, r2, r3
 800a698:	42ac      	cmp	r4, r5
 800a69a:	d101      	bne.n	800a6a0 <__sfputs_r+0x12>
 800a69c:	2000      	movs	r0, #0
 800a69e:	e007      	b.n	800a6b0 <__sfputs_r+0x22>
 800a6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a4:	463a      	mov	r2, r7
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f7ff ffda 	bl	800a660 <__sfputc_r>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d1f3      	bne.n	800a698 <__sfputs_r+0xa>
 800a6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6b4 <_vfiprintf_r>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	b09d      	sub	sp, #116	; 0x74
 800a6bc:	4614      	mov	r4, r2
 800a6be:	4698      	mov	r8, r3
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	b118      	cbz	r0, 800a6cc <_vfiprintf_r+0x18>
 800a6c4:	6a03      	ldr	r3, [r0, #32]
 800a6c6:	b90b      	cbnz	r3, 800a6cc <_vfiprintf_r+0x18>
 800a6c8:	f7ff fb5c 	bl	8009d84 <__sinit>
 800a6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ce:	07d9      	lsls	r1, r3, #31
 800a6d0:	d405      	bmi.n	800a6de <_vfiprintf_r+0x2a>
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	059a      	lsls	r2, r3, #22
 800a6d6:	d402      	bmi.n	800a6de <_vfiprintf_r+0x2a>
 800a6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6da:	f7ff fd60 	bl	800a19e <__retarget_lock_acquire_recursive>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	071b      	lsls	r3, r3, #28
 800a6e2:	d501      	bpl.n	800a6e8 <_vfiprintf_r+0x34>
 800a6e4:	692b      	ldr	r3, [r5, #16]
 800a6e6:	b99b      	cbnz	r3, 800a710 <_vfiprintf_r+0x5c>
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f7ff fc8e 	bl	800a00c <__swsetup_r>
 800a6f0:	b170      	cbz	r0, 800a710 <_vfiprintf_r+0x5c>
 800a6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f4:	07dc      	lsls	r4, r3, #31
 800a6f6:	d504      	bpl.n	800a702 <_vfiprintf_r+0x4e>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6fc:	b01d      	add	sp, #116	; 0x74
 800a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	0598      	lsls	r0, r3, #22
 800a706:	d4f7      	bmi.n	800a6f8 <_vfiprintf_r+0x44>
 800a708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70a:	f7ff fd49 	bl	800a1a0 <__retarget_lock_release_recursive>
 800a70e:	e7f3      	b.n	800a6f8 <_vfiprintf_r+0x44>
 800a710:	2300      	movs	r3, #0
 800a712:	9309      	str	r3, [sp, #36]	; 0x24
 800a714:	2320      	movs	r3, #32
 800a716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71e:	2330      	movs	r3, #48	; 0x30
 800a720:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a8d4 <_vfiprintf_r+0x220>
 800a724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a728:	f04f 0901 	mov.w	r9, #1
 800a72c:	4623      	mov	r3, r4
 800a72e:	469a      	mov	sl, r3
 800a730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a734:	b10a      	cbz	r2, 800a73a <_vfiprintf_r+0x86>
 800a736:	2a25      	cmp	r2, #37	; 0x25
 800a738:	d1f9      	bne.n	800a72e <_vfiprintf_r+0x7a>
 800a73a:	ebba 0b04 	subs.w	fp, sl, r4
 800a73e:	d00b      	beq.n	800a758 <_vfiprintf_r+0xa4>
 800a740:	465b      	mov	r3, fp
 800a742:	4622      	mov	r2, r4
 800a744:	4629      	mov	r1, r5
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ffa1 	bl	800a68e <__sfputs_r>
 800a74c:	3001      	adds	r0, #1
 800a74e:	f000 80a9 	beq.w	800a8a4 <_vfiprintf_r+0x1f0>
 800a752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a754:	445a      	add	r2, fp
 800a756:	9209      	str	r2, [sp, #36]	; 0x24
 800a758:	f89a 3000 	ldrb.w	r3, [sl]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 80a1 	beq.w	800a8a4 <_vfiprintf_r+0x1f0>
 800a762:	2300      	movs	r3, #0
 800a764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76c:	f10a 0a01 	add.w	sl, sl, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	9307      	str	r3, [sp, #28]
 800a774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a778:	931a      	str	r3, [sp, #104]	; 0x68
 800a77a:	4654      	mov	r4, sl
 800a77c:	2205      	movs	r2, #5
 800a77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a782:	4854      	ldr	r0, [pc, #336]	; (800a8d4 <_vfiprintf_r+0x220>)
 800a784:	f7f5 fda4 	bl	80002d0 <memchr>
 800a788:	9a04      	ldr	r2, [sp, #16]
 800a78a:	b9d8      	cbnz	r0, 800a7c4 <_vfiprintf_r+0x110>
 800a78c:	06d1      	lsls	r1, r2, #27
 800a78e:	bf44      	itt	mi
 800a790:	2320      	movmi	r3, #32
 800a792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a796:	0713      	lsls	r3, r2, #28
 800a798:	bf44      	itt	mi
 800a79a:	232b      	movmi	r3, #43	; 0x2b
 800a79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a6:	d015      	beq.n	800a7d4 <_vfiprintf_r+0x120>
 800a7a8:	9a07      	ldr	r2, [sp, #28]
 800a7aa:	4654      	mov	r4, sl
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b8:	3b30      	subs	r3, #48	; 0x30
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d94d      	bls.n	800a85a <_vfiprintf_r+0x1a6>
 800a7be:	b1b0      	cbz	r0, 800a7ee <_vfiprintf_r+0x13a>
 800a7c0:	9207      	str	r2, [sp, #28]
 800a7c2:	e014      	b.n	800a7ee <_vfiprintf_r+0x13a>
 800a7c4:	eba0 0308 	sub.w	r3, r0, r8
 800a7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	e7d2      	b.n	800a77a <_vfiprintf_r+0xc6>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1d19      	adds	r1, r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	9103      	str	r1, [sp, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfbb      	ittet	lt
 800a7e0:	425b      	neglt	r3, r3
 800a7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e6:	9307      	strge	r3, [sp, #28]
 800a7e8:	9307      	strlt	r3, [sp, #28]
 800a7ea:	bfb8      	it	lt
 800a7ec:	9204      	strlt	r2, [sp, #16]
 800a7ee:	7823      	ldrb	r3, [r4, #0]
 800a7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f2:	d10c      	bne.n	800a80e <_vfiprintf_r+0x15a>
 800a7f4:	7863      	ldrb	r3, [r4, #1]
 800a7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f8:	d134      	bne.n	800a864 <_vfiprintf_r+0x1b0>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9203      	str	r2, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfb8      	it	lt
 800a806:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a80a:	3402      	adds	r4, #2
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8e4 <_vfiprintf_r+0x230>
 800a812:	7821      	ldrb	r1, [r4, #0]
 800a814:	2203      	movs	r2, #3
 800a816:	4650      	mov	r0, sl
 800a818:	f7f5 fd5a 	bl	80002d0 <memchr>
 800a81c:	b138      	cbz	r0, 800a82e <_vfiprintf_r+0x17a>
 800a81e:	9b04      	ldr	r3, [sp, #16]
 800a820:	eba0 000a 	sub.w	r0, r0, sl
 800a824:	2240      	movs	r2, #64	; 0x40
 800a826:	4082      	lsls	r2, r0
 800a828:	4313      	orrs	r3, r2
 800a82a:	3401      	adds	r4, #1
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a832:	4829      	ldr	r0, [pc, #164]	; (800a8d8 <_vfiprintf_r+0x224>)
 800a834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a838:	2206      	movs	r2, #6
 800a83a:	f7f5 fd49 	bl	80002d0 <memchr>
 800a83e:	2800      	cmp	r0, #0
 800a840:	d03f      	beq.n	800a8c2 <_vfiprintf_r+0x20e>
 800a842:	4b26      	ldr	r3, [pc, #152]	; (800a8dc <_vfiprintf_r+0x228>)
 800a844:	bb1b      	cbnz	r3, 800a88e <_vfiprintf_r+0x1da>
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	3307      	adds	r3, #7
 800a84a:	f023 0307 	bic.w	r3, r3, #7
 800a84e:	3308      	adds	r3, #8
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a854:	443b      	add	r3, r7
 800a856:	9309      	str	r3, [sp, #36]	; 0x24
 800a858:	e768      	b.n	800a72c <_vfiprintf_r+0x78>
 800a85a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a85e:	460c      	mov	r4, r1
 800a860:	2001      	movs	r0, #1
 800a862:	e7a6      	b.n	800a7b2 <_vfiprintf_r+0xfe>
 800a864:	2300      	movs	r3, #0
 800a866:	3401      	adds	r4, #1
 800a868:	9305      	str	r3, [sp, #20]
 800a86a:	4619      	mov	r1, r3
 800a86c:	f04f 0c0a 	mov.w	ip, #10
 800a870:	4620      	mov	r0, r4
 800a872:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a876:	3a30      	subs	r2, #48	; 0x30
 800a878:	2a09      	cmp	r2, #9
 800a87a:	d903      	bls.n	800a884 <_vfiprintf_r+0x1d0>
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d0c6      	beq.n	800a80e <_vfiprintf_r+0x15a>
 800a880:	9105      	str	r1, [sp, #20]
 800a882:	e7c4      	b.n	800a80e <_vfiprintf_r+0x15a>
 800a884:	fb0c 2101 	mla	r1, ip, r1, r2
 800a888:	4604      	mov	r4, r0
 800a88a:	2301      	movs	r3, #1
 800a88c:	e7f0      	b.n	800a870 <_vfiprintf_r+0x1bc>
 800a88e:	ab03      	add	r3, sp, #12
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	462a      	mov	r2, r5
 800a894:	4b12      	ldr	r3, [pc, #72]	; (800a8e0 <_vfiprintf_r+0x22c>)
 800a896:	a904      	add	r1, sp, #16
 800a898:	4630      	mov	r0, r6
 800a89a:	f3af 8000 	nop.w
 800a89e:	4607      	mov	r7, r0
 800a8a0:	1c78      	adds	r0, r7, #1
 800a8a2:	d1d6      	bne.n	800a852 <_vfiprintf_r+0x19e>
 800a8a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a6:	07d9      	lsls	r1, r3, #31
 800a8a8:	d405      	bmi.n	800a8b6 <_vfiprintf_r+0x202>
 800a8aa:	89ab      	ldrh	r3, [r5, #12]
 800a8ac:	059a      	lsls	r2, r3, #22
 800a8ae:	d402      	bmi.n	800a8b6 <_vfiprintf_r+0x202>
 800a8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b2:	f7ff fc75 	bl	800a1a0 <__retarget_lock_release_recursive>
 800a8b6:	89ab      	ldrh	r3, [r5, #12]
 800a8b8:	065b      	lsls	r3, r3, #25
 800a8ba:	f53f af1d 	bmi.w	800a6f8 <_vfiprintf_r+0x44>
 800a8be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c0:	e71c      	b.n	800a6fc <_vfiprintf_r+0x48>
 800a8c2:	ab03      	add	r3, sp, #12
 800a8c4:	9300      	str	r3, [sp, #0]
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <_vfiprintf_r+0x22c>)
 800a8ca:	a904      	add	r1, sp, #16
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f000 f879 	bl	800a9c4 <_printf_i>
 800a8d2:	e7e4      	b.n	800a89e <_vfiprintf_r+0x1ea>
 800a8d4:	0800b476 	.word	0x0800b476
 800a8d8:	0800b480 	.word	0x0800b480
 800a8dc:	00000000 	.word	0x00000000
 800a8e0:	0800a68f 	.word	0x0800a68f
 800a8e4:	0800b47c 	.word	0x0800b47c

0800a8e8 <_printf_common>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	4699      	mov	r9, r3
 800a8f0:	688a      	ldr	r2, [r1, #8]
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	bfb8      	it	lt
 800a8fc:	4613      	movlt	r3, r2
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a904:	4607      	mov	r7, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b10a      	cbz	r2, 800a90e <_printf_common+0x26>
 800a90a:	3301      	adds	r3, #1
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	0699      	lsls	r1, r3, #26
 800a912:	bf42      	ittt	mi
 800a914:	6833      	ldrmi	r3, [r6, #0]
 800a916:	3302      	addmi	r3, #2
 800a918:	6033      	strmi	r3, [r6, #0]
 800a91a:	6825      	ldr	r5, [r4, #0]
 800a91c:	f015 0506 	ands.w	r5, r5, #6
 800a920:	d106      	bne.n	800a930 <_printf_common+0x48>
 800a922:	f104 0a19 	add.w	sl, r4, #25
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	6832      	ldr	r2, [r6, #0]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dc26      	bgt.n	800a97e <_printf_common+0x96>
 800a930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a934:	1e13      	subs	r3, r2, #0
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	bf18      	it	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	0692      	lsls	r2, r2, #26
 800a93e:	d42b      	bmi.n	800a998 <_printf_common+0xb0>
 800a940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a944:	4649      	mov	r1, r9
 800a946:	4638      	mov	r0, r7
 800a948:	47c0      	blx	r8
 800a94a:	3001      	adds	r0, #1
 800a94c:	d01e      	beq.n	800a98c <_printf_common+0xa4>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	6922      	ldr	r2, [r4, #16]
 800a952:	f003 0306 	and.w	r3, r3, #6
 800a956:	2b04      	cmp	r3, #4
 800a958:	bf02      	ittt	eq
 800a95a:	68e5      	ldreq	r5, [r4, #12]
 800a95c:	6833      	ldreq	r3, [r6, #0]
 800a95e:	1aed      	subeq	r5, r5, r3
 800a960:	68a3      	ldr	r3, [r4, #8]
 800a962:	bf0c      	ite	eq
 800a964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a968:	2500      	movne	r5, #0
 800a96a:	4293      	cmp	r3, r2
 800a96c:	bfc4      	itt	gt
 800a96e:	1a9b      	subgt	r3, r3, r2
 800a970:	18ed      	addgt	r5, r5, r3
 800a972:	2600      	movs	r6, #0
 800a974:	341a      	adds	r4, #26
 800a976:	42b5      	cmp	r5, r6
 800a978:	d11a      	bne.n	800a9b0 <_printf_common+0xc8>
 800a97a:	2000      	movs	r0, #0
 800a97c:	e008      	b.n	800a990 <_printf_common+0xa8>
 800a97e:	2301      	movs	r3, #1
 800a980:	4652      	mov	r2, sl
 800a982:	4649      	mov	r1, r9
 800a984:	4638      	mov	r0, r7
 800a986:	47c0      	blx	r8
 800a988:	3001      	adds	r0, #1
 800a98a:	d103      	bne.n	800a994 <_printf_common+0xac>
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	3501      	adds	r5, #1
 800a996:	e7c6      	b.n	800a926 <_printf_common+0x3e>
 800a998:	18e1      	adds	r1, r4, r3
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	2030      	movs	r0, #48	; 0x30
 800a99e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9a2:	4422      	add	r2, r4
 800a9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	e7c7      	b.n	800a940 <_printf_common+0x58>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	47c0      	blx	r8
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d0e6      	beq.n	800a98c <_printf_common+0xa4>
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7d9      	b.n	800a976 <_printf_common+0x8e>
	...

0800a9c4 <_printf_i>:
 800a9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9cc:	2f78      	cmp	r7, #120	; 0x78
 800a9ce:	4691      	mov	r9, r2
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	469a      	mov	sl, r3
 800a9d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9da:	d807      	bhi.n	800a9ec <_printf_i+0x28>
 800a9dc:	2f62      	cmp	r7, #98	; 0x62
 800a9de:	d80a      	bhi.n	800a9f6 <_printf_i+0x32>
 800a9e0:	2f00      	cmp	r7, #0
 800a9e2:	f000 80d4 	beq.w	800ab8e <_printf_i+0x1ca>
 800a9e6:	2f58      	cmp	r7, #88	; 0x58
 800a9e8:	f000 80c0 	beq.w	800ab6c <_printf_i+0x1a8>
 800a9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9f4:	e03a      	b.n	800aa6c <_printf_i+0xa8>
 800a9f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9fa:	2b15      	cmp	r3, #21
 800a9fc:	d8f6      	bhi.n	800a9ec <_printf_i+0x28>
 800a9fe:	a101      	add	r1, pc, #4	; (adr r1, 800aa04 <_printf_i+0x40>)
 800aa00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa04:	0800aa5d 	.word	0x0800aa5d
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800a9ed 	.word	0x0800a9ed
 800aa10:	0800a9ed 	.word	0x0800a9ed
 800aa14:	0800a9ed 	.word	0x0800a9ed
 800aa18:	0800a9ed 	.word	0x0800a9ed
 800aa1c:	0800aa71 	.word	0x0800aa71
 800aa20:	0800a9ed 	.word	0x0800a9ed
 800aa24:	0800a9ed 	.word	0x0800a9ed
 800aa28:	0800a9ed 	.word	0x0800a9ed
 800aa2c:	0800a9ed 	.word	0x0800a9ed
 800aa30:	0800ab75 	.word	0x0800ab75
 800aa34:	0800aa9d 	.word	0x0800aa9d
 800aa38:	0800ab2f 	.word	0x0800ab2f
 800aa3c:	0800a9ed 	.word	0x0800a9ed
 800aa40:	0800a9ed 	.word	0x0800a9ed
 800aa44:	0800ab97 	.word	0x0800ab97
 800aa48:	0800a9ed 	.word	0x0800a9ed
 800aa4c:	0800aa9d 	.word	0x0800aa9d
 800aa50:	0800a9ed 	.word	0x0800a9ed
 800aa54:	0800a9ed 	.word	0x0800a9ed
 800aa58:	0800ab37 	.word	0x0800ab37
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	602a      	str	r2, [r5, #0]
 800aa64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e09f      	b.n	800abb0 <_printf_i+0x1ec>
 800aa70:	6820      	ldr	r0, [r4, #0]
 800aa72:	682b      	ldr	r3, [r5, #0]
 800aa74:	0607      	lsls	r7, r0, #24
 800aa76:	f103 0104 	add.w	r1, r3, #4
 800aa7a:	6029      	str	r1, [r5, #0]
 800aa7c:	d501      	bpl.n	800aa82 <_printf_i+0xbe>
 800aa7e:	681e      	ldr	r6, [r3, #0]
 800aa80:	e003      	b.n	800aa8a <_printf_i+0xc6>
 800aa82:	0646      	lsls	r6, r0, #25
 800aa84:	d5fb      	bpl.n	800aa7e <_printf_i+0xba>
 800aa86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	da03      	bge.n	800aa96 <_printf_i+0xd2>
 800aa8e:	232d      	movs	r3, #45	; 0x2d
 800aa90:	4276      	negs	r6, r6
 800aa92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa96:	485a      	ldr	r0, [pc, #360]	; (800ac00 <_printf_i+0x23c>)
 800aa98:	230a      	movs	r3, #10
 800aa9a:	e012      	b.n	800aac2 <_printf_i+0xfe>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	6820      	ldr	r0, [r4, #0]
 800aaa0:	1d19      	adds	r1, r3, #4
 800aaa2:	6029      	str	r1, [r5, #0]
 800aaa4:	0605      	lsls	r5, r0, #24
 800aaa6:	d501      	bpl.n	800aaac <_printf_i+0xe8>
 800aaa8:	681e      	ldr	r6, [r3, #0]
 800aaaa:	e002      	b.n	800aab2 <_printf_i+0xee>
 800aaac:	0641      	lsls	r1, r0, #25
 800aaae:	d5fb      	bpl.n	800aaa8 <_printf_i+0xe4>
 800aab0:	881e      	ldrh	r6, [r3, #0]
 800aab2:	4853      	ldr	r0, [pc, #332]	; (800ac00 <_printf_i+0x23c>)
 800aab4:	2f6f      	cmp	r7, #111	; 0x6f
 800aab6:	bf0c      	ite	eq
 800aab8:	2308      	moveq	r3, #8
 800aaba:	230a      	movne	r3, #10
 800aabc:	2100      	movs	r1, #0
 800aabe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aac2:	6865      	ldr	r5, [r4, #4]
 800aac4:	60a5      	str	r5, [r4, #8]
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	bfa2      	ittt	ge
 800aaca:	6821      	ldrge	r1, [r4, #0]
 800aacc:	f021 0104 	bicge.w	r1, r1, #4
 800aad0:	6021      	strge	r1, [r4, #0]
 800aad2:	b90e      	cbnz	r6, 800aad8 <_printf_i+0x114>
 800aad4:	2d00      	cmp	r5, #0
 800aad6:	d04b      	beq.n	800ab70 <_printf_i+0x1ac>
 800aad8:	4615      	mov	r5, r2
 800aada:	fbb6 f1f3 	udiv	r1, r6, r3
 800aade:	fb03 6711 	mls	r7, r3, r1, r6
 800aae2:	5dc7      	ldrb	r7, [r0, r7]
 800aae4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aae8:	4637      	mov	r7, r6
 800aaea:	42bb      	cmp	r3, r7
 800aaec:	460e      	mov	r6, r1
 800aaee:	d9f4      	bls.n	800aada <_printf_i+0x116>
 800aaf0:	2b08      	cmp	r3, #8
 800aaf2:	d10b      	bne.n	800ab0c <_printf_i+0x148>
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	07de      	lsls	r6, r3, #31
 800aaf8:	d508      	bpl.n	800ab0c <_printf_i+0x148>
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	6861      	ldr	r1, [r4, #4]
 800aafe:	4299      	cmp	r1, r3
 800ab00:	bfde      	ittt	le
 800ab02:	2330      	movle	r3, #48	; 0x30
 800ab04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ab0c:	1b52      	subs	r2, r2, r5
 800ab0e:	6122      	str	r2, [r4, #16]
 800ab10:	f8cd a000 	str.w	sl, [sp]
 800ab14:	464b      	mov	r3, r9
 800ab16:	aa03      	add	r2, sp, #12
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	f7ff fee4 	bl	800a8e8 <_printf_common>
 800ab20:	3001      	adds	r0, #1
 800ab22:	d14a      	bne.n	800abba <_printf_i+0x1f6>
 800ab24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab28:	b004      	add	sp, #16
 800ab2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	f043 0320 	orr.w	r3, r3, #32
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	4833      	ldr	r0, [pc, #204]	; (800ac04 <_printf_i+0x240>)
 800ab38:	2778      	movs	r7, #120	; 0x78
 800ab3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	6829      	ldr	r1, [r5, #0]
 800ab42:	061f      	lsls	r7, r3, #24
 800ab44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab48:	d402      	bmi.n	800ab50 <_printf_i+0x18c>
 800ab4a:	065f      	lsls	r7, r3, #25
 800ab4c:	bf48      	it	mi
 800ab4e:	b2b6      	uxthmi	r6, r6
 800ab50:	07df      	lsls	r7, r3, #31
 800ab52:	bf48      	it	mi
 800ab54:	f043 0320 	orrmi.w	r3, r3, #32
 800ab58:	6029      	str	r1, [r5, #0]
 800ab5a:	bf48      	it	mi
 800ab5c:	6023      	strmi	r3, [r4, #0]
 800ab5e:	b91e      	cbnz	r6, 800ab68 <_printf_i+0x1a4>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	f023 0320 	bic.w	r3, r3, #32
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	2310      	movs	r3, #16
 800ab6a:	e7a7      	b.n	800aabc <_printf_i+0xf8>
 800ab6c:	4824      	ldr	r0, [pc, #144]	; (800ac00 <_printf_i+0x23c>)
 800ab6e:	e7e4      	b.n	800ab3a <_printf_i+0x176>
 800ab70:	4615      	mov	r5, r2
 800ab72:	e7bd      	b.n	800aaf0 <_printf_i+0x12c>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	6826      	ldr	r6, [r4, #0]
 800ab78:	6961      	ldr	r1, [r4, #20]
 800ab7a:	1d18      	adds	r0, r3, #4
 800ab7c:	6028      	str	r0, [r5, #0]
 800ab7e:	0635      	lsls	r5, r6, #24
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	d501      	bpl.n	800ab88 <_printf_i+0x1c4>
 800ab84:	6019      	str	r1, [r3, #0]
 800ab86:	e002      	b.n	800ab8e <_printf_i+0x1ca>
 800ab88:	0670      	lsls	r0, r6, #25
 800ab8a:	d5fb      	bpl.n	800ab84 <_printf_i+0x1c0>
 800ab8c:	8019      	strh	r1, [r3, #0]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	4615      	mov	r5, r2
 800ab94:	e7bc      	b.n	800ab10 <_printf_i+0x14c>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	1d1a      	adds	r2, r3, #4
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	681d      	ldr	r5, [r3, #0]
 800ab9e:	6862      	ldr	r2, [r4, #4]
 800aba0:	2100      	movs	r1, #0
 800aba2:	4628      	mov	r0, r5
 800aba4:	f7f5 fb94 	bl	80002d0 <memchr>
 800aba8:	b108      	cbz	r0, 800abae <_printf_i+0x1ea>
 800abaa:	1b40      	subs	r0, r0, r5
 800abac:	6060      	str	r0, [r4, #4]
 800abae:	6863      	ldr	r3, [r4, #4]
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	2300      	movs	r3, #0
 800abb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abb8:	e7aa      	b.n	800ab10 <_printf_i+0x14c>
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	462a      	mov	r2, r5
 800abbe:	4649      	mov	r1, r9
 800abc0:	4640      	mov	r0, r8
 800abc2:	47d0      	blx	sl
 800abc4:	3001      	adds	r0, #1
 800abc6:	d0ad      	beq.n	800ab24 <_printf_i+0x160>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	079b      	lsls	r3, r3, #30
 800abcc:	d413      	bmi.n	800abf6 <_printf_i+0x232>
 800abce:	68e0      	ldr	r0, [r4, #12]
 800abd0:	9b03      	ldr	r3, [sp, #12]
 800abd2:	4298      	cmp	r0, r3
 800abd4:	bfb8      	it	lt
 800abd6:	4618      	movlt	r0, r3
 800abd8:	e7a6      	b.n	800ab28 <_printf_i+0x164>
 800abda:	2301      	movs	r3, #1
 800abdc:	4632      	mov	r2, r6
 800abde:	4649      	mov	r1, r9
 800abe0:	4640      	mov	r0, r8
 800abe2:	47d0      	blx	sl
 800abe4:	3001      	adds	r0, #1
 800abe6:	d09d      	beq.n	800ab24 <_printf_i+0x160>
 800abe8:	3501      	adds	r5, #1
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	9903      	ldr	r1, [sp, #12]
 800abee:	1a5b      	subs	r3, r3, r1
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dcf2      	bgt.n	800abda <_printf_i+0x216>
 800abf4:	e7eb      	b.n	800abce <_printf_i+0x20a>
 800abf6:	2500      	movs	r5, #0
 800abf8:	f104 0619 	add.w	r6, r4, #25
 800abfc:	e7f5      	b.n	800abea <_printf_i+0x226>
 800abfe:	bf00      	nop
 800ac00:	0800b487 	.word	0x0800b487
 800ac04:	0800b498 	.word	0x0800b498

0800ac08 <__sflush_r>:
 800ac08:	898a      	ldrh	r2, [r1, #12]
 800ac0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0e:	4605      	mov	r5, r0
 800ac10:	0710      	lsls	r0, r2, #28
 800ac12:	460c      	mov	r4, r1
 800ac14:	d458      	bmi.n	800acc8 <__sflush_r+0xc0>
 800ac16:	684b      	ldr	r3, [r1, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	dc05      	bgt.n	800ac28 <__sflush_r+0x20>
 800ac1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	dc02      	bgt.n	800ac28 <__sflush_r+0x20>
 800ac22:	2000      	movs	r0, #0
 800ac24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	d0f9      	beq.n	800ac22 <__sflush_r+0x1a>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac34:	682f      	ldr	r7, [r5, #0]
 800ac36:	6a21      	ldr	r1, [r4, #32]
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	d032      	beq.n	800aca2 <__sflush_r+0x9a>
 800ac3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	075a      	lsls	r2, r3, #29
 800ac42:	d505      	bpl.n	800ac50 <__sflush_r+0x48>
 800ac44:	6863      	ldr	r3, [r4, #4]
 800ac46:	1ac0      	subs	r0, r0, r3
 800ac48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac4a:	b10b      	cbz	r3, 800ac50 <__sflush_r+0x48>
 800ac4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac4e:	1ac0      	subs	r0, r0, r3
 800ac50:	2300      	movs	r3, #0
 800ac52:	4602      	mov	r2, r0
 800ac54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac56:	6a21      	ldr	r1, [r4, #32]
 800ac58:	4628      	mov	r0, r5
 800ac5a:	47b0      	blx	r6
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	d106      	bne.n	800ac70 <__sflush_r+0x68>
 800ac62:	6829      	ldr	r1, [r5, #0]
 800ac64:	291d      	cmp	r1, #29
 800ac66:	d82b      	bhi.n	800acc0 <__sflush_r+0xb8>
 800ac68:	4a29      	ldr	r2, [pc, #164]	; (800ad10 <__sflush_r+0x108>)
 800ac6a:	410a      	asrs	r2, r1
 800ac6c:	07d6      	lsls	r6, r2, #31
 800ac6e:	d427      	bmi.n	800acc0 <__sflush_r+0xb8>
 800ac70:	2200      	movs	r2, #0
 800ac72:	6062      	str	r2, [r4, #4]
 800ac74:	04d9      	lsls	r1, r3, #19
 800ac76:	6922      	ldr	r2, [r4, #16]
 800ac78:	6022      	str	r2, [r4, #0]
 800ac7a:	d504      	bpl.n	800ac86 <__sflush_r+0x7e>
 800ac7c:	1c42      	adds	r2, r0, #1
 800ac7e:	d101      	bne.n	800ac84 <__sflush_r+0x7c>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b903      	cbnz	r3, 800ac86 <__sflush_r+0x7e>
 800ac84:	6560      	str	r0, [r4, #84]	; 0x54
 800ac86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac88:	602f      	str	r7, [r5, #0]
 800ac8a:	2900      	cmp	r1, #0
 800ac8c:	d0c9      	beq.n	800ac22 <__sflush_r+0x1a>
 800ac8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac92:	4299      	cmp	r1, r3
 800ac94:	d002      	beq.n	800ac9c <__sflush_r+0x94>
 800ac96:	4628      	mov	r0, r5
 800ac98:	f7ff fa92 	bl	800a1c0 <_free_r>
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	6360      	str	r0, [r4, #52]	; 0x34
 800aca0:	e7c0      	b.n	800ac24 <__sflush_r+0x1c>
 800aca2:	2301      	movs	r3, #1
 800aca4:	4628      	mov	r0, r5
 800aca6:	47b0      	blx	r6
 800aca8:	1c41      	adds	r1, r0, #1
 800acaa:	d1c8      	bne.n	800ac3e <__sflush_r+0x36>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0c5      	beq.n	800ac3e <__sflush_r+0x36>
 800acb2:	2b1d      	cmp	r3, #29
 800acb4:	d001      	beq.n	800acba <__sflush_r+0xb2>
 800acb6:	2b16      	cmp	r3, #22
 800acb8:	d101      	bne.n	800acbe <__sflush_r+0xb6>
 800acba:	602f      	str	r7, [r5, #0]
 800acbc:	e7b1      	b.n	800ac22 <__sflush_r+0x1a>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	e7ad      	b.n	800ac24 <__sflush_r+0x1c>
 800acc8:	690f      	ldr	r7, [r1, #16]
 800acca:	2f00      	cmp	r7, #0
 800accc:	d0a9      	beq.n	800ac22 <__sflush_r+0x1a>
 800acce:	0793      	lsls	r3, r2, #30
 800acd0:	680e      	ldr	r6, [r1, #0]
 800acd2:	bf08      	it	eq
 800acd4:	694b      	ldreq	r3, [r1, #20]
 800acd6:	600f      	str	r7, [r1, #0]
 800acd8:	bf18      	it	ne
 800acda:	2300      	movne	r3, #0
 800acdc:	eba6 0807 	sub.w	r8, r6, r7
 800ace0:	608b      	str	r3, [r1, #8]
 800ace2:	f1b8 0f00 	cmp.w	r8, #0
 800ace6:	dd9c      	ble.n	800ac22 <__sflush_r+0x1a>
 800ace8:	6a21      	ldr	r1, [r4, #32]
 800acea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acec:	4643      	mov	r3, r8
 800acee:	463a      	mov	r2, r7
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b0      	blx	r6
 800acf4:	2800      	cmp	r0, #0
 800acf6:	dc06      	bgt.n	800ad06 <__sflush_r+0xfe>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acfe:	81a3      	strh	r3, [r4, #12]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad04:	e78e      	b.n	800ac24 <__sflush_r+0x1c>
 800ad06:	4407      	add	r7, r0
 800ad08:	eba8 0800 	sub.w	r8, r8, r0
 800ad0c:	e7e9      	b.n	800ace2 <__sflush_r+0xda>
 800ad0e:	bf00      	nop
 800ad10:	dfbffffe 	.word	0xdfbffffe

0800ad14 <_fflush_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	690b      	ldr	r3, [r1, #16]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	b913      	cbnz	r3, 800ad24 <_fflush_r+0x10>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	4628      	mov	r0, r5
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	b118      	cbz	r0, 800ad2e <_fflush_r+0x1a>
 800ad26:	6a03      	ldr	r3, [r0, #32]
 800ad28:	b90b      	cbnz	r3, 800ad2e <_fflush_r+0x1a>
 800ad2a:	f7ff f82b 	bl	8009d84 <__sinit>
 800ad2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0f3      	beq.n	800ad1e <_fflush_r+0xa>
 800ad36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad38:	07d0      	lsls	r0, r2, #31
 800ad3a:	d404      	bmi.n	800ad46 <_fflush_r+0x32>
 800ad3c:	0599      	lsls	r1, r3, #22
 800ad3e:	d402      	bmi.n	800ad46 <_fflush_r+0x32>
 800ad40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad42:	f7ff fa2c 	bl	800a19e <__retarget_lock_acquire_recursive>
 800ad46:	4628      	mov	r0, r5
 800ad48:	4621      	mov	r1, r4
 800ad4a:	f7ff ff5d 	bl	800ac08 <__sflush_r>
 800ad4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad50:	07da      	lsls	r2, r3, #31
 800ad52:	4605      	mov	r5, r0
 800ad54:	d4e4      	bmi.n	800ad20 <_fflush_r+0xc>
 800ad56:	89a3      	ldrh	r3, [r4, #12]
 800ad58:	059b      	lsls	r3, r3, #22
 800ad5a:	d4e1      	bmi.n	800ad20 <_fflush_r+0xc>
 800ad5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad5e:	f7ff fa1f 	bl	800a1a0 <__retarget_lock_release_recursive>
 800ad62:	e7dd      	b.n	800ad20 <_fflush_r+0xc>

0800ad64 <__swhatbuf_r>:
 800ad64:	b570      	push	{r4, r5, r6, lr}
 800ad66:	460c      	mov	r4, r1
 800ad68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	b096      	sub	sp, #88	; 0x58
 800ad70:	4615      	mov	r5, r2
 800ad72:	461e      	mov	r6, r3
 800ad74:	da0d      	bge.n	800ad92 <__swhatbuf_r+0x2e>
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad7c:	f04f 0100 	mov.w	r1, #0
 800ad80:	bf0c      	ite	eq
 800ad82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad86:	2340      	movne	r3, #64	; 0x40
 800ad88:	2000      	movs	r0, #0
 800ad8a:	6031      	str	r1, [r6, #0]
 800ad8c:	602b      	str	r3, [r5, #0]
 800ad8e:	b016      	add	sp, #88	; 0x58
 800ad90:	bd70      	pop	{r4, r5, r6, pc}
 800ad92:	466a      	mov	r2, sp
 800ad94:	f000 f862 	bl	800ae5c <_fstat_r>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dbec      	blt.n	800ad76 <__swhatbuf_r+0x12>
 800ad9c:	9901      	ldr	r1, [sp, #4]
 800ad9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ada2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ada6:	4259      	negs	r1, r3
 800ada8:	4159      	adcs	r1, r3
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	e7eb      	b.n	800ad88 <__swhatbuf_r+0x24>

0800adb0 <__smakebuf_r>:
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adb4:	079d      	lsls	r5, r3, #30
 800adb6:	4606      	mov	r6, r0
 800adb8:	460c      	mov	r4, r1
 800adba:	d507      	bpl.n	800adcc <__smakebuf_r+0x1c>
 800adbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	6123      	str	r3, [r4, #16]
 800adc4:	2301      	movs	r3, #1
 800adc6:	6163      	str	r3, [r4, #20]
 800adc8:	b002      	add	sp, #8
 800adca:	bd70      	pop	{r4, r5, r6, pc}
 800adcc:	ab01      	add	r3, sp, #4
 800adce:	466a      	mov	r2, sp
 800add0:	f7ff ffc8 	bl	800ad64 <__swhatbuf_r>
 800add4:	9900      	ldr	r1, [sp, #0]
 800add6:	4605      	mov	r5, r0
 800add8:	4630      	mov	r0, r6
 800adda:	f7ff fa5d 	bl	800a298 <_malloc_r>
 800adde:	b948      	cbnz	r0, 800adf4 <__smakebuf_r+0x44>
 800ade0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade4:	059a      	lsls	r2, r3, #22
 800ade6:	d4ef      	bmi.n	800adc8 <__smakebuf_r+0x18>
 800ade8:	f023 0303 	bic.w	r3, r3, #3
 800adec:	f043 0302 	orr.w	r3, r3, #2
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	e7e3      	b.n	800adbc <__smakebuf_r+0xc>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	9b00      	ldr	r3, [sp, #0]
 800ae00:	6163      	str	r3, [r4, #20]
 800ae02:	9b01      	ldr	r3, [sp, #4]
 800ae04:	6120      	str	r0, [r4, #16]
 800ae06:	b15b      	cbz	r3, 800ae20 <__smakebuf_r+0x70>
 800ae08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	f000 f837 	bl	800ae80 <_isatty_r>
 800ae12:	b128      	cbz	r0, 800ae20 <__smakebuf_r+0x70>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f023 0303 	bic.w	r3, r3, #3
 800ae1a:	f043 0301 	orr.w	r3, r3, #1
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	431d      	orrs	r5, r3
 800ae24:	81a5      	strh	r5, [r4, #12]
 800ae26:	e7cf      	b.n	800adc8 <__smakebuf_r+0x18>

0800ae28 <memmove>:
 800ae28:	4288      	cmp	r0, r1
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	eb01 0402 	add.w	r4, r1, r2
 800ae30:	d902      	bls.n	800ae38 <memmove+0x10>
 800ae32:	4284      	cmp	r4, r0
 800ae34:	4623      	mov	r3, r4
 800ae36:	d807      	bhi.n	800ae48 <memmove+0x20>
 800ae38:	1e43      	subs	r3, r0, #1
 800ae3a:	42a1      	cmp	r1, r4
 800ae3c:	d008      	beq.n	800ae50 <memmove+0x28>
 800ae3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae46:	e7f8      	b.n	800ae3a <memmove+0x12>
 800ae48:	4402      	add	r2, r0
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	428a      	cmp	r2, r1
 800ae4e:	d100      	bne.n	800ae52 <memmove+0x2a>
 800ae50:	bd10      	pop	{r4, pc}
 800ae52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae5a:	e7f7      	b.n	800ae4c <memmove+0x24>

0800ae5c <_fstat_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4d07      	ldr	r5, [pc, #28]	; (800ae7c <_fstat_r+0x20>)
 800ae60:	2300      	movs	r3, #0
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	4611      	mov	r1, r2
 800ae68:	602b      	str	r3, [r5, #0]
 800ae6a:	f7f6 fb5a 	bl	8001522 <_fstat>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d102      	bne.n	800ae78 <_fstat_r+0x1c>
 800ae72:	682b      	ldr	r3, [r5, #0]
 800ae74:	b103      	cbz	r3, 800ae78 <_fstat_r+0x1c>
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	bd38      	pop	{r3, r4, r5, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20014908 	.word	0x20014908

0800ae80 <_isatty_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d06      	ldr	r5, [pc, #24]	; (800ae9c <_isatty_r+0x1c>)
 800ae84:	2300      	movs	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f6 fb59 	bl	8001542 <_isatty>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_isatty_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_isatty_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	20014908 	.word	0x20014908

0800aea0 <_sbrk_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d06      	ldr	r5, [pc, #24]	; (800aebc <_sbrk_r+0x1c>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	f000 f840 	bl	800af30 <_sbrk>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_sbrk_r+0x1a>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_sbrk_r+0x1a>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	20014908 	.word	0x20014908

0800aec0 <_realloc_r>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	4680      	mov	r8, r0
 800aec6:	4614      	mov	r4, r2
 800aec8:	460e      	mov	r6, r1
 800aeca:	b921      	cbnz	r1, 800aed6 <_realloc_r+0x16>
 800aecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	4611      	mov	r1, r2
 800aed2:	f7ff b9e1 	b.w	800a298 <_malloc_r>
 800aed6:	b92a      	cbnz	r2, 800aee4 <_realloc_r+0x24>
 800aed8:	f7ff f972 	bl	800a1c0 <_free_r>
 800aedc:	4625      	mov	r5, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee4:	f000 f81b 	bl	800af1e <_malloc_usable_size_r>
 800aee8:	4284      	cmp	r4, r0
 800aeea:	4607      	mov	r7, r0
 800aeec:	d802      	bhi.n	800aef4 <_realloc_r+0x34>
 800aeee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aef2:	d812      	bhi.n	800af1a <_realloc_r+0x5a>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4640      	mov	r0, r8
 800aef8:	f7ff f9ce 	bl	800a298 <_malloc_r>
 800aefc:	4605      	mov	r5, r0
 800aefe:	2800      	cmp	r0, #0
 800af00:	d0ed      	beq.n	800aede <_realloc_r+0x1e>
 800af02:	42bc      	cmp	r4, r7
 800af04:	4622      	mov	r2, r4
 800af06:	4631      	mov	r1, r6
 800af08:	bf28      	it	cs
 800af0a:	463a      	movcs	r2, r7
 800af0c:	f7ff f949 	bl	800a1a2 <memcpy>
 800af10:	4631      	mov	r1, r6
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff f954 	bl	800a1c0 <_free_r>
 800af18:	e7e1      	b.n	800aede <_realloc_r+0x1e>
 800af1a:	4635      	mov	r5, r6
 800af1c:	e7df      	b.n	800aede <_realloc_r+0x1e>

0800af1e <_malloc_usable_size_r>:
 800af1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af22:	1f18      	subs	r0, r3, #4
 800af24:	2b00      	cmp	r3, #0
 800af26:	bfbc      	itt	lt
 800af28:	580b      	ldrlt	r3, [r1, r0]
 800af2a:	18c0      	addlt	r0, r0, r3
 800af2c:	4770      	bx	lr
	...

0800af30 <_sbrk>:
 800af30:	4a04      	ldr	r2, [pc, #16]	; (800af44 <_sbrk+0x14>)
 800af32:	6811      	ldr	r1, [r2, #0]
 800af34:	4603      	mov	r3, r0
 800af36:	b909      	cbnz	r1, 800af3c <_sbrk+0xc>
 800af38:	4903      	ldr	r1, [pc, #12]	; (800af48 <_sbrk+0x18>)
 800af3a:	6011      	str	r1, [r2, #0]
 800af3c:	6810      	ldr	r0, [r2, #0]
 800af3e:	4403      	add	r3, r0
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	4770      	bx	lr
 800af44:	20014918 	.word	0x20014918
 800af48:	20014920 	.word	0x20014920

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr
