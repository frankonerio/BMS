
GETjag_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f4  080066f4  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066fc  080066fc  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000130  08006834  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08006834  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d132  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f9  00000000  00000000  0002d2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c50  00000000  00000000  0002f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000978  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004051  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f749  00000000  00000000  00034ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ad5  00000000  00000000  00044632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b04  00000000  00000000  00115108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00118c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000130 	.word	0x20000130
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006290 	.word	0x08006290

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000134 	.word	0x20000134
 800020c:	08006290 	.word	0x08006290

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 80005e2:	4bb2      	ldr	r3, [pc, #712]	; (80008ac <main+0x2d0>)
 80005e4:	f107 0408 	add.w	r4, r7, #8
 80005e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f002 fc47 	bl	8002e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f99f 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fa6f 	bl	8000ad8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005fa:	f000 fa43 	bl	8000a84 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005fe:	f000 fa0b 	bl	8000a18 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Chip selection call back */

  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	48aa      	ldr	r0, [pc, #680]	; (80008b0 <main+0x2d4>)
 8000608:	f002 ff4a 	bl	80034a0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f002 fca9 	bl	8002f64 <HAL_Delay>
  HAL_GPIO_WritePin(GPIO_W5500_RESET_GPIO_Port, GPIO_W5500_RESET_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	2108      	movs	r1, #8
 8000616:	48a6      	ldr	r0, [pc, #664]	; (80008b0 <main+0x2d4>)
 8000618:	f002 ff42 	bl	80034a0 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f002 fca0 	bl	8002f64 <HAL_Delay>

  /* SPI Read & Write callback function */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000624:	49a3      	ldr	r1, [pc, #652]	; (80008b4 <main+0x2d8>)
 8000626:	48a4      	ldr	r0, [pc, #656]	; (80008b8 <main+0x2dc>)
 8000628:	f001 fee4 	bl	80023f4 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800062c:	49a3      	ldr	r1, [pc, #652]	; (80008bc <main+0x2e0>)
 800062e:	48a4      	ldr	r0, [pc, #656]	; (80008c0 <main+0x2e4>)
 8000630:	f001 ff06 	bl	8002440 <reg_wizchip_spi_cbfunc>

  ////////////////////////////////////////////////////////////////////////
  /* WIZCHIP SOCKET Buffer initialize */
  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4619      	mov	r1, r3
 800063a:	2001      	movs	r0, #1
 800063c:	f001 ff2c 	bl	8002498 <ctlwizchip>
 8000640:	4603      	mov	r3, r0
 8000642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000646:	d100      	bne.n	800064a <main+0x6e>
  {

    while (1)
 8000648:	e7fe      	b.n	8000648 <main+0x6c>
      ;
  }

  /* Network initialization */
  network_init();
 800064a:	f000 fb0f 	bl	8000c6c <network_init>
  wizchip_setnetinfo(&gWIZNETINFO);
 800064e:	489d      	ldr	r0, [pc, #628]	; (80008c4 <main+0x2e8>)
 8000650:	f002 fafe 	bl	8002c50 <wizchip_setnetinfo>
  PRINT_NETINFO(gWIZNETINFO);
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	2218      	movs	r2, #24
 8000658:	499b      	ldr	r1, [pc, #620]	; (80008c8 <main+0x2ec>)
 800065a:	489c      	ldr	r0, [pc, #624]	; (80008cc <main+0x2f0>)
 800065c:	f004 f8f2 	bl	8004844 <HAL_UART_Transmit>
 8000660:	4b98      	ldr	r3, [pc, #608]	; (80008c4 <main+0x2e8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461c      	mov	r4, r3
 8000666:	4b97      	ldr	r3, [pc, #604]	; (80008c4 <main+0x2e8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	461d      	mov	r5, r3
 800066c:	4b95      	ldr	r3, [pc, #596]	; (80008c4 <main+0x2e8>)
 800066e:	789b      	ldrb	r3, [r3, #2]
 8000670:	461a      	mov	r2, r3
 8000672:	4b94      	ldr	r3, [pc, #592]	; (80008c4 <main+0x2e8>)
 8000674:	78db      	ldrb	r3, [r3, #3]
 8000676:	4619      	mov	r1, r3
 8000678:	4b92      	ldr	r3, [pc, #584]	; (80008c4 <main+0x2e8>)
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	4618      	mov	r0, r3
 800067e:	4b91      	ldr	r3, [pc, #580]	; (80008c4 <main+0x2e8>)
 8000680:	795b      	ldrb	r3, [r3, #5]
 8000682:	9303      	str	r3, [sp, #12]
 8000684:	9002      	str	r0, [sp, #8]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	462b      	mov	r3, r5
 800068c:	4622      	mov	r2, r4
 800068e:	4990      	ldr	r1, [pc, #576]	; (80008d0 <main+0x2f4>)
 8000690:	4890      	ldr	r0, [pc, #576]	; (80008d4 <main+0x2f8>)
 8000692:	f004 fdc3 	bl	800521c <siprintf>
 8000696:	488f      	ldr	r0, [pc, #572]	; (80008d4 <main+0x2f8>)
 8000698:	f7ff fdc4 	bl	8000224 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	498c      	ldr	r1, [pc, #560]	; (80008d4 <main+0x2f8>)
 80006a4:	4889      	ldr	r0, [pc, #548]	; (80008cc <main+0x2f0>)
 80006a6:	f004 f8cd 	bl	8004844 <HAL_UART_Transmit>
 80006aa:	4b86      	ldr	r3, [pc, #536]	; (80008c4 <main+0x2e8>)
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4b84      	ldr	r3, [pc, #528]	; (80008c4 <main+0x2e8>)
 80006b2:	79db      	ldrb	r3, [r3, #7]
 80006b4:	4618      	mov	r0, r3
 80006b6:	4b83      	ldr	r3, [pc, #524]	; (80008c4 <main+0x2e8>)
 80006b8:	7a1b      	ldrb	r3, [r3, #8]
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b81      	ldr	r3, [pc, #516]	; (80008c4 <main+0x2e8>)
 80006be:	7a5b      	ldrb	r3, [r3, #9]
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	9200      	str	r2, [sp, #0]
 80006c4:	4603      	mov	r3, r0
 80006c6:	460a      	mov	r2, r1
 80006c8:	4983      	ldr	r1, [pc, #524]	; (80008d8 <main+0x2fc>)
 80006ca:	4882      	ldr	r0, [pc, #520]	; (80008d4 <main+0x2f8>)
 80006cc:	f004 fda6 	bl	800521c <siprintf>
 80006d0:	4880      	ldr	r0, [pc, #512]	; (80008d4 <main+0x2f8>)
 80006d2:	f7ff fda7 	bl	8000224 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	497d      	ldr	r1, [pc, #500]	; (80008d4 <main+0x2f8>)
 80006de:	487b      	ldr	r0, [pc, #492]	; (80008cc <main+0x2f0>)
 80006e0:	f004 f8b0 	bl	8004844 <HAL_UART_Transmit>
 80006e4:	4b77      	ldr	r3, [pc, #476]	; (80008c4 <main+0x2e8>)
 80006e6:	7a9b      	ldrb	r3, [r3, #10]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b76      	ldr	r3, [pc, #472]	; (80008c4 <main+0x2e8>)
 80006ec:	7adb      	ldrb	r3, [r3, #11]
 80006ee:	4618      	mov	r0, r3
 80006f0:	4b74      	ldr	r3, [pc, #464]	; (80008c4 <main+0x2e8>)
 80006f2:	7b1b      	ldrb	r3, [r3, #12]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b73      	ldr	r3, [pc, #460]	; (80008c4 <main+0x2e8>)
 80006f8:	7b5b      	ldrb	r3, [r3, #13]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9200      	str	r2, [sp, #0]
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	4976      	ldr	r1, [pc, #472]	; (80008dc <main+0x300>)
 8000704:	4873      	ldr	r0, [pc, #460]	; (80008d4 <main+0x2f8>)
 8000706:	f004 fd89 	bl	800521c <siprintf>
 800070a:	4872      	ldr	r0, [pc, #456]	; (80008d4 <main+0x2f8>)
 800070c:	f7ff fd8a 	bl	8000224 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	496f      	ldr	r1, [pc, #444]	; (80008d4 <main+0x2f8>)
 8000718:	486c      	ldr	r0, [pc, #432]	; (80008cc <main+0x2f0>)
 800071a:	f004 f893 	bl	8004844 <HAL_UART_Transmit>
 800071e:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <main+0x2e8>)
 8000720:	7b9b      	ldrb	r3, [r3, #14]
 8000722:	4619      	mov	r1, r3
 8000724:	4b67      	ldr	r3, [pc, #412]	; (80008c4 <main+0x2e8>)
 8000726:	7bdb      	ldrb	r3, [r3, #15]
 8000728:	4618      	mov	r0, r3
 800072a:	4b66      	ldr	r3, [pc, #408]	; (80008c4 <main+0x2e8>)
 800072c:	7c1b      	ldrb	r3, [r3, #16]
 800072e:	461a      	mov	r2, r3
 8000730:	4b64      	ldr	r3, [pc, #400]	; (80008c4 <main+0x2e8>)
 8000732:	7c5b      	ldrb	r3, [r3, #17]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	9200      	str	r2, [sp, #0]
 8000738:	4603      	mov	r3, r0
 800073a:	460a      	mov	r2, r1
 800073c:	4968      	ldr	r1, [pc, #416]	; (80008e0 <main+0x304>)
 800073e:	4865      	ldr	r0, [pc, #404]	; (80008d4 <main+0x2f8>)
 8000740:	f004 fd6c 	bl	800521c <siprintf>
 8000744:	4863      	ldr	r0, [pc, #396]	; (80008d4 <main+0x2f8>)
 8000746:	f7ff fd6d 	bl	8000224 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	4960      	ldr	r1, [pc, #384]	; (80008d4 <main+0x2f8>)
 8000752:	485e      	ldr	r0, [pc, #376]	; (80008cc <main+0x2f0>)
 8000754:	f004 f876 	bl	8004844 <HAL_UART_Transmit>

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000758:	495a      	ldr	r1, [pc, #360]	; (80008c4 <main+0x2e8>)
 800075a:	2000      	movs	r0, #0
 800075c:	f001 ff7e 	bl	800265c <ctlnetwork>
  // so that user can use any model w5500 board
  // else the PINs on the board configure it, which may
  // lead to different configurations in different boards.
  wiz_PhyConf phyconf;

  phyconf.by = PHY_CONFBY_SW;
 8000760:	2301      	movs	r3, #1
 8000762:	713b      	strb	r3, [r7, #4]
  phyconf.duplex = PHY_DUPLEX_FULL;
 8000764:	2301      	movs	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
  phyconf.speed = PHY_SPEED_10;     // 10MBps Ethernet link speed
 8000768:	2300      	movs	r3, #0
 800076a:	71bb      	strb	r3, [r7, #6]
  phyconf.mode = PHY_MODE_AUTONEGO; // best to go with auto-negotiation
 800076c:	2301      	movs	r3, #1
 800076e:	717b      	strb	r3, [r7, #5]

  ctlwizchip(CW_SET_PHYCONF, (void *)&phyconf); // PHY Configuration Command
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	200a      	movs	r0, #10
 8000776:	f001 fe8f 	bl	8002498 <ctlwizchip>
  //*** End Phy Configuration

  PHYStatusCheck();
 800077a:	f000 fab1 	bl	8000ce0 <PHYStatusCheck>
  PrintPHYConf();
 800077e:	f000 fadb 	bl	8000d38 <PrintPHYConf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    printf("\r\nInitializing server socket\r\n");
 8000782:	4858      	ldr	r0, [pc, #352]	; (80008e4 <main+0x308>)
 8000784:	f004 fd42 	bl	800520c <puts>
    // Parameters in order socket_id, protocol TCP or UDP, Port number, Flags=0
    // Return value is socket ID on success
    if (socket(1, Sn_MR_TCP, LISTEN_PORT, 0) != 1)
 8000788:	2300      	movs	r3, #0
 800078a:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800078e:	2101      	movs	r1, #1
 8000790:	2001      	movs	r0, #1
 8000792:	f001 f907 	bl	80019a4 <socket>
 8000796:	4603      	mov	r3, r0
 8000798:	2b01      	cmp	r3, #1
 800079a:	d003      	beq.n	80007a4 <main+0x1c8>
    {
      // error
      printf("Cannot create Socket!\r\n");
 800079c:	4852      	ldr	r0, [pc, #328]	; (80008e8 <main+0x30c>)
 800079e:	f004 fd35 	bl	800520c <puts>
      while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x1c6>
        ; // halt here
    }

    // success
    printf("Socket Created Successfully ! \r\n");
 80007a4:	4851      	ldr	r0, [pc, #324]	; (80008ec <main+0x310>)
 80007a6:	f004 fd31 	bl	800520c <puts>

    uint8_t socket_io_mode = SOCK_IO_BLOCK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	70fb      	strb	r3, [r7, #3]

    ctlsocket(1, CS_SET_IOMODE, &socket_io_mode); // set blocking IO mode
 80007ae:	1cfb      	adds	r3, r7, #3
 80007b0:	461a      	mov	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	2001      	movs	r0, #1
 80007b6:	f001 fcf7 	bl	80021a8 <ctlsocket>

    printf("Start listening on port %d ! \r\n", LISTEN_PORT);
 80007ba:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80007be:	484c      	ldr	r0, [pc, #304]	; (80008f0 <main+0x314>)
 80007c0:	f004 fcbe 	bl	8005140 <iprintf>
    printf("Waiting for a client connection. \r\n");
 80007c4:	484b      	ldr	r0, [pc, #300]	; (80008f4 <main+0x318>)
 80007c6:	f004 fd21 	bl	800520c <puts>



    // Make it a passive socket (i.e. listen for connection)
    if (listen(1) != SOCK_OK) // our socket id is 1 (w5500 have 8 sockets from 0-7)
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fa6c 	bl	8001ca8 <listen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d005      	beq.n	80007e2 <main+0x206>
    {
      // error
      printf("Cannot listen on port %d", LISTEN_PORT);
 80007d6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80007da:	4847      	ldr	r0, [pc, #284]	; (80008f8 <main+0x31c>)
 80007dc:	f004 fcb0 	bl	8005140 <iprintf>

      while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x204>
        ;
    }

    uint8_t sr = 0x00; // socket status register
 80007e2:	2300      	movs	r3, #0
 80007e4:	77fb      	strb	r3, [r7, #31]

    do
    {
      sr = getSn_SR(1); // read status reg (SR of socket 1)
 80007e6:	f44f 704a 	mov.w	r0, #808	; 0x328
 80007ea:	f000 fe33 	bl	8001454 <WIZCHIP_READ>
 80007ee:	4603      	mov	r3, r0
 80007f0:	77fb      	strb	r3, [r7, #31]
    } while (sr != 0x17 && sr != 0x00);
 80007f2:	7ffb      	ldrb	r3, [r7, #31]
 80007f4:	2b17      	cmp	r3, #23
 80007f6:	d002      	beq.n	80007fe <main+0x222>
 80007f8:	7ffb      	ldrb	r3, [r7, #31]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f3      	bne.n	80007e6 <main+0x20a>

    if (sr == 0x00)
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d103      	bne.n	800080c <main+0x230>
    {
      printf("Some error occurred on server socket. Please restart.\r\n");
 8000804:	483d      	ldr	r0, [pc, #244]	; (80008fc <main+0x320>)
 8000806:	f004 fd01 	bl	800520c <puts>
      while (1)
 800080a:	e7fe      	b.n	800080a <main+0x22e>
        ;
    }

    if (sr == 0x17)
 800080c:	7ffb      	ldrb	r3, [r7, #31]
 800080e:	2b17      	cmp	r3, #23
 8000810:	d1b7      	bne.n	8000782 <main+0x1a6>
    {
      // we come here only when a client has connected.
      // Now we can read data from the socket
      printf("A client connected!\r\n");
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <main+0x324>)
 8000814:	f004 fcfa 	bl	800520c <puts>
      printf("Waiting for Client Data ...!\r\n");
 8000818:	483a      	ldr	r0, [pc, #232]	; (8000904 <main+0x328>)
 800081a:	f004 fcf7 	bl	800520c <puts>

      while (1)
      {
        int len = recv(1, RX_buffer, RX_buffer_length);
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	4939      	ldr	r1, [pc, #228]	; (8000908 <main+0x32c>)
 8000822:	2001      	movs	r0, #1
 8000824:	f001 fc0a 	bl	800203c <recv>
 8000828:	61b8      	str	r0, [r7, #24]

        if (len == SOCKERR_SOCKSTATUS)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	f113 0f07 	cmn.w	r3, #7
 8000830:	d106      	bne.n	8000840 <main+0x264>
        {
          // client has disconnected
          printf("Client has disconnected\r\n");
 8000832:	4836      	ldr	r0, [pc, #216]	; (800090c <main+0x330>)
 8000834:	f004 fcea 	bl	800520c <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 8000838:	4835      	ldr	r0, [pc, #212]	; (8000910 <main+0x334>)
 800083a:	f004 fce7 	bl	800520c <puts>
          break;
 800083e:	e033      	b.n	80008a8 <main+0x2cc>
        }

        RX_buffer[len] = '\0';
 8000840:	4a31      	ldr	r2, [pc, #196]	; (8000908 <main+0x32c>)
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	4413      	add	r3, r2
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]

        printf("Received %d bytes from client\r\n", len);
 800084a:	69b9      	ldr	r1, [r7, #24]
 800084c:	4831      	ldr	r0, [pc, #196]	; (8000914 <main+0x338>)
 800084e:	f004 fc77 	bl	8005140 <iprintf>
        printf("Data Received: %s", RX_buffer);
 8000852:	492d      	ldr	r1, [pc, #180]	; (8000908 <main+0x32c>)
 8000854:	4830      	ldr	r0, [pc, #192]	; (8000918 <main+0x33c>)
 8000856:	f004 fc73 	bl	8005140 <iprintf>
        // Echo the data back encloused in a [] pair
        //	  			  send(1,(uint8_t*)"[",1);//starting sq bracket
        //	  			  send(1,receive_buff,len);// the data
        //	  			  send(1,(uint8_t*)"]",1);//closing sq bracket
        //
        memset(TX_buffer, 0, sizeof(TX_buffer));
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	2100      	movs	r1, #0
 800085e:	482f      	ldr	r0, [pc, #188]	; (800091c <main+0x340>)
 8000860:	f004 fdd4 	bl	800540c <memset>
        modbus_receive(RX_buffer, TX_buffer, len, holding_register);
 8000864:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <main+0x344>)
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	492c      	ldr	r1, [pc, #176]	; (800091c <main+0x340>)
 800086a:	4827      	ldr	r0, [pc, #156]	; (8000908 <main+0x32c>)
 800086c:	f000 fae0 	bl	8000e30 <modbus_receive>
        holding_register[3] = holding_register[3] + 1;
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <main+0x344>)
 8000872:	88db      	ldrh	r3, [r3, #6]
 8000874:	3301      	adds	r3, #1
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <main+0x344>)
 800087a:	80da      	strh	r2, [r3, #6]
        //	  			send(1,test_buffer,4);//closing sq bracket

        //	  			  uint8_t test_buffer[29]= {0,10,0,0,0,23,1,3,20,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10};
        //	  			  send(1,test_buffer,29);//closing sq bracket

        printf("\r\nECHO sent back to client\r\n");
 800087c:	4829      	ldr	r0, [pc, #164]	; (8000924 <main+0x348>)
 800087e:	f004 fcc5 	bl	800520c <puts>

        // Look for quit message and quit if received
        if (strcmp((char *)RX_buffer, "QUIT") == 0)
 8000882:	4929      	ldr	r1, [pc, #164]	; (8000928 <main+0x34c>)
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <main+0x32c>)
 8000886:	f7ff fcc3 	bl	8000210 <strcmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1c6      	bne.n	800081e <main+0x242>
        {
          printf("Received QUIT command from client\r\n");
 8000890:	4826      	ldr	r0, [pc, #152]	; (800092c <main+0x350>)
 8000892:	f004 fcbb 	bl	800520c <puts>
          printf("Disconnecting ... \r\n");
 8000896:	4826      	ldr	r0, [pc, #152]	; (8000930 <main+0x354>)
 8000898:	f004 fcb8 	bl	800520c <puts>
          printf("*** SESSION OVER ***\r\n\r\n");
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <main+0x334>)
 800089e:	f004 fcb5 	bl	800520c <puts>
          disconnect(1); // disconnect from the clinet
 80008a2:	2001      	movs	r0, #1
 80008a4:	f001 fa5a 	bl	8001d5c <disconnect>
  {
 80008a8:	e76b      	b.n	8000782 <main+0x1a6>
 80008aa:	bf00      	nop
 80008ac:	08006534 	.word	0x08006534
 80008b0:	40020000 	.word	0x40020000
 80008b4:	08000c29 	.word	0x08000c29
 80008b8:	08000c11 	.word	0x08000c11
 80008bc:	08000c41 	.word	0x08000c41
 80008c0:	08000c5b 	.word	0x08000c5b
 80008c4:	20000000 	.word	0x20000000
 80008c8:	080062a8 	.word	0x080062a8
 80008cc:	200001e0 	.word	0x200001e0
 80008d0:	080062c4 	.word	0x080062c4
 80008d4:	2000014c 	.word	0x2000014c
 80008d8:	080062e8 	.word	0x080062e8
 80008dc:	08006308 	.word	0x08006308
 80008e0:	08006328 	.word	0x08006328
 80008e4:	08006348 	.word	0x08006348
 80008e8:	08006368 	.word	0x08006368
 80008ec:	08006380 	.word	0x08006380
 80008f0:	080063a0 	.word	0x080063a0
 80008f4:	080063c0 	.word	0x080063c0
 80008f8:	080063e4 	.word	0x080063e4
 80008fc:	08006400 	.word	0x08006400
 8000900:	08006438 	.word	0x08006438
 8000904:	08006450 	.word	0x08006450
 8000908:	200002a8 	.word	0x200002a8
 800090c:	08006470 	.word	0x08006470
 8000910:	0800648c 	.word	0x0800648c
 8000914:	080064a4 	.word	0x080064a4
 8000918:	080064c4 	.word	0x080064c4
 800091c:	20000228 	.word	0x20000228
 8000920:	20000018 	.word	0x20000018
 8000924:	080064d8 	.word	0x080064d8
 8000928:	080064f4 	.word	0x080064f4
 800092c:	080064fc 	.word	0x080064fc
 8000930:	08006520 	.word	0x08006520

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	; 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2234      	movs	r2, #52	; 0x34
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f004 fd62 	bl	800540c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <SystemClock_Config+0xdc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a2b      	ldr	r2, [pc, #172]	; (8000a10 <SystemClock_Config+0xdc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemClock_Config+0xdc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xe0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <SystemClock_Config+0xe0>)
 800097e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xe0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000998:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009a8:	23b4      	movs	r3, #180	; 0xb4
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 f93d 	bl	8003c3c <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c8:	f000 f9fa 	bl	8000dc0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009cc:	f002 fd9c 	bl	8003508 <HAL_PWREx_EnableOverDrive>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009d6:	f000 f9f3 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2105      	movs	r1, #5
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fdd5 	bl	80035a8 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a04:	f000 f9dc 	bl	8000dc0 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3750      	adds	r7, #80	; 0x50
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <MX_SPI1_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_SPI1_Init+0x64>)
 8000a6a:	f003 fb85 	bl	8004178 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a74:	f000 f9a4 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000188 	.word	0x20000188
 8000a80:	40013000 	.word	0x40013000

08000a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_USART1_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000abc:	f003 fe72 	bl	80047a4 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f97b 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200001e0 	.word	0x200001e0
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a38      	ldr	r2, [pc, #224]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a31      	ldr	r2, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a23      	ldr	r2, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0x100>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2118      	movs	r1, #24
 8000b62:	481e      	ldr	r0, [pc, #120]	; (8000bdc <MX_GPIO_Init+0x104>)
 8000b64:	f002 fc9c 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SPI_INT_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8000b6e:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_GPIO_Init+0x108>)
 8000b70:	f002 fc96 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b74:	2304      	movs	r3, #4
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x104>)
 8000b90:	f002 faf2 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_W5500_RESET_Pin GPIO_W5500_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_W5500_RESET_Pin|GPIO_W5500_CS_Pin;
 8000b94:	2318      	movs	r3, #24
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_GPIO_Init+0x104>)
 8000bac:	f002 fae4 	bl	8003178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SPI_INT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SPI_INT_Pin;
 8000bb0:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_GPIO_Init+0x108>)
 8000bca:	f002 fad5 	bl	8003178 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400

08000be4 <W5500_rxtx>:
{
  DelayIncCnt();
}

uint8_t W5500_rxtx(uint8_t data)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  uint8_t rxdata;

  HAL_SPI_TransmitReceive(&hspi1, &data, &rxdata, 1, 50);
 8000bee:	f107 020f 	add.w	r2, r7, #15
 8000bf2:	1df9      	adds	r1, r7, #7
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <W5500_rxtx+0x28>)
 8000bfc:	f003 fb45 	bl	800428a <HAL_SPI_TransmitReceive>

  return (rxdata);
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000188 	.word	0x20000188

08000c10 <wizchip_select>:

void wizchip_select(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  W5500_select();
 8000c14:	2200      	movs	r2, #0
 8000c16:	2110      	movs	r1, #16
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <wizchip_select+0x14>)
 8000c1a:	f002 fc41 	bl	80034a0 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020000 	.word	0x40020000

08000c28 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  W5500_release();
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2110      	movs	r1, #16
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <wizchip_deselect+0x14>)
 8000c32:	f002 fc35 	bl	80034a0 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40020000 	.word	0x40020000

08000c40 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  W5500_tx(wb);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ffc9 	bl	8000be4 <W5500_rxtx>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <wizchip_read>:

uint8_t wizchip_read()
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  return W5500_rx();
 8000c5e:	20ff      	movs	r0, #255	; 0xff
 8000c60:	f7ff ffc0 	bl	8000be4 <W5500_rxtx>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <network_init>:

/////////////////////////////////////////////////////////////
// Intialize the network information to be used in WIZCHIP //
/////////////////////////////////////////////////////////////
void network_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  uint8_t tmpstr[6];

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000c72:	4906      	ldr	r1, [pc, #24]	; (8000c8c <network_init+0x20>)
 8000c74:	2000      	movs	r0, #0
 8000c76:	f001 fcf1 	bl	800265c <ctlnetwork>

  ctlwizchip(CW_GET_ID, (void *)tmpstr);
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2008      	movs	r0, #8
 8000c80:	f001 fc0a 	bl	8002498 <ctlwizchip>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000

08000c90 <UWriteData>:

void UWriteData(const char data)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) == RESET)
 8000c9a:	bf00      	nop
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <UWriteData+0x30>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca6:	2b80      	cmp	r3, #128	; 0x80
 8000ca8:	d1f8      	bne.n	8000c9c <UWriteData+0xc>
    ;

  huart1.Instance->DR = data;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <UWriteData+0x30>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	605a      	str	r2, [r3, #4]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	200001e0 	.word	0x200001e0

08000cc4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  UWriteData(ch);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffdd 	bl	8000c90 <UWriteData>
  return ch;
 8000cd6:	687b      	ldr	r3, [r7, #4]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  uint8_t tmp;

  do
  {
    printf("\r\nChecking Ethernet Cable Presence ...");
 8000ce6:	4810      	ldr	r0, [pc, #64]	; (8000d28 <PHYStatusCheck+0x48>)
 8000ce8:	f004 fa2a 	bl	8005140 <iprintf>
    ctlwizchip(CW_GET_PHYLINK, (void *)&tmp);
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	f001 fbd1 	bl	8002498 <ctlwizchip>

    if (tmp == PHY_LINK_OFF)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10b      	bne.n	8000d14 <PHYStatusCheck+0x34>
    {
      printf("NO Cable Connected!");
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <PHYStatusCheck+0x4c>)
 8000cfe:	f004 fa1f 	bl	8005140 <iprintf>
      HAL_Delay(1500);
 8000d02:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d06:	f002 f92d 	bl	8002f64 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <PHYStatusCheck+0x50>)
 8000d10:	f002 fbdf 	bl	80034d2 <HAL_GPIO_TogglePin>
    }
  } while (tmp == PHY_LINK_OFF);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0e5      	beq.n	8000ce6 <PHYStatusCheck+0x6>

  printf("Good! Cable got connected!");
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <PHYStatusCheck+0x54>)
 8000d1c:	f004 fa10 	bl	8005140 <iprintf>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08006544 	.word	0x08006544
 8000d2c:	0800656c 	.word	0x0800656c
 8000d30:	40020400 	.word	0x40020400
 8000d34:	08006580 	.word	0x08006580

08000d38 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  wiz_PhyConf phyconf;

  ctlwizchip(CW_GET_PHYCONF, (void *)&phyconf);
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	200b      	movs	r0, #11
 8000d44:	f001 fba8 	bl	8002498 <ctlwizchip>

  if (phyconf.by == PHY_CONFBY_HW)
 8000d48:	793b      	ldrb	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <PrintPHYConf+0x1e>
  {
    printf("\r\nPHY Configured by Hardware Pins");
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <PrintPHYConf+0x68>)
 8000d50:	f004 f9f6 	bl	8005140 <iprintf>
 8000d54:	e002      	b.n	8000d5c <PrintPHYConf+0x24>
  }
  else
  {
    printf("\r\nPHY Configured by Registers");
 8000d56:	4813      	ldr	r0, [pc, #76]	; (8000da4 <PrintPHYConf+0x6c>)
 8000d58:	f004 f9f2 	bl	8005140 <iprintf>
  }

  if (phyconf.mode == PHY_MODE_AUTONEGO)
 8000d5c:	797b      	ldrb	r3, [r7, #5]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d103      	bne.n	8000d6a <PrintPHYConf+0x32>
  {
    printf("\r\nAutonegotiation Enabled");
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <PrintPHYConf+0x70>)
 8000d64:	f004 f9ec 	bl	8005140 <iprintf>
 8000d68:	e002      	b.n	8000d70 <PrintPHYConf+0x38>
  }
  else
  {
    printf("\r\nAutonegotiation NOT Enabled");
 8000d6a:	4810      	ldr	r0, [pc, #64]	; (8000dac <PrintPHYConf+0x74>)
 8000d6c:	f004 f9e8 	bl	8005140 <iprintf>
  }

  if (phyconf.duplex == PHY_DUPLEX_FULL)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d103      	bne.n	8000d7e <PrintPHYConf+0x46>
  {
    printf("\r\nDuplex Mode: Full");
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <PrintPHYConf+0x78>)
 8000d78:	f004 f9e2 	bl	8005140 <iprintf>
 8000d7c:	e002      	b.n	8000d84 <PrintPHYConf+0x4c>
  }
  else
  {
    printf("\r\nDuplex Mode: Half");
 8000d7e:	480d      	ldr	r0, [pc, #52]	; (8000db4 <PrintPHYConf+0x7c>)
 8000d80:	f004 f9de 	bl	8005140 <iprintf>
  }

  if (phyconf.speed == PHY_SPEED_10)
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <PrintPHYConf+0x5a>
  {
    printf("\r\nSpeed: 10Mbps");
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <PrintPHYConf+0x80>)
 8000d8c:	f004 f9d8 	bl	8005140 <iprintf>
  }
  else
  {
    printf("\r\nSpeed: 100Mbps");
  }
}
 8000d90:	e002      	b.n	8000d98 <PrintPHYConf+0x60>
    printf("\r\nSpeed: 100Mbps");
 8000d92:	480a      	ldr	r0, [pc, #40]	; (8000dbc <PrintPHYConf+0x84>)
 8000d94:	f004 f9d4 	bl	8005140 <iprintf>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	0800659c 	.word	0x0800659c
 8000da4:	080065c0 	.word	0x080065c0
 8000da8:	080065e0 	.word	0x080065e0
 8000dac:	080065fc 	.word	0x080065fc
 8000db0:	0800661c 	.word	0x0800661c
 8000db4:	08006630 	.word	0x08006630
 8000db8:	08006644 	.word	0x08006644
 8000dbc:	08006654 	.word	0x08006654

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>

08000dca <get_HB_LB>:

unsigned char low_byte = 0x00;
unsigned char high_byte = 0x00;

void get_HB_LB(uint16_t value, unsigned char *HB, unsigned char *LB)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	81fb      	strh	r3, [r7, #14]
	*LB = (value & 0x00FF);
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	701a      	strb	r2, [r3, #0]
	*HB = ((value & 0xFF00) >> 0x08);
 8000de0:	89fb      	ldrh	r3, [r7, #14]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <make_word>:

uint16_t make_word(unsigned char HB, unsigned char LB)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	71fb      	strb	r3, [r7, #7]
 8000e04:	4613      	mov	r3, r2
 8000e06:	71bb      	strb	r3, [r7, #6]
	uint16_t tmp = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	81fb      	strh	r3, [r7, #14]

	tmp = HB;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	81fb      	strh	r3, [r7, #14]
	tmp |= LB;
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	81fb      	strh	r3, [r7, #14]

	return tmp;
 8000e20:	89fb      	ldrh	r3, [r7, #14]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <modbus_receive>:

void modbus_receive(uint8_t *rx_buffer, uint8_t *tx_buffer, int recv_lenght, uint16_t *read_registers)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b08b      	sub	sp, #44	; 0x2c
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]

	uint16_t temp1 = 0x0000;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	83fb      	strh	r3, [r7, #30]
	uint16_t temp2 = 0x0000;
 8000e42:	2300      	movs	r3, #0
 8000e44:	83bb      	strh	r3, [r7, #28]
	uint16_t temp3 = 0x0000;
 8000e46:	2300      	movs	r3, #0
 8000e48:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t temp4 = 0x0000;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	837b      	strh	r3, [r7, #26]
	uint16_t temp5 = 0x0000;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	833b      	strh	r3, [r7, #24]
	uint16_t temp6 = 0x0000;
 8000e52:	2300      	movs	r3, #0
 8000e54:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t temp7 = 0x0000;
 8000e56:	2300      	movs	r3, #0
 8000e58:	82fb      	strh	r3, [r7, #22]

	// memset(tx_buffer,0,sizeof(tx_buffer));

	// send(1,rx_buffer,recv_lenght);// the data

	if (rx_buffer[id_byte] == Slave_ID)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3306      	adds	r3, #6
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f040 814d 	bne.w	8001100 <modbus_receive+0x2d0>
	{
		tx_buffer[id_byte] = rx_buffer[id_byte];
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3306      	adds	r3, #6
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	7992      	ldrb	r2, [r2, #6]
 8000e6e:	701a      	strb	r2, [r3, #0]
		tx_buffer[function_code_byte] = rx_buffer[function_code_byte];
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3307      	adds	r3, #7
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	79d2      	ldrb	r2, [r2, #7]
 8000e78:	701a      	strb	r2, [r3, #0]

		tx_buffer[protocol_nr_high_byte] = 0;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		tx_buffer[protocol_nr_low_byte] = 0;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3303      	adds	r3, #3
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]

		switch (rx_buffer[function_code_byte])
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	3307      	adds	r3, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	f000 809e 	beq.w	8000fd2 <modbus_receive+0x1a2>
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	f300 812e 	bgt.w	80010f8 <modbus_receive+0x2c8>
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d003      	beq.n	8000ea8 <modbus_receive+0x78>
 8000ea0:	2b06      	cmp	r3, #6
 8000ea2:	f000 8125 	beq.w	80010f0 <modbus_receive+0x2c0>
 8000ea6:	e127      	b.n	80010f8 <modbus_receive+0x2c8>
		{

		case FC_read_holding_registers:
		{
			// Start address to read from
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3309      	adds	r3, #9
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f7ff ff9e 	bl	8000df8 <make_word>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	83fb      	strh	r3, [r7, #30]

			if ((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8000ec0:	8bfb      	ldrh	r3, [r7, #30]
 8000ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec4:	d87e      	bhi.n	8000fc4 <modbus_receive+0x194>
			{
				// Number of consecutive addresses to read from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	330a      	adds	r3, #10
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	330b      	adds	r3, #11
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	f7ff ff8f 	bl	8000df8 <make_word>
 8000eda:	4603      	mov	r3, r0
 8000edc:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8000ede:	8bbb      	ldrh	r3, [r7, #28]
 8000ee0:	2b40      	cmp	r3, #64	; 0x40
 8000ee2:	d86b      	bhi.n	8000fbc <modbus_receive+0x18c>
 8000ee4:	8bba      	ldrh	r2, [r7, #28]
 8000ee6:	8bfb      	ldrh	r3, [r7, #30]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2b40      	cmp	r3, #64	; 0x40
 8000eec:	dc66      	bgt.n	8000fbc <modbus_receive+0x18c>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	7852      	ldrb	r2, [r2, #1]
 8000efe:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = (temp2 * 2) + 3;  // No of requested bytes  + slave addr(1B) + function code (1B)) + Bytes till end of message (1B)
 8000f00:	8bbb      	ldrh	r3, [r7, #28]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3305      	adds	r3, #5
 8000f0c:	3203      	adds	r2, #3
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
					tx_buffer[tx_bytes_till_message_end] = (temp2 * 2); // Bytes till end of message
 8000f12:	8bbb      	ldrh	r3, [r7, #28]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3308      	adds	r3, #8
 8000f1a:	0052      	lsls	r2, r2, #1
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]


					if (temp2 > 1)
 8000f20:	8bbb      	ldrh	r3, [r7, #28]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d92b      	bls.n	8000f7e <modbus_receive+0x14e>
					{
						int i = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]

						//Fill transmit buffer with request data
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8000f2a:	8bfb      	ldrh	r3, [r7, #30]
 8000f2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f2e:	e021      	b.n	8000f74 <modbus_receive+0x144>
						{
							get_HB_LB(read_registers[((temp1 - addr_holding_reg_start) + temp3)], &high_byte, &low_byte);
 8000f30:	8bfa      	ldrh	r2, [r7, #30]
 8000f32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f34:	4413      	add	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	4a72      	ldr	r2, [pc, #456]	; (8001108 <modbus_receive+0x2d8>)
 8000f40:	4972      	ldr	r1, [pc, #456]	; (800110c <modbus_receive+0x2dc>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff41 	bl	8000dca <get_HB_LB>
							tx_buffer[tx_start_data_high_byte + i] = high_byte;
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	3309      	adds	r3, #9
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a6e      	ldr	r2, [pc, #440]	; (800110c <modbus_receive+0x2dc>)
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	701a      	strb	r2, [r3, #0]
							tx_buffer[tx_start_data_low_byte + i] = low_byte;
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	330a      	adds	r3, #10
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a69      	ldr	r2, [pc, #420]	; (8001108 <modbus_receive+0x2d8>)
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	701a      	strb	r2, [r3, #0]
							i += 2;
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	623b      	str	r3, [r7, #32]
						for (temp3 = (temp1 - addr_holding_reg_start); temp3 < temp2; temp3++)
 8000f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f70:	3301      	adds	r3, #1
 8000f72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f76:	8bbb      	ldrh	r3, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3d9      	bcc.n	8000f30 <modbus_receive+0x100>
 8000f7c:	e013      	b.n	8000fa6 <modbus_receive+0x176>
						}
					}

					else
					{
						get_HB_LB(read_registers[(temp1 - addr_holding_reg_start)], &high_byte, &low_byte);
 8000f7e:	8bfb      	ldrh	r3, [r7, #30]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	4a5f      	ldr	r2, [pc, #380]	; (8001108 <modbus_receive+0x2d8>)
 8000f8a:	4960      	ldr	r1, [pc, #384]	; (800110c <modbus_receive+0x2dc>)
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff1c 	bl	8000dca <get_HB_LB>
						tx_buffer[1] = high_byte;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a5d      	ldr	r2, [pc, #372]	; (800110c <modbus_receive+0x2dc>)
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	701a      	strb	r2, [r3, #0]
						tx_buffer[2] = low_byte;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	4a59      	ldr	r2, [pc, #356]	; (8001108 <modbus_receive+0x2d8>)
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	701a      	strb	r2, [r3, #0]
					}
					send(1, tx_buffer, ((temp2 * 2) + 9));
 8000fa6:	8bbb      	ldrh	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3309      	adds	r3, #9
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 ff47 	bl	8001e48 <send>
 8000fba:	e006      	b.n	8000fca <modbus_receive+0x19a>
				}

				else
				{
					error_flag = 1;
 8000fbc:	4b54      	ldr	r3, [pc, #336]	; (8001110 <modbus_receive+0x2e0>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e002      	b.n	8000fca <modbus_receive+0x19a>
				}
			}

			else
			{
				error_flag = 1;
 8000fc4:	4b52      	ldr	r3, [pc, #328]	; (8001110 <modbus_receive+0x2e0>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
			}
			printf("You entered 1.\n");
 8000fca:	4852      	ldr	r0, [pc, #328]	; (8001114 <modbus_receive+0x2e4>)
 8000fcc:	f004 f91e 	bl	800520c <puts>
			break;
 8000fd0:	e096      	b.n	8001100 <modbus_receive+0x2d0>
		}

		case FC_write_multiple_registers:
		{
			//Start address to write
			temp1 = make_word(rx_buffer[location_start_high_byte], rx_buffer[location_start_low_byte]);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3309      	adds	r3, #9
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	f7ff ff09 	bl	8000df8 <make_word>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	83fb      	strh	r3, [r7, #30]

			if((temp1 >= addr_holding_reg_start) && (temp1 <= addr_holding_reg_end))
 8000fea:	8bfb      	ldrh	r3, [r7, #30]
 8000fec:	2b3f      	cmp	r3, #63	; 0x3f
 8000fee:	d878      	bhi.n	80010e2 <modbus_receive+0x2b2>
			{
				// Number of consecutive addresses to write from start address
				temp2 = make_word(rx_buffer[location_end_high_byte], rx_buffer[location_end_low_byte]);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	330a      	adds	r3, #10
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	330b      	adds	r3, #11
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4610      	mov	r0, r2
 8001000:	f7ff fefa 	bl	8000df8 <make_word>
 8001004:	4603      	mov	r3, r0
 8001006:	83bb      	strh	r3, [r7, #28]

				if ((temp2 <= no_of_holding_regs) && (temp2 + temp1 - 1) <= addr_holding_reg_end)
 8001008:	8bbb      	ldrh	r3, [r7, #28]
 800100a:	2b40      	cmp	r3, #64	; 0x40
 800100c:	d865      	bhi.n	80010da <modbus_receive+0x2aa>
 800100e:	8bba      	ldrh	r2, [r7, #28]
 8001010:	8bfb      	ldrh	r3, [r7, #30]
 8001012:	4413      	add	r3, r2
 8001014:	2b40      	cmp	r3, #64	; 0x40
 8001016:	dc60      	bgt.n	80010da <modbus_receive+0x2aa>
				{
					tx_buffer[transaction_id_high_byte] = rx_buffer[transaction_id_high_byte];
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	701a      	strb	r2, [r3, #0]
					tx_buffer[transaction_id_low_byte] = rx_buffer[transaction_id_low_byte];
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	3301      	adds	r3, #1
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	7852      	ldrb	r2, [r2, #1]
 8001028:	701a      	strb	r2, [r3, #0]

					tx_buffer[byte_size_low_byte] = 6;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3305      	adds	r3, #5
 800102e:	2206      	movs	r2, #6
 8001030:	701a      	strb	r2, [r3, #0]

					temp5 = (temp1 - addr_holding_reg_start);
 8001032:	8bfb      	ldrh	r3, [r7, #30]
 8001034:	833b      	strh	r3, [r7, #24]
					temp3 = rx_write_fc_first_high_byte;
 8001036:	230d      	movs	r3, #13
 8001038:	84fb      	strh	r3, [r7, #38]	; 0x26

					if(temp2 == 1)
 800103a:	8bbb      	ldrh	r3, [r7, #28]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d111      	bne.n	8001064 <modbus_receive+0x234>
					{
						read_registers[temp1] = make_word(rx_buffer[temp3], rx_buffer[temp3+1]);
 8001040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	7818      	ldrb	r0, [r3, #0]
 8001048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800104a:	3301      	adds	r3, #1
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	7819      	ldrb	r1, [r3, #0]
 8001052:	8bfb      	ldrh	r3, [r7, #30]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	18d4      	adds	r4, r2, r3
 800105a:	f7ff fecd 	bl	8000df8 <make_word>
 800105e:	4603      	mov	r3, r0
 8001060:	8023      	strh	r3, [r4, #0]
 8001062:	e020      	b.n	80010a6 <modbus_receive+0x276>

					}
					else
					{
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8001064:	8b3b      	ldrh	r3, [r7, #24]
 8001066:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001068:	e017      	b.n	800109a <modbus_receive+0x26a>
						{
							read_registers[temp6] = make_word(rx_buffer[temp3], rx_buffer[1 + temp3]);
 800106a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	7818      	ldrb	r0, [r3, #0]
 8001072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001074:	3301      	adds	r3, #1
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	7819      	ldrb	r1, [r3, #0]
 800107e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	18d4      	adds	r4, r2, r3
 8001086:	f7ff feb7 	bl	8000df8 <make_word>
 800108a:	4603      	mov	r3, r0
 800108c:	8023      	strh	r3, [r4, #0]
							temp3 += 2;
 800108e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001090:	3302      	adds	r3, #2
 8001092:	84fb      	strh	r3, [r7, #38]	; 0x26
						for(temp6 = temp5; temp6 < (temp2 + temp5); temp6++)
 8001094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001096:	3301      	adds	r3, #1
 8001098:	84bb      	strh	r3, [r7, #36]	; 0x24
 800109a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800109c:	8bb9      	ldrh	r1, [r7, #28]
 800109e:	8b3b      	ldrh	r3, [r7, #24]
 80010a0:	440b      	add	r3, r1
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbe1      	blt.n	800106a <modbus_receive+0x23a>
						}

					}
					tx_buffer[location_start_high_byte] = rx_buffer[location_start_high_byte];
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3308      	adds	r3, #8
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	7a12      	ldrb	r2, [r2, #8]
 80010ae:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_start_low_byte] = rx_buffer[location_start_low_byte];
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	3309      	adds	r3, #9
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	7a52      	ldrb	r2, [r2, #9]
 80010b8:	701a      	strb	r2, [r3, #0]

					tx_buffer[location_end_high_byte] = rx_buffer[location_end_high_byte];
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	330a      	adds	r3, #10
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	7a92      	ldrb	r2, [r2, #10]
 80010c2:	701a      	strb	r2, [r3, #0]
					tx_buffer[location_end_low_byte] = rx_buffer[location_end_low_byte];
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	330b      	adds	r3, #11
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	7ad2      	ldrb	r2, [r2, #11]
 80010cc:	701a      	strb	r2, [r3, #0]

					send(1, tx_buffer,12);
 80010ce:	220c      	movs	r2, #12
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 feb8 	bl	8001e48 <send>
 80010d8:	e006      	b.n	80010e8 <modbus_receive+0x2b8>
				}
				else
				{
					error_flag = 1;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <modbus_receive+0x2e0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e002      	b.n	80010e8 <modbus_receive+0x2b8>
				}

			}
			else
			{
				error_flag = 1;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <modbus_receive+0x2e0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
			}

			// Code to execute if choice is 3
			printf("You entered 3.\n");
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <modbus_receive+0x2e8>)
 80010ea:	f004 f88f 	bl	800520c <puts>
			break;
 80010ee:	e007      	b.n	8001100 <modbus_receive+0x2d0>
		}

		case FC_write_single_register:
			// Code to execute if choice is 2
			printf("You entered 2.\n");
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <modbus_receive+0x2ec>)
 80010f2:	f004 f88b 	bl	800520c <puts>
			break;
 80010f6:	e003      	b.n	8001100 <modbus_receive+0x2d0>

		default:
			// Code to execute if choice doesn't match any case
			printf("Invalid choice.\n");
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <modbus_receive+0x2f0>)
 80010fa:	f004 f887 	bl	800520c <puts>
			break;
 80010fe:	bf00      	nop
		}
	}
}
 8001100:	bf00      	nop
 8001102:	372c      	adds	r7, #44	; 0x2c
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	20000329 	.word	0x20000329
 800110c:	2000032a 	.word	0x2000032a
 8001110:	20000328 	.word	0x20000328
 8001114:	08006668 	.word	0x08006668
 8001118:	08006678 	.word	0x08006678
 800111c:	08006688 	.word	0x08006688
 8001120:	08006698 	.word	0x08006698

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_MspInit+0x4c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x4c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001162:	2007      	movs	r0, #7
 8001164:	f001 ffd4 	bl	8003110 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0x84>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d12b      	bne.n	80011ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <HAL_SPI_MspInit+0x88>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a10      	ldr	r2, [pc, #64]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_SPI_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011ce:	23e0      	movs	r3, #224	; 0xe0
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011de:	2305      	movs	r3, #5
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <HAL_SPI_MspInit+0x8c>)
 80011ea:	f001 ffc5 	bl	8003178 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_UART_MspInit+0x84>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d12b      	bne.n	800127e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_UART_MspInit+0x88>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_UART_MspInit+0x88>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_UART_MspInit+0x88>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_UART_MspInit+0x88>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_UART_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800126e:	2307      	movs	r3, #7
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_MspInit+0x8c>)
 800127a:	f001 ff7d 	bl	8003178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40011000 	.word	0x40011000
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001298:	e7fe      	b.n	8001298 <NMI_Handler+0x4>

0800129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <HardFault_Handler+0x4>

080012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <MemManage_Handler+0x4>

080012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <BusFault_Handler+0x4>

080012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <UsageFault_Handler+0x4>

080012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f001 fe20 	bl	8002f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
  }

  return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e009      	b.n	8001348 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fcc1 	bl	8000cc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf1      	blt.n	8001334 <_write+0x12>
  }
  return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_close>:

int _close(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	605a      	str	r2, [r3, #4]
  return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_isatty>:

int _isatty(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f004 f858 	bl	80054a8 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20020000 	.word	0x20020000
 8001424:	00000400 	.word	0x00000400
 8001428:	2000032c 	.word	0x2000032c
 800142c:	200004a8 	.word	0x200004a8

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <WIZCHIP_READ+0x94>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <WIZCHIP_READ+0x94>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <WIZCHIP_READ+0x94>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <WIZCHIP_READ+0x24>
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <WIZCHIP_READ+0x94>)
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	d114      	bne.n	80014a2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <WIZCHIP_READ+0x94>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	0c12      	lsrs	r2, r2, #16
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	4610      	mov	r0, r2
 8001484:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <WIZCHIP_READ+0x94>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	0a12      	lsrs	r2, r2, #8
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	4610      	mov	r0, r2
 8001492:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <WIZCHIP_READ+0x94>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	4610      	mov	r0, r2
 800149e:	4798      	blx	r3
 80014a0:	e011      	b.n	80014c6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <WIZCHIP_READ+0x94>)
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f107 020c 	add.w	r2, r7, #12
 80014c0:	2103      	movs	r1, #3
 80014c2:	4610      	mov	r0, r2
 80014c4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <WIZCHIP_READ+0x94>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4798      	blx	r3
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <WIZCHIP_READ+0x94>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <WIZCHIP_READ+0x94>)
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	4798      	blx	r3
   return ret;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000a0 	.word	0x200000a0

080014ec <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <WIZCHIP_WRITE+0x98>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <WIZCHIP_WRITE+0x98>)
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d119      	bne.n	8001548 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	0c12      	lsrs	r2, r2, #16
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	4610      	mov	r0, r2
 8001520:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	0a12      	lsrs	r2, r2, #8
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	4610      	mov	r0, r2
 800152e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	4610      	mov	r0, r2
 800153a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <WIZCHIP_WRITE+0x98>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	4610      	mov	r0, r2
 8001544:	4798      	blx	r3
 8001546:	e013      	b.n	8001570 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	b2db      	uxtb	r3, r3
 800154e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b2db      	uxtb	r3, r3
 8001556:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f107 020c 	add.w	r2, r7, #12
 800156a:	2104      	movs	r1, #4
 800156c:	4610      	mov	r0, r2
 800156e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001576:	4b03      	ldr	r3, [pc, #12]	; (8001584 <WIZCHIP_WRITE+0x98>)
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	4798      	blx	r3
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200000a0 	.word	0x200000a0

08001588 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	4613      	mov	r3, r2
 8001594:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <WIZCHIP_READ_BUF+0x2a>
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d126      	bne.n	8001600 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	0c12      	lsrs	r2, r2, #16
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	4610      	mov	r0, r2
 80015be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	0a12      	lsrs	r2, r2, #8
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	4610      	mov	r0, r2
 80015cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	4610      	mov	r0, r2
 80015d8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80015da:	2300      	movs	r3, #0
 80015dc:	82fb      	strh	r3, [r7, #22]
 80015de:	e00a      	b.n	80015f6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	8afa      	ldrh	r2, [r7, #22]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	188c      	adds	r4, r1, r2
 80015ea:	4798      	blx	r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80015f0:	8afb      	ldrh	r3, [r7, #22]
 80015f2:	3301      	adds	r3, #1
 80015f4:	82fb      	strh	r3, [r7, #22]
 80015f6:	8afa      	ldrh	r2, [r7, #22]
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d3f0      	bcc.n	80015e0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80015fe:	e017      	b.n	8001630 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	b2db      	uxtb	r3, r3
 8001606:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b2db      	uxtb	r3, r3
 800160e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	f107 0210 	add.w	r2, r7, #16
 800161e:	2103      	movs	r1, #3
 8001620:	4610      	mov	r0, r2
 8001622:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	88fa      	ldrh	r2, [r7, #6]
 800162a:	4611      	mov	r1, r2
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001636:	4b03      	ldr	r3, [pc, #12]	; (8001644 <WIZCHIP_READ_BUF+0xbc>)
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	4798      	blx	r3
}
 800163c:	bf00      	nop
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	200000a0 	.word	0x200000a0

08001648 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	4613      	mov	r3, r2
 8001654:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	2b00      	cmp	r3, #0
 8001670:	d126      	bne.n	80016c0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	0c12      	lsrs	r2, r2, #16
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	4610      	mov	r0, r2
 800167e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	0a12      	lsrs	r2, r2, #8
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	4610      	mov	r0, r2
 800168c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	4610      	mov	r0, r2
 8001698:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	82fb      	strh	r3, [r7, #22]
 800169e:	e00a      	b.n	80016b6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	8afa      	ldrh	r2, [r7, #22]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	440a      	add	r2, r1
 80016aa:	7812      	ldrb	r2, [r2, #0]
 80016ac:	4610      	mov	r0, r2
 80016ae:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	3301      	adds	r3, #1
 80016b4:	82fb      	strh	r3, [r7, #22]
 80016b6:	8afa      	ldrh	r2, [r7, #22]
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3f0      	bcc.n	80016a0 <WIZCHIP_WRITE_BUF+0x58>
 80016be:	e017      	b.n	80016f0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	0a1b      	lsrs	r3, r3, #8
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f107 0210 	add.w	r2, r7, #16
 80016de:	2103      	movs	r1, #3
 80016e0:	4610      	mov	r0, r2
 80016e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	4611      	mov	r1, r2
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80016f6:	4b03      	ldr	r3, [pc, #12]	; (8001704 <WIZCHIP_WRITE_BUF+0xbc>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	4798      	blx	r3
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200000a0 	.word	0x200000a0

08001708 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001712:	2300      	movs	r3, #0
 8001714:	81fb      	strh	r3, [r7, #14]
 8001716:	2300      	movs	r3, #0
 8001718:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	3301      	adds	r3, #1
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fe94 	bl	8001454 <WIZCHIP_READ>
 800172c:	4603      	mov	r3, r0
 800172e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001730:	89bb      	ldrh	r3, [r7, #12]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b29c      	uxth	r4, r3
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	3301      	adds	r3, #1
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fe86 	bl	8001454 <WIZCHIP_READ>
 8001748:	4603      	mov	r3, r0
 800174a:	b29b      	uxth	r3, r3
 800174c:	4423      	add	r3, r4
 800174e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001750:	89bb      	ldrh	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01a      	beq.n	800178c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	3301      	adds	r3, #1
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe76 	bl	8001454 <WIZCHIP_READ>
 8001768:	4603      	mov	r3, r0
 800176a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b29c      	uxth	r4, r3
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	3301      	adds	r3, #1
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe68 	bl	8001454 <WIZCHIP_READ>
 8001784:	4603      	mov	r3, r0
 8001786:	b29b      	uxth	r3, r3
 8001788:	4423      	add	r3, r4
 800178a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800178c:	89fa      	ldrh	r2, [r7, #14]
 800178e:	89bb      	ldrh	r3, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d1c2      	bne.n	800171a <getSn_TX_FSR+0x12>
   return val;
 8001794:	89fb      	ldrh	r3, [r7, #14]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800179e:	b590      	push	{r4, r7, lr}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]
 80017ac:	2300      	movs	r3, #0
 80017ae:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	3301      	adds	r3, #1
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fe49 	bl	8001454 <WIZCHIP_READ>
 80017c2:	4603      	mov	r3, r0
 80017c4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29c      	uxth	r4, r3
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	3301      	adds	r3, #1
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe3b 	bl	8001454 <WIZCHIP_READ>
 80017de:	4603      	mov	r3, r0
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4423      	add	r3, r4
 80017e4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80017e6:	89bb      	ldrh	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01a      	beq.n	8001822 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	3301      	adds	r3, #1
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe2b 	bl	8001454 <WIZCHIP_READ>
 80017fe:	4603      	mov	r3, r0
 8001800:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b29c      	uxth	r4, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3301      	adds	r3, #1
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fe1d 	bl	8001454 <WIZCHIP_READ>
 800181a:	4603      	mov	r3, r0
 800181c:	b29b      	uxth	r3, r3
 800181e:	4423      	add	r3, r4
 8001820:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001822:	89fa      	ldrh	r2, [r7, #14]
 8001824:	89bb      	ldrh	r3, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	d1c2      	bne.n	80017b0 <getSn_RX_RSR+0x12>
   return val;
 800182a:	89fb      	ldrh	r3, [r7, #14]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}

08001834 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	4613      	mov	r3, r2
 8001842:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d048      	beq.n	80018e4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	3301      	adds	r3, #1
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fdf8 	bl	8001454 <WIZCHIP_READ>
 8001864:	4603      	mov	r3, r0
 8001866:	b29b      	uxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29c      	uxth	r4, r3
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	3301      	adds	r3, #1
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fdeb 	bl	8001454 <WIZCHIP_READ>
 800187e:	4603      	mov	r3, r0
 8001880:	b29b      	uxth	r3, r3
 8001882:	4423      	add	r3, r4
 8001884:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	3202      	adds	r2, #2
 8001890:	00d2      	lsls	r2, r2, #3
 8001892:	4413      	add	r3, r2
 8001894:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	461a      	mov	r2, r3
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	68b8      	ldr	r0, [r7, #8]
 800189e:	f7ff fed3 	bl	8001648 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80018a2:	89fa      	ldrh	r2, [r7, #14]
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	3301      	adds	r3, #1
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80018b6:	461a      	mov	r2, r3
 80018b8:	89fb      	ldrh	r3, [r7, #14]
 80018ba:	0a1b      	lsrs	r3, r3, #8
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff fe12 	bl	80014ec <WIZCHIP_WRITE>
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3301      	adds	r3, #1
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80018d4:	461a      	mov	r2, r3
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f7ff fe05 	bl	80014ec <WIZCHIP_WRITE>
 80018e2:	e000      	b.n	80018e6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80018e4:	bf00      	nop
}
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}

080018ec <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	4613      	mov	r3, r2
 80018fa:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d048      	beq.n	800199c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	3301      	adds	r3, #1
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fd9c 	bl	8001454 <WIZCHIP_READ>
 800191c:	4603      	mov	r3, r0
 800191e:	b29b      	uxth	r3, r3
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b29c      	uxth	r4, r3
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	3301      	adds	r3, #1
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd8f 	bl	8001454 <WIZCHIP_READ>
 8001936:	4603      	mov	r3, r0
 8001938:	b29b      	uxth	r3, r3
 800193a:	4423      	add	r3, r4
 800193c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	3203      	adds	r2, #3
 8001948:	00d2      	lsls	r2, r2, #3
 800194a:	4413      	add	r3, r2
 800194c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	461a      	mov	r2, r3
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	68b8      	ldr	r0, [r7, #8]
 8001956:	f7ff fe17 	bl	8001588 <WIZCHIP_READ_BUF>
   ptr += len;
 800195a:	89fa      	ldrh	r2, [r7, #14]
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	3301      	adds	r3, #1
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800196e:	461a      	mov	r2, r3
 8001970:	89fb      	ldrh	r3, [r7, #14]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fdb6 	bl	80014ec <WIZCHIP_WRITE>
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3301      	adds	r3, #1
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800198c:	461a      	mov	r2, r3
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f7ff fda9 	bl	80014ec <WIZCHIP_WRITE>
 800199a:	e000      	b.n	800199e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800199c:	bf00      	nop
}
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd90      	pop	{r4, r7, pc}

080019a4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4604      	mov	r4, r0
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	4603      	mov	r3, r0
 80019b8:	71bb      	strb	r3, [r7, #6]
 80019ba:	460b      	mov	r3, r1
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d902      	bls.n	80019ce <socket+0x2a>
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019cc:	e0f0      	b.n	8001bb0 <socket+0x20c>
	switch(protocol)
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d005      	beq.n	80019e0 <socket+0x3c>
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	dd11      	ble.n	80019fc <socket+0x58>
 80019d8:	3b02      	subs	r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d80e      	bhi.n	80019fc <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80019de:	e011      	b.n	8001a04 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2204      	movs	r2, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80019ec:	f7ff fdcc 	bl	8001588 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <socket+0x5e>
 80019f6:	f06f 0302 	mvn.w	r3, #2
 80019fa:	e0d9      	b.n	8001bb0 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80019fc:	f06f 0304 	mvn.w	r3, #4
 8001a00:	e0d6      	b.n	8001bb0 <socket+0x20c>
	    break;
 8001a02:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <socket+0x70>
 8001a0e:	f06f 0305 	mvn.w	r3, #5
 8001a12:	e0cd      	b.n	8001bb0 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d028      	beq.n	8001a6c <socket+0xc8>
	{
   	switch(protocol)
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d002      	beq.n	8001a26 <socket+0x82>
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d008      	beq.n	8001a36 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001a24:	e022      	b.n	8001a6c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d11a      	bne.n	8001a66 <socket+0xc2>
 8001a30:	f06f 0305 	mvn.w	r3, #5
 8001a34:	e0bc      	b.n	8001bb0 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	db02      	blt.n	8001a4e <socket+0xaa>
 8001a48:	f06f 0305 	mvn.w	r3, #5
 8001a4c:	e0b0      	b.n	8001bb0 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db04      	blt.n	8001a6a <socket+0xc6>
 8001a60:	f06f 0305 	mvn.w	r3, #5
 8001a64:	e0a4      	b.n	8001bb0 <socket+0x20c>
   	      break;
 8001a66:	bf00      	nop
 8001a68:	e000      	b.n	8001a6c <socket+0xc8>
   	      break;
 8001a6a:	bf00      	nop
   	}
   }
	close(sn);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f8ac 	bl	8001bcc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	3301      	adds	r3, #1
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a82:	f023 030f 	bic.w	r3, r3, #15
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff fd2a 	bl	80014ec <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d110      	bne.n	8001ac0 <socket+0x11c>
	{
	   port = sock_any_port++;
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <socket+0x214>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	b291      	uxth	r1, r2
 8001aa6:	4a44      	ldr	r2, [pc, #272]	; (8001bb8 <socket+0x214>)
 8001aa8:	8011      	strh	r1, [r2, #0]
 8001aaa:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001aac:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <socket+0x214>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d103      	bne.n	8001ac0 <socket+0x11c>
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <socket+0x214>)
 8001aba:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001abe:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001acc:	461a      	mov	r2, r3
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff fd07 	bl	80014ec <WIZCHIP_WRITE>
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	461a      	mov	r2, r3
 8001aec:	88bb      	ldrh	r3, [r7, #4]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f7ff fcfa 	bl	80014ec <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3301      	adds	r3, #1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b04:	2101      	movs	r1, #1
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fcf0 	bl	80014ec <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001b0c:	bf00      	nop
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	3301      	adds	r3, #1
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc9a 	bl	8001454 <WIZCHIP_READ>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f3      	bne.n	8001b0e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <socket+0x218>)
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <socket+0x218>)
 8001b42:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 0201 	and.w	r2, r3, #1
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <socket+0x218>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <socket+0x218>)
 8001b60:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2201      	movs	r2, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <socket+0x21c>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	4013      	ands	r3, r2
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <socket+0x21c>)
 8001b7e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <socket+0x220>)
 8001b84:	2100      	movs	r1, #0
 8001b86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <socket+0x224>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001b92:	bf00      	nop
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	3301      	adds	r3, #1
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fc57 	bl	8001454 <WIZCHIP_READ>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f3      	beq.n	8001b94 <socket+0x1f0>
   return (int8_t)sn;
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	2000009c 	.word	0x2000009c
 8001bbc:	20000330 	.word	0x20000330
 8001bc0:	20000332 	.word	0x20000332
 8001bc4:	20000334 	.word	0x20000334
 8001bc8:	20000344 	.word	0x20000344

08001bcc <close>:

int8_t close(uint8_t sn)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d902      	bls.n	8001be2 <close+0x16>
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001be0:	e055      	b.n	8001c8e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	3301      	adds	r3, #1
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc7b 	bl	80014ec <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001bf6:	bf00      	nop
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fc25 	bl	8001454 <WIZCHIP_READ>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f3      	bne.n	8001bf8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3301      	adds	r3, #1
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c1c:	211f      	movs	r1, #31
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fc64 	bl	80014ec <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2201      	movs	r2, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <close+0xcc>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <close+0xcc>)
 8001c40:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2201      	movs	r2, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <close+0xd0>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4013      	ands	r3, r2
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <close+0xd0>)
 8001c5e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <close+0xd4>)
 8001c64:	2100      	movs	r1, #0
 8001c66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <close+0xd8>)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001c72:	bf00      	nop
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3301      	adds	r3, #1
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fbe7 	bl	8001454 <WIZCHIP_READ>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f3      	bne.n	8001c74 <close+0xa8>
	return SOCK_OK;
 8001c8c:	2301      	movs	r3, #1
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000330 	.word	0x20000330
 8001c9c:	20000332 	.word	0x20000332
 8001ca0:	20000334 	.word	0x20000334
 8001ca4:	20000344 	.word	0x20000344

08001ca8 <listen>:

int8_t listen(uint8_t sn)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d902      	bls.n	8001cbe <listen+0x16>
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbc:	e049      	b.n	8001d52 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fbc4 	bl	8001454 <WIZCHIP_READ>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d002      	beq.n	8001cdc <listen+0x34>
 8001cd6:	f06f 0304 	mvn.w	r3, #4
 8001cda:	e03a      	b.n	8001d52 <listen+0xaa>
	CHECK_SOCKINIT();
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fbb3 	bl	8001454 <WIZCHIP_READ>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b13      	cmp	r3, #19
 8001cf2:	d002      	beq.n	8001cfa <listen+0x52>
 8001cf4:	f06f 0302 	mvn.w	r3, #2
 8001cf8:	e02b      	b.n	8001d52 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3301      	adds	r3, #1
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d06:	2102      	movs	r1, #2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fbef 	bl	80014ec <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8001d0e:	bf00      	nop
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	3301      	adds	r3, #1
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fb99 	bl	8001454 <WIZCHIP_READ>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f3      	bne.n	8001d10 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001d28:	e006      	b.n	8001d38 <listen+0x90>
   {
         close(sn);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff4d 	bl	8001bcc <close>
         return SOCKERR_SOCKCLOSED;
 8001d32:	f06f 0303 	mvn.w	r3, #3
 8001d36:	e00c      	b.n	8001d52 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fb85 	bl	8001454 <WIZCHIP_READ>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b14      	cmp	r3, #20
 8001d4e:	d1ec      	bne.n	8001d2a <listen+0x82>
   }
   return SOCK_OK;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d902      	bls.n	8001d72 <disconnect+0x16>
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d70:	e062      	b.n	8001e38 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	3301      	adds	r3, #1
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb6a 	bl	8001454 <WIZCHIP_READ>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d002      	beq.n	8001d90 <disconnect+0x34>
 8001d8a:	f06f 0304 	mvn.w	r3, #4
 8001d8e:	e053      	b.n	8001e38 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	3301      	adds	r3, #1
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d9c:	2108      	movs	r1, #8
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fba4 	bl	80014ec <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001da4:	bf00      	nop
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3301      	adds	r3, #1
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb4e 	bl	8001454 <WIZCHIP_READ>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f3      	bne.n	8001da6 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <disconnect+0xe4>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <disconnect+0xe4>)
 8001dda:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <disconnect+0xe8>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	fa42 f303 	asr.w	r3, r2, r3
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d016      	beq.n	8001e1e <disconnect+0xc2>
 8001df0:	2300      	movs	r3, #0
 8001df2:	e021      	b.n	8001e38 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3301      	adds	r3, #1
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fb27 	bl	8001454 <WIZCHIP_READ>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <disconnect+0xc2>
	   {
	      close(sn);
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff feda 	bl	8001bcc <close>
	      return SOCKERR_TIMEOUT;
 8001e18:	f06f 030c 	mvn.w	r3, #12
 8001e1c:	e00c      	b.n	8001e38 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	3301      	adds	r3, #1
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fb12 	bl	8001454 <WIZCHIP_READ>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1de      	bne.n	8001df4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000332 	.word	0x20000332
 8001e44:	20000330 	.word	0x20000330

08001e48 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	4613      	mov	r3, r2
 8001e56:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d902      	bls.n	8001e6c <send+0x24>
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e6a:	e0de      	b.n	800202a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	3301      	adds	r3, #1
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff faed 	bl	8001454 <WIZCHIP_READ>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d002      	beq.n	8001e8a <send+0x42>
 8001e84:	f06f 0304 	mvn.w	r3, #4
 8001e88:	e0cf      	b.n	800202a <send+0x1e2>
   CHECK_SOCKDATA();
 8001e8a:	88bb      	ldrh	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <send+0x4e>
 8001e90:	f06f 030d 	mvn.w	r3, #13
 8001e94:	e0c9      	b.n	800202a <send+0x1e2>
   tmp = getSn_SR(sn);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fad6 	bl	8001454 <WIZCHIP_READ>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b17      	cmp	r3, #23
 8001eb0:	d005      	beq.n	8001ebe <send+0x76>
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b1c      	cmp	r3, #28
 8001eb6:	d002      	beq.n	8001ebe <send+0x76>
 8001eb8:	f06f 0306 	mvn.w	r3, #6
 8001ebc:	e0b5      	b.n	800202a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <send+0x1ec>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	fa42 f303 	asr.w	r3, r2, r3
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d039      	beq.n	8001f46 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fab8 	bl	8001454 <WIZCHIP_READ>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	3301      	adds	r3, #1
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f02:	2110      	movs	r1, #16
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff faf1 	bl	80014ec <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	4b46      	ldr	r3, [pc, #280]	; (8002034 <send+0x1ec>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <send+0x1ec>)
 8001f26:	801a      	strh	r2, [r3, #0]
 8001f28:	e00d      	b.n	8001f46 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <send+0xfa>
      {
         close(sn);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fe48 	bl	8001bcc <close>
         return SOCKERR_TIMEOUT;
 8001f3c:	f06f 030c 	mvn.w	r3, #12
 8001f40:	e073      	b.n	800202a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e071      	b.n	800202a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa7e 	bl	8001454 <WIZCHIP_READ>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001f60:	88ba      	ldrh	r2, [r7, #4]
 8001f62:	89bb      	ldrh	r3, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d901      	bls.n	8001f6c <send+0x124>
 8001f68:	89bb      	ldrh	r3, [r7, #12]
 8001f6a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fbca 	bl	8001708 <getSn_TX_FSR>
 8001f74:	4603      	mov	r3, r0
 8001f76:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fa65 	bl	8001454 <WIZCHIP_READ>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b17      	cmp	r3, #23
 8001f92:	d009      	beq.n	8001fa8 <send+0x160>
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	2b1c      	cmp	r3, #28
 8001f98:	d006      	beq.n	8001fa8 <send+0x160>
      {
         close(sn);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fe15 	bl	8001bcc <close>
         return SOCKERR_SOCKSTATUS;
 8001fa2:	f06f 0306 	mvn.w	r3, #6
 8001fa6:	e040      	b.n	800202a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001fa8:	4b23      	ldr	r3, [pc, #140]	; (8002038 <send+0x1f0>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	fa42 f303 	asr.w	r3, r2, r3
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <send+0x180>
 8001fbc:	88ba      	ldrh	r2, [r7, #4]
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d901      	bls.n	8001fc8 <send+0x180>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e030      	b.n	800202a <send+0x1e2>
      if(len <= freesize) break;
 8001fc8:	88ba      	ldrh	r2, [r7, #4]
 8001fca:	89bb      	ldrh	r3, [r7, #12]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d900      	bls.n	8001fd2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001fd0:	e7cc      	b.n	8001f6c <send+0x124>
      if(len <= freesize) break;
 8001fd2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001fd4:	88ba      	ldrh	r2, [r7, #4]
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fc2a 	bl	8001834 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fec:	2120      	movs	r1, #32
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fa7c 	bl	80014ec <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001ff4:	bf00      	nop
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fa26 	bl	8001454 <WIZCHIP_READ>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f3      	bne.n	8001ff6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2201      	movs	r2, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <send+0x1ec>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21b      	sxth	r3, r3
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <send+0x1ec>)
 8002026:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002028:	88bb      	ldrh	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000332 	.word	0x20000332
 8002038:	20000330 	.word	0x20000330

0800203c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	2b08      	cmp	r3, #8
 8002058:	d902      	bls.n	8002060 <recv+0x24>
 800205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205e:	e09c      	b.n	800219a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	3301      	adds	r3, #1
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f9f3 	bl	8001454 <WIZCHIP_READ>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	2b01      	cmp	r3, #1
 8002076:	d002      	beq.n	800207e <recv+0x42>
 8002078:	f06f 0304 	mvn.w	r3, #4
 800207c:	e08d      	b.n	800219a <recv+0x15e>
   CHECK_SOCKDATA();
 800207e:	88bb      	ldrh	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <recv+0x4e>
 8002084:	f06f 030d 	mvn.w	r3, #13
 8002088:	e087      	b.n	800219a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3301      	adds	r3, #1
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f9dc 	bl	8001454 <WIZCHIP_READ>
 800209c:	4603      	mov	r3, r0
 800209e:	b29b      	uxth	r3, r3
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80020a4:	89ba      	ldrh	r2, [r7, #12]
 80020a6:	88bb      	ldrh	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d201      	bcs.n	80020b0 <recv+0x74>
 80020ac:	89bb      	ldrh	r3, [r7, #12]
 80020ae:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb73 	bl	800179e <getSn_RX_RSR>
 80020b8:	4603      	mov	r3, r0
 80020ba:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3301      	adds	r3, #1
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f9c3 	bl	8001454 <WIZCHIP_READ>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b17      	cmp	r3, #23
 80020d6:	d026      	beq.n	8002126 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b1c      	cmp	r3, #28
 80020dc:	d11c      	bne.n	8002118 <recv+0xdc>
            {
               if(recvsize != 0) break;
 80020de:	89bb      	ldrh	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d133      	bne.n	800214c <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fb0e 	bl	8001708 <getSn_TX_FSR>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461c      	mov	r4, r3
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3301      	adds	r3, #1
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f9a9 	bl	8001454 <WIZCHIP_READ>
 8002102:	4603      	mov	r3, r0
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	429c      	cmp	r4, r3
 8002108:	d10d      	bne.n	8002126 <recv+0xea>
               {
                  close(sn);
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fd5d 	bl	8001bcc <close>
                  return SOCKERR_SOCKSTATUS;
 8002112:	f06f 0306 	mvn.w	r3, #6
 8002116:	e040      	b.n	800219a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fd56 	bl	8001bcc <close>
               return SOCKERR_SOCKSTATUS;
 8002120:	f06f 0306 	mvn.w	r3, #6
 8002124:	e039      	b.n	800219a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <recv+0x168>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	fa42 f303 	asr.w	r3, r2, r3
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <recv+0x108>
 800213a:	89bb      	ldrh	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <recv+0x108>
 8002140:	2300      	movs	r3, #0
 8002142:	e02a      	b.n	800219a <recv+0x15e>
         if(recvsize != 0) break;
 8002144:	89bb      	ldrh	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800214a:	e7b1      	b.n	80020b0 <recv+0x74>
               if(recvsize != 0) break;
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <recv+0x116>
         if(recvsize != 0) break;
 8002150:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8002152:	89ba      	ldrh	r2, [r7, #12]
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	d201      	bcs.n	800215e <recv+0x122>
 800215a:	89bb      	ldrh	r3, [r7, #12]
 800215c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800215e:	88ba      	ldrh	r2, [r7, #4]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fbc1 	bl	80018ec <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3301      	adds	r3, #1
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002176:	2140      	movs	r1, #64	; 0x40
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff f9b7 	bl	80014ec <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800217e:	bf00      	nop
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3301      	adds	r3, #1
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff f961 	bl	8001454 <WIZCHIP_READ>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f3      	bne.n	8002180 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002198:	88bb      	ldrh	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000330 	.word	0x20000330

080021a8 <ctlsocket>:
   return (int32_t)pack_len;
}


int8_t  ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	603a      	str	r2, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	460b      	mov	r3, r1
 80021b6:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d902      	bls.n	80021c8 <ctlsocket+0x20>
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c6:	e0c2      	b.n	800234e <ctlsocket+0x1a6>
   switch(cstype)
 80021c8:	79bb      	ldrb	r3, [r7, #6]
 80021ca:	2b07      	cmp	r3, #7
 80021cc:	f200 80bb 	bhi.w	8002346 <ctlsocket+0x19e>
 80021d0:	a201      	add	r2, pc, #4	; (adr r2, 80021d8 <ctlsocket+0x30>)
 80021d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d6:	bf00      	nop
 80021d8:	080021f9 	.word	0x080021f9
 80021dc:	0800224d 	.word	0x0800224d
 80021e0:	08002267 	.word	0x08002267
 80021e4:	08002287 	.word	0x08002287
 80021e8:	080022a7 	.word	0x080022a7
 80021ec:	080022d7 	.word	0x080022d7
 80021f0:	080022f7 	.word	0x080022f7
 80021f4:	08002327 	.word	0x08002327
   {
      case CS_SET_IOMODE:
         tmp = *((uint8_t*)arg);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	73fb      	strb	r3, [r7, #15]
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d10d      	bne.n	8002220 <ctlsocket+0x78>
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2201      	movs	r2, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	b21a      	sxth	r2, r3
 800220e:	4b52      	ldr	r3, [pc, #328]	; (8002358 <ctlsocket+0x1b0>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b4f      	ldr	r3, [pc, #316]	; (8002358 <ctlsocket+0x1b0>)
 800221c:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 800221e:	e095      	b.n	800234c <ctlsocket+0x1a4>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <ctlsocket+0x9e>
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2201      	movs	r2, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	b21b      	sxth	r3, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	b21a      	sxth	r2, r3
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <ctlsocket+0x1b0>)
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	b21b      	sxth	r3, r3
 800223a:	4013      	ands	r3, r2
 800223c:	b21b      	sxth	r3, r3
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b45      	ldr	r3, [pc, #276]	; (8002358 <ctlsocket+0x1b0>)
 8002242:	801a      	strh	r2, [r3, #0]
         break;
 8002244:	e082      	b.n	800234c <ctlsocket+0x1a4>
         else return SOCKERR_ARG;
 8002246:	f06f 0309 	mvn.w	r3, #9
 800224a:	e080      	b.n	800234e <ctlsocket+0x1a6>
      case CS_GET_IOMODE:   
         //M20140501 : implict type casting -> explict type casting
         //*((uint8_t*)arg) = (sock_io_mode >> sn) & 0x0001;
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 800224c:	4b42      	ldr	r3, [pc, #264]	; (8002358 <ctlsocket+0x1b0>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	fa42 f303 	asr.w	r3, r2, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	b2da      	uxtb	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	701a      	strb	r2, [r3, #0]
         //
         break;
 8002264:	e072      	b.n	800234c <ctlsocket+0x1a4>
      case CS_GET_MAXTXBUF:
         *((uint16_t*)arg) = getSn_TxMAX(sn);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	3301      	adds	r3, #1
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f8ee 	bl	8001454 <WIZCHIP_READ>
 8002278:	4603      	mov	r3, r0
 800227a:	b29b      	uxth	r3, r3
 800227c:	029b      	lsls	r3, r3, #10
 800227e:	b29a      	uxth	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	801a      	strh	r2, [r3, #0]
         break;
 8002284:	e062      	b.n	800234c <ctlsocket+0x1a4>
      case CS_GET_MAXRXBUF:    
         *((uint16_t*)arg) = getSn_RxMAX(sn);
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3301      	adds	r3, #1
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f8de 	bl	8001454 <WIZCHIP_READ>
 8002298:	4603      	mov	r3, r0
 800229a:	b29b      	uxth	r3, r3
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	b29a      	uxth	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	801a      	strh	r2, [r3, #0]
         break;
 80022a4:	e052      	b.n	800234c <ctlsocket+0x1a4>
      case CS_CLR_INTERRUPT:
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b1f      	cmp	r3, #31
 80022ac:	d902      	bls.n	80022b4 <ctlsocket+0x10c>
 80022ae:	f06f 0309 	mvn.w	r3, #9
 80022b2:	e04c      	b.n	800234e <ctlsocket+0x1a6>
         setSn_IR(sn,*(uint8_t*)arg);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3301      	adds	r3, #1
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022c0:	461a      	mov	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f7ff f90c 	bl	80014ec <WIZCHIP_WRITE>
         break;
 80022d4:	e03a      	b.n	800234c <ctlsocket+0x1a4>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	3301      	adds	r3, #1
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f8b6 	bl	8001454 <WIZCHIP_READ>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
         break;
 80022f4:	e02a      	b.n	800234c <ctlsocket+0x1a4>
   #if _WIZCHIP_ != 5100
      case CS_SET_INTMASK:  
         if( (*(uint8_t*)arg) > SIK_ALL) return SOCKERR_ARG;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b1f      	cmp	r3, #31
 80022fc:	d902      	bls.n	8002304 <ctlsocket+0x15c>
 80022fe:	f06f 0309 	mvn.w	r3, #9
 8002302:	e024      	b.n	800234e <ctlsocket+0x1a6>
         setSn_IMR(sn,*(uint8_t*)arg);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	3301      	adds	r3, #1
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002310:	461a      	mov	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f7ff f8e4 	bl	80014ec <WIZCHIP_WRITE>
         break;
 8002324:	e012      	b.n	800234c <ctlsocket+0x1a4>
      case CS_GET_INTMASK:   
         *((uint8_t*)arg) = getSn_IMR(sn);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	3301      	adds	r3, #1
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f88e 	bl	8001454 <WIZCHIP_READ>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	b2da      	uxtb	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	701a      	strb	r2, [r3, #0]
         break;
 8002344:	e002      	b.n	800234c <ctlsocket+0x1a4>
   #endif
      default:
         return SOCKERR_ARG;
 8002346:	f06f 0309 	mvn.w	r3, #9
 800234a:	e000      	b.n	800234e <ctlsocket+0x1a6>
   }
   return SOCK_OK;
 800234c:	2301      	movs	r3, #1
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000330 	.word	0x20000330

0800235c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	70fb      	strb	r3, [r7, #3]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	2300      	movs	r3, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <reg_wizchip_cs_cbfunc+0x16>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <reg_wizchip_cs_cbfunc+0x40>)
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <reg_wizchip_cs_cbfunc+0x44>)
 800240e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <reg_wizchip_cs_cbfunc+0x40>)
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <reg_wizchip_cs_cbfunc+0x48>)
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	e006      	b.n	8002426 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <reg_wizchip_cs_cbfunc+0x40>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <reg_wizchip_cs_cbfunc+0x40>)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6193      	str	r3, [r2, #24]
   }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200000a0 	.word	0x200000a0
 8002438:	08002379 	.word	0x08002379
 800243c:	08002387 	.word	0x08002387

08002440 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800244a:	bf00      	nop
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <reg_wizchip_spi_cbfunc+0x4c>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f9      	beq.n	800244c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <reg_wizchip_spi_cbfunc+0x24>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d106      	bne.n	8002472 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <reg_wizchip_spi_cbfunc+0x4c>)
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <reg_wizchip_spi_cbfunc+0x50>)
 8002468:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <reg_wizchip_spi_cbfunc+0x4c>)
 800246c:	4a09      	ldr	r2, [pc, #36]	; (8002494 <reg_wizchip_spi_cbfunc+0x54>)
 800246e:	621a      	str	r2, [r3, #32]
 8002470:	e006      	b.n	8002480 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002472:	4a06      	ldr	r2, [pc, #24]	; (800248c <reg_wizchip_spi_cbfunc+0x4c>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <reg_wizchip_spi_cbfunc+0x4c>)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6213      	str	r3, [r2, #32]
   }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	200000a0 	.word	0x200000a0
 8002490:	080023cd 	.word	0x080023cd
 8002494:	080023dd 	.word	0x080023dd

08002498 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b0f      	cmp	r3, #15
 80024b4:	f200 80c7 	bhi.w	8002646 <ctlwizchip+0x1ae>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <ctlwizchip+0x28>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	08002501 	.word	0x08002501
 80024c4:	08002507 	.word	0x08002507
 80024c8:	08002533 	.word	0x08002533
 80024cc:	08002527 	.word	0x08002527
 80024d0:	08002541 	.word	0x08002541
 80024d4:	0800254d 	.word	0x0800254d
 80024d8:	0800255b 	.word	0x0800255b
 80024dc:	08002581 	.word	0x08002581
 80024e0:	080025a7 	.word	0x080025a7
 80024e4:	080025eb 	.word	0x080025eb
 80024e8:	080025f1 	.word	0x080025f1
 80024ec:	080025f9 	.word	0x080025f9
 80024f0:	0800264d 	.word	0x0800264d
 80024f4:	08002601 	.word	0x08002601
 80024f8:	0800260f 	.word	0x0800260f
 80024fc:	0800262b 	.word	0x0800262b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002500:	f000 f8ea 	bl	80026d8 <wizchip_sw_reset>
         break;
 8002504:	e0a3      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d004      	beq.n	8002516 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3308      	adds	r3, #8
 8002514:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f927 	bl	8002770 <wizchip_init>
 8002522:	4603      	mov	r3, r0
 8002524:	e094      	b.n	8002650 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f9ac 	bl	8002888 <wizchip_clrinterrupt>
         break;
 8002530:	e08d      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002532:	f000 f9dd 	bl	80028f0 <wizchip_getinterrupt>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	801a      	strh	r2, [r3, #0]
         break;
 800253e:	e086      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f9f8 	bl	800293a <wizchip_setinterruptmask>
         break;         
 800254a:	e080      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800254c:	f000 fa10 	bl	8002970 <wizchip_getinterruptmask>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	801a      	strh	r2, [r3, #0]
         break;
 8002558:	e079      	b.n	800264e <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29b      	uxth	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800256a:	f7fe ffbf 	bl	80014ec <WIZCHIP_WRITE>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800257a:	f7fe ffb7 	bl	80014ec <WIZCHIP_WRITE>
         break;
 800257e:	e066      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002580:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002584:	f7fe ff66 	bl	8001454 <WIZCHIP_READ>
 8002588:	4603      	mov	r3, r0
 800258a:	b29b      	uxth	r3, r3
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	b29c      	uxth	r4, r3
 8002590:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002594:	f7fe ff5e 	bl	8001454 <WIZCHIP_READ>
 8002598:	4603      	mov	r3, r0
 800259a:	b29b      	uxth	r3, r3
 800259c:	4423      	add	r3, r4
 800259e:	b29a      	uxth	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	801a      	strh	r2, [r3, #0]
         break;
 80025a4:	e053      	b.n	800264e <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80025a6:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <ctlwizchip+0x1c0>)
 80025a8:	789a      	ldrb	r2, [r3, #2]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <ctlwizchip+0x1c0>)
 80025b4:	78d2      	ldrb	r2, [r2, #3]
 80025b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	3302      	adds	r3, #2
 80025bc:	4a26      	ldr	r2, [pc, #152]	; (8002658 <ctlwizchip+0x1c0>)
 80025be:	7912      	ldrb	r2, [r2, #4]
 80025c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	3303      	adds	r3, #3
 80025c6:	4a24      	ldr	r2, [pc, #144]	; (8002658 <ctlwizchip+0x1c0>)
 80025c8:	7952      	ldrb	r2, [r2, #5]
 80025ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4a21      	ldr	r2, [pc, #132]	; (8002658 <ctlwizchip+0x1c0>)
 80025d2:	7992      	ldrb	r2, [r2, #6]
 80025d4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3305      	adds	r3, #5
 80025da:	4a1f      	ldr	r2, [pc, #124]	; (8002658 <ctlwizchip+0x1c0>)
 80025dc:	79d2      	ldrb	r2, [r2, #7]
 80025de:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3306      	adds	r3, #6
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
         break;
 80025e8:	e031      	b.n	800264e <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80025ea:	f000 fa13 	bl	8002a14 <wizphy_reset>
         break;
 80025ee:	e02e      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f000 fa36 	bl	8002a62 <wizphy_setphyconf>
         break;
 80025f6:	e02a      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80025f8:	6838      	ldr	r0, [r7, #0]
 80025fa:	f000 fa75 	bl	8002ae8 <wizphy_getphyconf>
         break;
 80025fe:	e026      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fad9 	bl	8002bbc <wizphy_setphypmode>
 800260a:	4603      	mov	r3, r0
 800260c:	e020      	b.n	8002650 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800260e:	f000 f9e8 	bl	80029e2 <wizphy_getphypmode>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	d102      	bne.n	8002622 <ctlwizchip+0x18a>
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002620:	e016      	b.n	8002650 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7dfa      	ldrb	r2, [r7, #23]
 8002626:	701a      	strb	r2, [r3, #0]
         break;
 8002628:	e011      	b.n	800264e <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 800262a:	f000 f9c4 	bl	80029b6 <wizphy_getphylink>
 800262e:	4603      	mov	r3, r0
 8002630:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2bff      	cmp	r3, #255	; 0xff
 8002636:	d102      	bne.n	800263e <ctlwizchip+0x1a6>
 8002638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800263c:	e008      	b.n	8002650 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	7dfa      	ldrb	r2, [r7, #23]
 8002642:	701a      	strb	r2, [r3, #0]
         break;
 8002644:	e003      	b.n	800264e <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800264a:	e001      	b.n	8002650 <ctlwizchip+0x1b8>
         break;
 800264c:	bf00      	nop
   }
   return 0;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	200000a0 	.word	0x200000a0

0800265c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b05      	cmp	r3, #5
 800266c:	d82c      	bhi.n	80026c8 <ctlnetwork+0x6c>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <ctlnetwork+0x18>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	0800268d 	.word	0x0800268d
 8002678:	08002695 	.word	0x08002695
 800267c:	0800269d 	.word	0x0800269d
 8002680:	080026ab 	.word	0x080026ab
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080026c1 	.word	0x080026c1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	f000 fadf 	bl	8002c50 <wizchip_setnetinfo>
         break;
 8002692:	e01c      	b.n	80026ce <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8002694:	6838      	ldr	r0, [r7, #0]
 8002696:	f000 fb1b 	bl	8002cd0 <wizchip_getnetinfo>
         break;
 800269a:	e018      	b.n	80026ce <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fb55 	bl	8002d50 <wizchip_setnetmode>
 80026a6:	4603      	mov	r3, r0
 80026a8:	e012      	b.n	80026d0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80026aa:	f000 fb73 	bl	8002d94 <wizchip_getnetmode>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	701a      	strb	r2, [r3, #0]
         break;
 80026b6:	e00a      	b.n	80026ce <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	f000 fb73 	bl	8002da4 <wizchip_settimeout>
         break;
 80026be:	e006      	b.n	80026ce <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80026c0:	6838      	ldr	r0, [r7, #0]
 80026c2:	f000 fb90 	bl	8002de6 <wizchip_gettimeout>
         break;
 80026c6:	e002      	b.n	80026ce <ctlnetwork+0x72>
      default:
         return -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026cc:	e000      	b.n	80026d0 <ctlnetwork+0x74>
   }
   return 0;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2206      	movs	r2, #6
 80026e2:	4619      	mov	r1, r3
 80026e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80026e8:	f7fe ff4e 	bl	8001588 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2204      	movs	r2, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026f8:	f7fe ff46 	bl	8001588 <WIZCHIP_READ_BUF>
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	2204      	movs	r2, #4
 8002702:	4619      	mov	r1, r3
 8002704:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002708:	f7fe ff3e 	bl	8001588 <WIZCHIP_READ_BUF>
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2204      	movs	r2, #4
 8002712:	4619      	mov	r1, r3
 8002714:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002718:	f7fe ff36 	bl	8001588 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fee4 	bl	80014ec <WIZCHIP_WRITE>
   getMR(); // for delay
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe fe95 	bl	8001454 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2206      	movs	r2, #6
 800272e:	4619      	mov	r1, r3
 8002730:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002734:	f7fe ff88 	bl	8001648 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2204      	movs	r2, #4
 800273e:	4619      	mov	r1, r3
 8002740:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002744:	f7fe ff80 	bl	8001648 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	2204      	movs	r2, #4
 800274e:	4619      	mov	r1, r3
 8002750:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002754:	f7fe ff78 	bl	8001648 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	2204      	movs	r2, #4
 800275e:	4619      	mov	r1, r3
 8002760:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002764:	f7fe ff70 	bl	8001648 <WIZCHIP_WRITE_BUF>
}
 8002768:	bf00      	nop
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800277e:	f7ff ffab 	bl	80026d8 <wizchip_sw_reset>
   if(txsize)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03b      	beq.n	8002800 <wizchip_init+0x90>
   {
      tmp = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	73fb      	strb	r3, [r7, #15]
 8002790:	e015      	b.n	80027be <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	4413      	add	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80027a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027a8:	2b10      	cmp	r3, #16
 80027aa:	dd02      	ble.n	80027b2 <wizchip_init+0x42>
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027b0:	e066      	b.n	8002880 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	3301      	adds	r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	2b07      	cmp	r3, #7
 80027c4:	dde5      	ble.n	8002792 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e015      	b.n	80027f8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80027cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	3301      	adds	r3, #1
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80027da:	4618      	mov	r0, r3
 80027dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7fe fe80 	bl	80014ec <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	3301      	adds	r3, #1
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fc:	2b07      	cmp	r3, #7
 80027fe:	dde5      	ble.n	80027cc <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d03b      	beq.n	800287e <wizchip_init+0x10e>
   {
      tmp = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e015      	b.n	800283c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	4413      	add	r3, r2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002826:	2b10      	cmp	r3, #16
 8002828:	dd02      	ble.n	8002830 <wizchip_init+0xc0>
 800282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282e:	e027      	b.n	8002880 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3301      	adds	r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002840:	2b07      	cmp	r3, #7
 8002842:	dde5      	ble.n	8002810 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e015      	b.n	8002876 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	3301      	adds	r3, #1
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002858:	4618      	mov	r0, r3
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe fe41 	bl	80014ec <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	2b07      	cmp	r3, #7
 800287c:	dde5      	ble.n	800284a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	b29b      	uxth	r3, r3
 800289c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	f023 030f 	bic.w	r3, r3, #15
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80028ac:	f7fe fe1e 	bl	80014ec <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e014      	b.n	80028e0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80028b6:	7bba      	ldrb	r2, [r7, #14]
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	fa42 f303 	asr.w	r3, r2, r3
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <wizchip_clrinterrupt+0x52>
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3301      	adds	r3, #1
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028d2:	211f      	movs	r1, #31
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fe09 	bl	80014ec <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3301      	adds	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b07      	cmp	r3, #7
 80028e4:	d9e7      	bls.n	80028b6 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002902:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002906:	f7fe fda5 	bl	8001454 <WIZCHIP_READ>
 800290a:	4603      	mov	r3, r0
 800290c:	f023 030f 	bic.w	r3, r3, #15
 8002910:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002912:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002916:	f7fe fd9d 	bl	8001454 <WIZCHIP_READ>
 800291a:	4603      	mov	r3, r0
 800291c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800291e:	79bb      	ldrb	r3, [r7, #6]
 8002920:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002922:	88bb      	ldrh	r3, [r7, #4]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	b29a      	uxth	r2, r3
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4413      	add	r3, r2
 800292e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002930:	88bb      	ldrh	r3, [r7, #4]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	b29b      	uxth	r3, r3
 800294e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	4619      	mov	r1, r3
 8002954:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002958:	f7fe fdc8 	bl	80014ec <WIZCHIP_WRITE>
   setSIMR(simr);
 800295c:	7bbb      	ldrb	r3, [r7, #14]
 800295e:	4619      	mov	r1, r3
 8002960:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002964:	f7fe fdc2 	bl	80014ec <WIZCHIP_WRITE>
#endif   
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002982:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002986:	f7fe fd65 	bl	8001454 <WIZCHIP_READ>
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800298e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002992:	f7fe fd5f 	bl	8001454 <WIZCHIP_READ>
 8002996:	4603      	mov	r3, r0
 8002998:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800299e:	88bb      	ldrh	r3, [r7, #4]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80029ac:	88bb      	ldrh	r3, [r7, #4]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80029bc:	2300      	movs	r3, #0
 80029be:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80029c0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80029c4:	f7fe fd46 	bl	8001454 <WIZCHIP_READ>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80029d2:	2301      	movs	r3, #1
 80029d4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80029ec:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80029f0:	f7fe fd30 	bl	8001454 <WIZCHIP_READ>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029fa:	2b30      	cmp	r3, #48	; 0x30
 80029fc:	d102      	bne.n	8002a04 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80029fe:	2301      	movs	r3, #1
 8002a00:	71fb      	strb	r3, [r7, #7]
 8002a02:	e001      	b.n	8002a08 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002a04:	2300      	movs	r3, #0
 8002a06:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002a1a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002a1e:	f7fe fd19 	bl	8001454 <WIZCHIP_READ>
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	4619      	mov	r1, r3
 8002a32:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002a36:	f7fe fd59 	bl	80014ec <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002a3a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002a3e:	f7fe fd09 	bl	8001454 <WIZCHIP_READ>
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a4c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	4619      	mov	r1, r3
 8002a52:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002a56:	f7fe fd49 	bl	80014ec <WIZCHIP_WRITE>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d104      	bne.n	8002a80 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	e003      	b.n	8002a88 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a86:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d104      	bne.n	8002a9a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e019      	b.n	8002ace <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d10d      	bne.n	8002abe <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d104      	bne.n	8002ab4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	f043 0318 	orr.w	r3, r3, #24
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e00c      	b.n	8002ace <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e007      	b.n	8002ace <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	789b      	ldrb	r3, [r3, #2]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d103      	bne.n	8002ace <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	f043 0310 	orr.w	r3, r3, #16
 8002acc:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002ad6:	f7fe fd09 	bl	80014ec <WIZCHIP_WRITE>
   wizphy_reset();
 8002ada:	f7ff ff9b 	bl	8002a14 <wizphy_reset>
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002af4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002af8:	f7fe fcac 	bl	8001454 <WIZCHIP_READ>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	119b      	asrs	r3, r3, #6
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d001      	beq.n	8002b1e <wizphy_getphyconf+0x36>
 8002b1a:	2b38      	cmp	r3, #56	; 0x38
 8002b1c:	d103      	bne.n	8002b26 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	705a      	strb	r2, [r3, #1]
         break;
 8002b24:	e003      	b.n	8002b2e <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	705a      	strb	r2, [r3, #1]
         break;
 8002b2c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b34:	3b10      	subs	r3, #16
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	bf8c      	ite	hi
 8002b3a:	2201      	movhi	r2, #1
 8002b3c:	2200      	movls	r2, #0
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	2a00      	cmp	r2, #0
 8002b42:	d10f      	bne.n	8002b64 <wizphy_getphyconf+0x7c>
 8002b44:	4a1b      	ldr	r2, [pc, #108]	; (8002bb4 <wizphy_getphyconf+0xcc>)
 8002b46:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	bf14      	ite	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	2300      	moveq	r3, #0
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	709a      	strb	r2, [r3, #2]
         break;
 8002b62:	e003      	b.n	8002b6c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	709a      	strb	r2, [r3, #2]
         break;
 8002b6a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b72:	3b08      	subs	r3, #8
 8002b74:	2b18      	cmp	r3, #24
 8002b76:	bf8c      	ite	hi
 8002b78:	2201      	movhi	r2, #1
 8002b7a:	2200      	movls	r2, #0
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	2a00      	cmp	r2, #0
 8002b80:	d10f      	bne.n	8002ba2 <wizphy_getphyconf+0xba>
 8002b82:	4a0d      	ldr	r2, [pc, #52]	; (8002bb8 <wizphy_getphyconf+0xd0>)
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	70da      	strb	r2, [r3, #3]
         break;
 8002ba0:	e003      	b.n	8002baa <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	70da      	strb	r2, [r3, #3]
         break;
 8002ba8:	bf00      	nop
   }
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	00010101 	.word	0x00010101
 8002bb8:	01010001 	.word	0x01010001

08002bbc <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002bca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002bce:	f7fe fc41 	bl	8001454 <WIZCHIP_READ>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <wizphy_setphypmode+0x2a>
 8002be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002be4:	e030      	b.n	8002c48 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002bec:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d104      	bne.n	8002bfe <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e003      	b.n	8002c06 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002c04:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c0e:	f7fe fc6d 	bl	80014ec <WIZCHIP_WRITE>
   wizphy_reset();
 8002c12:	f7ff feff 	bl	8002a14 <wizphy_reset>
   tmp = getPHYCFGR();
 8002c16:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c1a:	f7fe fc1b 	bl	8001454 <WIZCHIP_READ>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <wizphy_setphypmode+0x88>
 8002c32:	2300      	movs	r3, #0
 8002c34:	e008      	b.n	8002c48 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <wizphy_setphypmode+0x88>
 8002c40:	2300      	movs	r3, #0
 8002c42:	e001      	b.n	8002c48 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2206      	movs	r2, #6
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002c62:	f7fe fcf1 	bl	8001648 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	330e      	adds	r3, #14
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c72:	f7fe fce9 	bl	8001648 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	330a      	adds	r3, #10
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002c82:	f7fe fce1 	bl	8001648 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3306      	adds	r3, #6
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c92:	f7fe fcd9 	bl	8001648 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7c9a      	ldrb	r2, [r3, #18]
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <wizchip_setnetinfo+0x78>)
 8002c9c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7cda      	ldrb	r2, [r3, #19]
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <wizchip_setnetinfo+0x78>)
 8002ca4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7d1a      	ldrb	r2, [r3, #20]
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <wizchip_setnetinfo+0x78>)
 8002cac:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7d5a      	ldrb	r2, [r3, #21]
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <wizchip_setnetinfo+0x78>)
 8002cb4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7d9a      	ldrb	r2, [r3, #22]
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <wizchip_setnetinfo+0x7c>)
 8002cbc:	701a      	strb	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000034c 	.word	0x2000034c
 8002ccc:	20000350 	.word	0x20000350

08002cd0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2206      	movs	r2, #6
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002ce2:	f7fe fc51 	bl	8001588 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	330e      	adds	r3, #14
 8002cea:	2204      	movs	r2, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cf2:	f7fe fc49 	bl	8001588 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	330a      	adds	r3, #10
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002d02:	f7fe fc41 	bl	8001588 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3306      	adds	r3, #6
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002d12:	f7fe fc39 	bl	8001588 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <wizchip_getnetinfo+0x78>)
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <wizchip_getnetinfo+0x78>)
 8002d20:	785a      	ldrb	r2, [r3, #1]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <wizchip_getnetinfo+0x78>)
 8002d28:	789a      	ldrb	r2, [r3, #2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <wizchip_getnetinfo+0x78>)
 8002d30:	78da      	ldrb	r2, [r3, #3]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <wizchip_getnetinfo+0x7c>)
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	759a      	strb	r2, [r3, #22]
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2000034c 	.word	0x2000034c
 8002d4c:	20000350 	.word	0x20000350

08002d50 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <wizchip_setnetmode+0x1e>
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d6c:	e00e      	b.n	8002d8c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7fe fb70 	bl	8001454 <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	4619      	mov	r1, r3
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fe fbb1 	bl	80014ec <WIZCHIP_WRITE>
   return 0;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe fb5b 	bl	8001454 <WIZCHIP_READ>
 8002d9e:	4603      	mov	r3, r0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002db6:	f7fe fb99 	bl	80014ec <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	885b      	ldrh	r3, [r3, #2]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002dca:	f7fe fb8f 	bl	80014ec <WIZCHIP_WRITE>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	885b      	ldrh	r3, [r3, #2]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002dda:	f7fe fb87 	bl	80014ec <WIZCHIP_WRITE>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8002dee:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002df2:	f7fe fb2f 	bl	8001454 <WIZCHIP_READ>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8002dfe:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002e02:	f7fe fb27 	bl	8001454 <WIZCHIP_READ>
 8002e06:	4603      	mov	r3, r0
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	b29c      	uxth	r4, r3
 8002e0e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002e12:	f7fe fb1f 	bl	8001454 <WIZCHIP_READ>
 8002e16:	4603      	mov	r3, r0
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4423      	add	r3, r4
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	805a      	strh	r2, [r3, #2]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
	...

08002e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e30:	f7fe fafe 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e34:	480c      	ldr	r0, [pc, #48]	; (8002e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e36:	490d      	ldr	r1, [pc, #52]	; (8002e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	; (8002e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e5a:	f002 fb2b 	bl	80054b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5e:	f7fd fbbd 	bl	80005dc <main>
  bx  lr    
 8002e62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e6c:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002e70:	08006704 	.word	0x08006704
  ldr r2, =_sbss
 8002e74:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002e78:	200004a4 	.word	0x200004a4

08002e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <ADC_IRQHandler>
	...

08002e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <HAL_Init+0x40>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_Init+0x40>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_Init+0x40>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_Init+0x40>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f000 f931 	bl	8003110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 f808 	bl	8002ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb4:	f7fe f936 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_InitTick+0x54>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <HAL_InitTick+0x58>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f93b 	bl	800315e <HAL_SYSTICK_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00e      	b.n	8002f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d80a      	bhi.n	8002f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f00:	f000 f911 	bl	8003126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f04:	4a06      	ldr	r2, [pc, #24]	; (8002f20 <HAL_InitTick+0x5c>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000098 	.word	0x20000098
 8002f1c:	200000d0 	.word	0x200000d0
 8002f20:	200000cc 	.word	0x200000cc

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	200000d0 	.word	0x200000d0
 8002f48:	20000354 	.word	0x20000354

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000354 	.word	0x20000354

08002f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff ffee 	bl	8002f4c <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7c:	d005      	beq.n	8002f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_Delay+0x44>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f8a:	bf00      	nop
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d8f7      	bhi.n	8002f8c <HAL_Delay+0x28>
  {
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200000d0 	.word	0x200000d0

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030dc:	d301      	bcc.n	80030e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030de:	2301      	movs	r3, #1
 80030e0:	e00f      	b.n	8003102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <SysTick_Config+0x40>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ea:	210f      	movs	r1, #15
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f0:	f7ff ff8e 	bl	8003010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <SysTick_Config+0x40>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <SysTick_Config+0x40>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	e000e010 	.word	0xe000e010

08003110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ff47 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	4603      	mov	r3, r0
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003138:	f7ff ff5c 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 800313c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff ff8e 	bl	8003064 <NVIC_EncodePriority>
 8003148:	4602      	mov	r2, r0
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff5d 	bl	8003010 <__NVIC_SetPriority>
}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffb0 	bl	80030cc <SysTick_Config>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	e165      	b.n	8003460 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003194:	2201      	movs	r2, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	f040 8154 	bne.w	800345a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d005      	beq.n	80031ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d130      	bne.n	800322c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003200:	2201      	movs	r2, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f003 0201 	and.w	r2, r3, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b03      	cmp	r3, #3
 8003236:	d017      	beq.n	8003268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	2203      	movs	r2, #3
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d123      	bne.n	80032bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	08da      	lsrs	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3208      	adds	r2, #8
 800327c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	08da      	lsrs	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3208      	adds	r2, #8
 80032b6:	69b9      	ldr	r1, [r7, #24]
 80032b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0203 	and.w	r2, r3, #3
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80ae 	beq.w	800345a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	4b5d      	ldr	r3, [pc, #372]	; (8003478 <HAL_GPIO_Init+0x300>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	4a5c      	ldr	r2, [pc, #368]	; (8003478 <HAL_GPIO_Init+0x300>)
 8003308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330c:	6453      	str	r3, [r2, #68]	; 0x44
 800330e:	4b5a      	ldr	r3, [pc, #360]	; (8003478 <HAL_GPIO_Init+0x300>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800331a:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_GPIO_Init+0x304>)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	3302      	adds	r3, #2
 8003322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	220f      	movs	r2, #15
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4f      	ldr	r2, [pc, #316]	; (8003480 <HAL_GPIO_Init+0x308>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d025      	beq.n	8003392 <HAL_GPIO_Init+0x21a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4e      	ldr	r2, [pc, #312]	; (8003484 <HAL_GPIO_Init+0x30c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01f      	beq.n	800338e <HAL_GPIO_Init+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4d      	ldr	r2, [pc, #308]	; (8003488 <HAL_GPIO_Init+0x310>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_GPIO_Init+0x212>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4c      	ldr	r2, [pc, #304]	; (800348c <HAL_GPIO_Init+0x314>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4b      	ldr	r2, [pc, #300]	; (8003490 <HAL_GPIO_Init+0x318>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x20a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <HAL_GPIO_Init+0x31c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x206>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a49      	ldr	r2, [pc, #292]	; (8003498 <HAL_GPIO_Init+0x320>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x202>
 8003376:	2306      	movs	r3, #6
 8003378:	e00c      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 800337a:	2307      	movs	r3, #7
 800337c:	e00a      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 800337e:	2305      	movs	r3, #5
 8003380:	e008      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 8003382:	2304      	movs	r3, #4
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 8003386:	2303      	movs	r3, #3
 8003388:	e004      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 800338a:	2302      	movs	r3, #2
 800338c:	e002      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_GPIO_Init+0x21c>
 8003392:	2300      	movs	r3, #0
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f002 0203 	and.w	r2, r2, #3
 800339a:	0092      	lsls	r2, r2, #2
 800339c:	4093      	lsls	r3, r2
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a4:	4935      	ldr	r1, [pc, #212]	; (800347c <HAL_GPIO_Init+0x304>)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <HAL_GPIO_Init+0x324>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d6:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_GPIO_Init+0x324>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033dc:	4b2f      	ldr	r3, [pc, #188]	; (800349c <HAL_GPIO_Init+0x324>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003400:	4a26      	ldr	r2, [pc, #152]	; (800349c <HAL_GPIO_Init+0x324>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_GPIO_Init+0x324>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342a:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_GPIO_Init+0x324>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_GPIO_Init+0x324>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003454:	4a11      	ldr	r2, [pc, #68]	; (800349c <HAL_GPIO_Init+0x324>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3301      	adds	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	f67f ae96 	bls.w	8003194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	; 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40013800 	.word	0x40013800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40021400 	.word	0x40021400
 8003498:	40021800 	.word	0x40021800
 800349c:	40013c00 	.word	0x40013c00

080034a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
 80034ac:	4613      	mov	r3, r2
 80034ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b0:	787b      	ldrb	r3, [r7, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034bc:	e003      	b.n	80034c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	041a      	lsls	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034e4:	887a      	ldrh	r2, [r7, #2]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	041a      	lsls	r2, r3, #16
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	400b      	ands	r3, r1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	619a      	str	r2, [r3, #24]
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4b20      	ldr	r3, [pc, #128]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_PWREx_EnableOverDrive+0x90>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_PWREx_EnableOverDrive+0x94>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7ff fd0a 	bl	8002f4c <HAL_GetTick>
 8003538:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800353a:	e009      	b.n	8003550 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800353c:	f7ff fd06 	bl	8002f4c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354a:	d901      	bls.n	8003550 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e01f      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d1ee      	bne.n	800353c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7ff fcf2 	bl	8002f4c <HAL_GetTick>
 8003568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356a:	e009      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800356c:	f7ff fcee 	bl	8002f4c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358c:	d1ee      	bne.n	800356c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	420e0040 	.word	0x420e0040
 80035a0:	40007000 	.word	0x40007000
 80035a4:	420e0044 	.word	0x420e0044

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0cc      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d90c      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d044      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d119      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d003      	beq.n	8003666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003662:	2b03      	cmp	r3, #3
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003666:	4b3f      	ldr	r3, [pc, #252]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e06f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e067      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003686:	4b37      	ldr	r3, [pc, #220]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f023 0203 	bic.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4934      	ldr	r1, [pc, #208]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003698:	f7ff fc58 	bl	8002f4c <HAL_GetTick>
 800369c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a0:	f7ff fc54 	bl	8002f4c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b6:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 020c 	and.w	r2, r3, #12
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d1eb      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20c      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f855 	bl	80037dc <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fbb8 	bl	8002ec4 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00
 8003764:	40023800 	.word	0x40023800
 8003768:	080066a8 	.word	0x080066a8
 800376c:	20000098 	.word	0x20000098
 8003770:	200000cc 	.word	0x200000cc

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000098 	.word	0x20000098

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	080066b8 	.word	0x080066b8

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	080066b8 	.word	0x080066b8

080037dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e0:	b0ae      	sub	sp, #184	; 0xb8
 80037e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003802:	4bcb      	ldr	r3, [pc, #812]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b0c      	cmp	r3, #12
 800380c:	f200 8206 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x440>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800384d 	.word	0x0800384d
 800381c:	08003c1d 	.word	0x08003c1d
 8003820:	08003c1d 	.word	0x08003c1d
 8003824:	08003c1d 	.word	0x08003c1d
 8003828:	08003855 	.word	0x08003855
 800382c:	08003c1d 	.word	0x08003c1d
 8003830:	08003c1d 	.word	0x08003c1d
 8003834:	08003c1d 	.word	0x08003c1d
 8003838:	0800385d 	.word	0x0800385d
 800383c:	08003c1d 	.word	0x08003c1d
 8003840:	08003c1d 	.word	0x08003c1d
 8003844:	08003c1d 	.word	0x08003c1d
 8003848:	08003a4d 	.word	0x08003a4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4bb9      	ldr	r3, [pc, #740]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x358>)
 800384e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003852:	e1e7      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003854:	4bb8      	ldr	r3, [pc, #736]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800385a:	e1e3      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800385c:	4bb4      	ldr	r3, [pc, #720]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003868:	4bb1      	ldr	r3, [pc, #708]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d071      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003874:	4bae      	ldr	r3, [pc, #696]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003880:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800389a:	4622      	mov	r2, r4
 800389c:	462b      	mov	r3, r5
 800389e:	f04f 0000 	mov.w	r0, #0
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	0159      	lsls	r1, r3, #5
 80038a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ac:	0150      	lsls	r0, r2, #5
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4621      	mov	r1, r4
 80038b4:	1a51      	subs	r1, r2, r1
 80038b6:	6439      	str	r1, [r7, #64]	; 0x40
 80038b8:	4629      	mov	r1, r5
 80038ba:	eb63 0301 	sbc.w	r3, r3, r1
 80038be:	647b      	str	r3, [r7, #68]	; 0x44
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80038cc:	4649      	mov	r1, r9
 80038ce:	018b      	lsls	r3, r1, #6
 80038d0:	4641      	mov	r1, r8
 80038d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038d6:	4641      	mov	r1, r8
 80038d8:	018a      	lsls	r2, r1, #6
 80038da:	4641      	mov	r1, r8
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	63b9      	str	r1, [r7, #56]	; 0x38
 80038e0:	4649      	mov	r1, r9
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80038f4:	4649      	mov	r1, r9
 80038f6:	00cb      	lsls	r3, r1, #3
 80038f8:	4641      	mov	r1, r8
 80038fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fe:	4641      	mov	r1, r8
 8003900:	00ca      	lsls	r2, r1, #3
 8003902:	4610      	mov	r0, r2
 8003904:	4619      	mov	r1, r3
 8003906:	4603      	mov	r3, r0
 8003908:	4622      	mov	r2, r4
 800390a:	189b      	adds	r3, r3, r2
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
 800390e:	462b      	mov	r3, r5
 8003910:	460a      	mov	r2, r1
 8003912:	eb42 0303 	adc.w	r3, r2, r3
 8003916:	637b      	str	r3, [r7, #52]	; 0x34
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003924:	4629      	mov	r1, r5
 8003926:	024b      	lsls	r3, r1, #9
 8003928:	4621      	mov	r1, r4
 800392a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800392e:	4621      	mov	r1, r4
 8003930:	024a      	lsls	r2, r1, #9
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003944:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003948:	f7fc fcca 	bl	80002e0 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003956:	e067      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003958:	4b75      	ldr	r3, [pc, #468]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	099b      	lsrs	r3, r3, #6
 800395e:	2200      	movs	r2, #0
 8003960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003964:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800396c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003970:	67bb      	str	r3, [r7, #120]	; 0x78
 8003972:	2300      	movs	r3, #0
 8003974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003976:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4621      	mov	r1, r4
 8003994:	1a51      	subs	r1, r2, r1
 8003996:	62b9      	str	r1, [r7, #40]	; 0x28
 8003998:	4629      	mov	r1, r5
 800399a:	eb63 0301 	sbc.w	r3, r3, r1
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80039ac:	4649      	mov	r1, r9
 80039ae:	018b      	lsls	r3, r1, #6
 80039b0:	4641      	mov	r1, r8
 80039b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b6:	4641      	mov	r1, r8
 80039b8:	018a      	lsls	r2, r1, #6
 80039ba:	4641      	mov	r1, r8
 80039bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80039c0:	4649      	mov	r1, r9
 80039c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039da:	4692      	mov	sl, r2
 80039dc:	469b      	mov	fp, r3
 80039de:	4623      	mov	r3, r4
 80039e0:	eb1a 0303 	adds.w	r3, sl, r3
 80039e4:	623b      	str	r3, [r7, #32]
 80039e6:	462b      	mov	r3, r5
 80039e8:	eb4b 0303 	adc.w	r3, fp, r3
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80039fa:	4629      	mov	r1, r5
 80039fc:	028b      	lsls	r3, r1, #10
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a04:	4621      	mov	r1, r4
 8003a06:	028a      	lsls	r2, r1, #10
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a10:	2200      	movs	r2, #0
 8003a12:	673b      	str	r3, [r7, #112]	; 0x70
 8003a14:	677a      	str	r2, [r7, #116]	; 0x74
 8003a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003a1a:	f7fc fc61 	bl	80002e0 <__aeabi_uldivmod>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4613      	mov	r3, r2
 8003a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a4a:	e0eb      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a4c:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a58:	4b35      	ldr	r3, [pc, #212]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d06b      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a64:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	099b      	lsrs	r3, r3, #6
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	663b      	str	r3, [r7, #96]	; 0x60
 8003a78:	2300      	movs	r3, #0
 8003a7a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003a80:	4622      	mov	r2, r4
 8003a82:	462b      	mov	r3, r5
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	0159      	lsls	r1, r3, #5
 8003a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a92:	0150      	lsls	r0, r2, #5
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4621      	mov	r1, r4
 8003a9a:	1a51      	subs	r1, r2, r1
 8003a9c:	61b9      	str	r1, [r7, #24]
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ab2:	4659      	mov	r1, fp
 8003ab4:	018b      	lsls	r3, r1, #6
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003abc:	4651      	mov	r1, sl
 8003abe:	018a      	lsls	r2, r1, #6
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	eb63 0901 	sbc.w	r9, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003adc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ae0:	4690      	mov	r8, r2
 8003ae2:	4699      	mov	r9, r3
 8003ae4:	4623      	mov	r3, r4
 8003ae6:	eb18 0303 	adds.w	r3, r8, r3
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	462b      	mov	r3, r5
 8003aee:	eb49 0303 	adc.w	r3, r9, r3
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b00:	4629      	mov	r1, r5
 8003b02:	024b      	lsls	r3, r1, #9
 8003b04:	4621      	mov	r1, r4
 8003b06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	024a      	lsls	r2, r1, #9
 8003b0e:	4610      	mov	r0, r2
 8003b10:	4619      	mov	r1, r3
 8003b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b16:	2200      	movs	r2, #0
 8003b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b20:	f7fc fbde 	bl	80002e0 <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b2e:	e065      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x420>
 8003b30:	40023800 	.word	0x40023800
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	2200      	movs	r2, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	4611      	mov	r1, r2
 8003b48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b4e:	2300      	movs	r3, #0
 8003b50:	657b      	str	r3, [r7, #84]	; 0x54
 8003b52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003b56:	4642      	mov	r2, r8
 8003b58:	464b      	mov	r3, r9
 8003b5a:	f04f 0000 	mov.w	r0, #0
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	0159      	lsls	r1, r3, #5
 8003b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b68:	0150      	lsls	r0, r2, #5
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4641      	mov	r1, r8
 8003b70:	1a51      	subs	r1, r2, r1
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	4649      	mov	r1, r9
 8003b76:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b88:	4659      	mov	r1, fp
 8003b8a:	018b      	lsls	r3, r1, #6
 8003b8c:	4651      	mov	r1, sl
 8003b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b92:	4651      	mov	r1, sl
 8003b94:	018a      	lsls	r2, r1, #6
 8003b96:	4651      	mov	r1, sl
 8003b98:	1a54      	subs	r4, r2, r1
 8003b9a:	4659      	mov	r1, fp
 8003b9c:	eb63 0501 	sbc.w	r5, r3, r1
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	00eb      	lsls	r3, r5, #3
 8003baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bae:	00e2      	lsls	r2, r4, #3
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	4643      	mov	r3, r8
 8003bb6:	18e3      	adds	r3, r4, r3
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bce:	4629      	mov	r1, r5
 8003bd0:	028b      	lsls	r3, r1, #10
 8003bd2:	4621      	mov	r1, r4
 8003bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd8:	4621      	mov	r1, r4
 8003bda:	028a      	lsls	r2, r1, #10
 8003bdc:	4610      	mov	r0, r2
 8003bde:	4619      	mov	r1, r3
 8003be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003be4:	2200      	movs	r2, #0
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003be8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bee:	f7fc fb77 	bl	80002e0 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0f1b      	lsrs	r3, r3, #28
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c1a:	e003      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	37b8      	adds	r7, #184	; 0xb8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400

08003c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e28d      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8083 	beq.w	8003d62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c5c:	4b94      	ldr	r3, [pc, #592]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d019      	beq.n	8003c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c68:	4b91      	ldr	r3, [pc, #580]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c74:	4b8e      	ldr	r3, [pc, #568]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c80:	d00c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c82:	4b8b      	ldr	r3, [pc, #556]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d112      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8e:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05b      	beq.n	8003d60 <HAL_RCC_OscConfig+0x124>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d157      	bne.n	8003d60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e25a      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d106      	bne.n	8003ccc <HAL_RCC_OscConfig+0x90>
 8003cbe:	4b7c      	ldr	r3, [pc, #496]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a7b      	ldr	r2, [pc, #492]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e01d      	b.n	8003d08 <HAL_RCC_OscConfig+0xcc>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0xb4>
 8003cd6:	4b76      	ldr	r3, [pc, #472]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a75      	ldr	r2, [pc, #468]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b73      	ldr	r3, [pc, #460]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a72      	ldr	r2, [pc, #456]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0xcc>
 8003cf0:	4b6f      	ldr	r3, [pc, #444]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6e      	ldr	r2, [pc, #440]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b6c      	ldr	r3, [pc, #432]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6b      	ldr	r2, [pc, #428]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7ff f91c 	bl	8002f4c <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7ff f918 	bl	8002f4c <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e21f      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0xdc>
 8003d36:	e014      	b.n	8003d62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7ff f908 	bl	8002f4c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d40:	f7ff f904 	bl	8002f4c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e20b      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d52:	4b57      	ldr	r3, [pc, #348]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x104>
 8003d5e:	e000      	b.n	8003d62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d06f      	beq.n	8003e4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d6e:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d105      	bne.n	8003d92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d92:	4b47      	ldr	r3, [pc, #284]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d9a:	2b0c      	cmp	r3, #12
 8003d9c:	d11c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b44      	ldr	r3, [pc, #272]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d116      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x186>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e1d3      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4937      	ldr	r1, [pc, #220]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	e03a      	b.n	8003e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <HAL_RCC_OscConfig+0x278>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7ff f8b1 	bl	8002f4c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dee:	f7ff f8ad 	bl	8002f4c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e1b4      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4925      	ldr	r1, [pc, #148]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
 8003e20:	e015      	b.n	8003e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCC_OscConfig+0x278>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7ff f890 	bl	8002f4c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e30:	f7ff f88c 	bl	8002f4c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e193      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d036      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e68:	f7ff f870 	bl	8002f4c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e70:	f7ff f86c 	bl	8002f4c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e173      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCC_OscConfig+0x274>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x234>
 8003e8e:	e01b      	b.n	8003ec8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RCC_OscConfig+0x27c>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7ff f859 	bl	8002f4c <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	e00e      	b.n	8003ebc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9e:	f7ff f855 	bl	8002f4c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d907      	bls.n	8003ebc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e15c      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	42470000 	.word	0x42470000
 8003eb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	4b8a      	ldr	r3, [pc, #552]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ea      	bne.n	8003e9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8097 	beq.w	8004004 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eda:	4b83      	ldr	r3, [pc, #524]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10f      	bne.n	8003f06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	4b7f      	ldr	r3, [pc, #508]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4a7e      	ldr	r2, [pc, #504]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef6:	4b7c      	ldr	r3, [pc, #496]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f02:	2301      	movs	r3, #1
 8003f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b79      	ldr	r3, [pc, #484]	; (80040ec <HAL_RCC_OscConfig+0x4b0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d118      	bne.n	8003f44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f12:	4b76      	ldr	r3, [pc, #472]	; (80040ec <HAL_RCC_OscConfig+0x4b0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a75      	ldr	r2, [pc, #468]	; (80040ec <HAL_RCC_OscConfig+0x4b0>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f1e:	f7ff f815 	bl	8002f4c <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f26:	f7ff f811 	bl	8002f4c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e118      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	4b6c      	ldr	r3, [pc, #432]	; (80040ec <HAL_RCC_OscConfig+0x4b0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x31e>
 8003f4c:	4b66      	ldr	r3, [pc, #408]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	4a65      	ldr	r2, [pc, #404]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6713      	str	r3, [r2, #112]	; 0x70
 8003f58:	e01c      	b.n	8003f94 <HAL_RCC_OscConfig+0x358>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x340>
 8003f62:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	4a60      	ldr	r2, [pc, #384]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6e:	4b5e      	ldr	r3, [pc, #376]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	4a5d      	ldr	r2, [pc, #372]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0x358>
 8003f7c:	4b5a      	ldr	r3, [pc, #360]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	4a59      	ldr	r2, [pc, #356]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	6713      	str	r3, [r2, #112]	; 0x70
 8003f88:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4a56      	ldr	r2, [pc, #344]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003f8e:	f023 0304 	bic.w	r3, r3, #4
 8003f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d015      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fe ffd6 	bl	8002f4c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fe ffd2 	bl	8002f4c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e0d7      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fba:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0ee      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x368>
 8003fc6:	e014      	b.n	8003ff2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fe ffc0 	bl	8002f4c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd0:	f7fe ffbc 	bl	8002f4c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0c1      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe6:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ee      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	4a3a      	ldr	r2, [pc, #232]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004002:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80ad 	beq.w	8004168 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b08      	cmp	r3, #8
 8004018:	d060      	beq.n	80040dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d145      	bne.n	80040ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004022:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_RCC_OscConfig+0x4b4>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe ff90 	bl	8002f4c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004030:	f7fe ff8c 	bl	8002f4c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e093      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69da      	ldr	r2, [r3, #28]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	061b      	lsls	r3, r3, #24
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	071b      	lsls	r3, r3, #28
 800407a:	491b      	ldr	r1, [pc, #108]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 800407c:	4313      	orrs	r3, r2
 800407e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004080:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_RCC_OscConfig+0x4b4>)
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004086:	f7fe ff61 	bl	8002f4c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408e:	f7fe ff5d 	bl	8002f4c <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e064      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x452>
 80040ac:	e05c      	b.n	8004168 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCC_OscConfig+0x4b4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe ff4a 	bl	8002f4c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fe ff46 	bl	8002f4c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e04d      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x480>
 80040da:	e045      	b.n	8004168 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d107      	bne.n	80040f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e040      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40007000 	.word	0x40007000
 80040f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <HAL_RCC_OscConfig+0x538>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d030      	beq.n	8004164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d129      	bne.n	8004164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d122      	bne.n	8004164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800412a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800412c:	4293      	cmp	r3, r2
 800412e:	d119      	bne.n	8004164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	3b01      	subs	r3, #1
 800413e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d10f      	bne.n	8004164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800

08004178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e07b      	b.n	8004282 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d108      	bne.n	80041a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d009      	beq.n	80041b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	61da      	str	r2, [r3, #28]
 80041a2:	e005      	b.n	80041b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fc ffd2 	bl	8001174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	ea42 0103 	orr.w	r1, r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	f003 0104 	and.w	r1, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0210 	and.w	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69da      	ldr	r2, [r3, #28]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08c      	sub	sp, #48	; 0x30
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004298:	2301      	movs	r3, #1
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x26>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e198      	b.n	80045e2 <HAL_SPI_TransmitReceive+0x358>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b8:	f7fe fe48 	bl	8002f4c <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00f      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x70>
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e0:	d107      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x68>
 80042ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d003      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
 80042f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80042f8:	e16d      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_SPI_TransmitReceive+0x82>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_TransmitReceive+0x82>
 8004306:	887b      	ldrh	r3, [r7, #2]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004312:	e160      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b04      	cmp	r3, #4
 800431e:	d003      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2205      	movs	r2, #5
 8004324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	887a      	ldrh	r2, [r7, #2]
 800433e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	887a      	ldrh	r2, [r7, #2]
 800434a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d007      	beq.n	800437c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004384:	d17c      	bne.n	8004480 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_TransmitReceive+0x10a>
 800438e:	8b7b      	ldrh	r3, [r7, #26]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d16a      	bne.n	800446a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b8:	e057      	b.n	800446a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d11b      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x176>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d016      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x176>
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d113      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d119      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x1b8>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d014      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	b292      	uxth	r2, r2
 8004424:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	1c9a      	adds	r2, r3, #2
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800443e:	2301      	movs	r3, #1
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004442:	f7fe fd83 	bl	8002f4c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800444e:	429a      	cmp	r2, r3
 8004450:	d80b      	bhi.n	800446a <HAL_SPI_TransmitReceive+0x1e0>
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d007      	beq.n	800446a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004468:	e0b5      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1a2      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x130>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d19d      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x130>
 800447e:	e080      	b.n	8004582 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_SPI_TransmitReceive+0x204>
 8004488:	8b7b      	ldrh	r3, [r7, #26]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d16f      	bne.n	800456e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b4:	e05b      	b.n	800456e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d11c      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x274>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d017      	beq.n	80044fe <HAL_SPI_TransmitReceive+0x274>
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d114      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d119      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x2b6>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d014      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004540:	f7fe fd04 	bl	8002f4c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454c:	429a      	cmp	r2, r3
 800454e:	d803      	bhi.n	8004558 <HAL_SPI_TransmitReceive+0x2ce>
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004556:	d102      	bne.n	800455e <HAL_SPI_TransmitReceive+0x2d4>
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800456c:	e033      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d19e      	bne.n	80044b6 <HAL_SPI_TransmitReceive+0x22c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d199      	bne.n	80044b6 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f8b8 	bl	80046fc <SPI_EndRxTxTransaction>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800459e:	e01a      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045cc:	e003      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3730      	adds	r7, #48	; 0x30
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045fc:	f7fe fca6 	bl	8002f4c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	4413      	add	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800460c:	f7fe fc9e 	bl	8002f4c <HAL_GetTick>
 8004610:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	015b      	lsls	r3, r3, #5
 8004618:	0d1b      	lsrs	r3, r3, #20
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004622:	e054      	b.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800462a:	d050      	beq.n	80046ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800462c:	f7fe fc8e 	bl	8002f4c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	429a      	cmp	r2, r3
 800463a:	d902      	bls.n	8004642 <SPI_WaitFlagStateUntilTimeout+0x56>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13d      	bne.n	80046be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004650:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465a:	d111      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x94>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d004      	beq.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d107      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d10f      	bne.n	80046aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e017      	b.n	80046ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	4013      	ands	r3, r2
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	bf0c      	ite	eq
 80046de:	2301      	moveq	r3, #1
 80046e0:	2300      	movne	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d19b      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000098 	.word	0x20000098

080046fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2201      	movs	r2, #1
 8004710:	2102      	movs	r1, #2
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff ff6a 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f043 0220 	orr.w	r2, r3, #32
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e032      	b.n	8004794 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800472e:	4b1b      	ldr	r3, [pc, #108]	; (800479c <SPI_EndRxTxTransaction+0xa0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <SPI_EndRxTxTransaction+0xa4>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	0d5b      	lsrs	r3, r3, #21
 800473a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474c:	d112      	bne.n	8004774 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	2180      	movs	r1, #128	; 0x80
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff ff47 	bl	80045ec <SPI_WaitFlagStateUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e00f      	b.n	8004794 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3b01      	subs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d0f2      	beq.n	8004774 <SPI_EndRxTxTransaction+0x78>
 800478e:	e000      	b.n	8004792 <SPI_EndRxTxTransaction+0x96>
        break;
 8004790:	bf00      	nop
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000098 	.word	0x20000098
 80047a0:	165e9f81 	.word	0x165e9f81

080047a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e042      	b.n	800483c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fc fd1a 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2224      	movs	r2, #36	; 0x24
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f973 	bl	8004ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800481c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b20      	cmp	r3, #32
 8004862:	d175      	bne.n	8004950 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_UART_Transmit+0x2c>
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e06e      	b.n	8004952 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2221      	movs	r2, #33	; 0x21
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004882:	f7fe fb63 	bl	8002f4c <HAL_GetTick>
 8004886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d108      	bne.n	80048b0 <HAL_UART_Transmit+0x6c>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	e003      	b.n	80048b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b8:	e02e      	b.n	8004918 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2180      	movs	r1, #128	; 0x80
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f848 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e03a      	b.n	8004952 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	3302      	adds	r3, #2
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e007      	b.n	800490a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	3301      	adds	r3, #1
 8004908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1cb      	bne.n	80048ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2140      	movs	r1, #64	; 0x40
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f814 	bl	800495a <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496a:	e03b      	b.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004972:	d037      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004974:	f7fe faea 	bl	8002f4c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	6a3a      	ldr	r2, [r7, #32]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <UART_WaitOnFlagUntilTimeout+0x30>
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e03a      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d020      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d01d      	beq.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d116      	bne.n	80049e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f81d 	bl	8004a0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2208      	movs	r2, #8
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e00f      	b.n	8004a04 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d0b4      	beq.n	800496c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b095      	sub	sp, #84	; 0x54
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a34:	643a      	str	r2, [r7, #64]	; 0x40
 8004a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d119      	bne.n	8004ab8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f023 0310 	bic.w	r3, r3, #16
 8004a9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa4:	61ba      	str	r2, [r7, #24]
 8004aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ac6:	bf00      	nop
 8004ac8:	3754      	adds	r7, #84	; 0x54
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b0c0      	sub	sp, #256	; 0x100
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	68d9      	ldr	r1, [r3, #12]
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	ea40 0301 	orr.w	r3, r0, r1
 8004afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b2c:	f021 010c 	bic.w	r1, r1, #12
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	6999      	ldr	r1, [r3, #24]
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	ea40 0301 	orr.w	r3, r0, r1
 8004b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d005      	beq.n	8004b74 <UART_SetConfig+0xa0>
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8d      	ldr	r3, [pc, #564]	; (8004da4 <UART_SetConfig+0x2d0>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d104      	bne.n	8004b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fe1e 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 8004b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b7c:	e003      	b.n	8004b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b7e:	f7fe fe05 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8004b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b90:	f040 810c 	bne.w	8004dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	462b      	mov	r3, r5
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	eb12 0801 	adds.w	r8, r2, r1
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	eb43 0901 	adc.w	r9, r3, r1
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	4699      	mov	r9, r3
 8004bda:	4623      	mov	r3, r4
 8004bdc:	eb18 0303 	adds.w	r3, r8, r3
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be4:	462b      	mov	r3, r5
 8004be6:	eb49 0303 	adc.w	r3, r9, r3
 8004bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c02:	460b      	mov	r3, r1
 8004c04:	18db      	adds	r3, r3, r3
 8004c06:	653b      	str	r3, [r7, #80]	; 0x50
 8004c08:	4613      	mov	r3, r2
 8004c0a:	eb42 0303 	adc.w	r3, r2, r3
 8004c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c18:	f7fb fb62 	bl	80002e0 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011c      	lsls	r4, r3, #4
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c44:	415b      	adcs	r3, r3
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb43 0b01 	adc.w	fp, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c6c:	4692      	mov	sl, r2
 8004c6e:	469b      	mov	fp, r3
 8004c70:	4643      	mov	r3, r8
 8004c72:	eb1a 0303 	adds.w	r3, sl, r3
 8004c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	18db      	adds	r3, r3, r3
 8004c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cae:	f7fb fb17 	bl	80002e0 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004cba:	fba3 2301 	umull	r2, r3, r3, r1
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2264      	movs	r2, #100	; 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	1acb      	subs	r3, r1, r3
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cdc:	441c      	add	r4, r3
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d00:	4641      	mov	r1, r8
 8004d02:	1851      	adds	r1, r2, r1
 8004d04:	6339      	str	r1, [r7, #48]	; 0x30
 8004d06:	4649      	mov	r1, r9
 8004d08:	414b      	adcs	r3, r1
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d18:	4659      	mov	r1, fp
 8004d1a:	00cb      	lsls	r3, r1, #3
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d22:	4651      	mov	r1, sl
 8004d24:	00ca      	lsls	r2, r1, #3
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d34:	464b      	mov	r3, r9
 8004d36:	460a      	mov	r2, r1
 8004d38:	eb42 0303 	adc.w	r3, r2, r3
 8004d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d54:	460b      	mov	r3, r1
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d6a:	f7fb fab9 	bl	80002e0 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004d74:	fba3 1302 	umull	r1, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	2164      	movs	r1, #100	; 0x64
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	3332      	adds	r3, #50	; 0x32
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 0207 	and.w	r2, r3, #7
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4422      	add	r2, r4
 8004d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d9c:	e106      	b.n	8004fac <UART_SetConfig+0x4d8>
 8004d9e:	bf00      	nop
 8004da0:	40011000 	.word	0x40011000
 8004da4:	40011400 	.word	0x40011400
 8004da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	6239      	str	r1, [r7, #32]
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dce:	4641      	mov	r1, r8
 8004dd0:	1854      	adds	r4, r2, r1
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	eb43 0501 	adc.w	r5, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	00eb      	lsls	r3, r5, #3
 8004de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de6:	00e2      	lsls	r2, r4, #3
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	18e3      	adds	r3, r4, r3
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df4:	464b      	mov	r3, r9
 8004df6:	eb45 0303 	adc.w	r3, r5, r3
 8004dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	008b      	lsls	r3, r1, #2
 8004e1e:	4621      	mov	r1, r4
 8004e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e24:	4621      	mov	r1, r4
 8004e26:	008a      	lsls	r2, r1, #2
 8004e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e2c:	f7fb fa58 	bl	80002e0 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b60      	ldr	r3, [pc, #384]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011c      	lsls	r4, r3, #4
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	61b9      	str	r1, [r7, #24]
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e60:	4641      	mov	r1, r8
 8004e62:	1851      	adds	r1, r2, r1
 8004e64:	6139      	str	r1, [r7, #16]
 8004e66:	4649      	mov	r1, r9
 8004e68:	414b      	adcs	r3, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e78:	4659      	mov	r1, fp
 8004e7a:	00cb      	lsls	r3, r1, #3
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e82:	4651      	mov	r1, sl
 8004e84:	00ca      	lsls	r2, r1, #3
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e94:	464b      	mov	r3, r9
 8004e96:	460a      	mov	r2, r1
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eb8:	4649      	mov	r1, r9
 8004eba:	008b      	lsls	r3, r1, #2
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	008a      	lsls	r2, r1, #2
 8004ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eca:	f7fb fa09 	bl	80002e0 <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4b38      	ldr	r3, [pc, #224]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2264      	movs	r2, #100	; 0x64
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	1acb      	subs	r3, r1, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	; 0x32
 8004ee8:	4a33      	ldr	r2, [pc, #204]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	673b      	str	r3, [r7, #112]	; 0x70
 8004efe:	677a      	str	r2, [r7, #116]	; 0x74
 8004f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f46:	464b      	mov	r3, r9
 8004f48:	460a      	mov	r2, r1
 8004f4a:	eb42 0303 	adc.w	r3, r2, r3
 8004f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f68:	4649      	mov	r1, r9
 8004f6a:	008b      	lsls	r3, r1, #2
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f72:	4641      	mov	r1, r8
 8004f74:	008a      	lsls	r2, r1, #2
 8004f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f7a:	f7fb f9b1 	bl	80002e0 <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2164      	movs	r1, #100	; 0x64
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	3332      	adds	r3, #50	; 0x32
 8004f96:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 020f 	and.w	r2, r3, #15
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4422      	add	r2, r4
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb8:	51eb851f 	.word	0x51eb851f

08004fbc <std>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fca:	6083      	str	r3, [r0, #8]
 8004fcc:	8181      	strh	r1, [r0, #12]
 8004fce:	6643      	str	r3, [r0, #100]	; 0x64
 8004fd0:	81c2      	strh	r2, [r0, #14]
 8004fd2:	6183      	str	r3, [r0, #24]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	305c      	adds	r0, #92	; 0x5c
 8004fda:	f000 fa17 	bl	800540c <memset>
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <std+0x58>)
 8004fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <std+0x5c>)
 8004fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <std+0x60>)
 8004fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <std+0x64>)
 8004fec:	6323      	str	r3, [r4, #48]	; 0x30
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <std+0x68>)
 8004ff0:	6224      	str	r4, [r4, #32]
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d006      	beq.n	8005004 <std+0x48>
 8004ff6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ffa:	4294      	cmp	r4, r2
 8004ffc:	d002      	beq.n	8005004 <std+0x48>
 8004ffe:	33d0      	adds	r3, #208	; 0xd0
 8005000:	429c      	cmp	r4, r3
 8005002:	d105      	bne.n	8005010 <std+0x54>
 8005004:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 ba76 	b.w	80054fc <__retarget_lock_init_recursive>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	0800525d 	.word	0x0800525d
 8005018:	0800527f 	.word	0x0800527f
 800501c:	080052b7 	.word	0x080052b7
 8005020:	080052db 	.word	0x080052db
 8005024:	20000358 	.word	0x20000358

08005028 <stdio_exit_handler>:
 8005028:	4a02      	ldr	r2, [pc, #8]	; (8005034 <stdio_exit_handler+0xc>)
 800502a:	4903      	ldr	r1, [pc, #12]	; (8005038 <stdio_exit_handler+0x10>)
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <stdio_exit_handler+0x14>)
 800502e:	f000 b869 	b.w	8005104 <_fwalk_sglue>
 8005032:	bf00      	nop
 8005034:	200000d4 	.word	0x200000d4
 8005038:	08006059 	.word	0x08006059
 800503c:	200000e0 	.word	0x200000e0

08005040 <cleanup_stdio>:
 8005040:	6841      	ldr	r1, [r0, #4]
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <cleanup_stdio+0x34>)
 8005044:	4299      	cmp	r1, r3
 8005046:	b510      	push	{r4, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	d001      	beq.n	8005050 <cleanup_stdio+0x10>
 800504c:	f001 f804 	bl	8006058 <_fflush_r>
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <cleanup_stdio+0x38>)
 8005054:	4299      	cmp	r1, r3
 8005056:	d002      	beq.n	800505e <cleanup_stdio+0x1e>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fffd 	bl	8006058 <_fflush_r>
 800505e:	68e1      	ldr	r1, [r4, #12]
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <cleanup_stdio+0x3c>)
 8005062:	4299      	cmp	r1, r3
 8005064:	d004      	beq.n	8005070 <cleanup_stdio+0x30>
 8005066:	4620      	mov	r0, r4
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f000 bff4 	b.w	8006058 <_fflush_r>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	20000358 	.word	0x20000358
 8005078:	200003c0 	.word	0x200003c0
 800507c:	20000428 	.word	0x20000428

08005080 <global_stdio_init.part.0>:
 8005080:	b510      	push	{r4, lr}
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <global_stdio_init.part.0+0x30>)
 8005084:	4c0b      	ldr	r4, [pc, #44]	; (80050b4 <global_stdio_init.part.0+0x34>)
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <global_stdio_init.part.0+0x38>)
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	4620      	mov	r0, r4
 800508c:	2200      	movs	r2, #0
 800508e:	2104      	movs	r1, #4
 8005090:	f7ff ff94 	bl	8004fbc <std>
 8005094:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005098:	2201      	movs	r2, #1
 800509a:	2109      	movs	r1, #9
 800509c:	f7ff ff8e 	bl	8004fbc <std>
 80050a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050a4:	2202      	movs	r2, #2
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	2112      	movs	r1, #18
 80050ac:	f7ff bf86 	b.w	8004fbc <std>
 80050b0:	20000490 	.word	0x20000490
 80050b4:	20000358 	.word	0x20000358
 80050b8:	08005029 	.word	0x08005029

080050bc <__sfp_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_acquire+0x8>)
 80050be:	f000 ba1e 	b.w	80054fe <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000499 	.word	0x20000499

080050c8 <__sfp_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sfp_lock_release+0x8>)
 80050ca:	f000 ba19 	b.w	8005500 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	20000499 	.word	0x20000499

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sfp_lock_acquire>
 80050dc:	6a23      	ldr	r3, [r4, #32]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sfp_lock_release>
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <__sinit+0x28>)
 80050ea:	6223      	str	r3, [r4, #32]
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <__sinit+0x2c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f5      	bne.n	80050e0 <__sinit+0xc>
 80050f4:	f7ff ffc4 	bl	8005080 <global_stdio_init.part.0>
 80050f8:	e7f2      	b.n	80050e0 <__sinit+0xc>
 80050fa:	bf00      	nop
 80050fc:	08005041 	.word	0x08005041
 8005100:	20000490 	.word	0x20000490

08005104 <_fwalk_sglue>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4607      	mov	r7, r0
 800510a:	4688      	mov	r8, r1
 800510c:	4614      	mov	r4, r2
 800510e:	2600      	movs	r6, #0
 8005110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005114:	f1b9 0901 	subs.w	r9, r9, #1
 8005118:	d505      	bpl.n	8005126 <_fwalk_sglue+0x22>
 800511a:	6824      	ldr	r4, [r4, #0]
 800511c:	2c00      	cmp	r4, #0
 800511e:	d1f7      	bne.n	8005110 <_fwalk_sglue+0xc>
 8005120:	4630      	mov	r0, r6
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d907      	bls.n	800513c <_fwalk_sglue+0x38>
 800512c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005130:	3301      	adds	r3, #1
 8005132:	d003      	beq.n	800513c <_fwalk_sglue+0x38>
 8005134:	4629      	mov	r1, r5
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	4306      	orrs	r6, r0
 800513c:	3568      	adds	r5, #104	; 0x68
 800513e:	e7e9      	b.n	8005114 <_fwalk_sglue+0x10>

08005140 <iprintf>:
 8005140:	b40f      	push	{r0, r1, r2, r3}
 8005142:	b507      	push	{r0, r1, r2, lr}
 8005144:	4906      	ldr	r1, [pc, #24]	; (8005160 <iprintf+0x20>)
 8005146:	ab04      	add	r3, sp, #16
 8005148:	6808      	ldr	r0, [r1, #0]
 800514a:	f853 2b04 	ldr.w	r2, [r3], #4
 800514e:	6881      	ldr	r1, [r0, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	f000 fc51 	bl	80059f8 <_vfiprintf_r>
 8005156:	b003      	add	sp, #12
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	2000012c 	.word	0x2000012c

08005164 <_puts_r>:
 8005164:	6a03      	ldr	r3, [r0, #32]
 8005166:	b570      	push	{r4, r5, r6, lr}
 8005168:	6884      	ldr	r4, [r0, #8]
 800516a:	4605      	mov	r5, r0
 800516c:	460e      	mov	r6, r1
 800516e:	b90b      	cbnz	r3, 8005174 <_puts_r+0x10>
 8005170:	f7ff ffb0 	bl	80050d4 <__sinit>
 8005174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005176:	07db      	lsls	r3, r3, #31
 8005178:	d405      	bmi.n	8005186 <_puts_r+0x22>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	0598      	lsls	r0, r3, #22
 800517e:	d402      	bmi.n	8005186 <_puts_r+0x22>
 8005180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005182:	f000 f9bc 	bl	80054fe <__retarget_lock_acquire_recursive>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d513      	bpl.n	80051b4 <_puts_r+0x50>
 800518c:	6923      	ldr	r3, [r4, #16]
 800518e:	b18b      	cbz	r3, 80051b4 <_puts_r+0x50>
 8005190:	3e01      	subs	r6, #1
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005198:	3b01      	subs	r3, #1
 800519a:	60a3      	str	r3, [r4, #8]
 800519c:	b9e9      	cbnz	r1, 80051da <_puts_r+0x76>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	da2e      	bge.n	8005200 <_puts_r+0x9c>
 80051a2:	4622      	mov	r2, r4
 80051a4:	210a      	movs	r1, #10
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f89b 	bl	80052e2 <__swbuf_r>
 80051ac:	3001      	adds	r0, #1
 80051ae:	d007      	beq.n	80051c0 <_puts_r+0x5c>
 80051b0:	250a      	movs	r5, #10
 80051b2:	e007      	b.n	80051c4 <_puts_r+0x60>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f000 f8d0 	bl	800535c <__swsetup_r>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d0e7      	beq.n	8005190 <_puts_r+0x2c>
 80051c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80051c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c6:	07da      	lsls	r2, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_puts_r+0x72>
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	059b      	lsls	r3, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_puts_r+0x72>
 80051d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051d2:	f000 f995 	bl	8005500 <__retarget_lock_release_recursive>
 80051d6:	4628      	mov	r0, r5
 80051d8:	bd70      	pop	{r4, r5, r6, pc}
 80051da:	2b00      	cmp	r3, #0
 80051dc:	da04      	bge.n	80051e8 <_puts_r+0x84>
 80051de:	69a2      	ldr	r2, [r4, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dc06      	bgt.n	80051f2 <_puts_r+0x8e>
 80051e4:	290a      	cmp	r1, #10
 80051e6:	d004      	beq.n	80051f2 <_puts_r+0x8e>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	7019      	strb	r1, [r3, #0]
 80051f0:	e7cf      	b.n	8005192 <_puts_r+0x2e>
 80051f2:	4622      	mov	r2, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f874 	bl	80052e2 <__swbuf_r>
 80051fa:	3001      	adds	r0, #1
 80051fc:	d1c9      	bne.n	8005192 <_puts_r+0x2e>
 80051fe:	e7df      	b.n	80051c0 <_puts_r+0x5c>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	250a      	movs	r5, #10
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	701d      	strb	r5, [r3, #0]
 800520a:	e7db      	b.n	80051c4 <_puts_r+0x60>

0800520c <puts>:
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <puts+0xc>)
 800520e:	4601      	mov	r1, r0
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f7ff bfa7 	b.w	8005164 <_puts_r>
 8005216:	bf00      	nop
 8005218:	2000012c 	.word	0x2000012c

0800521c <siprintf>:
 800521c:	b40e      	push	{r1, r2, r3}
 800521e:	b500      	push	{lr}
 8005220:	b09c      	sub	sp, #112	; 0x70
 8005222:	ab1d      	add	r3, sp, #116	; 0x74
 8005224:	9002      	str	r0, [sp, #8]
 8005226:	9006      	str	r0, [sp, #24]
 8005228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800522c:	4809      	ldr	r0, [pc, #36]	; (8005254 <siprintf+0x38>)
 800522e:	9107      	str	r1, [sp, #28]
 8005230:	9104      	str	r1, [sp, #16]
 8005232:	4909      	ldr	r1, [pc, #36]	; (8005258 <siprintf+0x3c>)
 8005234:	f853 2b04 	ldr.w	r2, [r3], #4
 8005238:	9105      	str	r1, [sp, #20]
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	a902      	add	r1, sp, #8
 8005240:	f000 fab2 	bl	80057a8 <_svfiprintf_r>
 8005244:	9b02      	ldr	r3, [sp, #8]
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	b01c      	add	sp, #112	; 0x70
 800524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005250:	b003      	add	sp, #12
 8005252:	4770      	bx	lr
 8005254:	2000012c 	.word	0x2000012c
 8005258:	ffff0208 	.word	0xffff0208

0800525c <__sread>:
 800525c:	b510      	push	{r4, lr}
 800525e:	460c      	mov	r4, r1
 8005260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005264:	f000 f8fc 	bl	8005460 <_read_r>
 8005268:	2800      	cmp	r0, #0
 800526a:	bfab      	itete	ge
 800526c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800526e:	89a3      	ldrhlt	r3, [r4, #12]
 8005270:	181b      	addge	r3, r3, r0
 8005272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005276:	bfac      	ite	ge
 8005278:	6563      	strge	r3, [r4, #84]	; 0x54
 800527a:	81a3      	strhlt	r3, [r4, #12]
 800527c:	bd10      	pop	{r4, pc}

0800527e <__swrite>:
 800527e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	461f      	mov	r7, r3
 8005284:	898b      	ldrh	r3, [r1, #12]
 8005286:	05db      	lsls	r3, r3, #23
 8005288:	4605      	mov	r5, r0
 800528a:	460c      	mov	r4, r1
 800528c:	4616      	mov	r6, r2
 800528e:	d505      	bpl.n	800529c <__swrite+0x1e>
 8005290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005294:	2302      	movs	r3, #2
 8005296:	2200      	movs	r2, #0
 8005298:	f000 f8d0 	bl	800543c <_lseek_r>
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	4632      	mov	r2, r6
 80052aa:	463b      	mov	r3, r7
 80052ac:	4628      	mov	r0, r5
 80052ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b2:	f000 b8e7 	b.w	8005484 <_write_r>

080052b6 <__sseek>:
 80052b6:	b510      	push	{r4, lr}
 80052b8:	460c      	mov	r4, r1
 80052ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052be:	f000 f8bd 	bl	800543c <_lseek_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	bf15      	itete	ne
 80052c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052d2:	81a3      	strheq	r3, [r4, #12]
 80052d4:	bf18      	it	ne
 80052d6:	81a3      	strhne	r3, [r4, #12]
 80052d8:	bd10      	pop	{r4, pc}

080052da <__sclose>:
 80052da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052de:	f000 b89d 	b.w	800541c <_close_r>

080052e2 <__swbuf_r>:
 80052e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e4:	460e      	mov	r6, r1
 80052e6:	4614      	mov	r4, r2
 80052e8:	4605      	mov	r5, r0
 80052ea:	b118      	cbz	r0, 80052f4 <__swbuf_r+0x12>
 80052ec:	6a03      	ldr	r3, [r0, #32]
 80052ee:	b90b      	cbnz	r3, 80052f4 <__swbuf_r+0x12>
 80052f0:	f7ff fef0 	bl	80050d4 <__sinit>
 80052f4:	69a3      	ldr	r3, [r4, #24]
 80052f6:	60a3      	str	r3, [r4, #8]
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	071a      	lsls	r2, r3, #28
 80052fc:	d525      	bpl.n	800534a <__swbuf_r+0x68>
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	b31b      	cbz	r3, 800534a <__swbuf_r+0x68>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	1a98      	subs	r0, r3, r2
 8005308:	6963      	ldr	r3, [r4, #20]
 800530a:	b2f6      	uxtb	r6, r6
 800530c:	4283      	cmp	r3, r0
 800530e:	4637      	mov	r7, r6
 8005310:	dc04      	bgt.n	800531c <__swbuf_r+0x3a>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 fe9f 	bl	8006058 <_fflush_r>
 800531a:	b9e0      	cbnz	r0, 8005356 <__swbuf_r+0x74>
 800531c:	68a3      	ldr	r3, [r4, #8]
 800531e:	3b01      	subs	r3, #1
 8005320:	60a3      	str	r3, [r4, #8]
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	701e      	strb	r6, [r3, #0]
 800532a:	6962      	ldr	r2, [r4, #20]
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	429a      	cmp	r2, r3
 8005330:	d004      	beq.n	800533c <__swbuf_r+0x5a>
 8005332:	89a3      	ldrh	r3, [r4, #12]
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	d506      	bpl.n	8005346 <__swbuf_r+0x64>
 8005338:	2e0a      	cmp	r6, #10
 800533a:	d104      	bne.n	8005346 <__swbuf_r+0x64>
 800533c:	4621      	mov	r1, r4
 800533e:	4628      	mov	r0, r5
 8005340:	f000 fe8a 	bl	8006058 <_fflush_r>
 8005344:	b938      	cbnz	r0, 8005356 <__swbuf_r+0x74>
 8005346:	4638      	mov	r0, r7
 8005348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800534a:	4621      	mov	r1, r4
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f805 	bl	800535c <__swsetup_r>
 8005352:	2800      	cmp	r0, #0
 8005354:	d0d5      	beq.n	8005302 <__swbuf_r+0x20>
 8005356:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800535a:	e7f4      	b.n	8005346 <__swbuf_r+0x64>

0800535c <__swsetup_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <__swsetup_r+0xac>)
 8005360:	4605      	mov	r5, r0
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	460c      	mov	r4, r1
 8005366:	b118      	cbz	r0, 8005370 <__swsetup_r+0x14>
 8005368:	6a03      	ldr	r3, [r0, #32]
 800536a:	b90b      	cbnz	r3, 8005370 <__swsetup_r+0x14>
 800536c:	f7ff feb2 	bl	80050d4 <__sinit>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005376:	0718      	lsls	r0, r3, #28
 8005378:	d422      	bmi.n	80053c0 <__swsetup_r+0x64>
 800537a:	06d9      	lsls	r1, r3, #27
 800537c:	d407      	bmi.n	800538e <__swsetup_r+0x32>
 800537e:	2309      	movs	r3, #9
 8005380:	602b      	str	r3, [r5, #0]
 8005382:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800538c:	e034      	b.n	80053f8 <__swsetup_r+0x9c>
 800538e:	0758      	lsls	r0, r3, #29
 8005390:	d512      	bpl.n	80053b8 <__swsetup_r+0x5c>
 8005392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005394:	b141      	cbz	r1, 80053a8 <__swsetup_r+0x4c>
 8005396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800539a:	4299      	cmp	r1, r3
 800539c:	d002      	beq.n	80053a4 <__swsetup_r+0x48>
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f8b0 	bl	8005504 <_free_r>
 80053a4:	2300      	movs	r3, #0
 80053a6:	6363      	str	r3, [r4, #52]	; 0x34
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	2300      	movs	r3, #0
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f043 0308 	orr.w	r3, r3, #8
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	b94b      	cbnz	r3, 80053d8 <__swsetup_r+0x7c>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ce:	d003      	beq.n	80053d8 <__swsetup_r+0x7c>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4628      	mov	r0, r5
 80053d4:	f000 fe8e 	bl	80060f4 <__smakebuf_r>
 80053d8:	89a0      	ldrh	r0, [r4, #12]
 80053da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053de:	f010 0301 	ands.w	r3, r0, #1
 80053e2:	d00a      	beq.n	80053fa <__swsetup_r+0x9e>
 80053e4:	2300      	movs	r3, #0
 80053e6:	60a3      	str	r3, [r4, #8]
 80053e8:	6963      	ldr	r3, [r4, #20]
 80053ea:	425b      	negs	r3, r3
 80053ec:	61a3      	str	r3, [r4, #24]
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	b943      	cbnz	r3, 8005404 <__swsetup_r+0xa8>
 80053f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053f6:	d1c4      	bne.n	8005382 <__swsetup_r+0x26>
 80053f8:	bd38      	pop	{r3, r4, r5, pc}
 80053fa:	0781      	lsls	r1, r0, #30
 80053fc:	bf58      	it	pl
 80053fe:	6963      	ldrpl	r3, [r4, #20]
 8005400:	60a3      	str	r3, [r4, #8]
 8005402:	e7f4      	b.n	80053ee <__swsetup_r+0x92>
 8005404:	2000      	movs	r0, #0
 8005406:	e7f7      	b.n	80053f8 <__swsetup_r+0x9c>
 8005408:	2000012c 	.word	0x2000012c

0800540c <memset>:
 800540c:	4402      	add	r2, r0
 800540e:	4603      	mov	r3, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	d100      	bne.n	8005416 <memset+0xa>
 8005414:	4770      	bx	lr
 8005416:	f803 1b01 	strb.w	r1, [r3], #1
 800541a:	e7f9      	b.n	8005410 <memset+0x4>

0800541c <_close_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d06      	ldr	r5, [pc, #24]	; (8005438 <_close_r+0x1c>)
 8005420:	2300      	movs	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	f7fb ff97 	bl	800135a <_close>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_close_r+0x1a>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_close_r+0x1a>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	20000494 	.word	0x20000494

0800543c <_lseek_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4d07      	ldr	r5, [pc, #28]	; (800545c <_lseek_r+0x20>)
 8005440:	4604      	mov	r4, r0
 8005442:	4608      	mov	r0, r1
 8005444:	4611      	mov	r1, r2
 8005446:	2200      	movs	r2, #0
 8005448:	602a      	str	r2, [r5, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	f7fb ffac 	bl	80013a8 <_lseek>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_lseek_r+0x1e>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_lseek_r+0x1e>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	20000494 	.word	0x20000494

08005460 <_read_r>:
 8005460:	b538      	push	{r3, r4, r5, lr}
 8005462:	4d07      	ldr	r5, [pc, #28]	; (8005480 <_read_r+0x20>)
 8005464:	4604      	mov	r4, r0
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	f7fb ff3a 	bl	80012e8 <_read>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_read_r+0x1e>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_read_r+0x1e>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	20000494 	.word	0x20000494

08005484 <_write_r>:
 8005484:	b538      	push	{r3, r4, r5, lr}
 8005486:	4d07      	ldr	r5, [pc, #28]	; (80054a4 <_write_r+0x20>)
 8005488:	4604      	mov	r4, r0
 800548a:	4608      	mov	r0, r1
 800548c:	4611      	mov	r1, r2
 800548e:	2200      	movs	r2, #0
 8005490:	602a      	str	r2, [r5, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	f7fb ff45 	bl	8001322 <_write>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_write_r+0x1e>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_write_r+0x1e>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20000494 	.word	0x20000494

080054a8 <__errno>:
 80054a8:	4b01      	ldr	r3, [pc, #4]	; (80054b0 <__errno+0x8>)
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	2000012c 	.word	0x2000012c

080054b4 <__libc_init_array>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4d0d      	ldr	r5, [pc, #52]	; (80054ec <__libc_init_array+0x38>)
 80054b8:	4c0d      	ldr	r4, [pc, #52]	; (80054f0 <__libc_init_array+0x3c>)
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	2600      	movs	r6, #0
 80054c0:	42a6      	cmp	r6, r4
 80054c2:	d109      	bne.n	80054d8 <__libc_init_array+0x24>
 80054c4:	4d0b      	ldr	r5, [pc, #44]	; (80054f4 <__libc_init_array+0x40>)
 80054c6:	4c0c      	ldr	r4, [pc, #48]	; (80054f8 <__libc_init_array+0x44>)
 80054c8:	f000 fee2 	bl	8006290 <_init>
 80054cc:	1b64      	subs	r4, r4, r5
 80054ce:	10a4      	asrs	r4, r4, #2
 80054d0:	2600      	movs	r6, #0
 80054d2:	42a6      	cmp	r6, r4
 80054d4:	d105      	bne.n	80054e2 <__libc_init_array+0x2e>
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054dc:	4798      	blx	r3
 80054de:	3601      	adds	r6, #1
 80054e0:	e7ee      	b.n	80054c0 <__libc_init_array+0xc>
 80054e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e6:	4798      	blx	r3
 80054e8:	3601      	adds	r6, #1
 80054ea:	e7f2      	b.n	80054d2 <__libc_init_array+0x1e>
 80054ec:	080066fc 	.word	0x080066fc
 80054f0:	080066fc 	.word	0x080066fc
 80054f4:	080066fc 	.word	0x080066fc
 80054f8:	08006700 	.word	0x08006700

080054fc <__retarget_lock_init_recursive>:
 80054fc:	4770      	bx	lr

080054fe <__retarget_lock_acquire_recursive>:
 80054fe:	4770      	bx	lr

08005500 <__retarget_lock_release_recursive>:
 8005500:	4770      	bx	lr
	...

08005504 <_free_r>:
 8005504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005506:	2900      	cmp	r1, #0
 8005508:	d044      	beq.n	8005594 <_free_r+0x90>
 800550a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800550e:	9001      	str	r0, [sp, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f1a1 0404 	sub.w	r4, r1, #4
 8005516:	bfb8      	it	lt
 8005518:	18e4      	addlt	r4, r4, r3
 800551a:	f000 f8df 	bl	80056dc <__malloc_lock>
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <_free_r+0x94>)
 8005520:	9801      	ldr	r0, [sp, #4]
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	b933      	cbnz	r3, 8005534 <_free_r+0x30>
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6014      	str	r4, [r2, #0]
 800552a:	b003      	add	sp, #12
 800552c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005530:	f000 b8da 	b.w	80056e8 <__malloc_unlock>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d908      	bls.n	800554a <_free_r+0x46>
 8005538:	6825      	ldr	r5, [r4, #0]
 800553a:	1961      	adds	r1, r4, r5
 800553c:	428b      	cmp	r3, r1
 800553e:	bf01      	itttt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	1949      	addeq	r1, r1, r5
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	e7ed      	b.n	8005526 <_free_r+0x22>
 800554a:	461a      	mov	r2, r3
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b10b      	cbz	r3, 8005554 <_free_r+0x50>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d9fa      	bls.n	800554a <_free_r+0x46>
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	1855      	adds	r5, r2, r1
 8005558:	42a5      	cmp	r5, r4
 800555a:	d10b      	bne.n	8005574 <_free_r+0x70>
 800555c:	6824      	ldr	r4, [r4, #0]
 800555e:	4421      	add	r1, r4
 8005560:	1854      	adds	r4, r2, r1
 8005562:	42a3      	cmp	r3, r4
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	d1e0      	bne.n	800552a <_free_r+0x26>
 8005568:	681c      	ldr	r4, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6053      	str	r3, [r2, #4]
 800556e:	440c      	add	r4, r1
 8005570:	6014      	str	r4, [r2, #0]
 8005572:	e7da      	b.n	800552a <_free_r+0x26>
 8005574:	d902      	bls.n	800557c <_free_r+0x78>
 8005576:	230c      	movs	r3, #12
 8005578:	6003      	str	r3, [r0, #0]
 800557a:	e7d6      	b.n	800552a <_free_r+0x26>
 800557c:	6825      	ldr	r5, [r4, #0]
 800557e:	1961      	adds	r1, r4, r5
 8005580:	428b      	cmp	r3, r1
 8005582:	bf04      	itt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	6063      	str	r3, [r4, #4]
 800558a:	bf04      	itt	eq
 800558c:	1949      	addeq	r1, r1, r5
 800558e:	6021      	streq	r1, [r4, #0]
 8005590:	6054      	str	r4, [r2, #4]
 8005592:	e7ca      	b.n	800552a <_free_r+0x26>
 8005594:	b003      	add	sp, #12
 8005596:	bd30      	pop	{r4, r5, pc}
 8005598:	2000049c 	.word	0x2000049c

0800559c <sbrk_aligned>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4e0e      	ldr	r6, [pc, #56]	; (80055d8 <sbrk_aligned+0x3c>)
 80055a0:	460c      	mov	r4, r1
 80055a2:	6831      	ldr	r1, [r6, #0]
 80055a4:	4605      	mov	r5, r0
 80055a6:	b911      	cbnz	r1, 80055ae <sbrk_aligned+0x12>
 80055a8:	f000 fe1c 	bl	80061e4 <_sbrk_r>
 80055ac:	6030      	str	r0, [r6, #0]
 80055ae:	4621      	mov	r1, r4
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 fe17 	bl	80061e4 <_sbrk_r>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d00a      	beq.n	80055d0 <sbrk_aligned+0x34>
 80055ba:	1cc4      	adds	r4, r0, #3
 80055bc:	f024 0403 	bic.w	r4, r4, #3
 80055c0:	42a0      	cmp	r0, r4
 80055c2:	d007      	beq.n	80055d4 <sbrk_aligned+0x38>
 80055c4:	1a21      	subs	r1, r4, r0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fe0c 	bl	80061e4 <_sbrk_r>
 80055cc:	3001      	adds	r0, #1
 80055ce:	d101      	bne.n	80055d4 <sbrk_aligned+0x38>
 80055d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055d4:	4620      	mov	r0, r4
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	200004a0 	.word	0x200004a0

080055dc <_malloc_r>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	1ccd      	adds	r5, r1, #3
 80055e2:	f025 0503 	bic.w	r5, r5, #3
 80055e6:	3508      	adds	r5, #8
 80055e8:	2d0c      	cmp	r5, #12
 80055ea:	bf38      	it	cc
 80055ec:	250c      	movcc	r5, #12
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	4607      	mov	r7, r0
 80055f2:	db01      	blt.n	80055f8 <_malloc_r+0x1c>
 80055f4:	42a9      	cmp	r1, r5
 80055f6:	d905      	bls.n	8005604 <_malloc_r+0x28>
 80055f8:	230c      	movs	r3, #12
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	2600      	movs	r6, #0
 80055fe:	4630      	mov	r0, r6
 8005600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005604:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056d8 <_malloc_r+0xfc>
 8005608:	f000 f868 	bl	80056dc <__malloc_lock>
 800560c:	f8d8 3000 	ldr.w	r3, [r8]
 8005610:	461c      	mov	r4, r3
 8005612:	bb5c      	cbnz	r4, 800566c <_malloc_r+0x90>
 8005614:	4629      	mov	r1, r5
 8005616:	4638      	mov	r0, r7
 8005618:	f7ff ffc0 	bl	800559c <sbrk_aligned>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	4604      	mov	r4, r0
 8005620:	d155      	bne.n	80056ce <_malloc_r+0xf2>
 8005622:	f8d8 4000 	ldr.w	r4, [r8]
 8005626:	4626      	mov	r6, r4
 8005628:	2e00      	cmp	r6, #0
 800562a:	d145      	bne.n	80056b8 <_malloc_r+0xdc>
 800562c:	2c00      	cmp	r4, #0
 800562e:	d048      	beq.n	80056c2 <_malloc_r+0xe6>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	4631      	mov	r1, r6
 8005634:	4638      	mov	r0, r7
 8005636:	eb04 0903 	add.w	r9, r4, r3
 800563a:	f000 fdd3 	bl	80061e4 <_sbrk_r>
 800563e:	4581      	cmp	r9, r0
 8005640:	d13f      	bne.n	80056c2 <_malloc_r+0xe6>
 8005642:	6821      	ldr	r1, [r4, #0]
 8005644:	1a6d      	subs	r5, r5, r1
 8005646:	4629      	mov	r1, r5
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff ffa7 	bl	800559c <sbrk_aligned>
 800564e:	3001      	adds	r0, #1
 8005650:	d037      	beq.n	80056c2 <_malloc_r+0xe6>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	442b      	add	r3, r5
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	f8d8 3000 	ldr.w	r3, [r8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d038      	beq.n	80056d2 <_malloc_r+0xf6>
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	42a2      	cmp	r2, r4
 8005664:	d12b      	bne.n	80056be <_malloc_r+0xe2>
 8005666:	2200      	movs	r2, #0
 8005668:	605a      	str	r2, [r3, #4]
 800566a:	e00f      	b.n	800568c <_malloc_r+0xb0>
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	1b52      	subs	r2, r2, r5
 8005670:	d41f      	bmi.n	80056b2 <_malloc_r+0xd6>
 8005672:	2a0b      	cmp	r2, #11
 8005674:	d917      	bls.n	80056a6 <_malloc_r+0xca>
 8005676:	1961      	adds	r1, r4, r5
 8005678:	42a3      	cmp	r3, r4
 800567a:	6025      	str	r5, [r4, #0]
 800567c:	bf18      	it	ne
 800567e:	6059      	strne	r1, [r3, #4]
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	bf08      	it	eq
 8005684:	f8c8 1000 	streq.w	r1, [r8]
 8005688:	5162      	str	r2, [r4, r5]
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	4638      	mov	r0, r7
 800568e:	f104 060b 	add.w	r6, r4, #11
 8005692:	f000 f829 	bl	80056e8 <__malloc_unlock>
 8005696:	f026 0607 	bic.w	r6, r6, #7
 800569a:	1d23      	adds	r3, r4, #4
 800569c:	1af2      	subs	r2, r6, r3
 800569e:	d0ae      	beq.n	80055fe <_malloc_r+0x22>
 80056a0:	1b9b      	subs	r3, r3, r6
 80056a2:	50a3      	str	r3, [r4, r2]
 80056a4:	e7ab      	b.n	80055fe <_malloc_r+0x22>
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	6862      	ldr	r2, [r4, #4]
 80056aa:	d1dd      	bne.n	8005668 <_malloc_r+0x8c>
 80056ac:	f8c8 2000 	str.w	r2, [r8]
 80056b0:	e7ec      	b.n	800568c <_malloc_r+0xb0>
 80056b2:	4623      	mov	r3, r4
 80056b4:	6864      	ldr	r4, [r4, #4]
 80056b6:	e7ac      	b.n	8005612 <_malloc_r+0x36>
 80056b8:	4634      	mov	r4, r6
 80056ba:	6876      	ldr	r6, [r6, #4]
 80056bc:	e7b4      	b.n	8005628 <_malloc_r+0x4c>
 80056be:	4613      	mov	r3, r2
 80056c0:	e7cc      	b.n	800565c <_malloc_r+0x80>
 80056c2:	230c      	movs	r3, #12
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4638      	mov	r0, r7
 80056c8:	f000 f80e 	bl	80056e8 <__malloc_unlock>
 80056cc:	e797      	b.n	80055fe <_malloc_r+0x22>
 80056ce:	6025      	str	r5, [r4, #0]
 80056d0:	e7dc      	b.n	800568c <_malloc_r+0xb0>
 80056d2:	605b      	str	r3, [r3, #4]
 80056d4:	deff      	udf	#255	; 0xff
 80056d6:	bf00      	nop
 80056d8:	2000049c 	.word	0x2000049c

080056dc <__malloc_lock>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__malloc_lock+0x8>)
 80056de:	f7ff bf0e 	b.w	80054fe <__retarget_lock_acquire_recursive>
 80056e2:	bf00      	nop
 80056e4:	20000498 	.word	0x20000498

080056e8 <__malloc_unlock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_unlock+0x8>)
 80056ea:	f7ff bf09 	b.w	8005500 <__retarget_lock_release_recursive>
 80056ee:	bf00      	nop
 80056f0:	20000498 	.word	0x20000498

080056f4 <__ssputs_r>:
 80056f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f8:	688e      	ldr	r6, [r1, #8]
 80056fa:	461f      	mov	r7, r3
 80056fc:	42be      	cmp	r6, r7
 80056fe:	680b      	ldr	r3, [r1, #0]
 8005700:	4682      	mov	sl, r0
 8005702:	460c      	mov	r4, r1
 8005704:	4690      	mov	r8, r2
 8005706:	d82c      	bhi.n	8005762 <__ssputs_r+0x6e>
 8005708:	898a      	ldrh	r2, [r1, #12]
 800570a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800570e:	d026      	beq.n	800575e <__ssputs_r+0x6a>
 8005710:	6965      	ldr	r5, [r4, #20]
 8005712:	6909      	ldr	r1, [r1, #16]
 8005714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005718:	eba3 0901 	sub.w	r9, r3, r1
 800571c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005720:	1c7b      	adds	r3, r7, #1
 8005722:	444b      	add	r3, r9
 8005724:	106d      	asrs	r5, r5, #1
 8005726:	429d      	cmp	r5, r3
 8005728:	bf38      	it	cc
 800572a:	461d      	movcc	r5, r3
 800572c:	0553      	lsls	r3, r2, #21
 800572e:	d527      	bpl.n	8005780 <__ssputs_r+0x8c>
 8005730:	4629      	mov	r1, r5
 8005732:	f7ff ff53 	bl	80055dc <_malloc_r>
 8005736:	4606      	mov	r6, r0
 8005738:	b360      	cbz	r0, 8005794 <__ssputs_r+0xa0>
 800573a:	6921      	ldr	r1, [r4, #16]
 800573c:	464a      	mov	r2, r9
 800573e:	f000 fd61 	bl	8006204 <memcpy>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574c:	81a3      	strh	r3, [r4, #12]
 800574e:	6126      	str	r6, [r4, #16]
 8005750:	6165      	str	r5, [r4, #20]
 8005752:	444e      	add	r6, r9
 8005754:	eba5 0509 	sub.w	r5, r5, r9
 8005758:	6026      	str	r6, [r4, #0]
 800575a:	60a5      	str	r5, [r4, #8]
 800575c:	463e      	mov	r6, r7
 800575e:	42be      	cmp	r6, r7
 8005760:	d900      	bls.n	8005764 <__ssputs_r+0x70>
 8005762:	463e      	mov	r6, r7
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	4632      	mov	r2, r6
 8005768:	4641      	mov	r1, r8
 800576a:	f000 fcff 	bl	800616c <memmove>
 800576e:	68a3      	ldr	r3, [r4, #8]
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	60a3      	str	r3, [r4, #8]
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	4433      	add	r3, r6
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	2000      	movs	r0, #0
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	462a      	mov	r2, r5
 8005782:	f000 fd4d 	bl	8006220 <_realloc_r>
 8005786:	4606      	mov	r6, r0
 8005788:	2800      	cmp	r0, #0
 800578a:	d1e0      	bne.n	800574e <__ssputs_r+0x5a>
 800578c:	6921      	ldr	r1, [r4, #16]
 800578e:	4650      	mov	r0, sl
 8005790:	f7ff feb8 	bl	8005504 <_free_r>
 8005794:	230c      	movs	r3, #12
 8005796:	f8ca 3000 	str.w	r3, [sl]
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a6:	e7e9      	b.n	800577c <__ssputs_r+0x88>

080057a8 <_svfiprintf_r>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	4698      	mov	r8, r3
 80057ae:	898b      	ldrh	r3, [r1, #12]
 80057b0:	061b      	lsls	r3, r3, #24
 80057b2:	b09d      	sub	sp, #116	; 0x74
 80057b4:	4607      	mov	r7, r0
 80057b6:	460d      	mov	r5, r1
 80057b8:	4614      	mov	r4, r2
 80057ba:	d50e      	bpl.n	80057da <_svfiprintf_r+0x32>
 80057bc:	690b      	ldr	r3, [r1, #16]
 80057be:	b963      	cbnz	r3, 80057da <_svfiprintf_r+0x32>
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	f7ff ff0b 	bl	80055dc <_malloc_r>
 80057c6:	6028      	str	r0, [r5, #0]
 80057c8:	6128      	str	r0, [r5, #16]
 80057ca:	b920      	cbnz	r0, 80057d6 <_svfiprintf_r+0x2e>
 80057cc:	230c      	movs	r3, #12
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d4:	e0d0      	b.n	8005978 <_svfiprintf_r+0x1d0>
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	616b      	str	r3, [r5, #20]
 80057da:	2300      	movs	r3, #0
 80057dc:	9309      	str	r3, [sp, #36]	; 0x24
 80057de:	2320      	movs	r3, #32
 80057e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80057e8:	2330      	movs	r3, #48	; 0x30
 80057ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005990 <_svfiprintf_r+0x1e8>
 80057ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057f2:	f04f 0901 	mov.w	r9, #1
 80057f6:	4623      	mov	r3, r4
 80057f8:	469a      	mov	sl, r3
 80057fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fe:	b10a      	cbz	r2, 8005804 <_svfiprintf_r+0x5c>
 8005800:	2a25      	cmp	r2, #37	; 0x25
 8005802:	d1f9      	bne.n	80057f8 <_svfiprintf_r+0x50>
 8005804:	ebba 0b04 	subs.w	fp, sl, r4
 8005808:	d00b      	beq.n	8005822 <_svfiprintf_r+0x7a>
 800580a:	465b      	mov	r3, fp
 800580c:	4622      	mov	r2, r4
 800580e:	4629      	mov	r1, r5
 8005810:	4638      	mov	r0, r7
 8005812:	f7ff ff6f 	bl	80056f4 <__ssputs_r>
 8005816:	3001      	adds	r0, #1
 8005818:	f000 80a9 	beq.w	800596e <_svfiprintf_r+0x1c6>
 800581c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800581e:	445a      	add	r2, fp
 8005820:	9209      	str	r2, [sp, #36]	; 0x24
 8005822:	f89a 3000 	ldrb.w	r3, [sl]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80a1 	beq.w	800596e <_svfiprintf_r+0x1c6>
 800582c:	2300      	movs	r3, #0
 800582e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005836:	f10a 0a01 	add.w	sl, sl, #1
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005842:	931a      	str	r3, [sp, #104]	; 0x68
 8005844:	4654      	mov	r4, sl
 8005846:	2205      	movs	r2, #5
 8005848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584c:	4850      	ldr	r0, [pc, #320]	; (8005990 <_svfiprintf_r+0x1e8>)
 800584e:	f7fa fcf7 	bl	8000240 <memchr>
 8005852:	9a04      	ldr	r2, [sp, #16]
 8005854:	b9d8      	cbnz	r0, 800588e <_svfiprintf_r+0xe6>
 8005856:	06d0      	lsls	r0, r2, #27
 8005858:	bf44      	itt	mi
 800585a:	2320      	movmi	r3, #32
 800585c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005860:	0711      	lsls	r1, r2, #28
 8005862:	bf44      	itt	mi
 8005864:	232b      	movmi	r3, #43	; 0x2b
 8005866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800586a:	f89a 3000 	ldrb.w	r3, [sl]
 800586e:	2b2a      	cmp	r3, #42	; 0x2a
 8005870:	d015      	beq.n	800589e <_svfiprintf_r+0xf6>
 8005872:	9a07      	ldr	r2, [sp, #28]
 8005874:	4654      	mov	r4, sl
 8005876:	2000      	movs	r0, #0
 8005878:	f04f 0c0a 	mov.w	ip, #10
 800587c:	4621      	mov	r1, r4
 800587e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005882:	3b30      	subs	r3, #48	; 0x30
 8005884:	2b09      	cmp	r3, #9
 8005886:	d94d      	bls.n	8005924 <_svfiprintf_r+0x17c>
 8005888:	b1b0      	cbz	r0, 80058b8 <_svfiprintf_r+0x110>
 800588a:	9207      	str	r2, [sp, #28]
 800588c:	e014      	b.n	80058b8 <_svfiprintf_r+0x110>
 800588e:	eba0 0308 	sub.w	r3, r0, r8
 8005892:	fa09 f303 	lsl.w	r3, r9, r3
 8005896:	4313      	orrs	r3, r2
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	46a2      	mov	sl, r4
 800589c:	e7d2      	b.n	8005844 <_svfiprintf_r+0x9c>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	1d19      	adds	r1, r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	9103      	str	r1, [sp, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfbb      	ittet	lt
 80058aa:	425b      	neglt	r3, r3
 80058ac:	f042 0202 	orrlt.w	r2, r2, #2
 80058b0:	9307      	strge	r3, [sp, #28]
 80058b2:	9307      	strlt	r3, [sp, #28]
 80058b4:	bfb8      	it	lt
 80058b6:	9204      	strlt	r2, [sp, #16]
 80058b8:	7823      	ldrb	r3, [r4, #0]
 80058ba:	2b2e      	cmp	r3, #46	; 0x2e
 80058bc:	d10c      	bne.n	80058d8 <_svfiprintf_r+0x130>
 80058be:	7863      	ldrb	r3, [r4, #1]
 80058c0:	2b2a      	cmp	r3, #42	; 0x2a
 80058c2:	d134      	bne.n	800592e <_svfiprintf_r+0x186>
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	1d1a      	adds	r2, r3, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	9203      	str	r2, [sp, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bfb8      	it	lt
 80058d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80058d4:	3402      	adds	r4, #2
 80058d6:	9305      	str	r3, [sp, #20]
 80058d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80059a0 <_svfiprintf_r+0x1f8>
 80058dc:	7821      	ldrb	r1, [r4, #0]
 80058de:	2203      	movs	r2, #3
 80058e0:	4650      	mov	r0, sl
 80058e2:	f7fa fcad 	bl	8000240 <memchr>
 80058e6:	b138      	cbz	r0, 80058f8 <_svfiprintf_r+0x150>
 80058e8:	9b04      	ldr	r3, [sp, #16]
 80058ea:	eba0 000a 	sub.w	r0, r0, sl
 80058ee:	2240      	movs	r2, #64	; 0x40
 80058f0:	4082      	lsls	r2, r0
 80058f2:	4313      	orrs	r3, r2
 80058f4:	3401      	adds	r4, #1
 80058f6:	9304      	str	r3, [sp, #16]
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	4825      	ldr	r0, [pc, #148]	; (8005994 <_svfiprintf_r+0x1ec>)
 80058fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005902:	2206      	movs	r2, #6
 8005904:	f7fa fc9c 	bl	8000240 <memchr>
 8005908:	2800      	cmp	r0, #0
 800590a:	d038      	beq.n	800597e <_svfiprintf_r+0x1d6>
 800590c:	4b22      	ldr	r3, [pc, #136]	; (8005998 <_svfiprintf_r+0x1f0>)
 800590e:	bb1b      	cbnz	r3, 8005958 <_svfiprintf_r+0x1b0>
 8005910:	9b03      	ldr	r3, [sp, #12]
 8005912:	3307      	adds	r3, #7
 8005914:	f023 0307 	bic.w	r3, r3, #7
 8005918:	3308      	adds	r3, #8
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591e:	4433      	add	r3, r6
 8005920:	9309      	str	r3, [sp, #36]	; 0x24
 8005922:	e768      	b.n	80057f6 <_svfiprintf_r+0x4e>
 8005924:	fb0c 3202 	mla	r2, ip, r2, r3
 8005928:	460c      	mov	r4, r1
 800592a:	2001      	movs	r0, #1
 800592c:	e7a6      	b.n	800587c <_svfiprintf_r+0xd4>
 800592e:	2300      	movs	r3, #0
 8005930:	3401      	adds	r4, #1
 8005932:	9305      	str	r3, [sp, #20]
 8005934:	4619      	mov	r1, r3
 8005936:	f04f 0c0a 	mov.w	ip, #10
 800593a:	4620      	mov	r0, r4
 800593c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005940:	3a30      	subs	r2, #48	; 0x30
 8005942:	2a09      	cmp	r2, #9
 8005944:	d903      	bls.n	800594e <_svfiprintf_r+0x1a6>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0c6      	beq.n	80058d8 <_svfiprintf_r+0x130>
 800594a:	9105      	str	r1, [sp, #20]
 800594c:	e7c4      	b.n	80058d8 <_svfiprintf_r+0x130>
 800594e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005952:	4604      	mov	r4, r0
 8005954:	2301      	movs	r3, #1
 8005956:	e7f0      	b.n	800593a <_svfiprintf_r+0x192>
 8005958:	ab03      	add	r3, sp, #12
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	462a      	mov	r2, r5
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <_svfiprintf_r+0x1f4>)
 8005960:	a904      	add	r1, sp, #16
 8005962:	4638      	mov	r0, r7
 8005964:	f3af 8000 	nop.w
 8005968:	1c42      	adds	r2, r0, #1
 800596a:	4606      	mov	r6, r0
 800596c:	d1d6      	bne.n	800591c <_svfiprintf_r+0x174>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	065b      	lsls	r3, r3, #25
 8005972:	f53f af2d 	bmi.w	80057d0 <_svfiprintf_r+0x28>
 8005976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005978:	b01d      	add	sp, #116	; 0x74
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	ab03      	add	r3, sp, #12
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	462a      	mov	r2, r5
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <_svfiprintf_r+0x1f4>)
 8005986:	a904      	add	r1, sp, #16
 8005988:	4638      	mov	r0, r7
 800598a:	f000 f9bd 	bl	8005d08 <_printf_i>
 800598e:	e7eb      	b.n	8005968 <_svfiprintf_r+0x1c0>
 8005990:	080066c0 	.word	0x080066c0
 8005994:	080066ca 	.word	0x080066ca
 8005998:	00000000 	.word	0x00000000
 800599c:	080056f5 	.word	0x080056f5
 80059a0:	080066c6 	.word	0x080066c6

080059a4 <__sfputc_r>:
 80059a4:	6893      	ldr	r3, [r2, #8]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	b410      	push	{r4}
 80059ac:	6093      	str	r3, [r2, #8]
 80059ae:	da08      	bge.n	80059c2 <__sfputc_r+0x1e>
 80059b0:	6994      	ldr	r4, [r2, #24]
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	db01      	blt.n	80059ba <__sfputc_r+0x16>
 80059b6:	290a      	cmp	r1, #10
 80059b8:	d103      	bne.n	80059c2 <__sfputc_r+0x1e>
 80059ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059be:	f7ff bc90 	b.w	80052e2 <__swbuf_r>
 80059c2:	6813      	ldr	r3, [r2, #0]
 80059c4:	1c58      	adds	r0, r3, #1
 80059c6:	6010      	str	r0, [r2, #0]
 80059c8:	7019      	strb	r1, [r3, #0]
 80059ca:	4608      	mov	r0, r1
 80059cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <__sfputs_r>:
 80059d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	4614      	mov	r4, r2
 80059da:	18d5      	adds	r5, r2, r3
 80059dc:	42ac      	cmp	r4, r5
 80059de:	d101      	bne.n	80059e4 <__sfputs_r+0x12>
 80059e0:	2000      	movs	r0, #0
 80059e2:	e007      	b.n	80059f4 <__sfputs_r+0x22>
 80059e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e8:	463a      	mov	r2, r7
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7ff ffda 	bl	80059a4 <__sfputc_r>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d1f3      	bne.n	80059dc <__sfputs_r+0xa>
 80059f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059f8 <_vfiprintf_r>:
 80059f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059fc:	460d      	mov	r5, r1
 80059fe:	b09d      	sub	sp, #116	; 0x74
 8005a00:	4614      	mov	r4, r2
 8005a02:	4698      	mov	r8, r3
 8005a04:	4606      	mov	r6, r0
 8005a06:	b118      	cbz	r0, 8005a10 <_vfiprintf_r+0x18>
 8005a08:	6a03      	ldr	r3, [r0, #32]
 8005a0a:	b90b      	cbnz	r3, 8005a10 <_vfiprintf_r+0x18>
 8005a0c:	f7ff fb62 	bl	80050d4 <__sinit>
 8005a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a12:	07d9      	lsls	r1, r3, #31
 8005a14:	d405      	bmi.n	8005a22 <_vfiprintf_r+0x2a>
 8005a16:	89ab      	ldrh	r3, [r5, #12]
 8005a18:	059a      	lsls	r2, r3, #22
 8005a1a:	d402      	bmi.n	8005a22 <_vfiprintf_r+0x2a>
 8005a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a1e:	f7ff fd6e 	bl	80054fe <__retarget_lock_acquire_recursive>
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	071b      	lsls	r3, r3, #28
 8005a26:	d501      	bpl.n	8005a2c <_vfiprintf_r+0x34>
 8005a28:	692b      	ldr	r3, [r5, #16]
 8005a2a:	b99b      	cbnz	r3, 8005a54 <_vfiprintf_r+0x5c>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f7ff fc94 	bl	800535c <__swsetup_r>
 8005a34:	b170      	cbz	r0, 8005a54 <_vfiprintf_r+0x5c>
 8005a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a38:	07dc      	lsls	r4, r3, #31
 8005a3a:	d504      	bpl.n	8005a46 <_vfiprintf_r+0x4e>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a40:	b01d      	add	sp, #116	; 0x74
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	0598      	lsls	r0, r3, #22
 8005a4a:	d4f7      	bmi.n	8005a3c <_vfiprintf_r+0x44>
 8005a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4e:	f7ff fd57 	bl	8005500 <__retarget_lock_release_recursive>
 8005a52:	e7f3      	b.n	8005a3c <_vfiprintf_r+0x44>
 8005a54:	2300      	movs	r3, #0
 8005a56:	9309      	str	r3, [sp, #36]	; 0x24
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a62:	2330      	movs	r3, #48	; 0x30
 8005a64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c18 <_vfiprintf_r+0x220>
 8005a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a6c:	f04f 0901 	mov.w	r9, #1
 8005a70:	4623      	mov	r3, r4
 8005a72:	469a      	mov	sl, r3
 8005a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a78:	b10a      	cbz	r2, 8005a7e <_vfiprintf_r+0x86>
 8005a7a:	2a25      	cmp	r2, #37	; 0x25
 8005a7c:	d1f9      	bne.n	8005a72 <_vfiprintf_r+0x7a>
 8005a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a82:	d00b      	beq.n	8005a9c <_vfiprintf_r+0xa4>
 8005a84:	465b      	mov	r3, fp
 8005a86:	4622      	mov	r2, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ffa1 	bl	80059d2 <__sfputs_r>
 8005a90:	3001      	adds	r0, #1
 8005a92:	f000 80a9 	beq.w	8005be8 <_vfiprintf_r+0x1f0>
 8005a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a98:	445a      	add	r2, fp
 8005a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80a1 	beq.w	8005be8 <_vfiprintf_r+0x1f0>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab0:	f10a 0a01 	add.w	sl, sl, #1
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	9307      	str	r3, [sp, #28]
 8005ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005abc:	931a      	str	r3, [sp, #104]	; 0x68
 8005abe:	4654      	mov	r4, sl
 8005ac0:	2205      	movs	r2, #5
 8005ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac6:	4854      	ldr	r0, [pc, #336]	; (8005c18 <_vfiprintf_r+0x220>)
 8005ac8:	f7fa fbba 	bl	8000240 <memchr>
 8005acc:	9a04      	ldr	r2, [sp, #16]
 8005ace:	b9d8      	cbnz	r0, 8005b08 <_vfiprintf_r+0x110>
 8005ad0:	06d1      	lsls	r1, r2, #27
 8005ad2:	bf44      	itt	mi
 8005ad4:	2320      	movmi	r3, #32
 8005ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ada:	0713      	lsls	r3, r2, #28
 8005adc:	bf44      	itt	mi
 8005ade:	232b      	movmi	r3, #43	; 0x2b
 8005ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d015      	beq.n	8005b18 <_vfiprintf_r+0x120>
 8005aec:	9a07      	ldr	r2, [sp, #28]
 8005aee:	4654      	mov	r4, sl
 8005af0:	2000      	movs	r0, #0
 8005af2:	f04f 0c0a 	mov.w	ip, #10
 8005af6:	4621      	mov	r1, r4
 8005af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005afc:	3b30      	subs	r3, #48	; 0x30
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d94d      	bls.n	8005b9e <_vfiprintf_r+0x1a6>
 8005b02:	b1b0      	cbz	r0, 8005b32 <_vfiprintf_r+0x13a>
 8005b04:	9207      	str	r2, [sp, #28]
 8005b06:	e014      	b.n	8005b32 <_vfiprintf_r+0x13a>
 8005b08:	eba0 0308 	sub.w	r3, r0, r8
 8005b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b10:	4313      	orrs	r3, r2
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	46a2      	mov	sl, r4
 8005b16:	e7d2      	b.n	8005abe <_vfiprintf_r+0xc6>
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	1d19      	adds	r1, r3, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	9103      	str	r1, [sp, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bfbb      	ittet	lt
 8005b24:	425b      	neglt	r3, r3
 8005b26:	f042 0202 	orrlt.w	r2, r2, #2
 8005b2a:	9307      	strge	r3, [sp, #28]
 8005b2c:	9307      	strlt	r3, [sp, #28]
 8005b2e:	bfb8      	it	lt
 8005b30:	9204      	strlt	r2, [sp, #16]
 8005b32:	7823      	ldrb	r3, [r4, #0]
 8005b34:	2b2e      	cmp	r3, #46	; 0x2e
 8005b36:	d10c      	bne.n	8005b52 <_vfiprintf_r+0x15a>
 8005b38:	7863      	ldrb	r3, [r4, #1]
 8005b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3c:	d134      	bne.n	8005ba8 <_vfiprintf_r+0x1b0>
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	9203      	str	r2, [sp, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfb8      	it	lt
 8005b4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b4e:	3402      	adds	r4, #2
 8005b50:	9305      	str	r3, [sp, #20]
 8005b52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c28 <_vfiprintf_r+0x230>
 8005b56:	7821      	ldrb	r1, [r4, #0]
 8005b58:	2203      	movs	r2, #3
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	f7fa fb70 	bl	8000240 <memchr>
 8005b60:	b138      	cbz	r0, 8005b72 <_vfiprintf_r+0x17a>
 8005b62:	9b04      	ldr	r3, [sp, #16]
 8005b64:	eba0 000a 	sub.w	r0, r0, sl
 8005b68:	2240      	movs	r2, #64	; 0x40
 8005b6a:	4082      	lsls	r2, r0
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	3401      	adds	r4, #1
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b76:	4829      	ldr	r0, [pc, #164]	; (8005c1c <_vfiprintf_r+0x224>)
 8005b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b7c:	2206      	movs	r2, #6
 8005b7e:	f7fa fb5f 	bl	8000240 <memchr>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d03f      	beq.n	8005c06 <_vfiprintf_r+0x20e>
 8005b86:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <_vfiprintf_r+0x228>)
 8005b88:	bb1b      	cbnz	r3, 8005bd2 <_vfiprintf_r+0x1da>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	f023 0307 	bic.w	r3, r3, #7
 8005b92:	3308      	adds	r3, #8
 8005b94:	9303      	str	r3, [sp, #12]
 8005b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b98:	443b      	add	r3, r7
 8005b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9c:	e768      	b.n	8005a70 <_vfiprintf_r+0x78>
 8005b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	e7a6      	b.n	8005af6 <_vfiprintf_r+0xfe>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	3401      	adds	r4, #1
 8005bac:	9305      	str	r3, [sp, #20]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	f04f 0c0a 	mov.w	ip, #10
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bba:	3a30      	subs	r2, #48	; 0x30
 8005bbc:	2a09      	cmp	r2, #9
 8005bbe:	d903      	bls.n	8005bc8 <_vfiprintf_r+0x1d0>
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0c6      	beq.n	8005b52 <_vfiprintf_r+0x15a>
 8005bc4:	9105      	str	r1, [sp, #20]
 8005bc6:	e7c4      	b.n	8005b52 <_vfiprintf_r+0x15a>
 8005bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bcc:	4604      	mov	r4, r0
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e7f0      	b.n	8005bb4 <_vfiprintf_r+0x1bc>
 8005bd2:	ab03      	add	r3, sp, #12
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <_vfiprintf_r+0x22c>)
 8005bda:	a904      	add	r1, sp, #16
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f3af 8000 	nop.w
 8005be2:	4607      	mov	r7, r0
 8005be4:	1c78      	adds	r0, r7, #1
 8005be6:	d1d6      	bne.n	8005b96 <_vfiprintf_r+0x19e>
 8005be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bea:	07d9      	lsls	r1, r3, #31
 8005bec:	d405      	bmi.n	8005bfa <_vfiprintf_r+0x202>
 8005bee:	89ab      	ldrh	r3, [r5, #12]
 8005bf0:	059a      	lsls	r2, r3, #22
 8005bf2:	d402      	bmi.n	8005bfa <_vfiprintf_r+0x202>
 8005bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf6:	f7ff fc83 	bl	8005500 <__retarget_lock_release_recursive>
 8005bfa:	89ab      	ldrh	r3, [r5, #12]
 8005bfc:	065b      	lsls	r3, r3, #25
 8005bfe:	f53f af1d 	bmi.w	8005a3c <_vfiprintf_r+0x44>
 8005c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c04:	e71c      	b.n	8005a40 <_vfiprintf_r+0x48>
 8005c06:	ab03      	add	r3, sp, #12
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <_vfiprintf_r+0x22c>)
 8005c0e:	a904      	add	r1, sp, #16
 8005c10:	4630      	mov	r0, r6
 8005c12:	f000 f879 	bl	8005d08 <_printf_i>
 8005c16:	e7e4      	b.n	8005be2 <_vfiprintf_r+0x1ea>
 8005c18:	080066c0 	.word	0x080066c0
 8005c1c:	080066ca 	.word	0x080066ca
 8005c20:	00000000 	.word	0x00000000
 8005c24:	080059d3 	.word	0x080059d3
 8005c28:	080066c6 	.word	0x080066c6

08005c2c <_printf_common>:
 8005c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c30:	4616      	mov	r6, r2
 8005c32:	4699      	mov	r9, r3
 8005c34:	688a      	ldr	r2, [r1, #8]
 8005c36:	690b      	ldr	r3, [r1, #16]
 8005c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	bfb8      	it	lt
 8005c40:	4613      	movlt	r3, r2
 8005c42:	6033      	str	r3, [r6, #0]
 8005c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c48:	4607      	mov	r7, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	b10a      	cbz	r2, 8005c52 <_printf_common+0x26>
 8005c4e:	3301      	adds	r3, #1
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	0699      	lsls	r1, r3, #26
 8005c56:	bf42      	ittt	mi
 8005c58:	6833      	ldrmi	r3, [r6, #0]
 8005c5a:	3302      	addmi	r3, #2
 8005c5c:	6033      	strmi	r3, [r6, #0]
 8005c5e:	6825      	ldr	r5, [r4, #0]
 8005c60:	f015 0506 	ands.w	r5, r5, #6
 8005c64:	d106      	bne.n	8005c74 <_printf_common+0x48>
 8005c66:	f104 0a19 	add.w	sl, r4, #25
 8005c6a:	68e3      	ldr	r3, [r4, #12]
 8005c6c:	6832      	ldr	r2, [r6, #0]
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	dc26      	bgt.n	8005cc2 <_printf_common+0x96>
 8005c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c78:	1e13      	subs	r3, r2, #0
 8005c7a:	6822      	ldr	r2, [r4, #0]
 8005c7c:	bf18      	it	ne
 8005c7e:	2301      	movne	r3, #1
 8005c80:	0692      	lsls	r2, r2, #26
 8005c82:	d42b      	bmi.n	8005cdc <_printf_common+0xb0>
 8005c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c88:	4649      	mov	r1, r9
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c0      	blx	r8
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d01e      	beq.n	8005cd0 <_printf_common+0xa4>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	6922      	ldr	r2, [r4, #16]
 8005c96:	f003 0306 	and.w	r3, r3, #6
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	bf02      	ittt	eq
 8005c9e:	68e5      	ldreq	r5, [r4, #12]
 8005ca0:	6833      	ldreq	r3, [r6, #0]
 8005ca2:	1aed      	subeq	r5, r5, r3
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	bf0c      	ite	eq
 8005ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cac:	2500      	movne	r5, #0
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	bfc4      	itt	gt
 8005cb2:	1a9b      	subgt	r3, r3, r2
 8005cb4:	18ed      	addgt	r5, r5, r3
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	341a      	adds	r4, #26
 8005cba:	42b5      	cmp	r5, r6
 8005cbc:	d11a      	bne.n	8005cf4 <_printf_common+0xc8>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e008      	b.n	8005cd4 <_printf_common+0xa8>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4652      	mov	r2, sl
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4638      	mov	r0, r7
 8005cca:	47c0      	blx	r8
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d103      	bne.n	8005cd8 <_printf_common+0xac>
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	3501      	adds	r5, #1
 8005cda:	e7c6      	b.n	8005c6a <_printf_common+0x3e>
 8005cdc:	18e1      	adds	r1, r4, r3
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	2030      	movs	r0, #48	; 0x30
 8005ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ce6:	4422      	add	r2, r4
 8005ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	e7c7      	b.n	8005c84 <_printf_common+0x58>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	47c0      	blx	r8
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d0e6      	beq.n	8005cd0 <_printf_common+0xa4>
 8005d02:	3601      	adds	r6, #1
 8005d04:	e7d9      	b.n	8005cba <_printf_common+0x8e>
	...

08005d08 <_printf_i>:
 8005d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	7e0f      	ldrb	r7, [r1, #24]
 8005d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d10:	2f78      	cmp	r7, #120	; 0x78
 8005d12:	4691      	mov	r9, r2
 8005d14:	4680      	mov	r8, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	469a      	mov	sl, r3
 8005d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d1e:	d807      	bhi.n	8005d30 <_printf_i+0x28>
 8005d20:	2f62      	cmp	r7, #98	; 0x62
 8005d22:	d80a      	bhi.n	8005d3a <_printf_i+0x32>
 8005d24:	2f00      	cmp	r7, #0
 8005d26:	f000 80d4 	beq.w	8005ed2 <_printf_i+0x1ca>
 8005d2a:	2f58      	cmp	r7, #88	; 0x58
 8005d2c:	f000 80c0 	beq.w	8005eb0 <_printf_i+0x1a8>
 8005d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d38:	e03a      	b.n	8005db0 <_printf_i+0xa8>
 8005d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d3e:	2b15      	cmp	r3, #21
 8005d40:	d8f6      	bhi.n	8005d30 <_printf_i+0x28>
 8005d42:	a101      	add	r1, pc, #4	; (adr r1, 8005d48 <_printf_i+0x40>)
 8005d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d48:	08005da1 	.word	0x08005da1
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005d31 	.word	0x08005d31
 8005d54:	08005d31 	.word	0x08005d31
 8005d58:	08005d31 	.word	0x08005d31
 8005d5c:	08005d31 	.word	0x08005d31
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d31 	.word	0x08005d31
 8005d68:	08005d31 	.word	0x08005d31
 8005d6c:	08005d31 	.word	0x08005d31
 8005d70:	08005d31 	.word	0x08005d31
 8005d74:	08005eb9 	.word	0x08005eb9
 8005d78:	08005de1 	.word	0x08005de1
 8005d7c:	08005e73 	.word	0x08005e73
 8005d80:	08005d31 	.word	0x08005d31
 8005d84:	08005d31 	.word	0x08005d31
 8005d88:	08005edb 	.word	0x08005edb
 8005d8c:	08005d31 	.word	0x08005d31
 8005d90:	08005de1 	.word	0x08005de1
 8005d94:	08005d31 	.word	0x08005d31
 8005d98:	08005d31 	.word	0x08005d31
 8005d9c:	08005e7b 	.word	0x08005e7b
 8005da0:	682b      	ldr	r3, [r5, #0]
 8005da2:	1d1a      	adds	r2, r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	602a      	str	r2, [r5, #0]
 8005da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005db0:	2301      	movs	r3, #1
 8005db2:	e09f      	b.n	8005ef4 <_printf_i+0x1ec>
 8005db4:	6820      	ldr	r0, [r4, #0]
 8005db6:	682b      	ldr	r3, [r5, #0]
 8005db8:	0607      	lsls	r7, r0, #24
 8005dba:	f103 0104 	add.w	r1, r3, #4
 8005dbe:	6029      	str	r1, [r5, #0]
 8005dc0:	d501      	bpl.n	8005dc6 <_printf_i+0xbe>
 8005dc2:	681e      	ldr	r6, [r3, #0]
 8005dc4:	e003      	b.n	8005dce <_printf_i+0xc6>
 8005dc6:	0646      	lsls	r6, r0, #25
 8005dc8:	d5fb      	bpl.n	8005dc2 <_printf_i+0xba>
 8005dca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	da03      	bge.n	8005dda <_printf_i+0xd2>
 8005dd2:	232d      	movs	r3, #45	; 0x2d
 8005dd4:	4276      	negs	r6, r6
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dda:	485a      	ldr	r0, [pc, #360]	; (8005f44 <_printf_i+0x23c>)
 8005ddc:	230a      	movs	r3, #10
 8005dde:	e012      	b.n	8005e06 <_printf_i+0xfe>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	6820      	ldr	r0, [r4, #0]
 8005de4:	1d19      	adds	r1, r3, #4
 8005de6:	6029      	str	r1, [r5, #0]
 8005de8:	0605      	lsls	r5, r0, #24
 8005dea:	d501      	bpl.n	8005df0 <_printf_i+0xe8>
 8005dec:	681e      	ldr	r6, [r3, #0]
 8005dee:	e002      	b.n	8005df6 <_printf_i+0xee>
 8005df0:	0641      	lsls	r1, r0, #25
 8005df2:	d5fb      	bpl.n	8005dec <_printf_i+0xe4>
 8005df4:	881e      	ldrh	r6, [r3, #0]
 8005df6:	4853      	ldr	r0, [pc, #332]	; (8005f44 <_printf_i+0x23c>)
 8005df8:	2f6f      	cmp	r7, #111	; 0x6f
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2308      	moveq	r3, #8
 8005dfe:	230a      	movne	r3, #10
 8005e00:	2100      	movs	r1, #0
 8005e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e06:	6865      	ldr	r5, [r4, #4]
 8005e08:	60a5      	str	r5, [r4, #8]
 8005e0a:	2d00      	cmp	r5, #0
 8005e0c:	bfa2      	ittt	ge
 8005e0e:	6821      	ldrge	r1, [r4, #0]
 8005e10:	f021 0104 	bicge.w	r1, r1, #4
 8005e14:	6021      	strge	r1, [r4, #0]
 8005e16:	b90e      	cbnz	r6, 8005e1c <_printf_i+0x114>
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	d04b      	beq.n	8005eb4 <_printf_i+0x1ac>
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e22:	fb03 6711 	mls	r7, r3, r1, r6
 8005e26:	5dc7      	ldrb	r7, [r0, r7]
 8005e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e2c:	4637      	mov	r7, r6
 8005e2e:	42bb      	cmp	r3, r7
 8005e30:	460e      	mov	r6, r1
 8005e32:	d9f4      	bls.n	8005e1e <_printf_i+0x116>
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d10b      	bne.n	8005e50 <_printf_i+0x148>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	07de      	lsls	r6, r3, #31
 8005e3c:	d508      	bpl.n	8005e50 <_printf_i+0x148>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	6861      	ldr	r1, [r4, #4]
 8005e42:	4299      	cmp	r1, r3
 8005e44:	bfde      	ittt	le
 8005e46:	2330      	movle	r3, #48	; 0x30
 8005e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e50:	1b52      	subs	r2, r2, r5
 8005e52:	6122      	str	r2, [r4, #16]
 8005e54:	f8cd a000 	str.w	sl, [sp]
 8005e58:	464b      	mov	r3, r9
 8005e5a:	aa03      	add	r2, sp, #12
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f7ff fee4 	bl	8005c2c <_printf_common>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d14a      	bne.n	8005efe <_printf_i+0x1f6>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e6c:	b004      	add	sp, #16
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	4833      	ldr	r0, [pc, #204]	; (8005f48 <_printf_i+0x240>)
 8005e7c:	2778      	movs	r7, #120	; 0x78
 8005e7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	6829      	ldr	r1, [r5, #0]
 8005e86:	061f      	lsls	r7, r3, #24
 8005e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e8c:	d402      	bmi.n	8005e94 <_printf_i+0x18c>
 8005e8e:	065f      	lsls	r7, r3, #25
 8005e90:	bf48      	it	mi
 8005e92:	b2b6      	uxthmi	r6, r6
 8005e94:	07df      	lsls	r7, r3, #31
 8005e96:	bf48      	it	mi
 8005e98:	f043 0320 	orrmi.w	r3, r3, #32
 8005e9c:	6029      	str	r1, [r5, #0]
 8005e9e:	bf48      	it	mi
 8005ea0:	6023      	strmi	r3, [r4, #0]
 8005ea2:	b91e      	cbnz	r6, 8005eac <_printf_i+0x1a4>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	f023 0320 	bic.w	r3, r3, #32
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	2310      	movs	r3, #16
 8005eae:	e7a7      	b.n	8005e00 <_printf_i+0xf8>
 8005eb0:	4824      	ldr	r0, [pc, #144]	; (8005f44 <_printf_i+0x23c>)
 8005eb2:	e7e4      	b.n	8005e7e <_printf_i+0x176>
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	e7bd      	b.n	8005e34 <_printf_i+0x12c>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6826      	ldr	r6, [r4, #0]
 8005ebc:	6961      	ldr	r1, [r4, #20]
 8005ebe:	1d18      	adds	r0, r3, #4
 8005ec0:	6028      	str	r0, [r5, #0]
 8005ec2:	0635      	lsls	r5, r6, #24
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	d501      	bpl.n	8005ecc <_printf_i+0x1c4>
 8005ec8:	6019      	str	r1, [r3, #0]
 8005eca:	e002      	b.n	8005ed2 <_printf_i+0x1ca>
 8005ecc:	0670      	lsls	r0, r6, #25
 8005ece:	d5fb      	bpl.n	8005ec8 <_printf_i+0x1c0>
 8005ed0:	8019      	strh	r1, [r3, #0]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6123      	str	r3, [r4, #16]
 8005ed6:	4615      	mov	r5, r2
 8005ed8:	e7bc      	b.n	8005e54 <_printf_i+0x14c>
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	1d1a      	adds	r2, r3, #4
 8005ede:	602a      	str	r2, [r5, #0]
 8005ee0:	681d      	ldr	r5, [r3, #0]
 8005ee2:	6862      	ldr	r2, [r4, #4]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f7fa f9aa 	bl	8000240 <memchr>
 8005eec:	b108      	cbz	r0, 8005ef2 <_printf_i+0x1ea>
 8005eee:	1b40      	subs	r0, r0, r5
 8005ef0:	6060      	str	r0, [r4, #4]
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	6123      	str	r3, [r4, #16]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efc:	e7aa      	b.n	8005e54 <_printf_i+0x14c>
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	462a      	mov	r2, r5
 8005f02:	4649      	mov	r1, r9
 8005f04:	4640      	mov	r0, r8
 8005f06:	47d0      	blx	sl
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d0ad      	beq.n	8005e68 <_printf_i+0x160>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	079b      	lsls	r3, r3, #30
 8005f10:	d413      	bmi.n	8005f3a <_printf_i+0x232>
 8005f12:	68e0      	ldr	r0, [r4, #12]
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	4298      	cmp	r0, r3
 8005f18:	bfb8      	it	lt
 8005f1a:	4618      	movlt	r0, r3
 8005f1c:	e7a6      	b.n	8005e6c <_printf_i+0x164>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4632      	mov	r2, r6
 8005f22:	4649      	mov	r1, r9
 8005f24:	4640      	mov	r0, r8
 8005f26:	47d0      	blx	sl
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d09d      	beq.n	8005e68 <_printf_i+0x160>
 8005f2c:	3501      	adds	r5, #1
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	9903      	ldr	r1, [sp, #12]
 8005f32:	1a5b      	subs	r3, r3, r1
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	dcf2      	bgt.n	8005f1e <_printf_i+0x216>
 8005f38:	e7eb      	b.n	8005f12 <_printf_i+0x20a>
 8005f3a:	2500      	movs	r5, #0
 8005f3c:	f104 0619 	add.w	r6, r4, #25
 8005f40:	e7f5      	b.n	8005f2e <_printf_i+0x226>
 8005f42:	bf00      	nop
 8005f44:	080066d1 	.word	0x080066d1
 8005f48:	080066e2 	.word	0x080066e2

08005f4c <__sflush_r>:
 8005f4c:	898a      	ldrh	r2, [r1, #12]
 8005f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f52:	4605      	mov	r5, r0
 8005f54:	0710      	lsls	r0, r2, #28
 8005f56:	460c      	mov	r4, r1
 8005f58:	d458      	bmi.n	800600c <__sflush_r+0xc0>
 8005f5a:	684b      	ldr	r3, [r1, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dc05      	bgt.n	8005f6c <__sflush_r+0x20>
 8005f60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dc02      	bgt.n	8005f6c <__sflush_r+0x20>
 8005f66:	2000      	movs	r0, #0
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f6e:	2e00      	cmp	r6, #0
 8005f70:	d0f9      	beq.n	8005f66 <__sflush_r+0x1a>
 8005f72:	2300      	movs	r3, #0
 8005f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f78:	682f      	ldr	r7, [r5, #0]
 8005f7a:	6a21      	ldr	r1, [r4, #32]
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	d032      	beq.n	8005fe6 <__sflush_r+0x9a>
 8005f80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	075a      	lsls	r2, r3, #29
 8005f86:	d505      	bpl.n	8005f94 <__sflush_r+0x48>
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	1ac0      	subs	r0, r0, r3
 8005f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f8e:	b10b      	cbz	r3, 8005f94 <__sflush_r+0x48>
 8005f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f92:	1ac0      	subs	r0, r0, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	4602      	mov	r2, r0
 8005f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f9a:	6a21      	ldr	r1, [r4, #32]
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b0      	blx	r6
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	d106      	bne.n	8005fb4 <__sflush_r+0x68>
 8005fa6:	6829      	ldr	r1, [r5, #0]
 8005fa8:	291d      	cmp	r1, #29
 8005faa:	d82b      	bhi.n	8006004 <__sflush_r+0xb8>
 8005fac:	4a29      	ldr	r2, [pc, #164]	; (8006054 <__sflush_r+0x108>)
 8005fae:	410a      	asrs	r2, r1
 8005fb0:	07d6      	lsls	r6, r2, #31
 8005fb2:	d427      	bmi.n	8006004 <__sflush_r+0xb8>
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	6062      	str	r2, [r4, #4]
 8005fb8:	04d9      	lsls	r1, r3, #19
 8005fba:	6922      	ldr	r2, [r4, #16]
 8005fbc:	6022      	str	r2, [r4, #0]
 8005fbe:	d504      	bpl.n	8005fca <__sflush_r+0x7e>
 8005fc0:	1c42      	adds	r2, r0, #1
 8005fc2:	d101      	bne.n	8005fc8 <__sflush_r+0x7c>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b903      	cbnz	r3, 8005fca <__sflush_r+0x7e>
 8005fc8:	6560      	str	r0, [r4, #84]	; 0x54
 8005fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fcc:	602f      	str	r7, [r5, #0]
 8005fce:	2900      	cmp	r1, #0
 8005fd0:	d0c9      	beq.n	8005f66 <__sflush_r+0x1a>
 8005fd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd6:	4299      	cmp	r1, r3
 8005fd8:	d002      	beq.n	8005fe0 <__sflush_r+0x94>
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f7ff fa92 	bl	8005504 <_free_r>
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	6360      	str	r0, [r4, #52]	; 0x34
 8005fe4:	e7c0      	b.n	8005f68 <__sflush_r+0x1c>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b0      	blx	r6
 8005fec:	1c41      	adds	r1, r0, #1
 8005fee:	d1c8      	bne.n	8005f82 <__sflush_r+0x36>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0c5      	beq.n	8005f82 <__sflush_r+0x36>
 8005ff6:	2b1d      	cmp	r3, #29
 8005ff8:	d001      	beq.n	8005ffe <__sflush_r+0xb2>
 8005ffa:	2b16      	cmp	r3, #22
 8005ffc:	d101      	bne.n	8006002 <__sflush_r+0xb6>
 8005ffe:	602f      	str	r7, [r5, #0]
 8006000:	e7b1      	b.n	8005f66 <__sflush_r+0x1a>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006008:	81a3      	strh	r3, [r4, #12]
 800600a:	e7ad      	b.n	8005f68 <__sflush_r+0x1c>
 800600c:	690f      	ldr	r7, [r1, #16]
 800600e:	2f00      	cmp	r7, #0
 8006010:	d0a9      	beq.n	8005f66 <__sflush_r+0x1a>
 8006012:	0793      	lsls	r3, r2, #30
 8006014:	680e      	ldr	r6, [r1, #0]
 8006016:	bf08      	it	eq
 8006018:	694b      	ldreq	r3, [r1, #20]
 800601a:	600f      	str	r7, [r1, #0]
 800601c:	bf18      	it	ne
 800601e:	2300      	movne	r3, #0
 8006020:	eba6 0807 	sub.w	r8, r6, r7
 8006024:	608b      	str	r3, [r1, #8]
 8006026:	f1b8 0f00 	cmp.w	r8, #0
 800602a:	dd9c      	ble.n	8005f66 <__sflush_r+0x1a>
 800602c:	6a21      	ldr	r1, [r4, #32]
 800602e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006030:	4643      	mov	r3, r8
 8006032:	463a      	mov	r2, r7
 8006034:	4628      	mov	r0, r5
 8006036:	47b0      	blx	r6
 8006038:	2800      	cmp	r0, #0
 800603a:	dc06      	bgt.n	800604a <__sflush_r+0xfe>
 800603c:	89a3      	ldrh	r3, [r4, #12]
 800603e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006048:	e78e      	b.n	8005f68 <__sflush_r+0x1c>
 800604a:	4407      	add	r7, r0
 800604c:	eba8 0800 	sub.w	r8, r8, r0
 8006050:	e7e9      	b.n	8006026 <__sflush_r+0xda>
 8006052:	bf00      	nop
 8006054:	dfbffffe 	.word	0xdfbffffe

08006058 <_fflush_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	690b      	ldr	r3, [r1, #16]
 800605c:	4605      	mov	r5, r0
 800605e:	460c      	mov	r4, r1
 8006060:	b913      	cbnz	r3, 8006068 <_fflush_r+0x10>
 8006062:	2500      	movs	r5, #0
 8006064:	4628      	mov	r0, r5
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	b118      	cbz	r0, 8006072 <_fflush_r+0x1a>
 800606a:	6a03      	ldr	r3, [r0, #32]
 800606c:	b90b      	cbnz	r3, 8006072 <_fflush_r+0x1a>
 800606e:	f7ff f831 	bl	80050d4 <__sinit>
 8006072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f3      	beq.n	8006062 <_fflush_r+0xa>
 800607a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800607c:	07d0      	lsls	r0, r2, #31
 800607e:	d404      	bmi.n	800608a <_fflush_r+0x32>
 8006080:	0599      	lsls	r1, r3, #22
 8006082:	d402      	bmi.n	800608a <_fflush_r+0x32>
 8006084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006086:	f7ff fa3a 	bl	80054fe <__retarget_lock_acquire_recursive>
 800608a:	4628      	mov	r0, r5
 800608c:	4621      	mov	r1, r4
 800608e:	f7ff ff5d 	bl	8005f4c <__sflush_r>
 8006092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006094:	07da      	lsls	r2, r3, #31
 8006096:	4605      	mov	r5, r0
 8006098:	d4e4      	bmi.n	8006064 <_fflush_r+0xc>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	059b      	lsls	r3, r3, #22
 800609e:	d4e1      	bmi.n	8006064 <_fflush_r+0xc>
 80060a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a2:	f7ff fa2d 	bl	8005500 <__retarget_lock_release_recursive>
 80060a6:	e7dd      	b.n	8006064 <_fflush_r+0xc>

080060a8 <__swhatbuf_r>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	460c      	mov	r4, r1
 80060ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b0:	2900      	cmp	r1, #0
 80060b2:	b096      	sub	sp, #88	; 0x58
 80060b4:	4615      	mov	r5, r2
 80060b6:	461e      	mov	r6, r3
 80060b8:	da0d      	bge.n	80060d6 <__swhatbuf_r+0x2e>
 80060ba:	89a3      	ldrh	r3, [r4, #12]
 80060bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060c0:	f04f 0100 	mov.w	r1, #0
 80060c4:	bf0c      	ite	eq
 80060c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060ca:	2340      	movne	r3, #64	; 0x40
 80060cc:	2000      	movs	r0, #0
 80060ce:	6031      	str	r1, [r6, #0]
 80060d0:	602b      	str	r3, [r5, #0]
 80060d2:	b016      	add	sp, #88	; 0x58
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	466a      	mov	r2, sp
 80060d8:	f000 f862 	bl	80061a0 <_fstat_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	dbec      	blt.n	80060ba <__swhatbuf_r+0x12>
 80060e0:	9901      	ldr	r1, [sp, #4]
 80060e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80060e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80060ea:	4259      	negs	r1, r3
 80060ec:	4159      	adcs	r1, r3
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	e7eb      	b.n	80060cc <__swhatbuf_r+0x24>

080060f4 <__smakebuf_r>:
 80060f4:	898b      	ldrh	r3, [r1, #12]
 80060f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060f8:	079d      	lsls	r5, r3, #30
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	d507      	bpl.n	8006110 <__smakebuf_r+0x1c>
 8006100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	2301      	movs	r3, #1
 800610a:	6163      	str	r3, [r4, #20]
 800610c:	b002      	add	sp, #8
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	ab01      	add	r3, sp, #4
 8006112:	466a      	mov	r2, sp
 8006114:	f7ff ffc8 	bl	80060a8 <__swhatbuf_r>
 8006118:	9900      	ldr	r1, [sp, #0]
 800611a:	4605      	mov	r5, r0
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff fa5d 	bl	80055dc <_malloc_r>
 8006122:	b948      	cbnz	r0, 8006138 <__smakebuf_r+0x44>
 8006124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006128:	059a      	lsls	r2, r3, #22
 800612a:	d4ef      	bmi.n	800610c <__smakebuf_r+0x18>
 800612c:	f023 0303 	bic.w	r3, r3, #3
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	81a3      	strh	r3, [r4, #12]
 8006136:	e7e3      	b.n	8006100 <__smakebuf_r+0xc>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	6020      	str	r0, [r4, #0]
 800613c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	9b00      	ldr	r3, [sp, #0]
 8006144:	6163      	str	r3, [r4, #20]
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	6120      	str	r0, [r4, #16]
 800614a:	b15b      	cbz	r3, 8006164 <__smakebuf_r+0x70>
 800614c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006150:	4630      	mov	r0, r6
 8006152:	f000 f837 	bl	80061c4 <_isatty_r>
 8006156:	b128      	cbz	r0, 8006164 <__smakebuf_r+0x70>
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f023 0303 	bic.w	r3, r3, #3
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	431d      	orrs	r5, r3
 8006168:	81a5      	strh	r5, [r4, #12]
 800616a:	e7cf      	b.n	800610c <__smakebuf_r+0x18>

0800616c <memmove>:
 800616c:	4288      	cmp	r0, r1
 800616e:	b510      	push	{r4, lr}
 8006170:	eb01 0402 	add.w	r4, r1, r2
 8006174:	d902      	bls.n	800617c <memmove+0x10>
 8006176:	4284      	cmp	r4, r0
 8006178:	4623      	mov	r3, r4
 800617a:	d807      	bhi.n	800618c <memmove+0x20>
 800617c:	1e43      	subs	r3, r0, #1
 800617e:	42a1      	cmp	r1, r4
 8006180:	d008      	beq.n	8006194 <memmove+0x28>
 8006182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006186:	f803 2f01 	strb.w	r2, [r3, #1]!
 800618a:	e7f8      	b.n	800617e <memmove+0x12>
 800618c:	4402      	add	r2, r0
 800618e:	4601      	mov	r1, r0
 8006190:	428a      	cmp	r2, r1
 8006192:	d100      	bne.n	8006196 <memmove+0x2a>
 8006194:	bd10      	pop	{r4, pc}
 8006196:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800619a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800619e:	e7f7      	b.n	8006190 <memmove+0x24>

080061a0 <_fstat_r>:
 80061a0:	b538      	push	{r3, r4, r5, lr}
 80061a2:	4d07      	ldr	r5, [pc, #28]	; (80061c0 <_fstat_r+0x20>)
 80061a4:	2300      	movs	r3, #0
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	f7fb f8e0 	bl	8001372 <_fstat>
 80061b2:	1c43      	adds	r3, r0, #1
 80061b4:	d102      	bne.n	80061bc <_fstat_r+0x1c>
 80061b6:	682b      	ldr	r3, [r5, #0]
 80061b8:	b103      	cbz	r3, 80061bc <_fstat_r+0x1c>
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	bf00      	nop
 80061c0:	20000494 	.word	0x20000494

080061c4 <_isatty_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4d06      	ldr	r5, [pc, #24]	; (80061e0 <_isatty_r+0x1c>)
 80061c8:	2300      	movs	r3, #0
 80061ca:	4604      	mov	r4, r0
 80061cc:	4608      	mov	r0, r1
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	f7fb f8df 	bl	8001392 <_isatty>
 80061d4:	1c43      	adds	r3, r0, #1
 80061d6:	d102      	bne.n	80061de <_isatty_r+0x1a>
 80061d8:	682b      	ldr	r3, [r5, #0]
 80061da:	b103      	cbz	r3, 80061de <_isatty_r+0x1a>
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	bd38      	pop	{r3, r4, r5, pc}
 80061e0:	20000494 	.word	0x20000494

080061e4 <_sbrk_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	4d06      	ldr	r5, [pc, #24]	; (8006200 <_sbrk_r+0x1c>)
 80061e8:	2300      	movs	r3, #0
 80061ea:	4604      	mov	r4, r0
 80061ec:	4608      	mov	r0, r1
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	f7fb f8e8 	bl	80013c4 <_sbrk>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_sbrk_r+0x1a>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_sbrk_r+0x1a>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	20000494 	.word	0x20000494

08006204 <memcpy>:
 8006204:	440a      	add	r2, r1
 8006206:	4291      	cmp	r1, r2
 8006208:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800620c:	d100      	bne.n	8006210 <memcpy+0xc>
 800620e:	4770      	bx	lr
 8006210:	b510      	push	{r4, lr}
 8006212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800621a:	4291      	cmp	r1, r2
 800621c:	d1f9      	bne.n	8006212 <memcpy+0xe>
 800621e:	bd10      	pop	{r4, pc}

08006220 <_realloc_r>:
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	4680      	mov	r8, r0
 8006226:	4614      	mov	r4, r2
 8006228:	460e      	mov	r6, r1
 800622a:	b921      	cbnz	r1, 8006236 <_realloc_r+0x16>
 800622c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006230:	4611      	mov	r1, r2
 8006232:	f7ff b9d3 	b.w	80055dc <_malloc_r>
 8006236:	b92a      	cbnz	r2, 8006244 <_realloc_r+0x24>
 8006238:	f7ff f964 	bl	8005504 <_free_r>
 800623c:	4625      	mov	r5, r4
 800623e:	4628      	mov	r0, r5
 8006240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006244:	f000 f81b 	bl	800627e <_malloc_usable_size_r>
 8006248:	4284      	cmp	r4, r0
 800624a:	4607      	mov	r7, r0
 800624c:	d802      	bhi.n	8006254 <_realloc_r+0x34>
 800624e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006252:	d812      	bhi.n	800627a <_realloc_r+0x5a>
 8006254:	4621      	mov	r1, r4
 8006256:	4640      	mov	r0, r8
 8006258:	f7ff f9c0 	bl	80055dc <_malloc_r>
 800625c:	4605      	mov	r5, r0
 800625e:	2800      	cmp	r0, #0
 8006260:	d0ed      	beq.n	800623e <_realloc_r+0x1e>
 8006262:	42bc      	cmp	r4, r7
 8006264:	4622      	mov	r2, r4
 8006266:	4631      	mov	r1, r6
 8006268:	bf28      	it	cs
 800626a:	463a      	movcs	r2, r7
 800626c:	f7ff ffca 	bl	8006204 <memcpy>
 8006270:	4631      	mov	r1, r6
 8006272:	4640      	mov	r0, r8
 8006274:	f7ff f946 	bl	8005504 <_free_r>
 8006278:	e7e1      	b.n	800623e <_realloc_r+0x1e>
 800627a:	4635      	mov	r5, r6
 800627c:	e7df      	b.n	800623e <_realloc_r+0x1e>

0800627e <_malloc_usable_size_r>:
 800627e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006282:	1f18      	subs	r0, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfbc      	itt	lt
 8006288:	580b      	ldrlt	r3, [r1, r0]
 800628a:	18c0      	addlt	r0, r0, r3
 800628c:	4770      	bx	lr
	...

08006290 <_init>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr

0800629c <_fini>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr
